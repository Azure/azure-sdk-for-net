// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Analytics.Purview.Catalog
{
    /// <summary> The PurviewGlossaries service client. </summary>
    public partial class PurviewGlossaries
    {
        private static readonly string[] AuthorizationScopes = new string[] { "https://purview.azure.net/.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of PurviewGlossaries for mocking. </summary>
        protected PurviewGlossaries()
        {
        }

        /// <summary> Initializes a new instance of PurviewGlossaries. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="tokenCredential"> The token credential to copy. </param>
        /// <param name="endpoint"> The catalog endpoint of your Purview account. Example: https://{accountName}.purview.azure.com. </param>
        /// <param name="apiVersion"> Api Version. </param>
        internal PurviewGlossaries(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, TokenCredential tokenCredential, Uri endpoint, string apiVersion)
        {
            ClientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
            _tokenCredential = tokenCredential;
            _endpoint = endpoint;
            _apiVersion = apiVersion;
        }

        /// <summary> Get all glossaries registered with Atlas. </summary>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="ignoreTermsAndCategories"> Whether ignore terms and categories. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/PurviewCatalog/PurviewGlossary/GetGlossaries
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///       typeName: string, # Optional. <Description>The name of the type.</Description>
        ///       lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///       entityGuid: string, # Optional. <Description>The GUID of the entity.</Description>
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///       removePropagationsOnEntityDelete: boolean, # Optional. <Description>Determines if propagations will be removed on entity deletion.</Description>
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. <Description>The end of the time boundary.</Description>
        ///           startTime: string, # Optional. <Description>The start of the time boundary.</Description>
        ///           timeZone: string, # Optional. <Description>The timezone of the time boundary.</Description>
        ///         }
        ///       ], # Optional. <Description>An array of time boundaries indicating validity periods.</Description>
        ///       source: string, # Optional. <Description>indicate the source who create the classification detail</Description>
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>more detail on source information</Description>
        ///     }
        ///   ], # Optional. <Description>An array of classifications.</Description>
        ///   longDescription: string, # Optional. <Description>The long version description.</Description>
        ///   name: string, # Optional. <Description>The name of the glossary object.</Description>
        ///   qualifiedName: string, # Optional. <Description>The qualified name of the glossary object.</Description>
        ///   shortDescription: string, # Optional. <Description>The short version of description.</Description>
        ///   lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///   guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///   categories: [
        ///     {
        ///       categoryGuid: string, # Optional. <Description>The GUID of the category.</Description>
        ///       description: string, # Optional. <Description>The description of the category header.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       parentCategoryGuid: string, # Optional. <Description>The GUID of the parent category.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of categories.</Description>
        ///   language: string, # Optional. <Description>The language of the glossary.</Description>
        ///   terms: [
        ///     {
        ///       description: string, # Optional. <Description>The description of the related term.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       expression: string, # Optional. <Description>The expression of the term.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       source: string, # Optional. <Description>The source of the term.</Description>
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///       steward: string, # Optional. <Description>The steward of the term.</Description>
        ///       termGuid: string, # Optional. <Description>The GUID of the term.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of related term headers.</Description>
        ///   usage: string, # Optional. <Description>The usage of the glossary.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetGlossariesAsync(int? limit = null, int? offset = null, string sort = null, bool? ignoreTermsAndCategories = null, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.GetGlossaries");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetGlossariesRequest(limit, offset, sort, ignoreTermsAndCategories, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get all glossaries registered with Atlas. </summary>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="ignoreTermsAndCategories"> Whether ignore terms and categories. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/PurviewCatalog/PurviewGlossary/GetGlossaries
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///       typeName: string, # Optional. <Description>The name of the type.</Description>
        ///       lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///       entityGuid: string, # Optional. <Description>The GUID of the entity.</Description>
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///       removePropagationsOnEntityDelete: boolean, # Optional. <Description>Determines if propagations will be removed on entity deletion.</Description>
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. <Description>The end of the time boundary.</Description>
        ///           startTime: string, # Optional. <Description>The start of the time boundary.</Description>
        ///           timeZone: string, # Optional. <Description>The timezone of the time boundary.</Description>
        ///         }
        ///       ], # Optional. <Description>An array of time boundaries indicating validity periods.</Description>
        ///       source: string, # Optional. <Description>indicate the source who create the classification detail</Description>
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>more detail on source information</Description>
        ///     }
        ///   ], # Optional. <Description>An array of classifications.</Description>
        ///   longDescription: string, # Optional. <Description>The long version description.</Description>
        ///   name: string, # Optional. <Description>The name of the glossary object.</Description>
        ///   qualifiedName: string, # Optional. <Description>The qualified name of the glossary object.</Description>
        ///   shortDescription: string, # Optional. <Description>The short version of description.</Description>
        ///   lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///   guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///   categories: [
        ///     {
        ///       categoryGuid: string, # Optional. <Description>The GUID of the category.</Description>
        ///       description: string, # Optional. <Description>The description of the category header.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       parentCategoryGuid: string, # Optional. <Description>The GUID of the parent category.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of categories.</Description>
        ///   language: string, # Optional. <Description>The language of the glossary.</Description>
        ///   terms: [
        ///     {
        ///       description: string, # Optional. <Description>The description of the related term.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       expression: string, # Optional. <Description>The expression of the term.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       source: string, # Optional. <Description>The source of the term.</Description>
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///       steward: string, # Optional. <Description>The steward of the term.</Description>
        ///       termGuid: string, # Optional. <Description>The GUID of the term.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of related term headers.</Description>
        ///   usage: string, # Optional. <Description>The usage of the glossary.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetGlossaries(int? limit = null, int? offset = null, string sort = null, bool? ignoreTermsAndCategories = null, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.GetGlossaries");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetGlossariesRequest(limit, offset, sort, ignoreTermsAndCategories, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a glossary. </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/PurviewCatalog/PurviewGlossary/CreateGlossary
        /// Schema for <c>AtlasGlossaryExtInfo Request Body</c>:
        /// <code>{
        ///   categories: [
        ///     {
        ///       categoryGuid: string, # Optional. <Description>The GUID of the category.</Description>
        ///       description: string, # Optional. <Description>The description of the category header.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       parentCategoryGuid: string, # Optional. <Description>The GUID of the parent category.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of categories.</Description>
        ///   language: string, # Optional. <Description>The language of the glossary.</Description>
        ///   terms: [
        ///     {
        ///       description: string, # Optional. <Description>The description of the related term.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       expression: string, # Optional. <Description>The expression of the term.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       source: string, # Optional. <Description>The source of the term.</Description>
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///       steward: string, # Optional. <Description>The steward of the term.</Description>
        ///       termGuid: string, # Optional. <Description>The GUID of the term.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of related term headers.</Description>
        ///   usage: string, # Optional. <Description>The usage of the glossary.</Description>
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///       typeName: string, # Optional. <Description>The name of the type.</Description>
        ///       lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///       entityGuid: string, # Optional. <Description>The GUID of the entity.</Description>
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///       removePropagationsOnEntityDelete: boolean, # Optional. <Description>Determines if propagations will be removed on entity deletion.</Description>
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. <Description>The end of the time boundary.</Description>
        ///           startTime: string, # Optional. <Description>The start of the time boundary.</Description>
        ///           timeZone: string, # Optional. <Description>The timezone of the time boundary.</Description>
        ///         }
        ///       ], # Optional. <Description>An array of time boundaries indicating validity periods.</Description>
        ///       source: string, # Optional. <Description>indicate the source who create the classification detail</Description>
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>more detail on source information</Description>
        ///     }
        ///   ], # Optional. <Description>An array of classifications.</Description>
        ///   longDescription: string, # Optional. <Description>The long version description.</Description>
        ///   name: string, # Optional. <Description>The name of the glossary object.</Description>
        ///   qualifiedName: string, # Optional. <Description>The qualified name of the glossary object.</Description>
        ///   shortDescription: string, # Optional. <Description>The short version of description.</Description>
        ///   lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///   guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///   categoryInfo: Dictionary&lt;string, AtlasGlossaryCategory&gt;, # Optional. <Description>The glossary category information.</Description>
        ///   termInfo: Dictionary&lt;string, AtlasGlossaryTerm&gt;, # Optional. <Description>The glossary term information.</Description>
        /// }
        /// </code>
        /// Schema for <c>AtlasGlossaryExtInfo Response Body</c>:
        /// <code>{
        ///   categories: [
        ///     {
        ///       categoryGuid: string, # Optional. <Description>The GUID of the category.</Description>
        ///       description: string, # Optional. <Description>The description of the category header.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       parentCategoryGuid: string, # Optional. <Description>The GUID of the parent category.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of categories.</Description>
        ///   language: string, # Optional. <Description>The language of the glossary.</Description>
        ///   terms: [
        ///     {
        ///       description: string, # Optional. <Description>The description of the related term.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       expression: string, # Optional. <Description>The expression of the term.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       source: string, # Optional. <Description>The source of the term.</Description>
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///       steward: string, # Optional. <Description>The steward of the term.</Description>
        ///       termGuid: string, # Optional. <Description>The GUID of the term.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of related term headers.</Description>
        ///   usage: string, # Optional. <Description>The usage of the glossary.</Description>
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///       typeName: string, # Optional. <Description>The name of the type.</Description>
        ///       lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///       entityGuid: string, # Optional. <Description>The GUID of the entity.</Description>
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///       removePropagationsOnEntityDelete: boolean, # Optional. <Description>Determines if propagations will be removed on entity deletion.</Description>
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. <Description>The end of the time boundary.</Description>
        ///           startTime: string, # Optional. <Description>The start of the time boundary.</Description>
        ///           timeZone: string, # Optional. <Description>The timezone of the time boundary.</Description>
        ///         }
        ///       ], # Optional. <Description>An array of time boundaries indicating validity periods.</Description>
        ///       source: string, # Optional. <Description>indicate the source who create the classification detail</Description>
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>more detail on source information</Description>
        ///     }
        ///   ], # Optional. <Description>An array of classifications.</Description>
        ///   longDescription: string, # Optional. <Description>The long version description.</Description>
        ///   name: string, # Optional. <Description>The name of the glossary object.</Description>
        ///   qualifiedName: string, # Optional. <Description>The qualified name of the glossary object.</Description>
        ///   shortDescription: string, # Optional. <Description>The short version of description.</Description>
        ///   lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///   guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///   categoryInfo: Dictionary&lt;string, AtlasGlossaryCategory&gt;, # Optional. <Description>The glossary category information.</Description>
        ///   termInfo: Dictionary&lt;string, AtlasGlossaryTerm&gt;, # Optional. <Description>The glossary term information.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> CreateGlossaryAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.CreateGlossary");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateGlossaryRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a glossary. </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/PurviewCatalog/PurviewGlossary/CreateGlossary
        /// Schema for <c>AtlasGlossaryExtInfo Request Body</c>:
        /// <code>{
        ///   categories: [
        ///     {
        ///       categoryGuid: string, # Optional. <Description>The GUID of the category.</Description>
        ///       description: string, # Optional. <Description>The description of the category header.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       parentCategoryGuid: string, # Optional. <Description>The GUID of the parent category.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of categories.</Description>
        ///   language: string, # Optional. <Description>The language of the glossary.</Description>
        ///   terms: [
        ///     {
        ///       description: string, # Optional. <Description>The description of the related term.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       expression: string, # Optional. <Description>The expression of the term.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       source: string, # Optional. <Description>The source of the term.</Description>
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///       steward: string, # Optional. <Description>The steward of the term.</Description>
        ///       termGuid: string, # Optional. <Description>The GUID of the term.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of related term headers.</Description>
        ///   usage: string, # Optional. <Description>The usage of the glossary.</Description>
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///       typeName: string, # Optional. <Description>The name of the type.</Description>
        ///       lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///       entityGuid: string, # Optional. <Description>The GUID of the entity.</Description>
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///       removePropagationsOnEntityDelete: boolean, # Optional. <Description>Determines if propagations will be removed on entity deletion.</Description>
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. <Description>The end of the time boundary.</Description>
        ///           startTime: string, # Optional. <Description>The start of the time boundary.</Description>
        ///           timeZone: string, # Optional. <Description>The timezone of the time boundary.</Description>
        ///         }
        ///       ], # Optional. <Description>An array of time boundaries indicating validity periods.</Description>
        ///       source: string, # Optional. <Description>indicate the source who create the classification detail</Description>
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>more detail on source information</Description>
        ///     }
        ///   ], # Optional. <Description>An array of classifications.</Description>
        ///   longDescription: string, # Optional. <Description>The long version description.</Description>
        ///   name: string, # Optional. <Description>The name of the glossary object.</Description>
        ///   qualifiedName: string, # Optional. <Description>The qualified name of the glossary object.</Description>
        ///   shortDescription: string, # Optional. <Description>The short version of description.</Description>
        ///   lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///   guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///   categoryInfo: Dictionary&lt;string, AtlasGlossaryCategory&gt;, # Optional. <Description>The glossary category information.</Description>
        ///   termInfo: Dictionary&lt;string, AtlasGlossaryTerm&gt;, # Optional. <Description>The glossary term information.</Description>
        /// }
        /// </code>
        /// Schema for <c>AtlasGlossaryExtInfo Response Body</c>:
        /// <code>{
        ///   categories: [
        ///     {
        ///       categoryGuid: string, # Optional. <Description>The GUID of the category.</Description>
        ///       description: string, # Optional. <Description>The description of the category header.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       parentCategoryGuid: string, # Optional. <Description>The GUID of the parent category.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of categories.</Description>
        ///   language: string, # Optional. <Description>The language of the glossary.</Description>
        ///   terms: [
        ///     {
        ///       description: string, # Optional. <Description>The description of the related term.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       expression: string, # Optional. <Description>The expression of the term.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       source: string, # Optional. <Description>The source of the term.</Description>
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///       steward: string, # Optional. <Description>The steward of the term.</Description>
        ///       termGuid: string, # Optional. <Description>The GUID of the term.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of related term headers.</Description>
        ///   usage: string, # Optional. <Description>The usage of the glossary.</Description>
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///       typeName: string, # Optional. <Description>The name of the type.</Description>
        ///       lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///       entityGuid: string, # Optional. <Description>The GUID of the entity.</Description>
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///       removePropagationsOnEntityDelete: boolean, # Optional. <Description>Determines if propagations will be removed on entity deletion.</Description>
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. <Description>The end of the time boundary.</Description>
        ///           startTime: string, # Optional. <Description>The start of the time boundary.</Description>
        ///           timeZone: string, # Optional. <Description>The timezone of the time boundary.</Description>
        ///         }
        ///       ], # Optional. <Description>An array of time boundaries indicating validity periods.</Description>
        ///       source: string, # Optional. <Description>indicate the source who create the classification detail</Description>
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>more detail on source information</Description>
        ///     }
        ///   ], # Optional. <Description>An array of classifications.</Description>
        ///   longDescription: string, # Optional. <Description>The long version description.</Description>
        ///   name: string, # Optional. <Description>The name of the glossary object.</Description>
        ///   qualifiedName: string, # Optional. <Description>The qualified name of the glossary object.</Description>
        ///   shortDescription: string, # Optional. <Description>The short version of description.</Description>
        ///   lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///   guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///   categoryInfo: Dictionary&lt;string, AtlasGlossaryCategory&gt;, # Optional. <Description>The glossary category information.</Description>
        ///   termInfo: Dictionary&lt;string, AtlasGlossaryTerm&gt;, # Optional. <Description>The glossary term information.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response CreateGlossary(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.CreateGlossary");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateGlossaryRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create glossary category in bulk. </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/PurviewCatalog/PurviewGlossary/CreateGlossaryCategories
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///       typeName: string, # Optional. <Description>The name of the type.</Description>
        ///       lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///       entityGuid: string, # Optional. <Description>The GUID of the entity.</Description>
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///       removePropagationsOnEntityDelete: boolean, # Optional. <Description>Determines if propagations will be removed on entity deletion.</Description>
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. <Description>The end of the time boundary.</Description>
        ///           startTime: string, # Optional. <Description>The start of the time boundary.</Description>
        ///           timeZone: string, # Optional. <Description>The timezone of the time boundary.</Description>
        ///         }
        ///       ], # Optional. <Description>An array of time boundaries indicating validity periods.</Description>
        ///       source: string, # Optional. <Description>indicate the source who create the classification detail</Description>
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>more detail on source information</Description>
        ///     }
        ///   ], # Optional. <Description>An array of classifications.</Description>
        ///   longDescription: string, # Optional. <Description>The long version description.</Description>
        ///   name: string, # Optional. <Description>The name of the glossary object.</Description>
        ///   qualifiedName: string, # Optional. <Description>The qualified name of the glossary object.</Description>
        ///   shortDescription: string, # Optional. <Description>The short version of description.</Description>
        ///   lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///   guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///   anchor: {
        ///     displayText: string, # Optional. <Description>The display text.</Description>
        ///     glossaryGuid: string, # Optional. <Description>The GUID of the glossary.</Description>
        ///     relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///   }, # Optional. <Description>The glossary header with basic information.</Description>
        ///   childrenCategories: [
        ///     {
        ///       categoryGuid: string, # Optional. <Description>The GUID of the category.</Description>
        ///       description: string, # Optional. <Description>The description of the category header.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       parentCategoryGuid: string, # Optional. <Description>The GUID of the parent category.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of children categories.</Description>
        ///   parentCategory: AtlasRelatedCategoryHeader, # Optional. <Description>The header of the related category.</Description>
        ///   terms: [
        ///     {
        ///       description: string, # Optional. <Description>The description of the related term.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       expression: string, # Optional. <Description>The expression of the term.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       source: string, # Optional. <Description>The source of the term.</Description>
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///       steward: string, # Optional. <Description>The steward of the term.</Description>
        ///       termGuid: string, # Optional. <Description>The GUID of the term.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of related term headers.</Description>
        /// }
        /// </code>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///       typeName: string, # Optional. <Description>The name of the type.</Description>
        ///       lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///       entityGuid: string, # Optional. <Description>The GUID of the entity.</Description>
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///       removePropagationsOnEntityDelete: boolean, # Optional. <Description>Determines if propagations will be removed on entity deletion.</Description>
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. <Description>The end of the time boundary.</Description>
        ///           startTime: string, # Optional. <Description>The start of the time boundary.</Description>
        ///           timeZone: string, # Optional. <Description>The timezone of the time boundary.</Description>
        ///         }
        ///       ], # Optional. <Description>An array of time boundaries indicating validity periods.</Description>
        ///       source: string, # Optional. <Description>indicate the source who create the classification detail</Description>
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>more detail on source information</Description>
        ///     }
        ///   ], # Optional. <Description>An array of classifications.</Description>
        ///   longDescription: string, # Optional. <Description>The long version description.</Description>
        ///   name: string, # Optional. <Description>The name of the glossary object.</Description>
        ///   qualifiedName: string, # Optional. <Description>The qualified name of the glossary object.</Description>
        ///   shortDescription: string, # Optional. <Description>The short version of description.</Description>
        ///   lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///   guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///   anchor: {
        ///     displayText: string, # Optional. <Description>The display text.</Description>
        ///     glossaryGuid: string, # Optional. <Description>The GUID of the glossary.</Description>
        ///     relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///   }, # Optional. <Description>The glossary header with basic information.</Description>
        ///   childrenCategories: [
        ///     {
        ///       categoryGuid: string, # Optional. <Description>The GUID of the category.</Description>
        ///       description: string, # Optional. <Description>The description of the category header.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       parentCategoryGuid: string, # Optional. <Description>The GUID of the parent category.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of children categories.</Description>
        ///   parentCategory: AtlasRelatedCategoryHeader, # Optional. <Description>The header of the related category.</Description>
        ///   terms: [
        ///     {
        ///       description: string, # Optional. <Description>The description of the related term.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       expression: string, # Optional. <Description>The expression of the term.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       source: string, # Optional. <Description>The source of the term.</Description>
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///       steward: string, # Optional. <Description>The steward of the term.</Description>
        ///       termGuid: string, # Optional. <Description>The GUID of the term.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of related term headers.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> CreateGlossaryCategoriesAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.CreateGlossaryCategories");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateGlossaryCategoriesRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create glossary category in bulk. </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/PurviewCatalog/PurviewGlossary/CreateGlossaryCategories
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///       typeName: string, # Optional. <Description>The name of the type.</Description>
        ///       lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///       entityGuid: string, # Optional. <Description>The GUID of the entity.</Description>
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///       removePropagationsOnEntityDelete: boolean, # Optional. <Description>Determines if propagations will be removed on entity deletion.</Description>
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. <Description>The end of the time boundary.</Description>
        ///           startTime: string, # Optional. <Description>The start of the time boundary.</Description>
        ///           timeZone: string, # Optional. <Description>The timezone of the time boundary.</Description>
        ///         }
        ///       ], # Optional. <Description>An array of time boundaries indicating validity periods.</Description>
        ///       source: string, # Optional. <Description>indicate the source who create the classification detail</Description>
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>more detail on source information</Description>
        ///     }
        ///   ], # Optional. <Description>An array of classifications.</Description>
        ///   longDescription: string, # Optional. <Description>The long version description.</Description>
        ///   name: string, # Optional. <Description>The name of the glossary object.</Description>
        ///   qualifiedName: string, # Optional. <Description>The qualified name of the glossary object.</Description>
        ///   shortDescription: string, # Optional. <Description>The short version of description.</Description>
        ///   lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///   guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///   anchor: {
        ///     displayText: string, # Optional. <Description>The display text.</Description>
        ///     glossaryGuid: string, # Optional. <Description>The GUID of the glossary.</Description>
        ///     relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///   }, # Optional. <Description>The glossary header with basic information.</Description>
        ///   childrenCategories: [
        ///     {
        ///       categoryGuid: string, # Optional. <Description>The GUID of the category.</Description>
        ///       description: string, # Optional. <Description>The description of the category header.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       parentCategoryGuid: string, # Optional. <Description>The GUID of the parent category.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of children categories.</Description>
        ///   parentCategory: AtlasRelatedCategoryHeader, # Optional. <Description>The header of the related category.</Description>
        ///   terms: [
        ///     {
        ///       description: string, # Optional. <Description>The description of the related term.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       expression: string, # Optional. <Description>The expression of the term.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       source: string, # Optional. <Description>The source of the term.</Description>
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///       steward: string, # Optional. <Description>The steward of the term.</Description>
        ///       termGuid: string, # Optional. <Description>The GUID of the term.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of related term headers.</Description>
        /// }
        /// </code>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///       typeName: string, # Optional. <Description>The name of the type.</Description>
        ///       lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///       entityGuid: string, # Optional. <Description>The GUID of the entity.</Description>
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///       removePropagationsOnEntityDelete: boolean, # Optional. <Description>Determines if propagations will be removed on entity deletion.</Description>
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. <Description>The end of the time boundary.</Description>
        ///           startTime: string, # Optional. <Description>The start of the time boundary.</Description>
        ///           timeZone: string, # Optional. <Description>The timezone of the time boundary.</Description>
        ///         }
        ///       ], # Optional. <Description>An array of time boundaries indicating validity periods.</Description>
        ///       source: string, # Optional. <Description>indicate the source who create the classification detail</Description>
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>more detail on source information</Description>
        ///     }
        ///   ], # Optional. <Description>An array of classifications.</Description>
        ///   longDescription: string, # Optional. <Description>The long version description.</Description>
        ///   name: string, # Optional. <Description>The name of the glossary object.</Description>
        ///   qualifiedName: string, # Optional. <Description>The qualified name of the glossary object.</Description>
        ///   shortDescription: string, # Optional. <Description>The short version of description.</Description>
        ///   lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///   guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///   anchor: {
        ///     displayText: string, # Optional. <Description>The display text.</Description>
        ///     glossaryGuid: string, # Optional. <Description>The GUID of the glossary.</Description>
        ///     relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///   }, # Optional. <Description>The glossary header with basic information.</Description>
        ///   childrenCategories: [
        ///     {
        ///       categoryGuid: string, # Optional. <Description>The GUID of the category.</Description>
        ///       description: string, # Optional. <Description>The description of the category header.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       parentCategoryGuid: string, # Optional. <Description>The GUID of the parent category.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of children categories.</Description>
        ///   parentCategory: AtlasRelatedCategoryHeader, # Optional. <Description>The header of the related category.</Description>
        ///   terms: [
        ///     {
        ///       description: string, # Optional. <Description>The description of the related term.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       expression: string, # Optional. <Description>The expression of the term.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       source: string, # Optional. <Description>The source of the term.</Description>
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///       steward: string, # Optional. <Description>The steward of the term.</Description>
        ///       termGuid: string, # Optional. <Description>The GUID of the term.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of related term headers.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response CreateGlossaryCategories(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.CreateGlossaryCategories");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateGlossaryCategoriesRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a glossary category. </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/PurviewCatalog/PurviewGlossary/CreateGlossaryCategory
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///       typeName: string, # Optional. <Description>The name of the type.</Description>
        ///       lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///       entityGuid: string, # Optional. <Description>The GUID of the entity.</Description>
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///       removePropagationsOnEntityDelete: boolean, # Optional. <Description>Determines if propagations will be removed on entity deletion.</Description>
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. <Description>The end of the time boundary.</Description>
        ///           startTime: string, # Optional. <Description>The start of the time boundary.</Description>
        ///           timeZone: string, # Optional. <Description>The timezone of the time boundary.</Description>
        ///         }
        ///       ], # Optional. <Description>An array of time boundaries indicating validity periods.</Description>
        ///       source: string, # Optional. <Description>indicate the source who create the classification detail</Description>
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>more detail on source information</Description>
        ///     }
        ///   ], # Optional. <Description>An array of classifications.</Description>
        ///   longDescription: string, # Optional. <Description>The long version description.</Description>
        ///   name: string, # Optional. <Description>The name of the glossary object.</Description>
        ///   qualifiedName: string, # Optional. <Description>The qualified name of the glossary object.</Description>
        ///   shortDescription: string, # Optional. <Description>The short version of description.</Description>
        ///   lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///   guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///   anchor: {
        ///     displayText: string, # Optional. <Description>The display text.</Description>
        ///     glossaryGuid: string, # Optional. <Description>The GUID of the glossary.</Description>
        ///     relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///   }, # Optional. <Description>The glossary header with basic information.</Description>
        ///   childrenCategories: [
        ///     {
        ///       categoryGuid: string, # Optional. <Description>The GUID of the category.</Description>
        ///       description: string, # Optional. <Description>The description of the category header.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       parentCategoryGuid: string, # Optional. <Description>The GUID of the parent category.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of children categories.</Description>
        ///   parentCategory: AtlasRelatedCategoryHeader, # Optional. <Description>The header of the related category.</Description>
        ///   terms: [
        ///     {
        ///       description: string, # Optional. <Description>The description of the related term.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       expression: string, # Optional. <Description>The expression of the term.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       source: string, # Optional. <Description>The source of the term.</Description>
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///       steward: string, # Optional. <Description>The steward of the term.</Description>
        ///       termGuid: string, # Optional. <Description>The GUID of the term.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of related term headers.</Description>
        /// }
        /// </code>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///       typeName: string, # Optional. <Description>The name of the type.</Description>
        ///       lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///       entityGuid: string, # Optional. <Description>The GUID of the entity.</Description>
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///       removePropagationsOnEntityDelete: boolean, # Optional. <Description>Determines if propagations will be removed on entity deletion.</Description>
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. <Description>The end of the time boundary.</Description>
        ///           startTime: string, # Optional. <Description>The start of the time boundary.</Description>
        ///           timeZone: string, # Optional. <Description>The timezone of the time boundary.</Description>
        ///         }
        ///       ], # Optional. <Description>An array of time boundaries indicating validity periods.</Description>
        ///       source: string, # Optional. <Description>indicate the source who create the classification detail</Description>
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>more detail on source information</Description>
        ///     }
        ///   ], # Optional. <Description>An array of classifications.</Description>
        ///   longDescription: string, # Optional. <Description>The long version description.</Description>
        ///   name: string, # Optional. <Description>The name of the glossary object.</Description>
        ///   qualifiedName: string, # Optional. <Description>The qualified name of the glossary object.</Description>
        ///   shortDescription: string, # Optional. <Description>The short version of description.</Description>
        ///   lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///   guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///   anchor: {
        ///     displayText: string, # Optional. <Description>The display text.</Description>
        ///     glossaryGuid: string, # Optional. <Description>The GUID of the glossary.</Description>
        ///     relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///   }, # Optional. <Description>The glossary header with basic information.</Description>
        ///   childrenCategories: [
        ///     {
        ///       categoryGuid: string, # Optional. <Description>The GUID of the category.</Description>
        ///       description: string, # Optional. <Description>The description of the category header.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       parentCategoryGuid: string, # Optional. <Description>The GUID of the parent category.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of children categories.</Description>
        ///   parentCategory: AtlasRelatedCategoryHeader, # Optional. <Description>The header of the related category.</Description>
        ///   terms: [
        ///     {
        ///       description: string, # Optional. <Description>The description of the related term.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       expression: string, # Optional. <Description>The expression of the term.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       source: string, # Optional. <Description>The source of the term.</Description>
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///       steward: string, # Optional. <Description>The steward of the term.</Description>
        ///       termGuid: string, # Optional. <Description>The GUID of the term.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of related term headers.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> CreateGlossaryCategoryAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.CreateGlossaryCategory");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateGlossaryCategoryRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a glossary category. </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/PurviewCatalog/PurviewGlossary/CreateGlossaryCategory
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///       typeName: string, # Optional. <Description>The name of the type.</Description>
        ///       lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///       entityGuid: string, # Optional. <Description>The GUID of the entity.</Description>
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///       removePropagationsOnEntityDelete: boolean, # Optional. <Description>Determines if propagations will be removed on entity deletion.</Description>
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. <Description>The end of the time boundary.</Description>
        ///           startTime: string, # Optional. <Description>The start of the time boundary.</Description>
        ///           timeZone: string, # Optional. <Description>The timezone of the time boundary.</Description>
        ///         }
        ///       ], # Optional. <Description>An array of time boundaries indicating validity periods.</Description>
        ///       source: string, # Optional. <Description>indicate the source who create the classification detail</Description>
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>more detail on source information</Description>
        ///     }
        ///   ], # Optional. <Description>An array of classifications.</Description>
        ///   longDescription: string, # Optional. <Description>The long version description.</Description>
        ///   name: string, # Optional. <Description>The name of the glossary object.</Description>
        ///   qualifiedName: string, # Optional. <Description>The qualified name of the glossary object.</Description>
        ///   shortDescription: string, # Optional. <Description>The short version of description.</Description>
        ///   lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///   guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///   anchor: {
        ///     displayText: string, # Optional. <Description>The display text.</Description>
        ///     glossaryGuid: string, # Optional. <Description>The GUID of the glossary.</Description>
        ///     relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///   }, # Optional. <Description>The glossary header with basic information.</Description>
        ///   childrenCategories: [
        ///     {
        ///       categoryGuid: string, # Optional. <Description>The GUID of the category.</Description>
        ///       description: string, # Optional. <Description>The description of the category header.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       parentCategoryGuid: string, # Optional. <Description>The GUID of the parent category.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of children categories.</Description>
        ///   parentCategory: AtlasRelatedCategoryHeader, # Optional. <Description>The header of the related category.</Description>
        ///   terms: [
        ///     {
        ///       description: string, # Optional. <Description>The description of the related term.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       expression: string, # Optional. <Description>The expression of the term.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       source: string, # Optional. <Description>The source of the term.</Description>
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///       steward: string, # Optional. <Description>The steward of the term.</Description>
        ///       termGuid: string, # Optional. <Description>The GUID of the term.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of related term headers.</Description>
        /// }
        /// </code>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///       typeName: string, # Optional. <Description>The name of the type.</Description>
        ///       lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///       entityGuid: string, # Optional. <Description>The GUID of the entity.</Description>
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///       removePropagationsOnEntityDelete: boolean, # Optional. <Description>Determines if propagations will be removed on entity deletion.</Description>
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. <Description>The end of the time boundary.</Description>
        ///           startTime: string, # Optional. <Description>The start of the time boundary.</Description>
        ///           timeZone: string, # Optional. <Description>The timezone of the time boundary.</Description>
        ///         }
        ///       ], # Optional. <Description>An array of time boundaries indicating validity periods.</Description>
        ///       source: string, # Optional. <Description>indicate the source who create the classification detail</Description>
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>more detail on source information</Description>
        ///     }
        ///   ], # Optional. <Description>An array of classifications.</Description>
        ///   longDescription: string, # Optional. <Description>The long version description.</Description>
        ///   name: string, # Optional. <Description>The name of the glossary object.</Description>
        ///   qualifiedName: string, # Optional. <Description>The qualified name of the glossary object.</Description>
        ///   shortDescription: string, # Optional. <Description>The short version of description.</Description>
        ///   lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///   guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///   anchor: {
        ///     displayText: string, # Optional. <Description>The display text.</Description>
        ///     glossaryGuid: string, # Optional. <Description>The GUID of the glossary.</Description>
        ///     relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///   }, # Optional. <Description>The glossary header with basic information.</Description>
        ///   childrenCategories: [
        ///     {
        ///       categoryGuid: string, # Optional. <Description>The GUID of the category.</Description>
        ///       description: string, # Optional. <Description>The description of the category header.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       parentCategoryGuid: string, # Optional. <Description>The GUID of the parent category.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of children categories.</Description>
        ///   parentCategory: AtlasRelatedCategoryHeader, # Optional. <Description>The header of the related category.</Description>
        ///   terms: [
        ///     {
        ///       description: string, # Optional. <Description>The description of the related term.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       expression: string, # Optional. <Description>The expression of the term.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       source: string, # Optional. <Description>The source of the term.</Description>
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///       steward: string, # Optional. <Description>The steward of the term.</Description>
        ///       termGuid: string, # Optional. <Description>The GUID of the term.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of related term headers.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response CreateGlossaryCategory(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.CreateGlossaryCategory");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateGlossaryCategoryRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get specific glossary category by its GUID. </summary>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="categoryGuid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="categoryGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/PurviewCatalog/PurviewGlossary/GetGlossaryCategory
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///       typeName: string, # Optional. <Description>The name of the type.</Description>
        ///       lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///       entityGuid: string, # Optional. <Description>The GUID of the entity.</Description>
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///       removePropagationsOnEntityDelete: boolean, # Optional. <Description>Determines if propagations will be removed on entity deletion.</Description>
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. <Description>The end of the time boundary.</Description>
        ///           startTime: string, # Optional. <Description>The start of the time boundary.</Description>
        ///           timeZone: string, # Optional. <Description>The timezone of the time boundary.</Description>
        ///         }
        ///       ], # Optional. <Description>An array of time boundaries indicating validity periods.</Description>
        ///       source: string, # Optional. <Description>indicate the source who create the classification detail</Description>
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>more detail on source information</Description>
        ///     }
        ///   ], # Optional. <Description>An array of classifications.</Description>
        ///   longDescription: string, # Optional. <Description>The long version description.</Description>
        ///   name: string, # Optional. <Description>The name of the glossary object.</Description>
        ///   qualifiedName: string, # Optional. <Description>The qualified name of the glossary object.</Description>
        ///   shortDescription: string, # Optional. <Description>The short version of description.</Description>
        ///   lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///   guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///   anchor: {
        ///     displayText: string, # Optional. <Description>The display text.</Description>
        ///     glossaryGuid: string, # Optional. <Description>The GUID of the glossary.</Description>
        ///     relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///   }, # Optional. <Description>The glossary header with basic information.</Description>
        ///   childrenCategories: [
        ///     {
        ///       categoryGuid: string, # Optional. <Description>The GUID of the category.</Description>
        ///       description: string, # Optional. <Description>The description of the category header.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       parentCategoryGuid: string, # Optional. <Description>The GUID of the parent category.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of children categories.</Description>
        ///   parentCategory: AtlasRelatedCategoryHeader, # Optional. <Description>The header of the related category.</Description>
        ///   terms: [
        ///     {
        ///       description: string, # Optional. <Description>The description of the related term.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       expression: string, # Optional. <Description>The expression of the term.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       source: string, # Optional. <Description>The source of the term.</Description>
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///       steward: string, # Optional. <Description>The steward of the term.</Description>
        ///       termGuid: string, # Optional. <Description>The GUID of the term.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of related term headers.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetGlossaryCategoryAsync(string categoryGuid, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(categoryGuid, nameof(categoryGuid));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.GetGlossaryCategory");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetGlossaryCategoryRequest(categoryGuid, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get specific glossary category by its GUID. </summary>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="categoryGuid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="categoryGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/PurviewCatalog/PurviewGlossary/GetGlossaryCategory
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///       typeName: string, # Optional. <Description>The name of the type.</Description>
        ///       lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///       entityGuid: string, # Optional. <Description>The GUID of the entity.</Description>
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///       removePropagationsOnEntityDelete: boolean, # Optional. <Description>Determines if propagations will be removed on entity deletion.</Description>
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. <Description>The end of the time boundary.</Description>
        ///           startTime: string, # Optional. <Description>The start of the time boundary.</Description>
        ///           timeZone: string, # Optional. <Description>The timezone of the time boundary.</Description>
        ///         }
        ///       ], # Optional. <Description>An array of time boundaries indicating validity periods.</Description>
        ///       source: string, # Optional. <Description>indicate the source who create the classification detail</Description>
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>more detail on source information</Description>
        ///     }
        ///   ], # Optional. <Description>An array of classifications.</Description>
        ///   longDescription: string, # Optional. <Description>The long version description.</Description>
        ///   name: string, # Optional. <Description>The name of the glossary object.</Description>
        ///   qualifiedName: string, # Optional. <Description>The qualified name of the glossary object.</Description>
        ///   shortDescription: string, # Optional. <Description>The short version of description.</Description>
        ///   lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///   guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///   anchor: {
        ///     displayText: string, # Optional. <Description>The display text.</Description>
        ///     glossaryGuid: string, # Optional. <Description>The GUID of the glossary.</Description>
        ///     relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///   }, # Optional. <Description>The glossary header with basic information.</Description>
        ///   childrenCategories: [
        ///     {
        ///       categoryGuid: string, # Optional. <Description>The GUID of the category.</Description>
        ///       description: string, # Optional. <Description>The description of the category header.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       parentCategoryGuid: string, # Optional. <Description>The GUID of the parent category.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of children categories.</Description>
        ///   parentCategory: AtlasRelatedCategoryHeader, # Optional. <Description>The header of the related category.</Description>
        ///   terms: [
        ///     {
        ///       description: string, # Optional. <Description>The description of the related term.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       expression: string, # Optional. <Description>The expression of the term.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       source: string, # Optional. <Description>The source of the term.</Description>
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///       steward: string, # Optional. <Description>The steward of the term.</Description>
        ///       termGuid: string, # Optional. <Description>The GUID of the term.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of related term headers.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetGlossaryCategory(string categoryGuid, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(categoryGuid, nameof(categoryGuid));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.GetGlossaryCategory");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetGlossaryCategoryRequest(categoryGuid, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update the given glossary category by its GUID. </summary>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="categoryGuid"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="categoryGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/PurviewCatalog/PurviewGlossary/UpdateGlossaryCategory
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///       typeName: string, # Optional. <Description>The name of the type.</Description>
        ///       lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///       entityGuid: string, # Optional. <Description>The GUID of the entity.</Description>
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///       removePropagationsOnEntityDelete: boolean, # Optional. <Description>Determines if propagations will be removed on entity deletion.</Description>
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. <Description>The end of the time boundary.</Description>
        ///           startTime: string, # Optional. <Description>The start of the time boundary.</Description>
        ///           timeZone: string, # Optional. <Description>The timezone of the time boundary.</Description>
        ///         }
        ///       ], # Optional. <Description>An array of time boundaries indicating validity periods.</Description>
        ///       source: string, # Optional. <Description>indicate the source who create the classification detail</Description>
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>more detail on source information</Description>
        ///     }
        ///   ], # Optional. <Description>An array of classifications.</Description>
        ///   longDescription: string, # Optional. <Description>The long version description.</Description>
        ///   name: string, # Optional. <Description>The name of the glossary object.</Description>
        ///   qualifiedName: string, # Optional. <Description>The qualified name of the glossary object.</Description>
        ///   shortDescription: string, # Optional. <Description>The short version of description.</Description>
        ///   lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///   guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///   anchor: {
        ///     displayText: string, # Optional. <Description>The display text.</Description>
        ///     glossaryGuid: string, # Optional. <Description>The GUID of the glossary.</Description>
        ///     relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///   }, # Optional. <Description>The glossary header with basic information.</Description>
        ///   childrenCategories: [
        ///     {
        ///       categoryGuid: string, # Optional. <Description>The GUID of the category.</Description>
        ///       description: string, # Optional. <Description>The description of the category header.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       parentCategoryGuid: string, # Optional. <Description>The GUID of the parent category.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of children categories.</Description>
        ///   parentCategory: AtlasRelatedCategoryHeader, # Optional. <Description>The header of the related category.</Description>
        ///   terms: [
        ///     {
        ///       description: string, # Optional. <Description>The description of the related term.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       expression: string, # Optional. <Description>The expression of the term.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       source: string, # Optional. <Description>The source of the term.</Description>
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///       steward: string, # Optional. <Description>The steward of the term.</Description>
        ///       termGuid: string, # Optional. <Description>The GUID of the term.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of related term headers.</Description>
        /// }
        /// </code>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///       typeName: string, # Optional. <Description>The name of the type.</Description>
        ///       lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///       entityGuid: string, # Optional. <Description>The GUID of the entity.</Description>
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///       removePropagationsOnEntityDelete: boolean, # Optional. <Description>Determines if propagations will be removed on entity deletion.</Description>
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. <Description>The end of the time boundary.</Description>
        ///           startTime: string, # Optional. <Description>The start of the time boundary.</Description>
        ///           timeZone: string, # Optional. <Description>The timezone of the time boundary.</Description>
        ///         }
        ///       ], # Optional. <Description>An array of time boundaries indicating validity periods.</Description>
        ///       source: string, # Optional. <Description>indicate the source who create the classification detail</Description>
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>more detail on source information</Description>
        ///     }
        ///   ], # Optional. <Description>An array of classifications.</Description>
        ///   longDescription: string, # Optional. <Description>The long version description.</Description>
        ///   name: string, # Optional. <Description>The name of the glossary object.</Description>
        ///   qualifiedName: string, # Optional. <Description>The qualified name of the glossary object.</Description>
        ///   shortDescription: string, # Optional. <Description>The short version of description.</Description>
        ///   lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///   guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///   anchor: {
        ///     displayText: string, # Optional. <Description>The display text.</Description>
        ///     glossaryGuid: string, # Optional. <Description>The GUID of the glossary.</Description>
        ///     relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///   }, # Optional. <Description>The glossary header with basic information.</Description>
        ///   childrenCategories: [
        ///     {
        ///       categoryGuid: string, # Optional. <Description>The GUID of the category.</Description>
        ///       description: string, # Optional. <Description>The description of the category header.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       parentCategoryGuid: string, # Optional. <Description>The GUID of the parent category.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of children categories.</Description>
        ///   parentCategory: AtlasRelatedCategoryHeader, # Optional. <Description>The header of the related category.</Description>
        ///   terms: [
        ///     {
        ///       description: string, # Optional. <Description>The description of the related term.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       expression: string, # Optional. <Description>The expression of the term.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       source: string, # Optional. <Description>The source of the term.</Description>
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///       steward: string, # Optional. <Description>The steward of the term.</Description>
        ///       termGuid: string, # Optional. <Description>The GUID of the term.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of related term headers.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> UpdateGlossaryCategoryAsync(string categoryGuid, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(categoryGuid, nameof(categoryGuid));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.UpdateGlossaryCategory");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateGlossaryCategoryRequest(categoryGuid, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update the given glossary category by its GUID. </summary>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="categoryGuid"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="categoryGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/PurviewCatalog/PurviewGlossary/UpdateGlossaryCategory
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///       typeName: string, # Optional. <Description>The name of the type.</Description>
        ///       lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///       entityGuid: string, # Optional. <Description>The GUID of the entity.</Description>
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///       removePropagationsOnEntityDelete: boolean, # Optional. <Description>Determines if propagations will be removed on entity deletion.</Description>
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. <Description>The end of the time boundary.</Description>
        ///           startTime: string, # Optional. <Description>The start of the time boundary.</Description>
        ///           timeZone: string, # Optional. <Description>The timezone of the time boundary.</Description>
        ///         }
        ///       ], # Optional. <Description>An array of time boundaries indicating validity periods.</Description>
        ///       source: string, # Optional. <Description>indicate the source who create the classification detail</Description>
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>more detail on source information</Description>
        ///     }
        ///   ], # Optional. <Description>An array of classifications.</Description>
        ///   longDescription: string, # Optional. <Description>The long version description.</Description>
        ///   name: string, # Optional. <Description>The name of the glossary object.</Description>
        ///   qualifiedName: string, # Optional. <Description>The qualified name of the glossary object.</Description>
        ///   shortDescription: string, # Optional. <Description>The short version of description.</Description>
        ///   lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///   guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///   anchor: {
        ///     displayText: string, # Optional. <Description>The display text.</Description>
        ///     glossaryGuid: string, # Optional. <Description>The GUID of the glossary.</Description>
        ///     relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///   }, # Optional. <Description>The glossary header with basic information.</Description>
        ///   childrenCategories: [
        ///     {
        ///       categoryGuid: string, # Optional. <Description>The GUID of the category.</Description>
        ///       description: string, # Optional. <Description>The description of the category header.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       parentCategoryGuid: string, # Optional. <Description>The GUID of the parent category.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of children categories.</Description>
        ///   parentCategory: AtlasRelatedCategoryHeader, # Optional. <Description>The header of the related category.</Description>
        ///   terms: [
        ///     {
        ///       description: string, # Optional. <Description>The description of the related term.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       expression: string, # Optional. <Description>The expression of the term.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       source: string, # Optional. <Description>The source of the term.</Description>
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///       steward: string, # Optional. <Description>The steward of the term.</Description>
        ///       termGuid: string, # Optional. <Description>The GUID of the term.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of related term headers.</Description>
        /// }
        /// </code>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///       typeName: string, # Optional. <Description>The name of the type.</Description>
        ///       lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///       entityGuid: string, # Optional. <Description>The GUID of the entity.</Description>
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///       removePropagationsOnEntityDelete: boolean, # Optional. <Description>Determines if propagations will be removed on entity deletion.</Description>
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. <Description>The end of the time boundary.</Description>
        ///           startTime: string, # Optional. <Description>The start of the time boundary.</Description>
        ///           timeZone: string, # Optional. <Description>The timezone of the time boundary.</Description>
        ///         }
        ///       ], # Optional. <Description>An array of time boundaries indicating validity periods.</Description>
        ///       source: string, # Optional. <Description>indicate the source who create the classification detail</Description>
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>more detail on source information</Description>
        ///     }
        ///   ], # Optional. <Description>An array of classifications.</Description>
        ///   longDescription: string, # Optional. <Description>The long version description.</Description>
        ///   name: string, # Optional. <Description>The name of the glossary object.</Description>
        ///   qualifiedName: string, # Optional. <Description>The qualified name of the glossary object.</Description>
        ///   shortDescription: string, # Optional. <Description>The short version of description.</Description>
        ///   lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///   guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///   anchor: {
        ///     displayText: string, # Optional. <Description>The display text.</Description>
        ///     glossaryGuid: string, # Optional. <Description>The GUID of the glossary.</Description>
        ///     relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///   }, # Optional. <Description>The glossary header with basic information.</Description>
        ///   childrenCategories: [
        ///     {
        ///       categoryGuid: string, # Optional. <Description>The GUID of the category.</Description>
        ///       description: string, # Optional. <Description>The description of the category header.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       parentCategoryGuid: string, # Optional. <Description>The GUID of the parent category.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of children categories.</Description>
        ///   parentCategory: AtlasRelatedCategoryHeader, # Optional. <Description>The header of the related category.</Description>
        ///   terms: [
        ///     {
        ///       description: string, # Optional. <Description>The description of the related term.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       expression: string, # Optional. <Description>The expression of the term.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       source: string, # Optional. <Description>The source of the term.</Description>
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///       steward: string, # Optional. <Description>The steward of the term.</Description>
        ///       termGuid: string, # Optional. <Description>The GUID of the term.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of related term headers.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response UpdateGlossaryCategory(string categoryGuid, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(categoryGuid, nameof(categoryGuid));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.UpdateGlossaryCategory");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateGlossaryCategoryRequest(categoryGuid, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a glossary category. </summary>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="categoryGuid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="categoryGuid"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<Response> DeleteGlossaryCategoryAsync(string categoryGuid, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(categoryGuid, nameof(categoryGuid));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.DeleteGlossaryCategory");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteGlossaryCategoryRequest(categoryGuid, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a glossary category. </summary>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="categoryGuid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="categoryGuid"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Response DeleteGlossaryCategory(string categoryGuid, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(categoryGuid, nameof(categoryGuid));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.DeleteGlossaryCategory");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteGlossaryCategoryRequest(categoryGuid, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update the glossary category partially. </summary>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="categoryGuid"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="categoryGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/PurviewCatalog/PurviewGlossary/PartialUpdateGlossaryCategory
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///       typeName: string, # Optional. <Description>The name of the type.</Description>
        ///       lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///       entityGuid: string, # Optional. <Description>The GUID of the entity.</Description>
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///       removePropagationsOnEntityDelete: boolean, # Optional. <Description>Determines if propagations will be removed on entity deletion.</Description>
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. <Description>The end of the time boundary.</Description>
        ///           startTime: string, # Optional. <Description>The start of the time boundary.</Description>
        ///           timeZone: string, # Optional. <Description>The timezone of the time boundary.</Description>
        ///         }
        ///       ], # Optional. <Description>An array of time boundaries indicating validity periods.</Description>
        ///       source: string, # Optional. <Description>indicate the source who create the classification detail</Description>
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>more detail on source information</Description>
        ///     }
        ///   ], # Optional. <Description>An array of classifications.</Description>
        ///   longDescription: string, # Optional. <Description>The long version description.</Description>
        ///   name: string, # Optional. <Description>The name of the glossary object.</Description>
        ///   qualifiedName: string, # Optional. <Description>The qualified name of the glossary object.</Description>
        ///   shortDescription: string, # Optional. <Description>The short version of description.</Description>
        ///   lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///   guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///   anchor: {
        ///     displayText: string, # Optional. <Description>The display text.</Description>
        ///     glossaryGuid: string, # Optional. <Description>The GUID of the glossary.</Description>
        ///     relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///   }, # Optional. <Description>The glossary header with basic information.</Description>
        ///   childrenCategories: [
        ///     {
        ///       categoryGuid: string, # Optional. <Description>The GUID of the category.</Description>
        ///       description: string, # Optional. <Description>The description of the category header.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       parentCategoryGuid: string, # Optional. <Description>The GUID of the parent category.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of children categories.</Description>
        ///   parentCategory: AtlasRelatedCategoryHeader, # Optional. <Description>The header of the related category.</Description>
        ///   terms: [
        ///     {
        ///       description: string, # Optional. <Description>The description of the related term.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       expression: string, # Optional. <Description>The expression of the term.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       source: string, # Optional. <Description>The source of the term.</Description>
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///       steward: string, # Optional. <Description>The steward of the term.</Description>
        ///       termGuid: string, # Optional. <Description>The GUID of the term.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of related term headers.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> PartialUpdateGlossaryCategoryAsync(string categoryGuid, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(categoryGuid, nameof(categoryGuid));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.PartialUpdateGlossaryCategory");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePartialUpdateGlossaryCategoryRequest(categoryGuid, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update the glossary category partially. </summary>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="categoryGuid"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="categoryGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/PurviewCatalog/PurviewGlossary/PartialUpdateGlossaryCategory
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///       typeName: string, # Optional. <Description>The name of the type.</Description>
        ///       lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///       entityGuid: string, # Optional. <Description>The GUID of the entity.</Description>
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///       removePropagationsOnEntityDelete: boolean, # Optional. <Description>Determines if propagations will be removed on entity deletion.</Description>
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. <Description>The end of the time boundary.</Description>
        ///           startTime: string, # Optional. <Description>The start of the time boundary.</Description>
        ///           timeZone: string, # Optional. <Description>The timezone of the time boundary.</Description>
        ///         }
        ///       ], # Optional. <Description>An array of time boundaries indicating validity periods.</Description>
        ///       source: string, # Optional. <Description>indicate the source who create the classification detail</Description>
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>more detail on source information</Description>
        ///     }
        ///   ], # Optional. <Description>An array of classifications.</Description>
        ///   longDescription: string, # Optional. <Description>The long version description.</Description>
        ///   name: string, # Optional. <Description>The name of the glossary object.</Description>
        ///   qualifiedName: string, # Optional. <Description>The qualified name of the glossary object.</Description>
        ///   shortDescription: string, # Optional. <Description>The short version of description.</Description>
        ///   lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///   guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///   anchor: {
        ///     displayText: string, # Optional. <Description>The display text.</Description>
        ///     glossaryGuid: string, # Optional. <Description>The GUID of the glossary.</Description>
        ///     relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///   }, # Optional. <Description>The glossary header with basic information.</Description>
        ///   childrenCategories: [
        ///     {
        ///       categoryGuid: string, # Optional. <Description>The GUID of the category.</Description>
        ///       description: string, # Optional. <Description>The description of the category header.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       parentCategoryGuid: string, # Optional. <Description>The GUID of the parent category.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of children categories.</Description>
        ///   parentCategory: AtlasRelatedCategoryHeader, # Optional. <Description>The header of the related category.</Description>
        ///   terms: [
        ///     {
        ///       description: string, # Optional. <Description>The description of the related term.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       expression: string, # Optional. <Description>The expression of the term.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       source: string, # Optional. <Description>The source of the term.</Description>
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///       steward: string, # Optional. <Description>The steward of the term.</Description>
        ///       termGuid: string, # Optional. <Description>The GUID of the term.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of related term headers.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response PartialUpdateGlossaryCategory(string categoryGuid, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(categoryGuid, nameof(categoryGuid));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.PartialUpdateGlossaryCategory");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePartialUpdateGlossaryCategoryRequest(categoryGuid, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get all related categories (parent and children). Limit, offset, and sort parameters are currently not being enabled and won&apos;t work even they are passed. </summary>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="categoryGuid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="categoryGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/PurviewCatalog/PurviewGlossary/GetRelatedCategories
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   categoryGuid: string, # Optional. <Description>The GUID of the category.</Description>
        ///   description: string, # Optional. <Description>The description of the category header.</Description>
        ///   displayText: string, # Optional. <Description>The display text.</Description>
        ///   parentCategoryGuid: string, # Optional. <Description>The GUID of the parent category.</Description>
        ///   relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetRelatedCategoriesAsync(string categoryGuid, int? limit = null, int? offset = null, string sort = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(categoryGuid, nameof(categoryGuid));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.GetRelatedCategories");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetRelatedCategoriesRequest(categoryGuid, limit, offset, sort, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get all related categories (parent and children). Limit, offset, and sort parameters are currently not being enabled and won&apos;t work even they are passed. </summary>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="categoryGuid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="categoryGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/PurviewCatalog/PurviewGlossary/GetRelatedCategories
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   categoryGuid: string, # Optional. <Description>The GUID of the category.</Description>
        ///   description: string, # Optional. <Description>The description of the category header.</Description>
        ///   displayText: string, # Optional. <Description>The display text.</Description>
        ///   parentCategoryGuid: string, # Optional. <Description>The GUID of the parent category.</Description>
        ///   relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetRelatedCategories(string categoryGuid, int? limit = null, int? offset = null, string sort = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(categoryGuid, nameof(categoryGuid));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.GetRelatedCategories");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetRelatedCategoriesRequest(categoryGuid, limit, offset, sort, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get all terms associated with the specific category. </summary>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="categoryGuid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="categoryGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/PurviewCatalog/PurviewGlossary/GetCategoryTerms
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   description: string, # Optional. <Description>The description of the related term.</Description>
        ///   displayText: string, # Optional. <Description>The display text.</Description>
        ///   expression: string, # Optional. <Description>The expression of the term.</Description>
        ///   relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///   source: string, # Optional. <Description>The source of the term.</Description>
        ///   status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///   steward: string, # Optional. <Description>The steward of the term.</Description>
        ///   termGuid: string, # Optional. <Description>The GUID of the term.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetCategoryTermsAsync(string categoryGuid, int? limit = null, int? offset = null, string sort = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(categoryGuid, nameof(categoryGuid));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.GetCategoryTerms");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetCategoryTermsRequest(categoryGuid, limit, offset, sort, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get all terms associated with the specific category. </summary>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="categoryGuid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="categoryGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/PurviewCatalog/PurviewGlossary/GetCategoryTerms
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   description: string, # Optional. <Description>The description of the related term.</Description>
        ///   displayText: string, # Optional. <Description>The display text.</Description>
        ///   expression: string, # Optional. <Description>The expression of the term.</Description>
        ///   relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///   source: string, # Optional. <Description>The source of the term.</Description>
        ///   status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///   steward: string, # Optional. <Description>The steward of the term.</Description>
        ///   termGuid: string, # Optional. <Description>The GUID of the term.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetCategoryTerms(string categoryGuid, int? limit = null, int? offset = null, string sort = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(categoryGuid, nameof(categoryGuid));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.GetCategoryTerms");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetCategoryTermsRequest(categoryGuid, limit, offset, sort, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a glossary term. </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/PurviewCatalog/PurviewGlossary/CreateGlossaryTerm
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///       typeName: string, # Optional. <Description>The name of the type.</Description>
        ///       lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///       entityGuid: string, # Optional. <Description>The GUID of the entity.</Description>
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///       removePropagationsOnEntityDelete: boolean, # Optional. <Description>Determines if propagations will be removed on entity deletion.</Description>
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. <Description>The end of the time boundary.</Description>
        ///           startTime: string, # Optional. <Description>The start of the time boundary.</Description>
        ///           timeZone: string, # Optional. <Description>The timezone of the time boundary.</Description>
        ///         }
        ///       ], # Optional. <Description>An array of time boundaries indicating validity periods.</Description>
        ///       source: string, # Optional. <Description>indicate the source who create the classification detail</Description>
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>more detail on source information</Description>
        ///     }
        ///   ], # Optional. <Description>An array of classifications.</Description>
        ///   longDescription: string, # Optional. <Description>The long version description.</Description>
        ///   name: string, # Optional. <Description>The name of the glossary object.</Description>
        ///   qualifiedName: string, # Optional. <Description>The qualified name of the glossary object.</Description>
        ///   shortDescription: string, # Optional. <Description>The short version of description.</Description>
        ///   lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///   guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///   abbreviation: string, # Optional. <Description>The abbreviation of the term.</Description>
        ///   templateName: [AnyObject], # Optional.
        ///   anchor: {
        ///     displayText: string, # Optional. <Description>The display text.</Description>
        ///     glossaryGuid: string, # Optional. <Description>The GUID of the glossary.</Description>
        ///     relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///   }, # Optional. <Description>The glossary header with basic information.</Description>
        ///   antonyms: [
        ///     {
        ///       description: string, # Optional. <Description>The description of the related term.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       expression: string, # Optional. <Description>The expression of the term.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       source: string, # Optional. <Description>The source of the term.</Description>
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///       steward: string, # Optional. <Description>The steward of the term.</Description>
        ///       termGuid: string, # Optional. <Description>The GUID of the term.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of related term headers as antonyms.</Description>
        ///   createTime: number, # Optional. <Description>The created time of the record.</Description>
        ///   createdBy: string, # Optional. <Description>The user who created the record.</Description>
        ///   updateTime: number, # Optional. <Description>The update time of the record.</Description>
        ///   updatedBy: string, # Optional. <Description>The user who updated the record.</Description>
        ///   status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;, # Optional. <Description>Status of the AtlasGlossaryTerm</Description>
        ///   resources: [
        ///     {
        ///       displayName: string, # Optional. <Description>Display name for url.</Description>
        ///       url: string, # Optional. <Description>web url. http or https</Description>
        ///     }
        ///   ], # Optional. <Description>An array of resource link for term</Description>
        ///   contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. <Description>The dictionary of contacts for terms. Key could be Expert or Steward.</Description>
        ///   attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;, # Optional. <Description>The custom attributes of the term, which is map&lt;string,map&lt;string,object&gt;&gt;.
        /// The key of the first layer map is term template name.</Description>
        ///   assignedEntities: [
        ///     {
        ///       guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///       typeName: string, # Optional. <Description>The name of the type.</Description>
        ///       uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The unique attributes of the object.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///       relationshipType: string, # Optional.
        ///       relationshipAttributes: {
        ///         attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///         typeName: string, # Optional. <Description>The name of the type.</Description>
        ///         lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///       }, # Optional. <Description>Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.</Description>
        ///       relationshipGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>The enum of relationship status.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of related object IDs.</Description>
        ///   categories: [
        ///     {
        ///       categoryGuid: string, # Optional. <Description>The GUID of the category.</Description>
        ///       description: string, # Optional. <Description>The description of the record.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of term categorization headers.</Description>
        ///   classifies: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers.</Description>
        ///   examples: [string], # Optional. <Description>An array of examples.</Description>
        ///   isA: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers indicating the is-a relationship.</Description>
        ///   preferredTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of preferred related term headers.</Description>
        ///   preferredToTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers that are preferred to.</Description>
        ///   replacedBy: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers that are replaced by.</Description>
        ///   replacementTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers for replacement.</Description>
        ///   seeAlso: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers for see also.</Description>
        ///   synonyms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers as synonyms.</Description>
        ///   translatedTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of translated related term headers.</Description>
        ///   translationTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers for translation.</Description>
        ///   usage: string, # Optional. <Description>The usage of the term.</Description>
        ///   validValues: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers as valid values.</Description>
        ///   validValuesFor: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers as valid values for other records.</Description>
        /// }
        /// </code>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///       typeName: string, # Optional. <Description>The name of the type.</Description>
        ///       lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///       entityGuid: string, # Optional. <Description>The GUID of the entity.</Description>
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///       removePropagationsOnEntityDelete: boolean, # Optional. <Description>Determines if propagations will be removed on entity deletion.</Description>
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. <Description>The end of the time boundary.</Description>
        ///           startTime: string, # Optional. <Description>The start of the time boundary.</Description>
        ///           timeZone: string, # Optional. <Description>The timezone of the time boundary.</Description>
        ///         }
        ///       ], # Optional. <Description>An array of time boundaries indicating validity periods.</Description>
        ///       source: string, # Optional. <Description>indicate the source who create the classification detail</Description>
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>more detail on source information</Description>
        ///     }
        ///   ], # Optional. <Description>An array of classifications.</Description>
        ///   longDescription: string, # Optional. <Description>The long version description.</Description>
        ///   name: string, # Optional. <Description>The name of the glossary object.</Description>
        ///   qualifiedName: string, # Optional. <Description>The qualified name of the glossary object.</Description>
        ///   shortDescription: string, # Optional. <Description>The short version of description.</Description>
        ///   lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///   guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///   abbreviation: string, # Optional. <Description>The abbreviation of the term.</Description>
        ///   templateName: [AnyObject], # Optional.
        ///   anchor: {
        ///     displayText: string, # Optional. <Description>The display text.</Description>
        ///     glossaryGuid: string, # Optional. <Description>The GUID of the glossary.</Description>
        ///     relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///   }, # Optional. <Description>The glossary header with basic information.</Description>
        ///   antonyms: [
        ///     {
        ///       description: string, # Optional. <Description>The description of the related term.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       expression: string, # Optional. <Description>The expression of the term.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       source: string, # Optional. <Description>The source of the term.</Description>
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///       steward: string, # Optional. <Description>The steward of the term.</Description>
        ///       termGuid: string, # Optional. <Description>The GUID of the term.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of related term headers as antonyms.</Description>
        ///   createTime: number, # Optional. <Description>The created time of the record.</Description>
        ///   createdBy: string, # Optional. <Description>The user who created the record.</Description>
        ///   updateTime: number, # Optional. <Description>The update time of the record.</Description>
        ///   updatedBy: string, # Optional. <Description>The user who updated the record.</Description>
        ///   status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;, # Optional. <Description>Status of the AtlasGlossaryTerm</Description>
        ///   resources: [
        ///     {
        ///       displayName: string, # Optional. <Description>Display name for url.</Description>
        ///       url: string, # Optional. <Description>web url. http or https</Description>
        ///     }
        ///   ], # Optional. <Description>An array of resource link for term</Description>
        ///   contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. <Description>The dictionary of contacts for terms. Key could be Expert or Steward.</Description>
        ///   attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;, # Optional. <Description>The custom attributes of the term, which is map&lt;string,map&lt;string,object&gt;&gt;.
        /// The key of the first layer map is term template name.</Description>
        ///   assignedEntities: [
        ///     {
        ///       guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///       typeName: string, # Optional. <Description>The name of the type.</Description>
        ///       uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The unique attributes of the object.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///       relationshipType: string, # Optional.
        ///       relationshipAttributes: {
        ///         attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///         typeName: string, # Optional. <Description>The name of the type.</Description>
        ///         lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///       }, # Optional. <Description>Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.</Description>
        ///       relationshipGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>The enum of relationship status.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of related object IDs.</Description>
        ///   categories: [
        ///     {
        ///       categoryGuid: string, # Optional. <Description>The GUID of the category.</Description>
        ///       description: string, # Optional. <Description>The description of the record.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of term categorization headers.</Description>
        ///   classifies: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers.</Description>
        ///   examples: [string], # Optional. <Description>An array of examples.</Description>
        ///   isA: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers indicating the is-a relationship.</Description>
        ///   preferredTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of preferred related term headers.</Description>
        ///   preferredToTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers that are preferred to.</Description>
        ///   replacedBy: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers that are replaced by.</Description>
        ///   replacementTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers for replacement.</Description>
        ///   seeAlso: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers for see also.</Description>
        ///   synonyms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers as synonyms.</Description>
        ///   translatedTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of translated related term headers.</Description>
        ///   translationTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers for translation.</Description>
        ///   usage: string, # Optional. <Description>The usage of the term.</Description>
        ///   validValues: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers as valid values.</Description>
        ///   validValuesFor: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers as valid values for other records.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> CreateGlossaryTermAsync(RequestContent content, bool? includeTermHierarchy = null, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.CreateGlossaryTerm");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateGlossaryTermRequest(content, includeTermHierarchy, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a glossary term. </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/PurviewCatalog/PurviewGlossary/CreateGlossaryTerm
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///       typeName: string, # Optional. <Description>The name of the type.</Description>
        ///       lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///       entityGuid: string, # Optional. <Description>The GUID of the entity.</Description>
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///       removePropagationsOnEntityDelete: boolean, # Optional. <Description>Determines if propagations will be removed on entity deletion.</Description>
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. <Description>The end of the time boundary.</Description>
        ///           startTime: string, # Optional. <Description>The start of the time boundary.</Description>
        ///           timeZone: string, # Optional. <Description>The timezone of the time boundary.</Description>
        ///         }
        ///       ], # Optional. <Description>An array of time boundaries indicating validity periods.</Description>
        ///       source: string, # Optional. <Description>indicate the source who create the classification detail</Description>
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>more detail on source information</Description>
        ///     }
        ///   ], # Optional. <Description>An array of classifications.</Description>
        ///   longDescription: string, # Optional. <Description>The long version description.</Description>
        ///   name: string, # Optional. <Description>The name of the glossary object.</Description>
        ///   qualifiedName: string, # Optional. <Description>The qualified name of the glossary object.</Description>
        ///   shortDescription: string, # Optional. <Description>The short version of description.</Description>
        ///   lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///   guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///   abbreviation: string, # Optional. <Description>The abbreviation of the term.</Description>
        ///   templateName: [AnyObject], # Optional.
        ///   anchor: {
        ///     displayText: string, # Optional. <Description>The display text.</Description>
        ///     glossaryGuid: string, # Optional. <Description>The GUID of the glossary.</Description>
        ///     relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///   }, # Optional. <Description>The glossary header with basic information.</Description>
        ///   antonyms: [
        ///     {
        ///       description: string, # Optional. <Description>The description of the related term.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       expression: string, # Optional. <Description>The expression of the term.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       source: string, # Optional. <Description>The source of the term.</Description>
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///       steward: string, # Optional. <Description>The steward of the term.</Description>
        ///       termGuid: string, # Optional. <Description>The GUID of the term.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of related term headers as antonyms.</Description>
        ///   createTime: number, # Optional. <Description>The created time of the record.</Description>
        ///   createdBy: string, # Optional. <Description>The user who created the record.</Description>
        ///   updateTime: number, # Optional. <Description>The update time of the record.</Description>
        ///   updatedBy: string, # Optional. <Description>The user who updated the record.</Description>
        ///   status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;, # Optional. <Description>Status of the AtlasGlossaryTerm</Description>
        ///   resources: [
        ///     {
        ///       displayName: string, # Optional. <Description>Display name for url.</Description>
        ///       url: string, # Optional. <Description>web url. http or https</Description>
        ///     }
        ///   ], # Optional. <Description>An array of resource link for term</Description>
        ///   contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. <Description>The dictionary of contacts for terms. Key could be Expert or Steward.</Description>
        ///   attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;, # Optional. <Description>The custom attributes of the term, which is map&lt;string,map&lt;string,object&gt;&gt;.
        /// The key of the first layer map is term template name.</Description>
        ///   assignedEntities: [
        ///     {
        ///       guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///       typeName: string, # Optional. <Description>The name of the type.</Description>
        ///       uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The unique attributes of the object.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///       relationshipType: string, # Optional.
        ///       relationshipAttributes: {
        ///         attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///         typeName: string, # Optional. <Description>The name of the type.</Description>
        ///         lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///       }, # Optional. <Description>Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.</Description>
        ///       relationshipGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>The enum of relationship status.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of related object IDs.</Description>
        ///   categories: [
        ///     {
        ///       categoryGuid: string, # Optional. <Description>The GUID of the category.</Description>
        ///       description: string, # Optional. <Description>The description of the record.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of term categorization headers.</Description>
        ///   classifies: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers.</Description>
        ///   examples: [string], # Optional. <Description>An array of examples.</Description>
        ///   isA: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers indicating the is-a relationship.</Description>
        ///   preferredTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of preferred related term headers.</Description>
        ///   preferredToTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers that are preferred to.</Description>
        ///   replacedBy: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers that are replaced by.</Description>
        ///   replacementTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers for replacement.</Description>
        ///   seeAlso: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers for see also.</Description>
        ///   synonyms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers as synonyms.</Description>
        ///   translatedTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of translated related term headers.</Description>
        ///   translationTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers for translation.</Description>
        ///   usage: string, # Optional. <Description>The usage of the term.</Description>
        ///   validValues: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers as valid values.</Description>
        ///   validValuesFor: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers as valid values for other records.</Description>
        /// }
        /// </code>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///       typeName: string, # Optional. <Description>The name of the type.</Description>
        ///       lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///       entityGuid: string, # Optional. <Description>The GUID of the entity.</Description>
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///       removePropagationsOnEntityDelete: boolean, # Optional. <Description>Determines if propagations will be removed on entity deletion.</Description>
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. <Description>The end of the time boundary.</Description>
        ///           startTime: string, # Optional. <Description>The start of the time boundary.</Description>
        ///           timeZone: string, # Optional. <Description>The timezone of the time boundary.</Description>
        ///         }
        ///       ], # Optional. <Description>An array of time boundaries indicating validity periods.</Description>
        ///       source: string, # Optional. <Description>indicate the source who create the classification detail</Description>
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>more detail on source information</Description>
        ///     }
        ///   ], # Optional. <Description>An array of classifications.</Description>
        ///   longDescription: string, # Optional. <Description>The long version description.</Description>
        ///   name: string, # Optional. <Description>The name of the glossary object.</Description>
        ///   qualifiedName: string, # Optional. <Description>The qualified name of the glossary object.</Description>
        ///   shortDescription: string, # Optional. <Description>The short version of description.</Description>
        ///   lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///   guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///   abbreviation: string, # Optional. <Description>The abbreviation of the term.</Description>
        ///   templateName: [AnyObject], # Optional.
        ///   anchor: {
        ///     displayText: string, # Optional. <Description>The display text.</Description>
        ///     glossaryGuid: string, # Optional. <Description>The GUID of the glossary.</Description>
        ///     relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///   }, # Optional. <Description>The glossary header with basic information.</Description>
        ///   antonyms: [
        ///     {
        ///       description: string, # Optional. <Description>The description of the related term.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       expression: string, # Optional. <Description>The expression of the term.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       source: string, # Optional. <Description>The source of the term.</Description>
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///       steward: string, # Optional. <Description>The steward of the term.</Description>
        ///       termGuid: string, # Optional. <Description>The GUID of the term.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of related term headers as antonyms.</Description>
        ///   createTime: number, # Optional. <Description>The created time of the record.</Description>
        ///   createdBy: string, # Optional. <Description>The user who created the record.</Description>
        ///   updateTime: number, # Optional. <Description>The update time of the record.</Description>
        ///   updatedBy: string, # Optional. <Description>The user who updated the record.</Description>
        ///   status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;, # Optional. <Description>Status of the AtlasGlossaryTerm</Description>
        ///   resources: [
        ///     {
        ///       displayName: string, # Optional. <Description>Display name for url.</Description>
        ///       url: string, # Optional. <Description>web url. http or https</Description>
        ///     }
        ///   ], # Optional. <Description>An array of resource link for term</Description>
        ///   contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. <Description>The dictionary of contacts for terms. Key could be Expert or Steward.</Description>
        ///   attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;, # Optional. <Description>The custom attributes of the term, which is map&lt;string,map&lt;string,object&gt;&gt;.
        /// The key of the first layer map is term template name.</Description>
        ///   assignedEntities: [
        ///     {
        ///       guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///       typeName: string, # Optional. <Description>The name of the type.</Description>
        ///       uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The unique attributes of the object.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///       relationshipType: string, # Optional.
        ///       relationshipAttributes: {
        ///         attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///         typeName: string, # Optional. <Description>The name of the type.</Description>
        ///         lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///       }, # Optional. <Description>Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.</Description>
        ///       relationshipGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>The enum of relationship status.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of related object IDs.</Description>
        ///   categories: [
        ///     {
        ///       categoryGuid: string, # Optional. <Description>The GUID of the category.</Description>
        ///       description: string, # Optional. <Description>The description of the record.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of term categorization headers.</Description>
        ///   classifies: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers.</Description>
        ///   examples: [string], # Optional. <Description>An array of examples.</Description>
        ///   isA: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers indicating the is-a relationship.</Description>
        ///   preferredTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of preferred related term headers.</Description>
        ///   preferredToTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers that are preferred to.</Description>
        ///   replacedBy: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers that are replaced by.</Description>
        ///   replacementTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers for replacement.</Description>
        ///   seeAlso: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers for see also.</Description>
        ///   synonyms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers as synonyms.</Description>
        ///   translatedTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of translated related term headers.</Description>
        ///   translationTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers for translation.</Description>
        ///   usage: string, # Optional. <Description>The usage of the term.</Description>
        ///   validValues: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers as valid values.</Description>
        ///   validValuesFor: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers as valid values for other records.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response CreateGlossaryTerm(RequestContent content, bool? includeTermHierarchy = null, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.CreateGlossaryTerm");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateGlossaryTermRequest(content, includeTermHierarchy, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a specific glossary term by its GUID. </summary>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="excludeRelationshipTypeList"> An array of relationship types which need to be excluded. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="termGuid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="termGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/PurviewCatalog/PurviewGlossary/GetGlossaryTerm
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///       typeName: string, # Optional. <Description>The name of the type.</Description>
        ///       lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///       entityGuid: string, # Optional. <Description>The GUID of the entity.</Description>
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///       removePropagationsOnEntityDelete: boolean, # Optional. <Description>Determines if propagations will be removed on entity deletion.</Description>
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. <Description>The end of the time boundary.</Description>
        ///           startTime: string, # Optional. <Description>The start of the time boundary.</Description>
        ///           timeZone: string, # Optional. <Description>The timezone of the time boundary.</Description>
        ///         }
        ///       ], # Optional. <Description>An array of time boundaries indicating validity periods.</Description>
        ///       source: string, # Optional. <Description>indicate the source who create the classification detail</Description>
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>more detail on source information</Description>
        ///     }
        ///   ], # Optional. <Description>An array of classifications.</Description>
        ///   longDescription: string, # Optional. <Description>The long version description.</Description>
        ///   name: string, # Optional. <Description>The name of the glossary object.</Description>
        ///   qualifiedName: string, # Optional. <Description>The qualified name of the glossary object.</Description>
        ///   shortDescription: string, # Optional. <Description>The short version of description.</Description>
        ///   lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///   guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///   abbreviation: string, # Optional. <Description>The abbreviation of the term.</Description>
        ///   templateName: [AnyObject], # Optional.
        ///   anchor: {
        ///     displayText: string, # Optional. <Description>The display text.</Description>
        ///     glossaryGuid: string, # Optional. <Description>The GUID of the glossary.</Description>
        ///     relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///   }, # Optional. <Description>The glossary header with basic information.</Description>
        ///   antonyms: [
        ///     {
        ///       description: string, # Optional. <Description>The description of the related term.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       expression: string, # Optional. <Description>The expression of the term.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       source: string, # Optional. <Description>The source of the term.</Description>
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///       steward: string, # Optional. <Description>The steward of the term.</Description>
        ///       termGuid: string, # Optional. <Description>The GUID of the term.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of related term headers as antonyms.</Description>
        ///   createTime: number, # Optional. <Description>The created time of the record.</Description>
        ///   createdBy: string, # Optional. <Description>The user who created the record.</Description>
        ///   updateTime: number, # Optional. <Description>The update time of the record.</Description>
        ///   updatedBy: string, # Optional. <Description>The user who updated the record.</Description>
        ///   status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;, # Optional. <Description>Status of the AtlasGlossaryTerm</Description>
        ///   resources: [
        ///     {
        ///       displayName: string, # Optional. <Description>Display name for url.</Description>
        ///       url: string, # Optional. <Description>web url. http or https</Description>
        ///     }
        ///   ], # Optional. <Description>An array of resource link for term</Description>
        ///   contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. <Description>The dictionary of contacts for terms. Key could be Expert or Steward.</Description>
        ///   attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;, # Optional. <Description>The custom attributes of the term, which is map&lt;string,map&lt;string,object&gt;&gt;.
        /// The key of the first layer map is term template name.</Description>
        ///   assignedEntities: [
        ///     {
        ///       guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///       typeName: string, # Optional. <Description>The name of the type.</Description>
        ///       uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The unique attributes of the object.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///       relationshipType: string, # Optional.
        ///       relationshipAttributes: {
        ///         attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///         typeName: string, # Optional. <Description>The name of the type.</Description>
        ///         lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///       }, # Optional. <Description>Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.</Description>
        ///       relationshipGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>The enum of relationship status.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of related object IDs.</Description>
        ///   categories: [
        ///     {
        ///       categoryGuid: string, # Optional. <Description>The GUID of the category.</Description>
        ///       description: string, # Optional. <Description>The description of the record.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of term categorization headers.</Description>
        ///   classifies: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers.</Description>
        ///   examples: [string], # Optional. <Description>An array of examples.</Description>
        ///   isA: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers indicating the is-a relationship.</Description>
        ///   preferredTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of preferred related term headers.</Description>
        ///   preferredToTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers that are preferred to.</Description>
        ///   replacedBy: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers that are replaced by.</Description>
        ///   replacementTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers for replacement.</Description>
        ///   seeAlso: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers for see also.</Description>
        ///   synonyms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers as synonyms.</Description>
        ///   translatedTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of translated related term headers.</Description>
        ///   translationTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers for translation.</Description>
        ///   usage: string, # Optional. <Description>The usage of the term.</Description>
        ///   validValues: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers as valid values.</Description>
        ///   validValuesFor: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers as valid values for other records.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetGlossaryTermAsync(string termGuid, bool? includeTermHierarchy = null, IEnumerable<string> excludeRelationshipTypeList = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(termGuid, nameof(termGuid));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.GetGlossaryTerm");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetGlossaryTermRequest(termGuid, includeTermHierarchy, excludeRelationshipTypeList, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a specific glossary term by its GUID. </summary>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="excludeRelationshipTypeList"> An array of relationship types which need to be excluded. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="termGuid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="termGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/PurviewCatalog/PurviewGlossary/GetGlossaryTerm
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///       typeName: string, # Optional. <Description>The name of the type.</Description>
        ///       lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///       entityGuid: string, # Optional. <Description>The GUID of the entity.</Description>
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///       removePropagationsOnEntityDelete: boolean, # Optional. <Description>Determines if propagations will be removed on entity deletion.</Description>
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. <Description>The end of the time boundary.</Description>
        ///           startTime: string, # Optional. <Description>The start of the time boundary.</Description>
        ///           timeZone: string, # Optional. <Description>The timezone of the time boundary.</Description>
        ///         }
        ///       ], # Optional. <Description>An array of time boundaries indicating validity periods.</Description>
        ///       source: string, # Optional. <Description>indicate the source who create the classification detail</Description>
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>more detail on source information</Description>
        ///     }
        ///   ], # Optional. <Description>An array of classifications.</Description>
        ///   longDescription: string, # Optional. <Description>The long version description.</Description>
        ///   name: string, # Optional. <Description>The name of the glossary object.</Description>
        ///   qualifiedName: string, # Optional. <Description>The qualified name of the glossary object.</Description>
        ///   shortDescription: string, # Optional. <Description>The short version of description.</Description>
        ///   lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///   guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///   abbreviation: string, # Optional. <Description>The abbreviation of the term.</Description>
        ///   templateName: [AnyObject], # Optional.
        ///   anchor: {
        ///     displayText: string, # Optional. <Description>The display text.</Description>
        ///     glossaryGuid: string, # Optional. <Description>The GUID of the glossary.</Description>
        ///     relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///   }, # Optional. <Description>The glossary header with basic information.</Description>
        ///   antonyms: [
        ///     {
        ///       description: string, # Optional. <Description>The description of the related term.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       expression: string, # Optional. <Description>The expression of the term.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       source: string, # Optional. <Description>The source of the term.</Description>
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///       steward: string, # Optional. <Description>The steward of the term.</Description>
        ///       termGuid: string, # Optional. <Description>The GUID of the term.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of related term headers as antonyms.</Description>
        ///   createTime: number, # Optional. <Description>The created time of the record.</Description>
        ///   createdBy: string, # Optional. <Description>The user who created the record.</Description>
        ///   updateTime: number, # Optional. <Description>The update time of the record.</Description>
        ///   updatedBy: string, # Optional. <Description>The user who updated the record.</Description>
        ///   status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;, # Optional. <Description>Status of the AtlasGlossaryTerm</Description>
        ///   resources: [
        ///     {
        ///       displayName: string, # Optional. <Description>Display name for url.</Description>
        ///       url: string, # Optional. <Description>web url. http or https</Description>
        ///     }
        ///   ], # Optional. <Description>An array of resource link for term</Description>
        ///   contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. <Description>The dictionary of contacts for terms. Key could be Expert or Steward.</Description>
        ///   attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;, # Optional. <Description>The custom attributes of the term, which is map&lt;string,map&lt;string,object&gt;&gt;.
        /// The key of the first layer map is term template name.</Description>
        ///   assignedEntities: [
        ///     {
        ///       guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///       typeName: string, # Optional. <Description>The name of the type.</Description>
        ///       uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The unique attributes of the object.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///       relationshipType: string, # Optional.
        ///       relationshipAttributes: {
        ///         attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///         typeName: string, # Optional. <Description>The name of the type.</Description>
        ///         lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///       }, # Optional. <Description>Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.</Description>
        ///       relationshipGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>The enum of relationship status.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of related object IDs.</Description>
        ///   categories: [
        ///     {
        ///       categoryGuid: string, # Optional. <Description>The GUID of the category.</Description>
        ///       description: string, # Optional. <Description>The description of the record.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of term categorization headers.</Description>
        ///   classifies: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers.</Description>
        ///   examples: [string], # Optional. <Description>An array of examples.</Description>
        ///   isA: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers indicating the is-a relationship.</Description>
        ///   preferredTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of preferred related term headers.</Description>
        ///   preferredToTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers that are preferred to.</Description>
        ///   replacedBy: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers that are replaced by.</Description>
        ///   replacementTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers for replacement.</Description>
        ///   seeAlso: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers for see also.</Description>
        ///   synonyms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers as synonyms.</Description>
        ///   translatedTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of translated related term headers.</Description>
        ///   translationTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers for translation.</Description>
        ///   usage: string, # Optional. <Description>The usage of the term.</Description>
        ///   validValues: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers as valid values.</Description>
        ///   validValuesFor: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers as valid values for other records.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetGlossaryTerm(string termGuid, bool? includeTermHierarchy = null, IEnumerable<string> excludeRelationshipTypeList = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(termGuid, nameof(termGuid));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.GetGlossaryTerm");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetGlossaryTermRequest(termGuid, includeTermHierarchy, excludeRelationshipTypeList, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update the given glossary term by its GUID. </summary>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="termGuid"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="termGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/PurviewCatalog/PurviewGlossary/UpdateGlossaryTerm
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///       typeName: string, # Optional. <Description>The name of the type.</Description>
        ///       lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///       entityGuid: string, # Optional. <Description>The GUID of the entity.</Description>
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///       removePropagationsOnEntityDelete: boolean, # Optional. <Description>Determines if propagations will be removed on entity deletion.</Description>
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. <Description>The end of the time boundary.</Description>
        ///           startTime: string, # Optional. <Description>The start of the time boundary.</Description>
        ///           timeZone: string, # Optional. <Description>The timezone of the time boundary.</Description>
        ///         }
        ///       ], # Optional. <Description>An array of time boundaries indicating validity periods.</Description>
        ///       source: string, # Optional. <Description>indicate the source who create the classification detail</Description>
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>more detail on source information</Description>
        ///     }
        ///   ], # Optional. <Description>An array of classifications.</Description>
        ///   longDescription: string, # Optional. <Description>The long version description.</Description>
        ///   name: string, # Optional. <Description>The name of the glossary object.</Description>
        ///   qualifiedName: string, # Optional. <Description>The qualified name of the glossary object.</Description>
        ///   shortDescription: string, # Optional. <Description>The short version of description.</Description>
        ///   lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///   guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///   abbreviation: string, # Optional. <Description>The abbreviation of the term.</Description>
        ///   templateName: [AnyObject], # Optional.
        ///   anchor: {
        ///     displayText: string, # Optional. <Description>The display text.</Description>
        ///     glossaryGuid: string, # Optional. <Description>The GUID of the glossary.</Description>
        ///     relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///   }, # Optional. <Description>The glossary header with basic information.</Description>
        ///   antonyms: [
        ///     {
        ///       description: string, # Optional. <Description>The description of the related term.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       expression: string, # Optional. <Description>The expression of the term.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       source: string, # Optional. <Description>The source of the term.</Description>
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///       steward: string, # Optional. <Description>The steward of the term.</Description>
        ///       termGuid: string, # Optional. <Description>The GUID of the term.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of related term headers as antonyms.</Description>
        ///   createTime: number, # Optional. <Description>The created time of the record.</Description>
        ///   createdBy: string, # Optional. <Description>The user who created the record.</Description>
        ///   updateTime: number, # Optional. <Description>The update time of the record.</Description>
        ///   updatedBy: string, # Optional. <Description>The user who updated the record.</Description>
        ///   status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;, # Optional. <Description>Status of the AtlasGlossaryTerm</Description>
        ///   resources: [
        ///     {
        ///       displayName: string, # Optional. <Description>Display name for url.</Description>
        ///       url: string, # Optional. <Description>web url. http or https</Description>
        ///     }
        ///   ], # Optional. <Description>An array of resource link for term</Description>
        ///   contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. <Description>The dictionary of contacts for terms. Key could be Expert or Steward.</Description>
        ///   attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;, # Optional. <Description>The custom attributes of the term, which is map&lt;string,map&lt;string,object&gt;&gt;.
        /// The key of the first layer map is term template name.</Description>
        ///   assignedEntities: [
        ///     {
        ///       guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///       typeName: string, # Optional. <Description>The name of the type.</Description>
        ///       uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The unique attributes of the object.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///       relationshipType: string, # Optional.
        ///       relationshipAttributes: {
        ///         attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///         typeName: string, # Optional. <Description>The name of the type.</Description>
        ///         lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///       }, # Optional. <Description>Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.</Description>
        ///       relationshipGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>The enum of relationship status.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of related object IDs.</Description>
        ///   categories: [
        ///     {
        ///       categoryGuid: string, # Optional. <Description>The GUID of the category.</Description>
        ///       description: string, # Optional. <Description>The description of the record.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of term categorization headers.</Description>
        ///   classifies: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers.</Description>
        ///   examples: [string], # Optional. <Description>An array of examples.</Description>
        ///   isA: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers indicating the is-a relationship.</Description>
        ///   preferredTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of preferred related term headers.</Description>
        ///   preferredToTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers that are preferred to.</Description>
        ///   replacedBy: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers that are replaced by.</Description>
        ///   replacementTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers for replacement.</Description>
        ///   seeAlso: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers for see also.</Description>
        ///   synonyms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers as synonyms.</Description>
        ///   translatedTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of translated related term headers.</Description>
        ///   translationTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers for translation.</Description>
        ///   usage: string, # Optional. <Description>The usage of the term.</Description>
        ///   validValues: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers as valid values.</Description>
        ///   validValuesFor: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers as valid values for other records.</Description>
        /// }
        /// </code>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///       typeName: string, # Optional. <Description>The name of the type.</Description>
        ///       lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///       entityGuid: string, # Optional. <Description>The GUID of the entity.</Description>
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///       removePropagationsOnEntityDelete: boolean, # Optional. <Description>Determines if propagations will be removed on entity deletion.</Description>
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. <Description>The end of the time boundary.</Description>
        ///           startTime: string, # Optional. <Description>The start of the time boundary.</Description>
        ///           timeZone: string, # Optional. <Description>The timezone of the time boundary.</Description>
        ///         }
        ///       ], # Optional. <Description>An array of time boundaries indicating validity periods.</Description>
        ///       source: string, # Optional. <Description>indicate the source who create the classification detail</Description>
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>more detail on source information</Description>
        ///     }
        ///   ], # Optional. <Description>An array of classifications.</Description>
        ///   longDescription: string, # Optional. <Description>The long version description.</Description>
        ///   name: string, # Optional. <Description>The name of the glossary object.</Description>
        ///   qualifiedName: string, # Optional. <Description>The qualified name of the glossary object.</Description>
        ///   shortDescription: string, # Optional. <Description>The short version of description.</Description>
        ///   lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///   guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///   abbreviation: string, # Optional. <Description>The abbreviation of the term.</Description>
        ///   templateName: [AnyObject], # Optional.
        ///   anchor: {
        ///     displayText: string, # Optional. <Description>The display text.</Description>
        ///     glossaryGuid: string, # Optional. <Description>The GUID of the glossary.</Description>
        ///     relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///   }, # Optional. <Description>The glossary header with basic information.</Description>
        ///   antonyms: [
        ///     {
        ///       description: string, # Optional. <Description>The description of the related term.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       expression: string, # Optional. <Description>The expression of the term.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       source: string, # Optional. <Description>The source of the term.</Description>
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///       steward: string, # Optional. <Description>The steward of the term.</Description>
        ///       termGuid: string, # Optional. <Description>The GUID of the term.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of related term headers as antonyms.</Description>
        ///   createTime: number, # Optional. <Description>The created time of the record.</Description>
        ///   createdBy: string, # Optional. <Description>The user who created the record.</Description>
        ///   updateTime: number, # Optional. <Description>The update time of the record.</Description>
        ///   updatedBy: string, # Optional. <Description>The user who updated the record.</Description>
        ///   status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;, # Optional. <Description>Status of the AtlasGlossaryTerm</Description>
        ///   resources: [
        ///     {
        ///       displayName: string, # Optional. <Description>Display name for url.</Description>
        ///       url: string, # Optional. <Description>web url. http or https</Description>
        ///     }
        ///   ], # Optional. <Description>An array of resource link for term</Description>
        ///   contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. <Description>The dictionary of contacts for terms. Key could be Expert or Steward.</Description>
        ///   attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;, # Optional. <Description>The custom attributes of the term, which is map&lt;string,map&lt;string,object&gt;&gt;.
        /// The key of the first layer map is term template name.</Description>
        ///   assignedEntities: [
        ///     {
        ///       guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///       typeName: string, # Optional. <Description>The name of the type.</Description>
        ///       uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The unique attributes of the object.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///       relationshipType: string, # Optional.
        ///       relationshipAttributes: {
        ///         attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///         typeName: string, # Optional. <Description>The name of the type.</Description>
        ///         lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///       }, # Optional. <Description>Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.</Description>
        ///       relationshipGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>The enum of relationship status.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of related object IDs.</Description>
        ///   categories: [
        ///     {
        ///       categoryGuid: string, # Optional. <Description>The GUID of the category.</Description>
        ///       description: string, # Optional. <Description>The description of the record.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of term categorization headers.</Description>
        ///   classifies: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers.</Description>
        ///   examples: [string], # Optional. <Description>An array of examples.</Description>
        ///   isA: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers indicating the is-a relationship.</Description>
        ///   preferredTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of preferred related term headers.</Description>
        ///   preferredToTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers that are preferred to.</Description>
        ///   replacedBy: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers that are replaced by.</Description>
        ///   replacementTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers for replacement.</Description>
        ///   seeAlso: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers for see also.</Description>
        ///   synonyms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers as synonyms.</Description>
        ///   translatedTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of translated related term headers.</Description>
        ///   translationTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers for translation.</Description>
        ///   usage: string, # Optional. <Description>The usage of the term.</Description>
        ///   validValues: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers as valid values.</Description>
        ///   validValuesFor: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers as valid values for other records.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> UpdateGlossaryTermAsync(string termGuid, RequestContent content, bool? includeTermHierarchy = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(termGuid, nameof(termGuid));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.UpdateGlossaryTerm");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateGlossaryTermRequest(termGuid, content, includeTermHierarchy, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update the given glossary term by its GUID. </summary>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="termGuid"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="termGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/PurviewCatalog/PurviewGlossary/UpdateGlossaryTerm
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///       typeName: string, # Optional. <Description>The name of the type.</Description>
        ///       lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///       entityGuid: string, # Optional. <Description>The GUID of the entity.</Description>
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///       removePropagationsOnEntityDelete: boolean, # Optional. <Description>Determines if propagations will be removed on entity deletion.</Description>
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. <Description>The end of the time boundary.</Description>
        ///           startTime: string, # Optional. <Description>The start of the time boundary.</Description>
        ///           timeZone: string, # Optional. <Description>The timezone of the time boundary.</Description>
        ///         }
        ///       ], # Optional. <Description>An array of time boundaries indicating validity periods.</Description>
        ///       source: string, # Optional. <Description>indicate the source who create the classification detail</Description>
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>more detail on source information</Description>
        ///     }
        ///   ], # Optional. <Description>An array of classifications.</Description>
        ///   longDescription: string, # Optional. <Description>The long version description.</Description>
        ///   name: string, # Optional. <Description>The name of the glossary object.</Description>
        ///   qualifiedName: string, # Optional. <Description>The qualified name of the glossary object.</Description>
        ///   shortDescription: string, # Optional. <Description>The short version of description.</Description>
        ///   lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///   guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///   abbreviation: string, # Optional. <Description>The abbreviation of the term.</Description>
        ///   templateName: [AnyObject], # Optional.
        ///   anchor: {
        ///     displayText: string, # Optional. <Description>The display text.</Description>
        ///     glossaryGuid: string, # Optional. <Description>The GUID of the glossary.</Description>
        ///     relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///   }, # Optional. <Description>The glossary header with basic information.</Description>
        ///   antonyms: [
        ///     {
        ///       description: string, # Optional. <Description>The description of the related term.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       expression: string, # Optional. <Description>The expression of the term.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       source: string, # Optional. <Description>The source of the term.</Description>
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///       steward: string, # Optional. <Description>The steward of the term.</Description>
        ///       termGuid: string, # Optional. <Description>The GUID of the term.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of related term headers as antonyms.</Description>
        ///   createTime: number, # Optional. <Description>The created time of the record.</Description>
        ///   createdBy: string, # Optional. <Description>The user who created the record.</Description>
        ///   updateTime: number, # Optional. <Description>The update time of the record.</Description>
        ///   updatedBy: string, # Optional. <Description>The user who updated the record.</Description>
        ///   status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;, # Optional. <Description>Status of the AtlasGlossaryTerm</Description>
        ///   resources: [
        ///     {
        ///       displayName: string, # Optional. <Description>Display name for url.</Description>
        ///       url: string, # Optional. <Description>web url. http or https</Description>
        ///     }
        ///   ], # Optional. <Description>An array of resource link for term</Description>
        ///   contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. <Description>The dictionary of contacts for terms. Key could be Expert or Steward.</Description>
        ///   attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;, # Optional. <Description>The custom attributes of the term, which is map&lt;string,map&lt;string,object&gt;&gt;.
        /// The key of the first layer map is term template name.</Description>
        ///   assignedEntities: [
        ///     {
        ///       guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///       typeName: string, # Optional. <Description>The name of the type.</Description>
        ///       uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The unique attributes of the object.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///       relationshipType: string, # Optional.
        ///       relationshipAttributes: {
        ///         attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///         typeName: string, # Optional. <Description>The name of the type.</Description>
        ///         lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///       }, # Optional. <Description>Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.</Description>
        ///       relationshipGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>The enum of relationship status.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of related object IDs.</Description>
        ///   categories: [
        ///     {
        ///       categoryGuid: string, # Optional. <Description>The GUID of the category.</Description>
        ///       description: string, # Optional. <Description>The description of the record.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of term categorization headers.</Description>
        ///   classifies: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers.</Description>
        ///   examples: [string], # Optional. <Description>An array of examples.</Description>
        ///   isA: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers indicating the is-a relationship.</Description>
        ///   preferredTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of preferred related term headers.</Description>
        ///   preferredToTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers that are preferred to.</Description>
        ///   replacedBy: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers that are replaced by.</Description>
        ///   replacementTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers for replacement.</Description>
        ///   seeAlso: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers for see also.</Description>
        ///   synonyms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers as synonyms.</Description>
        ///   translatedTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of translated related term headers.</Description>
        ///   translationTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers for translation.</Description>
        ///   usage: string, # Optional. <Description>The usage of the term.</Description>
        ///   validValues: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers as valid values.</Description>
        ///   validValuesFor: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers as valid values for other records.</Description>
        /// }
        /// </code>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///       typeName: string, # Optional. <Description>The name of the type.</Description>
        ///       lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///       entityGuid: string, # Optional. <Description>The GUID of the entity.</Description>
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///       removePropagationsOnEntityDelete: boolean, # Optional. <Description>Determines if propagations will be removed on entity deletion.</Description>
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. <Description>The end of the time boundary.</Description>
        ///           startTime: string, # Optional. <Description>The start of the time boundary.</Description>
        ///           timeZone: string, # Optional. <Description>The timezone of the time boundary.</Description>
        ///         }
        ///       ], # Optional. <Description>An array of time boundaries indicating validity periods.</Description>
        ///       source: string, # Optional. <Description>indicate the source who create the classification detail</Description>
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>more detail on source information</Description>
        ///     }
        ///   ], # Optional. <Description>An array of classifications.</Description>
        ///   longDescription: string, # Optional. <Description>The long version description.</Description>
        ///   name: string, # Optional. <Description>The name of the glossary object.</Description>
        ///   qualifiedName: string, # Optional. <Description>The qualified name of the glossary object.</Description>
        ///   shortDescription: string, # Optional. <Description>The short version of description.</Description>
        ///   lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///   guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///   abbreviation: string, # Optional. <Description>The abbreviation of the term.</Description>
        ///   templateName: [AnyObject], # Optional.
        ///   anchor: {
        ///     displayText: string, # Optional. <Description>The display text.</Description>
        ///     glossaryGuid: string, # Optional. <Description>The GUID of the glossary.</Description>
        ///     relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///   }, # Optional. <Description>The glossary header with basic information.</Description>
        ///   antonyms: [
        ///     {
        ///       description: string, # Optional. <Description>The description of the related term.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       expression: string, # Optional. <Description>The expression of the term.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       source: string, # Optional. <Description>The source of the term.</Description>
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///       steward: string, # Optional. <Description>The steward of the term.</Description>
        ///       termGuid: string, # Optional. <Description>The GUID of the term.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of related term headers as antonyms.</Description>
        ///   createTime: number, # Optional. <Description>The created time of the record.</Description>
        ///   createdBy: string, # Optional. <Description>The user who created the record.</Description>
        ///   updateTime: number, # Optional. <Description>The update time of the record.</Description>
        ///   updatedBy: string, # Optional. <Description>The user who updated the record.</Description>
        ///   status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;, # Optional. <Description>Status of the AtlasGlossaryTerm</Description>
        ///   resources: [
        ///     {
        ///       displayName: string, # Optional. <Description>Display name for url.</Description>
        ///       url: string, # Optional. <Description>web url. http or https</Description>
        ///     }
        ///   ], # Optional. <Description>An array of resource link for term</Description>
        ///   contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. <Description>The dictionary of contacts for terms. Key could be Expert or Steward.</Description>
        ///   attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;, # Optional. <Description>The custom attributes of the term, which is map&lt;string,map&lt;string,object&gt;&gt;.
        /// The key of the first layer map is term template name.</Description>
        ///   assignedEntities: [
        ///     {
        ///       guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///       typeName: string, # Optional. <Description>The name of the type.</Description>
        ///       uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The unique attributes of the object.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///       relationshipType: string, # Optional.
        ///       relationshipAttributes: {
        ///         attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///         typeName: string, # Optional. <Description>The name of the type.</Description>
        ///         lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///       }, # Optional. <Description>Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.</Description>
        ///       relationshipGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>The enum of relationship status.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of related object IDs.</Description>
        ///   categories: [
        ///     {
        ///       categoryGuid: string, # Optional. <Description>The GUID of the category.</Description>
        ///       description: string, # Optional. <Description>The description of the record.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of term categorization headers.</Description>
        ///   classifies: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers.</Description>
        ///   examples: [string], # Optional. <Description>An array of examples.</Description>
        ///   isA: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers indicating the is-a relationship.</Description>
        ///   preferredTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of preferred related term headers.</Description>
        ///   preferredToTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers that are preferred to.</Description>
        ///   replacedBy: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers that are replaced by.</Description>
        ///   replacementTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers for replacement.</Description>
        ///   seeAlso: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers for see also.</Description>
        ///   synonyms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers as synonyms.</Description>
        ///   translatedTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of translated related term headers.</Description>
        ///   translationTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers for translation.</Description>
        ///   usage: string, # Optional. <Description>The usage of the term.</Description>
        ///   validValues: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers as valid values.</Description>
        ///   validValuesFor: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers as valid values for other records.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response UpdateGlossaryTerm(string termGuid, RequestContent content, bool? includeTermHierarchy = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(termGuid, nameof(termGuid));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.UpdateGlossaryTerm");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateGlossaryTermRequest(termGuid, content, includeTermHierarchy, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a glossary term. </summary>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="termGuid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="termGuid"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<Response> DeleteGlossaryTermAsync(string termGuid, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(termGuid, nameof(termGuid));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.DeleteGlossaryTerm");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteGlossaryTermRequest(termGuid, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a glossary term. </summary>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="termGuid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="termGuid"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Response DeleteGlossaryTerm(string termGuid, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(termGuid, nameof(termGuid));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.DeleteGlossaryTerm");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteGlossaryTermRequest(termGuid, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update the glossary term partially. </summary>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="termGuid"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="termGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/PurviewCatalog/PurviewGlossary/PartialUpdateGlossaryTerm
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///       typeName: string, # Optional. <Description>The name of the type.</Description>
        ///       lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///       entityGuid: string, # Optional. <Description>The GUID of the entity.</Description>
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///       removePropagationsOnEntityDelete: boolean, # Optional. <Description>Determines if propagations will be removed on entity deletion.</Description>
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. <Description>The end of the time boundary.</Description>
        ///           startTime: string, # Optional. <Description>The start of the time boundary.</Description>
        ///           timeZone: string, # Optional. <Description>The timezone of the time boundary.</Description>
        ///         }
        ///       ], # Optional. <Description>An array of time boundaries indicating validity periods.</Description>
        ///       source: string, # Optional. <Description>indicate the source who create the classification detail</Description>
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>more detail on source information</Description>
        ///     }
        ///   ], # Optional. <Description>An array of classifications.</Description>
        ///   longDescription: string, # Optional. <Description>The long version description.</Description>
        ///   name: string, # Optional. <Description>The name of the glossary object.</Description>
        ///   qualifiedName: string, # Optional. <Description>The qualified name of the glossary object.</Description>
        ///   shortDescription: string, # Optional. <Description>The short version of description.</Description>
        ///   lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///   guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///   abbreviation: string, # Optional. <Description>The abbreviation of the term.</Description>
        ///   templateName: [AnyObject], # Optional.
        ///   anchor: {
        ///     displayText: string, # Optional. <Description>The display text.</Description>
        ///     glossaryGuid: string, # Optional. <Description>The GUID of the glossary.</Description>
        ///     relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///   }, # Optional. <Description>The glossary header with basic information.</Description>
        ///   antonyms: [
        ///     {
        ///       description: string, # Optional. <Description>The description of the related term.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       expression: string, # Optional. <Description>The expression of the term.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       source: string, # Optional. <Description>The source of the term.</Description>
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///       steward: string, # Optional. <Description>The steward of the term.</Description>
        ///       termGuid: string, # Optional. <Description>The GUID of the term.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of related term headers as antonyms.</Description>
        ///   createTime: number, # Optional. <Description>The created time of the record.</Description>
        ///   createdBy: string, # Optional. <Description>The user who created the record.</Description>
        ///   updateTime: number, # Optional. <Description>The update time of the record.</Description>
        ///   updatedBy: string, # Optional. <Description>The user who updated the record.</Description>
        ///   status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;, # Optional. <Description>Status of the AtlasGlossaryTerm</Description>
        ///   resources: [
        ///     {
        ///       displayName: string, # Optional. <Description>Display name for url.</Description>
        ///       url: string, # Optional. <Description>web url. http or https</Description>
        ///     }
        ///   ], # Optional. <Description>An array of resource link for term</Description>
        ///   contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. <Description>The dictionary of contacts for terms. Key could be Expert or Steward.</Description>
        ///   attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;, # Optional. <Description>The custom attributes of the term, which is map&lt;string,map&lt;string,object&gt;&gt;.
        /// The key of the first layer map is term template name.</Description>
        ///   assignedEntities: [
        ///     {
        ///       guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///       typeName: string, # Optional. <Description>The name of the type.</Description>
        ///       uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The unique attributes of the object.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///       relationshipType: string, # Optional.
        ///       relationshipAttributes: {
        ///         attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///         typeName: string, # Optional. <Description>The name of the type.</Description>
        ///         lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///       }, # Optional. <Description>Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.</Description>
        ///       relationshipGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>The enum of relationship status.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of related object IDs.</Description>
        ///   categories: [
        ///     {
        ///       categoryGuid: string, # Optional. <Description>The GUID of the category.</Description>
        ///       description: string, # Optional. <Description>The description of the record.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of term categorization headers.</Description>
        ///   classifies: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers.</Description>
        ///   examples: [string], # Optional. <Description>An array of examples.</Description>
        ///   isA: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers indicating the is-a relationship.</Description>
        ///   preferredTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of preferred related term headers.</Description>
        ///   preferredToTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers that are preferred to.</Description>
        ///   replacedBy: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers that are replaced by.</Description>
        ///   replacementTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers for replacement.</Description>
        ///   seeAlso: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers for see also.</Description>
        ///   synonyms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers as synonyms.</Description>
        ///   translatedTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of translated related term headers.</Description>
        ///   translationTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers for translation.</Description>
        ///   usage: string, # Optional. <Description>The usage of the term.</Description>
        ///   validValues: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers as valid values.</Description>
        ///   validValuesFor: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers as valid values for other records.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> PartialUpdateGlossaryTermAsync(string termGuid, RequestContent content, bool? includeTermHierarchy = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(termGuid, nameof(termGuid));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.PartialUpdateGlossaryTerm");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePartialUpdateGlossaryTermRequest(termGuid, content, includeTermHierarchy, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update the glossary term partially. </summary>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="termGuid"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="termGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/PurviewCatalog/PurviewGlossary/PartialUpdateGlossaryTerm
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///       typeName: string, # Optional. <Description>The name of the type.</Description>
        ///       lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///       entityGuid: string, # Optional. <Description>The GUID of the entity.</Description>
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///       removePropagationsOnEntityDelete: boolean, # Optional. <Description>Determines if propagations will be removed on entity deletion.</Description>
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. <Description>The end of the time boundary.</Description>
        ///           startTime: string, # Optional. <Description>The start of the time boundary.</Description>
        ///           timeZone: string, # Optional. <Description>The timezone of the time boundary.</Description>
        ///         }
        ///       ], # Optional. <Description>An array of time boundaries indicating validity periods.</Description>
        ///       source: string, # Optional. <Description>indicate the source who create the classification detail</Description>
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>more detail on source information</Description>
        ///     }
        ///   ], # Optional. <Description>An array of classifications.</Description>
        ///   longDescription: string, # Optional. <Description>The long version description.</Description>
        ///   name: string, # Optional. <Description>The name of the glossary object.</Description>
        ///   qualifiedName: string, # Optional. <Description>The qualified name of the glossary object.</Description>
        ///   shortDescription: string, # Optional. <Description>The short version of description.</Description>
        ///   lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///   guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///   abbreviation: string, # Optional. <Description>The abbreviation of the term.</Description>
        ///   templateName: [AnyObject], # Optional.
        ///   anchor: {
        ///     displayText: string, # Optional. <Description>The display text.</Description>
        ///     glossaryGuid: string, # Optional. <Description>The GUID of the glossary.</Description>
        ///     relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///   }, # Optional. <Description>The glossary header with basic information.</Description>
        ///   antonyms: [
        ///     {
        ///       description: string, # Optional. <Description>The description of the related term.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       expression: string, # Optional. <Description>The expression of the term.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       source: string, # Optional. <Description>The source of the term.</Description>
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///       steward: string, # Optional. <Description>The steward of the term.</Description>
        ///       termGuid: string, # Optional. <Description>The GUID of the term.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of related term headers as antonyms.</Description>
        ///   createTime: number, # Optional. <Description>The created time of the record.</Description>
        ///   createdBy: string, # Optional. <Description>The user who created the record.</Description>
        ///   updateTime: number, # Optional. <Description>The update time of the record.</Description>
        ///   updatedBy: string, # Optional. <Description>The user who updated the record.</Description>
        ///   status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;, # Optional. <Description>Status of the AtlasGlossaryTerm</Description>
        ///   resources: [
        ///     {
        ///       displayName: string, # Optional. <Description>Display name for url.</Description>
        ///       url: string, # Optional. <Description>web url. http or https</Description>
        ///     }
        ///   ], # Optional. <Description>An array of resource link for term</Description>
        ///   contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. <Description>The dictionary of contacts for terms. Key could be Expert or Steward.</Description>
        ///   attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;, # Optional. <Description>The custom attributes of the term, which is map&lt;string,map&lt;string,object&gt;&gt;.
        /// The key of the first layer map is term template name.</Description>
        ///   assignedEntities: [
        ///     {
        ///       guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///       typeName: string, # Optional. <Description>The name of the type.</Description>
        ///       uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The unique attributes of the object.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///       relationshipType: string, # Optional.
        ///       relationshipAttributes: {
        ///         attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///         typeName: string, # Optional. <Description>The name of the type.</Description>
        ///         lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///       }, # Optional. <Description>Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.</Description>
        ///       relationshipGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>The enum of relationship status.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of related object IDs.</Description>
        ///   categories: [
        ///     {
        ///       categoryGuid: string, # Optional. <Description>The GUID of the category.</Description>
        ///       description: string, # Optional. <Description>The description of the record.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of term categorization headers.</Description>
        ///   classifies: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers.</Description>
        ///   examples: [string], # Optional. <Description>An array of examples.</Description>
        ///   isA: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers indicating the is-a relationship.</Description>
        ///   preferredTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of preferred related term headers.</Description>
        ///   preferredToTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers that are preferred to.</Description>
        ///   replacedBy: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers that are replaced by.</Description>
        ///   replacementTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers for replacement.</Description>
        ///   seeAlso: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers for see also.</Description>
        ///   synonyms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers as synonyms.</Description>
        ///   translatedTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of translated related term headers.</Description>
        ///   translationTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers for translation.</Description>
        ///   usage: string, # Optional. <Description>The usage of the term.</Description>
        ///   validValues: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers as valid values.</Description>
        ///   validValuesFor: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers as valid values for other records.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response PartialUpdateGlossaryTerm(string termGuid, RequestContent content, bool? includeTermHierarchy = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(termGuid, nameof(termGuid));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.PartialUpdateGlossaryTerm");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePartialUpdateGlossaryTermRequest(termGuid, content, includeTermHierarchy, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create glossary terms in bulk. </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/PurviewCatalog/PurviewGlossary/CreateGlossaryTerms
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///       typeName: string, # Optional. <Description>The name of the type.</Description>
        ///       lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///       entityGuid: string, # Optional. <Description>The GUID of the entity.</Description>
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///       removePropagationsOnEntityDelete: boolean, # Optional. <Description>Determines if propagations will be removed on entity deletion.</Description>
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. <Description>The end of the time boundary.</Description>
        ///           startTime: string, # Optional. <Description>The start of the time boundary.</Description>
        ///           timeZone: string, # Optional. <Description>The timezone of the time boundary.</Description>
        ///         }
        ///       ], # Optional. <Description>An array of time boundaries indicating validity periods.</Description>
        ///       source: string, # Optional. <Description>indicate the source who create the classification detail</Description>
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>more detail on source information</Description>
        ///     }
        ///   ], # Optional. <Description>An array of classifications.</Description>
        ///   longDescription: string, # Optional. <Description>The long version description.</Description>
        ///   name: string, # Optional. <Description>The name of the glossary object.</Description>
        ///   qualifiedName: string, # Optional. <Description>The qualified name of the glossary object.</Description>
        ///   shortDescription: string, # Optional. <Description>The short version of description.</Description>
        ///   lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///   guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///   abbreviation: string, # Optional. <Description>The abbreviation of the term.</Description>
        ///   templateName: [AnyObject], # Optional.
        ///   anchor: {
        ///     displayText: string, # Optional. <Description>The display text.</Description>
        ///     glossaryGuid: string, # Optional. <Description>The GUID of the glossary.</Description>
        ///     relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///   }, # Optional. <Description>The glossary header with basic information.</Description>
        ///   antonyms: [
        ///     {
        ///       description: string, # Optional. <Description>The description of the related term.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       expression: string, # Optional. <Description>The expression of the term.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       source: string, # Optional. <Description>The source of the term.</Description>
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///       steward: string, # Optional. <Description>The steward of the term.</Description>
        ///       termGuid: string, # Optional. <Description>The GUID of the term.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of related term headers as antonyms.</Description>
        ///   createTime: number, # Optional. <Description>The created time of the record.</Description>
        ///   createdBy: string, # Optional. <Description>The user who created the record.</Description>
        ///   updateTime: number, # Optional. <Description>The update time of the record.</Description>
        ///   updatedBy: string, # Optional. <Description>The user who updated the record.</Description>
        ///   status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;, # Optional. <Description>Status of the AtlasGlossaryTerm</Description>
        ///   resources: [
        ///     {
        ///       displayName: string, # Optional. <Description>Display name for url.</Description>
        ///       url: string, # Optional. <Description>web url. http or https</Description>
        ///     }
        ///   ], # Optional. <Description>An array of resource link for term</Description>
        ///   contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. <Description>The dictionary of contacts for terms. Key could be Expert or Steward.</Description>
        ///   attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;, # Optional. <Description>The custom attributes of the term, which is map&lt;string,map&lt;string,object&gt;&gt;.
        /// The key of the first layer map is term template name.</Description>
        ///   assignedEntities: [
        ///     {
        ///       guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///       typeName: string, # Optional. <Description>The name of the type.</Description>
        ///       uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The unique attributes of the object.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///       relationshipType: string, # Optional.
        ///       relationshipAttributes: {
        ///         attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///         typeName: string, # Optional. <Description>The name of the type.</Description>
        ///         lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///       }, # Optional. <Description>Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.</Description>
        ///       relationshipGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>The enum of relationship status.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of related object IDs.</Description>
        ///   categories: [
        ///     {
        ///       categoryGuid: string, # Optional. <Description>The GUID of the category.</Description>
        ///       description: string, # Optional. <Description>The description of the record.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of term categorization headers.</Description>
        ///   classifies: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers.</Description>
        ///   examples: [string], # Optional. <Description>An array of examples.</Description>
        ///   isA: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers indicating the is-a relationship.</Description>
        ///   preferredTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of preferred related term headers.</Description>
        ///   preferredToTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers that are preferred to.</Description>
        ///   replacedBy: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers that are replaced by.</Description>
        ///   replacementTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers for replacement.</Description>
        ///   seeAlso: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers for see also.</Description>
        ///   synonyms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers as synonyms.</Description>
        ///   translatedTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of translated related term headers.</Description>
        ///   translationTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers for translation.</Description>
        ///   usage: string, # Optional. <Description>The usage of the term.</Description>
        ///   validValues: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers as valid values.</Description>
        ///   validValuesFor: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers as valid values for other records.</Description>
        /// }
        /// </code>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///       typeName: string, # Optional. <Description>The name of the type.</Description>
        ///       lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///       entityGuid: string, # Optional. <Description>The GUID of the entity.</Description>
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///       removePropagationsOnEntityDelete: boolean, # Optional. <Description>Determines if propagations will be removed on entity deletion.</Description>
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. <Description>The end of the time boundary.</Description>
        ///           startTime: string, # Optional. <Description>The start of the time boundary.</Description>
        ///           timeZone: string, # Optional. <Description>The timezone of the time boundary.</Description>
        ///         }
        ///       ], # Optional. <Description>An array of time boundaries indicating validity periods.</Description>
        ///       source: string, # Optional. <Description>indicate the source who create the classification detail</Description>
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>more detail on source information</Description>
        ///     }
        ///   ], # Optional. <Description>An array of classifications.</Description>
        ///   longDescription: string, # Optional. <Description>The long version description.</Description>
        ///   name: string, # Optional. <Description>The name of the glossary object.</Description>
        ///   qualifiedName: string, # Optional. <Description>The qualified name of the glossary object.</Description>
        ///   shortDescription: string, # Optional. <Description>The short version of description.</Description>
        ///   lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///   guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///   abbreviation: string, # Optional. <Description>The abbreviation of the term.</Description>
        ///   templateName: [AnyObject], # Optional.
        ///   anchor: {
        ///     displayText: string, # Optional. <Description>The display text.</Description>
        ///     glossaryGuid: string, # Optional. <Description>The GUID of the glossary.</Description>
        ///     relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///   }, # Optional. <Description>The glossary header with basic information.</Description>
        ///   antonyms: [
        ///     {
        ///       description: string, # Optional. <Description>The description of the related term.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       expression: string, # Optional. <Description>The expression of the term.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       source: string, # Optional. <Description>The source of the term.</Description>
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///       steward: string, # Optional. <Description>The steward of the term.</Description>
        ///       termGuid: string, # Optional. <Description>The GUID of the term.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of related term headers as antonyms.</Description>
        ///   createTime: number, # Optional. <Description>The created time of the record.</Description>
        ///   createdBy: string, # Optional. <Description>The user who created the record.</Description>
        ///   updateTime: number, # Optional. <Description>The update time of the record.</Description>
        ///   updatedBy: string, # Optional. <Description>The user who updated the record.</Description>
        ///   status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;, # Optional. <Description>Status of the AtlasGlossaryTerm</Description>
        ///   resources: [
        ///     {
        ///       displayName: string, # Optional. <Description>Display name for url.</Description>
        ///       url: string, # Optional. <Description>web url. http or https</Description>
        ///     }
        ///   ], # Optional. <Description>An array of resource link for term</Description>
        ///   contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. <Description>The dictionary of contacts for terms. Key could be Expert or Steward.</Description>
        ///   attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;, # Optional. <Description>The custom attributes of the term, which is map&lt;string,map&lt;string,object&gt;&gt;.
        /// The key of the first layer map is term template name.</Description>
        ///   assignedEntities: [
        ///     {
        ///       guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///       typeName: string, # Optional. <Description>The name of the type.</Description>
        ///       uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The unique attributes of the object.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///       relationshipType: string, # Optional.
        ///       relationshipAttributes: {
        ///         attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///         typeName: string, # Optional. <Description>The name of the type.</Description>
        ///         lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///       }, # Optional. <Description>Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.</Description>
        ///       relationshipGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>The enum of relationship status.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of related object IDs.</Description>
        ///   categories: [
        ///     {
        ///       categoryGuid: string, # Optional. <Description>The GUID of the category.</Description>
        ///       description: string, # Optional. <Description>The description of the record.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of term categorization headers.</Description>
        ///   classifies: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers.</Description>
        ///   examples: [string], # Optional. <Description>An array of examples.</Description>
        ///   isA: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers indicating the is-a relationship.</Description>
        ///   preferredTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of preferred related term headers.</Description>
        ///   preferredToTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers that are preferred to.</Description>
        ///   replacedBy: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers that are replaced by.</Description>
        ///   replacementTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers for replacement.</Description>
        ///   seeAlso: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers for see also.</Description>
        ///   synonyms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers as synonyms.</Description>
        ///   translatedTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of translated related term headers.</Description>
        ///   translationTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers for translation.</Description>
        ///   usage: string, # Optional. <Description>The usage of the term.</Description>
        ///   validValues: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers as valid values.</Description>
        ///   validValuesFor: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers as valid values for other records.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> CreateGlossaryTermsAsync(RequestContent content, bool? includeTermHierarchy = null, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.CreateGlossaryTerms");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateGlossaryTermsRequest(content, includeTermHierarchy, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create glossary terms in bulk. </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/PurviewCatalog/PurviewGlossary/CreateGlossaryTerms
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///       typeName: string, # Optional. <Description>The name of the type.</Description>
        ///       lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///       entityGuid: string, # Optional. <Description>The GUID of the entity.</Description>
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///       removePropagationsOnEntityDelete: boolean, # Optional. <Description>Determines if propagations will be removed on entity deletion.</Description>
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. <Description>The end of the time boundary.</Description>
        ///           startTime: string, # Optional. <Description>The start of the time boundary.</Description>
        ///           timeZone: string, # Optional. <Description>The timezone of the time boundary.</Description>
        ///         }
        ///       ], # Optional. <Description>An array of time boundaries indicating validity periods.</Description>
        ///       source: string, # Optional. <Description>indicate the source who create the classification detail</Description>
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>more detail on source information</Description>
        ///     }
        ///   ], # Optional. <Description>An array of classifications.</Description>
        ///   longDescription: string, # Optional. <Description>The long version description.</Description>
        ///   name: string, # Optional. <Description>The name of the glossary object.</Description>
        ///   qualifiedName: string, # Optional. <Description>The qualified name of the glossary object.</Description>
        ///   shortDescription: string, # Optional. <Description>The short version of description.</Description>
        ///   lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///   guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///   abbreviation: string, # Optional. <Description>The abbreviation of the term.</Description>
        ///   templateName: [AnyObject], # Optional.
        ///   anchor: {
        ///     displayText: string, # Optional. <Description>The display text.</Description>
        ///     glossaryGuid: string, # Optional. <Description>The GUID of the glossary.</Description>
        ///     relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///   }, # Optional. <Description>The glossary header with basic information.</Description>
        ///   antonyms: [
        ///     {
        ///       description: string, # Optional. <Description>The description of the related term.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       expression: string, # Optional. <Description>The expression of the term.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       source: string, # Optional. <Description>The source of the term.</Description>
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///       steward: string, # Optional. <Description>The steward of the term.</Description>
        ///       termGuid: string, # Optional. <Description>The GUID of the term.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of related term headers as antonyms.</Description>
        ///   createTime: number, # Optional. <Description>The created time of the record.</Description>
        ///   createdBy: string, # Optional. <Description>The user who created the record.</Description>
        ///   updateTime: number, # Optional. <Description>The update time of the record.</Description>
        ///   updatedBy: string, # Optional. <Description>The user who updated the record.</Description>
        ///   status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;, # Optional. <Description>Status of the AtlasGlossaryTerm</Description>
        ///   resources: [
        ///     {
        ///       displayName: string, # Optional. <Description>Display name for url.</Description>
        ///       url: string, # Optional. <Description>web url. http or https</Description>
        ///     }
        ///   ], # Optional. <Description>An array of resource link for term</Description>
        ///   contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. <Description>The dictionary of contacts for terms. Key could be Expert or Steward.</Description>
        ///   attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;, # Optional. <Description>The custom attributes of the term, which is map&lt;string,map&lt;string,object&gt;&gt;.
        /// The key of the first layer map is term template name.</Description>
        ///   assignedEntities: [
        ///     {
        ///       guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///       typeName: string, # Optional. <Description>The name of the type.</Description>
        ///       uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The unique attributes of the object.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///       relationshipType: string, # Optional.
        ///       relationshipAttributes: {
        ///         attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///         typeName: string, # Optional. <Description>The name of the type.</Description>
        ///         lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///       }, # Optional. <Description>Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.</Description>
        ///       relationshipGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>The enum of relationship status.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of related object IDs.</Description>
        ///   categories: [
        ///     {
        ///       categoryGuid: string, # Optional. <Description>The GUID of the category.</Description>
        ///       description: string, # Optional. <Description>The description of the record.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of term categorization headers.</Description>
        ///   classifies: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers.</Description>
        ///   examples: [string], # Optional. <Description>An array of examples.</Description>
        ///   isA: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers indicating the is-a relationship.</Description>
        ///   preferredTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of preferred related term headers.</Description>
        ///   preferredToTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers that are preferred to.</Description>
        ///   replacedBy: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers that are replaced by.</Description>
        ///   replacementTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers for replacement.</Description>
        ///   seeAlso: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers for see also.</Description>
        ///   synonyms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers as synonyms.</Description>
        ///   translatedTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of translated related term headers.</Description>
        ///   translationTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers for translation.</Description>
        ///   usage: string, # Optional. <Description>The usage of the term.</Description>
        ///   validValues: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers as valid values.</Description>
        ///   validValuesFor: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers as valid values for other records.</Description>
        /// }
        /// </code>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///       typeName: string, # Optional. <Description>The name of the type.</Description>
        ///       lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///       entityGuid: string, # Optional. <Description>The GUID of the entity.</Description>
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///       removePropagationsOnEntityDelete: boolean, # Optional. <Description>Determines if propagations will be removed on entity deletion.</Description>
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. <Description>The end of the time boundary.</Description>
        ///           startTime: string, # Optional. <Description>The start of the time boundary.</Description>
        ///           timeZone: string, # Optional. <Description>The timezone of the time boundary.</Description>
        ///         }
        ///       ], # Optional. <Description>An array of time boundaries indicating validity periods.</Description>
        ///       source: string, # Optional. <Description>indicate the source who create the classification detail</Description>
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>more detail on source information</Description>
        ///     }
        ///   ], # Optional. <Description>An array of classifications.</Description>
        ///   longDescription: string, # Optional. <Description>The long version description.</Description>
        ///   name: string, # Optional. <Description>The name of the glossary object.</Description>
        ///   qualifiedName: string, # Optional. <Description>The qualified name of the glossary object.</Description>
        ///   shortDescription: string, # Optional. <Description>The short version of description.</Description>
        ///   lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///   guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///   abbreviation: string, # Optional. <Description>The abbreviation of the term.</Description>
        ///   templateName: [AnyObject], # Optional.
        ///   anchor: {
        ///     displayText: string, # Optional. <Description>The display text.</Description>
        ///     glossaryGuid: string, # Optional. <Description>The GUID of the glossary.</Description>
        ///     relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///   }, # Optional. <Description>The glossary header with basic information.</Description>
        ///   antonyms: [
        ///     {
        ///       description: string, # Optional. <Description>The description of the related term.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       expression: string, # Optional. <Description>The expression of the term.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       source: string, # Optional. <Description>The source of the term.</Description>
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///       steward: string, # Optional. <Description>The steward of the term.</Description>
        ///       termGuid: string, # Optional. <Description>The GUID of the term.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of related term headers as antonyms.</Description>
        ///   createTime: number, # Optional. <Description>The created time of the record.</Description>
        ///   createdBy: string, # Optional. <Description>The user who created the record.</Description>
        ///   updateTime: number, # Optional. <Description>The update time of the record.</Description>
        ///   updatedBy: string, # Optional. <Description>The user who updated the record.</Description>
        ///   status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;, # Optional. <Description>Status of the AtlasGlossaryTerm</Description>
        ///   resources: [
        ///     {
        ///       displayName: string, # Optional. <Description>Display name for url.</Description>
        ///       url: string, # Optional. <Description>web url. http or https</Description>
        ///     }
        ///   ], # Optional. <Description>An array of resource link for term</Description>
        ///   contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. <Description>The dictionary of contacts for terms. Key could be Expert or Steward.</Description>
        ///   attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;, # Optional. <Description>The custom attributes of the term, which is map&lt;string,map&lt;string,object&gt;&gt;.
        /// The key of the first layer map is term template name.</Description>
        ///   assignedEntities: [
        ///     {
        ///       guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///       typeName: string, # Optional. <Description>The name of the type.</Description>
        ///       uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The unique attributes of the object.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///       relationshipType: string, # Optional.
        ///       relationshipAttributes: {
        ///         attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///         typeName: string, # Optional. <Description>The name of the type.</Description>
        ///         lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///       }, # Optional. <Description>Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.</Description>
        ///       relationshipGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>The enum of relationship status.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of related object IDs.</Description>
        ///   categories: [
        ///     {
        ///       categoryGuid: string, # Optional. <Description>The GUID of the category.</Description>
        ///       description: string, # Optional. <Description>The description of the record.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of term categorization headers.</Description>
        ///   classifies: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers.</Description>
        ///   examples: [string], # Optional. <Description>An array of examples.</Description>
        ///   isA: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers indicating the is-a relationship.</Description>
        ///   preferredTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of preferred related term headers.</Description>
        ///   preferredToTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers that are preferred to.</Description>
        ///   replacedBy: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers that are replaced by.</Description>
        ///   replacementTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers for replacement.</Description>
        ///   seeAlso: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers for see also.</Description>
        ///   synonyms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers as synonyms.</Description>
        ///   translatedTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of translated related term headers.</Description>
        ///   translationTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers for translation.</Description>
        ///   usage: string, # Optional. <Description>The usage of the term.</Description>
        ///   validValues: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers as valid values.</Description>
        ///   validValuesFor: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers as valid values for other records.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response CreateGlossaryTerms(RequestContent content, bool? includeTermHierarchy = null, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.CreateGlossaryTerms");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateGlossaryTermsRequest(content, includeTermHierarchy, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get all related objects assigned with the specified term. </summary>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="termGuid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="termGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/PurviewCatalog/PurviewGlossary/GetEntitiesAssignedWithTerm
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///   typeName: string, # Optional. <Description>The name of the type.</Description>
        ///   uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The unique attributes of the object.</Description>
        ///   displayText: string, # Optional. <Description>The display text.</Description>
        ///   entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///   relationshipType: string, # Optional.
        ///   relationshipAttributes: {
        ///     attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///     typeName: string, # Optional. <Description>The name of the type.</Description>
        ///     lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///   }, # Optional. <Description>Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.</Description>
        ///   relationshipGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///   relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>The enum of relationship status.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetEntitiesAssignedWithTermAsync(string termGuid, int? limit = null, int? offset = null, string sort = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(termGuid, nameof(termGuid));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.GetEntitiesAssignedWithTerm");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetEntitiesAssignedWithTermRequest(termGuid, limit, offset, sort, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get all related objects assigned with the specified term. </summary>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="termGuid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="termGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/PurviewCatalog/PurviewGlossary/GetEntitiesAssignedWithTerm
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///   typeName: string, # Optional. <Description>The name of the type.</Description>
        ///   uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The unique attributes of the object.</Description>
        ///   displayText: string, # Optional. <Description>The display text.</Description>
        ///   entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///   relationshipType: string, # Optional.
        ///   relationshipAttributes: {
        ///     attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///     typeName: string, # Optional. <Description>The name of the type.</Description>
        ///     lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///   }, # Optional. <Description>Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.</Description>
        ///   relationshipGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///   relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>The enum of relationship status.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetEntitiesAssignedWithTerm(string termGuid, int? limit = null, int? offset = null, string sort = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(termGuid, nameof(termGuid));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.GetEntitiesAssignedWithTerm");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetEntitiesAssignedWithTermRequest(termGuid, limit, offset, sort, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Assign the given term to the provided list of related objects. </summary>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="termGuid"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="termGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/PurviewCatalog/PurviewGlossary/AssignTermToEntities
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///   typeName: string, # Optional. <Description>The name of the type.</Description>
        ///   uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The unique attributes of the object.</Description>
        ///   displayText: string, # Optional. <Description>The display text.</Description>
        ///   entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///   relationshipType: string, # Optional.
        ///   relationshipAttributes: {
        ///     attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///     typeName: string, # Optional. <Description>The name of the type.</Description>
        ///     lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///   }, # Optional. <Description>Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.</Description>
        ///   relationshipGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///   relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>The enum of relationship status.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> AssignTermToEntitiesAsync(string termGuid, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(termGuid, nameof(termGuid));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.AssignTermToEntities");
            scope.Start();
            try
            {
                using HttpMessage message = CreateAssignTermToEntitiesRequest(termGuid, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Assign the given term to the provided list of related objects. </summary>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="termGuid"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="termGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/PurviewCatalog/PurviewGlossary/AssignTermToEntities
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///   typeName: string, # Optional. <Description>The name of the type.</Description>
        ///   uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The unique attributes of the object.</Description>
        ///   displayText: string, # Optional. <Description>The display text.</Description>
        ///   entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///   relationshipType: string, # Optional.
        ///   relationshipAttributes: {
        ///     attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///     typeName: string, # Optional. <Description>The name of the type.</Description>
        ///     lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///   }, # Optional. <Description>Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.</Description>
        ///   relationshipGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///   relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>The enum of relationship status.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response AssignTermToEntities(string termGuid, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(termGuid, nameof(termGuid));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.AssignTermToEntities");
            scope.Start();
            try
            {
                using HttpMessage message = CreateAssignTermToEntitiesRequest(termGuid, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete the term assignment for the given list of related objects. </summary>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="termGuid"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="termGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/PurviewCatalog/PurviewGlossary/RemoveTermAssignmentFromEntities
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///   typeName: string, # Optional. <Description>The name of the type.</Description>
        ///   uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The unique attributes of the object.</Description>
        ///   displayText: string, # Optional. <Description>The display text.</Description>
        ///   entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///   relationshipType: string, # Optional.
        ///   relationshipAttributes: {
        ///     attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///     typeName: string, # Optional. <Description>The name of the type.</Description>
        ///     lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///   }, # Optional. <Description>Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.</Description>
        ///   relationshipGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///   relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>The enum of relationship status.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> RemoveTermAssignmentFromEntitiesAsync(string termGuid, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(termGuid, nameof(termGuid));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.RemoveTermAssignmentFromEntities");
            scope.Start();
            try
            {
                using HttpMessage message = CreateRemoveTermAssignmentFromEntitiesRequest(termGuid, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete the term assignment for the given list of related objects. </summary>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="termGuid"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="termGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/PurviewCatalog/PurviewGlossary/RemoveTermAssignmentFromEntities
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///   typeName: string, # Optional. <Description>The name of the type.</Description>
        ///   uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The unique attributes of the object.</Description>
        ///   displayText: string, # Optional. <Description>The display text.</Description>
        ///   entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///   relationshipType: string, # Optional.
        ///   relationshipAttributes: {
        ///     attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///     typeName: string, # Optional. <Description>The name of the type.</Description>
        ///     lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///   }, # Optional. <Description>Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.</Description>
        ///   relationshipGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///   relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>The enum of relationship status.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response RemoveTermAssignmentFromEntities(string termGuid, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(termGuid, nameof(termGuid));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.RemoveTermAssignmentFromEntities");
            scope.Start();
            try
            {
                using HttpMessage message = CreateRemoveTermAssignmentFromEntitiesRequest(termGuid, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete the term assignment for the given list of related objects. </summary>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="termGuid"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="termGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/PurviewCatalog/PurviewGlossary/DeleteTermAssignmentFromEntities
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///   typeName: string, # Optional. <Description>The name of the type.</Description>
        ///   uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The unique attributes of the object.</Description>
        ///   displayText: string, # Optional. <Description>The display text.</Description>
        ///   entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///   relationshipType: string, # Optional.
        ///   relationshipAttributes: {
        ///     attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///     typeName: string, # Optional. <Description>The name of the type.</Description>
        ///     lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///   }, # Optional. <Description>Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.</Description>
        ///   relationshipGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///   relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>The enum of relationship status.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> DeleteTermAssignmentFromEntitiesAsync(string termGuid, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(termGuid, nameof(termGuid));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.DeleteTermAssignmentFromEntities");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteTermAssignmentFromEntitiesRequest(termGuid, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete the term assignment for the given list of related objects. </summary>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="termGuid"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="termGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/PurviewCatalog/PurviewGlossary/DeleteTermAssignmentFromEntities
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///   typeName: string, # Optional. <Description>The name of the type.</Description>
        ///   uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The unique attributes of the object.</Description>
        ///   displayText: string, # Optional. <Description>The display text.</Description>
        ///   entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///   relationshipType: string, # Optional.
        ///   relationshipAttributes: {
        ///     attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///     typeName: string, # Optional. <Description>The name of the type.</Description>
        ///     lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///   }, # Optional. <Description>Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.</Description>
        ///   relationshipGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///   relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>The enum of relationship status.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response DeleteTermAssignmentFromEntities(string termGuid, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(termGuid, nameof(termGuid));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.DeleteTermAssignmentFromEntities");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteTermAssignmentFromEntitiesRequest(termGuid, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get all related terms for a specific term by its GUID. Limit, offset, and sort parameters are currently not being enabled and won&apos;t work even they are passed. </summary>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="termGuid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="termGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/PurviewCatalog/PurviewGlossary/GetRelatedTerms
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   description: string, # Optional. <Description>The description of the related term.</Description>
        ///   displayText: string, # Optional. <Description>The display text.</Description>
        ///   expression: string, # Optional. <Description>The expression of the term.</Description>
        ///   relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///   source: string, # Optional. <Description>The source of the term.</Description>
        ///   status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///   steward: string, # Optional. <Description>The steward of the term.</Description>
        ///   termGuid: string, # Optional. <Description>The GUID of the term.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetRelatedTermsAsync(string termGuid, int? limit = null, int? offset = null, string sort = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(termGuid, nameof(termGuid));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.GetRelatedTerms");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetRelatedTermsRequest(termGuid, limit, offset, sort, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get all related terms for a specific term by its GUID. Limit, offset, and sort parameters are currently not being enabled and won&apos;t work even they are passed. </summary>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="termGuid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="termGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/PurviewCatalog/PurviewGlossary/GetRelatedTerms
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   description: string, # Optional. <Description>The description of the related term.</Description>
        ///   displayText: string, # Optional. <Description>The display text.</Description>
        ///   expression: string, # Optional. <Description>The expression of the term.</Description>
        ///   relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///   source: string, # Optional. <Description>The source of the term.</Description>
        ///   status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///   steward: string, # Optional. <Description>The steward of the term.</Description>
        ///   termGuid: string, # Optional. <Description>The GUID of the term.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetRelatedTerms(string termGuid, int? limit = null, int? offset = null, string sort = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(termGuid, nameof(termGuid));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.GetRelatedTerms");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetRelatedTermsRequest(termGuid, limit, offset, sort, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a specific Glossary by its GUID. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryGuid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="glossaryGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/PurviewCatalog/PurviewGlossary/GetGlossary
        /// Schema for <c>AtlasGlossaryExtInfo Response Body</c>:
        /// <code>{
        ///   categories: [
        ///     {
        ///       categoryGuid: string, # Optional. <Description>The GUID of the category.</Description>
        ///       description: string, # Optional. <Description>The description of the category header.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       parentCategoryGuid: string, # Optional. <Description>The GUID of the parent category.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of categories.</Description>
        ///   language: string, # Optional. <Description>The language of the glossary.</Description>
        ///   terms: [
        ///     {
        ///       description: string, # Optional. <Description>The description of the related term.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       expression: string, # Optional. <Description>The expression of the term.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       source: string, # Optional. <Description>The source of the term.</Description>
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///       steward: string, # Optional. <Description>The steward of the term.</Description>
        ///       termGuid: string, # Optional. <Description>The GUID of the term.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of related term headers.</Description>
        ///   usage: string, # Optional. <Description>The usage of the glossary.</Description>
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///       typeName: string, # Optional. <Description>The name of the type.</Description>
        ///       lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///       entityGuid: string, # Optional. <Description>The GUID of the entity.</Description>
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///       removePropagationsOnEntityDelete: boolean, # Optional. <Description>Determines if propagations will be removed on entity deletion.</Description>
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. <Description>The end of the time boundary.</Description>
        ///           startTime: string, # Optional. <Description>The start of the time boundary.</Description>
        ///           timeZone: string, # Optional. <Description>The timezone of the time boundary.</Description>
        ///         }
        ///       ], # Optional. <Description>An array of time boundaries indicating validity periods.</Description>
        ///       source: string, # Optional. <Description>indicate the source who create the classification detail</Description>
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>more detail on source information</Description>
        ///     }
        ///   ], # Optional. <Description>An array of classifications.</Description>
        ///   longDescription: string, # Optional. <Description>The long version description.</Description>
        ///   name: string, # Optional. <Description>The name of the glossary object.</Description>
        ///   qualifiedName: string, # Optional. <Description>The qualified name of the glossary object.</Description>
        ///   shortDescription: string, # Optional. <Description>The short version of description.</Description>
        ///   lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///   guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///   categoryInfo: Dictionary&lt;string, AtlasGlossaryCategory&gt;, # Optional. <Description>The glossary category information.</Description>
        ///   termInfo: Dictionary&lt;string, AtlasGlossaryTerm&gt;, # Optional. <Description>The glossary term information.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetGlossaryAsync(string glossaryGuid, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(glossaryGuid, nameof(glossaryGuid));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.GetGlossary");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetGlossaryRequest(glossaryGuid, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a specific Glossary by its GUID. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryGuid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="glossaryGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/PurviewCatalog/PurviewGlossary/GetGlossary
        /// Schema for <c>AtlasGlossaryExtInfo Response Body</c>:
        /// <code>{
        ///   categories: [
        ///     {
        ///       categoryGuid: string, # Optional. <Description>The GUID of the category.</Description>
        ///       description: string, # Optional. <Description>The description of the category header.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       parentCategoryGuid: string, # Optional. <Description>The GUID of the parent category.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of categories.</Description>
        ///   language: string, # Optional. <Description>The language of the glossary.</Description>
        ///   terms: [
        ///     {
        ///       description: string, # Optional. <Description>The description of the related term.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       expression: string, # Optional. <Description>The expression of the term.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       source: string, # Optional. <Description>The source of the term.</Description>
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///       steward: string, # Optional. <Description>The steward of the term.</Description>
        ///       termGuid: string, # Optional. <Description>The GUID of the term.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of related term headers.</Description>
        ///   usage: string, # Optional. <Description>The usage of the glossary.</Description>
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///       typeName: string, # Optional. <Description>The name of the type.</Description>
        ///       lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///       entityGuid: string, # Optional. <Description>The GUID of the entity.</Description>
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///       removePropagationsOnEntityDelete: boolean, # Optional. <Description>Determines if propagations will be removed on entity deletion.</Description>
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. <Description>The end of the time boundary.</Description>
        ///           startTime: string, # Optional. <Description>The start of the time boundary.</Description>
        ///           timeZone: string, # Optional. <Description>The timezone of the time boundary.</Description>
        ///         }
        ///       ], # Optional. <Description>An array of time boundaries indicating validity periods.</Description>
        ///       source: string, # Optional. <Description>indicate the source who create the classification detail</Description>
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>more detail on source information</Description>
        ///     }
        ///   ], # Optional. <Description>An array of classifications.</Description>
        ///   longDescription: string, # Optional. <Description>The long version description.</Description>
        ///   name: string, # Optional. <Description>The name of the glossary object.</Description>
        ///   qualifiedName: string, # Optional. <Description>The qualified name of the glossary object.</Description>
        ///   shortDescription: string, # Optional. <Description>The short version of description.</Description>
        ///   lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///   guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///   categoryInfo: Dictionary&lt;string, AtlasGlossaryCategory&gt;, # Optional. <Description>The glossary category information.</Description>
        ///   termInfo: Dictionary&lt;string, AtlasGlossaryTerm&gt;, # Optional. <Description>The glossary term information.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetGlossary(string glossaryGuid, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(glossaryGuid, nameof(glossaryGuid));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.GetGlossary");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetGlossaryRequest(glossaryGuid, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update the given glossary. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryGuid"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="glossaryGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/PurviewCatalog/PurviewGlossary/UpdateGlossary
        /// Schema for <c>AtlasGlossaryExtInfo Request Body</c>:
        /// <code>{
        ///   categories: [
        ///     {
        ///       categoryGuid: string, # Optional. <Description>The GUID of the category.</Description>
        ///       description: string, # Optional. <Description>The description of the category header.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       parentCategoryGuid: string, # Optional. <Description>The GUID of the parent category.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of categories.</Description>
        ///   language: string, # Optional. <Description>The language of the glossary.</Description>
        ///   terms: [
        ///     {
        ///       description: string, # Optional. <Description>The description of the related term.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       expression: string, # Optional. <Description>The expression of the term.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       source: string, # Optional. <Description>The source of the term.</Description>
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///       steward: string, # Optional. <Description>The steward of the term.</Description>
        ///       termGuid: string, # Optional. <Description>The GUID of the term.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of related term headers.</Description>
        ///   usage: string, # Optional. <Description>The usage of the glossary.</Description>
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///       typeName: string, # Optional. <Description>The name of the type.</Description>
        ///       lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///       entityGuid: string, # Optional. <Description>The GUID of the entity.</Description>
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///       removePropagationsOnEntityDelete: boolean, # Optional. <Description>Determines if propagations will be removed on entity deletion.</Description>
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. <Description>The end of the time boundary.</Description>
        ///           startTime: string, # Optional. <Description>The start of the time boundary.</Description>
        ///           timeZone: string, # Optional. <Description>The timezone of the time boundary.</Description>
        ///         }
        ///       ], # Optional. <Description>An array of time boundaries indicating validity periods.</Description>
        ///       source: string, # Optional. <Description>indicate the source who create the classification detail</Description>
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>more detail on source information</Description>
        ///     }
        ///   ], # Optional. <Description>An array of classifications.</Description>
        ///   longDescription: string, # Optional. <Description>The long version description.</Description>
        ///   name: string, # Optional. <Description>The name of the glossary object.</Description>
        ///   qualifiedName: string, # Optional. <Description>The qualified name of the glossary object.</Description>
        ///   shortDescription: string, # Optional. <Description>The short version of description.</Description>
        ///   lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///   guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///   categoryInfo: Dictionary&lt;string, AtlasGlossaryCategory&gt;, # Optional. <Description>The glossary category information.</Description>
        ///   termInfo: Dictionary&lt;string, AtlasGlossaryTerm&gt;, # Optional. <Description>The glossary term information.</Description>
        /// }
        /// </code>
        /// Schema for <c>AtlasGlossaryExtInfo Response Body</c>:
        /// <code>{
        ///   categories: [
        ///     {
        ///       categoryGuid: string, # Optional. <Description>The GUID of the category.</Description>
        ///       description: string, # Optional. <Description>The description of the category header.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       parentCategoryGuid: string, # Optional. <Description>The GUID of the parent category.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of categories.</Description>
        ///   language: string, # Optional. <Description>The language of the glossary.</Description>
        ///   terms: [
        ///     {
        ///       description: string, # Optional. <Description>The description of the related term.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       expression: string, # Optional. <Description>The expression of the term.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       source: string, # Optional. <Description>The source of the term.</Description>
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///       steward: string, # Optional. <Description>The steward of the term.</Description>
        ///       termGuid: string, # Optional. <Description>The GUID of the term.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of related term headers.</Description>
        ///   usage: string, # Optional. <Description>The usage of the glossary.</Description>
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///       typeName: string, # Optional. <Description>The name of the type.</Description>
        ///       lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///       entityGuid: string, # Optional. <Description>The GUID of the entity.</Description>
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///       removePropagationsOnEntityDelete: boolean, # Optional. <Description>Determines if propagations will be removed on entity deletion.</Description>
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. <Description>The end of the time boundary.</Description>
        ///           startTime: string, # Optional. <Description>The start of the time boundary.</Description>
        ///           timeZone: string, # Optional. <Description>The timezone of the time boundary.</Description>
        ///         }
        ///       ], # Optional. <Description>An array of time boundaries indicating validity periods.</Description>
        ///       source: string, # Optional. <Description>indicate the source who create the classification detail</Description>
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>more detail on source information</Description>
        ///     }
        ///   ], # Optional. <Description>An array of classifications.</Description>
        ///   longDescription: string, # Optional. <Description>The long version description.</Description>
        ///   name: string, # Optional. <Description>The name of the glossary object.</Description>
        ///   qualifiedName: string, # Optional. <Description>The qualified name of the glossary object.</Description>
        ///   shortDescription: string, # Optional. <Description>The short version of description.</Description>
        ///   lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///   guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///   categoryInfo: Dictionary&lt;string, AtlasGlossaryCategory&gt;, # Optional. <Description>The glossary category information.</Description>
        ///   termInfo: Dictionary&lt;string, AtlasGlossaryTerm&gt;, # Optional. <Description>The glossary term information.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> UpdateGlossaryAsync(string glossaryGuid, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(glossaryGuid, nameof(glossaryGuid));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.UpdateGlossary");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateGlossaryRequest(glossaryGuid, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update the given glossary. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryGuid"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="glossaryGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/PurviewCatalog/PurviewGlossary/UpdateGlossary
        /// Schema for <c>AtlasGlossaryExtInfo Request Body</c>:
        /// <code>{
        ///   categories: [
        ///     {
        ///       categoryGuid: string, # Optional. <Description>The GUID of the category.</Description>
        ///       description: string, # Optional. <Description>The description of the category header.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       parentCategoryGuid: string, # Optional. <Description>The GUID of the parent category.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of categories.</Description>
        ///   language: string, # Optional. <Description>The language of the glossary.</Description>
        ///   terms: [
        ///     {
        ///       description: string, # Optional. <Description>The description of the related term.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       expression: string, # Optional. <Description>The expression of the term.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       source: string, # Optional. <Description>The source of the term.</Description>
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///       steward: string, # Optional. <Description>The steward of the term.</Description>
        ///       termGuid: string, # Optional. <Description>The GUID of the term.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of related term headers.</Description>
        ///   usage: string, # Optional. <Description>The usage of the glossary.</Description>
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///       typeName: string, # Optional. <Description>The name of the type.</Description>
        ///       lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///       entityGuid: string, # Optional. <Description>The GUID of the entity.</Description>
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///       removePropagationsOnEntityDelete: boolean, # Optional. <Description>Determines if propagations will be removed on entity deletion.</Description>
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. <Description>The end of the time boundary.</Description>
        ///           startTime: string, # Optional. <Description>The start of the time boundary.</Description>
        ///           timeZone: string, # Optional. <Description>The timezone of the time boundary.</Description>
        ///         }
        ///       ], # Optional. <Description>An array of time boundaries indicating validity periods.</Description>
        ///       source: string, # Optional. <Description>indicate the source who create the classification detail</Description>
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>more detail on source information</Description>
        ///     }
        ///   ], # Optional. <Description>An array of classifications.</Description>
        ///   longDescription: string, # Optional. <Description>The long version description.</Description>
        ///   name: string, # Optional. <Description>The name of the glossary object.</Description>
        ///   qualifiedName: string, # Optional. <Description>The qualified name of the glossary object.</Description>
        ///   shortDescription: string, # Optional. <Description>The short version of description.</Description>
        ///   lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///   guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///   categoryInfo: Dictionary&lt;string, AtlasGlossaryCategory&gt;, # Optional. <Description>The glossary category information.</Description>
        ///   termInfo: Dictionary&lt;string, AtlasGlossaryTerm&gt;, # Optional. <Description>The glossary term information.</Description>
        /// }
        /// </code>
        /// Schema for <c>AtlasGlossaryExtInfo Response Body</c>:
        /// <code>{
        ///   categories: [
        ///     {
        ///       categoryGuid: string, # Optional. <Description>The GUID of the category.</Description>
        ///       description: string, # Optional. <Description>The description of the category header.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       parentCategoryGuid: string, # Optional. <Description>The GUID of the parent category.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of categories.</Description>
        ///   language: string, # Optional. <Description>The language of the glossary.</Description>
        ///   terms: [
        ///     {
        ///       description: string, # Optional. <Description>The description of the related term.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       expression: string, # Optional. <Description>The expression of the term.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       source: string, # Optional. <Description>The source of the term.</Description>
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///       steward: string, # Optional. <Description>The steward of the term.</Description>
        ///       termGuid: string, # Optional. <Description>The GUID of the term.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of related term headers.</Description>
        ///   usage: string, # Optional. <Description>The usage of the glossary.</Description>
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///       typeName: string, # Optional. <Description>The name of the type.</Description>
        ///       lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///       entityGuid: string, # Optional. <Description>The GUID of the entity.</Description>
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///       removePropagationsOnEntityDelete: boolean, # Optional. <Description>Determines if propagations will be removed on entity deletion.</Description>
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. <Description>The end of the time boundary.</Description>
        ///           startTime: string, # Optional. <Description>The start of the time boundary.</Description>
        ///           timeZone: string, # Optional. <Description>The timezone of the time boundary.</Description>
        ///         }
        ///       ], # Optional. <Description>An array of time boundaries indicating validity periods.</Description>
        ///       source: string, # Optional. <Description>indicate the source who create the classification detail</Description>
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>more detail on source information</Description>
        ///     }
        ///   ], # Optional. <Description>An array of classifications.</Description>
        ///   longDescription: string, # Optional. <Description>The long version description.</Description>
        ///   name: string, # Optional. <Description>The name of the glossary object.</Description>
        ///   qualifiedName: string, # Optional. <Description>The qualified name of the glossary object.</Description>
        ///   shortDescription: string, # Optional. <Description>The short version of description.</Description>
        ///   lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///   guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///   categoryInfo: Dictionary&lt;string, AtlasGlossaryCategory&gt;, # Optional. <Description>The glossary category information.</Description>
        ///   termInfo: Dictionary&lt;string, AtlasGlossaryTerm&gt;, # Optional. <Description>The glossary term information.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response UpdateGlossary(string glossaryGuid, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(glossaryGuid, nameof(glossaryGuid));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.UpdateGlossary");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateGlossaryRequest(glossaryGuid, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a glossary. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryGuid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="glossaryGuid"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<Response> DeleteGlossaryAsync(string glossaryGuid, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(glossaryGuid, nameof(glossaryGuid));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.DeleteGlossary");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteGlossaryRequest(glossaryGuid, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a glossary. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryGuid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="glossaryGuid"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Response DeleteGlossary(string glossaryGuid, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(glossaryGuid, nameof(glossaryGuid));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.DeleteGlossary");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteGlossaryRequest(glossaryGuid, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the categories belonging to a specific glossary. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryGuid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="glossaryGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/PurviewCatalog/PurviewGlossary/GetGlossaryCategories
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///       typeName: string, # Optional. <Description>The name of the type.</Description>
        ///       lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///       entityGuid: string, # Optional. <Description>The GUID of the entity.</Description>
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///       removePropagationsOnEntityDelete: boolean, # Optional. <Description>Determines if propagations will be removed on entity deletion.</Description>
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. <Description>The end of the time boundary.</Description>
        ///           startTime: string, # Optional. <Description>The start of the time boundary.</Description>
        ///           timeZone: string, # Optional. <Description>The timezone of the time boundary.</Description>
        ///         }
        ///       ], # Optional. <Description>An array of time boundaries indicating validity periods.</Description>
        ///       source: string, # Optional. <Description>indicate the source who create the classification detail</Description>
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>more detail on source information</Description>
        ///     }
        ///   ], # Optional. <Description>An array of classifications.</Description>
        ///   longDescription: string, # Optional. <Description>The long version description.</Description>
        ///   name: string, # Optional. <Description>The name of the glossary object.</Description>
        ///   qualifiedName: string, # Optional. <Description>The qualified name of the glossary object.</Description>
        ///   shortDescription: string, # Optional. <Description>The short version of description.</Description>
        ///   lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///   guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///   anchor: {
        ///     displayText: string, # Optional. <Description>The display text.</Description>
        ///     glossaryGuid: string, # Optional. <Description>The GUID of the glossary.</Description>
        ///     relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///   }, # Optional. <Description>The glossary header with basic information.</Description>
        ///   childrenCategories: [
        ///     {
        ///       categoryGuid: string, # Optional. <Description>The GUID of the category.</Description>
        ///       description: string, # Optional. <Description>The description of the category header.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       parentCategoryGuid: string, # Optional. <Description>The GUID of the parent category.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of children categories.</Description>
        ///   parentCategory: AtlasRelatedCategoryHeader, # Optional. <Description>The header of the related category.</Description>
        ///   terms: [
        ///     {
        ///       description: string, # Optional. <Description>The description of the related term.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       expression: string, # Optional. <Description>The expression of the term.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       source: string, # Optional. <Description>The source of the term.</Description>
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///       steward: string, # Optional. <Description>The steward of the term.</Description>
        ///       termGuid: string, # Optional. <Description>The GUID of the term.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of related term headers.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetGlossaryCategoriesAsync(string glossaryGuid, int? limit = null, int? offset = null, string sort = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(glossaryGuid, nameof(glossaryGuid));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.GetGlossaryCategories");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetGlossaryCategoriesRequest(glossaryGuid, limit, offset, sort, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the categories belonging to a specific glossary. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryGuid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="glossaryGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/PurviewCatalog/PurviewGlossary/GetGlossaryCategories
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///       typeName: string, # Optional. <Description>The name of the type.</Description>
        ///       lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///       entityGuid: string, # Optional. <Description>The GUID of the entity.</Description>
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///       removePropagationsOnEntityDelete: boolean, # Optional. <Description>Determines if propagations will be removed on entity deletion.</Description>
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. <Description>The end of the time boundary.</Description>
        ///           startTime: string, # Optional. <Description>The start of the time boundary.</Description>
        ///           timeZone: string, # Optional. <Description>The timezone of the time boundary.</Description>
        ///         }
        ///       ], # Optional. <Description>An array of time boundaries indicating validity periods.</Description>
        ///       source: string, # Optional. <Description>indicate the source who create the classification detail</Description>
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>more detail on source information</Description>
        ///     }
        ///   ], # Optional. <Description>An array of classifications.</Description>
        ///   longDescription: string, # Optional. <Description>The long version description.</Description>
        ///   name: string, # Optional. <Description>The name of the glossary object.</Description>
        ///   qualifiedName: string, # Optional. <Description>The qualified name of the glossary object.</Description>
        ///   shortDescription: string, # Optional. <Description>The short version of description.</Description>
        ///   lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///   guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///   anchor: {
        ///     displayText: string, # Optional. <Description>The display text.</Description>
        ///     glossaryGuid: string, # Optional. <Description>The GUID of the glossary.</Description>
        ///     relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///   }, # Optional. <Description>The glossary header with basic information.</Description>
        ///   childrenCategories: [
        ///     {
        ///       categoryGuid: string, # Optional. <Description>The GUID of the category.</Description>
        ///       description: string, # Optional. <Description>The description of the category header.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       parentCategoryGuid: string, # Optional. <Description>The GUID of the parent category.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of children categories.</Description>
        ///   parentCategory: AtlasRelatedCategoryHeader, # Optional. <Description>The header of the related category.</Description>
        ///   terms: [
        ///     {
        ///       description: string, # Optional. <Description>The description of the related term.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       expression: string, # Optional. <Description>The expression of the term.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       source: string, # Optional. <Description>The source of the term.</Description>
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///       steward: string, # Optional. <Description>The steward of the term.</Description>
        ///       termGuid: string, # Optional. <Description>The GUID of the term.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of related term headers.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetGlossaryCategories(string glossaryGuid, int? limit = null, int? offset = null, string sort = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(glossaryGuid, nameof(glossaryGuid));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.GetGlossaryCategories");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetGlossaryCategoriesRequest(glossaryGuid, limit, offset, sort, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the category headers belonging to a specific glossary. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryGuid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="glossaryGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/PurviewCatalog/PurviewGlossary/GetGlossaryCategoriesHeaders
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   categoryGuid: string, # Optional. <Description>The GUID of the category.</Description>
        ///   description: string, # Optional. <Description>The description of the category header.</Description>
        ///   displayText: string, # Optional. <Description>The display text.</Description>
        ///   parentCategoryGuid: string, # Optional. <Description>The GUID of the parent category.</Description>
        ///   relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetGlossaryCategoriesHeadersAsync(string glossaryGuid, int? limit = null, int? offset = null, string sort = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(glossaryGuid, nameof(glossaryGuid));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.GetGlossaryCategoriesHeaders");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetGlossaryCategoriesHeadersRequest(glossaryGuid, limit, offset, sort, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the category headers belonging to a specific glossary. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryGuid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="glossaryGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/PurviewCatalog/PurviewGlossary/GetGlossaryCategoriesHeaders
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   categoryGuid: string, # Optional. <Description>The GUID of the category.</Description>
        ///   description: string, # Optional. <Description>The description of the category header.</Description>
        ///   displayText: string, # Optional. <Description>The display text.</Description>
        ///   parentCategoryGuid: string, # Optional. <Description>The GUID of the parent category.</Description>
        ///   relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetGlossaryCategoriesHeaders(string glossaryGuid, int? limit = null, int? offset = null, string sort = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(glossaryGuid, nameof(glossaryGuid));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.GetGlossaryCategoriesHeaders");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetGlossaryCategoriesHeadersRequest(glossaryGuid, limit, offset, sort, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a specific glossary with detailed information. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryGuid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="glossaryGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/PurviewCatalog/PurviewGlossary/GetDetailedGlossary
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   categories: [
        ///     {
        ///       categoryGuid: string, # Optional. <Description>The GUID of the category.</Description>
        ///       description: string, # Optional. <Description>The description of the category header.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       parentCategoryGuid: string, # Optional. <Description>The GUID of the parent category.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of categories.</Description>
        ///   language: string, # Optional. <Description>The language of the glossary.</Description>
        ///   terms: [
        ///     {
        ///       description: string, # Optional. <Description>The description of the related term.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       expression: string, # Optional. <Description>The expression of the term.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       source: string, # Optional. <Description>The source of the term.</Description>
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///       steward: string, # Optional. <Description>The steward of the term.</Description>
        ///       termGuid: string, # Optional. <Description>The GUID of the term.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of related term headers.</Description>
        ///   usage: string, # Optional. <Description>The usage of the glossary.</Description>
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///       typeName: string, # Optional. <Description>The name of the type.</Description>
        ///       lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///       entityGuid: string, # Optional. <Description>The GUID of the entity.</Description>
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///       removePropagationsOnEntityDelete: boolean, # Optional. <Description>Determines if propagations will be removed on entity deletion.</Description>
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. <Description>The end of the time boundary.</Description>
        ///           startTime: string, # Optional. <Description>The start of the time boundary.</Description>
        ///           timeZone: string, # Optional. <Description>The timezone of the time boundary.</Description>
        ///         }
        ///       ], # Optional. <Description>An array of time boundaries indicating validity periods.</Description>
        ///       source: string, # Optional. <Description>indicate the source who create the classification detail</Description>
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>more detail on source information</Description>
        ///     }
        ///   ], # Optional. <Description>An array of classifications.</Description>
        ///   longDescription: string, # Optional. <Description>The long version description.</Description>
        ///   name: string, # Optional. <Description>The name of the glossary object.</Description>
        ///   qualifiedName: string, # Optional. <Description>The qualified name of the glossary object.</Description>
        ///   shortDescription: string, # Optional. <Description>The short version of description.</Description>
        ///   lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///   guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///   categoryInfo: Dictionary&lt;string, AtlasGlossaryCategory&gt;, # Optional. <Description>The glossary category information.</Description>
        ///   termInfo: Dictionary&lt;string, AtlasGlossaryTerm&gt;, # Optional. <Description>The glossary term information.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetDetailedGlossaryAsync(string glossaryGuid, bool? includeTermHierarchy = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(glossaryGuid, nameof(glossaryGuid));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.GetDetailedGlossary");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetDetailedGlossaryRequest(glossaryGuid, includeTermHierarchy, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a specific glossary with detailed information. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryGuid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="glossaryGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/PurviewCatalog/PurviewGlossary/GetDetailedGlossary
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   categories: [
        ///     {
        ///       categoryGuid: string, # Optional. <Description>The GUID of the category.</Description>
        ///       description: string, # Optional. <Description>The description of the category header.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       parentCategoryGuid: string, # Optional. <Description>The GUID of the parent category.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of categories.</Description>
        ///   language: string, # Optional. <Description>The language of the glossary.</Description>
        ///   terms: [
        ///     {
        ///       description: string, # Optional. <Description>The description of the related term.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       expression: string, # Optional. <Description>The expression of the term.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       source: string, # Optional. <Description>The source of the term.</Description>
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///       steward: string, # Optional. <Description>The steward of the term.</Description>
        ///       termGuid: string, # Optional. <Description>The GUID of the term.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of related term headers.</Description>
        ///   usage: string, # Optional. <Description>The usage of the glossary.</Description>
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///       typeName: string, # Optional. <Description>The name of the type.</Description>
        ///       lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///       entityGuid: string, # Optional. <Description>The GUID of the entity.</Description>
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///       removePropagationsOnEntityDelete: boolean, # Optional. <Description>Determines if propagations will be removed on entity deletion.</Description>
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. <Description>The end of the time boundary.</Description>
        ///           startTime: string, # Optional. <Description>The start of the time boundary.</Description>
        ///           timeZone: string, # Optional. <Description>The timezone of the time boundary.</Description>
        ///         }
        ///       ], # Optional. <Description>An array of time boundaries indicating validity periods.</Description>
        ///       source: string, # Optional. <Description>indicate the source who create the classification detail</Description>
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>more detail on source information</Description>
        ///     }
        ///   ], # Optional. <Description>An array of classifications.</Description>
        ///   longDescription: string, # Optional. <Description>The long version description.</Description>
        ///   name: string, # Optional. <Description>The name of the glossary object.</Description>
        ///   qualifiedName: string, # Optional. <Description>The qualified name of the glossary object.</Description>
        ///   shortDescription: string, # Optional. <Description>The short version of description.</Description>
        ///   lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///   guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///   categoryInfo: Dictionary&lt;string, AtlasGlossaryCategory&gt;, # Optional. <Description>The glossary category information.</Description>
        ///   termInfo: Dictionary&lt;string, AtlasGlossaryTerm&gt;, # Optional. <Description>The glossary term information.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetDetailedGlossary(string glossaryGuid, bool? includeTermHierarchy = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(glossaryGuid, nameof(glossaryGuid));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.GetDetailedGlossary");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetDetailedGlossaryRequest(glossaryGuid, includeTermHierarchy, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update the glossary partially. Some properties such as qualifiedName are not allowed to be updated. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryGuid"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="glossaryGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/PurviewCatalog/PurviewGlossary/PartialUpdateGlossary
        /// Schema for <c>AtlasGlossaryExtInfo Response Body</c>:
        /// <code>{
        ///   categories: [
        ///     {
        ///       categoryGuid: string, # Optional. <Description>The GUID of the category.</Description>
        ///       description: string, # Optional. <Description>The description of the category header.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       parentCategoryGuid: string, # Optional. <Description>The GUID of the parent category.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of categories.</Description>
        ///   language: string, # Optional. <Description>The language of the glossary.</Description>
        ///   terms: [
        ///     {
        ///       description: string, # Optional. <Description>The description of the related term.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       expression: string, # Optional. <Description>The expression of the term.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       source: string, # Optional. <Description>The source of the term.</Description>
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///       steward: string, # Optional. <Description>The steward of the term.</Description>
        ///       termGuid: string, # Optional. <Description>The GUID of the term.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of related term headers.</Description>
        ///   usage: string, # Optional. <Description>The usage of the glossary.</Description>
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///       typeName: string, # Optional. <Description>The name of the type.</Description>
        ///       lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///       entityGuid: string, # Optional. <Description>The GUID of the entity.</Description>
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///       removePropagationsOnEntityDelete: boolean, # Optional. <Description>Determines if propagations will be removed on entity deletion.</Description>
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. <Description>The end of the time boundary.</Description>
        ///           startTime: string, # Optional. <Description>The start of the time boundary.</Description>
        ///           timeZone: string, # Optional. <Description>The timezone of the time boundary.</Description>
        ///         }
        ///       ], # Optional. <Description>An array of time boundaries indicating validity periods.</Description>
        ///       source: string, # Optional. <Description>indicate the source who create the classification detail</Description>
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>more detail on source information</Description>
        ///     }
        ///   ], # Optional. <Description>An array of classifications.</Description>
        ///   longDescription: string, # Optional. <Description>The long version description.</Description>
        ///   name: string, # Optional. <Description>The name of the glossary object.</Description>
        ///   qualifiedName: string, # Optional. <Description>The qualified name of the glossary object.</Description>
        ///   shortDescription: string, # Optional. <Description>The short version of description.</Description>
        ///   lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///   guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///   categoryInfo: Dictionary&lt;string, AtlasGlossaryCategory&gt;, # Optional. <Description>The glossary category information.</Description>
        ///   termInfo: Dictionary&lt;string, AtlasGlossaryTerm&gt;, # Optional. <Description>The glossary term information.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> PartialUpdateGlossaryAsync(string glossaryGuid, RequestContent content, bool? includeTermHierarchy = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(glossaryGuid, nameof(glossaryGuid));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.PartialUpdateGlossary");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePartialUpdateGlossaryRequest(glossaryGuid, content, includeTermHierarchy, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update the glossary partially. Some properties such as qualifiedName are not allowed to be updated. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryGuid"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="glossaryGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/PurviewCatalog/PurviewGlossary/PartialUpdateGlossary
        /// Schema for <c>AtlasGlossaryExtInfo Response Body</c>:
        /// <code>{
        ///   categories: [
        ///     {
        ///       categoryGuid: string, # Optional. <Description>The GUID of the category.</Description>
        ///       description: string, # Optional. <Description>The description of the category header.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       parentCategoryGuid: string, # Optional. <Description>The GUID of the parent category.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of categories.</Description>
        ///   language: string, # Optional. <Description>The language of the glossary.</Description>
        ///   terms: [
        ///     {
        ///       description: string, # Optional. <Description>The description of the related term.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       expression: string, # Optional. <Description>The expression of the term.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       source: string, # Optional. <Description>The source of the term.</Description>
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///       steward: string, # Optional. <Description>The steward of the term.</Description>
        ///       termGuid: string, # Optional. <Description>The GUID of the term.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of related term headers.</Description>
        ///   usage: string, # Optional. <Description>The usage of the glossary.</Description>
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///       typeName: string, # Optional. <Description>The name of the type.</Description>
        ///       lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///       entityGuid: string, # Optional. <Description>The GUID of the entity.</Description>
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///       removePropagationsOnEntityDelete: boolean, # Optional. <Description>Determines if propagations will be removed on entity deletion.</Description>
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. <Description>The end of the time boundary.</Description>
        ///           startTime: string, # Optional. <Description>The start of the time boundary.</Description>
        ///           timeZone: string, # Optional. <Description>The timezone of the time boundary.</Description>
        ///         }
        ///       ], # Optional. <Description>An array of time boundaries indicating validity periods.</Description>
        ///       source: string, # Optional. <Description>indicate the source who create the classification detail</Description>
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>more detail on source information</Description>
        ///     }
        ///   ], # Optional. <Description>An array of classifications.</Description>
        ///   longDescription: string, # Optional. <Description>The long version description.</Description>
        ///   name: string, # Optional. <Description>The name of the glossary object.</Description>
        ///   qualifiedName: string, # Optional. <Description>The qualified name of the glossary object.</Description>
        ///   shortDescription: string, # Optional. <Description>The short version of description.</Description>
        ///   lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///   guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///   categoryInfo: Dictionary&lt;string, AtlasGlossaryCategory&gt;, # Optional. <Description>The glossary category information.</Description>
        ///   termInfo: Dictionary&lt;string, AtlasGlossaryTerm&gt;, # Optional. <Description>The glossary term information.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response PartialUpdateGlossary(string glossaryGuid, RequestContent content, bool? includeTermHierarchy = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(glossaryGuid, nameof(glossaryGuid));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.PartialUpdateGlossary");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePartialUpdateGlossaryRequest(glossaryGuid, content, includeTermHierarchy, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get terms belonging to a specific glossary. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryGuid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="glossaryGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/PurviewCatalog/PurviewGlossary/GetGlossaryTerms
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///       typeName: string, # Optional. <Description>The name of the type.</Description>
        ///       lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///       entityGuid: string, # Optional. <Description>The GUID of the entity.</Description>
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///       removePropagationsOnEntityDelete: boolean, # Optional. <Description>Determines if propagations will be removed on entity deletion.</Description>
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. <Description>The end of the time boundary.</Description>
        ///           startTime: string, # Optional. <Description>The start of the time boundary.</Description>
        ///           timeZone: string, # Optional. <Description>The timezone of the time boundary.</Description>
        ///         }
        ///       ], # Optional. <Description>An array of time boundaries indicating validity periods.</Description>
        ///       source: string, # Optional. <Description>indicate the source who create the classification detail</Description>
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>more detail on source information</Description>
        ///     }
        ///   ], # Optional. <Description>An array of classifications.</Description>
        ///   longDescription: string, # Optional. <Description>The long version description.</Description>
        ///   name: string, # Optional. <Description>The name of the glossary object.</Description>
        ///   qualifiedName: string, # Optional. <Description>The qualified name of the glossary object.</Description>
        ///   shortDescription: string, # Optional. <Description>The short version of description.</Description>
        ///   lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///   guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///   abbreviation: string, # Optional. <Description>The abbreviation of the term.</Description>
        ///   templateName: [AnyObject], # Optional.
        ///   anchor: {
        ///     displayText: string, # Optional. <Description>The display text.</Description>
        ///     glossaryGuid: string, # Optional. <Description>The GUID of the glossary.</Description>
        ///     relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///   }, # Optional. <Description>The glossary header with basic information.</Description>
        ///   antonyms: [
        ///     {
        ///       description: string, # Optional. <Description>The description of the related term.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       expression: string, # Optional. <Description>The expression of the term.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       source: string, # Optional. <Description>The source of the term.</Description>
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///       steward: string, # Optional. <Description>The steward of the term.</Description>
        ///       termGuid: string, # Optional. <Description>The GUID of the term.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of related term headers as antonyms.</Description>
        ///   createTime: number, # Optional. <Description>The created time of the record.</Description>
        ///   createdBy: string, # Optional. <Description>The user who created the record.</Description>
        ///   updateTime: number, # Optional. <Description>The update time of the record.</Description>
        ///   updatedBy: string, # Optional. <Description>The user who updated the record.</Description>
        ///   status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;, # Optional. <Description>Status of the AtlasGlossaryTerm</Description>
        ///   resources: [
        ///     {
        ///       displayName: string, # Optional. <Description>Display name for url.</Description>
        ///       url: string, # Optional. <Description>web url. http or https</Description>
        ///     }
        ///   ], # Optional. <Description>An array of resource link for term</Description>
        ///   contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. <Description>The dictionary of contacts for terms. Key could be Expert or Steward.</Description>
        ///   attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;, # Optional. <Description>The custom attributes of the term, which is map&lt;string,map&lt;string,object&gt;&gt;.
        /// The key of the first layer map is term template name.</Description>
        ///   assignedEntities: [
        ///     {
        ///       guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///       typeName: string, # Optional. <Description>The name of the type.</Description>
        ///       uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The unique attributes of the object.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///       relationshipType: string, # Optional.
        ///       relationshipAttributes: {
        ///         attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///         typeName: string, # Optional. <Description>The name of the type.</Description>
        ///         lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///       }, # Optional. <Description>Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.</Description>
        ///       relationshipGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>The enum of relationship status.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of related object IDs.</Description>
        ///   categories: [
        ///     {
        ///       categoryGuid: string, # Optional. <Description>The GUID of the category.</Description>
        ///       description: string, # Optional. <Description>The description of the record.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of term categorization headers.</Description>
        ///   classifies: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers.</Description>
        ///   examples: [string], # Optional. <Description>An array of examples.</Description>
        ///   isA: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers indicating the is-a relationship.</Description>
        ///   preferredTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of preferred related term headers.</Description>
        ///   preferredToTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers that are preferred to.</Description>
        ///   replacedBy: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers that are replaced by.</Description>
        ///   replacementTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers for replacement.</Description>
        ///   seeAlso: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers for see also.</Description>
        ///   synonyms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers as synonyms.</Description>
        ///   translatedTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of translated related term headers.</Description>
        ///   translationTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers for translation.</Description>
        ///   usage: string, # Optional. <Description>The usage of the term.</Description>
        ///   validValues: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers as valid values.</Description>
        ///   validValuesFor: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers as valid values for other records.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetGlossaryTermsAsync(string glossaryGuid, bool? includeTermHierarchy = null, int? limit = null, int? offset = null, string sort = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(glossaryGuid, nameof(glossaryGuid));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.GetGlossaryTerms");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetGlossaryTermsRequest(glossaryGuid, includeTermHierarchy, limit, offset, sort, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get terms belonging to a specific glossary. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryGuid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="glossaryGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/PurviewCatalog/PurviewGlossary/GetGlossaryTerms
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///       typeName: string, # Optional. <Description>The name of the type.</Description>
        ///       lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///       entityGuid: string, # Optional. <Description>The GUID of the entity.</Description>
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///       removePropagationsOnEntityDelete: boolean, # Optional. <Description>Determines if propagations will be removed on entity deletion.</Description>
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. <Description>The end of the time boundary.</Description>
        ///           startTime: string, # Optional. <Description>The start of the time boundary.</Description>
        ///           timeZone: string, # Optional. <Description>The timezone of the time boundary.</Description>
        ///         }
        ///       ], # Optional. <Description>An array of time boundaries indicating validity periods.</Description>
        ///       source: string, # Optional. <Description>indicate the source who create the classification detail</Description>
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>more detail on source information</Description>
        ///     }
        ///   ], # Optional. <Description>An array of classifications.</Description>
        ///   longDescription: string, # Optional. <Description>The long version description.</Description>
        ///   name: string, # Optional. <Description>The name of the glossary object.</Description>
        ///   qualifiedName: string, # Optional. <Description>The qualified name of the glossary object.</Description>
        ///   shortDescription: string, # Optional. <Description>The short version of description.</Description>
        ///   lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///   guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///   abbreviation: string, # Optional. <Description>The abbreviation of the term.</Description>
        ///   templateName: [AnyObject], # Optional.
        ///   anchor: {
        ///     displayText: string, # Optional. <Description>The display text.</Description>
        ///     glossaryGuid: string, # Optional. <Description>The GUID of the glossary.</Description>
        ///     relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///   }, # Optional. <Description>The glossary header with basic information.</Description>
        ///   antonyms: [
        ///     {
        ///       description: string, # Optional. <Description>The description of the related term.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       expression: string, # Optional. <Description>The expression of the term.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       source: string, # Optional. <Description>The source of the term.</Description>
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///       steward: string, # Optional. <Description>The steward of the term.</Description>
        ///       termGuid: string, # Optional. <Description>The GUID of the term.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of related term headers as antonyms.</Description>
        ///   createTime: number, # Optional. <Description>The created time of the record.</Description>
        ///   createdBy: string, # Optional. <Description>The user who created the record.</Description>
        ///   updateTime: number, # Optional. <Description>The update time of the record.</Description>
        ///   updatedBy: string, # Optional. <Description>The user who updated the record.</Description>
        ///   status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;, # Optional. <Description>Status of the AtlasGlossaryTerm</Description>
        ///   resources: [
        ///     {
        ///       displayName: string, # Optional. <Description>Display name for url.</Description>
        ///       url: string, # Optional. <Description>web url. http or https</Description>
        ///     }
        ///   ], # Optional. <Description>An array of resource link for term</Description>
        ///   contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. <Description>The dictionary of contacts for terms. Key could be Expert or Steward.</Description>
        ///   attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;, # Optional. <Description>The custom attributes of the term, which is map&lt;string,map&lt;string,object&gt;&gt;.
        /// The key of the first layer map is term template name.</Description>
        ///   assignedEntities: [
        ///     {
        ///       guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///       typeName: string, # Optional. <Description>The name of the type.</Description>
        ///       uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The unique attributes of the object.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///       relationshipType: string, # Optional.
        ///       relationshipAttributes: {
        ///         attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///         typeName: string, # Optional. <Description>The name of the type.</Description>
        ///         lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///       }, # Optional. <Description>Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.</Description>
        ///       relationshipGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>The enum of relationship status.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of related object IDs.</Description>
        ///   categories: [
        ///     {
        ///       categoryGuid: string, # Optional. <Description>The GUID of the category.</Description>
        ///       description: string, # Optional. <Description>The description of the record.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of term categorization headers.</Description>
        ///   classifies: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers.</Description>
        ///   examples: [string], # Optional. <Description>An array of examples.</Description>
        ///   isA: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers indicating the is-a relationship.</Description>
        ///   preferredTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of preferred related term headers.</Description>
        ///   preferredToTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers that are preferred to.</Description>
        ///   replacedBy: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers that are replaced by.</Description>
        ///   replacementTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers for replacement.</Description>
        ///   seeAlso: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers for see also.</Description>
        ///   synonyms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers as synonyms.</Description>
        ///   translatedTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of translated related term headers.</Description>
        ///   translationTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers for translation.</Description>
        ///   usage: string, # Optional. <Description>The usage of the term.</Description>
        ///   validValues: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers as valid values.</Description>
        ///   validValuesFor: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers as valid values for other records.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetGlossaryTerms(string glossaryGuid, bool? includeTermHierarchy = null, int? limit = null, int? offset = null, string sort = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(glossaryGuid, nameof(glossaryGuid));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.GetGlossaryTerms");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetGlossaryTermsRequest(glossaryGuid, includeTermHierarchy, limit, offset, sort, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get term headers belonging to a specific glossary. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryGuid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="glossaryGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/PurviewCatalog/PurviewGlossary/GetGlossaryTermHeaders
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   description: string, # Optional. <Description>The description of the related term.</Description>
        ///   displayText: string, # Optional. <Description>The display text.</Description>
        ///   expression: string, # Optional. <Description>The expression of the term.</Description>
        ///   relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///   source: string, # Optional. <Description>The source of the term.</Description>
        ///   status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///   steward: string, # Optional. <Description>The steward of the term.</Description>
        ///   termGuid: string, # Optional. <Description>The GUID of the term.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetGlossaryTermHeadersAsync(string glossaryGuid, int? limit = null, int? offset = null, string sort = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(glossaryGuid, nameof(glossaryGuid));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.GetGlossaryTermHeaders");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetGlossaryTermHeadersRequest(glossaryGuid, limit, offset, sort, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get term headers belonging to a specific glossary. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryGuid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="glossaryGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/PurviewCatalog/PurviewGlossary/GetGlossaryTermHeaders
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   description: string, # Optional. <Description>The description of the related term.</Description>
        ///   displayText: string, # Optional. <Description>The display text.</Description>
        ///   expression: string, # Optional. <Description>The expression of the term.</Description>
        ///   relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///   source: string, # Optional. <Description>The source of the term.</Description>
        ///   status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///   steward: string, # Optional. <Description>The steward of the term.</Description>
        ///   termGuid: string, # Optional. <Description>The GUID of the term.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetGlossaryTermHeaders(string glossaryGuid, int? limit = null, int? offset = null, string sort = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(glossaryGuid, nameof(glossaryGuid));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.GetGlossaryTermHeaders");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetGlossaryTermHeadersRequest(glossaryGuid, limit, offset, sort, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the status of import csv operation. </summary>
        /// <param name="operationGuid"> The globally unique identifier for async operation/job. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="operationGuid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="operationGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/PurviewCatalog/PurviewGlossary/GetImportCsvOperationStatus
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   id: string, # Optional. <Description>guid string</Description>
        ///   status: &quot;NotStarted&quot; | &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;Running&quot;, # Optional. <Description>Enum of the status of import csv operation.</Description>
        ///   createTime: string, # Optional. <Description>The created time of the record.</Description>
        ///   lastUpdateTime: string, # Optional. <Description>The last updated time of the record.</Description>
        ///   properties: {
        ///     importedTerms: string, # Optional. <Description>Term numbers that already imported successfully</Description>
        ///     totalTermsDetected: string, # Optional. <Description>Total term numbers that detected in csv</Description>
        ///   }, # Optional.
        ///   error: {
        ///     errorCode: number, # Optional. <Description>Error code from async import job if fail</Description>
        ///     errorMessage: string, # Optional. <Description>Error message from async import job if fail</Description>
        ///   }, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetImportCsvOperationStatusAsync(string operationGuid, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(operationGuid, nameof(operationGuid));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.GetImportCsvOperationStatus");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetImportCsvOperationStatusRequest(operationGuid, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the status of import csv operation. </summary>
        /// <param name="operationGuid"> The globally unique identifier for async operation/job. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="operationGuid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="operationGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/PurviewCatalog/PurviewGlossary/GetImportCsvOperationStatus
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   id: string, # Optional. <Description>guid string</Description>
        ///   status: &quot;NotStarted&quot; | &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;Running&quot;, # Optional. <Description>Enum of the status of import csv operation.</Description>
        ///   createTime: string, # Optional. <Description>The created time of the record.</Description>
        ///   lastUpdateTime: string, # Optional. <Description>The last updated time of the record.</Description>
        ///   properties: {
        ///     importedTerms: string, # Optional. <Description>Term numbers that already imported successfully</Description>
        ///     totalTermsDetected: string, # Optional. <Description>Total term numbers that detected in csv</Description>
        ///   }, # Optional.
        ///   error: {
        ///     errorCode: number, # Optional. <Description>Error code from async import job if fail</Description>
        ///     errorMessage: string, # Optional. <Description>Error message from async import job if fail</Description>
        ///   }, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetImportCsvOperationStatus(string operationGuid, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(operationGuid, nameof(operationGuid));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.GetImportCsvOperationStatus");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetImportCsvOperationStatusRequest(operationGuid, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Export Glossary Terms as csv file. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryGuid"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="glossaryGuid"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<Response> ExportGlossaryTermsAsCsvAsync(string glossaryGuid, RequestContent content, bool? includeTermHierarchy = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(glossaryGuid, nameof(glossaryGuid));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.ExportGlossaryTermsAsCsv");
            scope.Start();
            try
            {
                using HttpMessage message = CreateExportGlossaryTermsAsCsvRequest(glossaryGuid, content, includeTermHierarchy, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Export Glossary Terms as csv file. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryGuid"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="glossaryGuid"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Response ExportGlossaryTermsAsCsv(string glossaryGuid, RequestContent content, bool? includeTermHierarchy = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(glossaryGuid, nameof(glossaryGuid));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.ExportGlossaryTermsAsCsv");
            scope.Start();
            try
            {
                using HttpMessage message = CreateExportGlossaryTermsAsCsvRequest(glossaryGuid, content, includeTermHierarchy, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get terms by glossary name. </summary>
        /// <param name="glossaryName"> The name of the glossary. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="glossaryName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/PurviewCatalog/PurviewGlossary/GetTermsByGlossaryName
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///       typeName: string, # Optional. <Description>The name of the type.</Description>
        ///       lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///       entityGuid: string, # Optional. <Description>The GUID of the entity.</Description>
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///       removePropagationsOnEntityDelete: boolean, # Optional. <Description>Determines if propagations will be removed on entity deletion.</Description>
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. <Description>The end of the time boundary.</Description>
        ///           startTime: string, # Optional. <Description>The start of the time boundary.</Description>
        ///           timeZone: string, # Optional. <Description>The timezone of the time boundary.</Description>
        ///         }
        ///       ], # Optional. <Description>An array of time boundaries indicating validity periods.</Description>
        ///       source: string, # Optional. <Description>indicate the source who create the classification detail</Description>
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>more detail on source information</Description>
        ///     }
        ///   ], # Optional. <Description>An array of classifications.</Description>
        ///   longDescription: string, # Optional. <Description>The long version description.</Description>
        ///   name: string, # Optional. <Description>The name of the glossary object.</Description>
        ///   qualifiedName: string, # Optional. <Description>The qualified name of the glossary object.</Description>
        ///   shortDescription: string, # Optional. <Description>The short version of description.</Description>
        ///   lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///   guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///   abbreviation: string, # Optional. <Description>The abbreviation of the term.</Description>
        ///   templateName: [AnyObject], # Optional.
        ///   anchor: {
        ///     displayText: string, # Optional. <Description>The display text.</Description>
        ///     glossaryGuid: string, # Optional. <Description>The GUID of the glossary.</Description>
        ///     relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///   }, # Optional. <Description>The glossary header with basic information.</Description>
        ///   antonyms: [
        ///     {
        ///       description: string, # Optional. <Description>The description of the related term.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       expression: string, # Optional. <Description>The expression of the term.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       source: string, # Optional. <Description>The source of the term.</Description>
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///       steward: string, # Optional. <Description>The steward of the term.</Description>
        ///       termGuid: string, # Optional. <Description>The GUID of the term.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of related term headers as antonyms.</Description>
        ///   createTime: number, # Optional. <Description>The created time of the record.</Description>
        ///   createdBy: string, # Optional. <Description>The user who created the record.</Description>
        ///   updateTime: number, # Optional. <Description>The update time of the record.</Description>
        ///   updatedBy: string, # Optional. <Description>The user who updated the record.</Description>
        ///   status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;, # Optional. <Description>Status of the AtlasGlossaryTerm</Description>
        ///   resources: [
        ///     {
        ///       displayName: string, # Optional. <Description>Display name for url.</Description>
        ///       url: string, # Optional. <Description>web url. http or https</Description>
        ///     }
        ///   ], # Optional. <Description>An array of resource link for term</Description>
        ///   contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. <Description>The dictionary of contacts for terms. Key could be Expert or Steward.</Description>
        ///   attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;, # Optional. <Description>The custom attributes of the term, which is map&lt;string,map&lt;string,object&gt;&gt;.
        /// The key of the first layer map is term template name.</Description>
        ///   assignedEntities: [
        ///     {
        ///       guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///       typeName: string, # Optional. <Description>The name of the type.</Description>
        ///       uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The unique attributes of the object.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///       relationshipType: string, # Optional.
        ///       relationshipAttributes: {
        ///         attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///         typeName: string, # Optional. <Description>The name of the type.</Description>
        ///         lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///       }, # Optional. <Description>Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.</Description>
        ///       relationshipGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>The enum of relationship status.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of related object IDs.</Description>
        ///   categories: [
        ///     {
        ///       categoryGuid: string, # Optional. <Description>The GUID of the category.</Description>
        ///       description: string, # Optional. <Description>The description of the record.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of term categorization headers.</Description>
        ///   classifies: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers.</Description>
        ///   examples: [string], # Optional. <Description>An array of examples.</Description>
        ///   isA: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers indicating the is-a relationship.</Description>
        ///   preferredTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of preferred related term headers.</Description>
        ///   preferredToTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers that are preferred to.</Description>
        ///   replacedBy: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers that are replaced by.</Description>
        ///   replacementTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers for replacement.</Description>
        ///   seeAlso: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers for see also.</Description>
        ///   synonyms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers as synonyms.</Description>
        ///   translatedTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of translated related term headers.</Description>
        ///   translationTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers for translation.</Description>
        ///   usage: string, # Optional. <Description>The usage of the term.</Description>
        ///   validValues: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers as valid values.</Description>
        ///   validValuesFor: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers as valid values for other records.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetTermsByGlossaryNameAsync(string glossaryName, int? limit = null, int? offset = null, bool? includeTermHierarchy = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(glossaryName, nameof(glossaryName));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.GetTermsByGlossaryName");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetTermsByGlossaryNameRequest(glossaryName, limit, offset, includeTermHierarchy, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get terms by glossary name. </summary>
        /// <param name="glossaryName"> The name of the glossary. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="glossaryName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/PurviewCatalog/PurviewGlossary/GetTermsByGlossaryName
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///       typeName: string, # Optional. <Description>The name of the type.</Description>
        ///       lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///       entityGuid: string, # Optional. <Description>The GUID of the entity.</Description>
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///       removePropagationsOnEntityDelete: boolean, # Optional. <Description>Determines if propagations will be removed on entity deletion.</Description>
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. <Description>The end of the time boundary.</Description>
        ///           startTime: string, # Optional. <Description>The start of the time boundary.</Description>
        ///           timeZone: string, # Optional. <Description>The timezone of the time boundary.</Description>
        ///         }
        ///       ], # Optional. <Description>An array of time boundaries indicating validity periods.</Description>
        ///       source: string, # Optional. <Description>indicate the source who create the classification detail</Description>
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>more detail on source information</Description>
        ///     }
        ///   ], # Optional. <Description>An array of classifications.</Description>
        ///   longDescription: string, # Optional. <Description>The long version description.</Description>
        ///   name: string, # Optional. <Description>The name of the glossary object.</Description>
        ///   qualifiedName: string, # Optional. <Description>The qualified name of the glossary object.</Description>
        ///   shortDescription: string, # Optional. <Description>The short version of description.</Description>
        ///   lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///   guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///   abbreviation: string, # Optional. <Description>The abbreviation of the term.</Description>
        ///   templateName: [AnyObject], # Optional.
        ///   anchor: {
        ///     displayText: string, # Optional. <Description>The display text.</Description>
        ///     glossaryGuid: string, # Optional. <Description>The GUID of the glossary.</Description>
        ///     relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///   }, # Optional. <Description>The glossary header with basic information.</Description>
        ///   antonyms: [
        ///     {
        ///       description: string, # Optional. <Description>The description of the related term.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       expression: string, # Optional. <Description>The expression of the term.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       source: string, # Optional. <Description>The source of the term.</Description>
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///       steward: string, # Optional. <Description>The steward of the term.</Description>
        ///       termGuid: string, # Optional. <Description>The GUID of the term.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of related term headers as antonyms.</Description>
        ///   createTime: number, # Optional. <Description>The created time of the record.</Description>
        ///   createdBy: string, # Optional. <Description>The user who created the record.</Description>
        ///   updateTime: number, # Optional. <Description>The update time of the record.</Description>
        ///   updatedBy: string, # Optional. <Description>The user who updated the record.</Description>
        ///   status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;, # Optional. <Description>Status of the AtlasGlossaryTerm</Description>
        ///   resources: [
        ///     {
        ///       displayName: string, # Optional. <Description>Display name for url.</Description>
        ///       url: string, # Optional. <Description>web url. http or https</Description>
        ///     }
        ///   ], # Optional. <Description>An array of resource link for term</Description>
        ///   contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. <Description>The dictionary of contacts for terms. Key could be Expert or Steward.</Description>
        ///   attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;, # Optional. <Description>The custom attributes of the term, which is map&lt;string,map&lt;string,object&gt;&gt;.
        /// The key of the first layer map is term template name.</Description>
        ///   assignedEntities: [
        ///     {
        ///       guid: string, # Optional. <Description>The GUID of the object.</Description>
        ///       typeName: string, # Optional. <Description>The name of the type.</Description>
        ///       uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The unique attributes of the object.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.</Description>
        ///       relationshipType: string, # Optional.
        ///       relationshipAttributes: {
        ///         attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. <Description>The attributes of the struct.</Description>
        ///         typeName: string, # Optional. <Description>The name of the type.</Description>
        ///         lastModifiedTS: string, # Optional. <Description>ETag for concurrency control.</Description>
        ///       }, # Optional. <Description>Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.</Description>
        ///       relationshipGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. <Description>The enum of relationship status.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of related object IDs.</Description>
        ///   categories: [
        ///     {
        ///       categoryGuid: string, # Optional. <Description>The GUID of the category.</Description>
        ///       description: string, # Optional. <Description>The description of the record.</Description>
        ///       displayText: string, # Optional. <Description>The display text.</Description>
        ///       relationGuid: string, # Optional. <Description>The GUID of the relationship.</Description>
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. <Description>The status of term relationship.</Description>
        ///     }
        ///   ], # Optional. <Description>An array of term categorization headers.</Description>
        ///   classifies: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers.</Description>
        ///   examples: [string], # Optional. <Description>An array of examples.</Description>
        ///   isA: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers indicating the is-a relationship.</Description>
        ///   preferredTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of preferred related term headers.</Description>
        ///   preferredToTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers that are preferred to.</Description>
        ///   replacedBy: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers that are replaced by.</Description>
        ///   replacementTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers for replacement.</Description>
        ///   seeAlso: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers for see also.</Description>
        ///   synonyms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers as synonyms.</Description>
        ///   translatedTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of translated related term headers.</Description>
        ///   translationTerms: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers for translation.</Description>
        ///   usage: string, # Optional. <Description>The usage of the term.</Description>
        ///   validValues: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers as valid values.</Description>
        ///   validValuesFor: [AtlasRelatedTermHeader], # Optional. <Description>An array of related term headers as valid values for other records.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetTermsByGlossaryName(string glossaryName, int? limit = null, int? offset = null, bool? includeTermHierarchy = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(glossaryName, nameof(glossaryName));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.GetTermsByGlossaryName");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetTermsByGlossaryNameRequest(glossaryName, limit, offset, includeTermHierarchy, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Import Glossary Terms from local csv file. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryGuid"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="glossaryGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/PurviewCatalog/PurviewGlossary/ImportGlossaryTermsViaCsv
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   id: string, # Optional. <Description>guid string</Description>
        ///   status: &quot;NotStarted&quot; | &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;Running&quot;, # Optional. <Description>Enum of the status of import csv operation.</Description>
        ///   createTime: string, # Optional. <Description>The created time of the record.</Description>
        ///   lastUpdateTime: string, # Optional. <Description>The last updated time of the record.</Description>
        ///   properties: {
        ///     importedTerms: string, # Optional. <Description>Term numbers that already imported successfully</Description>
        ///     totalTermsDetected: string, # Optional. <Description>Total term numbers that detected in csv</Description>
        ///   }, # Optional.
        ///   error: {
        ///     errorCode: number, # Optional. <Description>Error code from async import job if fail</Description>
        ///     errorMessage: string, # Optional. <Description>Error message from async import job if fail</Description>
        ///   }, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Operation<BinaryData>> ImportGlossaryTermsViaCsvAsync(WaitUntil waitUntil, string glossaryGuid, RequestContent content, bool? includeTermHierarchy = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(glossaryGuid, nameof(glossaryGuid));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.ImportGlossaryTermsViaCsv");
            scope.Start();
            try
            {
                using HttpMessage message = CreateImportGlossaryTermsViaCsvRequest(glossaryGuid, content, includeTermHierarchy, context);
                return await ProtocolOperationHelpers.ProcessMessageAsync(_pipeline, message, ClientDiagnostics, "PurviewGlossaries.ImportGlossaryTermsViaCsv", OperationFinalStateVia.AzureAsyncOperation, context, waitUntil).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Import Glossary Terms from local csv file. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryGuid"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="glossaryGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/PurviewCatalog/PurviewGlossary/ImportGlossaryTermsViaCsv
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   id: string, # Optional. <Description>guid string</Description>
        ///   status: &quot;NotStarted&quot; | &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;Running&quot;, # Optional. <Description>Enum of the status of import csv operation.</Description>
        ///   createTime: string, # Optional. <Description>The created time of the record.</Description>
        ///   lastUpdateTime: string, # Optional. <Description>The last updated time of the record.</Description>
        ///   properties: {
        ///     importedTerms: string, # Optional. <Description>Term numbers that already imported successfully</Description>
        ///     totalTermsDetected: string, # Optional. <Description>Total term numbers that detected in csv</Description>
        ///   }, # Optional.
        ///   error: {
        ///     errorCode: number, # Optional. <Description>Error code from async import job if fail</Description>
        ///     errorMessage: string, # Optional. <Description>Error message from async import job if fail</Description>
        ///   }, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Operation<BinaryData> ImportGlossaryTermsViaCsv(WaitUntil waitUntil, string glossaryGuid, RequestContent content, bool? includeTermHierarchy = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(glossaryGuid, nameof(glossaryGuid));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.ImportGlossaryTermsViaCsv");
            scope.Start();
            try
            {
                using HttpMessage message = CreateImportGlossaryTermsViaCsvRequest(glossaryGuid, content, includeTermHierarchy, context);
                return ProtocolOperationHelpers.ProcessMessage(_pipeline, message, ClientDiagnostics, "PurviewGlossaries.ImportGlossaryTermsViaCsv", OperationFinalStateVia.AzureAsyncOperation, context, waitUntil);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Import Glossary Terms from local csv file by glossaryName. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="glossaryName"> The name of the glossary. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryName"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="glossaryName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/PurviewCatalog/PurviewGlossary/ImportGlossaryTermsViaCsvByGlossaryName
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   id: string, # Optional. <Description>guid string</Description>
        ///   status: &quot;NotStarted&quot; | &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;Running&quot;, # Optional. <Description>Enum of the status of import csv operation.</Description>
        ///   createTime: string, # Optional. <Description>The created time of the record.</Description>
        ///   lastUpdateTime: string, # Optional. <Description>The last updated time of the record.</Description>
        ///   properties: {
        ///     importedTerms: string, # Optional. <Description>Term numbers that already imported successfully</Description>
        ///     totalTermsDetected: string, # Optional. <Description>Total term numbers that detected in csv</Description>
        ///   }, # Optional.
        ///   error: {
        ///     errorCode: number, # Optional. <Description>Error code from async import job if fail</Description>
        ///     errorMessage: string, # Optional. <Description>Error message from async import job if fail</Description>
        ///   }, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Operation<BinaryData>> ImportGlossaryTermsViaCsvByGlossaryNameAsync(WaitUntil waitUntil, string glossaryName, RequestContent content, bool? includeTermHierarchy = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(glossaryName, nameof(glossaryName));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.ImportGlossaryTermsViaCsvByGlossaryName");
            scope.Start();
            try
            {
                using HttpMessage message = CreateImportGlossaryTermsViaCsvByGlossaryNameRequest(glossaryName, content, includeTermHierarchy, context);
                return await ProtocolOperationHelpers.ProcessMessageAsync(_pipeline, message, ClientDiagnostics, "PurviewGlossaries.ImportGlossaryTermsViaCsvByGlossaryName", OperationFinalStateVia.AzureAsyncOperation, context, waitUntil).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Import Glossary Terms from local csv file by glossaryName. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="glossaryName"> The name of the glossary. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryName"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="glossaryName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/PurviewCatalog/PurviewGlossary/ImportGlossaryTermsViaCsvByGlossaryName
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   id: string, # Optional. <Description>guid string</Description>
        ///   status: &quot;NotStarted&quot; | &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;Running&quot;, # Optional. <Description>Enum of the status of import csv operation.</Description>
        ///   createTime: string, # Optional. <Description>The created time of the record.</Description>
        ///   lastUpdateTime: string, # Optional. <Description>The last updated time of the record.</Description>
        ///   properties: {
        ///     importedTerms: string, # Optional. <Description>Term numbers that already imported successfully</Description>
        ///     totalTermsDetected: string, # Optional. <Description>Total term numbers that detected in csv</Description>
        ///   }, # Optional.
        ///   error: {
        ///     errorCode: number, # Optional. <Description>Error code from async import job if fail</Description>
        ///     errorMessage: string, # Optional. <Description>Error message from async import job if fail</Description>
        ///   }, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Operation<BinaryData> ImportGlossaryTermsViaCsvByGlossaryName(WaitUntil waitUntil, string glossaryName, RequestContent content, bool? includeTermHierarchy = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(glossaryName, nameof(glossaryName));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.ImportGlossaryTermsViaCsvByGlossaryName");
            scope.Start();
            try
            {
                using HttpMessage message = CreateImportGlossaryTermsViaCsvByGlossaryNameRequest(glossaryName, content, includeTermHierarchy, context);
                return ProtocolOperationHelpers.ProcessMessage(_pipeline, message, ClientDiagnostics, "PurviewGlossaries.ImportGlossaryTermsViaCsvByGlossaryName", OperationFinalStateVia.AzureAsyncOperation, context, waitUntil);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateGetGlossariesRequest(int? limit, int? offset, string sort, bool? ignoreTermsAndCategories, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary", false);
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            if (sort != null)
            {
                uri.AppendQuery("sort", sort, true);
            }
            if (ignoreTermsAndCategories != null)
            {
                uri.AppendQuery("ignoreTermsAndCategories", ignoreTermsAndCategories.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateCreateGlossaryRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateCreateGlossaryCategoriesRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/categories", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateCreateGlossaryCategoryRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/category", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetGlossaryCategoryRequest(string categoryGuid, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/category/", false);
            uri.AppendPath(categoryGuid, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateUpdateGlossaryCategoryRequest(string categoryGuid, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/category/", false);
            uri.AppendPath(categoryGuid, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeleteGlossaryCategoryRequest(string categoryGuid, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/category/", false);
            uri.AppendPath(categoryGuid, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreatePartialUpdateGlossaryCategoryRequest(string categoryGuid, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/category/", false);
            uri.AppendPath(categoryGuid, true);
            uri.AppendPath("/partial", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetRelatedCategoriesRequest(string categoryGuid, int? limit, int? offset, string sort, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/category/", false);
            uri.AppendPath(categoryGuid, true);
            uri.AppendPath("/related", false);
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            if (sort != null)
            {
                uri.AppendQuery("sort", sort, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetCategoryTermsRequest(string categoryGuid, int? limit, int? offset, string sort, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/category/", false);
            uri.AppendPath(categoryGuid, true);
            uri.AppendPath("/terms", false);
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            if (sort != null)
            {
                uri.AppendQuery("sort", sort, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateCreateGlossaryTermRequest(RequestContent content, bool? includeTermHierarchy, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/term", false);
            if (includeTermHierarchy != null)
            {
                uri.AppendQuery("includeTermHierarchy", includeTermHierarchy.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetGlossaryTermRequest(string termGuid, bool? includeTermHierarchy, IEnumerable<string> excludeRelationshipTypeList, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/term/", false);
            uri.AppendPath(termGuid, true);
            if (includeTermHierarchy != null)
            {
                uri.AppendQuery("includeTermHierarchy", includeTermHierarchy.Value, true);
            }
            if (excludeRelationshipTypeList != null)
            {
                foreach (var param in excludeRelationshipTypeList)
                {
                    uri.AppendQuery("excludeRelationshipTypes", param, true);
                }
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateUpdateGlossaryTermRequest(string termGuid, RequestContent content, bool? includeTermHierarchy, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/term/", false);
            uri.AppendPath(termGuid, true);
            if (includeTermHierarchy != null)
            {
                uri.AppendQuery("includeTermHierarchy", includeTermHierarchy.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeleteGlossaryTermRequest(string termGuid, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/term/", false);
            uri.AppendPath(termGuid, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreatePartialUpdateGlossaryTermRequest(string termGuid, RequestContent content, bool? includeTermHierarchy, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/term/", false);
            uri.AppendPath(termGuid, true);
            uri.AppendPath("/partial", false);
            if (includeTermHierarchy != null)
            {
                uri.AppendQuery("includeTermHierarchy", includeTermHierarchy.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateCreateGlossaryTermsRequest(RequestContent content, bool? includeTermHierarchy, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/terms", false);
            if (includeTermHierarchy != null)
            {
                uri.AppendQuery("includeTermHierarchy", includeTermHierarchy.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetEntitiesAssignedWithTermRequest(string termGuid, int? limit, int? offset, string sort, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/terms/", false);
            uri.AppendPath(termGuid, true);
            uri.AppendPath("/assignedEntities", false);
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            if (sort != null)
            {
                uri.AppendQuery("sort", sort, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateAssignTermToEntitiesRequest(string termGuid, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/terms/", false);
            uri.AppendPath(termGuid, true);
            uri.AppendPath("/assignedEntities", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateRemoveTermAssignmentFromEntitiesRequest(string termGuid, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/terms/", false);
            uri.AppendPath(termGuid, true);
            uri.AppendPath("/assignedEntities", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeleteTermAssignmentFromEntitiesRequest(string termGuid, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/terms/", false);
            uri.AppendPath(termGuid, true);
            uri.AppendPath("/assignedEntities", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetRelatedTermsRequest(string termGuid, int? limit, int? offset, string sort, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/terms/", false);
            uri.AppendPath(termGuid, true);
            uri.AppendPath("/related", false);
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            if (sort != null)
            {
                uri.AppendQuery("sort", sort, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetGlossaryRequest(string glossaryGuid, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/", false);
            uri.AppendPath(glossaryGuid, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateUpdateGlossaryRequest(string glossaryGuid, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/", false);
            uri.AppendPath(glossaryGuid, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeleteGlossaryRequest(string glossaryGuid, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/", false);
            uri.AppendPath(glossaryGuid, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetGlossaryCategoriesRequest(string glossaryGuid, int? limit, int? offset, string sort, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/", false);
            uri.AppendPath(glossaryGuid, true);
            uri.AppendPath("/categories", false);
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            if (sort != null)
            {
                uri.AppendQuery("sort", sort, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetGlossaryCategoriesHeadersRequest(string glossaryGuid, int? limit, int? offset, string sort, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/", false);
            uri.AppendPath(glossaryGuid, true);
            uri.AppendPath("/categories/headers", false);
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            if (sort != null)
            {
                uri.AppendQuery("sort", sort, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetDetailedGlossaryRequest(string glossaryGuid, bool? includeTermHierarchy, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/", false);
            uri.AppendPath(glossaryGuid, true);
            uri.AppendPath("/detailed", false);
            if (includeTermHierarchy != null)
            {
                uri.AppendQuery("includeTermHierarchy", includeTermHierarchy.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreatePartialUpdateGlossaryRequest(string glossaryGuid, RequestContent content, bool? includeTermHierarchy, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/", false);
            uri.AppendPath(glossaryGuid, true);
            uri.AppendPath("/partial", false);
            if (includeTermHierarchy != null)
            {
                uri.AppendQuery("includeTermHierarchy", includeTermHierarchy.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetGlossaryTermsRequest(string glossaryGuid, bool? includeTermHierarchy, int? limit, int? offset, string sort, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/", false);
            uri.AppendPath(glossaryGuid, true);
            uri.AppendPath("/terms", false);
            if (includeTermHierarchy != null)
            {
                uri.AppendQuery("includeTermHierarchy", includeTermHierarchy.Value, true);
            }
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            if (sort != null)
            {
                uri.AppendQuery("sort", sort, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetGlossaryTermHeadersRequest(string glossaryGuid, int? limit, int? offset, string sort, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/", false);
            uri.AppendPath(glossaryGuid, true);
            uri.AppendPath("/terms/headers", false);
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            if (sort != null)
            {
                uri.AppendQuery("sort", sort, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateImportGlossaryTermsViaCsvRequest(string glossaryGuid, RequestContent content, bool? includeTermHierarchy, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier202);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/glossary/", false);
            uri.AppendPath(glossaryGuid, true);
            uri.AppendPath("/terms/import", false);
            if (includeTermHierarchy != null)
            {
                uri.AppendQuery("includeTermHierarchy", includeTermHierarchy.Value, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "multipart/form-data");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateImportGlossaryTermsViaCsvByGlossaryNameRequest(string glossaryName, RequestContent content, bool? includeTermHierarchy, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier202);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/glossary/name/", false);
            uri.AppendPath(glossaryName, true);
            uri.AppendPath("/terms/import", false);
            if (includeTermHierarchy != null)
            {
                uri.AppendQuery("includeTermHierarchy", includeTermHierarchy.Value, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "multipart/form-data");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetImportCsvOperationStatusRequest(string operationGuid, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/glossary/terms/import/", false);
            uri.AppendPath(operationGuid, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateExportGlossaryTermsAsCsvRequest(string glossaryGuid, RequestContent content, bool? includeTermHierarchy, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/glossary/", false);
            uri.AppendPath(glossaryGuid, true);
            uri.AppendPath("/terms/export", false);
            if (includeTermHierarchy != null)
            {
                uri.AppendQuery("includeTermHierarchy", includeTermHierarchy.Value, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "text/csv");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetTermsByGlossaryNameRequest(string glossaryName, int? limit, int? offset, bool? includeTermHierarchy, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/glossary/name/", false);
            uri.AppendPath(glossaryName, true);
            uri.AppendPath("/terms", false);
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            if (includeTermHierarchy != null)
            {
                uri.AppendQuery("includeTermHierarchy", includeTermHierarchy.Value, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier204;
        private static ResponseClassifier ResponseClassifier204 => _responseClassifier204 ??= new StatusCodeClassifier(stackalloc ushort[] { 204 });
        private static ResponseClassifier _responseClassifier202;
        private static ResponseClassifier ResponseClassifier202 => _responseClassifier202 ??= new StatusCodeClassifier(stackalloc ushort[] { 202 });
    }
}
