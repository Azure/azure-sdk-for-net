// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Analytics.Purview.Catalog
{
    /// <summary> The PurviewGlossaries service client. </summary>
    public partial class PurviewGlossaries
    {
        private static readonly string[] AuthorizationScopes = new string[] { "https://purview.azure.net/.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of PurviewGlossaries for mocking. </summary>
        protected PurviewGlossaries()
        {
        }

        /// <summary> Initializes a new instance of PurviewGlossaries. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="tokenCredential"> The token credential to copy. </param>
        /// <param name="endpoint"> The catalog endpoint of your Purview account. Example: https://{accountName}.purview.azure.com. </param>
        /// <param name="apiVersion"> Api Version. </param>
        internal PurviewGlossaries(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, TokenCredential tokenCredential, Uri endpoint, string apiVersion)
        {
            ClientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
            _tokenCredential = tokenCredential;
            _endpoint = endpoint;
            _apiVersion = apiVersion;
        }

        /// <summary> Get all glossaries registered with Atlas. </summary>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="ignoreTermsAndCategories"> Whether ignore terms and categories. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetGlossariesAsync and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// Response response = await client.GetGlossariesAsync();
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].ToString());
        /// ]]></code>
        /// This sample shows how to call GetGlossariesAsync with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// Response response = await client.GetGlossariesAsync(1234, 1234, "<sort>", true);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result[0].GetProperty("longDescription").ToString());
        /// Console.WriteLine(result[0].GetProperty("name").ToString());
        /// Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
        /// Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
        /// Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("language").ToString());
        /// Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("usage").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ArrayOfAtlasGlossary</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       entityGuid: string, # Optional. The GUID of the entity.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. The end of the time boundary.
        ///           startTime: string, # Optional. The start of the time boundary.
        ///           timeZone: string, # Optional. The timezone of the time boundary.
        ///         }
        ///       ], # Optional. An array of time boundaries indicating validity periods.
        ///       source: string, # Optional. indicate the source who create the classification detail
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///     }
        ///   ], # Optional. An array of classifications.
        ///   longDescription: string, # Optional. The long version description.
        ///   name: string, # Optional. The name of the glossary object.
        ///   qualifiedName: string, # Optional. The qualified name of the glossary object.
        ///   shortDescription: string, # Optional. The short version of description.
        ///   lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///   guid: string, # Optional. The GUID of the object.
        ///   categories: [
        ///     {
        ///       categoryGuid: string, # Optional. The GUID of the category.
        ///       description: string, # Optional. The description of the category header.
        ///       displayText: string, # Optional. The display text.
        ///       parentCategoryGuid: string, # Optional. The GUID of the parent category.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///     }
        ///   ], # Optional. An array of categories.
        ///   language: string, # Optional. The language of the glossary.
        ///   terms: [
        ///     {
        ///       description: string, # Optional. The description of the related term.
        ///       displayText: string, # Optional. The display text.
        ///       expression: string, # Optional. The expression of the term.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       source: string, # Optional. The source of the term.
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///       steward: string, # Optional. The steward of the term.
        ///       termGuid: string, # Optional. The GUID of the term.
        ///     }
        ///   ], # Optional. An array of related term headers.
        ///   usage: string, # Optional. The usage of the glossary.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetGlossariesAsync(int? limit = null, int? offset = null, string sort = null, bool? ignoreTermsAndCategories = null, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.GetGlossaries");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetGlossariesRequest(limit, offset, sort, ignoreTermsAndCategories, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get all glossaries registered with Atlas. </summary>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="ignoreTermsAndCategories"> Whether ignore terms and categories. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetGlossaries and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// Response response = client.GetGlossaries();
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].ToString());
        /// ]]></code>
        /// This sample shows how to call GetGlossaries with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// Response response = client.GetGlossaries(1234, 1234, "<sort>", true);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result[0].GetProperty("longDescription").ToString());
        /// Console.WriteLine(result[0].GetProperty("name").ToString());
        /// Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
        /// Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
        /// Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("language").ToString());
        /// Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("usage").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ArrayOfAtlasGlossary</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       entityGuid: string, # Optional. The GUID of the entity.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. The end of the time boundary.
        ///           startTime: string, # Optional. The start of the time boundary.
        ///           timeZone: string, # Optional. The timezone of the time boundary.
        ///         }
        ///       ], # Optional. An array of time boundaries indicating validity periods.
        ///       source: string, # Optional. indicate the source who create the classification detail
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///     }
        ///   ], # Optional. An array of classifications.
        ///   longDescription: string, # Optional. The long version description.
        ///   name: string, # Optional. The name of the glossary object.
        ///   qualifiedName: string, # Optional. The qualified name of the glossary object.
        ///   shortDescription: string, # Optional. The short version of description.
        ///   lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///   guid: string, # Optional. The GUID of the object.
        ///   categories: [
        ///     {
        ///       categoryGuid: string, # Optional. The GUID of the category.
        ///       description: string, # Optional. The description of the category header.
        ///       displayText: string, # Optional. The display text.
        ///       parentCategoryGuid: string, # Optional. The GUID of the parent category.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///     }
        ///   ], # Optional. An array of categories.
        ///   language: string, # Optional. The language of the glossary.
        ///   terms: [
        ///     {
        ///       description: string, # Optional. The description of the related term.
        ///       displayText: string, # Optional. The display text.
        ///       expression: string, # Optional. The expression of the term.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       source: string, # Optional. The source of the term.
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///       steward: string, # Optional. The steward of the term.
        ///       termGuid: string, # Optional. The GUID of the term.
        ///     }
        ///   ], # Optional. An array of related term headers.
        ///   usage: string, # Optional. The usage of the glossary.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetGlossaries(int? limit = null, int? offset = null, string sort = null, bool? ignoreTermsAndCategories = null, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.GetGlossaries");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetGlossariesRequest(limit, offset, sort, ignoreTermsAndCategories, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a glossary. </summary>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call CreateGlossaryAsync and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.CreateGlossaryAsync(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call CreateGlossaryAsync with all request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// var data = new {
        ///     categories = new[] {
        ///         new {
        ///             categoryGuid = "<AtlasRelatedCategoryHeaderCategoryGuid>",
        ///             description = "<AtlasRelatedCategoryHeaderDescription>",
        ///             displayText = "<AtlasRelatedCategoryHeaderDisplayText>",
        ///             parentCategoryGuid = "<AtlasRelatedCategoryHeaderParentCategoryGuid>",
        ///             relationGuid = "<AtlasRelatedCategoryHeaderRelationGuid>",
        ///         }
        ///     },
        ///     language = "<AtlasGlossaryLanguage>",
        ///     terms = new[] {
        ///         new {
        ///             description = "<AtlasRelatedTermHeaderDescription>",
        ///             displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///             expression = "<AtlasRelatedTermHeaderExpression>",
        ///             relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///             source = "<AtlasRelatedTermHeaderSource>",
        ///             status = "<DRAFT>",
        ///             steward = "<AtlasRelatedTermHeaderSteward>",
        ///             termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///         }
        ///     },
        ///     usage = "<AtlasGlossaryUsage>",
        ///     classifications = new[] {
        ///         new {
        ///             attributes = new {
        ///                 key = new {},
        ///             },
        ///             typeName = "<AtlasStructTypeName>",
        ///             lastModifiedTS = "<LastModifiedTS>",
        ///             entityGuid = "<AtlasClassificationEntityGuid>",
        ///             entityStatus = "<ACTIVE>",
        ///             removePropagationsOnEntityDelete = true,
        ///             validityPeriods = new[] {
        ///                 new {
        ///                     endTime = "<TimeBoundaryEndTime>",
        ///                     startTime = "<TimeBoundaryStartTime>",
        ///                     timeZone = "<TimeBoundaryTimeZone>",
        ///                 }
        ///             },
        ///             source = "<AtlasClassificationSource>",
        ///             sourceDetails = new {
        ///                 key = new {},
        ///             },
        ///         }
        ///     },
        ///     longDescription = "<AtlasGlossaryBaseObjectLongDescription>",
        ///     name = "<AtlasGlossaryBaseObjectName>",
        ///     qualifiedName = "<AtlasGlossaryBaseObjectQualifiedName>",
        ///     shortDescription = "<AtlasGlossaryBaseObjectShortDescription>",
        ///     lastModifiedTS = "<LastModifiedTS>",
        ///     guid = "<AtlasBaseModelObjectGuid>",
        ///     categoryInfo = new {
        ///         key = new {
        ///             classifications = new[] {
        ///                 new {
        ///                     attributes = new {
        ///                         key = new {},
        ///                     },
        ///                     typeName = "<AtlasStructTypeName>",
        ///                     lastModifiedTS = "<LastModifiedTS>",
        ///                     entityGuid = "<AtlasClassificationEntityGuid>",
        ///                     entityStatus = "<ACTIVE>",
        ///                     removePropagationsOnEntityDelete = true,
        ///                     validityPeriods = new[] {
        ///                         new {
        ///                             endTime = "<TimeBoundaryEndTime>",
        ///                             startTime = "<TimeBoundaryStartTime>",
        ///                             timeZone = "<TimeBoundaryTimeZone>",
        ///                         }
        ///                     },
        ///                     source = "<AtlasClassificationSource>",
        ///                     sourceDetails = new {
        ///                         key = new {},
        ///                     },
        ///                 }
        ///             },
        ///             longDescription = "<AtlasGlossaryBaseObjectLongDescription>",
        ///             name = "<AtlasGlossaryBaseObjectName>",
        ///             qualifiedName = "<AtlasGlossaryBaseObjectQualifiedName>",
        ///             shortDescription = "<AtlasGlossaryBaseObjectShortDescription>",
        ///             lastModifiedTS = "<LastModifiedTS>",
        ///             guid = "<AtlasBaseModelObjectGuid>",
        ///             anchor = new {
        ///                 displayText = "<AtlasGlossaryHeaderDisplayText>",
        ///                 glossaryGuid = "<AtlasGlossaryHeaderGlossaryGuid>",
        ///                 relationGuid = "<AtlasGlossaryHeaderRelationGuid>",
        ///             },
        ///             childrenCategories = new[] {
        ///                 new {
        ///                     categoryGuid = "<AtlasRelatedCategoryHeaderCategoryGuid>",
        ///                     description = "<AtlasRelatedCategoryHeaderDescription>",
        ///                     displayText = "<AtlasRelatedCategoryHeaderDisplayText>",
        ///                     parentCategoryGuid = "<AtlasRelatedCategoryHeaderParentCategoryGuid>",
        ///                     relationGuid = "<AtlasRelatedCategoryHeaderRelationGuid>",
        ///                 }
        ///             },
        ///             parentCategory = new {
        ///                 categoryGuid = "<AtlasRelatedCategoryHeaderCategoryGuid>",
        ///                 description = "<AtlasRelatedCategoryHeaderDescription>",
        ///                 displayText = "<AtlasRelatedCategoryHeaderDisplayText>",
        ///                 parentCategoryGuid = "<AtlasRelatedCategoryHeaderParentCategoryGuid>",
        ///                 relationGuid = "<AtlasRelatedCategoryHeaderRelationGuid>",
        ///             },
        ///             terms = new[] {
        ///                 new {
        ///                     description = "<AtlasRelatedTermHeaderDescription>",
        ///                     displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                     expression = "<AtlasRelatedTermHeaderExpression>",
        ///                     relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                     source = "<AtlasRelatedTermHeaderSource>",
        ///                     status = "<DRAFT>",
        ///                     steward = "<AtlasRelatedTermHeaderSteward>",
        ///                     termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///                 }
        ///             },
        ///         },
        ///     },
        ///     termInfo = new {
        ///         key = new {
        ///             classifications = new[] {
        ///                 new {
        ///                     attributes = new {
        ///                         key = new {},
        ///                     },
        ///                     typeName = "<AtlasStructTypeName>",
        ///                     lastModifiedTS = "<LastModifiedTS>",
        ///                     entityGuid = "<AtlasClassificationEntityGuid>",
        ///                     entityStatus = "<ACTIVE>",
        ///                     removePropagationsOnEntityDelete = true,
        ///                     validityPeriods = new[] {
        ///                         new {
        ///                             endTime = "<TimeBoundaryEndTime>",
        ///                             startTime = "<TimeBoundaryStartTime>",
        ///                             timeZone = "<TimeBoundaryTimeZone>",
        ///                         }
        ///                     },
        ///                     source = "<AtlasClassificationSource>",
        ///                     sourceDetails = new {
        ///                         key = new {},
        ///                     },
        ///                 }
        ///             },
        ///             longDescription = "<AtlasGlossaryBaseObjectLongDescription>",
        ///             name = "<AtlasGlossaryBaseObjectName>",
        ///             qualifiedName = "<AtlasGlossaryBaseObjectQualifiedName>",
        ///             shortDescription = "<AtlasGlossaryBaseObjectShortDescription>",
        ///             lastModifiedTS = "<LastModifiedTS>",
        ///             guid = "<AtlasBaseModelObjectGuid>",
        ///             abbreviation = "<AtlasGlossaryTermAbbreviation>",
        ///             templateName = new[] {
        ///                 new {}
        ///             },
        ///             anchor = new {
        ///                 displayText = "<AtlasGlossaryHeaderDisplayText>",
        ///                 glossaryGuid = "<AtlasGlossaryHeaderGlossaryGuid>",
        ///                 relationGuid = "<AtlasGlossaryHeaderRelationGuid>",
        ///             },
        ///             antonyms = new[] {
        ///                 new {
        ///                     description = "<AtlasRelatedTermHeaderDescription>",
        ///                     displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                     expression = "<AtlasRelatedTermHeaderExpression>",
        ///                     relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                     source = "<AtlasRelatedTermHeaderSource>",
        ///                     status = "<DRAFT>",
        ///                     steward = "<AtlasRelatedTermHeaderSteward>",
        ///                     termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///                 }
        ///             },
        ///             createTime = 1234,
        ///             createdBy = "<AtlasGlossaryTermCreatedBy>",
        ///             updateTime = 1234,
        ///             updatedBy = "<AtlasGlossaryTermUpdatedBy>",
        ///             status = "<Draft>",
        ///             resources = new[] {
        ///                 new {
        ///                     displayName = "<ResourceLinkDisplayName>",
        ///                     url = "<ResourceLinkUrl>",
        ///                 }
        ///             },
        ///             contacts = new {
        ///                 key = new[] {
        ///                     new {
        ///                         id = "<ContactBasicId>",
        ///                         info = "<ContactBasicInfo>",
        ///                     }
        ///                 },
        ///             },
        ///             attributes = new {
        ///                 key = new {
        ///                     key = new {},
        ///                 },
        ///             },
        ///             assignedEntities = new[] {
        ///                 new {
        ///                     guid = "<AtlasObjectIdGuid>",
        ///                     typeName = "<AtlasObjectIdTypeName>",
        ///                     uniqueAttributes = new {
        ///                         key = new {},
        ///                     },
        ///                     displayText = "<AtlasRelatedObjectIdDisplayText>",
        ///                     entityStatus = "<ACTIVE>",
        ///                     relationshipType = "<AtlasRelatedObjectIdRelationshipType>",
        ///                     relationshipAttributes = new {
        ///                         attributes = new {
        ///                             key = new {},
        ///                         },
        ///                         typeName = "<AtlasStructTypeName>",
        ///                         lastModifiedTS = "<LastModifiedTS>",
        ///                         entityGuid = "<AtlasClassificationEntityGuid>",
        ///                         entityStatus = "<ACTIVE>",
        ///                         removePropagationsOnEntityDelete = true,
        ///                         validityPeriods = new[] {
        ///                             new {
        ///                                 endTime = "<TimeBoundaryEndTime>",
        ///                                 startTime = "<TimeBoundaryStartTime>",
        ///                                 timeZone = "<TimeBoundaryTimeZone>",
        ///                             }
        ///                         },
        ///                         source = "<AtlasClassificationSource>",
        ///                         sourceDetails = new {
        ///                             key = new {},
        ///                         },
        ///                     },
        ///                     relationshipGuid = "<AtlasRelatedObjectIdRelationshipGuid>",
        ///                     relationshipStatus = "<ACTIVE>",
        ///                 }
        ///             },
        ///             categories = new[] {
        ///                 new {
        ///                     categoryGuid = "<AtlasTermCategorizationHeaderCategoryGuid>",
        ///                     description = "<AtlasTermCategorizationHeaderDescription>",
        ///                     displayText = "<AtlasTermCategorizationHeaderDisplayText>",
        ///                     relationGuid = "<AtlasTermCategorizationHeaderRelationGuid>",
        ///                     status = "<DRAFT>",
        ///                 }
        ///             },
        ///             classifies = new[] {
        ///                 new {
        ///                     description = "<AtlasRelatedTermHeaderDescription>",
        ///                     displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                     expression = "<AtlasRelatedTermHeaderExpression>",
        ///                     relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                     source = "<AtlasRelatedTermHeaderSource>",
        ///                     status = "<DRAFT>",
        ///                     steward = "<AtlasRelatedTermHeaderSteward>",
        ///                     termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///                 }
        ///             },
        ///             examples = new[] {
        ///                 "<AtlasGlossaryTermExamplesItem>"
        ///             },
        ///             isA = new[] {
        ///                 new {
        ///                     description = "<AtlasRelatedTermHeaderDescription>",
        ///                     displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                     expression = "<AtlasRelatedTermHeaderExpression>",
        ///                     relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                     source = "<AtlasRelatedTermHeaderSource>",
        ///                     status = "<DRAFT>",
        ///                     steward = "<AtlasRelatedTermHeaderSteward>",
        ///                     termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///                 }
        ///             },
        ///             preferredTerms = new[] {
        ///                 new {
        ///                     description = "<AtlasRelatedTermHeaderDescription>",
        ///                     displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                     expression = "<AtlasRelatedTermHeaderExpression>",
        ///                     relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                     source = "<AtlasRelatedTermHeaderSource>",
        ///                     status = "<DRAFT>",
        ///                     steward = "<AtlasRelatedTermHeaderSteward>",
        ///                     termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///                 }
        ///             },
        ///             preferredToTerms = new[] {
        ///                 new {
        ///                     description = "<AtlasRelatedTermHeaderDescription>",
        ///                     displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                     expression = "<AtlasRelatedTermHeaderExpression>",
        ///                     relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                     source = "<AtlasRelatedTermHeaderSource>",
        ///                     status = "<DRAFT>",
        ///                     steward = "<AtlasRelatedTermHeaderSteward>",
        ///                     termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///                 }
        ///             },
        ///             replacedBy = new[] {
        ///                 new {
        ///                     description = "<AtlasRelatedTermHeaderDescription>",
        ///                     displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                     expression = "<AtlasRelatedTermHeaderExpression>",
        ///                     relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                     source = "<AtlasRelatedTermHeaderSource>",
        ///                     status = "<DRAFT>",
        ///                     steward = "<AtlasRelatedTermHeaderSteward>",
        ///                     termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///                 }
        ///             },
        ///             replacementTerms = new[] {
        ///                 new {
        ///                     description = "<AtlasRelatedTermHeaderDescription>",
        ///                     displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                     expression = "<AtlasRelatedTermHeaderExpression>",
        ///                     relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                     source = "<AtlasRelatedTermHeaderSource>",
        ///                     status = "<DRAFT>",
        ///                     steward = "<AtlasRelatedTermHeaderSteward>",
        ///                     termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///                 }
        ///             },
        ///             seeAlso = new[] {
        ///                 new {
        ///                     description = "<AtlasRelatedTermHeaderDescription>",
        ///                     displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                     expression = "<AtlasRelatedTermHeaderExpression>",
        ///                     relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                     source = "<AtlasRelatedTermHeaderSource>",
        ///                     status = "<DRAFT>",
        ///                     steward = "<AtlasRelatedTermHeaderSteward>",
        ///                     termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///                 }
        ///             },
        ///             synonyms = new[] {
        ///                 new {
        ///                     description = "<AtlasRelatedTermHeaderDescription>",
        ///                     displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                     expression = "<AtlasRelatedTermHeaderExpression>",
        ///                     relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                     source = "<AtlasRelatedTermHeaderSource>",
        ///                     status = "<DRAFT>",
        ///                     steward = "<AtlasRelatedTermHeaderSteward>",
        ///                     termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///                 }
        ///             },
        ///             translatedTerms = new[] {
        ///                 new {
        ///                     description = "<AtlasRelatedTermHeaderDescription>",
        ///                     displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                     expression = "<AtlasRelatedTermHeaderExpression>",
        ///                     relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                     source = "<AtlasRelatedTermHeaderSource>",
        ///                     status = "<DRAFT>",
        ///                     steward = "<AtlasRelatedTermHeaderSteward>",
        ///                     termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///                 }
        ///             },
        ///             translationTerms = new[] {
        ///                 new {
        ///                     description = "<AtlasRelatedTermHeaderDescription>",
        ///                     displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                     expression = "<AtlasRelatedTermHeaderExpression>",
        ///                     relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                     source = "<AtlasRelatedTermHeaderSource>",
        ///                     status = "<DRAFT>",
        ///                     steward = "<AtlasRelatedTermHeaderSteward>",
        ///                     termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///                 }
        ///             },
        ///             usage = "<AtlasGlossaryTermUsage>",
        ///             validValues = new[] {
        ///                 new {
        ///                     description = "<AtlasRelatedTermHeaderDescription>",
        ///                     displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                     expression = "<AtlasRelatedTermHeaderExpression>",
        ///                     relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                     source = "<AtlasRelatedTermHeaderSource>",
        ///                     status = "<DRAFT>",
        ///                     steward = "<AtlasRelatedTermHeaderSteward>",
        ///                     termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///                 }
        ///             },
        ///             validValuesFor = new[] {
        ///                 new {
        ///                     description = "<AtlasRelatedTermHeaderDescription>",
        ///                     displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                     expression = "<AtlasRelatedTermHeaderExpression>",
        ///                     relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                     source = "<AtlasRelatedTermHeaderSource>",
        ///                     status = "<DRAFT>",
        ///                     steward = "<AtlasRelatedTermHeaderSteward>",
        ///                     termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///                 }
        ///             },
        ///         },
        ///     },
        /// };
        /// 
        /// Response response = await client.CreateGlossaryAsync(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("longDescription").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("qualifiedName").ToString());
        /// Console.WriteLine(result.GetProperty("shortDescription").ToString());
        /// Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("language").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("usage").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// <details><summary>AtlasGlossaryExtInfo</summary>Schema for <c>AtlasGlossaryExtInfo</c>:
        /// <code>{
        ///   categories: [
        ///     {
        ///       categoryGuid: string, # Optional. The GUID of the category.
        ///       description: string, # Optional. The description of the category header.
        ///       displayText: string, # Optional. The display text.
        ///       parentCategoryGuid: string, # Optional. The GUID of the parent category.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///     }
        ///   ], # Optional. An array of categories.
        ///   language: string, # Optional. The language of the glossary.
        ///   terms: [
        ///     {
        ///       description: string, # Optional. The description of the related term.
        ///       displayText: string, # Optional. The display text.
        ///       expression: string, # Optional. The expression of the term.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       source: string, # Optional. The source of the term.
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///       steward: string, # Optional. The steward of the term.
        ///       termGuid: string, # Optional. The GUID of the term.
        ///     }
        ///   ], # Optional. An array of related term headers.
        ///   usage: string, # Optional. The usage of the glossary.
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       entityGuid: string, # Optional. The GUID of the entity.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. The end of the time boundary.
        ///           startTime: string, # Optional. The start of the time boundary.
        ///           timeZone: string, # Optional. The timezone of the time boundary.
        ///         }
        ///       ], # Optional. An array of time boundaries indicating validity periods.
        ///       source: string, # Optional. indicate the source who create the classification detail
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///     }
        ///   ], # Optional. An array of classifications.
        ///   longDescription: string, # Optional. The long version description.
        ///   name: string, # Optional. The name of the glossary object.
        ///   qualifiedName: string, # Optional. The qualified name of the glossary object.
        ///   shortDescription: string, # Optional. The short version of description.
        ///   lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///   guid: string, # Optional. The GUID of the object.
        ///   categoryInfo: Dictionary&lt;string, AtlasGlossaryCategory&gt;, # Optional. The glossary category information.
        ///   termInfo: Dictionary&lt;string, AtlasGlossaryTerm&gt;, # Optional. The glossary term information.
        /// }
        /// </code>
        /// </details>
        /// 
        /// Response Body:
        /// 
        /// <details><summary>AtlasGlossaryExtInfo</summary>Schema for <c>AtlasGlossaryExtInfo</c>:
        /// <code>{
        ///   categories: [
        ///     {
        ///       categoryGuid: string, # Optional. The GUID of the category.
        ///       description: string, # Optional. The description of the category header.
        ///       displayText: string, # Optional. The display text.
        ///       parentCategoryGuid: string, # Optional. The GUID of the parent category.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///     }
        ///   ], # Optional. An array of categories.
        ///   language: string, # Optional. The language of the glossary.
        ///   terms: [
        ///     {
        ///       description: string, # Optional. The description of the related term.
        ///       displayText: string, # Optional. The display text.
        ///       expression: string, # Optional. The expression of the term.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       source: string, # Optional. The source of the term.
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///       steward: string, # Optional. The steward of the term.
        ///       termGuid: string, # Optional. The GUID of the term.
        ///     }
        ///   ], # Optional. An array of related term headers.
        ///   usage: string, # Optional. The usage of the glossary.
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       entityGuid: string, # Optional. The GUID of the entity.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. The end of the time boundary.
        ///           startTime: string, # Optional. The start of the time boundary.
        ///           timeZone: string, # Optional. The timezone of the time boundary.
        ///         }
        ///       ], # Optional. An array of time boundaries indicating validity periods.
        ///       source: string, # Optional. indicate the source who create the classification detail
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///     }
        ///   ], # Optional. An array of classifications.
        ///   longDescription: string, # Optional. The long version description.
        ///   name: string, # Optional. The name of the glossary object.
        ///   qualifiedName: string, # Optional. The qualified name of the glossary object.
        ///   shortDescription: string, # Optional. The short version of description.
        ///   lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///   guid: string, # Optional. The GUID of the object.
        ///   categoryInfo: Dictionary&lt;string, AtlasGlossaryCategory&gt;, # Optional. The glossary category information.
        ///   termInfo: Dictionary&lt;string, AtlasGlossaryTerm&gt;, # Optional. The glossary term information.
        /// }
        /// </code>
        /// </details>
        /// 
        /// </remarks>
        public virtual async Task<Response> CreateGlossaryAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.CreateGlossary");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateGlossaryRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a glossary. </summary>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call CreateGlossary and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.CreateGlossary(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call CreateGlossary with all request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// var data = new {
        ///     categories = new[] {
        ///         new {
        ///             categoryGuid = "<AtlasRelatedCategoryHeaderCategoryGuid>",
        ///             description = "<AtlasRelatedCategoryHeaderDescription>",
        ///             displayText = "<AtlasRelatedCategoryHeaderDisplayText>",
        ///             parentCategoryGuid = "<AtlasRelatedCategoryHeaderParentCategoryGuid>",
        ///             relationGuid = "<AtlasRelatedCategoryHeaderRelationGuid>",
        ///         }
        ///     },
        ///     language = "<AtlasGlossaryLanguage>",
        ///     terms = new[] {
        ///         new {
        ///             description = "<AtlasRelatedTermHeaderDescription>",
        ///             displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///             expression = "<AtlasRelatedTermHeaderExpression>",
        ///             relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///             source = "<AtlasRelatedTermHeaderSource>",
        ///             status = "<DRAFT>",
        ///             steward = "<AtlasRelatedTermHeaderSteward>",
        ///             termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///         }
        ///     },
        ///     usage = "<AtlasGlossaryUsage>",
        ///     classifications = new[] {
        ///         new {
        ///             attributes = new {
        ///                 key = new {},
        ///             },
        ///             typeName = "<AtlasStructTypeName>",
        ///             lastModifiedTS = "<LastModifiedTS>",
        ///             entityGuid = "<AtlasClassificationEntityGuid>",
        ///             entityStatus = "<ACTIVE>",
        ///             removePropagationsOnEntityDelete = true,
        ///             validityPeriods = new[] {
        ///                 new {
        ///                     endTime = "<TimeBoundaryEndTime>",
        ///                     startTime = "<TimeBoundaryStartTime>",
        ///                     timeZone = "<TimeBoundaryTimeZone>",
        ///                 }
        ///             },
        ///             source = "<AtlasClassificationSource>",
        ///             sourceDetails = new {
        ///                 key = new {},
        ///             },
        ///         }
        ///     },
        ///     longDescription = "<AtlasGlossaryBaseObjectLongDescription>",
        ///     name = "<AtlasGlossaryBaseObjectName>",
        ///     qualifiedName = "<AtlasGlossaryBaseObjectQualifiedName>",
        ///     shortDescription = "<AtlasGlossaryBaseObjectShortDescription>",
        ///     lastModifiedTS = "<LastModifiedTS>",
        ///     guid = "<AtlasBaseModelObjectGuid>",
        ///     categoryInfo = new {
        ///         key = new {
        ///             classifications = new[] {
        ///                 new {
        ///                     attributes = new {
        ///                         key = new {},
        ///                     },
        ///                     typeName = "<AtlasStructTypeName>",
        ///                     lastModifiedTS = "<LastModifiedTS>",
        ///                     entityGuid = "<AtlasClassificationEntityGuid>",
        ///                     entityStatus = "<ACTIVE>",
        ///                     removePropagationsOnEntityDelete = true,
        ///                     validityPeriods = new[] {
        ///                         new {
        ///                             endTime = "<TimeBoundaryEndTime>",
        ///                             startTime = "<TimeBoundaryStartTime>",
        ///                             timeZone = "<TimeBoundaryTimeZone>",
        ///                         }
        ///                     },
        ///                     source = "<AtlasClassificationSource>",
        ///                     sourceDetails = new {
        ///                         key = new {},
        ///                     },
        ///                 }
        ///             },
        ///             longDescription = "<AtlasGlossaryBaseObjectLongDescription>",
        ///             name = "<AtlasGlossaryBaseObjectName>",
        ///             qualifiedName = "<AtlasGlossaryBaseObjectQualifiedName>",
        ///             shortDescription = "<AtlasGlossaryBaseObjectShortDescription>",
        ///             lastModifiedTS = "<LastModifiedTS>",
        ///             guid = "<AtlasBaseModelObjectGuid>",
        ///             anchor = new {
        ///                 displayText = "<AtlasGlossaryHeaderDisplayText>",
        ///                 glossaryGuid = "<AtlasGlossaryHeaderGlossaryGuid>",
        ///                 relationGuid = "<AtlasGlossaryHeaderRelationGuid>",
        ///             },
        ///             childrenCategories = new[] {
        ///                 new {
        ///                     categoryGuid = "<AtlasRelatedCategoryHeaderCategoryGuid>",
        ///                     description = "<AtlasRelatedCategoryHeaderDescription>",
        ///                     displayText = "<AtlasRelatedCategoryHeaderDisplayText>",
        ///                     parentCategoryGuid = "<AtlasRelatedCategoryHeaderParentCategoryGuid>",
        ///                     relationGuid = "<AtlasRelatedCategoryHeaderRelationGuid>",
        ///                 }
        ///             },
        ///             parentCategory = new {
        ///                 categoryGuid = "<AtlasRelatedCategoryHeaderCategoryGuid>",
        ///                 description = "<AtlasRelatedCategoryHeaderDescription>",
        ///                 displayText = "<AtlasRelatedCategoryHeaderDisplayText>",
        ///                 parentCategoryGuid = "<AtlasRelatedCategoryHeaderParentCategoryGuid>",
        ///                 relationGuid = "<AtlasRelatedCategoryHeaderRelationGuid>",
        ///             },
        ///             terms = new[] {
        ///                 new {
        ///                     description = "<AtlasRelatedTermHeaderDescription>",
        ///                     displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                     expression = "<AtlasRelatedTermHeaderExpression>",
        ///                     relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                     source = "<AtlasRelatedTermHeaderSource>",
        ///                     status = "<DRAFT>",
        ///                     steward = "<AtlasRelatedTermHeaderSteward>",
        ///                     termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///                 }
        ///             },
        ///         },
        ///     },
        ///     termInfo = new {
        ///         key = new {
        ///             classifications = new[] {
        ///                 new {
        ///                     attributes = new {
        ///                         key = new {},
        ///                     },
        ///                     typeName = "<AtlasStructTypeName>",
        ///                     lastModifiedTS = "<LastModifiedTS>",
        ///                     entityGuid = "<AtlasClassificationEntityGuid>",
        ///                     entityStatus = "<ACTIVE>",
        ///                     removePropagationsOnEntityDelete = true,
        ///                     validityPeriods = new[] {
        ///                         new {
        ///                             endTime = "<TimeBoundaryEndTime>",
        ///                             startTime = "<TimeBoundaryStartTime>",
        ///                             timeZone = "<TimeBoundaryTimeZone>",
        ///                         }
        ///                     },
        ///                     source = "<AtlasClassificationSource>",
        ///                     sourceDetails = new {
        ///                         key = new {},
        ///                     },
        ///                 }
        ///             },
        ///             longDescription = "<AtlasGlossaryBaseObjectLongDescription>",
        ///             name = "<AtlasGlossaryBaseObjectName>",
        ///             qualifiedName = "<AtlasGlossaryBaseObjectQualifiedName>",
        ///             shortDescription = "<AtlasGlossaryBaseObjectShortDescription>",
        ///             lastModifiedTS = "<LastModifiedTS>",
        ///             guid = "<AtlasBaseModelObjectGuid>",
        ///             abbreviation = "<AtlasGlossaryTermAbbreviation>",
        ///             templateName = new[] {
        ///                 new {}
        ///             },
        ///             anchor = new {
        ///                 displayText = "<AtlasGlossaryHeaderDisplayText>",
        ///                 glossaryGuid = "<AtlasGlossaryHeaderGlossaryGuid>",
        ///                 relationGuid = "<AtlasGlossaryHeaderRelationGuid>",
        ///             },
        ///             antonyms = new[] {
        ///                 new {
        ///                     description = "<AtlasRelatedTermHeaderDescription>",
        ///                     displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                     expression = "<AtlasRelatedTermHeaderExpression>",
        ///                     relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                     source = "<AtlasRelatedTermHeaderSource>",
        ///                     status = "<DRAFT>",
        ///                     steward = "<AtlasRelatedTermHeaderSteward>",
        ///                     termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///                 }
        ///             },
        ///             createTime = 1234,
        ///             createdBy = "<AtlasGlossaryTermCreatedBy>",
        ///             updateTime = 1234,
        ///             updatedBy = "<AtlasGlossaryTermUpdatedBy>",
        ///             status = "<Draft>",
        ///             resources = new[] {
        ///                 new {
        ///                     displayName = "<ResourceLinkDisplayName>",
        ///                     url = "<ResourceLinkUrl>",
        ///                 }
        ///             },
        ///             contacts = new {
        ///                 key = new[] {
        ///                     new {
        ///                         id = "<ContactBasicId>",
        ///                         info = "<ContactBasicInfo>",
        ///                     }
        ///                 },
        ///             },
        ///             attributes = new {
        ///                 key = new {
        ///                     key = new {},
        ///                 },
        ///             },
        ///             assignedEntities = new[] {
        ///                 new {
        ///                     guid = "<AtlasObjectIdGuid>",
        ///                     typeName = "<AtlasObjectIdTypeName>",
        ///                     uniqueAttributes = new {
        ///                         key = new {},
        ///                     },
        ///                     displayText = "<AtlasRelatedObjectIdDisplayText>",
        ///                     entityStatus = "<ACTIVE>",
        ///                     relationshipType = "<AtlasRelatedObjectIdRelationshipType>",
        ///                     relationshipAttributes = new {
        ///                         attributes = new {
        ///                             key = new {},
        ///                         },
        ///                         typeName = "<AtlasStructTypeName>",
        ///                         lastModifiedTS = "<LastModifiedTS>",
        ///                         entityGuid = "<AtlasClassificationEntityGuid>",
        ///                         entityStatus = "<ACTIVE>",
        ///                         removePropagationsOnEntityDelete = true,
        ///                         validityPeriods = new[] {
        ///                             new {
        ///                                 endTime = "<TimeBoundaryEndTime>",
        ///                                 startTime = "<TimeBoundaryStartTime>",
        ///                                 timeZone = "<TimeBoundaryTimeZone>",
        ///                             }
        ///                         },
        ///                         source = "<AtlasClassificationSource>",
        ///                         sourceDetails = new {
        ///                             key = new {},
        ///                         },
        ///                     },
        ///                     relationshipGuid = "<AtlasRelatedObjectIdRelationshipGuid>",
        ///                     relationshipStatus = "<ACTIVE>",
        ///                 }
        ///             },
        ///             categories = new[] {
        ///                 new {
        ///                     categoryGuid = "<AtlasTermCategorizationHeaderCategoryGuid>",
        ///                     description = "<AtlasTermCategorizationHeaderDescription>",
        ///                     displayText = "<AtlasTermCategorizationHeaderDisplayText>",
        ///                     relationGuid = "<AtlasTermCategorizationHeaderRelationGuid>",
        ///                     status = "<DRAFT>",
        ///                 }
        ///             },
        ///             classifies = new[] {
        ///                 new {
        ///                     description = "<AtlasRelatedTermHeaderDescription>",
        ///                     displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                     expression = "<AtlasRelatedTermHeaderExpression>",
        ///                     relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                     source = "<AtlasRelatedTermHeaderSource>",
        ///                     status = "<DRAFT>",
        ///                     steward = "<AtlasRelatedTermHeaderSteward>",
        ///                     termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///                 }
        ///             },
        ///             examples = new[] {
        ///                 "<AtlasGlossaryTermExamplesItem>"
        ///             },
        ///             isA = new[] {
        ///                 new {
        ///                     description = "<AtlasRelatedTermHeaderDescription>",
        ///                     displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                     expression = "<AtlasRelatedTermHeaderExpression>",
        ///                     relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                     source = "<AtlasRelatedTermHeaderSource>",
        ///                     status = "<DRAFT>",
        ///                     steward = "<AtlasRelatedTermHeaderSteward>",
        ///                     termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///                 }
        ///             },
        ///             preferredTerms = new[] {
        ///                 new {
        ///                     description = "<AtlasRelatedTermHeaderDescription>",
        ///                     displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                     expression = "<AtlasRelatedTermHeaderExpression>",
        ///                     relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                     source = "<AtlasRelatedTermHeaderSource>",
        ///                     status = "<DRAFT>",
        ///                     steward = "<AtlasRelatedTermHeaderSteward>",
        ///                     termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///                 }
        ///             },
        ///             preferredToTerms = new[] {
        ///                 new {
        ///                     description = "<AtlasRelatedTermHeaderDescription>",
        ///                     displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                     expression = "<AtlasRelatedTermHeaderExpression>",
        ///                     relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                     source = "<AtlasRelatedTermHeaderSource>",
        ///                     status = "<DRAFT>",
        ///                     steward = "<AtlasRelatedTermHeaderSteward>",
        ///                     termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///                 }
        ///             },
        ///             replacedBy = new[] {
        ///                 new {
        ///                     description = "<AtlasRelatedTermHeaderDescription>",
        ///                     displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                     expression = "<AtlasRelatedTermHeaderExpression>",
        ///                     relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                     source = "<AtlasRelatedTermHeaderSource>",
        ///                     status = "<DRAFT>",
        ///                     steward = "<AtlasRelatedTermHeaderSteward>",
        ///                     termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///                 }
        ///             },
        ///             replacementTerms = new[] {
        ///                 new {
        ///                     description = "<AtlasRelatedTermHeaderDescription>",
        ///                     displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                     expression = "<AtlasRelatedTermHeaderExpression>",
        ///                     relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                     source = "<AtlasRelatedTermHeaderSource>",
        ///                     status = "<DRAFT>",
        ///                     steward = "<AtlasRelatedTermHeaderSteward>",
        ///                     termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///                 }
        ///             },
        ///             seeAlso = new[] {
        ///                 new {
        ///                     description = "<AtlasRelatedTermHeaderDescription>",
        ///                     displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                     expression = "<AtlasRelatedTermHeaderExpression>",
        ///                     relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                     source = "<AtlasRelatedTermHeaderSource>",
        ///                     status = "<DRAFT>",
        ///                     steward = "<AtlasRelatedTermHeaderSteward>",
        ///                     termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///                 }
        ///             },
        ///             synonyms = new[] {
        ///                 new {
        ///                     description = "<AtlasRelatedTermHeaderDescription>",
        ///                     displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                     expression = "<AtlasRelatedTermHeaderExpression>",
        ///                     relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                     source = "<AtlasRelatedTermHeaderSource>",
        ///                     status = "<DRAFT>",
        ///                     steward = "<AtlasRelatedTermHeaderSteward>",
        ///                     termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///                 }
        ///             },
        ///             translatedTerms = new[] {
        ///                 new {
        ///                     description = "<AtlasRelatedTermHeaderDescription>",
        ///                     displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                     expression = "<AtlasRelatedTermHeaderExpression>",
        ///                     relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                     source = "<AtlasRelatedTermHeaderSource>",
        ///                     status = "<DRAFT>",
        ///                     steward = "<AtlasRelatedTermHeaderSteward>",
        ///                     termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///                 }
        ///             },
        ///             translationTerms = new[] {
        ///                 new {
        ///                     description = "<AtlasRelatedTermHeaderDescription>",
        ///                     displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                     expression = "<AtlasRelatedTermHeaderExpression>",
        ///                     relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                     source = "<AtlasRelatedTermHeaderSource>",
        ///                     status = "<DRAFT>",
        ///                     steward = "<AtlasRelatedTermHeaderSteward>",
        ///                     termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///                 }
        ///             },
        ///             usage = "<AtlasGlossaryTermUsage>",
        ///             validValues = new[] {
        ///                 new {
        ///                     description = "<AtlasRelatedTermHeaderDescription>",
        ///                     displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                     expression = "<AtlasRelatedTermHeaderExpression>",
        ///                     relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                     source = "<AtlasRelatedTermHeaderSource>",
        ///                     status = "<DRAFT>",
        ///                     steward = "<AtlasRelatedTermHeaderSteward>",
        ///                     termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///                 }
        ///             },
        ///             validValuesFor = new[] {
        ///                 new {
        ///                     description = "<AtlasRelatedTermHeaderDescription>",
        ///                     displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                     expression = "<AtlasRelatedTermHeaderExpression>",
        ///                     relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                     source = "<AtlasRelatedTermHeaderSource>",
        ///                     status = "<DRAFT>",
        ///                     steward = "<AtlasRelatedTermHeaderSteward>",
        ///                     termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///                 }
        ///             },
        ///         },
        ///     },
        /// };
        /// 
        /// Response response = client.CreateGlossary(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("longDescription").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("qualifiedName").ToString());
        /// Console.WriteLine(result.GetProperty("shortDescription").ToString());
        /// Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("language").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("usage").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// <details><summary>AtlasGlossaryExtInfo</summary>Schema for <c>AtlasGlossaryExtInfo</c>:
        /// <code>{
        ///   categories: [
        ///     {
        ///       categoryGuid: string, # Optional. The GUID of the category.
        ///       description: string, # Optional. The description of the category header.
        ///       displayText: string, # Optional. The display text.
        ///       parentCategoryGuid: string, # Optional. The GUID of the parent category.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///     }
        ///   ], # Optional. An array of categories.
        ///   language: string, # Optional. The language of the glossary.
        ///   terms: [
        ///     {
        ///       description: string, # Optional. The description of the related term.
        ///       displayText: string, # Optional. The display text.
        ///       expression: string, # Optional. The expression of the term.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       source: string, # Optional. The source of the term.
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///       steward: string, # Optional. The steward of the term.
        ///       termGuid: string, # Optional. The GUID of the term.
        ///     }
        ///   ], # Optional. An array of related term headers.
        ///   usage: string, # Optional. The usage of the glossary.
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       entityGuid: string, # Optional. The GUID of the entity.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. The end of the time boundary.
        ///           startTime: string, # Optional. The start of the time boundary.
        ///           timeZone: string, # Optional. The timezone of the time boundary.
        ///         }
        ///       ], # Optional. An array of time boundaries indicating validity periods.
        ///       source: string, # Optional. indicate the source who create the classification detail
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///     }
        ///   ], # Optional. An array of classifications.
        ///   longDescription: string, # Optional. The long version description.
        ///   name: string, # Optional. The name of the glossary object.
        ///   qualifiedName: string, # Optional. The qualified name of the glossary object.
        ///   shortDescription: string, # Optional. The short version of description.
        ///   lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///   guid: string, # Optional. The GUID of the object.
        ///   categoryInfo: Dictionary&lt;string, AtlasGlossaryCategory&gt;, # Optional. The glossary category information.
        ///   termInfo: Dictionary&lt;string, AtlasGlossaryTerm&gt;, # Optional. The glossary term information.
        /// }
        /// </code>
        /// </details>
        /// 
        /// Response Body:
        /// 
        /// <details><summary>AtlasGlossaryExtInfo</summary>Schema for <c>AtlasGlossaryExtInfo</c>:
        /// <code>{
        ///   categories: [
        ///     {
        ///       categoryGuid: string, # Optional. The GUID of the category.
        ///       description: string, # Optional. The description of the category header.
        ///       displayText: string, # Optional. The display text.
        ///       parentCategoryGuid: string, # Optional. The GUID of the parent category.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///     }
        ///   ], # Optional. An array of categories.
        ///   language: string, # Optional. The language of the glossary.
        ///   terms: [
        ///     {
        ///       description: string, # Optional. The description of the related term.
        ///       displayText: string, # Optional. The display text.
        ///       expression: string, # Optional. The expression of the term.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       source: string, # Optional. The source of the term.
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///       steward: string, # Optional. The steward of the term.
        ///       termGuid: string, # Optional. The GUID of the term.
        ///     }
        ///   ], # Optional. An array of related term headers.
        ///   usage: string, # Optional. The usage of the glossary.
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       entityGuid: string, # Optional. The GUID of the entity.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. The end of the time boundary.
        ///           startTime: string, # Optional. The start of the time boundary.
        ///           timeZone: string, # Optional. The timezone of the time boundary.
        ///         }
        ///       ], # Optional. An array of time boundaries indicating validity periods.
        ///       source: string, # Optional. indicate the source who create the classification detail
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///     }
        ///   ], # Optional. An array of classifications.
        ///   longDescription: string, # Optional. The long version description.
        ///   name: string, # Optional. The name of the glossary object.
        ///   qualifiedName: string, # Optional. The qualified name of the glossary object.
        ///   shortDescription: string, # Optional. The short version of description.
        ///   lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///   guid: string, # Optional. The GUID of the object.
        ///   categoryInfo: Dictionary&lt;string, AtlasGlossaryCategory&gt;, # Optional. The glossary category information.
        ///   termInfo: Dictionary&lt;string, AtlasGlossaryTerm&gt;, # Optional. The glossary term information.
        /// }
        /// </code>
        /// </details>
        /// 
        /// </remarks>
        public virtual Response CreateGlossary(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.CreateGlossary");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateGlossaryRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create glossary category in bulk. </summary>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call CreateGlossaryCategoriesAsync with required request content and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// var data = new[] {
        ///     new {
        ///         classifications = new[] {
        ///             new {
        ///                 attributes = new {
        ///                     key = new {},
        ///                 },
        ///                 typeName = "<AtlasStructTypeName>",
        ///                 lastModifiedTS = "<LastModifiedTS>",
        ///                 entityGuid = "<AtlasClassificationEntityGuid>",
        ///                 entityStatus = "<ACTIVE>",
        ///                 removePropagationsOnEntityDelete = true,
        ///                 validityPeriods = new[] {
        ///                     new {
        ///                         endTime = "<TimeBoundaryEndTime>",
        ///                         startTime = "<TimeBoundaryStartTime>",
        ///                         timeZone = "<TimeBoundaryTimeZone>",
        ///                     }
        ///                 },
        ///                 source = "<AtlasClassificationSource>",
        ///                 sourceDetails = new {
        ///                     key = new {},
        ///                 },
        ///             }
        ///         },
        ///         longDescription = "<AtlasGlossaryBaseObjectLongDescription>",
        ///         name = "<AtlasGlossaryBaseObjectName>",
        ///         qualifiedName = "<AtlasGlossaryBaseObjectQualifiedName>",
        ///         shortDescription = "<AtlasGlossaryBaseObjectShortDescription>",
        ///         lastModifiedTS = "<LastModifiedTS>",
        ///         guid = "<AtlasBaseModelObjectGuid>",
        ///         anchor = new {
        ///             displayText = "<AtlasGlossaryHeaderDisplayText>",
        ///             glossaryGuid = "<AtlasGlossaryHeaderGlossaryGuid>",
        ///             relationGuid = "<AtlasGlossaryHeaderRelationGuid>",
        ///         },
        ///         childrenCategories = new[] {
        ///             new {
        ///                 categoryGuid = "<AtlasRelatedCategoryHeaderCategoryGuid>",
        ///                 description = "<AtlasRelatedCategoryHeaderDescription>",
        ///                 displayText = "<AtlasRelatedCategoryHeaderDisplayText>",
        ///                 parentCategoryGuid = "<AtlasRelatedCategoryHeaderParentCategoryGuid>",
        ///                 relationGuid = "<AtlasRelatedCategoryHeaderRelationGuid>",
        ///             }
        ///         },
        ///         parentCategory = new {
        ///             categoryGuid = "<AtlasRelatedCategoryHeaderCategoryGuid>",
        ///             description = "<AtlasRelatedCategoryHeaderDescription>",
        ///             displayText = "<AtlasRelatedCategoryHeaderDisplayText>",
        ///             parentCategoryGuid = "<AtlasRelatedCategoryHeaderParentCategoryGuid>",
        ///             relationGuid = "<AtlasRelatedCategoryHeaderRelationGuid>",
        ///         },
        ///         terms = new[] {
        ///             new {
        ///                 description = "<AtlasRelatedTermHeaderDescription>",
        ///                 displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                 expression = "<AtlasRelatedTermHeaderExpression>",
        ///                 relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                 source = "<AtlasRelatedTermHeaderSource>",
        ///                 status = "<DRAFT>",
        ///                 steward = "<AtlasRelatedTermHeaderSteward>",
        ///                 termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///             }
        ///         },
        ///     }
        /// };
        /// 
        /// Response response = await client.CreateGlossaryCategoriesAsync(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result[0].GetProperty("longDescription").ToString());
        /// Console.WriteLine(result[0].GetProperty("name").ToString());
        /// Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
        /// Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
        /// Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result[0].GetProperty("anchor").GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("anchor").GetProperty("glossaryGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("anchor").GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("termGuid").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>ArrayOfAtlasGlossaryCategory</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       entityGuid: string, # Optional. The GUID of the entity.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. The end of the time boundary.
        ///           startTime: string, # Optional. The start of the time boundary.
        ///           timeZone: string, # Optional. The timezone of the time boundary.
        ///         }
        ///       ], # Optional. An array of time boundaries indicating validity periods.
        ///       source: string, # Optional. indicate the source who create the classification detail
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///     }
        ///   ], # Optional. An array of classifications.
        ///   longDescription: string, # Optional. The long version description.
        ///   name: string, # Optional. The name of the glossary object.
        ///   qualifiedName: string, # Optional. The qualified name of the glossary object.
        ///   shortDescription: string, # Optional. The short version of description.
        ///   lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///   guid: string, # Optional. The GUID of the object.
        ///   anchor: {
        ///     displayText: string, # Optional. The display text.
        ///     glossaryGuid: string, # Optional. The GUID of the glossary.
        ///     relationGuid: string, # Optional. The GUID of the relationship.
        ///   }, # Optional. The glossary header with basic information.
        ///   childrenCategories: [
        ///     {
        ///       categoryGuid: string, # Optional. The GUID of the category.
        ///       description: string, # Optional. The description of the category header.
        ///       displayText: string, # Optional. The display text.
        ///       parentCategoryGuid: string, # Optional. The GUID of the parent category.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///     }
        ///   ], # Optional. An array of children categories.
        ///   parentCategory: AtlasRelatedCategoryHeader, # Optional. The header of the related category.
        ///   terms: [
        ///     {
        ///       description: string, # Optional. The description of the related term.
        ///       displayText: string, # Optional. The display text.
        ///       expression: string, # Optional. The expression of the term.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       source: string, # Optional. The source of the term.
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///       steward: string, # Optional. The steward of the term.
        ///       termGuid: string, # Optional. The GUID of the term.
        ///     }
        ///   ], # Optional. An array of related term headers.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ArrayOfAtlasGlossaryCategory</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       entityGuid: string, # Optional. The GUID of the entity.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. The end of the time boundary.
        ///           startTime: string, # Optional. The start of the time boundary.
        ///           timeZone: string, # Optional. The timezone of the time boundary.
        ///         }
        ///       ], # Optional. An array of time boundaries indicating validity periods.
        ///       source: string, # Optional. indicate the source who create the classification detail
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///     }
        ///   ], # Optional. An array of classifications.
        ///   longDescription: string, # Optional. The long version description.
        ///   name: string, # Optional. The name of the glossary object.
        ///   qualifiedName: string, # Optional. The qualified name of the glossary object.
        ///   shortDescription: string, # Optional. The short version of description.
        ///   lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///   guid: string, # Optional. The GUID of the object.
        ///   anchor: {
        ///     displayText: string, # Optional. The display text.
        ///     glossaryGuid: string, # Optional. The GUID of the glossary.
        ///     relationGuid: string, # Optional. The GUID of the relationship.
        ///   }, # Optional. The glossary header with basic information.
        ///   childrenCategories: [
        ///     {
        ///       categoryGuid: string, # Optional. The GUID of the category.
        ///       description: string, # Optional. The description of the category header.
        ///       displayText: string, # Optional. The display text.
        ///       parentCategoryGuid: string, # Optional. The GUID of the parent category.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///     }
        ///   ], # Optional. An array of children categories.
        ///   parentCategory: AtlasRelatedCategoryHeader, # Optional. The header of the related category.
        ///   terms: [
        ///     {
        ///       description: string, # Optional. The description of the related term.
        ///       displayText: string, # Optional. The display text.
        ///       expression: string, # Optional. The expression of the term.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       source: string, # Optional. The source of the term.
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///       steward: string, # Optional. The steward of the term.
        ///       termGuid: string, # Optional. The GUID of the term.
        ///     }
        ///   ], # Optional. An array of related term headers.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> CreateGlossaryCategoriesAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.CreateGlossaryCategories");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateGlossaryCategoriesRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create glossary category in bulk. </summary>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call CreateGlossaryCategories with required request content and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// var data = new[] {
        ///     new {
        ///         classifications = new[] {
        ///             new {
        ///                 attributes = new {
        ///                     key = new {},
        ///                 },
        ///                 typeName = "<AtlasStructTypeName>",
        ///                 lastModifiedTS = "<LastModifiedTS>",
        ///                 entityGuid = "<AtlasClassificationEntityGuid>",
        ///                 entityStatus = "<ACTIVE>",
        ///                 removePropagationsOnEntityDelete = true,
        ///                 validityPeriods = new[] {
        ///                     new {
        ///                         endTime = "<TimeBoundaryEndTime>",
        ///                         startTime = "<TimeBoundaryStartTime>",
        ///                         timeZone = "<TimeBoundaryTimeZone>",
        ///                     }
        ///                 },
        ///                 source = "<AtlasClassificationSource>",
        ///                 sourceDetails = new {
        ///                     key = new {},
        ///                 },
        ///             }
        ///         },
        ///         longDescription = "<AtlasGlossaryBaseObjectLongDescription>",
        ///         name = "<AtlasGlossaryBaseObjectName>",
        ///         qualifiedName = "<AtlasGlossaryBaseObjectQualifiedName>",
        ///         shortDescription = "<AtlasGlossaryBaseObjectShortDescription>",
        ///         lastModifiedTS = "<LastModifiedTS>",
        ///         guid = "<AtlasBaseModelObjectGuid>",
        ///         anchor = new {
        ///             displayText = "<AtlasGlossaryHeaderDisplayText>",
        ///             glossaryGuid = "<AtlasGlossaryHeaderGlossaryGuid>",
        ///             relationGuid = "<AtlasGlossaryHeaderRelationGuid>",
        ///         },
        ///         childrenCategories = new[] {
        ///             new {
        ///                 categoryGuid = "<AtlasRelatedCategoryHeaderCategoryGuid>",
        ///                 description = "<AtlasRelatedCategoryHeaderDescription>",
        ///                 displayText = "<AtlasRelatedCategoryHeaderDisplayText>",
        ///                 parentCategoryGuid = "<AtlasRelatedCategoryHeaderParentCategoryGuid>",
        ///                 relationGuid = "<AtlasRelatedCategoryHeaderRelationGuid>",
        ///             }
        ///         },
        ///         parentCategory = new {
        ///             categoryGuid = "<AtlasRelatedCategoryHeaderCategoryGuid>",
        ///             description = "<AtlasRelatedCategoryHeaderDescription>",
        ///             displayText = "<AtlasRelatedCategoryHeaderDisplayText>",
        ///             parentCategoryGuid = "<AtlasRelatedCategoryHeaderParentCategoryGuid>",
        ///             relationGuid = "<AtlasRelatedCategoryHeaderRelationGuid>",
        ///         },
        ///         terms = new[] {
        ///             new {
        ///                 description = "<AtlasRelatedTermHeaderDescription>",
        ///                 displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                 expression = "<AtlasRelatedTermHeaderExpression>",
        ///                 relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                 source = "<AtlasRelatedTermHeaderSource>",
        ///                 status = "<DRAFT>",
        ///                 steward = "<AtlasRelatedTermHeaderSteward>",
        ///                 termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///             }
        ///         },
        ///     }
        /// };
        /// 
        /// Response response = client.CreateGlossaryCategories(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result[0].GetProperty("longDescription").ToString());
        /// Console.WriteLine(result[0].GetProperty("name").ToString());
        /// Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
        /// Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
        /// Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result[0].GetProperty("anchor").GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("anchor").GetProperty("glossaryGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("anchor").GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("termGuid").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>ArrayOfAtlasGlossaryCategory</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       entityGuid: string, # Optional. The GUID of the entity.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. The end of the time boundary.
        ///           startTime: string, # Optional. The start of the time boundary.
        ///           timeZone: string, # Optional. The timezone of the time boundary.
        ///         }
        ///       ], # Optional. An array of time boundaries indicating validity periods.
        ///       source: string, # Optional. indicate the source who create the classification detail
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///     }
        ///   ], # Optional. An array of classifications.
        ///   longDescription: string, # Optional. The long version description.
        ///   name: string, # Optional. The name of the glossary object.
        ///   qualifiedName: string, # Optional. The qualified name of the glossary object.
        ///   shortDescription: string, # Optional. The short version of description.
        ///   lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///   guid: string, # Optional. The GUID of the object.
        ///   anchor: {
        ///     displayText: string, # Optional. The display text.
        ///     glossaryGuid: string, # Optional. The GUID of the glossary.
        ///     relationGuid: string, # Optional. The GUID of the relationship.
        ///   }, # Optional. The glossary header with basic information.
        ///   childrenCategories: [
        ///     {
        ///       categoryGuid: string, # Optional. The GUID of the category.
        ///       description: string, # Optional. The description of the category header.
        ///       displayText: string, # Optional. The display text.
        ///       parentCategoryGuid: string, # Optional. The GUID of the parent category.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///     }
        ///   ], # Optional. An array of children categories.
        ///   parentCategory: AtlasRelatedCategoryHeader, # Optional. The header of the related category.
        ///   terms: [
        ///     {
        ///       description: string, # Optional. The description of the related term.
        ///       displayText: string, # Optional. The display text.
        ///       expression: string, # Optional. The expression of the term.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       source: string, # Optional. The source of the term.
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///       steward: string, # Optional. The steward of the term.
        ///       termGuid: string, # Optional. The GUID of the term.
        ///     }
        ///   ], # Optional. An array of related term headers.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ArrayOfAtlasGlossaryCategory</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       entityGuid: string, # Optional. The GUID of the entity.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. The end of the time boundary.
        ///           startTime: string, # Optional. The start of the time boundary.
        ///           timeZone: string, # Optional. The timezone of the time boundary.
        ///         }
        ///       ], # Optional. An array of time boundaries indicating validity periods.
        ///       source: string, # Optional. indicate the source who create the classification detail
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///     }
        ///   ], # Optional. An array of classifications.
        ///   longDescription: string, # Optional. The long version description.
        ///   name: string, # Optional. The name of the glossary object.
        ///   qualifiedName: string, # Optional. The qualified name of the glossary object.
        ///   shortDescription: string, # Optional. The short version of description.
        ///   lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///   guid: string, # Optional. The GUID of the object.
        ///   anchor: {
        ///     displayText: string, # Optional. The display text.
        ///     glossaryGuid: string, # Optional. The GUID of the glossary.
        ///     relationGuid: string, # Optional. The GUID of the relationship.
        ///   }, # Optional. The glossary header with basic information.
        ///   childrenCategories: [
        ///     {
        ///       categoryGuid: string, # Optional. The GUID of the category.
        ///       description: string, # Optional. The description of the category header.
        ///       displayText: string, # Optional. The display text.
        ///       parentCategoryGuid: string, # Optional. The GUID of the parent category.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///     }
        ///   ], # Optional. An array of children categories.
        ///   parentCategory: AtlasRelatedCategoryHeader, # Optional. The header of the related category.
        ///   terms: [
        ///     {
        ///       description: string, # Optional. The description of the related term.
        ///       displayText: string, # Optional. The display text.
        ///       expression: string, # Optional. The expression of the term.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       source: string, # Optional. The source of the term.
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///       steward: string, # Optional. The steward of the term.
        ///       termGuid: string, # Optional. The GUID of the term.
        ///     }
        ///   ], # Optional. An array of related term headers.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response CreateGlossaryCategories(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.CreateGlossaryCategories");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateGlossaryCategoriesRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a glossary category. </summary>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call CreateGlossaryCategoryAsync and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.CreateGlossaryCategoryAsync(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call CreateGlossaryCategoryAsync with all request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// var data = new {
        ///     classifications = new[] {
        ///         new {
        ///             attributes = new {
        ///                 key = new {},
        ///             },
        ///             typeName = "<AtlasStructTypeName>",
        ///             lastModifiedTS = "<LastModifiedTS>",
        ///             entityGuid = "<AtlasClassificationEntityGuid>",
        ///             entityStatus = "<ACTIVE>",
        ///             removePropagationsOnEntityDelete = true,
        ///             validityPeriods = new[] {
        ///                 new {
        ///                     endTime = "<TimeBoundaryEndTime>",
        ///                     startTime = "<TimeBoundaryStartTime>",
        ///                     timeZone = "<TimeBoundaryTimeZone>",
        ///                 }
        ///             },
        ///             source = "<AtlasClassificationSource>",
        ///             sourceDetails = new {
        ///                 key = new {},
        ///             },
        ///         }
        ///     },
        ///     longDescription = "<AtlasGlossaryBaseObjectLongDescription>",
        ///     name = "<AtlasGlossaryBaseObjectName>",
        ///     qualifiedName = "<AtlasGlossaryBaseObjectQualifiedName>",
        ///     shortDescription = "<AtlasGlossaryBaseObjectShortDescription>",
        ///     lastModifiedTS = "<LastModifiedTS>",
        ///     guid = "<AtlasBaseModelObjectGuid>",
        ///     anchor = new {
        ///         displayText = "<AtlasGlossaryHeaderDisplayText>",
        ///         glossaryGuid = "<AtlasGlossaryHeaderGlossaryGuid>",
        ///         relationGuid = "<AtlasGlossaryHeaderRelationGuid>",
        ///     },
        ///     childrenCategories = new[] {
        ///         new {
        ///             categoryGuid = "<AtlasRelatedCategoryHeaderCategoryGuid>",
        ///             description = "<AtlasRelatedCategoryHeaderDescription>",
        ///             displayText = "<AtlasRelatedCategoryHeaderDisplayText>",
        ///             parentCategoryGuid = "<AtlasRelatedCategoryHeaderParentCategoryGuid>",
        ///             relationGuid = "<AtlasRelatedCategoryHeaderRelationGuid>",
        ///         }
        ///     },
        ///     parentCategory = new {
        ///         categoryGuid = "<AtlasRelatedCategoryHeaderCategoryGuid>",
        ///         description = "<AtlasRelatedCategoryHeaderDescription>",
        ///         displayText = "<AtlasRelatedCategoryHeaderDisplayText>",
        ///         parentCategoryGuid = "<AtlasRelatedCategoryHeaderParentCategoryGuid>",
        ///         relationGuid = "<AtlasRelatedCategoryHeaderRelationGuid>",
        ///     },
        ///     terms = new[] {
        ///         new {
        ///             description = "<AtlasRelatedTermHeaderDescription>",
        ///             displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///             expression = "<AtlasRelatedTermHeaderExpression>",
        ///             relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///             source = "<AtlasRelatedTermHeaderSource>",
        ///             status = "<DRAFT>",
        ///             steward = "<AtlasRelatedTermHeaderSteward>",
        ///             termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///         }
        ///     },
        /// };
        /// 
        /// Response response = await client.CreateGlossaryCategoryAsync(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("longDescription").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("qualifiedName").ToString());
        /// Console.WriteLine(result.GetProperty("shortDescription").ToString());
        /// Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("parentCategory").GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("parentCategory").GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("parentCategory").GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>AtlasGlossaryCategory</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       entityGuid: string, # Optional. The GUID of the entity.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. The end of the time boundary.
        ///           startTime: string, # Optional. The start of the time boundary.
        ///           timeZone: string, # Optional. The timezone of the time boundary.
        ///         }
        ///       ], # Optional. An array of time boundaries indicating validity periods.
        ///       source: string, # Optional. indicate the source who create the classification detail
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///     }
        ///   ], # Optional. An array of classifications.
        ///   longDescription: string, # Optional. The long version description.
        ///   name: string, # Optional. The name of the glossary object.
        ///   qualifiedName: string, # Optional. The qualified name of the glossary object.
        ///   shortDescription: string, # Optional. The short version of description.
        ///   lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///   guid: string, # Optional. The GUID of the object.
        ///   anchor: {
        ///     displayText: string, # Optional. The display text.
        ///     glossaryGuid: string, # Optional. The GUID of the glossary.
        ///     relationGuid: string, # Optional. The GUID of the relationship.
        ///   }, # Optional. The glossary header with basic information.
        ///   childrenCategories: [
        ///     {
        ///       categoryGuid: string, # Optional. The GUID of the category.
        ///       description: string, # Optional. The description of the category header.
        ///       displayText: string, # Optional. The display text.
        ///       parentCategoryGuid: string, # Optional. The GUID of the parent category.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///     }
        ///   ], # Optional. An array of children categories.
        ///   parentCategory: AtlasRelatedCategoryHeader, # Optional. The header of the related category.
        ///   terms: [
        ///     {
        ///       description: string, # Optional. The description of the related term.
        ///       displayText: string, # Optional. The display text.
        ///       expression: string, # Optional. The expression of the term.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       source: string, # Optional. The source of the term.
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///       steward: string, # Optional. The steward of the term.
        ///       termGuid: string, # Optional. The GUID of the term.
        ///     }
        ///   ], # Optional. An array of related term headers.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>AtlasGlossaryCategory</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       entityGuid: string, # Optional. The GUID of the entity.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. The end of the time boundary.
        ///           startTime: string, # Optional. The start of the time boundary.
        ///           timeZone: string, # Optional. The timezone of the time boundary.
        ///         }
        ///       ], # Optional. An array of time boundaries indicating validity periods.
        ///       source: string, # Optional. indicate the source who create the classification detail
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///     }
        ///   ], # Optional. An array of classifications.
        ///   longDescription: string, # Optional. The long version description.
        ///   name: string, # Optional. The name of the glossary object.
        ///   qualifiedName: string, # Optional. The qualified name of the glossary object.
        ///   shortDescription: string, # Optional. The short version of description.
        ///   lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///   guid: string, # Optional. The GUID of the object.
        ///   anchor: {
        ///     displayText: string, # Optional. The display text.
        ///     glossaryGuid: string, # Optional. The GUID of the glossary.
        ///     relationGuid: string, # Optional. The GUID of the relationship.
        ///   }, # Optional. The glossary header with basic information.
        ///   childrenCategories: [
        ///     {
        ///       categoryGuid: string, # Optional. The GUID of the category.
        ///       description: string, # Optional. The description of the category header.
        ///       displayText: string, # Optional. The display text.
        ///       parentCategoryGuid: string, # Optional. The GUID of the parent category.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///     }
        ///   ], # Optional. An array of children categories.
        ///   parentCategory: AtlasRelatedCategoryHeader, # Optional. The header of the related category.
        ///   terms: [
        ///     {
        ///       description: string, # Optional. The description of the related term.
        ///       displayText: string, # Optional. The display text.
        ///       expression: string, # Optional. The expression of the term.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       source: string, # Optional. The source of the term.
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///       steward: string, # Optional. The steward of the term.
        ///       termGuid: string, # Optional. The GUID of the term.
        ///     }
        ///   ], # Optional. An array of related term headers.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> CreateGlossaryCategoryAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.CreateGlossaryCategory");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateGlossaryCategoryRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a glossary category. </summary>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call CreateGlossaryCategory and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.CreateGlossaryCategory(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call CreateGlossaryCategory with all request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// var data = new {
        ///     classifications = new[] {
        ///         new {
        ///             attributes = new {
        ///                 key = new {},
        ///             },
        ///             typeName = "<AtlasStructTypeName>",
        ///             lastModifiedTS = "<LastModifiedTS>",
        ///             entityGuid = "<AtlasClassificationEntityGuid>",
        ///             entityStatus = "<ACTIVE>",
        ///             removePropagationsOnEntityDelete = true,
        ///             validityPeriods = new[] {
        ///                 new {
        ///                     endTime = "<TimeBoundaryEndTime>",
        ///                     startTime = "<TimeBoundaryStartTime>",
        ///                     timeZone = "<TimeBoundaryTimeZone>",
        ///                 }
        ///             },
        ///             source = "<AtlasClassificationSource>",
        ///             sourceDetails = new {
        ///                 key = new {},
        ///             },
        ///         }
        ///     },
        ///     longDescription = "<AtlasGlossaryBaseObjectLongDescription>",
        ///     name = "<AtlasGlossaryBaseObjectName>",
        ///     qualifiedName = "<AtlasGlossaryBaseObjectQualifiedName>",
        ///     shortDescription = "<AtlasGlossaryBaseObjectShortDescription>",
        ///     lastModifiedTS = "<LastModifiedTS>",
        ///     guid = "<AtlasBaseModelObjectGuid>",
        ///     anchor = new {
        ///         displayText = "<AtlasGlossaryHeaderDisplayText>",
        ///         glossaryGuid = "<AtlasGlossaryHeaderGlossaryGuid>",
        ///         relationGuid = "<AtlasGlossaryHeaderRelationGuid>",
        ///     },
        ///     childrenCategories = new[] {
        ///         new {
        ///             categoryGuid = "<AtlasRelatedCategoryHeaderCategoryGuid>",
        ///             description = "<AtlasRelatedCategoryHeaderDescription>",
        ///             displayText = "<AtlasRelatedCategoryHeaderDisplayText>",
        ///             parentCategoryGuid = "<AtlasRelatedCategoryHeaderParentCategoryGuid>",
        ///             relationGuid = "<AtlasRelatedCategoryHeaderRelationGuid>",
        ///         }
        ///     },
        ///     parentCategory = new {
        ///         categoryGuid = "<AtlasRelatedCategoryHeaderCategoryGuid>",
        ///         description = "<AtlasRelatedCategoryHeaderDescription>",
        ///         displayText = "<AtlasRelatedCategoryHeaderDisplayText>",
        ///         parentCategoryGuid = "<AtlasRelatedCategoryHeaderParentCategoryGuid>",
        ///         relationGuid = "<AtlasRelatedCategoryHeaderRelationGuid>",
        ///     },
        ///     terms = new[] {
        ///         new {
        ///             description = "<AtlasRelatedTermHeaderDescription>",
        ///             displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///             expression = "<AtlasRelatedTermHeaderExpression>",
        ///             relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///             source = "<AtlasRelatedTermHeaderSource>",
        ///             status = "<DRAFT>",
        ///             steward = "<AtlasRelatedTermHeaderSteward>",
        ///             termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///         }
        ///     },
        /// };
        /// 
        /// Response response = client.CreateGlossaryCategory(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("longDescription").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("qualifiedName").ToString());
        /// Console.WriteLine(result.GetProperty("shortDescription").ToString());
        /// Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("parentCategory").GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("parentCategory").GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("parentCategory").GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>AtlasGlossaryCategory</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       entityGuid: string, # Optional. The GUID of the entity.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. The end of the time boundary.
        ///           startTime: string, # Optional. The start of the time boundary.
        ///           timeZone: string, # Optional. The timezone of the time boundary.
        ///         }
        ///       ], # Optional. An array of time boundaries indicating validity periods.
        ///       source: string, # Optional. indicate the source who create the classification detail
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///     }
        ///   ], # Optional. An array of classifications.
        ///   longDescription: string, # Optional. The long version description.
        ///   name: string, # Optional. The name of the glossary object.
        ///   qualifiedName: string, # Optional. The qualified name of the glossary object.
        ///   shortDescription: string, # Optional. The short version of description.
        ///   lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///   guid: string, # Optional. The GUID of the object.
        ///   anchor: {
        ///     displayText: string, # Optional. The display text.
        ///     glossaryGuid: string, # Optional. The GUID of the glossary.
        ///     relationGuid: string, # Optional. The GUID of the relationship.
        ///   }, # Optional. The glossary header with basic information.
        ///   childrenCategories: [
        ///     {
        ///       categoryGuid: string, # Optional. The GUID of the category.
        ///       description: string, # Optional. The description of the category header.
        ///       displayText: string, # Optional. The display text.
        ///       parentCategoryGuid: string, # Optional. The GUID of the parent category.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///     }
        ///   ], # Optional. An array of children categories.
        ///   parentCategory: AtlasRelatedCategoryHeader, # Optional. The header of the related category.
        ///   terms: [
        ///     {
        ///       description: string, # Optional. The description of the related term.
        ///       displayText: string, # Optional. The display text.
        ///       expression: string, # Optional. The expression of the term.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       source: string, # Optional. The source of the term.
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///       steward: string, # Optional. The steward of the term.
        ///       termGuid: string, # Optional. The GUID of the term.
        ///     }
        ///   ], # Optional. An array of related term headers.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>AtlasGlossaryCategory</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       entityGuid: string, # Optional. The GUID of the entity.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. The end of the time boundary.
        ///           startTime: string, # Optional. The start of the time boundary.
        ///           timeZone: string, # Optional. The timezone of the time boundary.
        ///         }
        ///       ], # Optional. An array of time boundaries indicating validity periods.
        ///       source: string, # Optional. indicate the source who create the classification detail
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///     }
        ///   ], # Optional. An array of classifications.
        ///   longDescription: string, # Optional. The long version description.
        ///   name: string, # Optional. The name of the glossary object.
        ///   qualifiedName: string, # Optional. The qualified name of the glossary object.
        ///   shortDescription: string, # Optional. The short version of description.
        ///   lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///   guid: string, # Optional. The GUID of the object.
        ///   anchor: {
        ///     displayText: string, # Optional. The display text.
        ///     glossaryGuid: string, # Optional. The GUID of the glossary.
        ///     relationGuid: string, # Optional. The GUID of the relationship.
        ///   }, # Optional. The glossary header with basic information.
        ///   childrenCategories: [
        ///     {
        ///       categoryGuid: string, # Optional. The GUID of the category.
        ///       description: string, # Optional. The description of the category header.
        ///       displayText: string, # Optional. The display text.
        ///       parentCategoryGuid: string, # Optional. The GUID of the parent category.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///     }
        ///   ], # Optional. An array of children categories.
        ///   parentCategory: AtlasRelatedCategoryHeader, # Optional. The header of the related category.
        ///   terms: [
        ///     {
        ///       description: string, # Optional. The description of the related term.
        ///       displayText: string, # Optional. The display text.
        ///       expression: string, # Optional. The expression of the term.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       source: string, # Optional. The source of the term.
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///       steward: string, # Optional. The steward of the term.
        ///       termGuid: string, # Optional. The GUID of the term.
        ///     }
        ///   ], # Optional. An array of related term headers.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response CreateGlossaryCategory(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.CreateGlossaryCategory");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateGlossaryCategoryRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get specific glossary category by its GUID. </summary>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="categoryGuid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="categoryGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetGlossaryCategoryAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// Response response = await client.GetGlossaryCategoryAsync("<categoryGuid>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("longDescription").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("qualifiedName").ToString());
        /// Console.WriteLine(result.GetProperty("shortDescription").ToString());
        /// Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("parentCategory").GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("parentCategory").GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("parentCategory").GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>AtlasGlossaryCategory</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       entityGuid: string, # Optional. The GUID of the entity.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. The end of the time boundary.
        ///           startTime: string, # Optional. The start of the time boundary.
        ///           timeZone: string, # Optional. The timezone of the time boundary.
        ///         }
        ///       ], # Optional. An array of time boundaries indicating validity periods.
        ///       source: string, # Optional. indicate the source who create the classification detail
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///     }
        ///   ], # Optional. An array of classifications.
        ///   longDescription: string, # Optional. The long version description.
        ///   name: string, # Optional. The name of the glossary object.
        ///   qualifiedName: string, # Optional. The qualified name of the glossary object.
        ///   shortDescription: string, # Optional. The short version of description.
        ///   lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///   guid: string, # Optional. The GUID of the object.
        ///   anchor: {
        ///     displayText: string, # Optional. The display text.
        ///     glossaryGuid: string, # Optional. The GUID of the glossary.
        ///     relationGuid: string, # Optional. The GUID of the relationship.
        ///   }, # Optional. The glossary header with basic information.
        ///   childrenCategories: [
        ///     {
        ///       categoryGuid: string, # Optional. The GUID of the category.
        ///       description: string, # Optional. The description of the category header.
        ///       displayText: string, # Optional. The display text.
        ///       parentCategoryGuid: string, # Optional. The GUID of the parent category.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///     }
        ///   ], # Optional. An array of children categories.
        ///   parentCategory: AtlasRelatedCategoryHeader, # Optional. The header of the related category.
        ///   terms: [
        ///     {
        ///       description: string, # Optional. The description of the related term.
        ///       displayText: string, # Optional. The display text.
        ///       expression: string, # Optional. The expression of the term.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       source: string, # Optional. The source of the term.
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///       steward: string, # Optional. The steward of the term.
        ///       termGuid: string, # Optional. The GUID of the term.
        ///     }
        ///   ], # Optional. An array of related term headers.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetGlossaryCategoryAsync(string categoryGuid, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(categoryGuid, nameof(categoryGuid));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.GetGlossaryCategory");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetGlossaryCategoryRequest(categoryGuid, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get specific glossary category by its GUID. </summary>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="categoryGuid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="categoryGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetGlossaryCategory with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// Response response = client.GetGlossaryCategory("<categoryGuid>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("longDescription").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("qualifiedName").ToString());
        /// Console.WriteLine(result.GetProperty("shortDescription").ToString());
        /// Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("parentCategory").GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("parentCategory").GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("parentCategory").GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>AtlasGlossaryCategory</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       entityGuid: string, # Optional. The GUID of the entity.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. The end of the time boundary.
        ///           startTime: string, # Optional. The start of the time boundary.
        ///           timeZone: string, # Optional. The timezone of the time boundary.
        ///         }
        ///       ], # Optional. An array of time boundaries indicating validity periods.
        ///       source: string, # Optional. indicate the source who create the classification detail
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///     }
        ///   ], # Optional. An array of classifications.
        ///   longDescription: string, # Optional. The long version description.
        ///   name: string, # Optional. The name of the glossary object.
        ///   qualifiedName: string, # Optional. The qualified name of the glossary object.
        ///   shortDescription: string, # Optional. The short version of description.
        ///   lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///   guid: string, # Optional. The GUID of the object.
        ///   anchor: {
        ///     displayText: string, # Optional. The display text.
        ///     glossaryGuid: string, # Optional. The GUID of the glossary.
        ///     relationGuid: string, # Optional. The GUID of the relationship.
        ///   }, # Optional. The glossary header with basic information.
        ///   childrenCategories: [
        ///     {
        ///       categoryGuid: string, # Optional. The GUID of the category.
        ///       description: string, # Optional. The description of the category header.
        ///       displayText: string, # Optional. The display text.
        ///       parentCategoryGuid: string, # Optional. The GUID of the parent category.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///     }
        ///   ], # Optional. An array of children categories.
        ///   parentCategory: AtlasRelatedCategoryHeader, # Optional. The header of the related category.
        ///   terms: [
        ///     {
        ///       description: string, # Optional. The description of the related term.
        ///       displayText: string, # Optional. The display text.
        ///       expression: string, # Optional. The expression of the term.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       source: string, # Optional. The source of the term.
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///       steward: string, # Optional. The steward of the term.
        ///       termGuid: string, # Optional. The GUID of the term.
        ///     }
        ///   ], # Optional. An array of related term headers.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetGlossaryCategory(string categoryGuid, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(categoryGuid, nameof(categoryGuid));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.GetGlossaryCategory");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetGlossaryCategoryRequest(categoryGuid, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update the given glossary category by its GUID. </summary>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="categoryGuid"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="categoryGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call UpdateGlossaryCategoryAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.UpdateGlossaryCategoryAsync("<categoryGuid>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call UpdateGlossaryCategoryAsync with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// var data = new {
        ///     classifications = new[] {
        ///         new {
        ///             attributes = new {
        ///                 key = new {},
        ///             },
        ///             typeName = "<AtlasStructTypeName>",
        ///             lastModifiedTS = "<LastModifiedTS>",
        ///             entityGuid = "<AtlasClassificationEntityGuid>",
        ///             entityStatus = "<ACTIVE>",
        ///             removePropagationsOnEntityDelete = true,
        ///             validityPeriods = new[] {
        ///                 new {
        ///                     endTime = "<TimeBoundaryEndTime>",
        ///                     startTime = "<TimeBoundaryStartTime>",
        ///                     timeZone = "<TimeBoundaryTimeZone>",
        ///                 }
        ///             },
        ///             source = "<AtlasClassificationSource>",
        ///             sourceDetails = new {
        ///                 key = new {},
        ///             },
        ///         }
        ///     },
        ///     longDescription = "<AtlasGlossaryBaseObjectLongDescription>",
        ///     name = "<AtlasGlossaryBaseObjectName>",
        ///     qualifiedName = "<AtlasGlossaryBaseObjectQualifiedName>",
        ///     shortDescription = "<AtlasGlossaryBaseObjectShortDescription>",
        ///     lastModifiedTS = "<LastModifiedTS>",
        ///     guid = "<AtlasBaseModelObjectGuid>",
        ///     anchor = new {
        ///         displayText = "<AtlasGlossaryHeaderDisplayText>",
        ///         glossaryGuid = "<AtlasGlossaryHeaderGlossaryGuid>",
        ///         relationGuid = "<AtlasGlossaryHeaderRelationGuid>",
        ///     },
        ///     childrenCategories = new[] {
        ///         new {
        ///             categoryGuid = "<AtlasRelatedCategoryHeaderCategoryGuid>",
        ///             description = "<AtlasRelatedCategoryHeaderDescription>",
        ///             displayText = "<AtlasRelatedCategoryHeaderDisplayText>",
        ///             parentCategoryGuid = "<AtlasRelatedCategoryHeaderParentCategoryGuid>",
        ///             relationGuid = "<AtlasRelatedCategoryHeaderRelationGuid>",
        ///         }
        ///     },
        ///     parentCategory = new {
        ///         categoryGuid = "<AtlasRelatedCategoryHeaderCategoryGuid>",
        ///         description = "<AtlasRelatedCategoryHeaderDescription>",
        ///         displayText = "<AtlasRelatedCategoryHeaderDisplayText>",
        ///         parentCategoryGuid = "<AtlasRelatedCategoryHeaderParentCategoryGuid>",
        ///         relationGuid = "<AtlasRelatedCategoryHeaderRelationGuid>",
        ///     },
        ///     terms = new[] {
        ///         new {
        ///             description = "<AtlasRelatedTermHeaderDescription>",
        ///             displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///             expression = "<AtlasRelatedTermHeaderExpression>",
        ///             relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///             source = "<AtlasRelatedTermHeaderSource>",
        ///             status = "<DRAFT>",
        ///             steward = "<AtlasRelatedTermHeaderSteward>",
        ///             termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///         }
        ///     },
        /// };
        /// 
        /// Response response = await client.UpdateGlossaryCategoryAsync("<categoryGuid>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("longDescription").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("qualifiedName").ToString());
        /// Console.WriteLine(result.GetProperty("shortDescription").ToString());
        /// Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("parentCategory").GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("parentCategory").GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("parentCategory").GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>AtlasGlossaryCategory</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       entityGuid: string, # Optional. The GUID of the entity.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. The end of the time boundary.
        ///           startTime: string, # Optional. The start of the time boundary.
        ///           timeZone: string, # Optional. The timezone of the time boundary.
        ///         }
        ///       ], # Optional. An array of time boundaries indicating validity periods.
        ///       source: string, # Optional. indicate the source who create the classification detail
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///     }
        ///   ], # Optional. An array of classifications.
        ///   longDescription: string, # Optional. The long version description.
        ///   name: string, # Optional. The name of the glossary object.
        ///   qualifiedName: string, # Optional. The qualified name of the glossary object.
        ///   shortDescription: string, # Optional. The short version of description.
        ///   lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///   guid: string, # Optional. The GUID of the object.
        ///   anchor: {
        ///     displayText: string, # Optional. The display text.
        ///     glossaryGuid: string, # Optional. The GUID of the glossary.
        ///     relationGuid: string, # Optional. The GUID of the relationship.
        ///   }, # Optional. The glossary header with basic information.
        ///   childrenCategories: [
        ///     {
        ///       categoryGuid: string, # Optional. The GUID of the category.
        ///       description: string, # Optional. The description of the category header.
        ///       displayText: string, # Optional. The display text.
        ///       parentCategoryGuid: string, # Optional. The GUID of the parent category.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///     }
        ///   ], # Optional. An array of children categories.
        ///   parentCategory: AtlasRelatedCategoryHeader, # Optional. The header of the related category.
        ///   terms: [
        ///     {
        ///       description: string, # Optional. The description of the related term.
        ///       displayText: string, # Optional. The display text.
        ///       expression: string, # Optional. The expression of the term.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       source: string, # Optional. The source of the term.
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///       steward: string, # Optional. The steward of the term.
        ///       termGuid: string, # Optional. The GUID of the term.
        ///     }
        ///   ], # Optional. An array of related term headers.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>AtlasGlossaryCategory</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       entityGuid: string, # Optional. The GUID of the entity.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. The end of the time boundary.
        ///           startTime: string, # Optional. The start of the time boundary.
        ///           timeZone: string, # Optional. The timezone of the time boundary.
        ///         }
        ///       ], # Optional. An array of time boundaries indicating validity periods.
        ///       source: string, # Optional. indicate the source who create the classification detail
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///     }
        ///   ], # Optional. An array of classifications.
        ///   longDescription: string, # Optional. The long version description.
        ///   name: string, # Optional. The name of the glossary object.
        ///   qualifiedName: string, # Optional. The qualified name of the glossary object.
        ///   shortDescription: string, # Optional. The short version of description.
        ///   lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///   guid: string, # Optional. The GUID of the object.
        ///   anchor: {
        ///     displayText: string, # Optional. The display text.
        ///     glossaryGuid: string, # Optional. The GUID of the glossary.
        ///     relationGuid: string, # Optional. The GUID of the relationship.
        ///   }, # Optional. The glossary header with basic information.
        ///   childrenCategories: [
        ///     {
        ///       categoryGuid: string, # Optional. The GUID of the category.
        ///       description: string, # Optional. The description of the category header.
        ///       displayText: string, # Optional. The display text.
        ///       parentCategoryGuid: string, # Optional. The GUID of the parent category.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///     }
        ///   ], # Optional. An array of children categories.
        ///   parentCategory: AtlasRelatedCategoryHeader, # Optional. The header of the related category.
        ///   terms: [
        ///     {
        ///       description: string, # Optional. The description of the related term.
        ///       displayText: string, # Optional. The display text.
        ///       expression: string, # Optional. The expression of the term.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       source: string, # Optional. The source of the term.
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///       steward: string, # Optional. The steward of the term.
        ///       termGuid: string, # Optional. The GUID of the term.
        ///     }
        ///   ], # Optional. An array of related term headers.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> UpdateGlossaryCategoryAsync(string categoryGuid, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(categoryGuid, nameof(categoryGuid));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.UpdateGlossaryCategory");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateGlossaryCategoryRequest(categoryGuid, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update the given glossary category by its GUID. </summary>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="categoryGuid"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="categoryGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call UpdateGlossaryCategory with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.UpdateGlossaryCategory("<categoryGuid>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call UpdateGlossaryCategory with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// var data = new {
        ///     classifications = new[] {
        ///         new {
        ///             attributes = new {
        ///                 key = new {},
        ///             },
        ///             typeName = "<AtlasStructTypeName>",
        ///             lastModifiedTS = "<LastModifiedTS>",
        ///             entityGuid = "<AtlasClassificationEntityGuid>",
        ///             entityStatus = "<ACTIVE>",
        ///             removePropagationsOnEntityDelete = true,
        ///             validityPeriods = new[] {
        ///                 new {
        ///                     endTime = "<TimeBoundaryEndTime>",
        ///                     startTime = "<TimeBoundaryStartTime>",
        ///                     timeZone = "<TimeBoundaryTimeZone>",
        ///                 }
        ///             },
        ///             source = "<AtlasClassificationSource>",
        ///             sourceDetails = new {
        ///                 key = new {},
        ///             },
        ///         }
        ///     },
        ///     longDescription = "<AtlasGlossaryBaseObjectLongDescription>",
        ///     name = "<AtlasGlossaryBaseObjectName>",
        ///     qualifiedName = "<AtlasGlossaryBaseObjectQualifiedName>",
        ///     shortDescription = "<AtlasGlossaryBaseObjectShortDescription>",
        ///     lastModifiedTS = "<LastModifiedTS>",
        ///     guid = "<AtlasBaseModelObjectGuid>",
        ///     anchor = new {
        ///         displayText = "<AtlasGlossaryHeaderDisplayText>",
        ///         glossaryGuid = "<AtlasGlossaryHeaderGlossaryGuid>",
        ///         relationGuid = "<AtlasGlossaryHeaderRelationGuid>",
        ///     },
        ///     childrenCategories = new[] {
        ///         new {
        ///             categoryGuid = "<AtlasRelatedCategoryHeaderCategoryGuid>",
        ///             description = "<AtlasRelatedCategoryHeaderDescription>",
        ///             displayText = "<AtlasRelatedCategoryHeaderDisplayText>",
        ///             parentCategoryGuid = "<AtlasRelatedCategoryHeaderParentCategoryGuid>",
        ///             relationGuid = "<AtlasRelatedCategoryHeaderRelationGuid>",
        ///         }
        ///     },
        ///     parentCategory = new {
        ///         categoryGuid = "<AtlasRelatedCategoryHeaderCategoryGuid>",
        ///         description = "<AtlasRelatedCategoryHeaderDescription>",
        ///         displayText = "<AtlasRelatedCategoryHeaderDisplayText>",
        ///         parentCategoryGuid = "<AtlasRelatedCategoryHeaderParentCategoryGuid>",
        ///         relationGuid = "<AtlasRelatedCategoryHeaderRelationGuid>",
        ///     },
        ///     terms = new[] {
        ///         new {
        ///             description = "<AtlasRelatedTermHeaderDescription>",
        ///             displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///             expression = "<AtlasRelatedTermHeaderExpression>",
        ///             relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///             source = "<AtlasRelatedTermHeaderSource>",
        ///             status = "<DRAFT>",
        ///             steward = "<AtlasRelatedTermHeaderSteward>",
        ///             termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///         }
        ///     },
        /// };
        /// 
        /// Response response = client.UpdateGlossaryCategory("<categoryGuid>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("longDescription").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("qualifiedName").ToString());
        /// Console.WriteLine(result.GetProperty("shortDescription").ToString());
        /// Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("parentCategory").GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("parentCategory").GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("parentCategory").GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>AtlasGlossaryCategory</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       entityGuid: string, # Optional. The GUID of the entity.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. The end of the time boundary.
        ///           startTime: string, # Optional. The start of the time boundary.
        ///           timeZone: string, # Optional. The timezone of the time boundary.
        ///         }
        ///       ], # Optional. An array of time boundaries indicating validity periods.
        ///       source: string, # Optional. indicate the source who create the classification detail
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///     }
        ///   ], # Optional. An array of classifications.
        ///   longDescription: string, # Optional. The long version description.
        ///   name: string, # Optional. The name of the glossary object.
        ///   qualifiedName: string, # Optional. The qualified name of the glossary object.
        ///   shortDescription: string, # Optional. The short version of description.
        ///   lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///   guid: string, # Optional. The GUID of the object.
        ///   anchor: {
        ///     displayText: string, # Optional. The display text.
        ///     glossaryGuid: string, # Optional. The GUID of the glossary.
        ///     relationGuid: string, # Optional. The GUID of the relationship.
        ///   }, # Optional. The glossary header with basic information.
        ///   childrenCategories: [
        ///     {
        ///       categoryGuid: string, # Optional. The GUID of the category.
        ///       description: string, # Optional. The description of the category header.
        ///       displayText: string, # Optional. The display text.
        ///       parentCategoryGuid: string, # Optional. The GUID of the parent category.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///     }
        ///   ], # Optional. An array of children categories.
        ///   parentCategory: AtlasRelatedCategoryHeader, # Optional. The header of the related category.
        ///   terms: [
        ///     {
        ///       description: string, # Optional. The description of the related term.
        ///       displayText: string, # Optional. The display text.
        ///       expression: string, # Optional. The expression of the term.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       source: string, # Optional. The source of the term.
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///       steward: string, # Optional. The steward of the term.
        ///       termGuid: string, # Optional. The GUID of the term.
        ///     }
        ///   ], # Optional. An array of related term headers.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>AtlasGlossaryCategory</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       entityGuid: string, # Optional. The GUID of the entity.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. The end of the time boundary.
        ///           startTime: string, # Optional. The start of the time boundary.
        ///           timeZone: string, # Optional. The timezone of the time boundary.
        ///         }
        ///       ], # Optional. An array of time boundaries indicating validity periods.
        ///       source: string, # Optional. indicate the source who create the classification detail
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///     }
        ///   ], # Optional. An array of classifications.
        ///   longDescription: string, # Optional. The long version description.
        ///   name: string, # Optional. The name of the glossary object.
        ///   qualifiedName: string, # Optional. The qualified name of the glossary object.
        ///   shortDescription: string, # Optional. The short version of description.
        ///   lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///   guid: string, # Optional. The GUID of the object.
        ///   anchor: {
        ///     displayText: string, # Optional. The display text.
        ///     glossaryGuid: string, # Optional. The GUID of the glossary.
        ///     relationGuid: string, # Optional. The GUID of the relationship.
        ///   }, # Optional. The glossary header with basic information.
        ///   childrenCategories: [
        ///     {
        ///       categoryGuid: string, # Optional. The GUID of the category.
        ///       description: string, # Optional. The description of the category header.
        ///       displayText: string, # Optional. The display text.
        ///       parentCategoryGuid: string, # Optional. The GUID of the parent category.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///     }
        ///   ], # Optional. An array of children categories.
        ///   parentCategory: AtlasRelatedCategoryHeader, # Optional. The header of the related category.
        ///   terms: [
        ///     {
        ///       description: string, # Optional. The description of the related term.
        ///       displayText: string, # Optional. The display text.
        ///       expression: string, # Optional. The expression of the term.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       source: string, # Optional. The source of the term.
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///       steward: string, # Optional. The steward of the term.
        ///       termGuid: string, # Optional. The GUID of the term.
        ///     }
        ///   ], # Optional. An array of related term headers.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response UpdateGlossaryCategory(string categoryGuid, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(categoryGuid, nameof(categoryGuid));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.UpdateGlossaryCategory");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateGlossaryCategoryRequest(categoryGuid, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a glossary category. </summary>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="categoryGuid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="categoryGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteGlossaryCategoryAsync with required parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// Response response = await client.DeleteGlossaryCategoryAsync("<categoryGuid>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> DeleteGlossaryCategoryAsync(string categoryGuid, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(categoryGuid, nameof(categoryGuid));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.DeleteGlossaryCategory");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteGlossaryCategoryRequest(categoryGuid, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a glossary category. </summary>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="categoryGuid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="categoryGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteGlossaryCategory with required parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// Response response = client.DeleteGlossaryCategory("<categoryGuid>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response DeleteGlossaryCategory(string categoryGuid, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(categoryGuid, nameof(categoryGuid));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.DeleteGlossaryCategory");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteGlossaryCategoryRequest(categoryGuid, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update the glossary category partially. </summary>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="categoryGuid"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="categoryGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call PartialUpdateGlossaryCategoryAsync with required parameters and request content and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// var data = new {
        ///     key = "<String>",
        /// };
        /// 
        /// Response response = await client.PartialUpdateGlossaryCategoryAsync("<categoryGuid>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("longDescription").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("qualifiedName").ToString());
        /// Console.WriteLine(result.GetProperty("shortDescription").ToString());
        /// Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("parentCategory").GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("parentCategory").GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("parentCategory").GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>AtlasGlossaryCategory</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       entityGuid: string, # Optional. The GUID of the entity.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. The end of the time boundary.
        ///           startTime: string, # Optional. The start of the time boundary.
        ///           timeZone: string, # Optional. The timezone of the time boundary.
        ///         }
        ///       ], # Optional. An array of time boundaries indicating validity periods.
        ///       source: string, # Optional. indicate the source who create the classification detail
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///     }
        ///   ], # Optional. An array of classifications.
        ///   longDescription: string, # Optional. The long version description.
        ///   name: string, # Optional. The name of the glossary object.
        ///   qualifiedName: string, # Optional. The qualified name of the glossary object.
        ///   shortDescription: string, # Optional. The short version of description.
        ///   lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///   guid: string, # Optional. The GUID of the object.
        ///   anchor: {
        ///     displayText: string, # Optional. The display text.
        ///     glossaryGuid: string, # Optional. The GUID of the glossary.
        ///     relationGuid: string, # Optional. The GUID of the relationship.
        ///   }, # Optional. The glossary header with basic information.
        ///   childrenCategories: [
        ///     {
        ///       categoryGuid: string, # Optional. The GUID of the category.
        ///       description: string, # Optional. The description of the category header.
        ///       displayText: string, # Optional. The display text.
        ///       parentCategoryGuid: string, # Optional. The GUID of the parent category.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///     }
        ///   ], # Optional. An array of children categories.
        ///   parentCategory: AtlasRelatedCategoryHeader, # Optional. The header of the related category.
        ///   terms: [
        ///     {
        ///       description: string, # Optional. The description of the related term.
        ///       displayText: string, # Optional. The display text.
        ///       expression: string, # Optional. The expression of the term.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       source: string, # Optional. The source of the term.
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///       steward: string, # Optional. The steward of the term.
        ///       termGuid: string, # Optional. The GUID of the term.
        ///     }
        ///   ], # Optional. An array of related term headers.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> PartialUpdateGlossaryCategoryAsync(string categoryGuid, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(categoryGuid, nameof(categoryGuid));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.PartialUpdateGlossaryCategory");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePartialUpdateGlossaryCategoryRequest(categoryGuid, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update the glossary category partially. </summary>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="categoryGuid"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="categoryGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call PartialUpdateGlossaryCategory with required parameters and request content and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// var data = new {
        ///     key = "<String>",
        /// };
        /// 
        /// Response response = client.PartialUpdateGlossaryCategory("<categoryGuid>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("longDescription").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("qualifiedName").ToString());
        /// Console.WriteLine(result.GetProperty("shortDescription").ToString());
        /// Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("parentCategory").GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("parentCategory").GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("parentCategory").GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>AtlasGlossaryCategory</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       entityGuid: string, # Optional. The GUID of the entity.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. The end of the time boundary.
        ///           startTime: string, # Optional. The start of the time boundary.
        ///           timeZone: string, # Optional. The timezone of the time boundary.
        ///         }
        ///       ], # Optional. An array of time boundaries indicating validity periods.
        ///       source: string, # Optional. indicate the source who create the classification detail
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///     }
        ///   ], # Optional. An array of classifications.
        ///   longDescription: string, # Optional. The long version description.
        ///   name: string, # Optional. The name of the glossary object.
        ///   qualifiedName: string, # Optional. The qualified name of the glossary object.
        ///   shortDescription: string, # Optional. The short version of description.
        ///   lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///   guid: string, # Optional. The GUID of the object.
        ///   anchor: {
        ///     displayText: string, # Optional. The display text.
        ///     glossaryGuid: string, # Optional. The GUID of the glossary.
        ///     relationGuid: string, # Optional. The GUID of the relationship.
        ///   }, # Optional. The glossary header with basic information.
        ///   childrenCategories: [
        ///     {
        ///       categoryGuid: string, # Optional. The GUID of the category.
        ///       description: string, # Optional. The description of the category header.
        ///       displayText: string, # Optional. The display text.
        ///       parentCategoryGuid: string, # Optional. The GUID of the parent category.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///     }
        ///   ], # Optional. An array of children categories.
        ///   parentCategory: AtlasRelatedCategoryHeader, # Optional. The header of the related category.
        ///   terms: [
        ///     {
        ///       description: string, # Optional. The description of the related term.
        ///       displayText: string, # Optional. The display text.
        ///       expression: string, # Optional. The expression of the term.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       source: string, # Optional. The source of the term.
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///       steward: string, # Optional. The steward of the term.
        ///       termGuid: string, # Optional. The GUID of the term.
        ///     }
        ///   ], # Optional. An array of related term headers.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response PartialUpdateGlossaryCategory(string categoryGuid, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(categoryGuid, nameof(categoryGuid));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.PartialUpdateGlossaryCategory");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePartialUpdateGlossaryCategoryRequest(categoryGuid, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get all related categories (parent and children). Limit, offset, and sort parameters are currently not being enabled and won&apos;t work even they are passed. </summary>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="categoryGuid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="categoryGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetRelatedCategoriesAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// Response response = await client.GetRelatedCategoriesAsync("<categoryGuid>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("<test>")[0].ToString());
        /// ]]></code>
        /// This sample shows how to call GetRelatedCategoriesAsync with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// Response response = await client.GetRelatedCategoriesAsync("<categoryGuid>", 1234, 1234, "<sort>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("categoryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("parentCategoryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("relationGuid").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>DictionaryOfpathsCic80AAtlasV2GlossaryCategoryCategoryguidRelatedGetResponses200ContentApplicationJsonSchemaAdditionalproperties</c>:
        /// <code>{
        ///   categoryGuid: string, # Optional. The GUID of the category.
        ///   description: string, # Optional. The description of the category header.
        ///   displayText: string, # Optional. The display text.
        ///   parentCategoryGuid: string, # Optional. The GUID of the parent category.
        ///   relationGuid: string, # Optional. The GUID of the relationship.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetRelatedCategoriesAsync(string categoryGuid, int? limit = null, int? offset = null, string sort = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(categoryGuid, nameof(categoryGuid));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.GetRelatedCategories");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetRelatedCategoriesRequest(categoryGuid, limit, offset, sort, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get all related categories (parent and children). Limit, offset, and sort parameters are currently not being enabled and won&apos;t work even they are passed. </summary>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="categoryGuid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="categoryGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetRelatedCategories with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// Response response = client.GetRelatedCategories("<categoryGuid>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("<test>")[0].ToString());
        /// ]]></code>
        /// This sample shows how to call GetRelatedCategories with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// Response response = client.GetRelatedCategories("<categoryGuid>", 1234, 1234, "<sort>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("categoryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("parentCategoryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("relationGuid").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>DictionaryOfpathsCic80AAtlasV2GlossaryCategoryCategoryguidRelatedGetResponses200ContentApplicationJsonSchemaAdditionalproperties</c>:
        /// <code>{
        ///   categoryGuid: string, # Optional. The GUID of the category.
        ///   description: string, # Optional. The description of the category header.
        ///   displayText: string, # Optional. The display text.
        ///   parentCategoryGuid: string, # Optional. The GUID of the parent category.
        ///   relationGuid: string, # Optional. The GUID of the relationship.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetRelatedCategories(string categoryGuid, int? limit = null, int? offset = null, string sort = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(categoryGuid, nameof(categoryGuid));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.GetRelatedCategories");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetRelatedCategoriesRequest(categoryGuid, limit, offset, sort, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get all terms associated with the specific category. </summary>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="categoryGuid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="categoryGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetCategoryTermsAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// Response response = await client.GetCategoryTermsAsync("<categoryGuid>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].ToString());
        /// ]]></code>
        /// This sample shows how to call GetCategoryTermsAsync with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// Response response = await client.GetCategoryTermsAsync("<categoryGuid>", 1234, 1234, "<sort>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("termGuid").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ArrayOfAtlasRelatedTermHeader</c>:
        /// <code>{
        ///   description: string, # Optional. The description of the related term.
        ///   displayText: string, # Optional. The display text.
        ///   expression: string, # Optional. The expression of the term.
        ///   relationGuid: string, # Optional. The GUID of the relationship.
        ///   source: string, # Optional. The source of the term.
        ///   status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///   steward: string, # Optional. The steward of the term.
        ///   termGuid: string, # Optional. The GUID of the term.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetCategoryTermsAsync(string categoryGuid, int? limit = null, int? offset = null, string sort = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(categoryGuid, nameof(categoryGuid));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.GetCategoryTerms");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetCategoryTermsRequest(categoryGuid, limit, offset, sort, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get all terms associated with the specific category. </summary>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="categoryGuid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="categoryGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetCategoryTerms with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// Response response = client.GetCategoryTerms("<categoryGuid>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].ToString());
        /// ]]></code>
        /// This sample shows how to call GetCategoryTerms with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// Response response = client.GetCategoryTerms("<categoryGuid>", 1234, 1234, "<sort>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("termGuid").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ArrayOfAtlasRelatedTermHeader</c>:
        /// <code>{
        ///   description: string, # Optional. The description of the related term.
        ///   displayText: string, # Optional. The display text.
        ///   expression: string, # Optional. The expression of the term.
        ///   relationGuid: string, # Optional. The GUID of the relationship.
        ///   source: string, # Optional. The source of the term.
        ///   status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///   steward: string, # Optional. The steward of the term.
        ///   termGuid: string, # Optional. The GUID of the term.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetCategoryTerms(string categoryGuid, int? limit = null, int? offset = null, string sort = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(categoryGuid, nameof(categoryGuid));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.GetCategoryTerms");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetCategoryTermsRequest(categoryGuid, limit, offset, sort, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a glossary term. </summary>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call CreateGlossaryTermAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.CreateGlossaryTermAsync(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call CreateGlossaryTermAsync with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// var data = new {
        ///     classifications = new[] {
        ///         new {
        ///             attributes = new {
        ///                 key = new {},
        ///             },
        ///             typeName = "<AtlasStructTypeName>",
        ///             lastModifiedTS = "<LastModifiedTS>",
        ///             entityGuid = "<AtlasClassificationEntityGuid>",
        ///             entityStatus = "<ACTIVE>",
        ///             removePropagationsOnEntityDelete = true,
        ///             validityPeriods = new[] {
        ///                 new {
        ///                     endTime = "<TimeBoundaryEndTime>",
        ///                     startTime = "<TimeBoundaryStartTime>",
        ///                     timeZone = "<TimeBoundaryTimeZone>",
        ///                 }
        ///             },
        ///             source = "<AtlasClassificationSource>",
        ///             sourceDetails = new {
        ///                 key = new {},
        ///             },
        ///         }
        ///     },
        ///     longDescription = "<AtlasGlossaryBaseObjectLongDescription>",
        ///     name = "<AtlasGlossaryBaseObjectName>",
        ///     qualifiedName = "<AtlasGlossaryBaseObjectQualifiedName>",
        ///     shortDescription = "<AtlasGlossaryBaseObjectShortDescription>",
        ///     lastModifiedTS = "<LastModifiedTS>",
        ///     guid = "<AtlasBaseModelObjectGuid>",
        ///     abbreviation = "<AtlasGlossaryTermAbbreviation>",
        ///     templateName = new[] {
        ///         new {}
        ///     },
        ///     anchor = new {
        ///         displayText = "<AtlasGlossaryHeaderDisplayText>",
        ///         glossaryGuid = "<AtlasGlossaryHeaderGlossaryGuid>",
        ///         relationGuid = "<AtlasGlossaryHeaderRelationGuid>",
        ///     },
        ///     antonyms = new[] {
        ///         new {
        ///             description = "<AtlasRelatedTermHeaderDescription>",
        ///             displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///             expression = "<AtlasRelatedTermHeaderExpression>",
        ///             relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///             source = "<AtlasRelatedTermHeaderSource>",
        ///             status = "<DRAFT>",
        ///             steward = "<AtlasRelatedTermHeaderSteward>",
        ///             termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///         }
        ///     },
        ///     createTime = 1234,
        ///     createdBy = "<AtlasGlossaryTermCreatedBy>",
        ///     updateTime = 1234,
        ///     updatedBy = "<AtlasGlossaryTermUpdatedBy>",
        ///     status = "<Draft>",
        ///     resources = new[] {
        ///         new {
        ///             displayName = "<ResourceLinkDisplayName>",
        ///             url = "<ResourceLinkUrl>",
        ///         }
        ///     },
        ///     contacts = new {
        ///         key = new[] {
        ///             new {
        ///                 id = "<ContactBasicId>",
        ///                 info = "<ContactBasicInfo>",
        ///             }
        ///         },
        ///     },
        ///     attributes = new {
        ///         key = new {
        ///             key = new {},
        ///         },
        ///     },
        ///     assignedEntities = new[] {
        ///         new {
        ///             guid = "<AtlasObjectIdGuid>",
        ///             typeName = "<AtlasObjectIdTypeName>",
        ///             uniqueAttributes = new {
        ///                 key = new {},
        ///             },
        ///             displayText = "<AtlasRelatedObjectIdDisplayText>",
        ///             entityStatus = "<ACTIVE>",
        ///             relationshipType = "<AtlasRelatedObjectIdRelationshipType>",
        ///             relationshipAttributes = new {
        ///                 attributes = new {
        ///                     key = new {},
        ///                 },
        ///                 typeName = "<AtlasStructTypeName>",
        ///                 lastModifiedTS = "<LastModifiedTS>",
        ///                 entityGuid = "<AtlasClassificationEntityGuid>",
        ///                 entityStatus = "<ACTIVE>",
        ///                 removePropagationsOnEntityDelete = true,
        ///                 validityPeriods = new[] {
        ///                     new {
        ///                         endTime = "<TimeBoundaryEndTime>",
        ///                         startTime = "<TimeBoundaryStartTime>",
        ///                         timeZone = "<TimeBoundaryTimeZone>",
        ///                     }
        ///                 },
        ///                 source = "<AtlasClassificationSource>",
        ///                 sourceDetails = new {
        ///                     key = new {},
        ///                 },
        ///             },
        ///             relationshipGuid = "<AtlasRelatedObjectIdRelationshipGuid>",
        ///             relationshipStatus = "<ACTIVE>",
        ///         }
        ///     },
        ///     categories = new[] {
        ///         new {
        ///             categoryGuid = "<AtlasTermCategorizationHeaderCategoryGuid>",
        ///             description = "<AtlasTermCategorizationHeaderDescription>",
        ///             displayText = "<AtlasTermCategorizationHeaderDisplayText>",
        ///             relationGuid = "<AtlasTermCategorizationHeaderRelationGuid>",
        ///             status = "<DRAFT>",
        ///         }
        ///     },
        ///     classifies = new[] {
        ///         new {
        ///             description = "<AtlasRelatedTermHeaderDescription>",
        ///             displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///             expression = "<AtlasRelatedTermHeaderExpression>",
        ///             relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///             source = "<AtlasRelatedTermHeaderSource>",
        ///             status = "<DRAFT>",
        ///             steward = "<AtlasRelatedTermHeaderSteward>",
        ///             termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///         }
        ///     },
        ///     examples = new[] {
        ///         "<AtlasGlossaryTermExamplesItem>"
        ///     },
        ///     isA = new[] {
        ///         new {
        ///             description = "<AtlasRelatedTermHeaderDescription>",
        ///             displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///             expression = "<AtlasRelatedTermHeaderExpression>",
        ///             relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///             source = "<AtlasRelatedTermHeaderSource>",
        ///             status = "<DRAFT>",
        ///             steward = "<AtlasRelatedTermHeaderSteward>",
        ///             termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///         }
        ///     },
        ///     preferredTerms = new[] {
        ///         new {
        ///             description = "<AtlasRelatedTermHeaderDescription>",
        ///             displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///             expression = "<AtlasRelatedTermHeaderExpression>",
        ///             relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///             source = "<AtlasRelatedTermHeaderSource>",
        ///             status = "<DRAFT>",
        ///             steward = "<AtlasRelatedTermHeaderSteward>",
        ///             termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///         }
        ///     },
        ///     preferredToTerms = new[] {
        ///         new {
        ///             description = "<AtlasRelatedTermHeaderDescription>",
        ///             displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///             expression = "<AtlasRelatedTermHeaderExpression>",
        ///             relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///             source = "<AtlasRelatedTermHeaderSource>",
        ///             status = "<DRAFT>",
        ///             steward = "<AtlasRelatedTermHeaderSteward>",
        ///             termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///         }
        ///     },
        ///     replacedBy = new[] {
        ///         new {
        ///             description = "<AtlasRelatedTermHeaderDescription>",
        ///             displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///             expression = "<AtlasRelatedTermHeaderExpression>",
        ///             relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///             source = "<AtlasRelatedTermHeaderSource>",
        ///             status = "<DRAFT>",
        ///             steward = "<AtlasRelatedTermHeaderSteward>",
        ///             termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///         }
        ///     },
        ///     replacementTerms = new[] {
        ///         new {
        ///             description = "<AtlasRelatedTermHeaderDescription>",
        ///             displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///             expression = "<AtlasRelatedTermHeaderExpression>",
        ///             relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///             source = "<AtlasRelatedTermHeaderSource>",
        ///             status = "<DRAFT>",
        ///             steward = "<AtlasRelatedTermHeaderSteward>",
        ///             termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///         }
        ///     },
        ///     seeAlso = new[] {
        ///         new {
        ///             description = "<AtlasRelatedTermHeaderDescription>",
        ///             displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///             expression = "<AtlasRelatedTermHeaderExpression>",
        ///             relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///             source = "<AtlasRelatedTermHeaderSource>",
        ///             status = "<DRAFT>",
        ///             steward = "<AtlasRelatedTermHeaderSteward>",
        ///             termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///         }
        ///     },
        ///     synonyms = new[] {
        ///         new {
        ///             description = "<AtlasRelatedTermHeaderDescription>",
        ///             displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///             expression = "<AtlasRelatedTermHeaderExpression>",
        ///             relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///             source = "<AtlasRelatedTermHeaderSource>",
        ///             status = "<DRAFT>",
        ///             steward = "<AtlasRelatedTermHeaderSteward>",
        ///             termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///         }
        ///     },
        ///     translatedTerms = new[] {
        ///         new {
        ///             description = "<AtlasRelatedTermHeaderDescription>",
        ///             displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///             expression = "<AtlasRelatedTermHeaderExpression>",
        ///             relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///             source = "<AtlasRelatedTermHeaderSource>",
        ///             status = "<DRAFT>",
        ///             steward = "<AtlasRelatedTermHeaderSteward>",
        ///             termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///         }
        ///     },
        ///     translationTerms = new[] {
        ///         new {
        ///             description = "<AtlasRelatedTermHeaderDescription>",
        ///             displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///             expression = "<AtlasRelatedTermHeaderExpression>",
        ///             relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///             source = "<AtlasRelatedTermHeaderSource>",
        ///             status = "<DRAFT>",
        ///             steward = "<AtlasRelatedTermHeaderSteward>",
        ///             termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///         }
        ///     },
        ///     usage = "<AtlasGlossaryTermUsage>",
        ///     validValues = new[] {
        ///         new {
        ///             description = "<AtlasRelatedTermHeaderDescription>",
        ///             displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///             expression = "<AtlasRelatedTermHeaderExpression>",
        ///             relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///             source = "<AtlasRelatedTermHeaderSource>",
        ///             status = "<DRAFT>",
        ///             steward = "<AtlasRelatedTermHeaderSteward>",
        ///             termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///         }
        ///     },
        ///     validValuesFor = new[] {
        ///         new {
        ///             description = "<AtlasRelatedTermHeaderDescription>",
        ///             displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///             expression = "<AtlasRelatedTermHeaderExpression>",
        ///             relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///             source = "<AtlasRelatedTermHeaderSource>",
        ///             status = "<DRAFT>",
        ///             steward = "<AtlasRelatedTermHeaderSteward>",
        ///             termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///         }
        ///     },
        /// };
        /// 
        /// Response response = await client.CreateGlossaryTermAsync(RequestContent.Create(data), true);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("longDescription").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("qualifiedName").ToString());
        /// Console.WriteLine(result.GetProperty("shortDescription").ToString());
        /// Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("abbreviation").ToString());
        /// Console.WriteLine(result.GetProperty("templateName")[0].ToString());
        /// Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("createTime").ToString());
        /// Console.WriteLine(result.GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("updateTime").ToString());
        /// Console.WriteLine(result.GetProperty("updatedBy").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("resources")[0].GetProperty("displayName").ToString());
        /// Console.WriteLine(result.GetProperty("resources")[0].GetProperty("url").ToString());
        /// Console.WriteLine(result.GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
        /// Console.WriteLine(result.GetProperty("attributes").GetProperty("<test>").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("examples")[0].ToString());
        /// Console.WriteLine(result.GetProperty("isA")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("isA")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("isA")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("isA")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("isA")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("isA")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("isA")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("isA")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("usage").ToString());
        /// Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>AtlasGlossaryTerm</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       entityGuid: string, # Optional. The GUID of the entity.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. The end of the time boundary.
        ///           startTime: string, # Optional. The start of the time boundary.
        ///           timeZone: string, # Optional. The timezone of the time boundary.
        ///         }
        ///       ], # Optional. An array of time boundaries indicating validity periods.
        ///       source: string, # Optional. indicate the source who create the classification detail
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///     }
        ///   ], # Optional. An array of classifications.
        ///   longDescription: string, # Optional. The long version description.
        ///   name: string, # Optional. The name of the glossary object.
        ///   qualifiedName: string, # Optional. The qualified name of the glossary object.
        ///   shortDescription: string, # Optional. The short version of description.
        ///   lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///   guid: string, # Optional. The GUID of the object.
        ///   abbreviation: string, # Optional. The abbreviation of the term.
        ///   templateName: [AnyObject], # Optional.
        ///   anchor: {
        ///     displayText: string, # Optional. The display text.
        ///     glossaryGuid: string, # Optional. The GUID of the glossary.
        ///     relationGuid: string, # Optional. The GUID of the relationship.
        ///   }, # Optional. The glossary header with basic information.
        ///   antonyms: [
        ///     {
        ///       description: string, # Optional. The description of the related term.
        ///       displayText: string, # Optional. The display text.
        ///       expression: string, # Optional. The expression of the term.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       source: string, # Optional. The source of the term.
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///       steward: string, # Optional. The steward of the term.
        ///       termGuid: string, # Optional. The GUID of the term.
        ///     }
        ///   ], # Optional. An array of related term headers as antonyms.
        ///   createTime: number, # Optional. The created time of the record.
        ///   createdBy: string, # Optional. The user who created the record.
        ///   updateTime: number, # Optional. The update time of the record.
        ///   updatedBy: string, # Optional. The user who updated the record.
        ///   status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;, # Optional. Status of the AtlasGlossaryTerm
        ///   resources: [
        ///     {
        ///       displayName: string, # Optional. Display name for url.
        ///       url: string, # Optional. web url. http or https
        ///     }
        ///   ], # Optional. An array of resource link for term
        ///   contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. The dictionary of contacts for terms. Key could be Expert or Steward.
        ///   attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;, # Optional. The custom attributes of the term, which is map&lt;string,map&lt;string,object&gt;&gt;.
        /// The key of the first layer map is term template name.
        ///   assignedEntities: [
        ///     {
        ///       guid: string, # Optional. The GUID of the object.
        ///       typeName: string, # Optional. The name of the type.
        ///       uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The unique attributes of the object.
        ///       displayText: string, # Optional. The display text.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       relationshipType: string, # Optional.
        ///       relationshipAttributes: {
        ///         attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///         typeName: string, # Optional. The name of the type.
        ///         lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       }, # Optional. Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.
        ///       relationshipGuid: string, # Optional. The GUID of the relationship.
        ///       relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. The enum of relationship status.
        ///     }
        ///   ], # Optional. An array of related object IDs.
        ///   categories: [
        ///     {
        ///       categoryGuid: string, # Optional. The GUID of the category.
        ///       description: string, # Optional. The description of the record.
        ///       displayText: string, # Optional. The display text.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///     }
        ///   ], # Optional. An array of term categorization headers.
        ///   classifies: [AtlasRelatedTermHeader], # Optional. An array of related term headers.
        ///   examples: [string], # Optional. An array of examples.
        ///   isA: [AtlasRelatedTermHeader], # Optional. An array of related term headers indicating the is-a relationship.
        ///   preferredTerms: [AtlasRelatedTermHeader], # Optional. An array of preferred related term headers.
        ///   preferredToTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are preferred to.
        ///   replacedBy: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are replaced by.
        ///   replacementTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for replacement.
        ///   seeAlso: [AtlasRelatedTermHeader], # Optional. An array of related term headers for see also.
        ///   synonyms: [AtlasRelatedTermHeader], # Optional. An array of related term headers as synonyms.
        ///   translatedTerms: [AtlasRelatedTermHeader], # Optional. An array of translated related term headers.
        ///   translationTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for translation.
        ///   usage: string, # Optional. The usage of the term.
        ///   validValues: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values.
        ///   validValuesFor: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values for other records.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>AtlasGlossaryTerm</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       entityGuid: string, # Optional. The GUID of the entity.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. The end of the time boundary.
        ///           startTime: string, # Optional. The start of the time boundary.
        ///           timeZone: string, # Optional. The timezone of the time boundary.
        ///         }
        ///       ], # Optional. An array of time boundaries indicating validity periods.
        ///       source: string, # Optional. indicate the source who create the classification detail
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///     }
        ///   ], # Optional. An array of classifications.
        ///   longDescription: string, # Optional. The long version description.
        ///   name: string, # Optional. The name of the glossary object.
        ///   qualifiedName: string, # Optional. The qualified name of the glossary object.
        ///   shortDescription: string, # Optional. The short version of description.
        ///   lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///   guid: string, # Optional. The GUID of the object.
        ///   abbreviation: string, # Optional. The abbreviation of the term.
        ///   templateName: [AnyObject], # Optional.
        ///   anchor: {
        ///     displayText: string, # Optional. The display text.
        ///     glossaryGuid: string, # Optional. The GUID of the glossary.
        ///     relationGuid: string, # Optional. The GUID of the relationship.
        ///   }, # Optional. The glossary header with basic information.
        ///   antonyms: [
        ///     {
        ///       description: string, # Optional. The description of the related term.
        ///       displayText: string, # Optional. The display text.
        ///       expression: string, # Optional. The expression of the term.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       source: string, # Optional. The source of the term.
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///       steward: string, # Optional. The steward of the term.
        ///       termGuid: string, # Optional. The GUID of the term.
        ///     }
        ///   ], # Optional. An array of related term headers as antonyms.
        ///   createTime: number, # Optional. The created time of the record.
        ///   createdBy: string, # Optional. The user who created the record.
        ///   updateTime: number, # Optional. The update time of the record.
        ///   updatedBy: string, # Optional. The user who updated the record.
        ///   status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;, # Optional. Status of the AtlasGlossaryTerm
        ///   resources: [
        ///     {
        ///       displayName: string, # Optional. Display name for url.
        ///       url: string, # Optional. web url. http or https
        ///     }
        ///   ], # Optional. An array of resource link for term
        ///   contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. The dictionary of contacts for terms. Key could be Expert or Steward.
        ///   attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;, # Optional. The custom attributes of the term, which is map&lt;string,map&lt;string,object&gt;&gt;.
        /// The key of the first layer map is term template name.
        ///   assignedEntities: [
        ///     {
        ///       guid: string, # Optional. The GUID of the object.
        ///       typeName: string, # Optional. The name of the type.
        ///       uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The unique attributes of the object.
        ///       displayText: string, # Optional. The display text.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       relationshipType: string, # Optional.
        ///       relationshipAttributes: {
        ///         attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///         typeName: string, # Optional. The name of the type.
        ///         lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       }, # Optional. Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.
        ///       relationshipGuid: string, # Optional. The GUID of the relationship.
        ///       relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. The enum of relationship status.
        ///     }
        ///   ], # Optional. An array of related object IDs.
        ///   categories: [
        ///     {
        ///       categoryGuid: string, # Optional. The GUID of the category.
        ///       description: string, # Optional. The description of the record.
        ///       displayText: string, # Optional. The display text.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///     }
        ///   ], # Optional. An array of term categorization headers.
        ///   classifies: [AtlasRelatedTermHeader], # Optional. An array of related term headers.
        ///   examples: [string], # Optional. An array of examples.
        ///   isA: [AtlasRelatedTermHeader], # Optional. An array of related term headers indicating the is-a relationship.
        ///   preferredTerms: [AtlasRelatedTermHeader], # Optional. An array of preferred related term headers.
        ///   preferredToTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are preferred to.
        ///   replacedBy: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are replaced by.
        ///   replacementTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for replacement.
        ///   seeAlso: [AtlasRelatedTermHeader], # Optional. An array of related term headers for see also.
        ///   synonyms: [AtlasRelatedTermHeader], # Optional. An array of related term headers as synonyms.
        ///   translatedTerms: [AtlasRelatedTermHeader], # Optional. An array of translated related term headers.
        ///   translationTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for translation.
        ///   usage: string, # Optional. The usage of the term.
        ///   validValues: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values.
        ///   validValuesFor: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values for other records.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> CreateGlossaryTermAsync(RequestContent content, bool? includeTermHierarchy = null, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.CreateGlossaryTerm");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateGlossaryTermRequest(content, includeTermHierarchy, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a glossary term. </summary>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call CreateGlossaryTerm with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.CreateGlossaryTerm(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call CreateGlossaryTerm with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// var data = new {
        ///     classifications = new[] {
        ///         new {
        ///             attributes = new {
        ///                 key = new {},
        ///             },
        ///             typeName = "<AtlasStructTypeName>",
        ///             lastModifiedTS = "<LastModifiedTS>",
        ///             entityGuid = "<AtlasClassificationEntityGuid>",
        ///             entityStatus = "<ACTIVE>",
        ///             removePropagationsOnEntityDelete = true,
        ///             validityPeriods = new[] {
        ///                 new {
        ///                     endTime = "<TimeBoundaryEndTime>",
        ///                     startTime = "<TimeBoundaryStartTime>",
        ///                     timeZone = "<TimeBoundaryTimeZone>",
        ///                 }
        ///             },
        ///             source = "<AtlasClassificationSource>",
        ///             sourceDetails = new {
        ///                 key = new {},
        ///             },
        ///         }
        ///     },
        ///     longDescription = "<AtlasGlossaryBaseObjectLongDescription>",
        ///     name = "<AtlasGlossaryBaseObjectName>",
        ///     qualifiedName = "<AtlasGlossaryBaseObjectQualifiedName>",
        ///     shortDescription = "<AtlasGlossaryBaseObjectShortDescription>",
        ///     lastModifiedTS = "<LastModifiedTS>",
        ///     guid = "<AtlasBaseModelObjectGuid>",
        ///     abbreviation = "<AtlasGlossaryTermAbbreviation>",
        ///     templateName = new[] {
        ///         new {}
        ///     },
        ///     anchor = new {
        ///         displayText = "<AtlasGlossaryHeaderDisplayText>",
        ///         glossaryGuid = "<AtlasGlossaryHeaderGlossaryGuid>",
        ///         relationGuid = "<AtlasGlossaryHeaderRelationGuid>",
        ///     },
        ///     antonyms = new[] {
        ///         new {
        ///             description = "<AtlasRelatedTermHeaderDescription>",
        ///             displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///             expression = "<AtlasRelatedTermHeaderExpression>",
        ///             relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///             source = "<AtlasRelatedTermHeaderSource>",
        ///             status = "<DRAFT>",
        ///             steward = "<AtlasRelatedTermHeaderSteward>",
        ///             termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///         }
        ///     },
        ///     createTime = 1234,
        ///     createdBy = "<AtlasGlossaryTermCreatedBy>",
        ///     updateTime = 1234,
        ///     updatedBy = "<AtlasGlossaryTermUpdatedBy>",
        ///     status = "<Draft>",
        ///     resources = new[] {
        ///         new {
        ///             displayName = "<ResourceLinkDisplayName>",
        ///             url = "<ResourceLinkUrl>",
        ///         }
        ///     },
        ///     contacts = new {
        ///         key = new[] {
        ///             new {
        ///                 id = "<ContactBasicId>",
        ///                 info = "<ContactBasicInfo>",
        ///             }
        ///         },
        ///     },
        ///     attributes = new {
        ///         key = new {
        ///             key = new {},
        ///         },
        ///     },
        ///     assignedEntities = new[] {
        ///         new {
        ///             guid = "<AtlasObjectIdGuid>",
        ///             typeName = "<AtlasObjectIdTypeName>",
        ///             uniqueAttributes = new {
        ///                 key = new {},
        ///             },
        ///             displayText = "<AtlasRelatedObjectIdDisplayText>",
        ///             entityStatus = "<ACTIVE>",
        ///             relationshipType = "<AtlasRelatedObjectIdRelationshipType>",
        ///             relationshipAttributes = new {
        ///                 attributes = new {
        ///                     key = new {},
        ///                 },
        ///                 typeName = "<AtlasStructTypeName>",
        ///                 lastModifiedTS = "<LastModifiedTS>",
        ///                 entityGuid = "<AtlasClassificationEntityGuid>",
        ///                 entityStatus = "<ACTIVE>",
        ///                 removePropagationsOnEntityDelete = true,
        ///                 validityPeriods = new[] {
        ///                     new {
        ///                         endTime = "<TimeBoundaryEndTime>",
        ///                         startTime = "<TimeBoundaryStartTime>",
        ///                         timeZone = "<TimeBoundaryTimeZone>",
        ///                     }
        ///                 },
        ///                 source = "<AtlasClassificationSource>",
        ///                 sourceDetails = new {
        ///                     key = new {},
        ///                 },
        ///             },
        ///             relationshipGuid = "<AtlasRelatedObjectIdRelationshipGuid>",
        ///             relationshipStatus = "<ACTIVE>",
        ///         }
        ///     },
        ///     categories = new[] {
        ///         new {
        ///             categoryGuid = "<AtlasTermCategorizationHeaderCategoryGuid>",
        ///             description = "<AtlasTermCategorizationHeaderDescription>",
        ///             displayText = "<AtlasTermCategorizationHeaderDisplayText>",
        ///             relationGuid = "<AtlasTermCategorizationHeaderRelationGuid>",
        ///             status = "<DRAFT>",
        ///         }
        ///     },
        ///     classifies = new[] {
        ///         new {
        ///             description = "<AtlasRelatedTermHeaderDescription>",
        ///             displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///             expression = "<AtlasRelatedTermHeaderExpression>",
        ///             relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///             source = "<AtlasRelatedTermHeaderSource>",
        ///             status = "<DRAFT>",
        ///             steward = "<AtlasRelatedTermHeaderSteward>",
        ///             termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///         }
        ///     },
        ///     examples = new[] {
        ///         "<AtlasGlossaryTermExamplesItem>"
        ///     },
        ///     isA = new[] {
        ///         new {
        ///             description = "<AtlasRelatedTermHeaderDescription>",
        ///             displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///             expression = "<AtlasRelatedTermHeaderExpression>",
        ///             relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///             source = "<AtlasRelatedTermHeaderSource>",
        ///             status = "<DRAFT>",
        ///             steward = "<AtlasRelatedTermHeaderSteward>",
        ///             termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///         }
        ///     },
        ///     preferredTerms = new[] {
        ///         new {
        ///             description = "<AtlasRelatedTermHeaderDescription>",
        ///             displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///             expression = "<AtlasRelatedTermHeaderExpression>",
        ///             relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///             source = "<AtlasRelatedTermHeaderSource>",
        ///             status = "<DRAFT>",
        ///             steward = "<AtlasRelatedTermHeaderSteward>",
        ///             termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///         }
        ///     },
        ///     preferredToTerms = new[] {
        ///         new {
        ///             description = "<AtlasRelatedTermHeaderDescription>",
        ///             displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///             expression = "<AtlasRelatedTermHeaderExpression>",
        ///             relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///             source = "<AtlasRelatedTermHeaderSource>",
        ///             status = "<DRAFT>",
        ///             steward = "<AtlasRelatedTermHeaderSteward>",
        ///             termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///         }
        ///     },
        ///     replacedBy = new[] {
        ///         new {
        ///             description = "<AtlasRelatedTermHeaderDescription>",
        ///             displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///             expression = "<AtlasRelatedTermHeaderExpression>",
        ///             relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///             source = "<AtlasRelatedTermHeaderSource>",
        ///             status = "<DRAFT>",
        ///             steward = "<AtlasRelatedTermHeaderSteward>",
        ///             termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///         }
        ///     },
        ///     replacementTerms = new[] {
        ///         new {
        ///             description = "<AtlasRelatedTermHeaderDescription>",
        ///             displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///             expression = "<AtlasRelatedTermHeaderExpression>",
        ///             relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///             source = "<AtlasRelatedTermHeaderSource>",
        ///             status = "<DRAFT>",
        ///             steward = "<AtlasRelatedTermHeaderSteward>",
        ///             termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///         }
        ///     },
        ///     seeAlso = new[] {
        ///         new {
        ///             description = "<AtlasRelatedTermHeaderDescription>",
        ///             displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///             expression = "<AtlasRelatedTermHeaderExpression>",
        ///             relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///             source = "<AtlasRelatedTermHeaderSource>",
        ///             status = "<DRAFT>",
        ///             steward = "<AtlasRelatedTermHeaderSteward>",
        ///             termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///         }
        ///     },
        ///     synonyms = new[] {
        ///         new {
        ///             description = "<AtlasRelatedTermHeaderDescription>",
        ///             displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///             expression = "<AtlasRelatedTermHeaderExpression>",
        ///             relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///             source = "<AtlasRelatedTermHeaderSource>",
        ///             status = "<DRAFT>",
        ///             steward = "<AtlasRelatedTermHeaderSteward>",
        ///             termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///         }
        ///     },
        ///     translatedTerms = new[] {
        ///         new {
        ///             description = "<AtlasRelatedTermHeaderDescription>",
        ///             displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///             expression = "<AtlasRelatedTermHeaderExpression>",
        ///             relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///             source = "<AtlasRelatedTermHeaderSource>",
        ///             status = "<DRAFT>",
        ///             steward = "<AtlasRelatedTermHeaderSteward>",
        ///             termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///         }
        ///     },
        ///     translationTerms = new[] {
        ///         new {
        ///             description = "<AtlasRelatedTermHeaderDescription>",
        ///             displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///             expression = "<AtlasRelatedTermHeaderExpression>",
        ///             relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///             source = "<AtlasRelatedTermHeaderSource>",
        ///             status = "<DRAFT>",
        ///             steward = "<AtlasRelatedTermHeaderSteward>",
        ///             termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///         }
        ///     },
        ///     usage = "<AtlasGlossaryTermUsage>",
        ///     validValues = new[] {
        ///         new {
        ///             description = "<AtlasRelatedTermHeaderDescription>",
        ///             displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///             expression = "<AtlasRelatedTermHeaderExpression>",
        ///             relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///             source = "<AtlasRelatedTermHeaderSource>",
        ///             status = "<DRAFT>",
        ///             steward = "<AtlasRelatedTermHeaderSteward>",
        ///             termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///         }
        ///     },
        ///     validValuesFor = new[] {
        ///         new {
        ///             description = "<AtlasRelatedTermHeaderDescription>",
        ///             displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///             expression = "<AtlasRelatedTermHeaderExpression>",
        ///             relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///             source = "<AtlasRelatedTermHeaderSource>",
        ///             status = "<DRAFT>",
        ///             steward = "<AtlasRelatedTermHeaderSteward>",
        ///             termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///         }
        ///     },
        /// };
        /// 
        /// Response response = client.CreateGlossaryTerm(RequestContent.Create(data), true);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("longDescription").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("qualifiedName").ToString());
        /// Console.WriteLine(result.GetProperty("shortDescription").ToString());
        /// Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("abbreviation").ToString());
        /// Console.WriteLine(result.GetProperty("templateName")[0].ToString());
        /// Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("createTime").ToString());
        /// Console.WriteLine(result.GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("updateTime").ToString());
        /// Console.WriteLine(result.GetProperty("updatedBy").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("resources")[0].GetProperty("displayName").ToString());
        /// Console.WriteLine(result.GetProperty("resources")[0].GetProperty("url").ToString());
        /// Console.WriteLine(result.GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
        /// Console.WriteLine(result.GetProperty("attributes").GetProperty("<test>").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("examples")[0].ToString());
        /// Console.WriteLine(result.GetProperty("isA")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("isA")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("isA")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("isA")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("isA")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("isA")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("isA")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("isA")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("usage").ToString());
        /// Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>AtlasGlossaryTerm</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       entityGuid: string, # Optional. The GUID of the entity.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. The end of the time boundary.
        ///           startTime: string, # Optional. The start of the time boundary.
        ///           timeZone: string, # Optional. The timezone of the time boundary.
        ///         }
        ///       ], # Optional. An array of time boundaries indicating validity periods.
        ///       source: string, # Optional. indicate the source who create the classification detail
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///     }
        ///   ], # Optional. An array of classifications.
        ///   longDescription: string, # Optional. The long version description.
        ///   name: string, # Optional. The name of the glossary object.
        ///   qualifiedName: string, # Optional. The qualified name of the glossary object.
        ///   shortDescription: string, # Optional. The short version of description.
        ///   lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///   guid: string, # Optional. The GUID of the object.
        ///   abbreviation: string, # Optional. The abbreviation of the term.
        ///   templateName: [AnyObject], # Optional.
        ///   anchor: {
        ///     displayText: string, # Optional. The display text.
        ///     glossaryGuid: string, # Optional. The GUID of the glossary.
        ///     relationGuid: string, # Optional. The GUID of the relationship.
        ///   }, # Optional. The glossary header with basic information.
        ///   antonyms: [
        ///     {
        ///       description: string, # Optional. The description of the related term.
        ///       displayText: string, # Optional. The display text.
        ///       expression: string, # Optional. The expression of the term.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       source: string, # Optional. The source of the term.
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///       steward: string, # Optional. The steward of the term.
        ///       termGuid: string, # Optional. The GUID of the term.
        ///     }
        ///   ], # Optional. An array of related term headers as antonyms.
        ///   createTime: number, # Optional. The created time of the record.
        ///   createdBy: string, # Optional. The user who created the record.
        ///   updateTime: number, # Optional. The update time of the record.
        ///   updatedBy: string, # Optional. The user who updated the record.
        ///   status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;, # Optional. Status of the AtlasGlossaryTerm
        ///   resources: [
        ///     {
        ///       displayName: string, # Optional. Display name for url.
        ///       url: string, # Optional. web url. http or https
        ///     }
        ///   ], # Optional. An array of resource link for term
        ///   contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. The dictionary of contacts for terms. Key could be Expert or Steward.
        ///   attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;, # Optional. The custom attributes of the term, which is map&lt;string,map&lt;string,object&gt;&gt;.
        /// The key of the first layer map is term template name.
        ///   assignedEntities: [
        ///     {
        ///       guid: string, # Optional. The GUID of the object.
        ///       typeName: string, # Optional. The name of the type.
        ///       uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The unique attributes of the object.
        ///       displayText: string, # Optional. The display text.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       relationshipType: string, # Optional.
        ///       relationshipAttributes: {
        ///         attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///         typeName: string, # Optional. The name of the type.
        ///         lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       }, # Optional. Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.
        ///       relationshipGuid: string, # Optional. The GUID of the relationship.
        ///       relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. The enum of relationship status.
        ///     }
        ///   ], # Optional. An array of related object IDs.
        ///   categories: [
        ///     {
        ///       categoryGuid: string, # Optional. The GUID of the category.
        ///       description: string, # Optional. The description of the record.
        ///       displayText: string, # Optional. The display text.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///     }
        ///   ], # Optional. An array of term categorization headers.
        ///   classifies: [AtlasRelatedTermHeader], # Optional. An array of related term headers.
        ///   examples: [string], # Optional. An array of examples.
        ///   isA: [AtlasRelatedTermHeader], # Optional. An array of related term headers indicating the is-a relationship.
        ///   preferredTerms: [AtlasRelatedTermHeader], # Optional. An array of preferred related term headers.
        ///   preferredToTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are preferred to.
        ///   replacedBy: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are replaced by.
        ///   replacementTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for replacement.
        ///   seeAlso: [AtlasRelatedTermHeader], # Optional. An array of related term headers for see also.
        ///   synonyms: [AtlasRelatedTermHeader], # Optional. An array of related term headers as synonyms.
        ///   translatedTerms: [AtlasRelatedTermHeader], # Optional. An array of translated related term headers.
        ///   translationTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for translation.
        ///   usage: string, # Optional. The usage of the term.
        ///   validValues: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values.
        ///   validValuesFor: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values for other records.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>AtlasGlossaryTerm</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       entityGuid: string, # Optional. The GUID of the entity.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. The end of the time boundary.
        ///           startTime: string, # Optional. The start of the time boundary.
        ///           timeZone: string, # Optional. The timezone of the time boundary.
        ///         }
        ///       ], # Optional. An array of time boundaries indicating validity periods.
        ///       source: string, # Optional. indicate the source who create the classification detail
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///     }
        ///   ], # Optional. An array of classifications.
        ///   longDescription: string, # Optional. The long version description.
        ///   name: string, # Optional. The name of the glossary object.
        ///   qualifiedName: string, # Optional. The qualified name of the glossary object.
        ///   shortDescription: string, # Optional. The short version of description.
        ///   lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///   guid: string, # Optional. The GUID of the object.
        ///   abbreviation: string, # Optional. The abbreviation of the term.
        ///   templateName: [AnyObject], # Optional.
        ///   anchor: {
        ///     displayText: string, # Optional. The display text.
        ///     glossaryGuid: string, # Optional. The GUID of the glossary.
        ///     relationGuid: string, # Optional. The GUID of the relationship.
        ///   }, # Optional. The glossary header with basic information.
        ///   antonyms: [
        ///     {
        ///       description: string, # Optional. The description of the related term.
        ///       displayText: string, # Optional. The display text.
        ///       expression: string, # Optional. The expression of the term.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       source: string, # Optional. The source of the term.
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///       steward: string, # Optional. The steward of the term.
        ///       termGuid: string, # Optional. The GUID of the term.
        ///     }
        ///   ], # Optional. An array of related term headers as antonyms.
        ///   createTime: number, # Optional. The created time of the record.
        ///   createdBy: string, # Optional. The user who created the record.
        ///   updateTime: number, # Optional. The update time of the record.
        ///   updatedBy: string, # Optional. The user who updated the record.
        ///   status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;, # Optional. Status of the AtlasGlossaryTerm
        ///   resources: [
        ///     {
        ///       displayName: string, # Optional. Display name for url.
        ///       url: string, # Optional. web url. http or https
        ///     }
        ///   ], # Optional. An array of resource link for term
        ///   contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. The dictionary of contacts for terms. Key could be Expert or Steward.
        ///   attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;, # Optional. The custom attributes of the term, which is map&lt;string,map&lt;string,object&gt;&gt;.
        /// The key of the first layer map is term template name.
        ///   assignedEntities: [
        ///     {
        ///       guid: string, # Optional. The GUID of the object.
        ///       typeName: string, # Optional. The name of the type.
        ///       uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The unique attributes of the object.
        ///       displayText: string, # Optional. The display text.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       relationshipType: string, # Optional.
        ///       relationshipAttributes: {
        ///         attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///         typeName: string, # Optional. The name of the type.
        ///         lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       }, # Optional. Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.
        ///       relationshipGuid: string, # Optional. The GUID of the relationship.
        ///       relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. The enum of relationship status.
        ///     }
        ///   ], # Optional. An array of related object IDs.
        ///   categories: [
        ///     {
        ///       categoryGuid: string, # Optional. The GUID of the category.
        ///       description: string, # Optional. The description of the record.
        ///       displayText: string, # Optional. The display text.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///     }
        ///   ], # Optional. An array of term categorization headers.
        ///   classifies: [AtlasRelatedTermHeader], # Optional. An array of related term headers.
        ///   examples: [string], # Optional. An array of examples.
        ///   isA: [AtlasRelatedTermHeader], # Optional. An array of related term headers indicating the is-a relationship.
        ///   preferredTerms: [AtlasRelatedTermHeader], # Optional. An array of preferred related term headers.
        ///   preferredToTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are preferred to.
        ///   replacedBy: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are replaced by.
        ///   replacementTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for replacement.
        ///   seeAlso: [AtlasRelatedTermHeader], # Optional. An array of related term headers for see also.
        ///   synonyms: [AtlasRelatedTermHeader], # Optional. An array of related term headers as synonyms.
        ///   translatedTerms: [AtlasRelatedTermHeader], # Optional. An array of translated related term headers.
        ///   translationTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for translation.
        ///   usage: string, # Optional. The usage of the term.
        ///   validValues: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values.
        ///   validValuesFor: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values for other records.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response CreateGlossaryTerm(RequestContent content, bool? includeTermHierarchy = null, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.CreateGlossaryTerm");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateGlossaryTermRequest(content, includeTermHierarchy, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a specific glossary term by its GUID. </summary>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="excludeRelationshipTypeList"> An array of relationship types which need to be excluded. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="termGuid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="termGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetGlossaryTermAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// Response response = await client.GetGlossaryTermAsync("<termGuid>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call GetGlossaryTermAsync with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// Response response = await client.GetGlossaryTermAsync("<termGuid>", true, new String[]{"<excludeRelationshipTypeList>"});
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("longDescription").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("qualifiedName").ToString());
        /// Console.WriteLine(result.GetProperty("shortDescription").ToString());
        /// Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("abbreviation").ToString());
        /// Console.WriteLine(result.GetProperty("templateName")[0].ToString());
        /// Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("createTime").ToString());
        /// Console.WriteLine(result.GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("updateTime").ToString());
        /// Console.WriteLine(result.GetProperty("updatedBy").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("resources")[0].GetProperty("displayName").ToString());
        /// Console.WriteLine(result.GetProperty("resources")[0].GetProperty("url").ToString());
        /// Console.WriteLine(result.GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
        /// Console.WriteLine(result.GetProperty("attributes").GetProperty("<test>").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("examples")[0].ToString());
        /// Console.WriteLine(result.GetProperty("isA")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("isA")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("isA")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("isA")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("isA")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("isA")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("isA")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("isA")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("usage").ToString());
        /// Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>AtlasGlossaryTerm</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       entityGuid: string, # Optional. The GUID of the entity.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. The end of the time boundary.
        ///           startTime: string, # Optional. The start of the time boundary.
        ///           timeZone: string, # Optional. The timezone of the time boundary.
        ///         }
        ///       ], # Optional. An array of time boundaries indicating validity periods.
        ///       source: string, # Optional. indicate the source who create the classification detail
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///     }
        ///   ], # Optional. An array of classifications.
        ///   longDescription: string, # Optional. The long version description.
        ///   name: string, # Optional. The name of the glossary object.
        ///   qualifiedName: string, # Optional. The qualified name of the glossary object.
        ///   shortDescription: string, # Optional. The short version of description.
        ///   lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///   guid: string, # Optional. The GUID of the object.
        ///   abbreviation: string, # Optional. The abbreviation of the term.
        ///   templateName: [AnyObject], # Optional.
        ///   anchor: {
        ///     displayText: string, # Optional. The display text.
        ///     glossaryGuid: string, # Optional. The GUID of the glossary.
        ///     relationGuid: string, # Optional. The GUID of the relationship.
        ///   }, # Optional. The glossary header with basic information.
        ///   antonyms: [
        ///     {
        ///       description: string, # Optional. The description of the related term.
        ///       displayText: string, # Optional. The display text.
        ///       expression: string, # Optional. The expression of the term.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       source: string, # Optional. The source of the term.
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///       steward: string, # Optional. The steward of the term.
        ///       termGuid: string, # Optional. The GUID of the term.
        ///     }
        ///   ], # Optional. An array of related term headers as antonyms.
        ///   createTime: number, # Optional. The created time of the record.
        ///   createdBy: string, # Optional. The user who created the record.
        ///   updateTime: number, # Optional. The update time of the record.
        ///   updatedBy: string, # Optional. The user who updated the record.
        ///   status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;, # Optional. Status of the AtlasGlossaryTerm
        ///   resources: [
        ///     {
        ///       displayName: string, # Optional. Display name for url.
        ///       url: string, # Optional. web url. http or https
        ///     }
        ///   ], # Optional. An array of resource link for term
        ///   contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. The dictionary of contacts for terms. Key could be Expert or Steward.
        ///   attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;, # Optional. The custom attributes of the term, which is map&lt;string,map&lt;string,object&gt;&gt;.
        /// The key of the first layer map is term template name.
        ///   assignedEntities: [
        ///     {
        ///       guid: string, # Optional. The GUID of the object.
        ///       typeName: string, # Optional. The name of the type.
        ///       uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The unique attributes of the object.
        ///       displayText: string, # Optional. The display text.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       relationshipType: string, # Optional.
        ///       relationshipAttributes: {
        ///         attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///         typeName: string, # Optional. The name of the type.
        ///         lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       }, # Optional. Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.
        ///       relationshipGuid: string, # Optional. The GUID of the relationship.
        ///       relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. The enum of relationship status.
        ///     }
        ///   ], # Optional. An array of related object IDs.
        ///   categories: [
        ///     {
        ///       categoryGuid: string, # Optional. The GUID of the category.
        ///       description: string, # Optional. The description of the record.
        ///       displayText: string, # Optional. The display text.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///     }
        ///   ], # Optional. An array of term categorization headers.
        ///   classifies: [AtlasRelatedTermHeader], # Optional. An array of related term headers.
        ///   examples: [string], # Optional. An array of examples.
        ///   isA: [AtlasRelatedTermHeader], # Optional. An array of related term headers indicating the is-a relationship.
        ///   preferredTerms: [AtlasRelatedTermHeader], # Optional. An array of preferred related term headers.
        ///   preferredToTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are preferred to.
        ///   replacedBy: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are replaced by.
        ///   replacementTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for replacement.
        ///   seeAlso: [AtlasRelatedTermHeader], # Optional. An array of related term headers for see also.
        ///   synonyms: [AtlasRelatedTermHeader], # Optional. An array of related term headers as synonyms.
        ///   translatedTerms: [AtlasRelatedTermHeader], # Optional. An array of translated related term headers.
        ///   translationTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for translation.
        ///   usage: string, # Optional. The usage of the term.
        ///   validValues: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values.
        ///   validValuesFor: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values for other records.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetGlossaryTermAsync(string termGuid, bool? includeTermHierarchy = null, IEnumerable<string> excludeRelationshipTypeList = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(termGuid, nameof(termGuid));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.GetGlossaryTerm");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetGlossaryTermRequest(termGuid, includeTermHierarchy, excludeRelationshipTypeList, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a specific glossary term by its GUID. </summary>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="excludeRelationshipTypeList"> An array of relationship types which need to be excluded. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="termGuid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="termGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetGlossaryTerm with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// Response response = client.GetGlossaryTerm("<termGuid>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call GetGlossaryTerm with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// Response response = client.GetGlossaryTerm("<termGuid>", true, new String[]{"<excludeRelationshipTypeList>"});
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("longDescription").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("qualifiedName").ToString());
        /// Console.WriteLine(result.GetProperty("shortDescription").ToString());
        /// Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("abbreviation").ToString());
        /// Console.WriteLine(result.GetProperty("templateName")[0].ToString());
        /// Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("createTime").ToString());
        /// Console.WriteLine(result.GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("updateTime").ToString());
        /// Console.WriteLine(result.GetProperty("updatedBy").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("resources")[0].GetProperty("displayName").ToString());
        /// Console.WriteLine(result.GetProperty("resources")[0].GetProperty("url").ToString());
        /// Console.WriteLine(result.GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
        /// Console.WriteLine(result.GetProperty("attributes").GetProperty("<test>").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("examples")[0].ToString());
        /// Console.WriteLine(result.GetProperty("isA")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("isA")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("isA")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("isA")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("isA")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("isA")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("isA")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("isA")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("usage").ToString());
        /// Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>AtlasGlossaryTerm</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       entityGuid: string, # Optional. The GUID of the entity.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. The end of the time boundary.
        ///           startTime: string, # Optional. The start of the time boundary.
        ///           timeZone: string, # Optional. The timezone of the time boundary.
        ///         }
        ///       ], # Optional. An array of time boundaries indicating validity periods.
        ///       source: string, # Optional. indicate the source who create the classification detail
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///     }
        ///   ], # Optional. An array of classifications.
        ///   longDescription: string, # Optional. The long version description.
        ///   name: string, # Optional. The name of the glossary object.
        ///   qualifiedName: string, # Optional. The qualified name of the glossary object.
        ///   shortDescription: string, # Optional. The short version of description.
        ///   lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///   guid: string, # Optional. The GUID of the object.
        ///   abbreviation: string, # Optional. The abbreviation of the term.
        ///   templateName: [AnyObject], # Optional.
        ///   anchor: {
        ///     displayText: string, # Optional. The display text.
        ///     glossaryGuid: string, # Optional. The GUID of the glossary.
        ///     relationGuid: string, # Optional. The GUID of the relationship.
        ///   }, # Optional. The glossary header with basic information.
        ///   antonyms: [
        ///     {
        ///       description: string, # Optional. The description of the related term.
        ///       displayText: string, # Optional. The display text.
        ///       expression: string, # Optional. The expression of the term.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       source: string, # Optional. The source of the term.
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///       steward: string, # Optional. The steward of the term.
        ///       termGuid: string, # Optional. The GUID of the term.
        ///     }
        ///   ], # Optional. An array of related term headers as antonyms.
        ///   createTime: number, # Optional. The created time of the record.
        ///   createdBy: string, # Optional. The user who created the record.
        ///   updateTime: number, # Optional. The update time of the record.
        ///   updatedBy: string, # Optional. The user who updated the record.
        ///   status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;, # Optional. Status of the AtlasGlossaryTerm
        ///   resources: [
        ///     {
        ///       displayName: string, # Optional. Display name for url.
        ///       url: string, # Optional. web url. http or https
        ///     }
        ///   ], # Optional. An array of resource link for term
        ///   contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. The dictionary of contacts for terms. Key could be Expert or Steward.
        ///   attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;, # Optional. The custom attributes of the term, which is map&lt;string,map&lt;string,object&gt;&gt;.
        /// The key of the first layer map is term template name.
        ///   assignedEntities: [
        ///     {
        ///       guid: string, # Optional. The GUID of the object.
        ///       typeName: string, # Optional. The name of the type.
        ///       uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The unique attributes of the object.
        ///       displayText: string, # Optional. The display text.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       relationshipType: string, # Optional.
        ///       relationshipAttributes: {
        ///         attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///         typeName: string, # Optional. The name of the type.
        ///         lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       }, # Optional. Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.
        ///       relationshipGuid: string, # Optional. The GUID of the relationship.
        ///       relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. The enum of relationship status.
        ///     }
        ///   ], # Optional. An array of related object IDs.
        ///   categories: [
        ///     {
        ///       categoryGuid: string, # Optional. The GUID of the category.
        ///       description: string, # Optional. The description of the record.
        ///       displayText: string, # Optional. The display text.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///     }
        ///   ], # Optional. An array of term categorization headers.
        ///   classifies: [AtlasRelatedTermHeader], # Optional. An array of related term headers.
        ///   examples: [string], # Optional. An array of examples.
        ///   isA: [AtlasRelatedTermHeader], # Optional. An array of related term headers indicating the is-a relationship.
        ///   preferredTerms: [AtlasRelatedTermHeader], # Optional. An array of preferred related term headers.
        ///   preferredToTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are preferred to.
        ///   replacedBy: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are replaced by.
        ///   replacementTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for replacement.
        ///   seeAlso: [AtlasRelatedTermHeader], # Optional. An array of related term headers for see also.
        ///   synonyms: [AtlasRelatedTermHeader], # Optional. An array of related term headers as synonyms.
        ///   translatedTerms: [AtlasRelatedTermHeader], # Optional. An array of translated related term headers.
        ///   translationTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for translation.
        ///   usage: string, # Optional. The usage of the term.
        ///   validValues: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values.
        ///   validValuesFor: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values for other records.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetGlossaryTerm(string termGuid, bool? includeTermHierarchy = null, IEnumerable<string> excludeRelationshipTypeList = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(termGuid, nameof(termGuid));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.GetGlossaryTerm");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetGlossaryTermRequest(termGuid, includeTermHierarchy, excludeRelationshipTypeList, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update the given glossary term by its GUID. </summary>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="termGuid"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="termGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call UpdateGlossaryTermAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.UpdateGlossaryTermAsync("<termGuid>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call UpdateGlossaryTermAsync with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// var data = new {
        ///     classifications = new[] {
        ///         new {
        ///             attributes = new {
        ///                 key = new {},
        ///             },
        ///             typeName = "<AtlasStructTypeName>",
        ///             lastModifiedTS = "<LastModifiedTS>",
        ///             entityGuid = "<AtlasClassificationEntityGuid>",
        ///             entityStatus = "<ACTIVE>",
        ///             removePropagationsOnEntityDelete = true,
        ///             validityPeriods = new[] {
        ///                 new {
        ///                     endTime = "<TimeBoundaryEndTime>",
        ///                     startTime = "<TimeBoundaryStartTime>",
        ///                     timeZone = "<TimeBoundaryTimeZone>",
        ///                 }
        ///             },
        ///             source = "<AtlasClassificationSource>",
        ///             sourceDetails = new {
        ///                 key = new {},
        ///             },
        ///         }
        ///     },
        ///     longDescription = "<AtlasGlossaryBaseObjectLongDescription>",
        ///     name = "<AtlasGlossaryBaseObjectName>",
        ///     qualifiedName = "<AtlasGlossaryBaseObjectQualifiedName>",
        ///     shortDescription = "<AtlasGlossaryBaseObjectShortDescription>",
        ///     lastModifiedTS = "<LastModifiedTS>",
        ///     guid = "<AtlasBaseModelObjectGuid>",
        ///     abbreviation = "<AtlasGlossaryTermAbbreviation>",
        ///     templateName = new[] {
        ///         new {}
        ///     },
        ///     anchor = new {
        ///         displayText = "<AtlasGlossaryHeaderDisplayText>",
        ///         glossaryGuid = "<AtlasGlossaryHeaderGlossaryGuid>",
        ///         relationGuid = "<AtlasGlossaryHeaderRelationGuid>",
        ///     },
        ///     antonyms = new[] {
        ///         new {
        ///             description = "<AtlasRelatedTermHeaderDescription>",
        ///             displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///             expression = "<AtlasRelatedTermHeaderExpression>",
        ///             relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///             source = "<AtlasRelatedTermHeaderSource>",
        ///             status = "<DRAFT>",
        ///             steward = "<AtlasRelatedTermHeaderSteward>",
        ///             termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///         }
        ///     },
        ///     createTime = 1234,
        ///     createdBy = "<AtlasGlossaryTermCreatedBy>",
        ///     updateTime = 1234,
        ///     updatedBy = "<AtlasGlossaryTermUpdatedBy>",
        ///     status = "<Draft>",
        ///     resources = new[] {
        ///         new {
        ///             displayName = "<ResourceLinkDisplayName>",
        ///             url = "<ResourceLinkUrl>",
        ///         }
        ///     },
        ///     contacts = new {
        ///         key = new[] {
        ///             new {
        ///                 id = "<ContactBasicId>",
        ///                 info = "<ContactBasicInfo>",
        ///             }
        ///         },
        ///     },
        ///     attributes = new {
        ///         key = new {
        ///             key = new {},
        ///         },
        ///     },
        ///     assignedEntities = new[] {
        ///         new {
        ///             guid = "<AtlasObjectIdGuid>",
        ///             typeName = "<AtlasObjectIdTypeName>",
        ///             uniqueAttributes = new {
        ///                 key = new {},
        ///             },
        ///             displayText = "<AtlasRelatedObjectIdDisplayText>",
        ///             entityStatus = "<ACTIVE>",
        ///             relationshipType = "<AtlasRelatedObjectIdRelationshipType>",
        ///             relationshipAttributes = new {
        ///                 attributes = new {
        ///                     key = new {},
        ///                 },
        ///                 typeName = "<AtlasStructTypeName>",
        ///                 lastModifiedTS = "<LastModifiedTS>",
        ///                 entityGuid = "<AtlasClassificationEntityGuid>",
        ///                 entityStatus = "<ACTIVE>",
        ///                 removePropagationsOnEntityDelete = true,
        ///                 validityPeriods = new[] {
        ///                     new {
        ///                         endTime = "<TimeBoundaryEndTime>",
        ///                         startTime = "<TimeBoundaryStartTime>",
        ///                         timeZone = "<TimeBoundaryTimeZone>",
        ///                     }
        ///                 },
        ///                 source = "<AtlasClassificationSource>",
        ///                 sourceDetails = new {
        ///                     key = new {},
        ///                 },
        ///             },
        ///             relationshipGuid = "<AtlasRelatedObjectIdRelationshipGuid>",
        ///             relationshipStatus = "<ACTIVE>",
        ///         }
        ///     },
        ///     categories = new[] {
        ///         new {
        ///             categoryGuid = "<AtlasTermCategorizationHeaderCategoryGuid>",
        ///             description = "<AtlasTermCategorizationHeaderDescription>",
        ///             displayText = "<AtlasTermCategorizationHeaderDisplayText>",
        ///             relationGuid = "<AtlasTermCategorizationHeaderRelationGuid>",
        ///             status = "<DRAFT>",
        ///         }
        ///     },
        ///     classifies = new[] {
        ///         new {
        ///             description = "<AtlasRelatedTermHeaderDescription>",
        ///             displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///             expression = "<AtlasRelatedTermHeaderExpression>",
        ///             relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///             source = "<AtlasRelatedTermHeaderSource>",
        ///             status = "<DRAFT>",
        ///             steward = "<AtlasRelatedTermHeaderSteward>",
        ///             termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///         }
        ///     },
        ///     examples = new[] {
        ///         "<AtlasGlossaryTermExamplesItem>"
        ///     },
        ///     isA = new[] {
        ///         new {
        ///             description = "<AtlasRelatedTermHeaderDescription>",
        ///             displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///             expression = "<AtlasRelatedTermHeaderExpression>",
        ///             relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///             source = "<AtlasRelatedTermHeaderSource>",
        ///             status = "<DRAFT>",
        ///             steward = "<AtlasRelatedTermHeaderSteward>",
        ///             termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///         }
        ///     },
        ///     preferredTerms = new[] {
        ///         new {
        ///             description = "<AtlasRelatedTermHeaderDescription>",
        ///             displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///             expression = "<AtlasRelatedTermHeaderExpression>",
        ///             relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///             source = "<AtlasRelatedTermHeaderSource>",
        ///             status = "<DRAFT>",
        ///             steward = "<AtlasRelatedTermHeaderSteward>",
        ///             termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///         }
        ///     },
        ///     preferredToTerms = new[] {
        ///         new {
        ///             description = "<AtlasRelatedTermHeaderDescription>",
        ///             displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///             expression = "<AtlasRelatedTermHeaderExpression>",
        ///             relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///             source = "<AtlasRelatedTermHeaderSource>",
        ///             status = "<DRAFT>",
        ///             steward = "<AtlasRelatedTermHeaderSteward>",
        ///             termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///         }
        ///     },
        ///     replacedBy = new[] {
        ///         new {
        ///             description = "<AtlasRelatedTermHeaderDescription>",
        ///             displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///             expression = "<AtlasRelatedTermHeaderExpression>",
        ///             relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///             source = "<AtlasRelatedTermHeaderSource>",
        ///             status = "<DRAFT>",
        ///             steward = "<AtlasRelatedTermHeaderSteward>",
        ///             termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///         }
        ///     },
        ///     replacementTerms = new[] {
        ///         new {
        ///             description = "<AtlasRelatedTermHeaderDescription>",
        ///             displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///             expression = "<AtlasRelatedTermHeaderExpression>",
        ///             relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///             source = "<AtlasRelatedTermHeaderSource>",
        ///             status = "<DRAFT>",
        ///             steward = "<AtlasRelatedTermHeaderSteward>",
        ///             termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///         }
        ///     },
        ///     seeAlso = new[] {
        ///         new {
        ///             description = "<AtlasRelatedTermHeaderDescription>",
        ///             displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///             expression = "<AtlasRelatedTermHeaderExpression>",
        ///             relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///             source = "<AtlasRelatedTermHeaderSource>",
        ///             status = "<DRAFT>",
        ///             steward = "<AtlasRelatedTermHeaderSteward>",
        ///             termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///         }
        ///     },
        ///     synonyms = new[] {
        ///         new {
        ///             description = "<AtlasRelatedTermHeaderDescription>",
        ///             displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///             expression = "<AtlasRelatedTermHeaderExpression>",
        ///             relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///             source = "<AtlasRelatedTermHeaderSource>",
        ///             status = "<DRAFT>",
        ///             steward = "<AtlasRelatedTermHeaderSteward>",
        ///             termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///         }
        ///     },
        ///     translatedTerms = new[] {
        ///         new {
        ///             description = "<AtlasRelatedTermHeaderDescription>",
        ///             displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///             expression = "<AtlasRelatedTermHeaderExpression>",
        ///             relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///             source = "<AtlasRelatedTermHeaderSource>",
        ///             status = "<DRAFT>",
        ///             steward = "<AtlasRelatedTermHeaderSteward>",
        ///             termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///         }
        ///     },
        ///     translationTerms = new[] {
        ///         new {
        ///             description = "<AtlasRelatedTermHeaderDescription>",
        ///             displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///             expression = "<AtlasRelatedTermHeaderExpression>",
        ///             relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///             source = "<AtlasRelatedTermHeaderSource>",
        ///             status = "<DRAFT>",
        ///             steward = "<AtlasRelatedTermHeaderSteward>",
        ///             termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///         }
        ///     },
        ///     usage = "<AtlasGlossaryTermUsage>",
        ///     validValues = new[] {
        ///         new {
        ///             description = "<AtlasRelatedTermHeaderDescription>",
        ///             displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///             expression = "<AtlasRelatedTermHeaderExpression>",
        ///             relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///             source = "<AtlasRelatedTermHeaderSource>",
        ///             status = "<DRAFT>",
        ///             steward = "<AtlasRelatedTermHeaderSteward>",
        ///             termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///         }
        ///     },
        ///     validValuesFor = new[] {
        ///         new {
        ///             description = "<AtlasRelatedTermHeaderDescription>",
        ///             displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///             expression = "<AtlasRelatedTermHeaderExpression>",
        ///             relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///             source = "<AtlasRelatedTermHeaderSource>",
        ///             status = "<DRAFT>",
        ///             steward = "<AtlasRelatedTermHeaderSteward>",
        ///             termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///         }
        ///     },
        /// };
        /// 
        /// Response response = await client.UpdateGlossaryTermAsync("<termGuid>", RequestContent.Create(data), true);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("longDescription").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("qualifiedName").ToString());
        /// Console.WriteLine(result.GetProperty("shortDescription").ToString());
        /// Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("abbreviation").ToString());
        /// Console.WriteLine(result.GetProperty("templateName")[0].ToString());
        /// Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("createTime").ToString());
        /// Console.WriteLine(result.GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("updateTime").ToString());
        /// Console.WriteLine(result.GetProperty("updatedBy").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("resources")[0].GetProperty("displayName").ToString());
        /// Console.WriteLine(result.GetProperty("resources")[0].GetProperty("url").ToString());
        /// Console.WriteLine(result.GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
        /// Console.WriteLine(result.GetProperty("attributes").GetProperty("<test>").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("examples")[0].ToString());
        /// Console.WriteLine(result.GetProperty("isA")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("isA")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("isA")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("isA")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("isA")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("isA")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("isA")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("isA")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("usage").ToString());
        /// Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>AtlasGlossaryTerm</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       entityGuid: string, # Optional. The GUID of the entity.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. The end of the time boundary.
        ///           startTime: string, # Optional. The start of the time boundary.
        ///           timeZone: string, # Optional. The timezone of the time boundary.
        ///         }
        ///       ], # Optional. An array of time boundaries indicating validity periods.
        ///       source: string, # Optional. indicate the source who create the classification detail
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///     }
        ///   ], # Optional. An array of classifications.
        ///   longDescription: string, # Optional. The long version description.
        ///   name: string, # Optional. The name of the glossary object.
        ///   qualifiedName: string, # Optional. The qualified name of the glossary object.
        ///   shortDescription: string, # Optional. The short version of description.
        ///   lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///   guid: string, # Optional. The GUID of the object.
        ///   abbreviation: string, # Optional. The abbreviation of the term.
        ///   templateName: [AnyObject], # Optional.
        ///   anchor: {
        ///     displayText: string, # Optional. The display text.
        ///     glossaryGuid: string, # Optional. The GUID of the glossary.
        ///     relationGuid: string, # Optional. The GUID of the relationship.
        ///   }, # Optional. The glossary header with basic information.
        ///   antonyms: [
        ///     {
        ///       description: string, # Optional. The description of the related term.
        ///       displayText: string, # Optional. The display text.
        ///       expression: string, # Optional. The expression of the term.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       source: string, # Optional. The source of the term.
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///       steward: string, # Optional. The steward of the term.
        ///       termGuid: string, # Optional. The GUID of the term.
        ///     }
        ///   ], # Optional. An array of related term headers as antonyms.
        ///   createTime: number, # Optional. The created time of the record.
        ///   createdBy: string, # Optional. The user who created the record.
        ///   updateTime: number, # Optional. The update time of the record.
        ///   updatedBy: string, # Optional. The user who updated the record.
        ///   status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;, # Optional. Status of the AtlasGlossaryTerm
        ///   resources: [
        ///     {
        ///       displayName: string, # Optional. Display name for url.
        ///       url: string, # Optional. web url. http or https
        ///     }
        ///   ], # Optional. An array of resource link for term
        ///   contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. The dictionary of contacts for terms. Key could be Expert or Steward.
        ///   attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;, # Optional. The custom attributes of the term, which is map&lt;string,map&lt;string,object&gt;&gt;.
        /// The key of the first layer map is term template name.
        ///   assignedEntities: [
        ///     {
        ///       guid: string, # Optional. The GUID of the object.
        ///       typeName: string, # Optional. The name of the type.
        ///       uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The unique attributes of the object.
        ///       displayText: string, # Optional. The display text.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       relationshipType: string, # Optional.
        ///       relationshipAttributes: {
        ///         attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///         typeName: string, # Optional. The name of the type.
        ///         lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       }, # Optional. Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.
        ///       relationshipGuid: string, # Optional. The GUID of the relationship.
        ///       relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. The enum of relationship status.
        ///     }
        ///   ], # Optional. An array of related object IDs.
        ///   categories: [
        ///     {
        ///       categoryGuid: string, # Optional. The GUID of the category.
        ///       description: string, # Optional. The description of the record.
        ///       displayText: string, # Optional. The display text.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///     }
        ///   ], # Optional. An array of term categorization headers.
        ///   classifies: [AtlasRelatedTermHeader], # Optional. An array of related term headers.
        ///   examples: [string], # Optional. An array of examples.
        ///   isA: [AtlasRelatedTermHeader], # Optional. An array of related term headers indicating the is-a relationship.
        ///   preferredTerms: [AtlasRelatedTermHeader], # Optional. An array of preferred related term headers.
        ///   preferredToTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are preferred to.
        ///   replacedBy: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are replaced by.
        ///   replacementTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for replacement.
        ///   seeAlso: [AtlasRelatedTermHeader], # Optional. An array of related term headers for see also.
        ///   synonyms: [AtlasRelatedTermHeader], # Optional. An array of related term headers as synonyms.
        ///   translatedTerms: [AtlasRelatedTermHeader], # Optional. An array of translated related term headers.
        ///   translationTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for translation.
        ///   usage: string, # Optional. The usage of the term.
        ///   validValues: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values.
        ///   validValuesFor: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values for other records.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>AtlasGlossaryTerm</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       entityGuid: string, # Optional. The GUID of the entity.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. The end of the time boundary.
        ///           startTime: string, # Optional. The start of the time boundary.
        ///           timeZone: string, # Optional. The timezone of the time boundary.
        ///         }
        ///       ], # Optional. An array of time boundaries indicating validity periods.
        ///       source: string, # Optional. indicate the source who create the classification detail
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///     }
        ///   ], # Optional. An array of classifications.
        ///   longDescription: string, # Optional. The long version description.
        ///   name: string, # Optional. The name of the glossary object.
        ///   qualifiedName: string, # Optional. The qualified name of the glossary object.
        ///   shortDescription: string, # Optional. The short version of description.
        ///   lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///   guid: string, # Optional. The GUID of the object.
        ///   abbreviation: string, # Optional. The abbreviation of the term.
        ///   templateName: [AnyObject], # Optional.
        ///   anchor: {
        ///     displayText: string, # Optional. The display text.
        ///     glossaryGuid: string, # Optional. The GUID of the glossary.
        ///     relationGuid: string, # Optional. The GUID of the relationship.
        ///   }, # Optional. The glossary header with basic information.
        ///   antonyms: [
        ///     {
        ///       description: string, # Optional. The description of the related term.
        ///       displayText: string, # Optional. The display text.
        ///       expression: string, # Optional. The expression of the term.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       source: string, # Optional. The source of the term.
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///       steward: string, # Optional. The steward of the term.
        ///       termGuid: string, # Optional. The GUID of the term.
        ///     }
        ///   ], # Optional. An array of related term headers as antonyms.
        ///   createTime: number, # Optional. The created time of the record.
        ///   createdBy: string, # Optional. The user who created the record.
        ///   updateTime: number, # Optional. The update time of the record.
        ///   updatedBy: string, # Optional. The user who updated the record.
        ///   status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;, # Optional. Status of the AtlasGlossaryTerm
        ///   resources: [
        ///     {
        ///       displayName: string, # Optional. Display name for url.
        ///       url: string, # Optional. web url. http or https
        ///     }
        ///   ], # Optional. An array of resource link for term
        ///   contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. The dictionary of contacts for terms. Key could be Expert or Steward.
        ///   attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;, # Optional. The custom attributes of the term, which is map&lt;string,map&lt;string,object&gt;&gt;.
        /// The key of the first layer map is term template name.
        ///   assignedEntities: [
        ///     {
        ///       guid: string, # Optional. The GUID of the object.
        ///       typeName: string, # Optional. The name of the type.
        ///       uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The unique attributes of the object.
        ///       displayText: string, # Optional. The display text.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       relationshipType: string, # Optional.
        ///       relationshipAttributes: {
        ///         attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///         typeName: string, # Optional. The name of the type.
        ///         lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       }, # Optional. Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.
        ///       relationshipGuid: string, # Optional. The GUID of the relationship.
        ///       relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. The enum of relationship status.
        ///     }
        ///   ], # Optional. An array of related object IDs.
        ///   categories: [
        ///     {
        ///       categoryGuid: string, # Optional. The GUID of the category.
        ///       description: string, # Optional. The description of the record.
        ///       displayText: string, # Optional. The display text.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///     }
        ///   ], # Optional. An array of term categorization headers.
        ///   classifies: [AtlasRelatedTermHeader], # Optional. An array of related term headers.
        ///   examples: [string], # Optional. An array of examples.
        ///   isA: [AtlasRelatedTermHeader], # Optional. An array of related term headers indicating the is-a relationship.
        ///   preferredTerms: [AtlasRelatedTermHeader], # Optional. An array of preferred related term headers.
        ///   preferredToTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are preferred to.
        ///   replacedBy: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are replaced by.
        ///   replacementTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for replacement.
        ///   seeAlso: [AtlasRelatedTermHeader], # Optional. An array of related term headers for see also.
        ///   synonyms: [AtlasRelatedTermHeader], # Optional. An array of related term headers as synonyms.
        ///   translatedTerms: [AtlasRelatedTermHeader], # Optional. An array of translated related term headers.
        ///   translationTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for translation.
        ///   usage: string, # Optional. The usage of the term.
        ///   validValues: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values.
        ///   validValuesFor: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values for other records.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> UpdateGlossaryTermAsync(string termGuid, RequestContent content, bool? includeTermHierarchy = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(termGuid, nameof(termGuid));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.UpdateGlossaryTerm");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateGlossaryTermRequest(termGuid, content, includeTermHierarchy, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update the given glossary term by its GUID. </summary>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="termGuid"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="termGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call UpdateGlossaryTerm with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.UpdateGlossaryTerm("<termGuid>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call UpdateGlossaryTerm with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// var data = new {
        ///     classifications = new[] {
        ///         new {
        ///             attributes = new {
        ///                 key = new {},
        ///             },
        ///             typeName = "<AtlasStructTypeName>",
        ///             lastModifiedTS = "<LastModifiedTS>",
        ///             entityGuid = "<AtlasClassificationEntityGuid>",
        ///             entityStatus = "<ACTIVE>",
        ///             removePropagationsOnEntityDelete = true,
        ///             validityPeriods = new[] {
        ///                 new {
        ///                     endTime = "<TimeBoundaryEndTime>",
        ///                     startTime = "<TimeBoundaryStartTime>",
        ///                     timeZone = "<TimeBoundaryTimeZone>",
        ///                 }
        ///             },
        ///             source = "<AtlasClassificationSource>",
        ///             sourceDetails = new {
        ///                 key = new {},
        ///             },
        ///         }
        ///     },
        ///     longDescription = "<AtlasGlossaryBaseObjectLongDescription>",
        ///     name = "<AtlasGlossaryBaseObjectName>",
        ///     qualifiedName = "<AtlasGlossaryBaseObjectQualifiedName>",
        ///     shortDescription = "<AtlasGlossaryBaseObjectShortDescription>",
        ///     lastModifiedTS = "<LastModifiedTS>",
        ///     guid = "<AtlasBaseModelObjectGuid>",
        ///     abbreviation = "<AtlasGlossaryTermAbbreviation>",
        ///     templateName = new[] {
        ///         new {}
        ///     },
        ///     anchor = new {
        ///         displayText = "<AtlasGlossaryHeaderDisplayText>",
        ///         glossaryGuid = "<AtlasGlossaryHeaderGlossaryGuid>",
        ///         relationGuid = "<AtlasGlossaryHeaderRelationGuid>",
        ///     },
        ///     antonyms = new[] {
        ///         new {
        ///             description = "<AtlasRelatedTermHeaderDescription>",
        ///             displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///             expression = "<AtlasRelatedTermHeaderExpression>",
        ///             relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///             source = "<AtlasRelatedTermHeaderSource>",
        ///             status = "<DRAFT>",
        ///             steward = "<AtlasRelatedTermHeaderSteward>",
        ///             termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///         }
        ///     },
        ///     createTime = 1234,
        ///     createdBy = "<AtlasGlossaryTermCreatedBy>",
        ///     updateTime = 1234,
        ///     updatedBy = "<AtlasGlossaryTermUpdatedBy>",
        ///     status = "<Draft>",
        ///     resources = new[] {
        ///         new {
        ///             displayName = "<ResourceLinkDisplayName>",
        ///             url = "<ResourceLinkUrl>",
        ///         }
        ///     },
        ///     contacts = new {
        ///         key = new[] {
        ///             new {
        ///                 id = "<ContactBasicId>",
        ///                 info = "<ContactBasicInfo>",
        ///             }
        ///         },
        ///     },
        ///     attributes = new {
        ///         key = new {
        ///             key = new {},
        ///         },
        ///     },
        ///     assignedEntities = new[] {
        ///         new {
        ///             guid = "<AtlasObjectIdGuid>",
        ///             typeName = "<AtlasObjectIdTypeName>",
        ///             uniqueAttributes = new {
        ///                 key = new {},
        ///             },
        ///             displayText = "<AtlasRelatedObjectIdDisplayText>",
        ///             entityStatus = "<ACTIVE>",
        ///             relationshipType = "<AtlasRelatedObjectIdRelationshipType>",
        ///             relationshipAttributes = new {
        ///                 attributes = new {
        ///                     key = new {},
        ///                 },
        ///                 typeName = "<AtlasStructTypeName>",
        ///                 lastModifiedTS = "<LastModifiedTS>",
        ///                 entityGuid = "<AtlasClassificationEntityGuid>",
        ///                 entityStatus = "<ACTIVE>",
        ///                 removePropagationsOnEntityDelete = true,
        ///                 validityPeriods = new[] {
        ///                     new {
        ///                         endTime = "<TimeBoundaryEndTime>",
        ///                         startTime = "<TimeBoundaryStartTime>",
        ///                         timeZone = "<TimeBoundaryTimeZone>",
        ///                     }
        ///                 },
        ///                 source = "<AtlasClassificationSource>",
        ///                 sourceDetails = new {
        ///                     key = new {},
        ///                 },
        ///             },
        ///             relationshipGuid = "<AtlasRelatedObjectIdRelationshipGuid>",
        ///             relationshipStatus = "<ACTIVE>",
        ///         }
        ///     },
        ///     categories = new[] {
        ///         new {
        ///             categoryGuid = "<AtlasTermCategorizationHeaderCategoryGuid>",
        ///             description = "<AtlasTermCategorizationHeaderDescription>",
        ///             displayText = "<AtlasTermCategorizationHeaderDisplayText>",
        ///             relationGuid = "<AtlasTermCategorizationHeaderRelationGuid>",
        ///             status = "<DRAFT>",
        ///         }
        ///     },
        ///     classifies = new[] {
        ///         new {
        ///             description = "<AtlasRelatedTermHeaderDescription>",
        ///             displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///             expression = "<AtlasRelatedTermHeaderExpression>",
        ///             relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///             source = "<AtlasRelatedTermHeaderSource>",
        ///             status = "<DRAFT>",
        ///             steward = "<AtlasRelatedTermHeaderSteward>",
        ///             termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///         }
        ///     },
        ///     examples = new[] {
        ///         "<AtlasGlossaryTermExamplesItem>"
        ///     },
        ///     isA = new[] {
        ///         new {
        ///             description = "<AtlasRelatedTermHeaderDescription>",
        ///             displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///             expression = "<AtlasRelatedTermHeaderExpression>",
        ///             relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///             source = "<AtlasRelatedTermHeaderSource>",
        ///             status = "<DRAFT>",
        ///             steward = "<AtlasRelatedTermHeaderSteward>",
        ///             termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///         }
        ///     },
        ///     preferredTerms = new[] {
        ///         new {
        ///             description = "<AtlasRelatedTermHeaderDescription>",
        ///             displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///             expression = "<AtlasRelatedTermHeaderExpression>",
        ///             relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///             source = "<AtlasRelatedTermHeaderSource>",
        ///             status = "<DRAFT>",
        ///             steward = "<AtlasRelatedTermHeaderSteward>",
        ///             termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///         }
        ///     },
        ///     preferredToTerms = new[] {
        ///         new {
        ///             description = "<AtlasRelatedTermHeaderDescription>",
        ///             displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///             expression = "<AtlasRelatedTermHeaderExpression>",
        ///             relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///             source = "<AtlasRelatedTermHeaderSource>",
        ///             status = "<DRAFT>",
        ///             steward = "<AtlasRelatedTermHeaderSteward>",
        ///             termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///         }
        ///     },
        ///     replacedBy = new[] {
        ///         new {
        ///             description = "<AtlasRelatedTermHeaderDescription>",
        ///             displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///             expression = "<AtlasRelatedTermHeaderExpression>",
        ///             relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///             source = "<AtlasRelatedTermHeaderSource>",
        ///             status = "<DRAFT>",
        ///             steward = "<AtlasRelatedTermHeaderSteward>",
        ///             termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///         }
        ///     },
        ///     replacementTerms = new[] {
        ///         new {
        ///             description = "<AtlasRelatedTermHeaderDescription>",
        ///             displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///             expression = "<AtlasRelatedTermHeaderExpression>",
        ///             relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///             source = "<AtlasRelatedTermHeaderSource>",
        ///             status = "<DRAFT>",
        ///             steward = "<AtlasRelatedTermHeaderSteward>",
        ///             termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///         }
        ///     },
        ///     seeAlso = new[] {
        ///         new {
        ///             description = "<AtlasRelatedTermHeaderDescription>",
        ///             displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///             expression = "<AtlasRelatedTermHeaderExpression>",
        ///             relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///             source = "<AtlasRelatedTermHeaderSource>",
        ///             status = "<DRAFT>",
        ///             steward = "<AtlasRelatedTermHeaderSteward>",
        ///             termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///         }
        ///     },
        ///     synonyms = new[] {
        ///         new {
        ///             description = "<AtlasRelatedTermHeaderDescription>",
        ///             displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///             expression = "<AtlasRelatedTermHeaderExpression>",
        ///             relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///             source = "<AtlasRelatedTermHeaderSource>",
        ///             status = "<DRAFT>",
        ///             steward = "<AtlasRelatedTermHeaderSteward>",
        ///             termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///         }
        ///     },
        ///     translatedTerms = new[] {
        ///         new {
        ///             description = "<AtlasRelatedTermHeaderDescription>",
        ///             displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///             expression = "<AtlasRelatedTermHeaderExpression>",
        ///             relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///             source = "<AtlasRelatedTermHeaderSource>",
        ///             status = "<DRAFT>",
        ///             steward = "<AtlasRelatedTermHeaderSteward>",
        ///             termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///         }
        ///     },
        ///     translationTerms = new[] {
        ///         new {
        ///             description = "<AtlasRelatedTermHeaderDescription>",
        ///             displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///             expression = "<AtlasRelatedTermHeaderExpression>",
        ///             relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///             source = "<AtlasRelatedTermHeaderSource>",
        ///             status = "<DRAFT>",
        ///             steward = "<AtlasRelatedTermHeaderSteward>",
        ///             termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///         }
        ///     },
        ///     usage = "<AtlasGlossaryTermUsage>",
        ///     validValues = new[] {
        ///         new {
        ///             description = "<AtlasRelatedTermHeaderDescription>",
        ///             displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///             expression = "<AtlasRelatedTermHeaderExpression>",
        ///             relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///             source = "<AtlasRelatedTermHeaderSource>",
        ///             status = "<DRAFT>",
        ///             steward = "<AtlasRelatedTermHeaderSteward>",
        ///             termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///         }
        ///     },
        ///     validValuesFor = new[] {
        ///         new {
        ///             description = "<AtlasRelatedTermHeaderDescription>",
        ///             displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///             expression = "<AtlasRelatedTermHeaderExpression>",
        ///             relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///             source = "<AtlasRelatedTermHeaderSource>",
        ///             status = "<DRAFT>",
        ///             steward = "<AtlasRelatedTermHeaderSteward>",
        ///             termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///         }
        ///     },
        /// };
        /// 
        /// Response response = client.UpdateGlossaryTerm("<termGuid>", RequestContent.Create(data), true);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("longDescription").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("qualifiedName").ToString());
        /// Console.WriteLine(result.GetProperty("shortDescription").ToString());
        /// Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("abbreviation").ToString());
        /// Console.WriteLine(result.GetProperty("templateName")[0].ToString());
        /// Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("createTime").ToString());
        /// Console.WriteLine(result.GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("updateTime").ToString());
        /// Console.WriteLine(result.GetProperty("updatedBy").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("resources")[0].GetProperty("displayName").ToString());
        /// Console.WriteLine(result.GetProperty("resources")[0].GetProperty("url").ToString());
        /// Console.WriteLine(result.GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
        /// Console.WriteLine(result.GetProperty("attributes").GetProperty("<test>").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("examples")[0].ToString());
        /// Console.WriteLine(result.GetProperty("isA")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("isA")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("isA")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("isA")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("isA")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("isA")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("isA")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("isA")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("usage").ToString());
        /// Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>AtlasGlossaryTerm</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       entityGuid: string, # Optional. The GUID of the entity.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. The end of the time boundary.
        ///           startTime: string, # Optional. The start of the time boundary.
        ///           timeZone: string, # Optional. The timezone of the time boundary.
        ///         }
        ///       ], # Optional. An array of time boundaries indicating validity periods.
        ///       source: string, # Optional. indicate the source who create the classification detail
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///     }
        ///   ], # Optional. An array of classifications.
        ///   longDescription: string, # Optional. The long version description.
        ///   name: string, # Optional. The name of the glossary object.
        ///   qualifiedName: string, # Optional. The qualified name of the glossary object.
        ///   shortDescription: string, # Optional. The short version of description.
        ///   lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///   guid: string, # Optional. The GUID of the object.
        ///   abbreviation: string, # Optional. The abbreviation of the term.
        ///   templateName: [AnyObject], # Optional.
        ///   anchor: {
        ///     displayText: string, # Optional. The display text.
        ///     glossaryGuid: string, # Optional. The GUID of the glossary.
        ///     relationGuid: string, # Optional. The GUID of the relationship.
        ///   }, # Optional. The glossary header with basic information.
        ///   antonyms: [
        ///     {
        ///       description: string, # Optional. The description of the related term.
        ///       displayText: string, # Optional. The display text.
        ///       expression: string, # Optional. The expression of the term.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       source: string, # Optional. The source of the term.
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///       steward: string, # Optional. The steward of the term.
        ///       termGuid: string, # Optional. The GUID of the term.
        ///     }
        ///   ], # Optional. An array of related term headers as antonyms.
        ///   createTime: number, # Optional. The created time of the record.
        ///   createdBy: string, # Optional. The user who created the record.
        ///   updateTime: number, # Optional. The update time of the record.
        ///   updatedBy: string, # Optional. The user who updated the record.
        ///   status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;, # Optional. Status of the AtlasGlossaryTerm
        ///   resources: [
        ///     {
        ///       displayName: string, # Optional. Display name for url.
        ///       url: string, # Optional. web url. http or https
        ///     }
        ///   ], # Optional. An array of resource link for term
        ///   contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. The dictionary of contacts for terms. Key could be Expert or Steward.
        ///   attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;, # Optional. The custom attributes of the term, which is map&lt;string,map&lt;string,object&gt;&gt;.
        /// The key of the first layer map is term template name.
        ///   assignedEntities: [
        ///     {
        ///       guid: string, # Optional. The GUID of the object.
        ///       typeName: string, # Optional. The name of the type.
        ///       uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The unique attributes of the object.
        ///       displayText: string, # Optional. The display text.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       relationshipType: string, # Optional.
        ///       relationshipAttributes: {
        ///         attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///         typeName: string, # Optional. The name of the type.
        ///         lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       }, # Optional. Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.
        ///       relationshipGuid: string, # Optional. The GUID of the relationship.
        ///       relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. The enum of relationship status.
        ///     }
        ///   ], # Optional. An array of related object IDs.
        ///   categories: [
        ///     {
        ///       categoryGuid: string, # Optional. The GUID of the category.
        ///       description: string, # Optional. The description of the record.
        ///       displayText: string, # Optional. The display text.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///     }
        ///   ], # Optional. An array of term categorization headers.
        ///   classifies: [AtlasRelatedTermHeader], # Optional. An array of related term headers.
        ///   examples: [string], # Optional. An array of examples.
        ///   isA: [AtlasRelatedTermHeader], # Optional. An array of related term headers indicating the is-a relationship.
        ///   preferredTerms: [AtlasRelatedTermHeader], # Optional. An array of preferred related term headers.
        ///   preferredToTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are preferred to.
        ///   replacedBy: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are replaced by.
        ///   replacementTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for replacement.
        ///   seeAlso: [AtlasRelatedTermHeader], # Optional. An array of related term headers for see also.
        ///   synonyms: [AtlasRelatedTermHeader], # Optional. An array of related term headers as synonyms.
        ///   translatedTerms: [AtlasRelatedTermHeader], # Optional. An array of translated related term headers.
        ///   translationTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for translation.
        ///   usage: string, # Optional. The usage of the term.
        ///   validValues: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values.
        ///   validValuesFor: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values for other records.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>AtlasGlossaryTerm</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       entityGuid: string, # Optional. The GUID of the entity.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. The end of the time boundary.
        ///           startTime: string, # Optional. The start of the time boundary.
        ///           timeZone: string, # Optional. The timezone of the time boundary.
        ///         }
        ///       ], # Optional. An array of time boundaries indicating validity periods.
        ///       source: string, # Optional. indicate the source who create the classification detail
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///     }
        ///   ], # Optional. An array of classifications.
        ///   longDescription: string, # Optional. The long version description.
        ///   name: string, # Optional. The name of the glossary object.
        ///   qualifiedName: string, # Optional. The qualified name of the glossary object.
        ///   shortDescription: string, # Optional. The short version of description.
        ///   lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///   guid: string, # Optional. The GUID of the object.
        ///   abbreviation: string, # Optional. The abbreviation of the term.
        ///   templateName: [AnyObject], # Optional.
        ///   anchor: {
        ///     displayText: string, # Optional. The display text.
        ///     glossaryGuid: string, # Optional. The GUID of the glossary.
        ///     relationGuid: string, # Optional. The GUID of the relationship.
        ///   }, # Optional. The glossary header with basic information.
        ///   antonyms: [
        ///     {
        ///       description: string, # Optional. The description of the related term.
        ///       displayText: string, # Optional. The display text.
        ///       expression: string, # Optional. The expression of the term.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       source: string, # Optional. The source of the term.
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///       steward: string, # Optional. The steward of the term.
        ///       termGuid: string, # Optional. The GUID of the term.
        ///     }
        ///   ], # Optional. An array of related term headers as antonyms.
        ///   createTime: number, # Optional. The created time of the record.
        ///   createdBy: string, # Optional. The user who created the record.
        ///   updateTime: number, # Optional. The update time of the record.
        ///   updatedBy: string, # Optional. The user who updated the record.
        ///   status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;, # Optional. Status of the AtlasGlossaryTerm
        ///   resources: [
        ///     {
        ///       displayName: string, # Optional. Display name for url.
        ///       url: string, # Optional. web url. http or https
        ///     }
        ///   ], # Optional. An array of resource link for term
        ///   contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. The dictionary of contacts for terms. Key could be Expert or Steward.
        ///   attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;, # Optional. The custom attributes of the term, which is map&lt;string,map&lt;string,object&gt;&gt;.
        /// The key of the first layer map is term template name.
        ///   assignedEntities: [
        ///     {
        ///       guid: string, # Optional. The GUID of the object.
        ///       typeName: string, # Optional. The name of the type.
        ///       uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The unique attributes of the object.
        ///       displayText: string, # Optional. The display text.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       relationshipType: string, # Optional.
        ///       relationshipAttributes: {
        ///         attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///         typeName: string, # Optional. The name of the type.
        ///         lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       }, # Optional. Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.
        ///       relationshipGuid: string, # Optional. The GUID of the relationship.
        ///       relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. The enum of relationship status.
        ///     }
        ///   ], # Optional. An array of related object IDs.
        ///   categories: [
        ///     {
        ///       categoryGuid: string, # Optional. The GUID of the category.
        ///       description: string, # Optional. The description of the record.
        ///       displayText: string, # Optional. The display text.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///     }
        ///   ], # Optional. An array of term categorization headers.
        ///   classifies: [AtlasRelatedTermHeader], # Optional. An array of related term headers.
        ///   examples: [string], # Optional. An array of examples.
        ///   isA: [AtlasRelatedTermHeader], # Optional. An array of related term headers indicating the is-a relationship.
        ///   preferredTerms: [AtlasRelatedTermHeader], # Optional. An array of preferred related term headers.
        ///   preferredToTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are preferred to.
        ///   replacedBy: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are replaced by.
        ///   replacementTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for replacement.
        ///   seeAlso: [AtlasRelatedTermHeader], # Optional. An array of related term headers for see also.
        ///   synonyms: [AtlasRelatedTermHeader], # Optional. An array of related term headers as synonyms.
        ///   translatedTerms: [AtlasRelatedTermHeader], # Optional. An array of translated related term headers.
        ///   translationTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for translation.
        ///   usage: string, # Optional. The usage of the term.
        ///   validValues: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values.
        ///   validValuesFor: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values for other records.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response UpdateGlossaryTerm(string termGuid, RequestContent content, bool? includeTermHierarchy = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(termGuid, nameof(termGuid));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.UpdateGlossaryTerm");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateGlossaryTermRequest(termGuid, content, includeTermHierarchy, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a glossary term. </summary>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="termGuid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="termGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteGlossaryTermAsync with required parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// Response response = await client.DeleteGlossaryTermAsync("<termGuid>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> DeleteGlossaryTermAsync(string termGuid, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(termGuid, nameof(termGuid));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.DeleteGlossaryTerm");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteGlossaryTermRequest(termGuid, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a glossary term. </summary>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="termGuid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="termGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteGlossaryTerm with required parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// Response response = client.DeleteGlossaryTerm("<termGuid>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response DeleteGlossaryTerm(string termGuid, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(termGuid, nameof(termGuid));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.DeleteGlossaryTerm");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteGlossaryTermRequest(termGuid, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update the glossary term partially. </summary>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="termGuid"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="termGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call PartialUpdateGlossaryTermAsync with required parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// var data = new {
        ///     key = "<String>",
        /// };
        /// 
        /// Response response = await client.PartialUpdateGlossaryTermAsync("<termGuid>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call PartialUpdateGlossaryTermAsync with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// var data = new {
        ///     key = "<String>",
        /// };
        /// 
        /// Response response = await client.PartialUpdateGlossaryTermAsync("<termGuid>", RequestContent.Create(data), true);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("longDescription").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("qualifiedName").ToString());
        /// Console.WriteLine(result.GetProperty("shortDescription").ToString());
        /// Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("abbreviation").ToString());
        /// Console.WriteLine(result.GetProperty("templateName")[0].ToString());
        /// Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("createTime").ToString());
        /// Console.WriteLine(result.GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("updateTime").ToString());
        /// Console.WriteLine(result.GetProperty("updatedBy").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("resources")[0].GetProperty("displayName").ToString());
        /// Console.WriteLine(result.GetProperty("resources")[0].GetProperty("url").ToString());
        /// Console.WriteLine(result.GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
        /// Console.WriteLine(result.GetProperty("attributes").GetProperty("<test>").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("examples")[0].ToString());
        /// Console.WriteLine(result.GetProperty("isA")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("isA")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("isA")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("isA")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("isA")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("isA")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("isA")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("isA")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("usage").ToString());
        /// Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>AtlasGlossaryTerm</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       entityGuid: string, # Optional. The GUID of the entity.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. The end of the time boundary.
        ///           startTime: string, # Optional. The start of the time boundary.
        ///           timeZone: string, # Optional. The timezone of the time boundary.
        ///         }
        ///       ], # Optional. An array of time boundaries indicating validity periods.
        ///       source: string, # Optional. indicate the source who create the classification detail
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///     }
        ///   ], # Optional. An array of classifications.
        ///   longDescription: string, # Optional. The long version description.
        ///   name: string, # Optional. The name of the glossary object.
        ///   qualifiedName: string, # Optional. The qualified name of the glossary object.
        ///   shortDescription: string, # Optional. The short version of description.
        ///   lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///   guid: string, # Optional. The GUID of the object.
        ///   abbreviation: string, # Optional. The abbreviation of the term.
        ///   templateName: [AnyObject], # Optional.
        ///   anchor: {
        ///     displayText: string, # Optional. The display text.
        ///     glossaryGuid: string, # Optional. The GUID of the glossary.
        ///     relationGuid: string, # Optional. The GUID of the relationship.
        ///   }, # Optional. The glossary header with basic information.
        ///   antonyms: [
        ///     {
        ///       description: string, # Optional. The description of the related term.
        ///       displayText: string, # Optional. The display text.
        ///       expression: string, # Optional. The expression of the term.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       source: string, # Optional. The source of the term.
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///       steward: string, # Optional. The steward of the term.
        ///       termGuid: string, # Optional. The GUID of the term.
        ///     }
        ///   ], # Optional. An array of related term headers as antonyms.
        ///   createTime: number, # Optional. The created time of the record.
        ///   createdBy: string, # Optional. The user who created the record.
        ///   updateTime: number, # Optional. The update time of the record.
        ///   updatedBy: string, # Optional. The user who updated the record.
        ///   status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;, # Optional. Status of the AtlasGlossaryTerm
        ///   resources: [
        ///     {
        ///       displayName: string, # Optional. Display name for url.
        ///       url: string, # Optional. web url. http or https
        ///     }
        ///   ], # Optional. An array of resource link for term
        ///   contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. The dictionary of contacts for terms. Key could be Expert or Steward.
        ///   attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;, # Optional. The custom attributes of the term, which is map&lt;string,map&lt;string,object&gt;&gt;.
        /// The key of the first layer map is term template name.
        ///   assignedEntities: [
        ///     {
        ///       guid: string, # Optional. The GUID of the object.
        ///       typeName: string, # Optional. The name of the type.
        ///       uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The unique attributes of the object.
        ///       displayText: string, # Optional. The display text.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       relationshipType: string, # Optional.
        ///       relationshipAttributes: {
        ///         attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///         typeName: string, # Optional. The name of the type.
        ///         lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       }, # Optional. Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.
        ///       relationshipGuid: string, # Optional. The GUID of the relationship.
        ///       relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. The enum of relationship status.
        ///     }
        ///   ], # Optional. An array of related object IDs.
        ///   categories: [
        ///     {
        ///       categoryGuid: string, # Optional. The GUID of the category.
        ///       description: string, # Optional. The description of the record.
        ///       displayText: string, # Optional. The display text.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///     }
        ///   ], # Optional. An array of term categorization headers.
        ///   classifies: [AtlasRelatedTermHeader], # Optional. An array of related term headers.
        ///   examples: [string], # Optional. An array of examples.
        ///   isA: [AtlasRelatedTermHeader], # Optional. An array of related term headers indicating the is-a relationship.
        ///   preferredTerms: [AtlasRelatedTermHeader], # Optional. An array of preferred related term headers.
        ///   preferredToTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are preferred to.
        ///   replacedBy: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are replaced by.
        ///   replacementTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for replacement.
        ///   seeAlso: [AtlasRelatedTermHeader], # Optional. An array of related term headers for see also.
        ///   synonyms: [AtlasRelatedTermHeader], # Optional. An array of related term headers as synonyms.
        ///   translatedTerms: [AtlasRelatedTermHeader], # Optional. An array of translated related term headers.
        ///   translationTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for translation.
        ///   usage: string, # Optional. The usage of the term.
        ///   validValues: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values.
        ///   validValuesFor: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values for other records.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> PartialUpdateGlossaryTermAsync(string termGuid, RequestContent content, bool? includeTermHierarchy = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(termGuid, nameof(termGuid));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.PartialUpdateGlossaryTerm");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePartialUpdateGlossaryTermRequest(termGuid, content, includeTermHierarchy, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update the glossary term partially. </summary>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="termGuid"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="termGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call PartialUpdateGlossaryTerm with required parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// var data = new {
        ///     key = "<String>",
        /// };
        /// 
        /// Response response = client.PartialUpdateGlossaryTerm("<termGuid>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call PartialUpdateGlossaryTerm with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// var data = new {
        ///     key = "<String>",
        /// };
        /// 
        /// Response response = client.PartialUpdateGlossaryTerm("<termGuid>", RequestContent.Create(data), true);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("longDescription").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("qualifiedName").ToString());
        /// Console.WriteLine(result.GetProperty("shortDescription").ToString());
        /// Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("abbreviation").ToString());
        /// Console.WriteLine(result.GetProperty("templateName")[0].ToString());
        /// Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("createTime").ToString());
        /// Console.WriteLine(result.GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("updateTime").ToString());
        /// Console.WriteLine(result.GetProperty("updatedBy").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("resources")[0].GetProperty("displayName").ToString());
        /// Console.WriteLine(result.GetProperty("resources")[0].GetProperty("url").ToString());
        /// Console.WriteLine(result.GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
        /// Console.WriteLine(result.GetProperty("attributes").GetProperty("<test>").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
        /// Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("examples")[0].ToString());
        /// Console.WriteLine(result.GetProperty("isA")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("isA")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("isA")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("isA")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("isA")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("isA")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("isA")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("isA")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("usage").ToString());
        /// Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>AtlasGlossaryTerm</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       entityGuid: string, # Optional. The GUID of the entity.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. The end of the time boundary.
        ///           startTime: string, # Optional. The start of the time boundary.
        ///           timeZone: string, # Optional. The timezone of the time boundary.
        ///         }
        ///       ], # Optional. An array of time boundaries indicating validity periods.
        ///       source: string, # Optional. indicate the source who create the classification detail
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///     }
        ///   ], # Optional. An array of classifications.
        ///   longDescription: string, # Optional. The long version description.
        ///   name: string, # Optional. The name of the glossary object.
        ///   qualifiedName: string, # Optional. The qualified name of the glossary object.
        ///   shortDescription: string, # Optional. The short version of description.
        ///   lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///   guid: string, # Optional. The GUID of the object.
        ///   abbreviation: string, # Optional. The abbreviation of the term.
        ///   templateName: [AnyObject], # Optional.
        ///   anchor: {
        ///     displayText: string, # Optional. The display text.
        ///     glossaryGuid: string, # Optional. The GUID of the glossary.
        ///     relationGuid: string, # Optional. The GUID of the relationship.
        ///   }, # Optional. The glossary header with basic information.
        ///   antonyms: [
        ///     {
        ///       description: string, # Optional. The description of the related term.
        ///       displayText: string, # Optional. The display text.
        ///       expression: string, # Optional. The expression of the term.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       source: string, # Optional. The source of the term.
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///       steward: string, # Optional. The steward of the term.
        ///       termGuid: string, # Optional. The GUID of the term.
        ///     }
        ///   ], # Optional. An array of related term headers as antonyms.
        ///   createTime: number, # Optional. The created time of the record.
        ///   createdBy: string, # Optional. The user who created the record.
        ///   updateTime: number, # Optional. The update time of the record.
        ///   updatedBy: string, # Optional. The user who updated the record.
        ///   status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;, # Optional. Status of the AtlasGlossaryTerm
        ///   resources: [
        ///     {
        ///       displayName: string, # Optional. Display name for url.
        ///       url: string, # Optional. web url. http or https
        ///     }
        ///   ], # Optional. An array of resource link for term
        ///   contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. The dictionary of contacts for terms. Key could be Expert or Steward.
        ///   attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;, # Optional. The custom attributes of the term, which is map&lt;string,map&lt;string,object&gt;&gt;.
        /// The key of the first layer map is term template name.
        ///   assignedEntities: [
        ///     {
        ///       guid: string, # Optional. The GUID of the object.
        ///       typeName: string, # Optional. The name of the type.
        ///       uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The unique attributes of the object.
        ///       displayText: string, # Optional. The display text.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       relationshipType: string, # Optional.
        ///       relationshipAttributes: {
        ///         attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///         typeName: string, # Optional. The name of the type.
        ///         lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       }, # Optional. Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.
        ///       relationshipGuid: string, # Optional. The GUID of the relationship.
        ///       relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. The enum of relationship status.
        ///     }
        ///   ], # Optional. An array of related object IDs.
        ///   categories: [
        ///     {
        ///       categoryGuid: string, # Optional. The GUID of the category.
        ///       description: string, # Optional. The description of the record.
        ///       displayText: string, # Optional. The display text.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///     }
        ///   ], # Optional. An array of term categorization headers.
        ///   classifies: [AtlasRelatedTermHeader], # Optional. An array of related term headers.
        ///   examples: [string], # Optional. An array of examples.
        ///   isA: [AtlasRelatedTermHeader], # Optional. An array of related term headers indicating the is-a relationship.
        ///   preferredTerms: [AtlasRelatedTermHeader], # Optional. An array of preferred related term headers.
        ///   preferredToTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are preferred to.
        ///   replacedBy: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are replaced by.
        ///   replacementTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for replacement.
        ///   seeAlso: [AtlasRelatedTermHeader], # Optional. An array of related term headers for see also.
        ///   synonyms: [AtlasRelatedTermHeader], # Optional. An array of related term headers as synonyms.
        ///   translatedTerms: [AtlasRelatedTermHeader], # Optional. An array of translated related term headers.
        ///   translationTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for translation.
        ///   usage: string, # Optional. The usage of the term.
        ///   validValues: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values.
        ///   validValuesFor: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values for other records.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response PartialUpdateGlossaryTerm(string termGuid, RequestContent content, bool? includeTermHierarchy = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(termGuid, nameof(termGuid));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.PartialUpdateGlossaryTerm");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePartialUpdateGlossaryTermRequest(termGuid, content, includeTermHierarchy, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create glossary terms in bulk. </summary>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call CreateGlossaryTermsAsync with required parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// var data = new[] {
        ///     new {}
        /// };
        /// 
        /// Response response = await client.CreateGlossaryTermsAsync(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].ToString());
        /// ]]></code>
        /// This sample shows how to call CreateGlossaryTermsAsync with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// var data = new[] {
        ///     new {
        ///         classifications = new[] {
        ///             new {
        ///                 attributes = new {
        ///                     key = new {},
        ///                 },
        ///                 typeName = "<AtlasStructTypeName>",
        ///                 lastModifiedTS = "<LastModifiedTS>",
        ///                 entityGuid = "<AtlasClassificationEntityGuid>",
        ///                 entityStatus = "<ACTIVE>",
        ///                 removePropagationsOnEntityDelete = true,
        ///                 validityPeriods = new[] {
        ///                     new {
        ///                         endTime = "<TimeBoundaryEndTime>",
        ///                         startTime = "<TimeBoundaryStartTime>",
        ///                         timeZone = "<TimeBoundaryTimeZone>",
        ///                     }
        ///                 },
        ///                 source = "<AtlasClassificationSource>",
        ///                 sourceDetails = new {
        ///                     key = new {},
        ///                 },
        ///             }
        ///         },
        ///         longDescription = "<AtlasGlossaryBaseObjectLongDescription>",
        ///         name = "<AtlasGlossaryBaseObjectName>",
        ///         qualifiedName = "<AtlasGlossaryBaseObjectQualifiedName>",
        ///         shortDescription = "<AtlasGlossaryBaseObjectShortDescription>",
        ///         lastModifiedTS = "<LastModifiedTS>",
        ///         guid = "<AtlasBaseModelObjectGuid>",
        ///         abbreviation = "<AtlasGlossaryTermAbbreviation>",
        ///         templateName = new[] {
        ///             new {}
        ///         },
        ///         anchor = new {
        ///             displayText = "<AtlasGlossaryHeaderDisplayText>",
        ///             glossaryGuid = "<AtlasGlossaryHeaderGlossaryGuid>",
        ///             relationGuid = "<AtlasGlossaryHeaderRelationGuid>",
        ///         },
        ///         antonyms = new[] {
        ///             new {
        ///                 description = "<AtlasRelatedTermHeaderDescription>",
        ///                 displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                 expression = "<AtlasRelatedTermHeaderExpression>",
        ///                 relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                 source = "<AtlasRelatedTermHeaderSource>",
        ///                 status = "<DRAFT>",
        ///                 steward = "<AtlasRelatedTermHeaderSteward>",
        ///                 termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///             }
        ///         },
        ///         createTime = 1234,
        ///         createdBy = "<AtlasGlossaryTermCreatedBy>",
        ///         updateTime = 1234,
        ///         updatedBy = "<AtlasGlossaryTermUpdatedBy>",
        ///         status = "<Draft>",
        ///         resources = new[] {
        ///             new {
        ///                 displayName = "<ResourceLinkDisplayName>",
        ///                 url = "<ResourceLinkUrl>",
        ///             }
        ///         },
        ///         contacts = new {
        ///             key = new[] {
        ///                 new {
        ///                     id = "<ContactBasicId>",
        ///                     info = "<ContactBasicInfo>",
        ///                 }
        ///             },
        ///         },
        ///         attributes = new {
        ///             key = new {
        ///                 key = new {},
        ///             },
        ///         },
        ///         assignedEntities = new[] {
        ///             new {
        ///                 guid = "<AtlasObjectIdGuid>",
        ///                 typeName = "<AtlasObjectIdTypeName>",
        ///                 uniqueAttributes = new {
        ///                     key = new {},
        ///                 },
        ///                 displayText = "<AtlasRelatedObjectIdDisplayText>",
        ///                 entityStatus = "<ACTIVE>",
        ///                 relationshipType = "<AtlasRelatedObjectIdRelationshipType>",
        ///                 relationshipAttributes = new {
        ///                     attributes = new {
        ///                         key = new {},
        ///                     },
        ///                     typeName = "<AtlasStructTypeName>",
        ///                     lastModifiedTS = "<LastModifiedTS>",
        ///                     entityGuid = "<AtlasClassificationEntityGuid>",
        ///                     entityStatus = "<ACTIVE>",
        ///                     removePropagationsOnEntityDelete = true,
        ///                     validityPeriods = new[] {
        ///                         new {
        ///                             endTime = "<TimeBoundaryEndTime>",
        ///                             startTime = "<TimeBoundaryStartTime>",
        ///                             timeZone = "<TimeBoundaryTimeZone>",
        ///                         }
        ///                     },
        ///                     source = "<AtlasClassificationSource>",
        ///                     sourceDetails = new {
        ///                         key = new {},
        ///                     },
        ///                 },
        ///                 relationshipGuid = "<AtlasRelatedObjectIdRelationshipGuid>",
        ///                 relationshipStatus = "<ACTIVE>",
        ///             }
        ///         },
        ///         categories = new[] {
        ///             new {
        ///                 categoryGuid = "<AtlasTermCategorizationHeaderCategoryGuid>",
        ///                 description = "<AtlasTermCategorizationHeaderDescription>",
        ///                 displayText = "<AtlasTermCategorizationHeaderDisplayText>",
        ///                 relationGuid = "<AtlasTermCategorizationHeaderRelationGuid>",
        ///                 status = "<DRAFT>",
        ///             }
        ///         },
        ///         classifies = new[] {
        ///             new {
        ///                 description = "<AtlasRelatedTermHeaderDescription>",
        ///                 displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                 expression = "<AtlasRelatedTermHeaderExpression>",
        ///                 relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                 source = "<AtlasRelatedTermHeaderSource>",
        ///                 status = "<DRAFT>",
        ///                 steward = "<AtlasRelatedTermHeaderSteward>",
        ///                 termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///             }
        ///         },
        ///         examples = new[] {
        ///             "<AtlasGlossaryTermExamplesItem>"
        ///         },
        ///         isA = new[] {
        ///             new {
        ///                 description = "<AtlasRelatedTermHeaderDescription>",
        ///                 displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                 expression = "<AtlasRelatedTermHeaderExpression>",
        ///                 relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                 source = "<AtlasRelatedTermHeaderSource>",
        ///                 status = "<DRAFT>",
        ///                 steward = "<AtlasRelatedTermHeaderSteward>",
        ///                 termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///             }
        ///         },
        ///         preferredTerms = new[] {
        ///             new {
        ///                 description = "<AtlasRelatedTermHeaderDescription>",
        ///                 displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                 expression = "<AtlasRelatedTermHeaderExpression>",
        ///                 relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                 source = "<AtlasRelatedTermHeaderSource>",
        ///                 status = "<DRAFT>",
        ///                 steward = "<AtlasRelatedTermHeaderSteward>",
        ///                 termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///             }
        ///         },
        ///         preferredToTerms = new[] {
        ///             new {
        ///                 description = "<AtlasRelatedTermHeaderDescription>",
        ///                 displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                 expression = "<AtlasRelatedTermHeaderExpression>",
        ///                 relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                 source = "<AtlasRelatedTermHeaderSource>",
        ///                 status = "<DRAFT>",
        ///                 steward = "<AtlasRelatedTermHeaderSteward>",
        ///                 termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///             }
        ///         },
        ///         replacedBy = new[] {
        ///             new {
        ///                 description = "<AtlasRelatedTermHeaderDescription>",
        ///                 displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                 expression = "<AtlasRelatedTermHeaderExpression>",
        ///                 relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                 source = "<AtlasRelatedTermHeaderSource>",
        ///                 status = "<DRAFT>",
        ///                 steward = "<AtlasRelatedTermHeaderSteward>",
        ///                 termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///             }
        ///         },
        ///         replacementTerms = new[] {
        ///             new {
        ///                 description = "<AtlasRelatedTermHeaderDescription>",
        ///                 displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                 expression = "<AtlasRelatedTermHeaderExpression>",
        ///                 relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                 source = "<AtlasRelatedTermHeaderSource>",
        ///                 status = "<DRAFT>",
        ///                 steward = "<AtlasRelatedTermHeaderSteward>",
        ///                 termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///             }
        ///         },
        ///         seeAlso = new[] {
        ///             new {
        ///                 description = "<AtlasRelatedTermHeaderDescription>",
        ///                 displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                 expression = "<AtlasRelatedTermHeaderExpression>",
        ///                 relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                 source = "<AtlasRelatedTermHeaderSource>",
        ///                 status = "<DRAFT>",
        ///                 steward = "<AtlasRelatedTermHeaderSteward>",
        ///                 termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///             }
        ///         },
        ///         synonyms = new[] {
        ///             new {
        ///                 description = "<AtlasRelatedTermHeaderDescription>",
        ///                 displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                 expression = "<AtlasRelatedTermHeaderExpression>",
        ///                 relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                 source = "<AtlasRelatedTermHeaderSource>",
        ///                 status = "<DRAFT>",
        ///                 steward = "<AtlasRelatedTermHeaderSteward>",
        ///                 termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///             }
        ///         },
        ///         translatedTerms = new[] {
        ///             new {
        ///                 description = "<AtlasRelatedTermHeaderDescription>",
        ///                 displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                 expression = "<AtlasRelatedTermHeaderExpression>",
        ///                 relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                 source = "<AtlasRelatedTermHeaderSource>",
        ///                 status = "<DRAFT>",
        ///                 steward = "<AtlasRelatedTermHeaderSteward>",
        ///                 termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///             }
        ///         },
        ///         translationTerms = new[] {
        ///             new {
        ///                 description = "<AtlasRelatedTermHeaderDescription>",
        ///                 displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                 expression = "<AtlasRelatedTermHeaderExpression>",
        ///                 relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                 source = "<AtlasRelatedTermHeaderSource>",
        ///                 status = "<DRAFT>",
        ///                 steward = "<AtlasRelatedTermHeaderSteward>",
        ///                 termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///             }
        ///         },
        ///         usage = "<AtlasGlossaryTermUsage>",
        ///         validValues = new[] {
        ///             new {
        ///                 description = "<AtlasRelatedTermHeaderDescription>",
        ///                 displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                 expression = "<AtlasRelatedTermHeaderExpression>",
        ///                 relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                 source = "<AtlasRelatedTermHeaderSource>",
        ///                 status = "<DRAFT>",
        ///                 steward = "<AtlasRelatedTermHeaderSteward>",
        ///                 termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///             }
        ///         },
        ///         validValuesFor = new[] {
        ///             new {
        ///                 description = "<AtlasRelatedTermHeaderDescription>",
        ///                 displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                 expression = "<AtlasRelatedTermHeaderExpression>",
        ///                 relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                 source = "<AtlasRelatedTermHeaderSource>",
        ///                 status = "<DRAFT>",
        ///                 steward = "<AtlasRelatedTermHeaderSteward>",
        ///                 termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///             }
        ///         },
        ///     }
        /// };
        /// 
        /// Response response = await client.CreateGlossaryTermsAsync(RequestContent.Create(data), true);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result[0].GetProperty("longDescription").ToString());
        /// Console.WriteLine(result[0].GetProperty("name").ToString());
        /// Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
        /// Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
        /// Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result[0].GetProperty("abbreviation").ToString());
        /// Console.WriteLine(result[0].GetProperty("templateName")[0].ToString());
        /// Console.WriteLine(result[0].GetProperty("anchor").GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("anchor").GetProperty("glossaryGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("anchor").GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("createTime").ToString());
        /// Console.WriteLine(result[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result[0].GetProperty("updateTime").ToString());
        /// Console.WriteLine(result[0].GetProperty("updatedBy").ToString());
        /// Console.WriteLine(result[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("displayName").ToString());
        /// Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("url").ToString());
        /// Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
        /// Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
        /// Console.WriteLine(result[0].GetProperty("attributes").GetProperty("<test>").GetProperty("<test>").ToString());
        /// Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
        /// Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
        /// Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
        /// Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("examples")[0].ToString());
        /// Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("usage").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>ArrayOfAtlasGlossaryTerm</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       entityGuid: string, # Optional. The GUID of the entity.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. The end of the time boundary.
        ///           startTime: string, # Optional. The start of the time boundary.
        ///           timeZone: string, # Optional. The timezone of the time boundary.
        ///         }
        ///       ], # Optional. An array of time boundaries indicating validity periods.
        ///       source: string, # Optional. indicate the source who create the classification detail
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///     }
        ///   ], # Optional. An array of classifications.
        ///   longDescription: string, # Optional. The long version description.
        ///   name: string, # Optional. The name of the glossary object.
        ///   qualifiedName: string, # Optional. The qualified name of the glossary object.
        ///   shortDescription: string, # Optional. The short version of description.
        ///   lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///   guid: string, # Optional. The GUID of the object.
        ///   abbreviation: string, # Optional. The abbreviation of the term.
        ///   templateName: [AnyObject], # Optional.
        ///   anchor: {
        ///     displayText: string, # Optional. The display text.
        ///     glossaryGuid: string, # Optional. The GUID of the glossary.
        ///     relationGuid: string, # Optional. The GUID of the relationship.
        ///   }, # Optional. The glossary header with basic information.
        ///   antonyms: [
        ///     {
        ///       description: string, # Optional. The description of the related term.
        ///       displayText: string, # Optional. The display text.
        ///       expression: string, # Optional. The expression of the term.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       source: string, # Optional. The source of the term.
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///       steward: string, # Optional. The steward of the term.
        ///       termGuid: string, # Optional. The GUID of the term.
        ///     }
        ///   ], # Optional. An array of related term headers as antonyms.
        ///   createTime: number, # Optional. The created time of the record.
        ///   createdBy: string, # Optional. The user who created the record.
        ///   updateTime: number, # Optional. The update time of the record.
        ///   updatedBy: string, # Optional. The user who updated the record.
        ///   status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;, # Optional. Status of the AtlasGlossaryTerm
        ///   resources: [
        ///     {
        ///       displayName: string, # Optional. Display name for url.
        ///       url: string, # Optional. web url. http or https
        ///     }
        ///   ], # Optional. An array of resource link for term
        ///   contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. The dictionary of contacts for terms. Key could be Expert or Steward.
        ///   attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;, # Optional. The custom attributes of the term, which is map&lt;string,map&lt;string,object&gt;&gt;.
        /// The key of the first layer map is term template name.
        ///   assignedEntities: [
        ///     {
        ///       guid: string, # Optional. The GUID of the object.
        ///       typeName: string, # Optional. The name of the type.
        ///       uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The unique attributes of the object.
        ///       displayText: string, # Optional. The display text.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       relationshipType: string, # Optional.
        ///       relationshipAttributes: {
        ///         attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///         typeName: string, # Optional. The name of the type.
        ///         lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       }, # Optional. Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.
        ///       relationshipGuid: string, # Optional. The GUID of the relationship.
        ///       relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. The enum of relationship status.
        ///     }
        ///   ], # Optional. An array of related object IDs.
        ///   categories: [
        ///     {
        ///       categoryGuid: string, # Optional. The GUID of the category.
        ///       description: string, # Optional. The description of the record.
        ///       displayText: string, # Optional. The display text.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///     }
        ///   ], # Optional. An array of term categorization headers.
        ///   classifies: [AtlasRelatedTermHeader], # Optional. An array of related term headers.
        ///   examples: [string], # Optional. An array of examples.
        ///   isA: [AtlasRelatedTermHeader], # Optional. An array of related term headers indicating the is-a relationship.
        ///   preferredTerms: [AtlasRelatedTermHeader], # Optional. An array of preferred related term headers.
        ///   preferredToTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are preferred to.
        ///   replacedBy: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are replaced by.
        ///   replacementTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for replacement.
        ///   seeAlso: [AtlasRelatedTermHeader], # Optional. An array of related term headers for see also.
        ///   synonyms: [AtlasRelatedTermHeader], # Optional. An array of related term headers as synonyms.
        ///   translatedTerms: [AtlasRelatedTermHeader], # Optional. An array of translated related term headers.
        ///   translationTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for translation.
        ///   usage: string, # Optional. The usage of the term.
        ///   validValues: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values.
        ///   validValuesFor: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values for other records.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ArrayOfAtlasGlossaryTerm</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       entityGuid: string, # Optional. The GUID of the entity.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. The end of the time boundary.
        ///           startTime: string, # Optional. The start of the time boundary.
        ///           timeZone: string, # Optional. The timezone of the time boundary.
        ///         }
        ///       ], # Optional. An array of time boundaries indicating validity periods.
        ///       source: string, # Optional. indicate the source who create the classification detail
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///     }
        ///   ], # Optional. An array of classifications.
        ///   longDescription: string, # Optional. The long version description.
        ///   name: string, # Optional. The name of the glossary object.
        ///   qualifiedName: string, # Optional. The qualified name of the glossary object.
        ///   shortDescription: string, # Optional. The short version of description.
        ///   lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///   guid: string, # Optional. The GUID of the object.
        ///   abbreviation: string, # Optional. The abbreviation of the term.
        ///   templateName: [AnyObject], # Optional.
        ///   anchor: {
        ///     displayText: string, # Optional. The display text.
        ///     glossaryGuid: string, # Optional. The GUID of the glossary.
        ///     relationGuid: string, # Optional. The GUID of the relationship.
        ///   }, # Optional. The glossary header with basic information.
        ///   antonyms: [
        ///     {
        ///       description: string, # Optional. The description of the related term.
        ///       displayText: string, # Optional. The display text.
        ///       expression: string, # Optional. The expression of the term.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       source: string, # Optional. The source of the term.
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///       steward: string, # Optional. The steward of the term.
        ///       termGuid: string, # Optional. The GUID of the term.
        ///     }
        ///   ], # Optional. An array of related term headers as antonyms.
        ///   createTime: number, # Optional. The created time of the record.
        ///   createdBy: string, # Optional. The user who created the record.
        ///   updateTime: number, # Optional. The update time of the record.
        ///   updatedBy: string, # Optional. The user who updated the record.
        ///   status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;, # Optional. Status of the AtlasGlossaryTerm
        ///   resources: [
        ///     {
        ///       displayName: string, # Optional. Display name for url.
        ///       url: string, # Optional. web url. http or https
        ///     }
        ///   ], # Optional. An array of resource link for term
        ///   contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. The dictionary of contacts for terms. Key could be Expert or Steward.
        ///   attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;, # Optional. The custom attributes of the term, which is map&lt;string,map&lt;string,object&gt;&gt;.
        /// The key of the first layer map is term template name.
        ///   assignedEntities: [
        ///     {
        ///       guid: string, # Optional. The GUID of the object.
        ///       typeName: string, # Optional. The name of the type.
        ///       uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The unique attributes of the object.
        ///       displayText: string, # Optional. The display text.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       relationshipType: string, # Optional.
        ///       relationshipAttributes: {
        ///         attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///         typeName: string, # Optional. The name of the type.
        ///         lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       }, # Optional. Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.
        ///       relationshipGuid: string, # Optional. The GUID of the relationship.
        ///       relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. The enum of relationship status.
        ///     }
        ///   ], # Optional. An array of related object IDs.
        ///   categories: [
        ///     {
        ///       categoryGuid: string, # Optional. The GUID of the category.
        ///       description: string, # Optional. The description of the record.
        ///       displayText: string, # Optional. The display text.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///     }
        ///   ], # Optional. An array of term categorization headers.
        ///   classifies: [AtlasRelatedTermHeader], # Optional. An array of related term headers.
        ///   examples: [string], # Optional. An array of examples.
        ///   isA: [AtlasRelatedTermHeader], # Optional. An array of related term headers indicating the is-a relationship.
        ///   preferredTerms: [AtlasRelatedTermHeader], # Optional. An array of preferred related term headers.
        ///   preferredToTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are preferred to.
        ///   replacedBy: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are replaced by.
        ///   replacementTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for replacement.
        ///   seeAlso: [AtlasRelatedTermHeader], # Optional. An array of related term headers for see also.
        ///   synonyms: [AtlasRelatedTermHeader], # Optional. An array of related term headers as synonyms.
        ///   translatedTerms: [AtlasRelatedTermHeader], # Optional. An array of translated related term headers.
        ///   translationTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for translation.
        ///   usage: string, # Optional. The usage of the term.
        ///   validValues: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values.
        ///   validValuesFor: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values for other records.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> CreateGlossaryTermsAsync(RequestContent content, bool? includeTermHierarchy = null, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.CreateGlossaryTerms");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateGlossaryTermsRequest(content, includeTermHierarchy, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create glossary terms in bulk. </summary>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call CreateGlossaryTerms with required parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// var data = new[] {
        ///     new {}
        /// };
        /// 
        /// Response response = client.CreateGlossaryTerms(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].ToString());
        /// ]]></code>
        /// This sample shows how to call CreateGlossaryTerms with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// var data = new[] {
        ///     new {
        ///         classifications = new[] {
        ///             new {
        ///                 attributes = new {
        ///                     key = new {},
        ///                 },
        ///                 typeName = "<AtlasStructTypeName>",
        ///                 lastModifiedTS = "<LastModifiedTS>",
        ///                 entityGuid = "<AtlasClassificationEntityGuid>",
        ///                 entityStatus = "<ACTIVE>",
        ///                 removePropagationsOnEntityDelete = true,
        ///                 validityPeriods = new[] {
        ///                     new {
        ///                         endTime = "<TimeBoundaryEndTime>",
        ///                         startTime = "<TimeBoundaryStartTime>",
        ///                         timeZone = "<TimeBoundaryTimeZone>",
        ///                     }
        ///                 },
        ///                 source = "<AtlasClassificationSource>",
        ///                 sourceDetails = new {
        ///                     key = new {},
        ///                 },
        ///             }
        ///         },
        ///         longDescription = "<AtlasGlossaryBaseObjectLongDescription>",
        ///         name = "<AtlasGlossaryBaseObjectName>",
        ///         qualifiedName = "<AtlasGlossaryBaseObjectQualifiedName>",
        ///         shortDescription = "<AtlasGlossaryBaseObjectShortDescription>",
        ///         lastModifiedTS = "<LastModifiedTS>",
        ///         guid = "<AtlasBaseModelObjectGuid>",
        ///         abbreviation = "<AtlasGlossaryTermAbbreviation>",
        ///         templateName = new[] {
        ///             new {}
        ///         },
        ///         anchor = new {
        ///             displayText = "<AtlasGlossaryHeaderDisplayText>",
        ///             glossaryGuid = "<AtlasGlossaryHeaderGlossaryGuid>",
        ///             relationGuid = "<AtlasGlossaryHeaderRelationGuid>",
        ///         },
        ///         antonyms = new[] {
        ///             new {
        ///                 description = "<AtlasRelatedTermHeaderDescription>",
        ///                 displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                 expression = "<AtlasRelatedTermHeaderExpression>",
        ///                 relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                 source = "<AtlasRelatedTermHeaderSource>",
        ///                 status = "<DRAFT>",
        ///                 steward = "<AtlasRelatedTermHeaderSteward>",
        ///                 termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///             }
        ///         },
        ///         createTime = 1234,
        ///         createdBy = "<AtlasGlossaryTermCreatedBy>",
        ///         updateTime = 1234,
        ///         updatedBy = "<AtlasGlossaryTermUpdatedBy>",
        ///         status = "<Draft>",
        ///         resources = new[] {
        ///             new {
        ///                 displayName = "<ResourceLinkDisplayName>",
        ///                 url = "<ResourceLinkUrl>",
        ///             }
        ///         },
        ///         contacts = new {
        ///             key = new[] {
        ///                 new {
        ///                     id = "<ContactBasicId>",
        ///                     info = "<ContactBasicInfo>",
        ///                 }
        ///             },
        ///         },
        ///         attributes = new {
        ///             key = new {
        ///                 key = new {},
        ///             },
        ///         },
        ///         assignedEntities = new[] {
        ///             new {
        ///                 guid = "<AtlasObjectIdGuid>",
        ///                 typeName = "<AtlasObjectIdTypeName>",
        ///                 uniqueAttributes = new {
        ///                     key = new {},
        ///                 },
        ///                 displayText = "<AtlasRelatedObjectIdDisplayText>",
        ///                 entityStatus = "<ACTIVE>",
        ///                 relationshipType = "<AtlasRelatedObjectIdRelationshipType>",
        ///                 relationshipAttributes = new {
        ///                     attributes = new {
        ///                         key = new {},
        ///                     },
        ///                     typeName = "<AtlasStructTypeName>",
        ///                     lastModifiedTS = "<LastModifiedTS>",
        ///                     entityGuid = "<AtlasClassificationEntityGuid>",
        ///                     entityStatus = "<ACTIVE>",
        ///                     removePropagationsOnEntityDelete = true,
        ///                     validityPeriods = new[] {
        ///                         new {
        ///                             endTime = "<TimeBoundaryEndTime>",
        ///                             startTime = "<TimeBoundaryStartTime>",
        ///                             timeZone = "<TimeBoundaryTimeZone>",
        ///                         }
        ///                     },
        ///                     source = "<AtlasClassificationSource>",
        ///                     sourceDetails = new {
        ///                         key = new {},
        ///                     },
        ///                 },
        ///                 relationshipGuid = "<AtlasRelatedObjectIdRelationshipGuid>",
        ///                 relationshipStatus = "<ACTIVE>",
        ///             }
        ///         },
        ///         categories = new[] {
        ///             new {
        ///                 categoryGuid = "<AtlasTermCategorizationHeaderCategoryGuid>",
        ///                 description = "<AtlasTermCategorizationHeaderDescription>",
        ///                 displayText = "<AtlasTermCategorizationHeaderDisplayText>",
        ///                 relationGuid = "<AtlasTermCategorizationHeaderRelationGuid>",
        ///                 status = "<DRAFT>",
        ///             }
        ///         },
        ///         classifies = new[] {
        ///             new {
        ///                 description = "<AtlasRelatedTermHeaderDescription>",
        ///                 displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                 expression = "<AtlasRelatedTermHeaderExpression>",
        ///                 relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                 source = "<AtlasRelatedTermHeaderSource>",
        ///                 status = "<DRAFT>",
        ///                 steward = "<AtlasRelatedTermHeaderSteward>",
        ///                 termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///             }
        ///         },
        ///         examples = new[] {
        ///             "<AtlasGlossaryTermExamplesItem>"
        ///         },
        ///         isA = new[] {
        ///             new {
        ///                 description = "<AtlasRelatedTermHeaderDescription>",
        ///                 displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                 expression = "<AtlasRelatedTermHeaderExpression>",
        ///                 relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                 source = "<AtlasRelatedTermHeaderSource>",
        ///                 status = "<DRAFT>",
        ///                 steward = "<AtlasRelatedTermHeaderSteward>",
        ///                 termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///             }
        ///         },
        ///         preferredTerms = new[] {
        ///             new {
        ///                 description = "<AtlasRelatedTermHeaderDescription>",
        ///                 displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                 expression = "<AtlasRelatedTermHeaderExpression>",
        ///                 relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                 source = "<AtlasRelatedTermHeaderSource>",
        ///                 status = "<DRAFT>",
        ///                 steward = "<AtlasRelatedTermHeaderSteward>",
        ///                 termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///             }
        ///         },
        ///         preferredToTerms = new[] {
        ///             new {
        ///                 description = "<AtlasRelatedTermHeaderDescription>",
        ///                 displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                 expression = "<AtlasRelatedTermHeaderExpression>",
        ///                 relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                 source = "<AtlasRelatedTermHeaderSource>",
        ///                 status = "<DRAFT>",
        ///                 steward = "<AtlasRelatedTermHeaderSteward>",
        ///                 termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///             }
        ///         },
        ///         replacedBy = new[] {
        ///             new {
        ///                 description = "<AtlasRelatedTermHeaderDescription>",
        ///                 displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                 expression = "<AtlasRelatedTermHeaderExpression>",
        ///                 relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                 source = "<AtlasRelatedTermHeaderSource>",
        ///                 status = "<DRAFT>",
        ///                 steward = "<AtlasRelatedTermHeaderSteward>",
        ///                 termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///             }
        ///         },
        ///         replacementTerms = new[] {
        ///             new {
        ///                 description = "<AtlasRelatedTermHeaderDescription>",
        ///                 displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                 expression = "<AtlasRelatedTermHeaderExpression>",
        ///                 relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                 source = "<AtlasRelatedTermHeaderSource>",
        ///                 status = "<DRAFT>",
        ///                 steward = "<AtlasRelatedTermHeaderSteward>",
        ///                 termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///             }
        ///         },
        ///         seeAlso = new[] {
        ///             new {
        ///                 description = "<AtlasRelatedTermHeaderDescription>",
        ///                 displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                 expression = "<AtlasRelatedTermHeaderExpression>",
        ///                 relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                 source = "<AtlasRelatedTermHeaderSource>",
        ///                 status = "<DRAFT>",
        ///                 steward = "<AtlasRelatedTermHeaderSteward>",
        ///                 termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///             }
        ///         },
        ///         synonyms = new[] {
        ///             new {
        ///                 description = "<AtlasRelatedTermHeaderDescription>",
        ///                 displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                 expression = "<AtlasRelatedTermHeaderExpression>",
        ///                 relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                 source = "<AtlasRelatedTermHeaderSource>",
        ///                 status = "<DRAFT>",
        ///                 steward = "<AtlasRelatedTermHeaderSteward>",
        ///                 termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///             }
        ///         },
        ///         translatedTerms = new[] {
        ///             new {
        ///                 description = "<AtlasRelatedTermHeaderDescription>",
        ///                 displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                 expression = "<AtlasRelatedTermHeaderExpression>",
        ///                 relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                 source = "<AtlasRelatedTermHeaderSource>",
        ///                 status = "<DRAFT>",
        ///                 steward = "<AtlasRelatedTermHeaderSteward>",
        ///                 termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///             }
        ///         },
        ///         translationTerms = new[] {
        ///             new {
        ///                 description = "<AtlasRelatedTermHeaderDescription>",
        ///                 displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                 expression = "<AtlasRelatedTermHeaderExpression>",
        ///                 relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                 source = "<AtlasRelatedTermHeaderSource>",
        ///                 status = "<DRAFT>",
        ///                 steward = "<AtlasRelatedTermHeaderSteward>",
        ///                 termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///             }
        ///         },
        ///         usage = "<AtlasGlossaryTermUsage>",
        ///         validValues = new[] {
        ///             new {
        ///                 description = "<AtlasRelatedTermHeaderDescription>",
        ///                 displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                 expression = "<AtlasRelatedTermHeaderExpression>",
        ///                 relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                 source = "<AtlasRelatedTermHeaderSource>",
        ///                 status = "<DRAFT>",
        ///                 steward = "<AtlasRelatedTermHeaderSteward>",
        ///                 termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///             }
        ///         },
        ///         validValuesFor = new[] {
        ///             new {
        ///                 description = "<AtlasRelatedTermHeaderDescription>",
        ///                 displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                 expression = "<AtlasRelatedTermHeaderExpression>",
        ///                 relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                 source = "<AtlasRelatedTermHeaderSource>",
        ///                 status = "<DRAFT>",
        ///                 steward = "<AtlasRelatedTermHeaderSteward>",
        ///                 termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///             }
        ///         },
        ///     }
        /// };
        /// 
        /// Response response = client.CreateGlossaryTerms(RequestContent.Create(data), true);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result[0].GetProperty("longDescription").ToString());
        /// Console.WriteLine(result[0].GetProperty("name").ToString());
        /// Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
        /// Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
        /// Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result[0].GetProperty("abbreviation").ToString());
        /// Console.WriteLine(result[0].GetProperty("templateName")[0].ToString());
        /// Console.WriteLine(result[0].GetProperty("anchor").GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("anchor").GetProperty("glossaryGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("anchor").GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("createTime").ToString());
        /// Console.WriteLine(result[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result[0].GetProperty("updateTime").ToString());
        /// Console.WriteLine(result[0].GetProperty("updatedBy").ToString());
        /// Console.WriteLine(result[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("displayName").ToString());
        /// Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("url").ToString());
        /// Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
        /// Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
        /// Console.WriteLine(result[0].GetProperty("attributes").GetProperty("<test>").GetProperty("<test>").ToString());
        /// Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
        /// Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
        /// Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
        /// Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("examples")[0].ToString());
        /// Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("usage").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>ArrayOfAtlasGlossaryTerm</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       entityGuid: string, # Optional. The GUID of the entity.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. The end of the time boundary.
        ///           startTime: string, # Optional. The start of the time boundary.
        ///           timeZone: string, # Optional. The timezone of the time boundary.
        ///         }
        ///       ], # Optional. An array of time boundaries indicating validity periods.
        ///       source: string, # Optional. indicate the source who create the classification detail
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///     }
        ///   ], # Optional. An array of classifications.
        ///   longDescription: string, # Optional. The long version description.
        ///   name: string, # Optional. The name of the glossary object.
        ///   qualifiedName: string, # Optional. The qualified name of the glossary object.
        ///   shortDescription: string, # Optional. The short version of description.
        ///   lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///   guid: string, # Optional. The GUID of the object.
        ///   abbreviation: string, # Optional. The abbreviation of the term.
        ///   templateName: [AnyObject], # Optional.
        ///   anchor: {
        ///     displayText: string, # Optional. The display text.
        ///     glossaryGuid: string, # Optional. The GUID of the glossary.
        ///     relationGuid: string, # Optional. The GUID of the relationship.
        ///   }, # Optional. The glossary header with basic information.
        ///   antonyms: [
        ///     {
        ///       description: string, # Optional. The description of the related term.
        ///       displayText: string, # Optional. The display text.
        ///       expression: string, # Optional. The expression of the term.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       source: string, # Optional. The source of the term.
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///       steward: string, # Optional. The steward of the term.
        ///       termGuid: string, # Optional. The GUID of the term.
        ///     }
        ///   ], # Optional. An array of related term headers as antonyms.
        ///   createTime: number, # Optional. The created time of the record.
        ///   createdBy: string, # Optional. The user who created the record.
        ///   updateTime: number, # Optional. The update time of the record.
        ///   updatedBy: string, # Optional. The user who updated the record.
        ///   status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;, # Optional. Status of the AtlasGlossaryTerm
        ///   resources: [
        ///     {
        ///       displayName: string, # Optional. Display name for url.
        ///       url: string, # Optional. web url. http or https
        ///     }
        ///   ], # Optional. An array of resource link for term
        ///   contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. The dictionary of contacts for terms. Key could be Expert or Steward.
        ///   attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;, # Optional. The custom attributes of the term, which is map&lt;string,map&lt;string,object&gt;&gt;.
        /// The key of the first layer map is term template name.
        ///   assignedEntities: [
        ///     {
        ///       guid: string, # Optional. The GUID of the object.
        ///       typeName: string, # Optional. The name of the type.
        ///       uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The unique attributes of the object.
        ///       displayText: string, # Optional. The display text.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       relationshipType: string, # Optional.
        ///       relationshipAttributes: {
        ///         attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///         typeName: string, # Optional. The name of the type.
        ///         lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       }, # Optional. Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.
        ///       relationshipGuid: string, # Optional. The GUID of the relationship.
        ///       relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. The enum of relationship status.
        ///     }
        ///   ], # Optional. An array of related object IDs.
        ///   categories: [
        ///     {
        ///       categoryGuid: string, # Optional. The GUID of the category.
        ///       description: string, # Optional. The description of the record.
        ///       displayText: string, # Optional. The display text.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///     }
        ///   ], # Optional. An array of term categorization headers.
        ///   classifies: [AtlasRelatedTermHeader], # Optional. An array of related term headers.
        ///   examples: [string], # Optional. An array of examples.
        ///   isA: [AtlasRelatedTermHeader], # Optional. An array of related term headers indicating the is-a relationship.
        ///   preferredTerms: [AtlasRelatedTermHeader], # Optional. An array of preferred related term headers.
        ///   preferredToTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are preferred to.
        ///   replacedBy: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are replaced by.
        ///   replacementTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for replacement.
        ///   seeAlso: [AtlasRelatedTermHeader], # Optional. An array of related term headers for see also.
        ///   synonyms: [AtlasRelatedTermHeader], # Optional. An array of related term headers as synonyms.
        ///   translatedTerms: [AtlasRelatedTermHeader], # Optional. An array of translated related term headers.
        ///   translationTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for translation.
        ///   usage: string, # Optional. The usage of the term.
        ///   validValues: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values.
        ///   validValuesFor: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values for other records.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ArrayOfAtlasGlossaryTerm</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       entityGuid: string, # Optional. The GUID of the entity.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. The end of the time boundary.
        ///           startTime: string, # Optional. The start of the time boundary.
        ///           timeZone: string, # Optional. The timezone of the time boundary.
        ///         }
        ///       ], # Optional. An array of time boundaries indicating validity periods.
        ///       source: string, # Optional. indicate the source who create the classification detail
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///     }
        ///   ], # Optional. An array of classifications.
        ///   longDescription: string, # Optional. The long version description.
        ///   name: string, # Optional. The name of the glossary object.
        ///   qualifiedName: string, # Optional. The qualified name of the glossary object.
        ///   shortDescription: string, # Optional. The short version of description.
        ///   lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///   guid: string, # Optional. The GUID of the object.
        ///   abbreviation: string, # Optional. The abbreviation of the term.
        ///   templateName: [AnyObject], # Optional.
        ///   anchor: {
        ///     displayText: string, # Optional. The display text.
        ///     glossaryGuid: string, # Optional. The GUID of the glossary.
        ///     relationGuid: string, # Optional. The GUID of the relationship.
        ///   }, # Optional. The glossary header with basic information.
        ///   antonyms: [
        ///     {
        ///       description: string, # Optional. The description of the related term.
        ///       displayText: string, # Optional. The display text.
        ///       expression: string, # Optional. The expression of the term.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       source: string, # Optional. The source of the term.
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///       steward: string, # Optional. The steward of the term.
        ///       termGuid: string, # Optional. The GUID of the term.
        ///     }
        ///   ], # Optional. An array of related term headers as antonyms.
        ///   createTime: number, # Optional. The created time of the record.
        ///   createdBy: string, # Optional. The user who created the record.
        ///   updateTime: number, # Optional. The update time of the record.
        ///   updatedBy: string, # Optional. The user who updated the record.
        ///   status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;, # Optional. Status of the AtlasGlossaryTerm
        ///   resources: [
        ///     {
        ///       displayName: string, # Optional. Display name for url.
        ///       url: string, # Optional. web url. http or https
        ///     }
        ///   ], # Optional. An array of resource link for term
        ///   contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. The dictionary of contacts for terms. Key could be Expert or Steward.
        ///   attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;, # Optional. The custom attributes of the term, which is map&lt;string,map&lt;string,object&gt;&gt;.
        /// The key of the first layer map is term template name.
        ///   assignedEntities: [
        ///     {
        ///       guid: string, # Optional. The GUID of the object.
        ///       typeName: string, # Optional. The name of the type.
        ///       uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The unique attributes of the object.
        ///       displayText: string, # Optional. The display text.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       relationshipType: string, # Optional.
        ///       relationshipAttributes: {
        ///         attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///         typeName: string, # Optional. The name of the type.
        ///         lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       }, # Optional. Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.
        ///       relationshipGuid: string, # Optional. The GUID of the relationship.
        ///       relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. The enum of relationship status.
        ///     }
        ///   ], # Optional. An array of related object IDs.
        ///   categories: [
        ///     {
        ///       categoryGuid: string, # Optional. The GUID of the category.
        ///       description: string, # Optional. The description of the record.
        ///       displayText: string, # Optional. The display text.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///     }
        ///   ], # Optional. An array of term categorization headers.
        ///   classifies: [AtlasRelatedTermHeader], # Optional. An array of related term headers.
        ///   examples: [string], # Optional. An array of examples.
        ///   isA: [AtlasRelatedTermHeader], # Optional. An array of related term headers indicating the is-a relationship.
        ///   preferredTerms: [AtlasRelatedTermHeader], # Optional. An array of preferred related term headers.
        ///   preferredToTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are preferred to.
        ///   replacedBy: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are replaced by.
        ///   replacementTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for replacement.
        ///   seeAlso: [AtlasRelatedTermHeader], # Optional. An array of related term headers for see also.
        ///   synonyms: [AtlasRelatedTermHeader], # Optional. An array of related term headers as synonyms.
        ///   translatedTerms: [AtlasRelatedTermHeader], # Optional. An array of translated related term headers.
        ///   translationTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for translation.
        ///   usage: string, # Optional. The usage of the term.
        ///   validValues: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values.
        ///   validValuesFor: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values for other records.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response CreateGlossaryTerms(RequestContent content, bool? includeTermHierarchy = null, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.CreateGlossaryTerms");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateGlossaryTermsRequest(content, includeTermHierarchy, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get all related objects assigned with the specified term. </summary>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="termGuid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="termGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetEntitiesAssignedWithTermAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// Response response = await client.GetEntitiesAssignedWithTermAsync("<termGuid>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].ToString());
        /// ]]></code>
        /// This sample shows how to call GetEntitiesAssignedWithTermAsync with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// Response response = await client.GetEntitiesAssignedWithTermAsync("<termGuid>", 1234, 1234, "<sort>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result[0].GetProperty("uniqueAttributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result[0].GetProperty("relationshipType").ToString());
        /// Console.WriteLine(result[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
        /// Console.WriteLine(result[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result[0].GetProperty("relationshipGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("relationshipStatus").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ArrayOfAtlasRelatedObjectId</c>:
        /// <code>{
        ///   guid: string, # Optional. The GUID of the object.
        ///   typeName: string, # Optional. The name of the type.
        ///   uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The unique attributes of the object.
        ///   displayText: string, # Optional. The display text.
        ///   entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///   relationshipType: string, # Optional.
        ///   relationshipAttributes: {
        ///     attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///     typeName: string, # Optional. The name of the type.
        ///     lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///   }, # Optional. Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.
        ///   relationshipGuid: string, # Optional. The GUID of the relationship.
        ///   relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. The enum of relationship status.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetEntitiesAssignedWithTermAsync(string termGuid, int? limit = null, int? offset = null, string sort = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(termGuid, nameof(termGuid));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.GetEntitiesAssignedWithTerm");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetEntitiesAssignedWithTermRequest(termGuid, limit, offset, sort, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get all related objects assigned with the specified term. </summary>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="termGuid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="termGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetEntitiesAssignedWithTerm with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// Response response = client.GetEntitiesAssignedWithTerm("<termGuid>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].ToString());
        /// ]]></code>
        /// This sample shows how to call GetEntitiesAssignedWithTerm with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// Response response = client.GetEntitiesAssignedWithTerm("<termGuid>", 1234, 1234, "<sort>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result[0].GetProperty("uniqueAttributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result[0].GetProperty("relationshipType").ToString());
        /// Console.WriteLine(result[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
        /// Console.WriteLine(result[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result[0].GetProperty("relationshipGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("relationshipStatus").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ArrayOfAtlasRelatedObjectId</c>:
        /// <code>{
        ///   guid: string, # Optional. The GUID of the object.
        ///   typeName: string, # Optional. The name of the type.
        ///   uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The unique attributes of the object.
        ///   displayText: string, # Optional. The display text.
        ///   entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///   relationshipType: string, # Optional.
        ///   relationshipAttributes: {
        ///     attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///     typeName: string, # Optional. The name of the type.
        ///     lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///   }, # Optional. Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.
        ///   relationshipGuid: string, # Optional. The GUID of the relationship.
        ///   relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. The enum of relationship status.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetEntitiesAssignedWithTerm(string termGuid, int? limit = null, int? offset = null, string sort = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(termGuid, nameof(termGuid));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.GetEntitiesAssignedWithTerm");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetEntitiesAssignedWithTermRequest(termGuid, limit, offset, sort, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Assign the given term to the provided list of related objects. </summary>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="termGuid"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="termGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call AssignTermToEntitiesAsync with required parameters and request content.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// var data = new[] {
        ///     new {
        ///         guid = "<AtlasObjectIdGuid>",
        ///         typeName = "<AtlasObjectIdTypeName>",
        ///         uniqueAttributes = new {
        ///             key = new {},
        ///         },
        ///         displayText = "<AtlasRelatedObjectIdDisplayText>",
        ///         entityStatus = "<ACTIVE>",
        ///         relationshipType = "<AtlasRelatedObjectIdRelationshipType>",
        ///         relationshipAttributes = new {
        ///             attributes = new {
        ///                 key = new {},
        ///             },
        ///             typeName = "<AtlasStructTypeName>",
        ///             lastModifiedTS = "<LastModifiedTS>",
        ///             entityGuid = "<AtlasClassificationEntityGuid>",
        ///             entityStatus = "<ACTIVE>",
        ///             removePropagationsOnEntityDelete = true,
        ///             validityPeriods = new[] {
        ///                 new {
        ///                     endTime = "<TimeBoundaryEndTime>",
        ///                     startTime = "<TimeBoundaryStartTime>",
        ///                     timeZone = "<TimeBoundaryTimeZone>",
        ///                 }
        ///             },
        ///             source = "<AtlasClassificationSource>",
        ///             sourceDetails = new {
        ///                 key = new {},
        ///             },
        ///         },
        ///         relationshipGuid = "<AtlasRelatedObjectIdRelationshipGuid>",
        ///         relationshipStatus = "<ACTIVE>",
        ///     }
        /// };
        /// 
        /// Response response = await client.AssignTermToEntitiesAsync("<termGuid>", RequestContent.Create(data));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>ArrayOfAtlasRelatedObjectId</c>:
        /// <code>{
        ///   guid: string, # Optional. The GUID of the object.
        ///   typeName: string, # Optional. The name of the type.
        ///   uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The unique attributes of the object.
        ///   displayText: string, # Optional. The display text.
        ///   entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///   relationshipType: string, # Optional.
        ///   relationshipAttributes: {
        ///     attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///     typeName: string, # Optional. The name of the type.
        ///     lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///   }, # Optional. Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.
        ///   relationshipGuid: string, # Optional. The GUID of the relationship.
        ///   relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. The enum of relationship status.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> AssignTermToEntitiesAsync(string termGuid, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(termGuid, nameof(termGuid));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.AssignTermToEntities");
            scope.Start();
            try
            {
                using HttpMessage message = CreateAssignTermToEntitiesRequest(termGuid, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Assign the given term to the provided list of related objects. </summary>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="termGuid"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="termGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call AssignTermToEntities with required parameters and request content.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// var data = new[] {
        ///     new {
        ///         guid = "<AtlasObjectIdGuid>",
        ///         typeName = "<AtlasObjectIdTypeName>",
        ///         uniqueAttributes = new {
        ///             key = new {},
        ///         },
        ///         displayText = "<AtlasRelatedObjectIdDisplayText>",
        ///         entityStatus = "<ACTIVE>",
        ///         relationshipType = "<AtlasRelatedObjectIdRelationshipType>",
        ///         relationshipAttributes = new {
        ///             attributes = new {
        ///                 key = new {},
        ///             },
        ///             typeName = "<AtlasStructTypeName>",
        ///             lastModifiedTS = "<LastModifiedTS>",
        ///             entityGuid = "<AtlasClassificationEntityGuid>",
        ///             entityStatus = "<ACTIVE>",
        ///             removePropagationsOnEntityDelete = true,
        ///             validityPeriods = new[] {
        ///                 new {
        ///                     endTime = "<TimeBoundaryEndTime>",
        ///                     startTime = "<TimeBoundaryStartTime>",
        ///                     timeZone = "<TimeBoundaryTimeZone>",
        ///                 }
        ///             },
        ///             source = "<AtlasClassificationSource>",
        ///             sourceDetails = new {
        ///                 key = new {},
        ///             },
        ///         },
        ///         relationshipGuid = "<AtlasRelatedObjectIdRelationshipGuid>",
        ///         relationshipStatus = "<ACTIVE>",
        ///     }
        /// };
        /// 
        /// Response response = client.AssignTermToEntities("<termGuid>", RequestContent.Create(data));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>ArrayOfAtlasRelatedObjectId</c>:
        /// <code>{
        ///   guid: string, # Optional. The GUID of the object.
        ///   typeName: string, # Optional. The name of the type.
        ///   uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The unique attributes of the object.
        ///   displayText: string, # Optional. The display text.
        ///   entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///   relationshipType: string, # Optional.
        ///   relationshipAttributes: {
        ///     attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///     typeName: string, # Optional. The name of the type.
        ///     lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///   }, # Optional. Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.
        ///   relationshipGuid: string, # Optional. The GUID of the relationship.
        ///   relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. The enum of relationship status.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response AssignTermToEntities(string termGuid, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(termGuid, nameof(termGuid));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.AssignTermToEntities");
            scope.Start();
            try
            {
                using HttpMessage message = CreateAssignTermToEntitiesRequest(termGuid, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete the term assignment for the given list of related objects. </summary>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="termGuid"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="termGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call RemoveTermAssignmentFromEntitiesAsync with required parameters and request content.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// var data = new[] {
        ///     new {
        ///         guid = "<AtlasObjectIdGuid>",
        ///         typeName = "<AtlasObjectIdTypeName>",
        ///         uniqueAttributes = new {
        ///             key = new {},
        ///         },
        ///         displayText = "<AtlasRelatedObjectIdDisplayText>",
        ///         entityStatus = "<ACTIVE>",
        ///         relationshipType = "<AtlasRelatedObjectIdRelationshipType>",
        ///         relationshipAttributes = new {
        ///             attributes = new {
        ///                 key = new {},
        ///             },
        ///             typeName = "<AtlasStructTypeName>",
        ///             lastModifiedTS = "<LastModifiedTS>",
        ///             entityGuid = "<AtlasClassificationEntityGuid>",
        ///             entityStatus = "<ACTIVE>",
        ///             removePropagationsOnEntityDelete = true,
        ///             validityPeriods = new[] {
        ///                 new {
        ///                     endTime = "<TimeBoundaryEndTime>",
        ///                     startTime = "<TimeBoundaryStartTime>",
        ///                     timeZone = "<TimeBoundaryTimeZone>",
        ///                 }
        ///             },
        ///             source = "<AtlasClassificationSource>",
        ///             sourceDetails = new {
        ///                 key = new {},
        ///             },
        ///         },
        ///         relationshipGuid = "<AtlasRelatedObjectIdRelationshipGuid>",
        ///         relationshipStatus = "<ACTIVE>",
        ///     }
        /// };
        /// 
        /// Response response = await client.RemoveTermAssignmentFromEntitiesAsync("<termGuid>", RequestContent.Create(data));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>ArrayOfAtlasRelatedObjectId</c>:
        /// <code>{
        ///   guid: string, # Optional. The GUID of the object.
        ///   typeName: string, # Optional. The name of the type.
        ///   uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The unique attributes of the object.
        ///   displayText: string, # Optional. The display text.
        ///   entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///   relationshipType: string, # Optional.
        ///   relationshipAttributes: {
        ///     attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///     typeName: string, # Optional. The name of the type.
        ///     lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///   }, # Optional. Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.
        ///   relationshipGuid: string, # Optional. The GUID of the relationship.
        ///   relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. The enum of relationship status.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> RemoveTermAssignmentFromEntitiesAsync(string termGuid, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(termGuid, nameof(termGuid));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.RemoveTermAssignmentFromEntities");
            scope.Start();
            try
            {
                using HttpMessage message = CreateRemoveTermAssignmentFromEntitiesRequest(termGuid, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete the term assignment for the given list of related objects. </summary>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="termGuid"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="termGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call RemoveTermAssignmentFromEntities with required parameters and request content.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// var data = new[] {
        ///     new {
        ///         guid = "<AtlasObjectIdGuid>",
        ///         typeName = "<AtlasObjectIdTypeName>",
        ///         uniqueAttributes = new {
        ///             key = new {},
        ///         },
        ///         displayText = "<AtlasRelatedObjectIdDisplayText>",
        ///         entityStatus = "<ACTIVE>",
        ///         relationshipType = "<AtlasRelatedObjectIdRelationshipType>",
        ///         relationshipAttributes = new {
        ///             attributes = new {
        ///                 key = new {},
        ///             },
        ///             typeName = "<AtlasStructTypeName>",
        ///             lastModifiedTS = "<LastModifiedTS>",
        ///             entityGuid = "<AtlasClassificationEntityGuid>",
        ///             entityStatus = "<ACTIVE>",
        ///             removePropagationsOnEntityDelete = true,
        ///             validityPeriods = new[] {
        ///                 new {
        ///                     endTime = "<TimeBoundaryEndTime>",
        ///                     startTime = "<TimeBoundaryStartTime>",
        ///                     timeZone = "<TimeBoundaryTimeZone>",
        ///                 }
        ///             },
        ///             source = "<AtlasClassificationSource>",
        ///             sourceDetails = new {
        ///                 key = new {},
        ///             },
        ///         },
        ///         relationshipGuid = "<AtlasRelatedObjectIdRelationshipGuid>",
        ///         relationshipStatus = "<ACTIVE>",
        ///     }
        /// };
        /// 
        /// Response response = client.RemoveTermAssignmentFromEntities("<termGuid>", RequestContent.Create(data));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>ArrayOfAtlasRelatedObjectId</c>:
        /// <code>{
        ///   guid: string, # Optional. The GUID of the object.
        ///   typeName: string, # Optional. The name of the type.
        ///   uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The unique attributes of the object.
        ///   displayText: string, # Optional. The display text.
        ///   entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///   relationshipType: string, # Optional.
        ///   relationshipAttributes: {
        ///     attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///     typeName: string, # Optional. The name of the type.
        ///     lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///   }, # Optional. Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.
        ///   relationshipGuid: string, # Optional. The GUID of the relationship.
        ///   relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. The enum of relationship status.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response RemoveTermAssignmentFromEntities(string termGuid, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(termGuid, nameof(termGuid));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.RemoveTermAssignmentFromEntities");
            scope.Start();
            try
            {
                using HttpMessage message = CreateRemoveTermAssignmentFromEntitiesRequest(termGuid, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete the term assignment for the given list of related objects. </summary>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="termGuid"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="termGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteTermAssignmentFromEntitiesAsync with required parameters and request content.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// var data = new[] {
        ///     new {
        ///         guid = "<AtlasObjectIdGuid>",
        ///         typeName = "<AtlasObjectIdTypeName>",
        ///         uniqueAttributes = new {
        ///             key = new {},
        ///         },
        ///         displayText = "<AtlasRelatedObjectIdDisplayText>",
        ///         entityStatus = "<ACTIVE>",
        ///         relationshipType = "<AtlasRelatedObjectIdRelationshipType>",
        ///         relationshipAttributes = new {
        ///             attributes = new {
        ///                 key = new {},
        ///             },
        ///             typeName = "<AtlasStructTypeName>",
        ///             lastModifiedTS = "<LastModifiedTS>",
        ///             entityGuid = "<AtlasClassificationEntityGuid>",
        ///             entityStatus = "<ACTIVE>",
        ///             removePropagationsOnEntityDelete = true,
        ///             validityPeriods = new[] {
        ///                 new {
        ///                     endTime = "<TimeBoundaryEndTime>",
        ///                     startTime = "<TimeBoundaryStartTime>",
        ///                     timeZone = "<TimeBoundaryTimeZone>",
        ///                 }
        ///             },
        ///             source = "<AtlasClassificationSource>",
        ///             sourceDetails = new {
        ///                 key = new {},
        ///             },
        ///         },
        ///         relationshipGuid = "<AtlasRelatedObjectIdRelationshipGuid>",
        ///         relationshipStatus = "<ACTIVE>",
        ///     }
        /// };
        /// 
        /// Response response = await client.DeleteTermAssignmentFromEntitiesAsync("<termGuid>", RequestContent.Create(data));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>ArrayOfAtlasRelatedObjectId</c>:
        /// <code>{
        ///   guid: string, # Optional. The GUID of the object.
        ///   typeName: string, # Optional. The name of the type.
        ///   uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The unique attributes of the object.
        ///   displayText: string, # Optional. The display text.
        ///   entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///   relationshipType: string, # Optional.
        ///   relationshipAttributes: {
        ///     attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///     typeName: string, # Optional. The name of the type.
        ///     lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///   }, # Optional. Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.
        ///   relationshipGuid: string, # Optional. The GUID of the relationship.
        ///   relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. The enum of relationship status.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> DeleteTermAssignmentFromEntitiesAsync(string termGuid, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(termGuid, nameof(termGuid));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.DeleteTermAssignmentFromEntities");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteTermAssignmentFromEntitiesRequest(termGuid, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete the term assignment for the given list of related objects. </summary>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="termGuid"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="termGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteTermAssignmentFromEntities with required parameters and request content.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// var data = new[] {
        ///     new {
        ///         guid = "<AtlasObjectIdGuid>",
        ///         typeName = "<AtlasObjectIdTypeName>",
        ///         uniqueAttributes = new {
        ///             key = new {},
        ///         },
        ///         displayText = "<AtlasRelatedObjectIdDisplayText>",
        ///         entityStatus = "<ACTIVE>",
        ///         relationshipType = "<AtlasRelatedObjectIdRelationshipType>",
        ///         relationshipAttributes = new {
        ///             attributes = new {
        ///                 key = new {},
        ///             },
        ///             typeName = "<AtlasStructTypeName>",
        ///             lastModifiedTS = "<LastModifiedTS>",
        ///             entityGuid = "<AtlasClassificationEntityGuid>",
        ///             entityStatus = "<ACTIVE>",
        ///             removePropagationsOnEntityDelete = true,
        ///             validityPeriods = new[] {
        ///                 new {
        ///                     endTime = "<TimeBoundaryEndTime>",
        ///                     startTime = "<TimeBoundaryStartTime>",
        ///                     timeZone = "<TimeBoundaryTimeZone>",
        ///                 }
        ///             },
        ///             source = "<AtlasClassificationSource>",
        ///             sourceDetails = new {
        ///                 key = new {},
        ///             },
        ///         },
        ///         relationshipGuid = "<AtlasRelatedObjectIdRelationshipGuid>",
        ///         relationshipStatus = "<ACTIVE>",
        ///     }
        /// };
        /// 
        /// Response response = client.DeleteTermAssignmentFromEntities("<termGuid>", RequestContent.Create(data));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>ArrayOfAtlasRelatedObjectId</c>:
        /// <code>{
        ///   guid: string, # Optional. The GUID of the object.
        ///   typeName: string, # Optional. The name of the type.
        ///   uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The unique attributes of the object.
        ///   displayText: string, # Optional. The display text.
        ///   entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///   relationshipType: string, # Optional.
        ///   relationshipAttributes: {
        ///     attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///     typeName: string, # Optional. The name of the type.
        ///     lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///   }, # Optional. Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.
        ///   relationshipGuid: string, # Optional. The GUID of the relationship.
        ///   relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. The enum of relationship status.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response DeleteTermAssignmentFromEntities(string termGuid, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(termGuid, nameof(termGuid));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.DeleteTermAssignmentFromEntities");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteTermAssignmentFromEntitiesRequest(termGuid, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get all related terms for a specific term by its GUID. Limit, offset, and sort parameters are currently not being enabled and won&apos;t work even they are passed. </summary>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="termGuid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="termGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetRelatedTermsAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// Response response = await client.GetRelatedTermsAsync("<termGuid>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("<test>")[0].ToString());
        /// ]]></code>
        /// This sample shows how to call GetRelatedTermsAsync with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// Response response = await client.GetRelatedTermsAsync("<termGuid>", 1234, 1234, "<sort>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("termGuid").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>DictionaryOfpathsV84KwqAtlasV2GlossaryTermsTermguidRelatedGetResponses200ContentApplicationJsonSchemaAdditionalproperties</c>:
        /// <code>{
        ///   description: string, # Optional. The description of the related term.
        ///   displayText: string, # Optional. The display text.
        ///   expression: string, # Optional. The expression of the term.
        ///   relationGuid: string, # Optional. The GUID of the relationship.
        ///   source: string, # Optional. The source of the term.
        ///   status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///   steward: string, # Optional. The steward of the term.
        ///   termGuid: string, # Optional. The GUID of the term.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetRelatedTermsAsync(string termGuid, int? limit = null, int? offset = null, string sort = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(termGuid, nameof(termGuid));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.GetRelatedTerms");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetRelatedTermsRequest(termGuid, limit, offset, sort, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get all related terms for a specific term by its GUID. Limit, offset, and sort parameters are currently not being enabled and won&apos;t work even they are passed. </summary>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="termGuid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="termGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetRelatedTerms with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// Response response = client.GetRelatedTerms("<termGuid>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("<test>")[0].ToString());
        /// ]]></code>
        /// This sample shows how to call GetRelatedTerms with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// Response response = client.GetRelatedTerms("<termGuid>", 1234, 1234, "<sort>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("termGuid").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>DictionaryOfpathsV84KwqAtlasV2GlossaryTermsTermguidRelatedGetResponses200ContentApplicationJsonSchemaAdditionalproperties</c>:
        /// <code>{
        ///   description: string, # Optional. The description of the related term.
        ///   displayText: string, # Optional. The display text.
        ///   expression: string, # Optional. The expression of the term.
        ///   relationGuid: string, # Optional. The GUID of the relationship.
        ///   source: string, # Optional. The source of the term.
        ///   status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///   steward: string, # Optional. The steward of the term.
        ///   termGuid: string, # Optional. The GUID of the term.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetRelatedTerms(string termGuid, int? limit = null, int? offset = null, string sort = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(termGuid, nameof(termGuid));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.GetRelatedTerms");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetRelatedTermsRequest(termGuid, limit, offset, sort, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a specific Glossary by its GUID. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryGuid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="glossaryGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetGlossaryAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// Response response = await client.GetGlossaryAsync("<glossaryGuid>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("longDescription").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("qualifiedName").ToString());
        /// Console.WriteLine(result.GetProperty("shortDescription").ToString());
        /// Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("language").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("usage").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// <details><summary>AtlasGlossaryExtInfo</summary>Schema for <c>AtlasGlossaryExtInfo</c>:
        /// <code>{
        ///   categories: [
        ///     {
        ///       categoryGuid: string, # Optional. The GUID of the category.
        ///       description: string, # Optional. The description of the category header.
        ///       displayText: string, # Optional. The display text.
        ///       parentCategoryGuid: string, # Optional. The GUID of the parent category.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///     }
        ///   ], # Optional. An array of categories.
        ///   language: string, # Optional. The language of the glossary.
        ///   terms: [
        ///     {
        ///       description: string, # Optional. The description of the related term.
        ///       displayText: string, # Optional. The display text.
        ///       expression: string, # Optional. The expression of the term.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       source: string, # Optional. The source of the term.
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///       steward: string, # Optional. The steward of the term.
        ///       termGuid: string, # Optional. The GUID of the term.
        ///     }
        ///   ], # Optional. An array of related term headers.
        ///   usage: string, # Optional. The usage of the glossary.
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       entityGuid: string, # Optional. The GUID of the entity.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. The end of the time boundary.
        ///           startTime: string, # Optional. The start of the time boundary.
        ///           timeZone: string, # Optional. The timezone of the time boundary.
        ///         }
        ///       ], # Optional. An array of time boundaries indicating validity periods.
        ///       source: string, # Optional. indicate the source who create the classification detail
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///     }
        ///   ], # Optional. An array of classifications.
        ///   longDescription: string, # Optional. The long version description.
        ///   name: string, # Optional. The name of the glossary object.
        ///   qualifiedName: string, # Optional. The qualified name of the glossary object.
        ///   shortDescription: string, # Optional. The short version of description.
        ///   lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///   guid: string, # Optional. The GUID of the object.
        ///   categoryInfo: Dictionary&lt;string, AtlasGlossaryCategory&gt;, # Optional. The glossary category information.
        ///   termInfo: Dictionary&lt;string, AtlasGlossaryTerm&gt;, # Optional. The glossary term information.
        /// }
        /// </code>
        /// </details>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetGlossaryAsync(string glossaryGuid, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(glossaryGuid, nameof(glossaryGuid));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.GetGlossary");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetGlossaryRequest(glossaryGuid, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a specific Glossary by its GUID. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryGuid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="glossaryGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetGlossary with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// Response response = client.GetGlossary("<glossaryGuid>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("longDescription").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("qualifiedName").ToString());
        /// Console.WriteLine(result.GetProperty("shortDescription").ToString());
        /// Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("language").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("usage").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// <details><summary>AtlasGlossaryExtInfo</summary>Schema for <c>AtlasGlossaryExtInfo</c>:
        /// <code>{
        ///   categories: [
        ///     {
        ///       categoryGuid: string, # Optional. The GUID of the category.
        ///       description: string, # Optional. The description of the category header.
        ///       displayText: string, # Optional. The display text.
        ///       parentCategoryGuid: string, # Optional. The GUID of the parent category.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///     }
        ///   ], # Optional. An array of categories.
        ///   language: string, # Optional. The language of the glossary.
        ///   terms: [
        ///     {
        ///       description: string, # Optional. The description of the related term.
        ///       displayText: string, # Optional. The display text.
        ///       expression: string, # Optional. The expression of the term.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       source: string, # Optional. The source of the term.
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///       steward: string, # Optional. The steward of the term.
        ///       termGuid: string, # Optional. The GUID of the term.
        ///     }
        ///   ], # Optional. An array of related term headers.
        ///   usage: string, # Optional. The usage of the glossary.
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       entityGuid: string, # Optional. The GUID of the entity.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. The end of the time boundary.
        ///           startTime: string, # Optional. The start of the time boundary.
        ///           timeZone: string, # Optional. The timezone of the time boundary.
        ///         }
        ///       ], # Optional. An array of time boundaries indicating validity periods.
        ///       source: string, # Optional. indicate the source who create the classification detail
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///     }
        ///   ], # Optional. An array of classifications.
        ///   longDescription: string, # Optional. The long version description.
        ///   name: string, # Optional. The name of the glossary object.
        ///   qualifiedName: string, # Optional. The qualified name of the glossary object.
        ///   shortDescription: string, # Optional. The short version of description.
        ///   lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///   guid: string, # Optional. The GUID of the object.
        ///   categoryInfo: Dictionary&lt;string, AtlasGlossaryCategory&gt;, # Optional. The glossary category information.
        ///   termInfo: Dictionary&lt;string, AtlasGlossaryTerm&gt;, # Optional. The glossary term information.
        /// }
        /// </code>
        /// </details>
        /// 
        /// </remarks>
        public virtual Response GetGlossary(string glossaryGuid, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(glossaryGuid, nameof(glossaryGuid));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.GetGlossary");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetGlossaryRequest(glossaryGuid, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update the given glossary. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryGuid"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="glossaryGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call UpdateGlossaryAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.UpdateGlossaryAsync("<glossaryGuid>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call UpdateGlossaryAsync with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// var data = new {
        ///     categories = new[] {
        ///         new {
        ///             categoryGuid = "<AtlasRelatedCategoryHeaderCategoryGuid>",
        ///             description = "<AtlasRelatedCategoryHeaderDescription>",
        ///             displayText = "<AtlasRelatedCategoryHeaderDisplayText>",
        ///             parentCategoryGuid = "<AtlasRelatedCategoryHeaderParentCategoryGuid>",
        ///             relationGuid = "<AtlasRelatedCategoryHeaderRelationGuid>",
        ///         }
        ///     },
        ///     language = "<AtlasGlossaryLanguage>",
        ///     terms = new[] {
        ///         new {
        ///             description = "<AtlasRelatedTermHeaderDescription>",
        ///             displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///             expression = "<AtlasRelatedTermHeaderExpression>",
        ///             relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///             source = "<AtlasRelatedTermHeaderSource>",
        ///             status = "<DRAFT>",
        ///             steward = "<AtlasRelatedTermHeaderSteward>",
        ///             termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///         }
        ///     },
        ///     usage = "<AtlasGlossaryUsage>",
        ///     classifications = new[] {
        ///         new {
        ///             attributes = new {
        ///                 key = new {},
        ///             },
        ///             typeName = "<AtlasStructTypeName>",
        ///             lastModifiedTS = "<LastModifiedTS>",
        ///             entityGuid = "<AtlasClassificationEntityGuid>",
        ///             entityStatus = "<ACTIVE>",
        ///             removePropagationsOnEntityDelete = true,
        ///             validityPeriods = new[] {
        ///                 new {
        ///                     endTime = "<TimeBoundaryEndTime>",
        ///                     startTime = "<TimeBoundaryStartTime>",
        ///                     timeZone = "<TimeBoundaryTimeZone>",
        ///                 }
        ///             },
        ///             source = "<AtlasClassificationSource>",
        ///             sourceDetails = new {
        ///                 key = new {},
        ///             },
        ///         }
        ///     },
        ///     longDescription = "<AtlasGlossaryBaseObjectLongDescription>",
        ///     name = "<AtlasGlossaryBaseObjectName>",
        ///     qualifiedName = "<AtlasGlossaryBaseObjectQualifiedName>",
        ///     shortDescription = "<AtlasGlossaryBaseObjectShortDescription>",
        ///     lastModifiedTS = "<LastModifiedTS>",
        ///     guid = "<AtlasBaseModelObjectGuid>",
        ///     categoryInfo = new {
        ///         key = new {
        ///             classifications = new[] {
        ///                 new {
        ///                     attributes = new {
        ///                         key = new {},
        ///                     },
        ///                     typeName = "<AtlasStructTypeName>",
        ///                     lastModifiedTS = "<LastModifiedTS>",
        ///                     entityGuid = "<AtlasClassificationEntityGuid>",
        ///                     entityStatus = "<ACTIVE>",
        ///                     removePropagationsOnEntityDelete = true,
        ///                     validityPeriods = new[] {
        ///                         new {
        ///                             endTime = "<TimeBoundaryEndTime>",
        ///                             startTime = "<TimeBoundaryStartTime>",
        ///                             timeZone = "<TimeBoundaryTimeZone>",
        ///                         }
        ///                     },
        ///                     source = "<AtlasClassificationSource>",
        ///                     sourceDetails = new {
        ///                         key = new {},
        ///                     },
        ///                 }
        ///             },
        ///             longDescription = "<AtlasGlossaryBaseObjectLongDescription>",
        ///             name = "<AtlasGlossaryBaseObjectName>",
        ///             qualifiedName = "<AtlasGlossaryBaseObjectQualifiedName>",
        ///             shortDescription = "<AtlasGlossaryBaseObjectShortDescription>",
        ///             lastModifiedTS = "<LastModifiedTS>",
        ///             guid = "<AtlasBaseModelObjectGuid>",
        ///             anchor = new {
        ///                 displayText = "<AtlasGlossaryHeaderDisplayText>",
        ///                 glossaryGuid = "<AtlasGlossaryHeaderGlossaryGuid>",
        ///                 relationGuid = "<AtlasGlossaryHeaderRelationGuid>",
        ///             },
        ///             childrenCategories = new[] {
        ///                 new {
        ///                     categoryGuid = "<AtlasRelatedCategoryHeaderCategoryGuid>",
        ///                     description = "<AtlasRelatedCategoryHeaderDescription>",
        ///                     displayText = "<AtlasRelatedCategoryHeaderDisplayText>",
        ///                     parentCategoryGuid = "<AtlasRelatedCategoryHeaderParentCategoryGuid>",
        ///                     relationGuid = "<AtlasRelatedCategoryHeaderRelationGuid>",
        ///                 }
        ///             },
        ///             parentCategory = new {
        ///                 categoryGuid = "<AtlasRelatedCategoryHeaderCategoryGuid>",
        ///                 description = "<AtlasRelatedCategoryHeaderDescription>",
        ///                 displayText = "<AtlasRelatedCategoryHeaderDisplayText>",
        ///                 parentCategoryGuid = "<AtlasRelatedCategoryHeaderParentCategoryGuid>",
        ///                 relationGuid = "<AtlasRelatedCategoryHeaderRelationGuid>",
        ///             },
        ///             terms = new[] {
        ///                 new {
        ///                     description = "<AtlasRelatedTermHeaderDescription>",
        ///                     displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                     expression = "<AtlasRelatedTermHeaderExpression>",
        ///                     relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                     source = "<AtlasRelatedTermHeaderSource>",
        ///                     status = "<DRAFT>",
        ///                     steward = "<AtlasRelatedTermHeaderSteward>",
        ///                     termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///                 }
        ///             },
        ///         },
        ///     },
        ///     termInfo = new {
        ///         key = new {
        ///             classifications = new[] {
        ///                 new {
        ///                     attributes = new {
        ///                         key = new {},
        ///                     },
        ///                     typeName = "<AtlasStructTypeName>",
        ///                     lastModifiedTS = "<LastModifiedTS>",
        ///                     entityGuid = "<AtlasClassificationEntityGuid>",
        ///                     entityStatus = "<ACTIVE>",
        ///                     removePropagationsOnEntityDelete = true,
        ///                     validityPeriods = new[] {
        ///                         new {
        ///                             endTime = "<TimeBoundaryEndTime>",
        ///                             startTime = "<TimeBoundaryStartTime>",
        ///                             timeZone = "<TimeBoundaryTimeZone>",
        ///                         }
        ///                     },
        ///                     source = "<AtlasClassificationSource>",
        ///                     sourceDetails = new {
        ///                         key = new {},
        ///                     },
        ///                 }
        ///             },
        ///             longDescription = "<AtlasGlossaryBaseObjectLongDescription>",
        ///             name = "<AtlasGlossaryBaseObjectName>",
        ///             qualifiedName = "<AtlasGlossaryBaseObjectQualifiedName>",
        ///             shortDescription = "<AtlasGlossaryBaseObjectShortDescription>",
        ///             lastModifiedTS = "<LastModifiedTS>",
        ///             guid = "<AtlasBaseModelObjectGuid>",
        ///             abbreviation = "<AtlasGlossaryTermAbbreviation>",
        ///             templateName = new[] {
        ///                 new {}
        ///             },
        ///             anchor = new {
        ///                 displayText = "<AtlasGlossaryHeaderDisplayText>",
        ///                 glossaryGuid = "<AtlasGlossaryHeaderGlossaryGuid>",
        ///                 relationGuid = "<AtlasGlossaryHeaderRelationGuid>",
        ///             },
        ///             antonyms = new[] {
        ///                 new {
        ///                     description = "<AtlasRelatedTermHeaderDescription>",
        ///                     displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                     expression = "<AtlasRelatedTermHeaderExpression>",
        ///                     relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                     source = "<AtlasRelatedTermHeaderSource>",
        ///                     status = "<DRAFT>",
        ///                     steward = "<AtlasRelatedTermHeaderSteward>",
        ///                     termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///                 }
        ///             },
        ///             createTime = 1234,
        ///             createdBy = "<AtlasGlossaryTermCreatedBy>",
        ///             updateTime = 1234,
        ///             updatedBy = "<AtlasGlossaryTermUpdatedBy>",
        ///             status = "<Draft>",
        ///             resources = new[] {
        ///                 new {
        ///                     displayName = "<ResourceLinkDisplayName>",
        ///                     url = "<ResourceLinkUrl>",
        ///                 }
        ///             },
        ///             contacts = new {
        ///                 key = new[] {
        ///                     new {
        ///                         id = "<ContactBasicId>",
        ///                         info = "<ContactBasicInfo>",
        ///                     }
        ///                 },
        ///             },
        ///             attributes = new {
        ///                 key = new {
        ///                     key = new {},
        ///                 },
        ///             },
        ///             assignedEntities = new[] {
        ///                 new {
        ///                     guid = "<AtlasObjectIdGuid>",
        ///                     typeName = "<AtlasObjectIdTypeName>",
        ///                     uniqueAttributes = new {
        ///                         key = new {},
        ///                     },
        ///                     displayText = "<AtlasRelatedObjectIdDisplayText>",
        ///                     entityStatus = "<ACTIVE>",
        ///                     relationshipType = "<AtlasRelatedObjectIdRelationshipType>",
        ///                     relationshipAttributes = new {
        ///                         attributes = new {
        ///                             key = new {},
        ///                         },
        ///                         typeName = "<AtlasStructTypeName>",
        ///                         lastModifiedTS = "<LastModifiedTS>",
        ///                         entityGuid = "<AtlasClassificationEntityGuid>",
        ///                         entityStatus = "<ACTIVE>",
        ///                         removePropagationsOnEntityDelete = true,
        ///                         validityPeriods = new[] {
        ///                             new {
        ///                                 endTime = "<TimeBoundaryEndTime>",
        ///                                 startTime = "<TimeBoundaryStartTime>",
        ///                                 timeZone = "<TimeBoundaryTimeZone>",
        ///                             }
        ///                         },
        ///                         source = "<AtlasClassificationSource>",
        ///                         sourceDetails = new {
        ///                             key = new {},
        ///                         },
        ///                     },
        ///                     relationshipGuid = "<AtlasRelatedObjectIdRelationshipGuid>",
        ///                     relationshipStatus = "<ACTIVE>",
        ///                 }
        ///             },
        ///             categories = new[] {
        ///                 new {
        ///                     categoryGuid = "<AtlasTermCategorizationHeaderCategoryGuid>",
        ///                     description = "<AtlasTermCategorizationHeaderDescription>",
        ///                     displayText = "<AtlasTermCategorizationHeaderDisplayText>",
        ///                     relationGuid = "<AtlasTermCategorizationHeaderRelationGuid>",
        ///                     status = "<DRAFT>",
        ///                 }
        ///             },
        ///             classifies = new[] {
        ///                 new {
        ///                     description = "<AtlasRelatedTermHeaderDescription>",
        ///                     displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                     expression = "<AtlasRelatedTermHeaderExpression>",
        ///                     relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                     source = "<AtlasRelatedTermHeaderSource>",
        ///                     status = "<DRAFT>",
        ///                     steward = "<AtlasRelatedTermHeaderSteward>",
        ///                     termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///                 }
        ///             },
        ///             examples = new[] {
        ///                 "<AtlasGlossaryTermExamplesItem>"
        ///             },
        ///             isA = new[] {
        ///                 new {
        ///                     description = "<AtlasRelatedTermHeaderDescription>",
        ///                     displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                     expression = "<AtlasRelatedTermHeaderExpression>",
        ///                     relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                     source = "<AtlasRelatedTermHeaderSource>",
        ///                     status = "<DRAFT>",
        ///                     steward = "<AtlasRelatedTermHeaderSteward>",
        ///                     termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///                 }
        ///             },
        ///             preferredTerms = new[] {
        ///                 new {
        ///                     description = "<AtlasRelatedTermHeaderDescription>",
        ///                     displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                     expression = "<AtlasRelatedTermHeaderExpression>",
        ///                     relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                     source = "<AtlasRelatedTermHeaderSource>",
        ///                     status = "<DRAFT>",
        ///                     steward = "<AtlasRelatedTermHeaderSteward>",
        ///                     termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///                 }
        ///             },
        ///             preferredToTerms = new[] {
        ///                 new {
        ///                     description = "<AtlasRelatedTermHeaderDescription>",
        ///                     displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                     expression = "<AtlasRelatedTermHeaderExpression>",
        ///                     relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                     source = "<AtlasRelatedTermHeaderSource>",
        ///                     status = "<DRAFT>",
        ///                     steward = "<AtlasRelatedTermHeaderSteward>",
        ///                     termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///                 }
        ///             },
        ///             replacedBy = new[] {
        ///                 new {
        ///                     description = "<AtlasRelatedTermHeaderDescription>",
        ///                     displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                     expression = "<AtlasRelatedTermHeaderExpression>",
        ///                     relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                     source = "<AtlasRelatedTermHeaderSource>",
        ///                     status = "<DRAFT>",
        ///                     steward = "<AtlasRelatedTermHeaderSteward>",
        ///                     termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///                 }
        ///             },
        ///             replacementTerms = new[] {
        ///                 new {
        ///                     description = "<AtlasRelatedTermHeaderDescription>",
        ///                     displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                     expression = "<AtlasRelatedTermHeaderExpression>",
        ///                     relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                     source = "<AtlasRelatedTermHeaderSource>",
        ///                     status = "<DRAFT>",
        ///                     steward = "<AtlasRelatedTermHeaderSteward>",
        ///                     termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///                 }
        ///             },
        ///             seeAlso = new[] {
        ///                 new {
        ///                     description = "<AtlasRelatedTermHeaderDescription>",
        ///                     displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                     expression = "<AtlasRelatedTermHeaderExpression>",
        ///                     relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                     source = "<AtlasRelatedTermHeaderSource>",
        ///                     status = "<DRAFT>",
        ///                     steward = "<AtlasRelatedTermHeaderSteward>",
        ///                     termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///                 }
        ///             },
        ///             synonyms = new[] {
        ///                 new {
        ///                     description = "<AtlasRelatedTermHeaderDescription>",
        ///                     displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                     expression = "<AtlasRelatedTermHeaderExpression>",
        ///                     relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                     source = "<AtlasRelatedTermHeaderSource>",
        ///                     status = "<DRAFT>",
        ///                     steward = "<AtlasRelatedTermHeaderSteward>",
        ///                     termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///                 }
        ///             },
        ///             translatedTerms = new[] {
        ///                 new {
        ///                     description = "<AtlasRelatedTermHeaderDescription>",
        ///                     displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                     expression = "<AtlasRelatedTermHeaderExpression>",
        ///                     relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                     source = "<AtlasRelatedTermHeaderSource>",
        ///                     status = "<DRAFT>",
        ///                     steward = "<AtlasRelatedTermHeaderSteward>",
        ///                     termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///                 }
        ///             },
        ///             translationTerms = new[] {
        ///                 new {
        ///                     description = "<AtlasRelatedTermHeaderDescription>",
        ///                     displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                     expression = "<AtlasRelatedTermHeaderExpression>",
        ///                     relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                     source = "<AtlasRelatedTermHeaderSource>",
        ///                     status = "<DRAFT>",
        ///                     steward = "<AtlasRelatedTermHeaderSteward>",
        ///                     termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///                 }
        ///             },
        ///             usage = "<AtlasGlossaryTermUsage>",
        ///             validValues = new[] {
        ///                 new {
        ///                     description = "<AtlasRelatedTermHeaderDescription>",
        ///                     displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                     expression = "<AtlasRelatedTermHeaderExpression>",
        ///                     relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                     source = "<AtlasRelatedTermHeaderSource>",
        ///                     status = "<DRAFT>",
        ///                     steward = "<AtlasRelatedTermHeaderSteward>",
        ///                     termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///                 }
        ///             },
        ///             validValuesFor = new[] {
        ///                 new {
        ///                     description = "<AtlasRelatedTermHeaderDescription>",
        ///                     displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                     expression = "<AtlasRelatedTermHeaderExpression>",
        ///                     relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                     source = "<AtlasRelatedTermHeaderSource>",
        ///                     status = "<DRAFT>",
        ///                     steward = "<AtlasRelatedTermHeaderSteward>",
        ///                     termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///                 }
        ///             },
        ///         },
        ///     },
        /// };
        /// 
        /// Response response = await client.UpdateGlossaryAsync("<glossaryGuid>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("longDescription").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("qualifiedName").ToString());
        /// Console.WriteLine(result.GetProperty("shortDescription").ToString());
        /// Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("language").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("usage").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// <details><summary>AtlasGlossaryExtInfo</summary>Schema for <c>AtlasGlossaryExtInfo</c>:
        /// <code>{
        ///   categories: [
        ///     {
        ///       categoryGuid: string, # Optional. The GUID of the category.
        ///       description: string, # Optional. The description of the category header.
        ///       displayText: string, # Optional. The display text.
        ///       parentCategoryGuid: string, # Optional. The GUID of the parent category.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///     }
        ///   ], # Optional. An array of categories.
        ///   language: string, # Optional. The language of the glossary.
        ///   terms: [
        ///     {
        ///       description: string, # Optional. The description of the related term.
        ///       displayText: string, # Optional. The display text.
        ///       expression: string, # Optional. The expression of the term.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       source: string, # Optional. The source of the term.
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///       steward: string, # Optional. The steward of the term.
        ///       termGuid: string, # Optional. The GUID of the term.
        ///     }
        ///   ], # Optional. An array of related term headers.
        ///   usage: string, # Optional. The usage of the glossary.
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       entityGuid: string, # Optional. The GUID of the entity.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. The end of the time boundary.
        ///           startTime: string, # Optional. The start of the time boundary.
        ///           timeZone: string, # Optional. The timezone of the time boundary.
        ///         }
        ///       ], # Optional. An array of time boundaries indicating validity periods.
        ///       source: string, # Optional. indicate the source who create the classification detail
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///     }
        ///   ], # Optional. An array of classifications.
        ///   longDescription: string, # Optional. The long version description.
        ///   name: string, # Optional. The name of the glossary object.
        ///   qualifiedName: string, # Optional. The qualified name of the glossary object.
        ///   shortDescription: string, # Optional. The short version of description.
        ///   lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///   guid: string, # Optional. The GUID of the object.
        ///   categoryInfo: Dictionary&lt;string, AtlasGlossaryCategory&gt;, # Optional. The glossary category information.
        ///   termInfo: Dictionary&lt;string, AtlasGlossaryTerm&gt;, # Optional. The glossary term information.
        /// }
        /// </code>
        /// </details>
        /// 
        /// Response Body:
        /// 
        /// <details><summary>AtlasGlossaryExtInfo</summary>Schema for <c>AtlasGlossaryExtInfo</c>:
        /// <code>{
        ///   categories: [
        ///     {
        ///       categoryGuid: string, # Optional. The GUID of the category.
        ///       description: string, # Optional. The description of the category header.
        ///       displayText: string, # Optional. The display text.
        ///       parentCategoryGuid: string, # Optional. The GUID of the parent category.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///     }
        ///   ], # Optional. An array of categories.
        ///   language: string, # Optional. The language of the glossary.
        ///   terms: [
        ///     {
        ///       description: string, # Optional. The description of the related term.
        ///       displayText: string, # Optional. The display text.
        ///       expression: string, # Optional. The expression of the term.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       source: string, # Optional. The source of the term.
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///       steward: string, # Optional. The steward of the term.
        ///       termGuid: string, # Optional. The GUID of the term.
        ///     }
        ///   ], # Optional. An array of related term headers.
        ///   usage: string, # Optional. The usage of the glossary.
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       entityGuid: string, # Optional. The GUID of the entity.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. The end of the time boundary.
        ///           startTime: string, # Optional. The start of the time boundary.
        ///           timeZone: string, # Optional. The timezone of the time boundary.
        ///         }
        ///       ], # Optional. An array of time boundaries indicating validity periods.
        ///       source: string, # Optional. indicate the source who create the classification detail
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///     }
        ///   ], # Optional. An array of classifications.
        ///   longDescription: string, # Optional. The long version description.
        ///   name: string, # Optional. The name of the glossary object.
        ///   qualifiedName: string, # Optional. The qualified name of the glossary object.
        ///   shortDescription: string, # Optional. The short version of description.
        ///   lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///   guid: string, # Optional. The GUID of the object.
        ///   categoryInfo: Dictionary&lt;string, AtlasGlossaryCategory&gt;, # Optional. The glossary category information.
        ///   termInfo: Dictionary&lt;string, AtlasGlossaryTerm&gt;, # Optional. The glossary term information.
        /// }
        /// </code>
        /// </details>
        /// 
        /// </remarks>
        public virtual async Task<Response> UpdateGlossaryAsync(string glossaryGuid, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(glossaryGuid, nameof(glossaryGuid));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.UpdateGlossary");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateGlossaryRequest(glossaryGuid, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update the given glossary. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryGuid"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="glossaryGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call UpdateGlossary with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.UpdateGlossary("<glossaryGuid>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call UpdateGlossary with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// var data = new {
        ///     categories = new[] {
        ///         new {
        ///             categoryGuid = "<AtlasRelatedCategoryHeaderCategoryGuid>",
        ///             description = "<AtlasRelatedCategoryHeaderDescription>",
        ///             displayText = "<AtlasRelatedCategoryHeaderDisplayText>",
        ///             parentCategoryGuid = "<AtlasRelatedCategoryHeaderParentCategoryGuid>",
        ///             relationGuid = "<AtlasRelatedCategoryHeaderRelationGuid>",
        ///         }
        ///     },
        ///     language = "<AtlasGlossaryLanguage>",
        ///     terms = new[] {
        ///         new {
        ///             description = "<AtlasRelatedTermHeaderDescription>",
        ///             displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///             expression = "<AtlasRelatedTermHeaderExpression>",
        ///             relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///             source = "<AtlasRelatedTermHeaderSource>",
        ///             status = "<DRAFT>",
        ///             steward = "<AtlasRelatedTermHeaderSteward>",
        ///             termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///         }
        ///     },
        ///     usage = "<AtlasGlossaryUsage>",
        ///     classifications = new[] {
        ///         new {
        ///             attributes = new {
        ///                 key = new {},
        ///             },
        ///             typeName = "<AtlasStructTypeName>",
        ///             lastModifiedTS = "<LastModifiedTS>",
        ///             entityGuid = "<AtlasClassificationEntityGuid>",
        ///             entityStatus = "<ACTIVE>",
        ///             removePropagationsOnEntityDelete = true,
        ///             validityPeriods = new[] {
        ///                 new {
        ///                     endTime = "<TimeBoundaryEndTime>",
        ///                     startTime = "<TimeBoundaryStartTime>",
        ///                     timeZone = "<TimeBoundaryTimeZone>",
        ///                 }
        ///             },
        ///             source = "<AtlasClassificationSource>",
        ///             sourceDetails = new {
        ///                 key = new {},
        ///             },
        ///         }
        ///     },
        ///     longDescription = "<AtlasGlossaryBaseObjectLongDescription>",
        ///     name = "<AtlasGlossaryBaseObjectName>",
        ///     qualifiedName = "<AtlasGlossaryBaseObjectQualifiedName>",
        ///     shortDescription = "<AtlasGlossaryBaseObjectShortDescription>",
        ///     lastModifiedTS = "<LastModifiedTS>",
        ///     guid = "<AtlasBaseModelObjectGuid>",
        ///     categoryInfo = new {
        ///         key = new {
        ///             classifications = new[] {
        ///                 new {
        ///                     attributes = new {
        ///                         key = new {},
        ///                     },
        ///                     typeName = "<AtlasStructTypeName>",
        ///                     lastModifiedTS = "<LastModifiedTS>",
        ///                     entityGuid = "<AtlasClassificationEntityGuid>",
        ///                     entityStatus = "<ACTIVE>",
        ///                     removePropagationsOnEntityDelete = true,
        ///                     validityPeriods = new[] {
        ///                         new {
        ///                             endTime = "<TimeBoundaryEndTime>",
        ///                             startTime = "<TimeBoundaryStartTime>",
        ///                             timeZone = "<TimeBoundaryTimeZone>",
        ///                         }
        ///                     },
        ///                     source = "<AtlasClassificationSource>",
        ///                     sourceDetails = new {
        ///                         key = new {},
        ///                     },
        ///                 }
        ///             },
        ///             longDescription = "<AtlasGlossaryBaseObjectLongDescription>",
        ///             name = "<AtlasGlossaryBaseObjectName>",
        ///             qualifiedName = "<AtlasGlossaryBaseObjectQualifiedName>",
        ///             shortDescription = "<AtlasGlossaryBaseObjectShortDescription>",
        ///             lastModifiedTS = "<LastModifiedTS>",
        ///             guid = "<AtlasBaseModelObjectGuid>",
        ///             anchor = new {
        ///                 displayText = "<AtlasGlossaryHeaderDisplayText>",
        ///                 glossaryGuid = "<AtlasGlossaryHeaderGlossaryGuid>",
        ///                 relationGuid = "<AtlasGlossaryHeaderRelationGuid>",
        ///             },
        ///             childrenCategories = new[] {
        ///                 new {
        ///                     categoryGuid = "<AtlasRelatedCategoryHeaderCategoryGuid>",
        ///                     description = "<AtlasRelatedCategoryHeaderDescription>",
        ///                     displayText = "<AtlasRelatedCategoryHeaderDisplayText>",
        ///                     parentCategoryGuid = "<AtlasRelatedCategoryHeaderParentCategoryGuid>",
        ///                     relationGuid = "<AtlasRelatedCategoryHeaderRelationGuid>",
        ///                 }
        ///             },
        ///             parentCategory = new {
        ///                 categoryGuid = "<AtlasRelatedCategoryHeaderCategoryGuid>",
        ///                 description = "<AtlasRelatedCategoryHeaderDescription>",
        ///                 displayText = "<AtlasRelatedCategoryHeaderDisplayText>",
        ///                 parentCategoryGuid = "<AtlasRelatedCategoryHeaderParentCategoryGuid>",
        ///                 relationGuid = "<AtlasRelatedCategoryHeaderRelationGuid>",
        ///             },
        ///             terms = new[] {
        ///                 new {
        ///                     description = "<AtlasRelatedTermHeaderDescription>",
        ///                     displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                     expression = "<AtlasRelatedTermHeaderExpression>",
        ///                     relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                     source = "<AtlasRelatedTermHeaderSource>",
        ///                     status = "<DRAFT>",
        ///                     steward = "<AtlasRelatedTermHeaderSteward>",
        ///                     termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///                 }
        ///             },
        ///         },
        ///     },
        ///     termInfo = new {
        ///         key = new {
        ///             classifications = new[] {
        ///                 new {
        ///                     attributes = new {
        ///                         key = new {},
        ///                     },
        ///                     typeName = "<AtlasStructTypeName>",
        ///                     lastModifiedTS = "<LastModifiedTS>",
        ///                     entityGuid = "<AtlasClassificationEntityGuid>",
        ///                     entityStatus = "<ACTIVE>",
        ///                     removePropagationsOnEntityDelete = true,
        ///                     validityPeriods = new[] {
        ///                         new {
        ///                             endTime = "<TimeBoundaryEndTime>",
        ///                             startTime = "<TimeBoundaryStartTime>",
        ///                             timeZone = "<TimeBoundaryTimeZone>",
        ///                         }
        ///                     },
        ///                     source = "<AtlasClassificationSource>",
        ///                     sourceDetails = new {
        ///                         key = new {},
        ///                     },
        ///                 }
        ///             },
        ///             longDescription = "<AtlasGlossaryBaseObjectLongDescription>",
        ///             name = "<AtlasGlossaryBaseObjectName>",
        ///             qualifiedName = "<AtlasGlossaryBaseObjectQualifiedName>",
        ///             shortDescription = "<AtlasGlossaryBaseObjectShortDescription>",
        ///             lastModifiedTS = "<LastModifiedTS>",
        ///             guid = "<AtlasBaseModelObjectGuid>",
        ///             abbreviation = "<AtlasGlossaryTermAbbreviation>",
        ///             templateName = new[] {
        ///                 new {}
        ///             },
        ///             anchor = new {
        ///                 displayText = "<AtlasGlossaryHeaderDisplayText>",
        ///                 glossaryGuid = "<AtlasGlossaryHeaderGlossaryGuid>",
        ///                 relationGuid = "<AtlasGlossaryHeaderRelationGuid>",
        ///             },
        ///             antonyms = new[] {
        ///                 new {
        ///                     description = "<AtlasRelatedTermHeaderDescription>",
        ///                     displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                     expression = "<AtlasRelatedTermHeaderExpression>",
        ///                     relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                     source = "<AtlasRelatedTermHeaderSource>",
        ///                     status = "<DRAFT>",
        ///                     steward = "<AtlasRelatedTermHeaderSteward>",
        ///                     termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///                 }
        ///             },
        ///             createTime = 1234,
        ///             createdBy = "<AtlasGlossaryTermCreatedBy>",
        ///             updateTime = 1234,
        ///             updatedBy = "<AtlasGlossaryTermUpdatedBy>",
        ///             status = "<Draft>",
        ///             resources = new[] {
        ///                 new {
        ///                     displayName = "<ResourceLinkDisplayName>",
        ///                     url = "<ResourceLinkUrl>",
        ///                 }
        ///             },
        ///             contacts = new {
        ///                 key = new[] {
        ///                     new {
        ///                         id = "<ContactBasicId>",
        ///                         info = "<ContactBasicInfo>",
        ///                     }
        ///                 },
        ///             },
        ///             attributes = new {
        ///                 key = new {
        ///                     key = new {},
        ///                 },
        ///             },
        ///             assignedEntities = new[] {
        ///                 new {
        ///                     guid = "<AtlasObjectIdGuid>",
        ///                     typeName = "<AtlasObjectIdTypeName>",
        ///                     uniqueAttributes = new {
        ///                         key = new {},
        ///                     },
        ///                     displayText = "<AtlasRelatedObjectIdDisplayText>",
        ///                     entityStatus = "<ACTIVE>",
        ///                     relationshipType = "<AtlasRelatedObjectIdRelationshipType>",
        ///                     relationshipAttributes = new {
        ///                         attributes = new {
        ///                             key = new {},
        ///                         },
        ///                         typeName = "<AtlasStructTypeName>",
        ///                         lastModifiedTS = "<LastModifiedTS>",
        ///                         entityGuid = "<AtlasClassificationEntityGuid>",
        ///                         entityStatus = "<ACTIVE>",
        ///                         removePropagationsOnEntityDelete = true,
        ///                         validityPeriods = new[] {
        ///                             new {
        ///                                 endTime = "<TimeBoundaryEndTime>",
        ///                                 startTime = "<TimeBoundaryStartTime>",
        ///                                 timeZone = "<TimeBoundaryTimeZone>",
        ///                             }
        ///                         },
        ///                         source = "<AtlasClassificationSource>",
        ///                         sourceDetails = new {
        ///                             key = new {},
        ///                         },
        ///                     },
        ///                     relationshipGuid = "<AtlasRelatedObjectIdRelationshipGuid>",
        ///                     relationshipStatus = "<ACTIVE>",
        ///                 }
        ///             },
        ///             categories = new[] {
        ///                 new {
        ///                     categoryGuid = "<AtlasTermCategorizationHeaderCategoryGuid>",
        ///                     description = "<AtlasTermCategorizationHeaderDescription>",
        ///                     displayText = "<AtlasTermCategorizationHeaderDisplayText>",
        ///                     relationGuid = "<AtlasTermCategorizationHeaderRelationGuid>",
        ///                     status = "<DRAFT>",
        ///                 }
        ///             },
        ///             classifies = new[] {
        ///                 new {
        ///                     description = "<AtlasRelatedTermHeaderDescription>",
        ///                     displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                     expression = "<AtlasRelatedTermHeaderExpression>",
        ///                     relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                     source = "<AtlasRelatedTermHeaderSource>",
        ///                     status = "<DRAFT>",
        ///                     steward = "<AtlasRelatedTermHeaderSteward>",
        ///                     termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///                 }
        ///             },
        ///             examples = new[] {
        ///                 "<AtlasGlossaryTermExamplesItem>"
        ///             },
        ///             isA = new[] {
        ///                 new {
        ///                     description = "<AtlasRelatedTermHeaderDescription>",
        ///                     displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                     expression = "<AtlasRelatedTermHeaderExpression>",
        ///                     relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                     source = "<AtlasRelatedTermHeaderSource>",
        ///                     status = "<DRAFT>",
        ///                     steward = "<AtlasRelatedTermHeaderSteward>",
        ///                     termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///                 }
        ///             },
        ///             preferredTerms = new[] {
        ///                 new {
        ///                     description = "<AtlasRelatedTermHeaderDescription>",
        ///                     displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                     expression = "<AtlasRelatedTermHeaderExpression>",
        ///                     relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                     source = "<AtlasRelatedTermHeaderSource>",
        ///                     status = "<DRAFT>",
        ///                     steward = "<AtlasRelatedTermHeaderSteward>",
        ///                     termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///                 }
        ///             },
        ///             preferredToTerms = new[] {
        ///                 new {
        ///                     description = "<AtlasRelatedTermHeaderDescription>",
        ///                     displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                     expression = "<AtlasRelatedTermHeaderExpression>",
        ///                     relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                     source = "<AtlasRelatedTermHeaderSource>",
        ///                     status = "<DRAFT>",
        ///                     steward = "<AtlasRelatedTermHeaderSteward>",
        ///                     termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///                 }
        ///             },
        ///             replacedBy = new[] {
        ///                 new {
        ///                     description = "<AtlasRelatedTermHeaderDescription>",
        ///                     displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                     expression = "<AtlasRelatedTermHeaderExpression>",
        ///                     relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                     source = "<AtlasRelatedTermHeaderSource>",
        ///                     status = "<DRAFT>",
        ///                     steward = "<AtlasRelatedTermHeaderSteward>",
        ///                     termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///                 }
        ///             },
        ///             replacementTerms = new[] {
        ///                 new {
        ///                     description = "<AtlasRelatedTermHeaderDescription>",
        ///                     displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                     expression = "<AtlasRelatedTermHeaderExpression>",
        ///                     relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                     source = "<AtlasRelatedTermHeaderSource>",
        ///                     status = "<DRAFT>",
        ///                     steward = "<AtlasRelatedTermHeaderSteward>",
        ///                     termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///                 }
        ///             },
        ///             seeAlso = new[] {
        ///                 new {
        ///                     description = "<AtlasRelatedTermHeaderDescription>",
        ///                     displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                     expression = "<AtlasRelatedTermHeaderExpression>",
        ///                     relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                     source = "<AtlasRelatedTermHeaderSource>",
        ///                     status = "<DRAFT>",
        ///                     steward = "<AtlasRelatedTermHeaderSteward>",
        ///                     termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///                 }
        ///             },
        ///             synonyms = new[] {
        ///                 new {
        ///                     description = "<AtlasRelatedTermHeaderDescription>",
        ///                     displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                     expression = "<AtlasRelatedTermHeaderExpression>",
        ///                     relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                     source = "<AtlasRelatedTermHeaderSource>",
        ///                     status = "<DRAFT>",
        ///                     steward = "<AtlasRelatedTermHeaderSteward>",
        ///                     termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///                 }
        ///             },
        ///             translatedTerms = new[] {
        ///                 new {
        ///                     description = "<AtlasRelatedTermHeaderDescription>",
        ///                     displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                     expression = "<AtlasRelatedTermHeaderExpression>",
        ///                     relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                     source = "<AtlasRelatedTermHeaderSource>",
        ///                     status = "<DRAFT>",
        ///                     steward = "<AtlasRelatedTermHeaderSteward>",
        ///                     termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///                 }
        ///             },
        ///             translationTerms = new[] {
        ///                 new {
        ///                     description = "<AtlasRelatedTermHeaderDescription>",
        ///                     displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                     expression = "<AtlasRelatedTermHeaderExpression>",
        ///                     relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                     source = "<AtlasRelatedTermHeaderSource>",
        ///                     status = "<DRAFT>",
        ///                     steward = "<AtlasRelatedTermHeaderSteward>",
        ///                     termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///                 }
        ///             },
        ///             usage = "<AtlasGlossaryTermUsage>",
        ///             validValues = new[] {
        ///                 new {
        ///                     description = "<AtlasRelatedTermHeaderDescription>",
        ///                     displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                     expression = "<AtlasRelatedTermHeaderExpression>",
        ///                     relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                     source = "<AtlasRelatedTermHeaderSource>",
        ///                     status = "<DRAFT>",
        ///                     steward = "<AtlasRelatedTermHeaderSteward>",
        ///                     termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///                 }
        ///             },
        ///             validValuesFor = new[] {
        ///                 new {
        ///                     description = "<AtlasRelatedTermHeaderDescription>",
        ///                     displayText = "<AtlasRelatedTermHeaderDisplayText>",
        ///                     expression = "<AtlasRelatedTermHeaderExpression>",
        ///                     relationGuid = "<AtlasRelatedTermHeaderRelationGuid>",
        ///                     source = "<AtlasRelatedTermHeaderSource>",
        ///                     status = "<DRAFT>",
        ///                     steward = "<AtlasRelatedTermHeaderSteward>",
        ///                     termGuid = "<AtlasRelatedTermHeaderTermGuid>",
        ///                 }
        ///             },
        ///         },
        ///     },
        /// };
        /// 
        /// Response response = client.UpdateGlossary("<glossaryGuid>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("longDescription").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("qualifiedName").ToString());
        /// Console.WriteLine(result.GetProperty("shortDescription").ToString());
        /// Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("language").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("usage").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// <details><summary>AtlasGlossaryExtInfo</summary>Schema for <c>AtlasGlossaryExtInfo</c>:
        /// <code>{
        ///   categories: [
        ///     {
        ///       categoryGuid: string, # Optional. The GUID of the category.
        ///       description: string, # Optional. The description of the category header.
        ///       displayText: string, # Optional. The display text.
        ///       parentCategoryGuid: string, # Optional. The GUID of the parent category.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///     }
        ///   ], # Optional. An array of categories.
        ///   language: string, # Optional. The language of the glossary.
        ///   terms: [
        ///     {
        ///       description: string, # Optional. The description of the related term.
        ///       displayText: string, # Optional. The display text.
        ///       expression: string, # Optional. The expression of the term.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       source: string, # Optional. The source of the term.
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///       steward: string, # Optional. The steward of the term.
        ///       termGuid: string, # Optional. The GUID of the term.
        ///     }
        ///   ], # Optional. An array of related term headers.
        ///   usage: string, # Optional. The usage of the glossary.
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       entityGuid: string, # Optional. The GUID of the entity.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. The end of the time boundary.
        ///           startTime: string, # Optional. The start of the time boundary.
        ///           timeZone: string, # Optional. The timezone of the time boundary.
        ///         }
        ///       ], # Optional. An array of time boundaries indicating validity periods.
        ///       source: string, # Optional. indicate the source who create the classification detail
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///     }
        ///   ], # Optional. An array of classifications.
        ///   longDescription: string, # Optional. The long version description.
        ///   name: string, # Optional. The name of the glossary object.
        ///   qualifiedName: string, # Optional. The qualified name of the glossary object.
        ///   shortDescription: string, # Optional. The short version of description.
        ///   lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///   guid: string, # Optional. The GUID of the object.
        ///   categoryInfo: Dictionary&lt;string, AtlasGlossaryCategory&gt;, # Optional. The glossary category information.
        ///   termInfo: Dictionary&lt;string, AtlasGlossaryTerm&gt;, # Optional. The glossary term information.
        /// }
        /// </code>
        /// </details>
        /// 
        /// Response Body:
        /// 
        /// <details><summary>AtlasGlossaryExtInfo</summary>Schema for <c>AtlasGlossaryExtInfo</c>:
        /// <code>{
        ///   categories: [
        ///     {
        ///       categoryGuid: string, # Optional. The GUID of the category.
        ///       description: string, # Optional. The description of the category header.
        ///       displayText: string, # Optional. The display text.
        ///       parentCategoryGuid: string, # Optional. The GUID of the parent category.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///     }
        ///   ], # Optional. An array of categories.
        ///   language: string, # Optional. The language of the glossary.
        ///   terms: [
        ///     {
        ///       description: string, # Optional. The description of the related term.
        ///       displayText: string, # Optional. The display text.
        ///       expression: string, # Optional. The expression of the term.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       source: string, # Optional. The source of the term.
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///       steward: string, # Optional. The steward of the term.
        ///       termGuid: string, # Optional. The GUID of the term.
        ///     }
        ///   ], # Optional. An array of related term headers.
        ///   usage: string, # Optional. The usage of the glossary.
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       entityGuid: string, # Optional. The GUID of the entity.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. The end of the time boundary.
        ///           startTime: string, # Optional. The start of the time boundary.
        ///           timeZone: string, # Optional. The timezone of the time boundary.
        ///         }
        ///       ], # Optional. An array of time boundaries indicating validity periods.
        ///       source: string, # Optional. indicate the source who create the classification detail
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///     }
        ///   ], # Optional. An array of classifications.
        ///   longDescription: string, # Optional. The long version description.
        ///   name: string, # Optional. The name of the glossary object.
        ///   qualifiedName: string, # Optional. The qualified name of the glossary object.
        ///   shortDescription: string, # Optional. The short version of description.
        ///   lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///   guid: string, # Optional. The GUID of the object.
        ///   categoryInfo: Dictionary&lt;string, AtlasGlossaryCategory&gt;, # Optional. The glossary category information.
        ///   termInfo: Dictionary&lt;string, AtlasGlossaryTerm&gt;, # Optional. The glossary term information.
        /// }
        /// </code>
        /// </details>
        /// 
        /// </remarks>
        public virtual Response UpdateGlossary(string glossaryGuid, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(glossaryGuid, nameof(glossaryGuid));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.UpdateGlossary");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateGlossaryRequest(glossaryGuid, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a glossary. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryGuid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="glossaryGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteGlossaryAsync with required parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// Response response = await client.DeleteGlossaryAsync("<glossaryGuid>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> DeleteGlossaryAsync(string glossaryGuid, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(glossaryGuid, nameof(glossaryGuid));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.DeleteGlossary");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteGlossaryRequest(glossaryGuid, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a glossary. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryGuid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="glossaryGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteGlossary with required parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// Response response = client.DeleteGlossary("<glossaryGuid>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response DeleteGlossary(string glossaryGuid, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(glossaryGuid, nameof(glossaryGuid));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.DeleteGlossary");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteGlossaryRequest(glossaryGuid, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the categories belonging to a specific glossary. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryGuid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="glossaryGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetGlossaryCategoriesAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// Response response = await client.GetGlossaryCategoriesAsync("<glossaryGuid>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].ToString());
        /// ]]></code>
        /// This sample shows how to call GetGlossaryCategoriesAsync with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// Response response = await client.GetGlossaryCategoriesAsync("<glossaryGuid>", 1234, 1234, "<sort>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result[0].GetProperty("longDescription").ToString());
        /// Console.WriteLine(result[0].GetProperty("name").ToString());
        /// Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
        /// Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
        /// Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result[0].GetProperty("anchor").GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("anchor").GetProperty("glossaryGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("anchor").GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("termGuid").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ArrayOfAtlasGlossaryCategory</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       entityGuid: string, # Optional. The GUID of the entity.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. The end of the time boundary.
        ///           startTime: string, # Optional. The start of the time boundary.
        ///           timeZone: string, # Optional. The timezone of the time boundary.
        ///         }
        ///       ], # Optional. An array of time boundaries indicating validity periods.
        ///       source: string, # Optional. indicate the source who create the classification detail
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///     }
        ///   ], # Optional. An array of classifications.
        ///   longDescription: string, # Optional. The long version description.
        ///   name: string, # Optional. The name of the glossary object.
        ///   qualifiedName: string, # Optional. The qualified name of the glossary object.
        ///   shortDescription: string, # Optional. The short version of description.
        ///   lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///   guid: string, # Optional. The GUID of the object.
        ///   anchor: {
        ///     displayText: string, # Optional. The display text.
        ///     glossaryGuid: string, # Optional. The GUID of the glossary.
        ///     relationGuid: string, # Optional. The GUID of the relationship.
        ///   }, # Optional. The glossary header with basic information.
        ///   childrenCategories: [
        ///     {
        ///       categoryGuid: string, # Optional. The GUID of the category.
        ///       description: string, # Optional. The description of the category header.
        ///       displayText: string, # Optional. The display text.
        ///       parentCategoryGuid: string, # Optional. The GUID of the parent category.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///     }
        ///   ], # Optional. An array of children categories.
        ///   parentCategory: AtlasRelatedCategoryHeader, # Optional. The header of the related category.
        ///   terms: [
        ///     {
        ///       description: string, # Optional. The description of the related term.
        ///       displayText: string, # Optional. The display text.
        ///       expression: string, # Optional. The expression of the term.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       source: string, # Optional. The source of the term.
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///       steward: string, # Optional. The steward of the term.
        ///       termGuid: string, # Optional. The GUID of the term.
        ///     }
        ///   ], # Optional. An array of related term headers.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetGlossaryCategoriesAsync(string glossaryGuid, int? limit = null, int? offset = null, string sort = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(glossaryGuid, nameof(glossaryGuid));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.GetGlossaryCategories");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetGlossaryCategoriesRequest(glossaryGuid, limit, offset, sort, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the categories belonging to a specific glossary. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryGuid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="glossaryGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetGlossaryCategories with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// Response response = client.GetGlossaryCategories("<glossaryGuid>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].ToString());
        /// ]]></code>
        /// This sample shows how to call GetGlossaryCategories with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// Response response = client.GetGlossaryCategories("<glossaryGuid>", 1234, 1234, "<sort>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result[0].GetProperty("longDescription").ToString());
        /// Console.WriteLine(result[0].GetProperty("name").ToString());
        /// Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
        /// Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
        /// Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result[0].GetProperty("anchor").GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("anchor").GetProperty("glossaryGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("anchor").GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("termGuid").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ArrayOfAtlasGlossaryCategory</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       entityGuid: string, # Optional. The GUID of the entity.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. The end of the time boundary.
        ///           startTime: string, # Optional. The start of the time boundary.
        ///           timeZone: string, # Optional. The timezone of the time boundary.
        ///         }
        ///       ], # Optional. An array of time boundaries indicating validity periods.
        ///       source: string, # Optional. indicate the source who create the classification detail
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///     }
        ///   ], # Optional. An array of classifications.
        ///   longDescription: string, # Optional. The long version description.
        ///   name: string, # Optional. The name of the glossary object.
        ///   qualifiedName: string, # Optional. The qualified name of the glossary object.
        ///   shortDescription: string, # Optional. The short version of description.
        ///   lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///   guid: string, # Optional. The GUID of the object.
        ///   anchor: {
        ///     displayText: string, # Optional. The display text.
        ///     glossaryGuid: string, # Optional. The GUID of the glossary.
        ///     relationGuid: string, # Optional. The GUID of the relationship.
        ///   }, # Optional. The glossary header with basic information.
        ///   childrenCategories: [
        ///     {
        ///       categoryGuid: string, # Optional. The GUID of the category.
        ///       description: string, # Optional. The description of the category header.
        ///       displayText: string, # Optional. The display text.
        ///       parentCategoryGuid: string, # Optional. The GUID of the parent category.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///     }
        ///   ], # Optional. An array of children categories.
        ///   parentCategory: AtlasRelatedCategoryHeader, # Optional. The header of the related category.
        ///   terms: [
        ///     {
        ///       description: string, # Optional. The description of the related term.
        ///       displayText: string, # Optional. The display text.
        ///       expression: string, # Optional. The expression of the term.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       source: string, # Optional. The source of the term.
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///       steward: string, # Optional. The steward of the term.
        ///       termGuid: string, # Optional. The GUID of the term.
        ///     }
        ///   ], # Optional. An array of related term headers.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetGlossaryCategories(string glossaryGuid, int? limit = null, int? offset = null, string sort = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(glossaryGuid, nameof(glossaryGuid));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.GetGlossaryCategories");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetGlossaryCategoriesRequest(glossaryGuid, limit, offset, sort, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the category headers belonging to a specific glossary. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryGuid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="glossaryGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetGlossaryCategoriesHeadersAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// Response response = await client.GetGlossaryCategoriesHeadersAsync("<glossaryGuid>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].ToString());
        /// ]]></code>
        /// This sample shows how to call GetGlossaryCategoriesHeadersAsync with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// Response response = await client.GetGlossaryCategoriesHeadersAsync("<glossaryGuid>", 1234, 1234, "<sort>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].GetProperty("categoryGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("parentCategoryGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("relationGuid").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ArrayOfAtlasRelatedCategoryHeader</c>:
        /// <code>{
        ///   categoryGuid: string, # Optional. The GUID of the category.
        ///   description: string, # Optional. The description of the category header.
        ///   displayText: string, # Optional. The display text.
        ///   parentCategoryGuid: string, # Optional. The GUID of the parent category.
        ///   relationGuid: string, # Optional. The GUID of the relationship.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetGlossaryCategoriesHeadersAsync(string glossaryGuid, int? limit = null, int? offset = null, string sort = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(glossaryGuid, nameof(glossaryGuid));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.GetGlossaryCategoriesHeaders");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetGlossaryCategoriesHeadersRequest(glossaryGuid, limit, offset, sort, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the category headers belonging to a specific glossary. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryGuid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="glossaryGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetGlossaryCategoriesHeaders with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// Response response = client.GetGlossaryCategoriesHeaders("<glossaryGuid>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].ToString());
        /// ]]></code>
        /// This sample shows how to call GetGlossaryCategoriesHeaders with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// Response response = client.GetGlossaryCategoriesHeaders("<glossaryGuid>", 1234, 1234, "<sort>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].GetProperty("categoryGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("parentCategoryGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("relationGuid").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ArrayOfAtlasRelatedCategoryHeader</c>:
        /// <code>{
        ///   categoryGuid: string, # Optional. The GUID of the category.
        ///   description: string, # Optional. The description of the category header.
        ///   displayText: string, # Optional. The display text.
        ///   parentCategoryGuid: string, # Optional. The GUID of the parent category.
        ///   relationGuid: string, # Optional. The GUID of the relationship.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetGlossaryCategoriesHeaders(string glossaryGuid, int? limit = null, int? offset = null, string sort = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(glossaryGuid, nameof(glossaryGuid));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.GetGlossaryCategoriesHeaders");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetGlossaryCategoriesHeadersRequest(glossaryGuid, limit, offset, sort, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a specific glossary with detailed information. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryGuid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="glossaryGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetDetailedGlossaryAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// Response response = await client.GetDetailedGlossaryAsync("<glossaryGuid>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call GetDetailedGlossaryAsync with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// Response response = await client.GetDetailedGlossaryAsync("<glossaryGuid>", true);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("language").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("usage").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("longDescription").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("qualifiedName").ToString());
        /// Console.WriteLine(result.GetProperty("shortDescription").ToString());
        /// Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("longDescription").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("qualifiedName").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("shortDescription").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("anchor").GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("anchor").GetProperty("glossaryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("anchor").GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("childrenCategories")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("parentCategory").GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("parentCategory").GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("parentCategory").GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("terms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("terms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("terms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("terms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("terms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("terms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("terms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("terms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("longDescription").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("qualifiedName").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("shortDescription").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("abbreviation").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("templateName")[0].ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("anchor").GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("anchor").GetProperty("glossaryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("anchor").GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("antonyms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("antonyms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("antonyms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("antonyms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("antonyms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("antonyms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("createTime").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("updateTime").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("updatedBy").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("resources")[0].GetProperty("displayName").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("resources")[0].GetProperty("url").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("attributes").GetProperty("<test>").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("categories")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("categories")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("categories")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("categories")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifies")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifies")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifies")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifies")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifies")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifies")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifies")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("examples")[0].ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("isA")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("isA")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("isA")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("isA")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("isA")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("isA")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("isA")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("isA")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacedBy")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacedBy")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacedBy")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacedBy")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacedBy")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacementTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacementTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacementTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("seeAlso")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("seeAlso")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("seeAlso")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("seeAlso")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("seeAlso")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("synonyms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("synonyms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("synonyms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("synonyms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("synonyms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("synonyms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translatedTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translatedTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translatedTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translationTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translationTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translationTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translationTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translationTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("usage").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValues")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValues")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValues")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValues")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValues")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValues")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValues")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValuesFor")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValuesFor")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValuesFor")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>AtlasGlossaryExtInfo</c>:
        /// <code>{
        ///   categories: [
        ///     {
        ///       categoryGuid: string, # Optional. The GUID of the category.
        ///       description: string, # Optional. The description of the category header.
        ///       displayText: string, # Optional. The display text.
        ///       parentCategoryGuid: string, # Optional. The GUID of the parent category.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///     }
        ///   ], # Optional. An array of categories.
        ///   language: string, # Optional. The language of the glossary.
        ///   terms: [
        ///     {
        ///       description: string, # Optional. The description of the related term.
        ///       displayText: string, # Optional. The display text.
        ///       expression: string, # Optional. The expression of the term.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       source: string, # Optional. The source of the term.
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///       steward: string, # Optional. The steward of the term.
        ///       termGuid: string, # Optional. The GUID of the term.
        ///     }
        ///   ], # Optional. An array of related term headers.
        ///   usage: string, # Optional. The usage of the glossary.
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       entityGuid: string, # Optional. The GUID of the entity.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. The end of the time boundary.
        ///           startTime: string, # Optional. The start of the time boundary.
        ///           timeZone: string, # Optional. The timezone of the time boundary.
        ///         }
        ///       ], # Optional. An array of time boundaries indicating validity periods.
        ///       source: string, # Optional. indicate the source who create the classification detail
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///     }
        ///   ], # Optional. An array of classifications.
        ///   longDescription: string, # Optional. The long version description.
        ///   name: string, # Optional. The name of the glossary object.
        ///   qualifiedName: string, # Optional. The qualified name of the glossary object.
        ///   shortDescription: string, # Optional. The short version of description.
        ///   lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///   guid: string, # Optional. The GUID of the object.
        ///   categoryInfo: Dictionary&lt;string, AtlasGlossaryCategory&gt;, # Optional. The glossary category information.
        ///   termInfo: Dictionary&lt;string, AtlasGlossaryTerm&gt;, # Optional. The glossary term information.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetDetailedGlossaryAsync(string glossaryGuid, bool? includeTermHierarchy = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(glossaryGuid, nameof(glossaryGuid));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.GetDetailedGlossary");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetDetailedGlossaryRequest(glossaryGuid, includeTermHierarchy, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a specific glossary with detailed information. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryGuid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="glossaryGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetDetailedGlossary with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// Response response = client.GetDetailedGlossary("<glossaryGuid>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call GetDetailedGlossary with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// Response response = client.GetDetailedGlossary("<glossaryGuid>", true);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("language").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("usage").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("longDescription").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("qualifiedName").ToString());
        /// Console.WriteLine(result.GetProperty("shortDescription").ToString());
        /// Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("longDescription").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("qualifiedName").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("shortDescription").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("anchor").GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("anchor").GetProperty("glossaryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("anchor").GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("childrenCategories")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("parentCategory").GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("parentCategory").GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("parentCategory").GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("terms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("terms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("terms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("terms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("terms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("terms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("terms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("terms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("longDescription").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("qualifiedName").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("shortDescription").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("abbreviation").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("templateName")[0].ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("anchor").GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("anchor").GetProperty("glossaryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("anchor").GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("antonyms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("antonyms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("antonyms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("antonyms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("antonyms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("antonyms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("createTime").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("updateTime").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("updatedBy").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("resources")[0].GetProperty("displayName").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("resources")[0].GetProperty("url").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("attributes").GetProperty("<test>").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("categories")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("categories")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("categories")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("categories")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifies")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifies")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifies")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifies")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifies")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifies")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifies")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("examples")[0].ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("isA")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("isA")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("isA")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("isA")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("isA")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("isA")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("isA")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("isA")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacedBy")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacedBy")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacedBy")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacedBy")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacedBy")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacementTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacementTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacementTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("seeAlso")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("seeAlso")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("seeAlso")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("seeAlso")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("seeAlso")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("synonyms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("synonyms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("synonyms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("synonyms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("synonyms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("synonyms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translatedTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translatedTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translatedTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translationTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translationTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translationTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translationTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translationTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("usage").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValues")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValues")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValues")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValues")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValues")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValues")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValues")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValuesFor")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValuesFor")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValuesFor")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>AtlasGlossaryExtInfo</c>:
        /// <code>{
        ///   categories: [
        ///     {
        ///       categoryGuid: string, # Optional. The GUID of the category.
        ///       description: string, # Optional. The description of the category header.
        ///       displayText: string, # Optional. The display text.
        ///       parentCategoryGuid: string, # Optional. The GUID of the parent category.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///     }
        ///   ], # Optional. An array of categories.
        ///   language: string, # Optional. The language of the glossary.
        ///   terms: [
        ///     {
        ///       description: string, # Optional. The description of the related term.
        ///       displayText: string, # Optional. The display text.
        ///       expression: string, # Optional. The expression of the term.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       source: string, # Optional. The source of the term.
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///       steward: string, # Optional. The steward of the term.
        ///       termGuid: string, # Optional. The GUID of the term.
        ///     }
        ///   ], # Optional. An array of related term headers.
        ///   usage: string, # Optional. The usage of the glossary.
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       entityGuid: string, # Optional. The GUID of the entity.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. The end of the time boundary.
        ///           startTime: string, # Optional. The start of the time boundary.
        ///           timeZone: string, # Optional. The timezone of the time boundary.
        ///         }
        ///       ], # Optional. An array of time boundaries indicating validity periods.
        ///       source: string, # Optional. indicate the source who create the classification detail
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///     }
        ///   ], # Optional. An array of classifications.
        ///   longDescription: string, # Optional. The long version description.
        ///   name: string, # Optional. The name of the glossary object.
        ///   qualifiedName: string, # Optional. The qualified name of the glossary object.
        ///   shortDescription: string, # Optional. The short version of description.
        ///   lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///   guid: string, # Optional. The GUID of the object.
        ///   categoryInfo: Dictionary&lt;string, AtlasGlossaryCategory&gt;, # Optional. The glossary category information.
        ///   termInfo: Dictionary&lt;string, AtlasGlossaryTerm&gt;, # Optional. The glossary term information.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetDetailedGlossary(string glossaryGuid, bool? includeTermHierarchy = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(glossaryGuid, nameof(glossaryGuid));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.GetDetailedGlossary");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetDetailedGlossaryRequest(glossaryGuid, includeTermHierarchy, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update the glossary partially. Some properties such as qualifiedName are not allowed to be updated. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryGuid"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="glossaryGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call PartialUpdateGlossaryAsync with required parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// var data = new {
        ///     key = "<String>",
        /// };
        /// 
        /// Response response = await client.PartialUpdateGlossaryAsync("<glossaryGuid>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call PartialUpdateGlossaryAsync with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// var data = new {
        ///     key = "<String>",
        /// };
        /// 
        /// Response response = await client.PartialUpdateGlossaryAsync("<glossaryGuid>", RequestContent.Create(data), true);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("longDescription").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("qualifiedName").ToString());
        /// Console.WriteLine(result.GetProperty("shortDescription").ToString());
        /// Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("language").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("usage").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// <details><summary>AtlasGlossaryExtInfo</summary>Schema for <c>AtlasGlossaryExtInfo</c>:
        /// <code>{
        ///   categories: [
        ///     {
        ///       categoryGuid: string, # Optional. The GUID of the category.
        ///       description: string, # Optional. The description of the category header.
        ///       displayText: string, # Optional. The display text.
        ///       parentCategoryGuid: string, # Optional. The GUID of the parent category.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///     }
        ///   ], # Optional. An array of categories.
        ///   language: string, # Optional. The language of the glossary.
        ///   terms: [
        ///     {
        ///       description: string, # Optional. The description of the related term.
        ///       displayText: string, # Optional. The display text.
        ///       expression: string, # Optional. The expression of the term.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       source: string, # Optional. The source of the term.
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///       steward: string, # Optional. The steward of the term.
        ///       termGuid: string, # Optional. The GUID of the term.
        ///     }
        ///   ], # Optional. An array of related term headers.
        ///   usage: string, # Optional. The usage of the glossary.
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       entityGuid: string, # Optional. The GUID of the entity.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. The end of the time boundary.
        ///           startTime: string, # Optional. The start of the time boundary.
        ///           timeZone: string, # Optional. The timezone of the time boundary.
        ///         }
        ///       ], # Optional. An array of time boundaries indicating validity periods.
        ///       source: string, # Optional. indicate the source who create the classification detail
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///     }
        ///   ], # Optional. An array of classifications.
        ///   longDescription: string, # Optional. The long version description.
        ///   name: string, # Optional. The name of the glossary object.
        ///   qualifiedName: string, # Optional. The qualified name of the glossary object.
        ///   shortDescription: string, # Optional. The short version of description.
        ///   lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///   guid: string, # Optional. The GUID of the object.
        ///   categoryInfo: Dictionary&lt;string, AtlasGlossaryCategory&gt;, # Optional. The glossary category information.
        ///   termInfo: Dictionary&lt;string, AtlasGlossaryTerm&gt;, # Optional. The glossary term information.
        /// }
        /// </code>
        /// </details>
        /// 
        /// </remarks>
        public virtual async Task<Response> PartialUpdateGlossaryAsync(string glossaryGuid, RequestContent content, bool? includeTermHierarchy = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(glossaryGuid, nameof(glossaryGuid));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.PartialUpdateGlossary");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePartialUpdateGlossaryRequest(glossaryGuid, content, includeTermHierarchy, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update the glossary partially. Some properties such as qualifiedName are not allowed to be updated. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryGuid"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="glossaryGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call PartialUpdateGlossary with required parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// var data = new {
        ///     key = "<String>",
        /// };
        /// 
        /// Response response = client.PartialUpdateGlossary("<glossaryGuid>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call PartialUpdateGlossary with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// var data = new {
        ///     key = "<String>",
        /// };
        /// 
        /// Response response = client.PartialUpdateGlossary("<glossaryGuid>", RequestContent.Create(data), true);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("longDescription").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("qualifiedName").ToString());
        /// Console.WriteLine(result.GetProperty("shortDescription").ToString());
        /// Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
        /// Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("language").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("usage").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// <details><summary>AtlasGlossaryExtInfo</summary>Schema for <c>AtlasGlossaryExtInfo</c>:
        /// <code>{
        ///   categories: [
        ///     {
        ///       categoryGuid: string, # Optional. The GUID of the category.
        ///       description: string, # Optional. The description of the category header.
        ///       displayText: string, # Optional. The display text.
        ///       parentCategoryGuid: string, # Optional. The GUID of the parent category.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///     }
        ///   ], # Optional. An array of categories.
        ///   language: string, # Optional. The language of the glossary.
        ///   terms: [
        ///     {
        ///       description: string, # Optional. The description of the related term.
        ///       displayText: string, # Optional. The display text.
        ///       expression: string, # Optional. The expression of the term.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       source: string, # Optional. The source of the term.
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///       steward: string, # Optional. The steward of the term.
        ///       termGuid: string, # Optional. The GUID of the term.
        ///     }
        ///   ], # Optional. An array of related term headers.
        ///   usage: string, # Optional. The usage of the glossary.
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       entityGuid: string, # Optional. The GUID of the entity.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. The end of the time boundary.
        ///           startTime: string, # Optional. The start of the time boundary.
        ///           timeZone: string, # Optional. The timezone of the time boundary.
        ///         }
        ///       ], # Optional. An array of time boundaries indicating validity periods.
        ///       source: string, # Optional. indicate the source who create the classification detail
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///     }
        ///   ], # Optional. An array of classifications.
        ///   longDescription: string, # Optional. The long version description.
        ///   name: string, # Optional. The name of the glossary object.
        ///   qualifiedName: string, # Optional. The qualified name of the glossary object.
        ///   shortDescription: string, # Optional. The short version of description.
        ///   lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///   guid: string, # Optional. The GUID of the object.
        ///   categoryInfo: Dictionary&lt;string, AtlasGlossaryCategory&gt;, # Optional. The glossary category information.
        ///   termInfo: Dictionary&lt;string, AtlasGlossaryTerm&gt;, # Optional. The glossary term information.
        /// }
        /// </code>
        /// </details>
        /// 
        /// </remarks>
        public virtual Response PartialUpdateGlossary(string glossaryGuid, RequestContent content, bool? includeTermHierarchy = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(glossaryGuid, nameof(glossaryGuid));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.PartialUpdateGlossary");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePartialUpdateGlossaryRequest(glossaryGuid, content, includeTermHierarchy, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get terms belonging to a specific glossary. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryGuid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="glossaryGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetGlossaryTermsAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// Response response = await client.GetGlossaryTermsAsync("<glossaryGuid>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].ToString());
        /// ]]></code>
        /// This sample shows how to call GetGlossaryTermsAsync with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// Response response = await client.GetGlossaryTermsAsync("<glossaryGuid>", true, 1234, 1234, "<sort>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result[0].GetProperty("longDescription").ToString());
        /// Console.WriteLine(result[0].GetProperty("name").ToString());
        /// Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
        /// Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
        /// Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result[0].GetProperty("abbreviation").ToString());
        /// Console.WriteLine(result[0].GetProperty("templateName")[0].ToString());
        /// Console.WriteLine(result[0].GetProperty("anchor").GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("anchor").GetProperty("glossaryGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("anchor").GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("createTime").ToString());
        /// Console.WriteLine(result[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result[0].GetProperty("updateTime").ToString());
        /// Console.WriteLine(result[0].GetProperty("updatedBy").ToString());
        /// Console.WriteLine(result[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("displayName").ToString());
        /// Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("url").ToString());
        /// Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
        /// Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
        /// Console.WriteLine(result[0].GetProperty("attributes").GetProperty("<test>").GetProperty("<test>").ToString());
        /// Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
        /// Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
        /// Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
        /// Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("examples")[0].ToString());
        /// Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("usage").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ArrayOfAtlasGlossaryTerm</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       entityGuid: string, # Optional. The GUID of the entity.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. The end of the time boundary.
        ///           startTime: string, # Optional. The start of the time boundary.
        ///           timeZone: string, # Optional. The timezone of the time boundary.
        ///         }
        ///       ], # Optional. An array of time boundaries indicating validity periods.
        ///       source: string, # Optional. indicate the source who create the classification detail
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///     }
        ///   ], # Optional. An array of classifications.
        ///   longDescription: string, # Optional. The long version description.
        ///   name: string, # Optional. The name of the glossary object.
        ///   qualifiedName: string, # Optional. The qualified name of the glossary object.
        ///   shortDescription: string, # Optional. The short version of description.
        ///   lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///   guid: string, # Optional. The GUID of the object.
        ///   abbreviation: string, # Optional. The abbreviation of the term.
        ///   templateName: [AnyObject], # Optional.
        ///   anchor: {
        ///     displayText: string, # Optional. The display text.
        ///     glossaryGuid: string, # Optional. The GUID of the glossary.
        ///     relationGuid: string, # Optional. The GUID of the relationship.
        ///   }, # Optional. The glossary header with basic information.
        ///   antonyms: [
        ///     {
        ///       description: string, # Optional. The description of the related term.
        ///       displayText: string, # Optional. The display text.
        ///       expression: string, # Optional. The expression of the term.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       source: string, # Optional. The source of the term.
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///       steward: string, # Optional. The steward of the term.
        ///       termGuid: string, # Optional. The GUID of the term.
        ///     }
        ///   ], # Optional. An array of related term headers as antonyms.
        ///   createTime: number, # Optional. The created time of the record.
        ///   createdBy: string, # Optional. The user who created the record.
        ///   updateTime: number, # Optional. The update time of the record.
        ///   updatedBy: string, # Optional. The user who updated the record.
        ///   status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;, # Optional. Status of the AtlasGlossaryTerm
        ///   resources: [
        ///     {
        ///       displayName: string, # Optional. Display name for url.
        ///       url: string, # Optional. web url. http or https
        ///     }
        ///   ], # Optional. An array of resource link for term
        ///   contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. The dictionary of contacts for terms. Key could be Expert or Steward.
        ///   attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;, # Optional. The custom attributes of the term, which is map&lt;string,map&lt;string,object&gt;&gt;.
        /// The key of the first layer map is term template name.
        ///   assignedEntities: [
        ///     {
        ///       guid: string, # Optional. The GUID of the object.
        ///       typeName: string, # Optional. The name of the type.
        ///       uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The unique attributes of the object.
        ///       displayText: string, # Optional. The display text.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       relationshipType: string, # Optional.
        ///       relationshipAttributes: {
        ///         attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///         typeName: string, # Optional. The name of the type.
        ///         lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       }, # Optional. Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.
        ///       relationshipGuid: string, # Optional. The GUID of the relationship.
        ///       relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. The enum of relationship status.
        ///     }
        ///   ], # Optional. An array of related object IDs.
        ///   categories: [
        ///     {
        ///       categoryGuid: string, # Optional. The GUID of the category.
        ///       description: string, # Optional. The description of the record.
        ///       displayText: string, # Optional. The display text.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///     }
        ///   ], # Optional. An array of term categorization headers.
        ///   classifies: [AtlasRelatedTermHeader], # Optional. An array of related term headers.
        ///   examples: [string], # Optional. An array of examples.
        ///   isA: [AtlasRelatedTermHeader], # Optional. An array of related term headers indicating the is-a relationship.
        ///   preferredTerms: [AtlasRelatedTermHeader], # Optional. An array of preferred related term headers.
        ///   preferredToTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are preferred to.
        ///   replacedBy: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are replaced by.
        ///   replacementTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for replacement.
        ///   seeAlso: [AtlasRelatedTermHeader], # Optional. An array of related term headers for see also.
        ///   synonyms: [AtlasRelatedTermHeader], # Optional. An array of related term headers as synonyms.
        ///   translatedTerms: [AtlasRelatedTermHeader], # Optional. An array of translated related term headers.
        ///   translationTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for translation.
        ///   usage: string, # Optional. The usage of the term.
        ///   validValues: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values.
        ///   validValuesFor: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values for other records.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetGlossaryTermsAsync(string glossaryGuid, bool? includeTermHierarchy = null, int? limit = null, int? offset = null, string sort = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(glossaryGuid, nameof(glossaryGuid));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.GetGlossaryTerms");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetGlossaryTermsRequest(glossaryGuid, includeTermHierarchy, limit, offset, sort, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get terms belonging to a specific glossary. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryGuid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="glossaryGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetGlossaryTerms with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// Response response = client.GetGlossaryTerms("<glossaryGuid>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].ToString());
        /// ]]></code>
        /// This sample shows how to call GetGlossaryTerms with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// Response response = client.GetGlossaryTerms("<glossaryGuid>", true, 1234, 1234, "<sort>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result[0].GetProperty("longDescription").ToString());
        /// Console.WriteLine(result[0].GetProperty("name").ToString());
        /// Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
        /// Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
        /// Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result[0].GetProperty("abbreviation").ToString());
        /// Console.WriteLine(result[0].GetProperty("templateName")[0].ToString());
        /// Console.WriteLine(result[0].GetProperty("anchor").GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("anchor").GetProperty("glossaryGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("anchor").GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("createTime").ToString());
        /// Console.WriteLine(result[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result[0].GetProperty("updateTime").ToString());
        /// Console.WriteLine(result[0].GetProperty("updatedBy").ToString());
        /// Console.WriteLine(result[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("displayName").ToString());
        /// Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("url").ToString());
        /// Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
        /// Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
        /// Console.WriteLine(result[0].GetProperty("attributes").GetProperty("<test>").GetProperty("<test>").ToString());
        /// Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
        /// Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
        /// Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
        /// Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("examples")[0].ToString());
        /// Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("usage").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ArrayOfAtlasGlossaryTerm</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       entityGuid: string, # Optional. The GUID of the entity.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. The end of the time boundary.
        ///           startTime: string, # Optional. The start of the time boundary.
        ///           timeZone: string, # Optional. The timezone of the time boundary.
        ///         }
        ///       ], # Optional. An array of time boundaries indicating validity periods.
        ///       source: string, # Optional. indicate the source who create the classification detail
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///     }
        ///   ], # Optional. An array of classifications.
        ///   longDescription: string, # Optional. The long version description.
        ///   name: string, # Optional. The name of the glossary object.
        ///   qualifiedName: string, # Optional. The qualified name of the glossary object.
        ///   shortDescription: string, # Optional. The short version of description.
        ///   lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///   guid: string, # Optional. The GUID of the object.
        ///   abbreviation: string, # Optional. The abbreviation of the term.
        ///   templateName: [AnyObject], # Optional.
        ///   anchor: {
        ///     displayText: string, # Optional. The display text.
        ///     glossaryGuid: string, # Optional. The GUID of the glossary.
        ///     relationGuid: string, # Optional. The GUID of the relationship.
        ///   }, # Optional. The glossary header with basic information.
        ///   antonyms: [
        ///     {
        ///       description: string, # Optional. The description of the related term.
        ///       displayText: string, # Optional. The display text.
        ///       expression: string, # Optional. The expression of the term.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       source: string, # Optional. The source of the term.
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///       steward: string, # Optional. The steward of the term.
        ///       termGuid: string, # Optional. The GUID of the term.
        ///     }
        ///   ], # Optional. An array of related term headers as antonyms.
        ///   createTime: number, # Optional. The created time of the record.
        ///   createdBy: string, # Optional. The user who created the record.
        ///   updateTime: number, # Optional. The update time of the record.
        ///   updatedBy: string, # Optional. The user who updated the record.
        ///   status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;, # Optional. Status of the AtlasGlossaryTerm
        ///   resources: [
        ///     {
        ///       displayName: string, # Optional. Display name for url.
        ///       url: string, # Optional. web url. http or https
        ///     }
        ///   ], # Optional. An array of resource link for term
        ///   contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. The dictionary of contacts for terms. Key could be Expert or Steward.
        ///   attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;, # Optional. The custom attributes of the term, which is map&lt;string,map&lt;string,object&gt;&gt;.
        /// The key of the first layer map is term template name.
        ///   assignedEntities: [
        ///     {
        ///       guid: string, # Optional. The GUID of the object.
        ///       typeName: string, # Optional. The name of the type.
        ///       uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The unique attributes of the object.
        ///       displayText: string, # Optional. The display text.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       relationshipType: string, # Optional.
        ///       relationshipAttributes: {
        ///         attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///         typeName: string, # Optional. The name of the type.
        ///         lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       }, # Optional. Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.
        ///       relationshipGuid: string, # Optional. The GUID of the relationship.
        ///       relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. The enum of relationship status.
        ///     }
        ///   ], # Optional. An array of related object IDs.
        ///   categories: [
        ///     {
        ///       categoryGuid: string, # Optional. The GUID of the category.
        ///       description: string, # Optional. The description of the record.
        ///       displayText: string, # Optional. The display text.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///     }
        ///   ], # Optional. An array of term categorization headers.
        ///   classifies: [AtlasRelatedTermHeader], # Optional. An array of related term headers.
        ///   examples: [string], # Optional. An array of examples.
        ///   isA: [AtlasRelatedTermHeader], # Optional. An array of related term headers indicating the is-a relationship.
        ///   preferredTerms: [AtlasRelatedTermHeader], # Optional. An array of preferred related term headers.
        ///   preferredToTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are preferred to.
        ///   replacedBy: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are replaced by.
        ///   replacementTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for replacement.
        ///   seeAlso: [AtlasRelatedTermHeader], # Optional. An array of related term headers for see also.
        ///   synonyms: [AtlasRelatedTermHeader], # Optional. An array of related term headers as synonyms.
        ///   translatedTerms: [AtlasRelatedTermHeader], # Optional. An array of translated related term headers.
        ///   translationTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for translation.
        ///   usage: string, # Optional. The usage of the term.
        ///   validValues: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values.
        ///   validValuesFor: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values for other records.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetGlossaryTerms(string glossaryGuid, bool? includeTermHierarchy = null, int? limit = null, int? offset = null, string sort = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(glossaryGuid, nameof(glossaryGuid));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.GetGlossaryTerms");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetGlossaryTermsRequest(glossaryGuid, includeTermHierarchy, limit, offset, sort, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get term headers belonging to a specific glossary. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryGuid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="glossaryGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetGlossaryTermHeadersAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// Response response = await client.GetGlossaryTermHeadersAsync("<glossaryGuid>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].ToString());
        /// ]]></code>
        /// This sample shows how to call GetGlossaryTermHeadersAsync with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// Response response = await client.GetGlossaryTermHeadersAsync("<glossaryGuid>", 1234, 1234, "<sort>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("termGuid").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ArrayOfAtlasRelatedTermHeader</c>:
        /// <code>{
        ///   description: string, # Optional. The description of the related term.
        ///   displayText: string, # Optional. The display text.
        ///   expression: string, # Optional. The expression of the term.
        ///   relationGuid: string, # Optional. The GUID of the relationship.
        ///   source: string, # Optional. The source of the term.
        ///   status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///   steward: string, # Optional. The steward of the term.
        ///   termGuid: string, # Optional. The GUID of the term.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetGlossaryTermHeadersAsync(string glossaryGuid, int? limit = null, int? offset = null, string sort = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(glossaryGuid, nameof(glossaryGuid));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.GetGlossaryTermHeaders");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetGlossaryTermHeadersRequest(glossaryGuid, limit, offset, sort, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get term headers belonging to a specific glossary. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryGuid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="glossaryGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetGlossaryTermHeaders with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// Response response = client.GetGlossaryTermHeaders("<glossaryGuid>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].ToString());
        /// ]]></code>
        /// This sample shows how to call GetGlossaryTermHeaders with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// Response response = client.GetGlossaryTermHeaders("<glossaryGuid>", 1234, 1234, "<sort>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("termGuid").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ArrayOfAtlasRelatedTermHeader</c>:
        /// <code>{
        ///   description: string, # Optional. The description of the related term.
        ///   displayText: string, # Optional. The display text.
        ///   expression: string, # Optional. The expression of the term.
        ///   relationGuid: string, # Optional. The GUID of the relationship.
        ///   source: string, # Optional. The source of the term.
        ///   status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///   steward: string, # Optional. The steward of the term.
        ///   termGuid: string, # Optional. The GUID of the term.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetGlossaryTermHeaders(string glossaryGuid, int? limit = null, int? offset = null, string sort = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(glossaryGuid, nameof(glossaryGuid));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.GetGlossaryTermHeaders");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetGlossaryTermHeadersRequest(glossaryGuid, limit, offset, sort, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the status of import csv operation. </summary>
        /// <param name="operationGuid"> The globally unique identifier for async operation/job. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="operationGuid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="operationGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetImportCsvOperationStatusAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// Response response = await client.GetImportCsvOperationStatusAsync("<operationGuid>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("createTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("importedTerms").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("totalTermsDetected").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("errorCode").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("errorMessage").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ImportCSVOperation</c>:
        /// <code>{
        ///   id: string, # Optional. guid string
        ///   status: &quot;NotStarted&quot; | &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;Running&quot;, # Optional. Enum of the status of import csv operation.
        ///   createTime: string, # Optional. The created time of the record.
        ///   lastUpdateTime: string, # Optional. The last updated time of the record.
        ///   properties: {
        ///     importedTerms: string, # Optional. Term numbers that already imported successfully
        ///     totalTermsDetected: string, # Optional. Total term numbers that detected in csv
        ///   }, # Optional.
        ///   error: {
        ///     errorCode: number, # Optional. Error code from async import job if fail
        ///     errorMessage: string, # Optional. Error message from async import job if fail
        ///   }, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetImportCsvOperationStatusAsync(string operationGuid, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(operationGuid, nameof(operationGuid));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.GetImportCsvOperationStatus");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetImportCsvOperationStatusRequest(operationGuid, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the status of import csv operation. </summary>
        /// <param name="operationGuid"> The globally unique identifier for async operation/job. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="operationGuid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="operationGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetImportCsvOperationStatus with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// Response response = client.GetImportCsvOperationStatus("<operationGuid>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("createTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("importedTerms").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("totalTermsDetected").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("errorCode").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("errorMessage").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ImportCSVOperation</c>:
        /// <code>{
        ///   id: string, # Optional. guid string
        ///   status: &quot;NotStarted&quot; | &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;Running&quot;, # Optional. Enum of the status of import csv operation.
        ///   createTime: string, # Optional. The created time of the record.
        ///   lastUpdateTime: string, # Optional. The last updated time of the record.
        ///   properties: {
        ///     importedTerms: string, # Optional. Term numbers that already imported successfully
        ///     totalTermsDetected: string, # Optional. Total term numbers that detected in csv
        ///   }, # Optional.
        ///   error: {
        ///     errorCode: number, # Optional. Error code from async import job if fail
        ///     errorMessage: string, # Optional. Error message from async import job if fail
        ///   }, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetImportCsvOperationStatus(string operationGuid, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(operationGuid, nameof(operationGuid));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.GetImportCsvOperationStatus");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetImportCsvOperationStatusRequest(operationGuid, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Export Glossary Terms as csv file. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryGuid"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="glossaryGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call ExportGlossaryTermsAsCsvAsync with required parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// var data = new[] {
        ///     "<TermGuid>"
        /// };
        /// 
        /// Response response = await client.ExportGlossaryTermsAsCsvAsync("<glossaryGuid>", RequestContent.Create(data));
        /// if (response.ContentStream != null)
        /// {
        ///     using(Stream outFileStream = File.OpenWrite("<filePath>")
        ///     {
        ///         response.ContentStream.CopyTo(outFileStream);
        ///     }
        /// }
        /// ]]></code>
        /// This sample shows how to call ExportGlossaryTermsAsCsvAsync with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// var data = new[] {
        ///     "<TermGuid>"
        /// };
        /// 
        /// Response response = await client.ExportGlossaryTermsAsCsvAsync("<glossaryGuid>", RequestContent.Create(data), true);
        /// if (response.ContentStream != null)
        /// {
        ///     using(Stream outFileStream = File.OpenWrite("<filePath>")
        ///     {
        ///         response.ContentStream.CopyTo(outFileStream);
        ///     }
        /// }
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> ExportGlossaryTermsAsCsvAsync(string glossaryGuid, RequestContent content, bool? includeTermHierarchy = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(glossaryGuid, nameof(glossaryGuid));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.ExportGlossaryTermsAsCsv");
            scope.Start();
            try
            {
                using HttpMessage message = CreateExportGlossaryTermsAsCsvRequest(glossaryGuid, content, includeTermHierarchy, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Export Glossary Terms as csv file. </summary>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryGuid"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="glossaryGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call ExportGlossaryTermsAsCsv with required parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// var data = new[] {
        ///     "<TermGuid>"
        /// };
        /// 
        /// Response response = client.ExportGlossaryTermsAsCsv("<glossaryGuid>", RequestContent.Create(data));
        /// if (response.ContentStream != null)
        /// {
        ///     using(Stream outFileStream = File.OpenWrite("<filePath>")
        ///     {
        ///         response.ContentStream.CopyTo(outFileStream);
        ///     }
        /// }
        /// ]]></code>
        /// This sample shows how to call ExportGlossaryTermsAsCsv with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// var data = new[] {
        ///     "<TermGuid>"
        /// };
        /// 
        /// Response response = client.ExportGlossaryTermsAsCsv("<glossaryGuid>", RequestContent.Create(data), true);
        /// if (response.ContentStream != null)
        /// {
        ///     using(Stream outFileStream = File.OpenWrite("<filePath>")
        ///     {
        ///         response.ContentStream.CopyTo(outFileStream);
        ///     }
        /// }
        /// ]]></code>
        /// </example>
        public virtual Response ExportGlossaryTermsAsCsv(string glossaryGuid, RequestContent content, bool? includeTermHierarchy = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(glossaryGuid, nameof(glossaryGuid));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.ExportGlossaryTermsAsCsv");
            scope.Start();
            try
            {
                using HttpMessage message = CreateExportGlossaryTermsAsCsvRequest(glossaryGuid, content, includeTermHierarchy, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get terms by glossary name. </summary>
        /// <param name="glossaryName"> The name of the glossary. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="glossaryName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetTermsByGlossaryNameAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// Response response = await client.GetTermsByGlossaryNameAsync("<glossaryName>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].ToString());
        /// ]]></code>
        /// This sample shows how to call GetTermsByGlossaryNameAsync with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// Response response = await client.GetTermsByGlossaryNameAsync("<glossaryName>", 1234, 1234, true);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result[0].GetProperty("longDescription").ToString());
        /// Console.WriteLine(result[0].GetProperty("name").ToString());
        /// Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
        /// Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
        /// Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result[0].GetProperty("abbreviation").ToString());
        /// Console.WriteLine(result[0].GetProperty("templateName")[0].ToString());
        /// Console.WriteLine(result[0].GetProperty("anchor").GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("anchor").GetProperty("glossaryGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("anchor").GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("createTime").ToString());
        /// Console.WriteLine(result[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result[0].GetProperty("updateTime").ToString());
        /// Console.WriteLine(result[0].GetProperty("updatedBy").ToString());
        /// Console.WriteLine(result[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("displayName").ToString());
        /// Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("url").ToString());
        /// Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
        /// Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
        /// Console.WriteLine(result[0].GetProperty("attributes").GetProperty("<test>").GetProperty("<test>").ToString());
        /// Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
        /// Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
        /// Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
        /// Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("examples")[0].ToString());
        /// Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("usage").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ArrayOfAtlasGlossaryTerm</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       entityGuid: string, # Optional. The GUID of the entity.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. The end of the time boundary.
        ///           startTime: string, # Optional. The start of the time boundary.
        ///           timeZone: string, # Optional. The timezone of the time boundary.
        ///         }
        ///       ], # Optional. An array of time boundaries indicating validity periods.
        ///       source: string, # Optional. indicate the source who create the classification detail
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///     }
        ///   ], # Optional. An array of classifications.
        ///   longDescription: string, # Optional. The long version description.
        ///   name: string, # Optional. The name of the glossary object.
        ///   qualifiedName: string, # Optional. The qualified name of the glossary object.
        ///   shortDescription: string, # Optional. The short version of description.
        ///   lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///   guid: string, # Optional. The GUID of the object.
        ///   abbreviation: string, # Optional. The abbreviation of the term.
        ///   templateName: [AnyObject], # Optional.
        ///   anchor: {
        ///     displayText: string, # Optional. The display text.
        ///     glossaryGuid: string, # Optional. The GUID of the glossary.
        ///     relationGuid: string, # Optional. The GUID of the relationship.
        ///   }, # Optional. The glossary header with basic information.
        ///   antonyms: [
        ///     {
        ///       description: string, # Optional. The description of the related term.
        ///       displayText: string, # Optional. The display text.
        ///       expression: string, # Optional. The expression of the term.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       source: string, # Optional. The source of the term.
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///       steward: string, # Optional. The steward of the term.
        ///       termGuid: string, # Optional. The GUID of the term.
        ///     }
        ///   ], # Optional. An array of related term headers as antonyms.
        ///   createTime: number, # Optional. The created time of the record.
        ///   createdBy: string, # Optional. The user who created the record.
        ///   updateTime: number, # Optional. The update time of the record.
        ///   updatedBy: string, # Optional. The user who updated the record.
        ///   status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;, # Optional. Status of the AtlasGlossaryTerm
        ///   resources: [
        ///     {
        ///       displayName: string, # Optional. Display name for url.
        ///       url: string, # Optional. web url. http or https
        ///     }
        ///   ], # Optional. An array of resource link for term
        ///   contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. The dictionary of contacts for terms. Key could be Expert or Steward.
        ///   attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;, # Optional. The custom attributes of the term, which is map&lt;string,map&lt;string,object&gt;&gt;.
        /// The key of the first layer map is term template name.
        ///   assignedEntities: [
        ///     {
        ///       guid: string, # Optional. The GUID of the object.
        ///       typeName: string, # Optional. The name of the type.
        ///       uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The unique attributes of the object.
        ///       displayText: string, # Optional. The display text.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       relationshipType: string, # Optional.
        ///       relationshipAttributes: {
        ///         attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///         typeName: string, # Optional. The name of the type.
        ///         lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       }, # Optional. Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.
        ///       relationshipGuid: string, # Optional. The GUID of the relationship.
        ///       relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. The enum of relationship status.
        ///     }
        ///   ], # Optional. An array of related object IDs.
        ///   categories: [
        ///     {
        ///       categoryGuid: string, # Optional. The GUID of the category.
        ///       description: string, # Optional. The description of the record.
        ///       displayText: string, # Optional. The display text.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///     }
        ///   ], # Optional. An array of term categorization headers.
        ///   classifies: [AtlasRelatedTermHeader], # Optional. An array of related term headers.
        ///   examples: [string], # Optional. An array of examples.
        ///   isA: [AtlasRelatedTermHeader], # Optional. An array of related term headers indicating the is-a relationship.
        ///   preferredTerms: [AtlasRelatedTermHeader], # Optional. An array of preferred related term headers.
        ///   preferredToTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are preferred to.
        ///   replacedBy: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are replaced by.
        ///   replacementTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for replacement.
        ///   seeAlso: [AtlasRelatedTermHeader], # Optional. An array of related term headers for see also.
        ///   synonyms: [AtlasRelatedTermHeader], # Optional. An array of related term headers as synonyms.
        ///   translatedTerms: [AtlasRelatedTermHeader], # Optional. An array of translated related term headers.
        ///   translationTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for translation.
        ///   usage: string, # Optional. The usage of the term.
        ///   validValues: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values.
        ///   validValuesFor: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values for other records.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetTermsByGlossaryNameAsync(string glossaryName, int? limit = null, int? offset = null, bool? includeTermHierarchy = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(glossaryName, nameof(glossaryName));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.GetTermsByGlossaryName");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetTermsByGlossaryNameRequest(glossaryName, limit, offset, includeTermHierarchy, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get terms by glossary name. </summary>
        /// <param name="glossaryName"> The name of the glossary. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="glossaryName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetTermsByGlossaryName with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// Response response = client.GetTermsByGlossaryName("<glossaryName>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].ToString());
        /// ]]></code>
        /// This sample shows how to call GetTermsByGlossaryName with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// Response response = client.GetTermsByGlossaryName("<glossaryName>", 1234, 1234, true);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result[0].GetProperty("longDescription").ToString());
        /// Console.WriteLine(result[0].GetProperty("name").ToString());
        /// Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
        /// Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
        /// Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result[0].GetProperty("abbreviation").ToString());
        /// Console.WriteLine(result[0].GetProperty("templateName")[0].ToString());
        /// Console.WriteLine(result[0].GetProperty("anchor").GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("anchor").GetProperty("glossaryGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("anchor").GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("createTime").ToString());
        /// Console.WriteLine(result[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result[0].GetProperty("updateTime").ToString());
        /// Console.WriteLine(result[0].GetProperty("updatedBy").ToString());
        /// Console.WriteLine(result[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("displayName").ToString());
        /// Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("url").ToString());
        /// Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
        /// Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
        /// Console.WriteLine(result[0].GetProperty("attributes").GetProperty("<test>").GetProperty("<test>").ToString());
        /// Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
        /// Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
        /// Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
        /// Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("examples")[0].ToString());
        /// Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("usage").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ArrayOfAtlasGlossaryTerm</c>:
        /// <code>{
        ///   classifications: [
        ///     {
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       entityGuid: string, # Optional. The GUID of the entity.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///       validityPeriods: [
        ///         {
        ///           endTime: string, # Optional. The end of the time boundary.
        ///           startTime: string, # Optional. The start of the time boundary.
        ///           timeZone: string, # Optional. The timezone of the time boundary.
        ///         }
        ///       ], # Optional. An array of time boundaries indicating validity periods.
        ///       source: string, # Optional. indicate the source who create the classification detail
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///     }
        ///   ], # Optional. An array of classifications.
        ///   longDescription: string, # Optional. The long version description.
        ///   name: string, # Optional. The name of the glossary object.
        ///   qualifiedName: string, # Optional. The qualified name of the glossary object.
        ///   shortDescription: string, # Optional. The short version of description.
        ///   lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///   guid: string, # Optional. The GUID of the object.
        ///   abbreviation: string, # Optional. The abbreviation of the term.
        ///   templateName: [AnyObject], # Optional.
        ///   anchor: {
        ///     displayText: string, # Optional. The display text.
        ///     glossaryGuid: string, # Optional. The GUID of the glossary.
        ///     relationGuid: string, # Optional. The GUID of the relationship.
        ///   }, # Optional. The glossary header with basic information.
        ///   antonyms: [
        ///     {
        ///       description: string, # Optional. The description of the related term.
        ///       displayText: string, # Optional. The display text.
        ///       expression: string, # Optional. The expression of the term.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       source: string, # Optional. The source of the term.
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///       steward: string, # Optional. The steward of the term.
        ///       termGuid: string, # Optional. The GUID of the term.
        ///     }
        ///   ], # Optional. An array of related term headers as antonyms.
        ///   createTime: number, # Optional. The created time of the record.
        ///   createdBy: string, # Optional. The user who created the record.
        ///   updateTime: number, # Optional. The update time of the record.
        ///   updatedBy: string, # Optional. The user who updated the record.
        ///   status: &quot;Draft&quot; | &quot;Approved&quot; | &quot;Alert&quot; | &quot;Expired&quot;, # Optional. Status of the AtlasGlossaryTerm
        ///   resources: [
        ///     {
        ///       displayName: string, # Optional. Display name for url.
        ///       url: string, # Optional. web url. http or https
        ///     }
        ///   ], # Optional. An array of resource link for term
        ///   contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. The dictionary of contacts for terms. Key could be Expert or Steward.
        ///   attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;, # Optional. The custom attributes of the term, which is map&lt;string,map&lt;string,object&gt;&gt;.
        /// The key of the first layer map is term template name.
        ///   assignedEntities: [
        ///     {
        ///       guid: string, # Optional. The GUID of the object.
        ///       typeName: string, # Optional. The name of the type.
        ///       uniqueAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The unique attributes of the object.
        ///       displayText: string, # Optional. The display text.
        ///       entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       relationshipType: string, # Optional.
        ///       relationshipAttributes: {
        ///         attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///         typeName: string, # Optional. The name of the type.
        ///         lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       }, # Optional. Captures details of struct contents. Not instantiated directly, used only via AtlasEntity, AtlasClassification.
        ///       relationshipGuid: string, # Optional. The GUID of the relationship.
        ///       relationshipStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. The enum of relationship status.
        ///     }
        ///   ], # Optional. An array of related object IDs.
        ///   categories: [
        ///     {
        ///       categoryGuid: string, # Optional. The GUID of the category.
        ///       description: string, # Optional. The description of the record.
        ///       displayText: string, # Optional. The display text.
        ///       relationGuid: string, # Optional. The GUID of the relationship.
        ///       status: &quot;DRAFT&quot; | &quot;ACTIVE&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of term relationship.
        ///     }
        ///   ], # Optional. An array of term categorization headers.
        ///   classifies: [AtlasRelatedTermHeader], # Optional. An array of related term headers.
        ///   examples: [string], # Optional. An array of examples.
        ///   isA: [AtlasRelatedTermHeader], # Optional. An array of related term headers indicating the is-a relationship.
        ///   preferredTerms: [AtlasRelatedTermHeader], # Optional. An array of preferred related term headers.
        ///   preferredToTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are preferred to.
        ///   replacedBy: [AtlasRelatedTermHeader], # Optional. An array of related term headers that are replaced by.
        ///   replacementTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for replacement.
        ///   seeAlso: [AtlasRelatedTermHeader], # Optional. An array of related term headers for see also.
        ///   synonyms: [AtlasRelatedTermHeader], # Optional. An array of related term headers as synonyms.
        ///   translatedTerms: [AtlasRelatedTermHeader], # Optional. An array of translated related term headers.
        ///   translationTerms: [AtlasRelatedTermHeader], # Optional. An array of related term headers for translation.
        ///   usage: string, # Optional. The usage of the term.
        ///   validValues: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values.
        ///   validValuesFor: [AtlasRelatedTermHeader], # Optional. An array of related term headers as valid values for other records.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetTermsByGlossaryName(string glossaryName, int? limit = null, int? offset = null, bool? includeTermHierarchy = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(glossaryName, nameof(glossaryName));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.GetTermsByGlossaryName");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetTermsByGlossaryNameRequest(glossaryName, limit, offset, includeTermHierarchy, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Import Glossary Terms from local csv file. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryGuid"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="glossaryGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Operation{T}"/> from the service that will contain a <see cref="BinaryData"/> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call ImportGlossaryTermsViaCsvAsync with required parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// var data = File.OpenRead("<filePath>");
        /// 
        /// var operation = await client.ImportGlossaryTermsViaCsvAsync(WaitUntil.Completed, "<glossaryGuid>", RequestContent.Create(data));
        /// 
        /// BinaryData data = await operation.WaitForCompletionAsync();
        /// JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call ImportGlossaryTermsViaCsvAsync with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// var data = File.OpenRead("<filePath>");
        /// 
        /// var operation = await client.ImportGlossaryTermsViaCsvAsync(WaitUntil.Completed, "<glossaryGuid>", RequestContent.Create(data), true);
        /// 
        /// BinaryData data = await operation.WaitForCompletionAsync();
        /// JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("createTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("importedTerms").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("totalTermsDetected").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("errorCode").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("errorMessage").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ImportCSVOperation</c>:
        /// <code>{
        ///   id: string, # Optional. guid string
        ///   status: &quot;NotStarted&quot; | &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;Running&quot;, # Optional. Enum of the status of import csv operation.
        ///   createTime: string, # Optional. The created time of the record.
        ///   lastUpdateTime: string, # Optional. The last updated time of the record.
        ///   properties: {
        ///     importedTerms: string, # Optional. Term numbers that already imported successfully
        ///     totalTermsDetected: string, # Optional. Total term numbers that detected in csv
        ///   }, # Optional.
        ///   error: {
        ///     errorCode: number, # Optional. Error code from async import job if fail
        ///     errorMessage: string, # Optional. Error message from async import job if fail
        ///   }, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Operation<BinaryData>> ImportGlossaryTermsViaCsvAsync(WaitUntil waitUntil, string glossaryGuid, RequestContent content, bool? includeTermHierarchy = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(glossaryGuid, nameof(glossaryGuid));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.ImportGlossaryTermsViaCsv");
            scope.Start();
            try
            {
                using HttpMessage message = CreateImportGlossaryTermsViaCsvRequest(glossaryGuid, content, includeTermHierarchy, context);
                return await ProtocolOperationHelpers.ProcessMessageAsync(_pipeline, message, ClientDiagnostics, "PurviewGlossaries.ImportGlossaryTermsViaCsv", OperationFinalStateVia.AzureAsyncOperation, context, waitUntil).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Import Glossary Terms from local csv file. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryGuid"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="glossaryGuid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Operation{T}"/> from the service that will contain a <see cref="BinaryData"/> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call ImportGlossaryTermsViaCsv with required parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// var data = File.OpenRead("<filePath>");
        /// 
        /// var operation = client.ImportGlossaryTermsViaCsv(WaitUntil.Completed, "<glossaryGuid>", RequestContent.Create(data));
        /// 
        /// BinaryData data = operation.WaitForCompletion();
        /// JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call ImportGlossaryTermsViaCsv with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// var data = File.OpenRead("<filePath>");
        /// 
        /// var operation = client.ImportGlossaryTermsViaCsv(WaitUntil.Completed, "<glossaryGuid>", RequestContent.Create(data), true);
        /// 
        /// BinaryData data = operation.WaitForCompletion();
        /// JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("createTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("importedTerms").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("totalTermsDetected").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("errorCode").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("errorMessage").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ImportCSVOperation</c>:
        /// <code>{
        ///   id: string, # Optional. guid string
        ///   status: &quot;NotStarted&quot; | &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;Running&quot;, # Optional. Enum of the status of import csv operation.
        ///   createTime: string, # Optional. The created time of the record.
        ///   lastUpdateTime: string, # Optional. The last updated time of the record.
        ///   properties: {
        ///     importedTerms: string, # Optional. Term numbers that already imported successfully
        ///     totalTermsDetected: string, # Optional. Total term numbers that detected in csv
        ///   }, # Optional.
        ///   error: {
        ///     errorCode: number, # Optional. Error code from async import job if fail
        ///     errorMessage: string, # Optional. Error message from async import job if fail
        ///   }, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Operation<BinaryData> ImportGlossaryTermsViaCsv(WaitUntil waitUntil, string glossaryGuid, RequestContent content, bool? includeTermHierarchy = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(glossaryGuid, nameof(glossaryGuid));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.ImportGlossaryTermsViaCsv");
            scope.Start();
            try
            {
                using HttpMessage message = CreateImportGlossaryTermsViaCsvRequest(glossaryGuid, content, includeTermHierarchy, context);
                return ProtocolOperationHelpers.ProcessMessage(_pipeline, message, ClientDiagnostics, "PurviewGlossaries.ImportGlossaryTermsViaCsv", OperationFinalStateVia.AzureAsyncOperation, context, waitUntil);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Import Glossary Terms from local csv file by glossaryName. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="glossaryName"> The name of the glossary. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryName"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="glossaryName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Operation{T}"/> from the service that will contain a <see cref="BinaryData"/> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call ImportGlossaryTermsViaCsvByGlossaryNameAsync with required parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// var data = File.OpenRead("<filePath>");
        /// 
        /// var operation = await client.ImportGlossaryTermsViaCsvByGlossaryNameAsync(WaitUntil.Completed, "<glossaryName>", RequestContent.Create(data));
        /// 
        /// BinaryData data = await operation.WaitForCompletionAsync();
        /// JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call ImportGlossaryTermsViaCsvByGlossaryNameAsync with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// var data = File.OpenRead("<filePath>");
        /// 
        /// var operation = await client.ImportGlossaryTermsViaCsvByGlossaryNameAsync(WaitUntil.Completed, "<glossaryName>", RequestContent.Create(data), true);
        /// 
        /// BinaryData data = await operation.WaitForCompletionAsync();
        /// JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("createTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("importedTerms").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("totalTermsDetected").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("errorCode").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("errorMessage").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ImportCSVOperation</c>:
        /// <code>{
        ///   id: string, # Optional. guid string
        ///   status: &quot;NotStarted&quot; | &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;Running&quot;, # Optional. Enum of the status of import csv operation.
        ///   createTime: string, # Optional. The created time of the record.
        ///   lastUpdateTime: string, # Optional. The last updated time of the record.
        ///   properties: {
        ///     importedTerms: string, # Optional. Term numbers that already imported successfully
        ///     totalTermsDetected: string, # Optional. Total term numbers that detected in csv
        ///   }, # Optional.
        ///   error: {
        ///     errorCode: number, # Optional. Error code from async import job if fail
        ///     errorMessage: string, # Optional. Error message from async import job if fail
        ///   }, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Operation<BinaryData>> ImportGlossaryTermsViaCsvByGlossaryNameAsync(WaitUntil waitUntil, string glossaryName, RequestContent content, bool? includeTermHierarchy = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(glossaryName, nameof(glossaryName));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.ImportGlossaryTermsViaCsvByGlossaryName");
            scope.Start();
            try
            {
                using HttpMessage message = CreateImportGlossaryTermsViaCsvByGlossaryNameRequest(glossaryName, content, includeTermHierarchy, context);
                return await ProtocolOperationHelpers.ProcessMessageAsync(_pipeline, message, ClientDiagnostics, "PurviewGlossaries.ImportGlossaryTermsViaCsvByGlossaryName", OperationFinalStateVia.AzureAsyncOperation, context, waitUntil).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Import Glossary Terms from local csv file by glossaryName. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="glossaryName"> The name of the glossary. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="glossaryName"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="glossaryName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Operation{T}"/> from the service that will contain a <see cref="BinaryData"/> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call ImportGlossaryTermsViaCsvByGlossaryName with required parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// var data = File.OpenRead("<filePath>");
        /// 
        /// var operation = client.ImportGlossaryTermsViaCsvByGlossaryName(WaitUntil.Completed, "<glossaryName>", RequestContent.Create(data));
        /// 
        /// BinaryData data = operation.WaitForCompletion();
        /// JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call ImportGlossaryTermsViaCsvByGlossaryName with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();
        /// 
        /// var data = File.OpenRead("<filePath>");
        /// 
        /// var operation = client.ImportGlossaryTermsViaCsvByGlossaryName(WaitUntil.Completed, "<glossaryName>", RequestContent.Create(data), true);
        /// 
        /// BinaryData data = operation.WaitForCompletion();
        /// JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("createTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("importedTerms").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("totalTermsDetected").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("errorCode").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("errorMessage").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ImportCSVOperation</c>:
        /// <code>{
        ///   id: string, # Optional. guid string
        ///   status: &quot;NotStarted&quot; | &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;Running&quot;, # Optional. Enum of the status of import csv operation.
        ///   createTime: string, # Optional. The created time of the record.
        ///   lastUpdateTime: string, # Optional. The last updated time of the record.
        ///   properties: {
        ///     importedTerms: string, # Optional. Term numbers that already imported successfully
        ///     totalTermsDetected: string, # Optional. Total term numbers that detected in csv
        ///   }, # Optional.
        ///   error: {
        ///     errorCode: number, # Optional. Error code from async import job if fail
        ///     errorMessage: string, # Optional. Error message from async import job if fail
        ///   }, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Operation<BinaryData> ImportGlossaryTermsViaCsvByGlossaryName(WaitUntil waitUntil, string glossaryName, RequestContent content, bool? includeTermHierarchy = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(glossaryName, nameof(glossaryName));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewGlossaries.ImportGlossaryTermsViaCsvByGlossaryName");
            scope.Start();
            try
            {
                using HttpMessage message = CreateImportGlossaryTermsViaCsvByGlossaryNameRequest(glossaryName, content, includeTermHierarchy, context);
                return ProtocolOperationHelpers.ProcessMessage(_pipeline, message, ClientDiagnostics, "PurviewGlossaries.ImportGlossaryTermsViaCsvByGlossaryName", OperationFinalStateVia.AzureAsyncOperation, context, waitUntil);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateGetGlossariesRequest(int? limit, int? offset, string sort, bool? ignoreTermsAndCategories, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary", false);
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            if (sort != null)
            {
                uri.AppendQuery("sort", sort, true);
            }
            if (ignoreTermsAndCategories != null)
            {
                uri.AppendQuery("ignoreTermsAndCategories", ignoreTermsAndCategories.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateCreateGlossaryRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateCreateGlossaryCategoriesRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/categories", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateCreateGlossaryCategoryRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/category", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetGlossaryCategoryRequest(string categoryGuid, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/category/", false);
            uri.AppendPath(categoryGuid, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateUpdateGlossaryCategoryRequest(string categoryGuid, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/category/", false);
            uri.AppendPath(categoryGuid, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeleteGlossaryCategoryRequest(string categoryGuid, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/category/", false);
            uri.AppendPath(categoryGuid, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreatePartialUpdateGlossaryCategoryRequest(string categoryGuid, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/category/", false);
            uri.AppendPath(categoryGuid, true);
            uri.AppendPath("/partial", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetRelatedCategoriesRequest(string categoryGuid, int? limit, int? offset, string sort, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/category/", false);
            uri.AppendPath(categoryGuid, true);
            uri.AppendPath("/related", false);
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            if (sort != null)
            {
                uri.AppendQuery("sort", sort, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetCategoryTermsRequest(string categoryGuid, int? limit, int? offset, string sort, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/category/", false);
            uri.AppendPath(categoryGuid, true);
            uri.AppendPath("/terms", false);
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            if (sort != null)
            {
                uri.AppendQuery("sort", sort, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateCreateGlossaryTermRequest(RequestContent content, bool? includeTermHierarchy, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/term", false);
            if (includeTermHierarchy != null)
            {
                uri.AppendQuery("includeTermHierarchy", includeTermHierarchy.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetGlossaryTermRequest(string termGuid, bool? includeTermHierarchy, IEnumerable<string> excludeRelationshipTypeList, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/term/", false);
            uri.AppendPath(termGuid, true);
            if (includeTermHierarchy != null)
            {
                uri.AppendQuery("includeTermHierarchy", includeTermHierarchy.Value, true);
            }
            if (excludeRelationshipTypeList != null)
            {
                foreach (var param in excludeRelationshipTypeList)
                {
                    uri.AppendQuery("excludeRelationshipTypes", param, true);
                }
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateUpdateGlossaryTermRequest(string termGuid, RequestContent content, bool? includeTermHierarchy, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/term/", false);
            uri.AppendPath(termGuid, true);
            if (includeTermHierarchy != null)
            {
                uri.AppendQuery("includeTermHierarchy", includeTermHierarchy.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeleteGlossaryTermRequest(string termGuid, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/term/", false);
            uri.AppendPath(termGuid, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreatePartialUpdateGlossaryTermRequest(string termGuid, RequestContent content, bool? includeTermHierarchy, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/term/", false);
            uri.AppendPath(termGuid, true);
            uri.AppendPath("/partial", false);
            if (includeTermHierarchy != null)
            {
                uri.AppendQuery("includeTermHierarchy", includeTermHierarchy.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateCreateGlossaryTermsRequest(RequestContent content, bool? includeTermHierarchy, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/terms", false);
            if (includeTermHierarchy != null)
            {
                uri.AppendQuery("includeTermHierarchy", includeTermHierarchy.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetEntitiesAssignedWithTermRequest(string termGuid, int? limit, int? offset, string sort, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/terms/", false);
            uri.AppendPath(termGuid, true);
            uri.AppendPath("/assignedEntities", false);
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            if (sort != null)
            {
                uri.AppendQuery("sort", sort, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateAssignTermToEntitiesRequest(string termGuid, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/terms/", false);
            uri.AppendPath(termGuid, true);
            uri.AppendPath("/assignedEntities", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateRemoveTermAssignmentFromEntitiesRequest(string termGuid, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/terms/", false);
            uri.AppendPath(termGuid, true);
            uri.AppendPath("/assignedEntities", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeleteTermAssignmentFromEntitiesRequest(string termGuid, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/terms/", false);
            uri.AppendPath(termGuid, true);
            uri.AppendPath("/assignedEntities", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetRelatedTermsRequest(string termGuid, int? limit, int? offset, string sort, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/terms/", false);
            uri.AppendPath(termGuid, true);
            uri.AppendPath("/related", false);
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            if (sort != null)
            {
                uri.AppendQuery("sort", sort, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetGlossaryRequest(string glossaryGuid, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/", false);
            uri.AppendPath(glossaryGuid, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateUpdateGlossaryRequest(string glossaryGuid, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/", false);
            uri.AppendPath(glossaryGuid, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeleteGlossaryRequest(string glossaryGuid, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/", false);
            uri.AppendPath(glossaryGuid, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetGlossaryCategoriesRequest(string glossaryGuid, int? limit, int? offset, string sort, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/", false);
            uri.AppendPath(glossaryGuid, true);
            uri.AppendPath("/categories", false);
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            if (sort != null)
            {
                uri.AppendQuery("sort", sort, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetGlossaryCategoriesHeadersRequest(string glossaryGuid, int? limit, int? offset, string sort, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/", false);
            uri.AppendPath(glossaryGuid, true);
            uri.AppendPath("/categories/headers", false);
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            if (sort != null)
            {
                uri.AppendQuery("sort", sort, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetDetailedGlossaryRequest(string glossaryGuid, bool? includeTermHierarchy, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/", false);
            uri.AppendPath(glossaryGuid, true);
            uri.AppendPath("/detailed", false);
            if (includeTermHierarchy != null)
            {
                uri.AppendQuery("includeTermHierarchy", includeTermHierarchy.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreatePartialUpdateGlossaryRequest(string glossaryGuid, RequestContent content, bool? includeTermHierarchy, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/", false);
            uri.AppendPath(glossaryGuid, true);
            uri.AppendPath("/partial", false);
            if (includeTermHierarchy != null)
            {
                uri.AppendQuery("includeTermHierarchy", includeTermHierarchy.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetGlossaryTermsRequest(string glossaryGuid, bool? includeTermHierarchy, int? limit, int? offset, string sort, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/", false);
            uri.AppendPath(glossaryGuid, true);
            uri.AppendPath("/terms", false);
            if (includeTermHierarchy != null)
            {
                uri.AppendQuery("includeTermHierarchy", includeTermHierarchy.Value, true);
            }
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            if (sort != null)
            {
                uri.AppendQuery("sort", sort, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetGlossaryTermHeadersRequest(string glossaryGuid, int? limit, int? offset, string sort, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/glossary/", false);
            uri.AppendPath(glossaryGuid, true);
            uri.AppendPath("/terms/headers", false);
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            if (sort != null)
            {
                uri.AppendQuery("sort", sort, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateImportGlossaryTermsViaCsvRequest(string glossaryGuid, RequestContent content, bool? includeTermHierarchy, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier202);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/glossary/", false);
            uri.AppendPath(glossaryGuid, true);
            uri.AppendPath("/terms/import", false);
            if (includeTermHierarchy != null)
            {
                uri.AppendQuery("includeTermHierarchy", includeTermHierarchy.Value, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "multipart/form-data");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateImportGlossaryTermsViaCsvByGlossaryNameRequest(string glossaryName, RequestContent content, bool? includeTermHierarchy, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier202);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/glossary/name/", false);
            uri.AppendPath(glossaryName, true);
            uri.AppendPath("/terms/import", false);
            if (includeTermHierarchy != null)
            {
                uri.AppendQuery("includeTermHierarchy", includeTermHierarchy.Value, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "multipart/form-data");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetImportCsvOperationStatusRequest(string operationGuid, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/glossary/terms/import/", false);
            uri.AppendPath(operationGuid, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateExportGlossaryTermsAsCsvRequest(string glossaryGuid, RequestContent content, bool? includeTermHierarchy, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/glossary/", false);
            uri.AppendPath(glossaryGuid, true);
            uri.AppendPath("/terms/export", false);
            if (includeTermHierarchy != null)
            {
                uri.AppendQuery("includeTermHierarchy", includeTermHierarchy.Value, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "text/csv");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetTermsByGlossaryNameRequest(string glossaryName, int? limit, int? offset, bool? includeTermHierarchy, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/glossary/name/", false);
            uri.AppendPath(glossaryName, true);
            uri.AppendPath("/terms", false);
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            if (includeTermHierarchy != null)
            {
                uri.AppendQuery("includeTermHierarchy", includeTermHierarchy.Value, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier204;
        private static ResponseClassifier ResponseClassifier204 => _responseClassifier204 ??= new StatusCodeClassifier(stackalloc ushort[] { 204 });
        private static ResponseClassifier _responseClassifier202;
        private static ResponseClassifier ResponseClassifier202 => _responseClassifier202 ??= new StatusCodeClassifier(stackalloc ushort[] { 202 });
    }
}
