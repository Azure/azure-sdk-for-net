// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Linq;

namespace Azure.Analytics.Purview.Catalog.Models
{
    /// <summary> Model factory for read-only models. </summary>
    public static partial class PurviewCatalogModelFactory
    {
        /// <summary> Initializes a new instance of EntityMutationResponse. </summary>
        /// <param name="guidAssignments"> A map of GUID assignments with entities. </param>
        /// <param name="mutatedEntities"> The entity headers of mutated entities. </param>
        /// <param name="partialUpdatedEntities"> An array of entity headers that partially updated. </param>
        /// <returns> A new <see cref="Models.EntityMutationResponse"/> instance for mocking. </returns>
        public static EntityMutationResponse EntityMutationResponse(IReadOnlyDictionary<string, string> guidAssignments = null, IReadOnlyDictionary<string, IList<AtlasEntityHeader>> mutatedEntities = null, IEnumerable<AtlasEntityHeader> partialUpdatedEntities = null)
        {
            guidAssignments ??= new Dictionary<string, string>();
            mutatedEntities ??= new Dictionary<string, IList<AtlasEntityHeader>>();
            partialUpdatedEntities ??= new List<AtlasEntityHeader>();

            return new EntityMutationResponse(guidAssignments, mutatedEntities, partialUpdatedEntities?.ToList());
        }

        /// <summary> Initializes a new instance of PList. </summary>
        /// <param name="list"> An array of objects. </param>
        /// <param name="pageSize"> The size of the page. </param>
        /// <param name="sortBy"> The sorted by field. </param>
        /// <param name="sortType"> to specify whether the result should be sorted? If yes, whether asc or desc. </param>
        /// <param name="startIndex"> The start index of the page. </param>
        /// <param name="totalCount"> The total count of items. </param>
        /// <returns> A new <see cref="Models.PList"/> instance for mocking. </returns>
        public static PList PList(IEnumerable<object> list = null, int? pageSize = null, string sortBy = null, SortType? sortType = null, long? startIndex = null, long? totalCount = null)
        {
            list ??= new List<object>();

            return new PList(list?.ToList(), pageSize, sortBy, sortType, startIndex, totalCount);
        }

        /// <summary> Initializes a new instance of ImportCSVOperation. </summary>
        /// <param name="id"> guid string. </param>
        /// <param name="status"> Enum of the status of import csv operation. </param>
        /// <param name="createTime"> The created time of the record. </param>
        /// <param name="lastUpdateTime"> The last updated time of the record. </param>
        /// <param name="errorCode"> Error code from async import job if fail. </param>
        /// <param name="errorMessage"> Error message from async import job if fail. </param>
        /// <param name="importedTerms"> Term numbers that already imported successfully. </param>
        /// <param name="totalTermsDetected"> Total term numbers that detected in csv. </param>
        /// <returns> A new <see cref="Models.ImportCSVOperation"/> instance for mocking. </returns>
        public static ImportCSVOperation ImportCSVOperation(string id = null, ImportCSVOperationStatus? status = null, string createTime = null, string lastUpdateTime = null, int? errorCode = null, string errorMessage = null, string importedTerms = null, string totalTermsDetected = null)
        {
            return new ImportCSVOperation(id, status, createTime, lastUpdateTime, errorCode, errorMessage, importedTerms, totalTermsDetected);
        }

        /// <summary> Initializes a new instance of SearchResult. </summary>
        /// <param name="searchCount"> The total number of search results (not the number of documents in a single page). </param>
        /// <param name="searchFacets"> A facet list that consists of index fields assetType ,classification, classificationCategory, contactId, fileExtension, label, and label. When the facet is specified in the request, the value of the facet is returned as an element of @search.facets. </param>
        /// <param name="value"></param>
        /// <returns> A new <see cref="Models.SearchResult"/> instance for mocking. </returns>
        public static SearchResult SearchResult(int? searchCount = null, SearchFacetResultValue searchFacets = null, IEnumerable<SearchResultValue> value = null)
        {
            value ??= new List<SearchResultValue>();

            return new SearchResult(searchCount, searchFacets, value?.ToList());
        }

        /// <summary> Initializes a new instance of SearchFacetResultValue. </summary>
        /// <param name="assetType"></param>
        /// <param name="classification"></param>
        /// <param name="classificationCategory"></param>
        /// <param name="contactId"></param>
        /// <param name="fileExtension"></param>
        /// <param name="label"></param>
        /// <param name="term"></param>
        /// <returns> A new <see cref="Models.SearchFacetResultValue"/> instance for mocking. </returns>
        public static SearchFacetResultValue SearchFacetResultValue(IEnumerable<SearchFacetItemValue> assetType = null, IEnumerable<SearchFacetItemValue> classification = null, IEnumerable<SearchFacetItemValue> classificationCategory = null, IEnumerable<SearchFacetItemValue> contactId = null, IEnumerable<SearchFacetItemValue> fileExtension = null, IEnumerable<SearchFacetItemValue> label = null, IEnumerable<SearchFacetItemValue> term = null)
        {
            assetType ??= new List<SearchFacetItemValue>();
            classification ??= new List<SearchFacetItemValue>();
            classificationCategory ??= new List<SearchFacetItemValue>();
            contactId ??= new List<SearchFacetItemValue>();
            fileExtension ??= new List<SearchFacetItemValue>();
            label ??= new List<SearchFacetItemValue>();
            term ??= new List<SearchFacetItemValue>();

            return new SearchFacetResultValue(assetType?.ToList(), classification?.ToList(), classificationCategory?.ToList(), contactId?.ToList(), fileExtension?.ToList(), label?.ToList(), term?.ToList());
        }

        /// <summary> Initializes a new instance of SearchFacetItemValue. </summary>
        /// <param name="count"> The count of the facet item. </param>
        /// <param name="value"> The name of the facet item. </param>
        /// <returns> A new <see cref="Models.SearchFacetItemValue"/> instance for mocking. </returns>
        public static SearchFacetItemValue SearchFacetItemValue(int? count = null, string value = null)
        {
            return new SearchFacetItemValue(count, value);
        }

        /// <summary> Initializes a new instance of SearchResultValue. </summary>
        /// <param name="searchScore"> The search score calculated by the search engine. The results are ordered by search score by default. </param>
        /// <param name="searchHighlights"> A highlight list that consists of index fields id ,qualifiedName, name, description, entityType. When the keyword appears in those fields, the value of the field, attached with emphasis mark, is returned as an element of @search.highlights. </param>
        /// <param name="searchText"> The target text that contains the keyword as prefix. The keyword is wrapped with emphasis mark. </param>
        /// <param name="description"> The description of the record. </param>
        /// <param name="id"> The GUID of the record. </param>
        /// <param name="name"> The name of the record. </param>
        /// <param name="owner"> The owner of the record. This is an Atlas native attribute. </param>
        /// <param name="qualifiedName"> The qualified name of the record. </param>
        /// <param name="entityType"> The type name of the record. </param>
        /// <param name="classification"> The classifications of the record. </param>
        /// <param name="label"> The labels of the record. </param>
        /// <param name="term"> The terms assigned to the record. </param>
        /// <param name="contact"> The contacts of the record. </param>
        /// <param name="assetType"> The asset types of the record. </param>
        /// <returns> A new <see cref="Models.SearchResultValue"/> instance for mocking. </returns>
        public static SearchResultValue SearchResultValue(float? searchScore = null, SearchHighlights searchHighlights = null, string searchText = null, string description = null, string id = null, string name = null, string owner = null, string qualifiedName = null, string entityType = null, IEnumerable<string> classification = null, IEnumerable<string> label = null, IEnumerable<TermSearchResultValue> term = null, IEnumerable<ContactSearchResultValue> contact = null, IEnumerable<string> assetType = null)
        {
            classification ??= new List<string>();
            label ??= new List<string>();
            term ??= new List<TermSearchResultValue>();
            contact ??= new List<ContactSearchResultValue>();
            assetType ??= new List<string>();

            return new SearchResultValue(searchScore, searchHighlights, searchText, description, id, name, owner, qualifiedName, entityType, classification?.ToList(), label?.ToList(), term?.ToList(), contact?.ToList(), assetType?.ToList());
        }

        /// <summary> Initializes a new instance of SearchHighlights. </summary>
        /// <param name="id"></param>
        /// <param name="qualifiedName"></param>
        /// <param name="name"></param>
        /// <param name="description"></param>
        /// <param name="entityType"></param>
        /// <returns> A new <see cref="Models.SearchHighlights"/> instance for mocking. </returns>
        public static SearchHighlights SearchHighlights(IEnumerable<string> id = null, IEnumerable<string> qualifiedName = null, IEnumerable<string> name = null, IEnumerable<string> description = null, IEnumerable<string> entityType = null)
        {
            id ??= new List<string>();
            qualifiedName ??= new List<string>();
            name ??= new List<string>();
            description ??= new List<string>();
            entityType ??= new List<string>();

            return new SearchHighlights(id?.ToList(), qualifiedName?.ToList(), name?.ToList(), description?.ToList(), entityType?.ToList());
        }

        /// <summary> Initializes a new instance of TermSearchResultValue. </summary>
        /// <param name="name"> The name of the term. </param>
        /// <param name="glossaryName"> The name of the glossary which contains the term. </param>
        /// <param name="guid"> The GUID of the term. </param>
        /// <returns> A new <see cref="Models.TermSearchResultValue"/> instance for mocking. </returns>
        public static TermSearchResultValue TermSearchResultValue(string name = null, string glossaryName = null, string guid = null)
        {
            return new TermSearchResultValue(name, glossaryName, guid);
        }

        /// <summary> Initializes a new instance of ContactSearchResultValue. </summary>
        /// <param name="id"> The GUID of the contact. </param>
        /// <param name="info"> The description of the contact. </param>
        /// <param name="contactType"> The type of the contact. It can be Expert or Owner for an entity. It can be Expert or Steward for a glossary term. </param>
        /// <returns> A new <see cref="Models.ContactSearchResultValue"/> instance for mocking. </returns>
        public static ContactSearchResultValue ContactSearchResultValue(string id = null, string info = null, string contactType = null)
        {
            return new ContactSearchResultValue(id, info, contactType);
        }

        /// <summary> Initializes a new instance of SuggestResult. </summary>
        /// <param name="value"></param>
        /// <returns> A new <see cref="Models.SuggestResult"/> instance for mocking. </returns>
        public static SuggestResult SuggestResult(IEnumerable<SuggestResultValue> value = null)
        {
            value ??= new List<SuggestResultValue>();

            return new SuggestResult(value?.ToList());
        }

        /// <summary> Initializes a new instance of SuggestResultValue. </summary>
        /// <param name="searchScore"> The search score calculated by the search engine. The results are ordered by search score by default. </param>
        /// <param name="searchText"> The target text that contains the keyword as prefix. The keyword is wrapped with emphasis mark. </param>
        /// <param name="description"> The description of the record. </param>
        /// <param name="id"> The GUID of the record. </param>
        /// <param name="name"> The name of the record. </param>
        /// <param name="owner"> The owner of the record. This is an Atlas native attribute. </param>
        /// <param name="qualifiedName"> The qualified name of the record. </param>
        /// <param name="entityType"> The type name of the record. </param>
        /// <param name="classification"> The classifications of the record. </param>
        /// <param name="label"> The labels of the record. </param>
        /// <param name="term"> The terms assigned to the record. </param>
        /// <param name="contact"> The contacts of the record. </param>
        /// <param name="assetType"> The asset types of the record. </param>
        /// <returns> A new <see cref="Models.SuggestResultValue"/> instance for mocking. </returns>
        public static SuggestResultValue SuggestResultValue(float? searchScore = null, string searchText = null, string description = null, string id = null, string name = null, string owner = null, string qualifiedName = null, string entityType = null, IEnumerable<string> classification = null, IEnumerable<string> label = null, IEnumerable<TermSearchResultValue> term = null, IEnumerable<ContactSearchResultValue> contact = null, IEnumerable<string> assetType = null)
        {
            classification ??= new List<string>();
            label ??= new List<string>();
            term ??= new List<TermSearchResultValue>();
            contact ??= new List<ContactSearchResultValue>();
            assetType ??= new List<string>();

            return new SuggestResultValue(searchScore, searchText, description, id, name, owner, qualifiedName, entityType, classification?.ToList(), label?.ToList(), term?.ToList(), contact?.ToList(), assetType?.ToList());
        }

        /// <summary> Initializes a new instance of BrowseResult. </summary>
        /// <param name="searchCount"> The total number of browse results. </param>
        /// <param name="value"></param>
        /// <returns> A new <see cref="Models.BrowseResult"/> instance for mocking. </returns>
        public static BrowseResult BrowseResult(int? searchCount = null, IEnumerable<BrowseResultValue> value = null)
        {
            value ??= new List<BrowseResultValue>();

            return new BrowseResult(searchCount, value?.ToList());
        }

        /// <summary> Initializes a new instance of BrowseResultValue. </summary>
        /// <param name="entityType"> The type name of the record. </param>
        /// <param name="id"> The GUID of the record. </param>
        /// <param name="isLeaf"> If the record is a leaf entity. </param>
        /// <param name="name"> The name of the record. </param>
        /// <param name="owner"> The owners of the record. </param>
        /// <param name="path"> The path of the record. </param>
        /// <param name="qualifiedName"> The qualified name of the record. </param>
        /// <returns> A new <see cref="Models.BrowseResultValue"/> instance for mocking. </returns>
        public static BrowseResultValue BrowseResultValue(string entityType = null, string id = null, bool? isLeaf = null, string name = null, IEnumerable<BrowseResultOwner> owner = null, string path = null, string qualifiedName = null)
        {
            owner ??= new List<BrowseResultOwner>();

            return new BrowseResultValue(entityType, id, isLeaf, name, owner?.ToList(), path, qualifiedName);
        }

        /// <summary> Initializes a new instance of BrowseResultOwner. </summary>
        /// <param name="id"> The GUID of the owner. </param>
        /// <param name="displayName"> The display name of the owner. </param>
        /// <param name="mail"> The mail of the owner. </param>
        /// <param name="contactType"> The contact type of the owner. The value will be Owner. </param>
        /// <returns> A new <see cref="Models.BrowseResultOwner"/> instance for mocking. </returns>
        public static BrowseResultOwner BrowseResultOwner(string id = null, string displayName = null, string mail = null, string contactType = null)
        {
            return new BrowseResultOwner(id, displayName, mail, contactType);
        }

        /// <summary> Initializes a new instance of AutoCompleteResult. </summary>
        /// <param name="value"></param>
        /// <returns> A new <see cref="Models.AutoCompleteResult"/> instance for mocking. </returns>
        public static AutoCompleteResult AutoCompleteResult(IEnumerable<AutoCompleteResultValue> value = null)
        {
            value ??= new List<AutoCompleteResultValue>();

            return new AutoCompleteResult(value?.ToList());
        }

        /// <summary> Initializes a new instance of AutoCompleteResultValue. </summary>
        /// <param name="text"> The completed term or phrase. </param>
        /// <param name="queryPlusText"> The completed search query text. </param>
        /// <returns> A new <see cref="Models.AutoCompleteResultValue"/> instance for mocking. </returns>
        public static AutoCompleteResultValue AutoCompleteResultValue(string text = null, string queryPlusText = null)
        {
            return new AutoCompleteResultValue(text, queryPlusText);
        }

        /// <summary> Initializes a new instance of AtlasLineageInfo. </summary>
        /// <param name="baseEntityGuid"> The GUID of the base entity. </param>
        /// <param name="guidEntityMap"> The GUID entity map. </param>
        /// <param name="widthCounts"> The entity count in specific direction. </param>
        /// <param name="lineageDepth"> The depth of lineage. </param>
        /// <param name="lineageWidth"> The width of lineage. </param>
        /// <param name="includeParent"> True to return the parent of the base entity. </param>
        /// <param name="childrenCount"> The number of children node. </param>
        /// <param name="lineageDirection"> The enum of lineage direction. </param>
        /// <param name="parentRelations"> An array of parentRelations relations. </param>
        /// <param name="relations"> An array of lineage relations. </param>
        /// <returns> A new <see cref="Models.AtlasLineageInfo"/> instance for mocking. </returns>
        public static AtlasLineageInfo AtlasLineageInfo(string baseEntityGuid = null, IReadOnlyDictionary<string, AtlasEntityHeader> guidEntityMap = null, IReadOnlyDictionary<string, IDictionary<string, object>> widthCounts = null, int? lineageDepth = null, int? lineageWidth = null, bool? includeParent = null, int? childrenCount = null, LineageDirection? lineageDirection = null, IEnumerable<ParentRelation> parentRelations = null, IEnumerable<LineageRelation> relations = null)
        {
            guidEntityMap ??= new Dictionary<string, AtlasEntityHeader>();
            widthCounts ??= new Dictionary<string, IDictionary<string, object>>();
            parentRelations ??= new List<ParentRelation>();
            relations ??= new List<LineageRelation>();

            return new AtlasLineageInfo(baseEntityGuid, guidEntityMap, widthCounts, lineageDepth, lineageWidth, includeParent, childrenCount, lineageDirection, parentRelations?.ToList(), relations?.ToList());
        }

        /// <summary> Initializes a new instance of ParentRelation. </summary>
        /// <param name="childEntityId"> The GUID of child entity. </param>
        /// <param name="relationshipId"> The GUID of relationship. </param>
        /// <param name="parentEntityId"> The GUID of parent entity. </param>
        /// <returns> A new <see cref="Models.ParentRelation"/> instance for mocking. </returns>
        public static ParentRelation ParentRelation(string childEntityId = null, string relationshipId = null, string parentEntityId = null)
        {
            return new ParentRelation(childEntityId, relationshipId, parentEntityId);
        }

        /// <summary> Initializes a new instance of LineageRelation. </summary>
        /// <param name="fromEntityId"> The GUID of from-entity. </param>
        /// <param name="relationshipId"> The GUID of relationship. </param>
        /// <param name="toEntityId"> The GUID of to-entity. </param>
        /// <returns> A new <see cref="Models.LineageRelation"/> instance for mocking. </returns>
        public static LineageRelation LineageRelation(string fromEntityId = null, string relationshipId = null, string toEntityId = null)
        {
            return new LineageRelation(fromEntityId, relationshipId, toEntityId);
        }

        /// <summary> Initializes a new instance of AtlasRelationshipWithExtInfo. </summary>
        /// <param name="referredEntities"> The referred entity header. </param>
        /// <param name="relationship"> Atlas relationship instance. </param>
        /// <returns> A new <see cref="Models.AtlasRelationshipWithExtInfo"/> instance for mocking. </returns>
        public static AtlasRelationshipWithExtInfo AtlasRelationshipWithExtInfo(IReadOnlyDictionary<string, AtlasEntityHeader> referredEntities = null, AtlasRelationship relationship = null)
        {
            referredEntities ??= new Dictionary<string, AtlasEntityHeader>();

            return new AtlasRelationshipWithExtInfo(referredEntities, relationship);
        }

        /// <summary> Initializes a new instance of AtlasTypeDefHeader. </summary>
        /// <param name="category"> The enum of type category. </param>
        /// <param name="guid"> The GUID of the type definition. </param>
        /// <param name="name"> The name of the type definition. </param>
        /// <returns> A new <see cref="Models.AtlasTypeDefHeader"/> instance for mocking. </returns>
        public static AtlasTypeDefHeader AtlasTypeDefHeader(TypeCategory? category = null, string guid = null, string name = null)
        {
            return new AtlasTypeDefHeader(category, guid, name);
        }
    }
}
