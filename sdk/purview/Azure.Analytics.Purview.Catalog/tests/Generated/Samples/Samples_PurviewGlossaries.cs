// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Analytics.Purview.Catalog.Samples
{
    internal class Samples_PurviewGlossaries
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetGlossaries()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = client.GetGlossaries();

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetGlossaries_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = client.GetGlossaries(1234, 1234, "<sort>", true);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("language").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("usage").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result[0].GetProperty("longDescription").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
            Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
            Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result[0].GetProperty("guid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetGlossaries_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = await client.GetGlossariesAsync();

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetGlossaries_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = await client.GetGlossariesAsync(1234, 1234, "<sort>", true);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("language").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("usage").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result[0].GetProperty("longDescription").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
            Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
            Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result[0].GetProperty("guid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateGlossary()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            var data = new { };

            Response response = client.CreateGlossary(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateGlossary_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            var data = new
            {
                categoryInfo = new
                {
                    key = new
                    {
                        anchor = new
                        {
                            displayText = "<displayText>",
                            glossaryGuid = "<glossaryGuid>",
                            relationGuid = "<relationGuid>",
                        },
                        childrenCategories = new[] {
                new {
                    categoryGuid = "<categoryGuid>",
                    description = "<description>",
                    displayText = "<displayText>",
                    parentCategoryGuid = "<parentCategoryGuid>",
                    relationGuid = "<relationGuid>",
                }
            },
                        parentCategory = new
                        {
                            categoryGuid = "<categoryGuid>",
                            description = "<description>",
                            displayText = "<displayText>",
                            parentCategoryGuid = "<parentCategoryGuid>",
                            relationGuid = "<relationGuid>",
                        },
                        terms = new[] {
                new {
                    description = "<description>",
                    displayText = "<displayText>",
                    expression = "<expression>",
                    relationGuid = "<relationGuid>",
                    source = "<source>",
                    status = "DRAFT",
                    steward = "<steward>",
                    termGuid = "<termGuid>",
                }
            },
                        classifications = new[] {
                new {
                    entityGuid = "<entityGuid>",
                    entityStatus = "ACTIVE",
                    removePropagationsOnEntityDelete = true,
                    validityPeriods = new[] {
                        new {
                            endTime = "<endTime>",
                            startTime = "<startTime>",
                            timeZone = "<timeZone>",
                        }
                    },
                    source = "<source>",
                    sourceDetails = new {
                        key = new {},
                    },
                    attributes = new {
                        key = new {},
                    },
                    typeName = "<typeName>",
                    lastModifiedTS = "<lastModifiedTS>",
                }
            },
                        longDescription = "<longDescription>",
                        name = "<name>",
                        qualifiedName = "<qualifiedName>",
                        shortDescription = "<shortDescription>",
                        lastModifiedTS = "<lastModifiedTS>",
                        guid = "<guid>",
                    },
                },
                termInfo = new
                {
                    key = new
                    {
                        abbreviation = "<abbreviation>",
                        templateName = new[] {
                new {}
            },
                        createTime = 123.45f,
                        createdBy = "<createdBy>",
                        updateTime = 123.45f,
                        updatedBy = "<updatedBy>",
                        status = "Draft",
                        resources = new[] {
                new {
                    displayName = "<displayName>",
                    url = "<url>",
                }
            },
                        contacts = new
                        {
                            key = new[] {
                    new {
                        id = "<id>",
                        info = "<info>",
                    }
                },
                        },
                        attributes = new
                        {
                            key = new
                            {
                                key = new { },
                            },
                        },
                        assignedEntities = new[] {
                new {
                    displayText = "<displayText>",
                    entityStatus = "ACTIVE",
                    relationshipType = "<relationshipType>",
                    relationshipAttributes = new {
                        entityGuid = "<entityGuid>",
                        entityStatus = "ACTIVE",
                        removePropagationsOnEntityDelete = true,
                        source = "<source>",
                        sourceDetails = new {
                            key = new {},
                        },
                        attributes = new {
                            key = new {},
                        },
                        typeName = "<typeName>",
                        lastModifiedTS = "<lastModifiedTS>",
                    },
                    relationshipGuid = "<relationshipGuid>",
                    relationshipStatus = "ACTIVE",
                    guid = "<guid>",
                    typeName = "<typeName>",
                    uniqueAttributes = new {
                        key = new {},
                    },
                }
            },
                        categories = new[] {
                new {
                    categoryGuid = "<categoryGuid>",
                    description = "<description>",
                    displayText = "<displayText>",
                    relationGuid = "<relationGuid>",
                    status = "DRAFT",
                }
            },
                        examples = new[] {
                "<String>"
            },
                        usage = "<usage>",
                        longDescription = "<longDescription>",
                        name = "<name>",
                        qualifiedName = "<qualifiedName>",
                        shortDescription = "<shortDescription>",
                        lastModifiedTS = "<lastModifiedTS>",
                        guid = "<guid>",
                    },
                },
                categories = new[] {
        new {
            categoryGuid = "<categoryGuid>",
            description = "<description>",
            displayText = "<displayText>",
            parentCategoryGuid = "<parentCategoryGuid>",
            relationGuid = "<relationGuid>",
        }
    },
                language = "<language>",
                terms = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
                usage = "<usage>",
                classifications = new[] {
        new {
            entityGuid = "<entityGuid>",
            entityStatus = "ACTIVE",
            removePropagationsOnEntityDelete = true,
            source = "<source>",
            sourceDetails = new {
                key = new {},
            },
            attributes = new {
                key = new {},
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        }
    },
                longDescription = "<longDescription>",
                name = "<name>",
                qualifiedName = "<qualifiedName>",
                shortDescription = "<shortDescription>",
                lastModifiedTS = "<lastModifiedTS>",
                guid = "<guid>",
            };

            Response response = client.CreateGlossary(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("language").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("usage").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("longDescription").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("qualifiedName").ToString());
            Console.WriteLine(result.GetProperty("shortDescription").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("guid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateGlossary_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            var data = new { };

            Response response = await client.CreateGlossaryAsync(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateGlossary_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            var data = new
            {
                categoryInfo = new
                {
                    key = new
                    {
                        anchor = new
                        {
                            displayText = "<displayText>",
                            glossaryGuid = "<glossaryGuid>",
                            relationGuid = "<relationGuid>",
                        },
                        childrenCategories = new[] {
                new {
                    categoryGuid = "<categoryGuid>",
                    description = "<description>",
                    displayText = "<displayText>",
                    parentCategoryGuid = "<parentCategoryGuid>",
                    relationGuid = "<relationGuid>",
                }
            },
                        parentCategory = new
                        {
                            categoryGuid = "<categoryGuid>",
                            description = "<description>",
                            displayText = "<displayText>",
                            parentCategoryGuid = "<parentCategoryGuid>",
                            relationGuid = "<relationGuid>",
                        },
                        terms = new[] {
                new {
                    description = "<description>",
                    displayText = "<displayText>",
                    expression = "<expression>",
                    relationGuid = "<relationGuid>",
                    source = "<source>",
                    status = "DRAFT",
                    steward = "<steward>",
                    termGuid = "<termGuid>",
                }
            },
                        classifications = new[] {
                new {
                    entityGuid = "<entityGuid>",
                    entityStatus = "ACTIVE",
                    removePropagationsOnEntityDelete = true,
                    validityPeriods = new[] {
                        new {
                            endTime = "<endTime>",
                            startTime = "<startTime>",
                            timeZone = "<timeZone>",
                        }
                    },
                    source = "<source>",
                    sourceDetails = new {
                        key = new {},
                    },
                    attributes = new {
                        key = new {},
                    },
                    typeName = "<typeName>",
                    lastModifiedTS = "<lastModifiedTS>",
                }
            },
                        longDescription = "<longDescription>",
                        name = "<name>",
                        qualifiedName = "<qualifiedName>",
                        shortDescription = "<shortDescription>",
                        lastModifiedTS = "<lastModifiedTS>",
                        guid = "<guid>",
                    },
                },
                termInfo = new
                {
                    key = new
                    {
                        abbreviation = "<abbreviation>",
                        templateName = new[] {
                new {}
            },
                        createTime = 123.45f,
                        createdBy = "<createdBy>",
                        updateTime = 123.45f,
                        updatedBy = "<updatedBy>",
                        status = "Draft",
                        resources = new[] {
                new {
                    displayName = "<displayName>",
                    url = "<url>",
                }
            },
                        contacts = new
                        {
                            key = new[] {
                    new {
                        id = "<id>",
                        info = "<info>",
                    }
                },
                        },
                        attributes = new
                        {
                            key = new
                            {
                                key = new { },
                            },
                        },
                        assignedEntities = new[] {
                new {
                    displayText = "<displayText>",
                    entityStatus = "ACTIVE",
                    relationshipType = "<relationshipType>",
                    relationshipAttributes = new {
                        entityGuid = "<entityGuid>",
                        entityStatus = "ACTIVE",
                        removePropagationsOnEntityDelete = true,
                        source = "<source>",
                        sourceDetails = new {
                            key = new {},
                        },
                        attributes = new {
                            key = new {},
                        },
                        typeName = "<typeName>",
                        lastModifiedTS = "<lastModifiedTS>",
                    },
                    relationshipGuid = "<relationshipGuid>",
                    relationshipStatus = "ACTIVE",
                    guid = "<guid>",
                    typeName = "<typeName>",
                    uniqueAttributes = new {
                        key = new {},
                    },
                }
            },
                        categories = new[] {
                new {
                    categoryGuid = "<categoryGuid>",
                    description = "<description>",
                    displayText = "<displayText>",
                    relationGuid = "<relationGuid>",
                    status = "DRAFT",
                }
            },
                        examples = new[] {
                "<String>"
            },
                        usage = "<usage>",
                        longDescription = "<longDescription>",
                        name = "<name>",
                        qualifiedName = "<qualifiedName>",
                        shortDescription = "<shortDescription>",
                        lastModifiedTS = "<lastModifiedTS>",
                        guid = "<guid>",
                    },
                },
                categories = new[] {
        new {
            categoryGuid = "<categoryGuid>",
            description = "<description>",
            displayText = "<displayText>",
            parentCategoryGuid = "<parentCategoryGuid>",
            relationGuid = "<relationGuid>",
        }
    },
                language = "<language>",
                terms = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
                usage = "<usage>",
                classifications = new[] {
        new {
            entityGuid = "<entityGuid>",
            entityStatus = "ACTIVE",
            removePropagationsOnEntityDelete = true,
            source = "<source>",
            sourceDetails = new {
                key = new {},
            },
            attributes = new {
                key = new {},
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        }
    },
                longDescription = "<longDescription>",
                name = "<name>",
                qualifiedName = "<qualifiedName>",
                shortDescription = "<shortDescription>",
                lastModifiedTS = "<lastModifiedTS>",
                guid = "<guid>",
            };

            Response response = await client.CreateGlossaryAsync(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("language").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("usage").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("longDescription").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("qualifiedName").ToString());
            Console.WriteLine(result.GetProperty("shortDescription").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("guid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateGlossaryCategories()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            var data = new[] {
    new {}
};

            Response response = client.CreateGlossaryCategories(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateGlossaryCategories_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            var data = new[] {
    new {
        anchor = new {
            displayText = "<displayText>",
            glossaryGuid = "<glossaryGuid>",
            relationGuid = "<relationGuid>",
        },
        childrenCategories = new[] {
            new {
                categoryGuid = "<categoryGuid>",
                description = "<description>",
                displayText = "<displayText>",
                parentCategoryGuid = "<parentCategoryGuid>",
                relationGuid = "<relationGuid>",
            }
        },
        parentCategory = new {
            categoryGuid = "<categoryGuid>",
            description = "<description>",
            displayText = "<displayText>",
            parentCategoryGuid = "<parentCategoryGuid>",
            relationGuid = "<relationGuid>",
        },
        terms = new[] {
            new {
                description = "<description>",
                displayText = "<displayText>",
                expression = "<expression>",
                relationGuid = "<relationGuid>",
                source = "<source>",
                status = "DRAFT",
                steward = "<steward>",
                termGuid = "<termGuid>",
            }
        },
        classifications = new[] {
            new {
                entityGuid = "<entityGuid>",
                entityStatus = "ACTIVE",
                removePropagationsOnEntityDelete = true,
                validityPeriods = new[] {
                    new {
                        endTime = "<endTime>",
                        startTime = "<startTime>",
                        timeZone = "<timeZone>",
                    }
                },
                source = "<source>",
                sourceDetails = new {
                    key = new {},
                },
                attributes = new {
                    key = new {},
                },
                typeName = "<typeName>",
                lastModifiedTS = "<lastModifiedTS>",
            }
        },
        longDescription = "<longDescription>",
        name = "<name>",
        qualifiedName = "<qualifiedName>",
        shortDescription = "<shortDescription>",
        lastModifiedTS = "<lastModifiedTS>",
        guid = "<guid>",
    }
};

            Response response = client.CreateGlossaryCategories(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("anchor").GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("anchor").GetProperty("glossaryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("anchor").GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result[0].GetProperty("longDescription").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
            Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
            Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result[0].GetProperty("guid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateGlossaryCategories_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            var data = new[] {
    new {}
};

            Response response = await client.CreateGlossaryCategoriesAsync(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateGlossaryCategories_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            var data = new[] {
    new {
        anchor = new {
            displayText = "<displayText>",
            glossaryGuid = "<glossaryGuid>",
            relationGuid = "<relationGuid>",
        },
        childrenCategories = new[] {
            new {
                categoryGuid = "<categoryGuid>",
                description = "<description>",
                displayText = "<displayText>",
                parentCategoryGuid = "<parentCategoryGuid>",
                relationGuid = "<relationGuid>",
            }
        },
        parentCategory = new {
            categoryGuid = "<categoryGuid>",
            description = "<description>",
            displayText = "<displayText>",
            parentCategoryGuid = "<parentCategoryGuid>",
            relationGuid = "<relationGuid>",
        },
        terms = new[] {
            new {
                description = "<description>",
                displayText = "<displayText>",
                expression = "<expression>",
                relationGuid = "<relationGuid>",
                source = "<source>",
                status = "DRAFT",
                steward = "<steward>",
                termGuid = "<termGuid>",
            }
        },
        classifications = new[] {
            new {
                entityGuid = "<entityGuid>",
                entityStatus = "ACTIVE",
                removePropagationsOnEntityDelete = true,
                validityPeriods = new[] {
                    new {
                        endTime = "<endTime>",
                        startTime = "<startTime>",
                        timeZone = "<timeZone>",
                    }
                },
                source = "<source>",
                sourceDetails = new {
                    key = new {},
                },
                attributes = new {
                    key = new {},
                },
                typeName = "<typeName>",
                lastModifiedTS = "<lastModifiedTS>",
            }
        },
        longDescription = "<longDescription>",
        name = "<name>",
        qualifiedName = "<qualifiedName>",
        shortDescription = "<shortDescription>",
        lastModifiedTS = "<lastModifiedTS>",
        guid = "<guid>",
    }
};

            Response response = await client.CreateGlossaryCategoriesAsync(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("anchor").GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("anchor").GetProperty("glossaryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("anchor").GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result[0].GetProperty("longDescription").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
            Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
            Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result[0].GetProperty("guid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateGlossaryCategory()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            var data = new { };

            Response response = client.CreateGlossaryCategory(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateGlossaryCategory_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            var data = new
            {
                anchor = new
                {
                    displayText = "<displayText>",
                    glossaryGuid = "<glossaryGuid>",
                    relationGuid = "<relationGuid>",
                },
                childrenCategories = new[] {
        new {
            categoryGuid = "<categoryGuid>",
            description = "<description>",
            displayText = "<displayText>",
            parentCategoryGuid = "<parentCategoryGuid>",
            relationGuid = "<relationGuid>",
        }
    },
                parentCategory = new
                {
                    categoryGuid = "<categoryGuid>",
                    description = "<description>",
                    displayText = "<displayText>",
                    parentCategoryGuid = "<parentCategoryGuid>",
                    relationGuid = "<relationGuid>",
                },
                terms = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
                classifications = new[] {
        new {
            entityGuid = "<entityGuid>",
            entityStatus = "ACTIVE",
            removePropagationsOnEntityDelete = true,
            validityPeriods = new[] {
                new {
                    endTime = "<endTime>",
                    startTime = "<startTime>",
                    timeZone = "<timeZone>",
                }
            },
            source = "<source>",
            sourceDetails = new {
                key = new {},
            },
            attributes = new {
                key = new {},
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        }
    },
                longDescription = "<longDescription>",
                name = "<name>",
                qualifiedName = "<qualifiedName>",
                shortDescription = "<shortDescription>",
                lastModifiedTS = "<lastModifiedTS>",
                guid = "<guid>",
            };

            Response response = client.CreateGlossaryCategory(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("longDescription").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("qualifiedName").ToString());
            Console.WriteLine(result.GetProperty("shortDescription").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("guid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateGlossaryCategory_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            var data = new { };

            Response response = await client.CreateGlossaryCategoryAsync(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateGlossaryCategory_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            var data = new
            {
                anchor = new
                {
                    displayText = "<displayText>",
                    glossaryGuid = "<glossaryGuid>",
                    relationGuid = "<relationGuid>",
                },
                childrenCategories = new[] {
        new {
            categoryGuid = "<categoryGuid>",
            description = "<description>",
            displayText = "<displayText>",
            parentCategoryGuid = "<parentCategoryGuid>",
            relationGuid = "<relationGuid>",
        }
    },
                parentCategory = new
                {
                    categoryGuid = "<categoryGuid>",
                    description = "<description>",
                    displayText = "<displayText>",
                    parentCategoryGuid = "<parentCategoryGuid>",
                    relationGuid = "<relationGuid>",
                },
                terms = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
                classifications = new[] {
        new {
            entityGuid = "<entityGuid>",
            entityStatus = "ACTIVE",
            removePropagationsOnEntityDelete = true,
            validityPeriods = new[] {
                new {
                    endTime = "<endTime>",
                    startTime = "<startTime>",
                    timeZone = "<timeZone>",
                }
            },
            source = "<source>",
            sourceDetails = new {
                key = new {},
            },
            attributes = new {
                key = new {},
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        }
    },
                longDescription = "<longDescription>",
                name = "<name>",
                qualifiedName = "<qualifiedName>",
                shortDescription = "<shortDescription>",
                lastModifiedTS = "<lastModifiedTS>",
                guid = "<guid>",
            };

            Response response = await client.CreateGlossaryCategoryAsync(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("longDescription").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("qualifiedName").ToString());
            Console.WriteLine(result.GetProperty("shortDescription").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("guid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetGlossaryCategory()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = client.GetGlossaryCategory("<categoryGuid>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetGlossaryCategory_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = client.GetGlossaryCategory("<categoryGuid>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("longDescription").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("qualifiedName").ToString());
            Console.WriteLine(result.GetProperty("shortDescription").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("guid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetGlossaryCategory_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = await client.GetGlossaryCategoryAsync("<categoryGuid>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetGlossaryCategory_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = await client.GetGlossaryCategoryAsync("<categoryGuid>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("longDescription").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("qualifiedName").ToString());
            Console.WriteLine(result.GetProperty("shortDescription").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("guid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UpdateGlossaryCategory()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            var data = new { };

            Response response = client.UpdateGlossaryCategory("<categoryGuid>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UpdateGlossaryCategory_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            var data = new
            {
                anchor = new
                {
                    displayText = "<displayText>",
                    glossaryGuid = "<glossaryGuid>",
                    relationGuid = "<relationGuid>",
                },
                childrenCategories = new[] {
        new {
            categoryGuid = "<categoryGuid>",
            description = "<description>",
            displayText = "<displayText>",
            parentCategoryGuid = "<parentCategoryGuid>",
            relationGuid = "<relationGuid>",
        }
    },
                parentCategory = new
                {
                    categoryGuid = "<categoryGuid>",
                    description = "<description>",
                    displayText = "<displayText>",
                    parentCategoryGuid = "<parentCategoryGuid>",
                    relationGuid = "<relationGuid>",
                },
                terms = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
                classifications = new[] {
        new {
            entityGuid = "<entityGuid>",
            entityStatus = "ACTIVE",
            removePropagationsOnEntityDelete = true,
            validityPeriods = new[] {
                new {
                    endTime = "<endTime>",
                    startTime = "<startTime>",
                    timeZone = "<timeZone>",
                }
            },
            source = "<source>",
            sourceDetails = new {
                key = new {},
            },
            attributes = new {
                key = new {},
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        }
    },
                longDescription = "<longDescription>",
                name = "<name>",
                qualifiedName = "<qualifiedName>",
                shortDescription = "<shortDescription>",
                lastModifiedTS = "<lastModifiedTS>",
                guid = "<guid>",
            };

            Response response = client.UpdateGlossaryCategory("<categoryGuid>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("longDescription").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("qualifiedName").ToString());
            Console.WriteLine(result.GetProperty("shortDescription").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("guid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UpdateGlossaryCategory_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            var data = new { };

            Response response = await client.UpdateGlossaryCategoryAsync("<categoryGuid>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UpdateGlossaryCategory_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            var data = new
            {
                anchor = new
                {
                    displayText = "<displayText>",
                    glossaryGuid = "<glossaryGuid>",
                    relationGuid = "<relationGuid>",
                },
                childrenCategories = new[] {
        new {
            categoryGuid = "<categoryGuid>",
            description = "<description>",
            displayText = "<displayText>",
            parentCategoryGuid = "<parentCategoryGuid>",
            relationGuid = "<relationGuid>",
        }
    },
                parentCategory = new
                {
                    categoryGuid = "<categoryGuid>",
                    description = "<description>",
                    displayText = "<displayText>",
                    parentCategoryGuid = "<parentCategoryGuid>",
                    relationGuid = "<relationGuid>",
                },
                terms = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
                classifications = new[] {
        new {
            entityGuid = "<entityGuid>",
            entityStatus = "ACTIVE",
            removePropagationsOnEntityDelete = true,
            validityPeriods = new[] {
                new {
                    endTime = "<endTime>",
                    startTime = "<startTime>",
                    timeZone = "<timeZone>",
                }
            },
            source = "<source>",
            sourceDetails = new {
                key = new {},
            },
            attributes = new {
                key = new {},
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        }
    },
                longDescription = "<longDescription>",
                name = "<name>",
                qualifiedName = "<qualifiedName>",
                shortDescription = "<shortDescription>",
                lastModifiedTS = "<lastModifiedTS>",
                guid = "<guid>",
            };

            Response response = await client.UpdateGlossaryCategoryAsync("<categoryGuid>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("longDescription").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("qualifiedName").ToString());
            Console.WriteLine(result.GetProperty("shortDescription").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("guid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteGlossaryCategory()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = client.DeleteGlossaryCategory("<categoryGuid>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteGlossaryCategory_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = client.DeleteGlossaryCategory("<categoryGuid>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteGlossaryCategory_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = await client.DeleteGlossaryCategoryAsync("<categoryGuid>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteGlossaryCategory_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = await client.DeleteGlossaryCategoryAsync("<categoryGuid>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PartialUpdateGlossaryCategory()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            var data = new
            {
                key = "<String>",
            };

            Response response = client.PartialUpdateGlossaryCategory("<categoryGuid>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PartialUpdateGlossaryCategory_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            var data = new
            {
                key = "<String>",
            };

            Response response = client.PartialUpdateGlossaryCategory("<categoryGuid>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("longDescription").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("qualifiedName").ToString());
            Console.WriteLine(result.GetProperty("shortDescription").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("guid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PartialUpdateGlossaryCategory_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            var data = new
            {
                key = "<String>",
            };

            Response response = await client.PartialUpdateGlossaryCategoryAsync("<categoryGuid>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PartialUpdateGlossaryCategory_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            var data = new
            {
                key = "<String>",
            };

            Response response = await client.PartialUpdateGlossaryCategoryAsync("<categoryGuid>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result.GetProperty("parentCategory").GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("longDescription").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("qualifiedName").ToString());
            Console.WriteLine(result.GetProperty("shortDescription").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("guid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetRelatedCategories()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = client.GetRelatedCategories("<categoryGuid>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("<test>")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetRelatedCategories_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = client.GetRelatedCategories("<categoryGuid>", 1234, 1234, "<sort>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("relationGuid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetRelatedCategories_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = await client.GetRelatedCategoriesAsync("<categoryGuid>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("<test>")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetRelatedCategories_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = await client.GetRelatedCategoriesAsync("<categoryGuid>", 1234, 1234, "<sort>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("relationGuid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetCategoryTerms()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = client.GetCategoryTerms("<categoryGuid>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetCategoryTerms_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = client.GetCategoryTerms("<categoryGuid>", 1234, 1234, "<sort>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("termGuid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetCategoryTerms_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = await client.GetCategoryTermsAsync("<categoryGuid>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetCategoryTerms_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = await client.GetCategoryTermsAsync("<categoryGuid>", 1234, 1234, "<sort>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("termGuid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateGlossaryTerm()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            var data = new { };

            Response response = client.CreateGlossaryTerm(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateGlossaryTerm_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            var data = new
            {
                abbreviation = "<abbreviation>",
                templateName = new[] {
        new {}
    },
                anchor = new
                {
                    displayText = "<displayText>",
                    glossaryGuid = "<glossaryGuid>",
                    relationGuid = "<relationGuid>",
                },
                antonyms = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
                createTime = 123.45f,
                createdBy = "<createdBy>",
                updateTime = 123.45f,
                updatedBy = "<updatedBy>",
                status = "Draft",
                resources = new[] {
        new {
            displayName = "<displayName>",
            url = "<url>",
        }
    },
                contacts = new
                {
                    key = new[] {
            new {
                id = "<id>",
                info = "<info>",
            }
        },
                },
                attributes = new
                {
                    key = new
                    {
                        key = new { },
                    },
                },
                assignedEntities = new[] {
        new {
            displayText = "<displayText>",
            entityStatus = "ACTIVE",
            relationshipType = "<relationshipType>",
            relationshipAttributes = new {
                entityGuid = "<entityGuid>",
                entityStatus = "ACTIVE",
                removePropagationsOnEntityDelete = true,
                validityPeriods = new[] {
                    new {
                        endTime = "<endTime>",
                        startTime = "<startTime>",
                        timeZone = "<timeZone>",
                    }
                },
                source = "<source>",
                sourceDetails = new {
                    key = new {},
                },
                attributes = new {
                    key = new {},
                },
                typeName = "<typeName>",
                lastModifiedTS = "<lastModifiedTS>",
            },
            relationshipGuid = "<relationshipGuid>",
            relationshipStatus = "ACTIVE",
            guid = "<guid>",
            typeName = "<typeName>",
            uniqueAttributes = new {
                key = new {},
            },
        }
    },
                categories = new[] {
        new {
            categoryGuid = "<categoryGuid>",
            description = "<description>",
            displayText = "<displayText>",
            relationGuid = "<relationGuid>",
            status = "DRAFT",
        }
    },
                classifies = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
                examples = new[] {
        "<String>"
    },
                isA = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
                preferredTerms = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
                preferredToTerms = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
                replacedBy = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
                replacementTerms = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
                seeAlso = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
                synonyms = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
                translatedTerms = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
                translationTerms = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
                usage = "<usage>",
                validValues = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
                validValuesFor = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
                classifications = new[] {
        new {
            entityGuid = "<entityGuid>",
            entityStatus = "ACTIVE",
            removePropagationsOnEntityDelete = true,
            source = "<source>",
            sourceDetails = new {
                key = new {},
            },
            attributes = new {
                key = new {},
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        }
    },
                longDescription = "<longDescription>",
                name = "<name>",
                qualifiedName = "<qualifiedName>",
                shortDescription = "<shortDescription>",
                lastModifiedTS = "<lastModifiedTS>",
                guid = "<guid>",
            };

            Response response = client.CreateGlossaryTerm(RequestContent.Create(data), true);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("abbreviation").ToString());
            Console.WriteLine(result.GetProperty("templateName")[0].ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("resources")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("resources")[0].GetProperty("url").ToString());
            Console.WriteLine(result.GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
            Console.WriteLine(result.GetProperty("attributes").GetProperty("<test>").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("examples")[0].ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("usage").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("longDescription").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("qualifiedName").ToString());
            Console.WriteLine(result.GetProperty("shortDescription").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("guid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateGlossaryTerm_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            var data = new { };

            Response response = await client.CreateGlossaryTermAsync(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateGlossaryTerm_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            var data = new
            {
                abbreviation = "<abbreviation>",
                templateName = new[] {
        new {}
    },
                anchor = new
                {
                    displayText = "<displayText>",
                    glossaryGuid = "<glossaryGuid>",
                    relationGuid = "<relationGuid>",
                },
                antonyms = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
                createTime = 123.45f,
                createdBy = "<createdBy>",
                updateTime = 123.45f,
                updatedBy = "<updatedBy>",
                status = "Draft",
                resources = new[] {
        new {
            displayName = "<displayName>",
            url = "<url>",
        }
    },
                contacts = new
                {
                    key = new[] {
            new {
                id = "<id>",
                info = "<info>",
            }
        },
                },
                attributes = new
                {
                    key = new
                    {
                        key = new { },
                    },
                },
                assignedEntities = new[] {
        new {
            displayText = "<displayText>",
            entityStatus = "ACTIVE",
            relationshipType = "<relationshipType>",
            relationshipAttributes = new {
                entityGuid = "<entityGuid>",
                entityStatus = "ACTIVE",
                removePropagationsOnEntityDelete = true,
                validityPeriods = new[] {
                    new {
                        endTime = "<endTime>",
                        startTime = "<startTime>",
                        timeZone = "<timeZone>",
                    }
                },
                source = "<source>",
                sourceDetails = new {
                    key = new {},
                },
                attributes = new {
                    key = new {},
                },
                typeName = "<typeName>",
                lastModifiedTS = "<lastModifiedTS>",
            },
            relationshipGuid = "<relationshipGuid>",
            relationshipStatus = "ACTIVE",
            guid = "<guid>",
            typeName = "<typeName>",
            uniqueAttributes = new {
                key = new {},
            },
        }
    },
                categories = new[] {
        new {
            categoryGuid = "<categoryGuid>",
            description = "<description>",
            displayText = "<displayText>",
            relationGuid = "<relationGuid>",
            status = "DRAFT",
        }
    },
                classifies = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
                examples = new[] {
        "<String>"
    },
                isA = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
                preferredTerms = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
                preferredToTerms = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
                replacedBy = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
                replacementTerms = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
                seeAlso = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
                synonyms = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
                translatedTerms = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
                translationTerms = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
                usage = "<usage>",
                validValues = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
                validValuesFor = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
                classifications = new[] {
        new {
            entityGuid = "<entityGuid>",
            entityStatus = "ACTIVE",
            removePropagationsOnEntityDelete = true,
            source = "<source>",
            sourceDetails = new {
                key = new {},
            },
            attributes = new {
                key = new {},
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        }
    },
                longDescription = "<longDescription>",
                name = "<name>",
                qualifiedName = "<qualifiedName>",
                shortDescription = "<shortDescription>",
                lastModifiedTS = "<lastModifiedTS>",
                guid = "<guid>",
            };

            Response response = await client.CreateGlossaryTermAsync(RequestContent.Create(data), true);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("abbreviation").ToString());
            Console.WriteLine(result.GetProperty("templateName")[0].ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("resources")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("resources")[0].GetProperty("url").ToString());
            Console.WriteLine(result.GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
            Console.WriteLine(result.GetProperty("attributes").GetProperty("<test>").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("examples")[0].ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("usage").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("longDescription").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("qualifiedName").ToString());
            Console.WriteLine(result.GetProperty("shortDescription").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("guid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetGlossaryTerm()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = client.GetGlossaryTerm("<termGuid>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetGlossaryTerm_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = client.GetGlossaryTerm("<termGuid>", true, new string[] { "<excludeRelationshipTypeList>" });

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("abbreviation").ToString());
            Console.WriteLine(result.GetProperty("templateName")[0].ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("resources")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("resources")[0].GetProperty("url").ToString());
            Console.WriteLine(result.GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
            Console.WriteLine(result.GetProperty("attributes").GetProperty("<test>").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("examples")[0].ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("usage").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("longDescription").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("qualifiedName").ToString());
            Console.WriteLine(result.GetProperty("shortDescription").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("guid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetGlossaryTerm_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = await client.GetGlossaryTermAsync("<termGuid>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetGlossaryTerm_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = await client.GetGlossaryTermAsync("<termGuid>", true, new string[] { "<excludeRelationshipTypeList>" });

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("abbreviation").ToString());
            Console.WriteLine(result.GetProperty("templateName")[0].ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("resources")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("resources")[0].GetProperty("url").ToString());
            Console.WriteLine(result.GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
            Console.WriteLine(result.GetProperty("attributes").GetProperty("<test>").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("examples")[0].ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("usage").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("longDescription").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("qualifiedName").ToString());
            Console.WriteLine(result.GetProperty("shortDescription").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("guid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UpdateGlossaryTerm()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            var data = new { };

            Response response = client.UpdateGlossaryTerm("<termGuid>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UpdateGlossaryTerm_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            var data = new
            {
                abbreviation = "<abbreviation>",
                templateName = new[] {
        new {}
    },
                anchor = new
                {
                    displayText = "<displayText>",
                    glossaryGuid = "<glossaryGuid>",
                    relationGuid = "<relationGuid>",
                },
                antonyms = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
                createTime = 123.45f,
                createdBy = "<createdBy>",
                updateTime = 123.45f,
                updatedBy = "<updatedBy>",
                status = "Draft",
                resources = new[] {
        new {
            displayName = "<displayName>",
            url = "<url>",
        }
    },
                contacts = new
                {
                    key = new[] {
            new {
                id = "<id>",
                info = "<info>",
            }
        },
                },
                attributes = new
                {
                    key = new
                    {
                        key = new { },
                    },
                },
                assignedEntities = new[] {
        new {
            displayText = "<displayText>",
            entityStatus = "ACTIVE",
            relationshipType = "<relationshipType>",
            relationshipAttributes = new {
                entityGuid = "<entityGuid>",
                entityStatus = "ACTIVE",
                removePropagationsOnEntityDelete = true,
                validityPeriods = new[] {
                    new {
                        endTime = "<endTime>",
                        startTime = "<startTime>",
                        timeZone = "<timeZone>",
                    }
                },
                source = "<source>",
                sourceDetails = new {
                    key = new {},
                },
                attributes = new {
                    key = new {},
                },
                typeName = "<typeName>",
                lastModifiedTS = "<lastModifiedTS>",
            },
            relationshipGuid = "<relationshipGuid>",
            relationshipStatus = "ACTIVE",
            guid = "<guid>",
            typeName = "<typeName>",
            uniqueAttributes = new {
                key = new {},
            },
        }
    },
                categories = new[] {
        new {
            categoryGuid = "<categoryGuid>",
            description = "<description>",
            displayText = "<displayText>",
            relationGuid = "<relationGuid>",
            status = "DRAFT",
        }
    },
                classifies = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
                examples = new[] {
        "<String>"
    },
                isA = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
                preferredTerms = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
                preferredToTerms = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
                replacedBy = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
                replacementTerms = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
                seeAlso = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
                synonyms = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
                translatedTerms = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
                translationTerms = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
                usage = "<usage>",
                validValues = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
                validValuesFor = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
                classifications = new[] {
        new {
            entityGuid = "<entityGuid>",
            entityStatus = "ACTIVE",
            removePropagationsOnEntityDelete = true,
            source = "<source>",
            sourceDetails = new {
                key = new {},
            },
            attributes = new {
                key = new {},
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        }
    },
                longDescription = "<longDescription>",
                name = "<name>",
                qualifiedName = "<qualifiedName>",
                shortDescription = "<shortDescription>",
                lastModifiedTS = "<lastModifiedTS>",
                guid = "<guid>",
            };

            Response response = client.UpdateGlossaryTerm("<termGuid>", RequestContent.Create(data), true);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("abbreviation").ToString());
            Console.WriteLine(result.GetProperty("templateName")[0].ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("resources")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("resources")[0].GetProperty("url").ToString());
            Console.WriteLine(result.GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
            Console.WriteLine(result.GetProperty("attributes").GetProperty("<test>").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("examples")[0].ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("usage").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("longDescription").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("qualifiedName").ToString());
            Console.WriteLine(result.GetProperty("shortDescription").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("guid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UpdateGlossaryTerm_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            var data = new { };

            Response response = await client.UpdateGlossaryTermAsync("<termGuid>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UpdateGlossaryTerm_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            var data = new
            {
                abbreviation = "<abbreviation>",
                templateName = new[] {
        new {}
    },
                anchor = new
                {
                    displayText = "<displayText>",
                    glossaryGuid = "<glossaryGuid>",
                    relationGuid = "<relationGuid>",
                },
                antonyms = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
                createTime = 123.45f,
                createdBy = "<createdBy>",
                updateTime = 123.45f,
                updatedBy = "<updatedBy>",
                status = "Draft",
                resources = new[] {
        new {
            displayName = "<displayName>",
            url = "<url>",
        }
    },
                contacts = new
                {
                    key = new[] {
            new {
                id = "<id>",
                info = "<info>",
            }
        },
                },
                attributes = new
                {
                    key = new
                    {
                        key = new { },
                    },
                },
                assignedEntities = new[] {
        new {
            displayText = "<displayText>",
            entityStatus = "ACTIVE",
            relationshipType = "<relationshipType>",
            relationshipAttributes = new {
                entityGuid = "<entityGuid>",
                entityStatus = "ACTIVE",
                removePropagationsOnEntityDelete = true,
                validityPeriods = new[] {
                    new {
                        endTime = "<endTime>",
                        startTime = "<startTime>",
                        timeZone = "<timeZone>",
                    }
                },
                source = "<source>",
                sourceDetails = new {
                    key = new {},
                },
                attributes = new {
                    key = new {},
                },
                typeName = "<typeName>",
                lastModifiedTS = "<lastModifiedTS>",
            },
            relationshipGuid = "<relationshipGuid>",
            relationshipStatus = "ACTIVE",
            guid = "<guid>",
            typeName = "<typeName>",
            uniqueAttributes = new {
                key = new {},
            },
        }
    },
                categories = new[] {
        new {
            categoryGuid = "<categoryGuid>",
            description = "<description>",
            displayText = "<displayText>",
            relationGuid = "<relationGuid>",
            status = "DRAFT",
        }
    },
                classifies = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
                examples = new[] {
        "<String>"
    },
                isA = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
                preferredTerms = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
                preferredToTerms = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
                replacedBy = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
                replacementTerms = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
                seeAlso = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
                synonyms = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
                translatedTerms = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
                translationTerms = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
                usage = "<usage>",
                validValues = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
                validValuesFor = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
                classifications = new[] {
        new {
            entityGuid = "<entityGuid>",
            entityStatus = "ACTIVE",
            removePropagationsOnEntityDelete = true,
            source = "<source>",
            sourceDetails = new {
                key = new {},
            },
            attributes = new {
                key = new {},
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        }
    },
                longDescription = "<longDescription>",
                name = "<name>",
                qualifiedName = "<qualifiedName>",
                shortDescription = "<shortDescription>",
                lastModifiedTS = "<lastModifiedTS>",
                guid = "<guid>",
            };

            Response response = await client.UpdateGlossaryTermAsync("<termGuid>", RequestContent.Create(data), true);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("abbreviation").ToString());
            Console.WriteLine(result.GetProperty("templateName")[0].ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("resources")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("resources")[0].GetProperty("url").ToString());
            Console.WriteLine(result.GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
            Console.WriteLine(result.GetProperty("attributes").GetProperty("<test>").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("examples")[0].ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("usage").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("longDescription").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("qualifiedName").ToString());
            Console.WriteLine(result.GetProperty("shortDescription").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("guid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteGlossaryTerm()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = client.DeleteGlossaryTerm("<termGuid>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteGlossaryTerm_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = client.DeleteGlossaryTerm("<termGuid>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteGlossaryTerm_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = await client.DeleteGlossaryTermAsync("<termGuid>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteGlossaryTerm_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = await client.DeleteGlossaryTermAsync("<termGuid>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PartialUpdateGlossaryTerm()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            var data = new
            {
                key = "<String>",
            };

            Response response = client.PartialUpdateGlossaryTerm("<termGuid>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PartialUpdateGlossaryTerm_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            var data = new
            {
                key = "<String>",
            };

            Response response = client.PartialUpdateGlossaryTerm("<termGuid>", RequestContent.Create(data), true);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("abbreviation").ToString());
            Console.WriteLine(result.GetProperty("templateName")[0].ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("resources")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("resources")[0].GetProperty("url").ToString());
            Console.WriteLine(result.GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
            Console.WriteLine(result.GetProperty("attributes").GetProperty("<test>").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("examples")[0].ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("usage").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("longDescription").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("qualifiedName").ToString());
            Console.WriteLine(result.GetProperty("shortDescription").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("guid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PartialUpdateGlossaryTerm_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            var data = new
            {
                key = "<String>",
            };

            Response response = await client.PartialUpdateGlossaryTermAsync("<termGuid>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PartialUpdateGlossaryTerm_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            var data = new
            {
                key = "<String>",
            };

            Response response = await client.PartialUpdateGlossaryTermAsync("<termGuid>", RequestContent.Create(data), true);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("abbreviation").ToString());
            Console.WriteLine(result.GetProperty("templateName")[0].ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
            Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("resources")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("resources")[0].GetProperty("url").ToString());
            Console.WriteLine(result.GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
            Console.WriteLine(result.GetProperty("attributes").GetProperty("<test>").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("examples")[0].ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("isA")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("usage").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("longDescription").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("qualifiedName").ToString());
            Console.WriteLine(result.GetProperty("shortDescription").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("guid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateGlossaryTerms()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            var data = new[] {
    new {}
};

            Response response = client.CreateGlossaryTerms(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateGlossaryTerms_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            var data = new[] {
    new {
        abbreviation = "<abbreviation>",
        templateName = new[] {
            new {}
        },
        anchor = new {
            displayText = "<displayText>",
            glossaryGuid = "<glossaryGuid>",
            relationGuid = "<relationGuid>",
        },
        antonyms = new[] {
            new {
                description = "<description>",
                displayText = "<displayText>",
                expression = "<expression>",
                relationGuid = "<relationGuid>",
                source = "<source>",
                status = "DRAFT",
                steward = "<steward>",
                termGuid = "<termGuid>",
            }
        },
        createTime = 123.45f,
        createdBy = "<createdBy>",
        updateTime = 123.45f,
        updatedBy = "<updatedBy>",
        status = "Draft",
        resources = new[] {
            new {
                displayName = "<displayName>",
                url = "<url>",
            }
        },
        contacts = new {
            key = new[] {
                new {
                    id = "<id>",
                    info = "<info>",
                }
            },
        },
        attributes = new {
            key = new {
                key = new {},
            },
        },
        assignedEntities = new[] {
            new {
                displayText = "<displayText>",
                entityStatus = "ACTIVE",
                relationshipType = "<relationshipType>",
                relationshipAttributes = new {
                    entityGuid = "<entityGuid>",
                    entityStatus = "ACTIVE",
                    removePropagationsOnEntityDelete = true,
                    validityPeriods = new[] {
                        new {
                            endTime = "<endTime>",
                            startTime = "<startTime>",
                            timeZone = "<timeZone>",
                        }
                    },
                    source = "<source>",
                    sourceDetails = new {
                        key = new {},
                    },
                    attributes = new {
                        key = new {},
                    },
                    typeName = "<typeName>",
                    lastModifiedTS = "<lastModifiedTS>",
                },
                relationshipGuid = "<relationshipGuid>",
                relationshipStatus = "ACTIVE",
                guid = "<guid>",
                typeName = "<typeName>",
                uniqueAttributes = new {
                    key = new {},
                },
            }
        },
        categories = new[] {
            new {
                categoryGuid = "<categoryGuid>",
                description = "<description>",
                displayText = "<displayText>",
                relationGuid = "<relationGuid>",
                status = "DRAFT",
            }
        },
        classifies = new[] {
            new {
                description = "<description>",
                displayText = "<displayText>",
                expression = "<expression>",
                relationGuid = "<relationGuid>",
                source = "<source>",
                status = "DRAFT",
                steward = "<steward>",
                termGuid = "<termGuid>",
            }
        },
        examples = new[] {
            "<String>"
        },
        isA = new[] {
            new {
                description = "<description>",
                displayText = "<displayText>",
                expression = "<expression>",
                relationGuid = "<relationGuid>",
                source = "<source>",
                status = "DRAFT",
                steward = "<steward>",
                termGuid = "<termGuid>",
            }
        },
        preferredTerms = new[] {
            new {
                description = "<description>",
                displayText = "<displayText>",
                expression = "<expression>",
                relationGuid = "<relationGuid>",
                source = "<source>",
                status = "DRAFT",
                steward = "<steward>",
                termGuid = "<termGuid>",
            }
        },
        preferredToTerms = new[] {
            new {
                description = "<description>",
                displayText = "<displayText>",
                expression = "<expression>",
                relationGuid = "<relationGuid>",
                source = "<source>",
                status = "DRAFT",
                steward = "<steward>",
                termGuid = "<termGuid>",
            }
        },
        replacedBy = new[] {
            new {
                description = "<description>",
                displayText = "<displayText>",
                expression = "<expression>",
                relationGuid = "<relationGuid>",
                source = "<source>",
                status = "DRAFT",
                steward = "<steward>",
                termGuid = "<termGuid>",
            }
        },
        replacementTerms = new[] {
            new {
                description = "<description>",
                displayText = "<displayText>",
                expression = "<expression>",
                relationGuid = "<relationGuid>",
                source = "<source>",
                status = "DRAFT",
                steward = "<steward>",
                termGuid = "<termGuid>",
            }
        },
        seeAlso = new[] {
            new {
                description = "<description>",
                displayText = "<displayText>",
                expression = "<expression>",
                relationGuid = "<relationGuid>",
                source = "<source>",
                status = "DRAFT",
                steward = "<steward>",
                termGuid = "<termGuid>",
            }
        },
        synonyms = new[] {
            new {
                description = "<description>",
                displayText = "<displayText>",
                expression = "<expression>",
                relationGuid = "<relationGuid>",
                source = "<source>",
                status = "DRAFT",
                steward = "<steward>",
                termGuid = "<termGuid>",
            }
        },
        translatedTerms = new[] {
            new {
                description = "<description>",
                displayText = "<displayText>",
                expression = "<expression>",
                relationGuid = "<relationGuid>",
                source = "<source>",
                status = "DRAFT",
                steward = "<steward>",
                termGuid = "<termGuid>",
            }
        },
        translationTerms = new[] {
            new {
                description = "<description>",
                displayText = "<displayText>",
                expression = "<expression>",
                relationGuid = "<relationGuid>",
                source = "<source>",
                status = "DRAFT",
                steward = "<steward>",
                termGuid = "<termGuid>",
            }
        },
        usage = "<usage>",
        validValues = new[] {
            new {
                description = "<description>",
                displayText = "<displayText>",
                expression = "<expression>",
                relationGuid = "<relationGuid>",
                source = "<source>",
                status = "DRAFT",
                steward = "<steward>",
                termGuid = "<termGuid>",
            }
        },
        validValuesFor = new[] {
            new {
                description = "<description>",
                displayText = "<displayText>",
                expression = "<expression>",
                relationGuid = "<relationGuid>",
                source = "<source>",
                status = "DRAFT",
                steward = "<steward>",
                termGuid = "<termGuid>",
            }
        },
        classifications = new[] {
            new {
                entityGuid = "<entityGuid>",
                entityStatus = "ACTIVE",
                removePropagationsOnEntityDelete = true,
                source = "<source>",
                sourceDetails = new {
                    key = new {},
                },
                attributes = new {
                    key = new {},
                },
                typeName = "<typeName>",
                lastModifiedTS = "<lastModifiedTS>",
            }
        },
        longDescription = "<longDescription>",
        name = "<name>",
        qualifiedName = "<qualifiedName>",
        shortDescription = "<shortDescription>",
        lastModifiedTS = "<lastModifiedTS>",
        guid = "<guid>",
    }
};

            Response response = client.CreateGlossaryTerms(RequestContent.Create(data), true);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("abbreviation").ToString());
            Console.WriteLine(result[0].GetProperty("templateName")[0].ToString());
            Console.WriteLine(result[0].GetProperty("anchor").GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("anchor").GetProperty("glossaryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("anchor").GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("createTime").ToString());
            Console.WriteLine(result[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result[0].GetProperty("updateTime").ToString());
            Console.WriteLine(result[0].GetProperty("updatedBy").ToString());
            Console.WriteLine(result[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("url").ToString());
            Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
            Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
            Console.WriteLine(result[0].GetProperty("attributes").GetProperty("<test>").GetProperty("<test>").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<test>").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<test>").ToString());
            Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("examples")[0].ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("usage").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result[0].GetProperty("longDescription").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
            Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
            Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result[0].GetProperty("guid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateGlossaryTerms_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            var data = new[] {
    new {}
};

            Response response = await client.CreateGlossaryTermsAsync(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateGlossaryTerms_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            var data = new[] {
    new {
        abbreviation = "<abbreviation>",
        templateName = new[] {
            new {}
        },
        anchor = new {
            displayText = "<displayText>",
            glossaryGuid = "<glossaryGuid>",
            relationGuid = "<relationGuid>",
        },
        antonyms = new[] {
            new {
                description = "<description>",
                displayText = "<displayText>",
                expression = "<expression>",
                relationGuid = "<relationGuid>",
                source = "<source>",
                status = "DRAFT",
                steward = "<steward>",
                termGuid = "<termGuid>",
            }
        },
        createTime = 123.45f,
        createdBy = "<createdBy>",
        updateTime = 123.45f,
        updatedBy = "<updatedBy>",
        status = "Draft",
        resources = new[] {
            new {
                displayName = "<displayName>",
                url = "<url>",
            }
        },
        contacts = new {
            key = new[] {
                new {
                    id = "<id>",
                    info = "<info>",
                }
            },
        },
        attributes = new {
            key = new {
                key = new {},
            },
        },
        assignedEntities = new[] {
            new {
                displayText = "<displayText>",
                entityStatus = "ACTIVE",
                relationshipType = "<relationshipType>",
                relationshipAttributes = new {
                    entityGuid = "<entityGuid>",
                    entityStatus = "ACTIVE",
                    removePropagationsOnEntityDelete = true,
                    validityPeriods = new[] {
                        new {
                            endTime = "<endTime>",
                            startTime = "<startTime>",
                            timeZone = "<timeZone>",
                        }
                    },
                    source = "<source>",
                    sourceDetails = new {
                        key = new {},
                    },
                    attributes = new {
                        key = new {},
                    },
                    typeName = "<typeName>",
                    lastModifiedTS = "<lastModifiedTS>",
                },
                relationshipGuid = "<relationshipGuid>",
                relationshipStatus = "ACTIVE",
                guid = "<guid>",
                typeName = "<typeName>",
                uniqueAttributes = new {
                    key = new {},
                },
            }
        },
        categories = new[] {
            new {
                categoryGuid = "<categoryGuid>",
                description = "<description>",
                displayText = "<displayText>",
                relationGuid = "<relationGuid>",
                status = "DRAFT",
            }
        },
        classifies = new[] {
            new {
                description = "<description>",
                displayText = "<displayText>",
                expression = "<expression>",
                relationGuid = "<relationGuid>",
                source = "<source>",
                status = "DRAFT",
                steward = "<steward>",
                termGuid = "<termGuid>",
            }
        },
        examples = new[] {
            "<String>"
        },
        isA = new[] {
            new {
                description = "<description>",
                displayText = "<displayText>",
                expression = "<expression>",
                relationGuid = "<relationGuid>",
                source = "<source>",
                status = "DRAFT",
                steward = "<steward>",
                termGuid = "<termGuid>",
            }
        },
        preferredTerms = new[] {
            new {
                description = "<description>",
                displayText = "<displayText>",
                expression = "<expression>",
                relationGuid = "<relationGuid>",
                source = "<source>",
                status = "DRAFT",
                steward = "<steward>",
                termGuid = "<termGuid>",
            }
        },
        preferredToTerms = new[] {
            new {
                description = "<description>",
                displayText = "<displayText>",
                expression = "<expression>",
                relationGuid = "<relationGuid>",
                source = "<source>",
                status = "DRAFT",
                steward = "<steward>",
                termGuid = "<termGuid>",
            }
        },
        replacedBy = new[] {
            new {
                description = "<description>",
                displayText = "<displayText>",
                expression = "<expression>",
                relationGuid = "<relationGuid>",
                source = "<source>",
                status = "DRAFT",
                steward = "<steward>",
                termGuid = "<termGuid>",
            }
        },
        replacementTerms = new[] {
            new {
                description = "<description>",
                displayText = "<displayText>",
                expression = "<expression>",
                relationGuid = "<relationGuid>",
                source = "<source>",
                status = "DRAFT",
                steward = "<steward>",
                termGuid = "<termGuid>",
            }
        },
        seeAlso = new[] {
            new {
                description = "<description>",
                displayText = "<displayText>",
                expression = "<expression>",
                relationGuid = "<relationGuid>",
                source = "<source>",
                status = "DRAFT",
                steward = "<steward>",
                termGuid = "<termGuid>",
            }
        },
        synonyms = new[] {
            new {
                description = "<description>",
                displayText = "<displayText>",
                expression = "<expression>",
                relationGuid = "<relationGuid>",
                source = "<source>",
                status = "DRAFT",
                steward = "<steward>",
                termGuid = "<termGuid>",
            }
        },
        translatedTerms = new[] {
            new {
                description = "<description>",
                displayText = "<displayText>",
                expression = "<expression>",
                relationGuid = "<relationGuid>",
                source = "<source>",
                status = "DRAFT",
                steward = "<steward>",
                termGuid = "<termGuid>",
            }
        },
        translationTerms = new[] {
            new {
                description = "<description>",
                displayText = "<displayText>",
                expression = "<expression>",
                relationGuid = "<relationGuid>",
                source = "<source>",
                status = "DRAFT",
                steward = "<steward>",
                termGuid = "<termGuid>",
            }
        },
        usage = "<usage>",
        validValues = new[] {
            new {
                description = "<description>",
                displayText = "<displayText>",
                expression = "<expression>",
                relationGuid = "<relationGuid>",
                source = "<source>",
                status = "DRAFT",
                steward = "<steward>",
                termGuid = "<termGuid>",
            }
        },
        validValuesFor = new[] {
            new {
                description = "<description>",
                displayText = "<displayText>",
                expression = "<expression>",
                relationGuid = "<relationGuid>",
                source = "<source>",
                status = "DRAFT",
                steward = "<steward>",
                termGuid = "<termGuid>",
            }
        },
        classifications = new[] {
            new {
                entityGuid = "<entityGuid>",
                entityStatus = "ACTIVE",
                removePropagationsOnEntityDelete = true,
                source = "<source>",
                sourceDetails = new {
                    key = new {},
                },
                attributes = new {
                    key = new {},
                },
                typeName = "<typeName>",
                lastModifiedTS = "<lastModifiedTS>",
            }
        },
        longDescription = "<longDescription>",
        name = "<name>",
        qualifiedName = "<qualifiedName>",
        shortDescription = "<shortDescription>",
        lastModifiedTS = "<lastModifiedTS>",
        guid = "<guid>",
    }
};

            Response response = await client.CreateGlossaryTermsAsync(RequestContent.Create(data), true);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("abbreviation").ToString());
            Console.WriteLine(result[0].GetProperty("templateName")[0].ToString());
            Console.WriteLine(result[0].GetProperty("anchor").GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("anchor").GetProperty("glossaryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("anchor").GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("createTime").ToString());
            Console.WriteLine(result[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result[0].GetProperty("updateTime").ToString());
            Console.WriteLine(result[0].GetProperty("updatedBy").ToString());
            Console.WriteLine(result[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("url").ToString());
            Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
            Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
            Console.WriteLine(result[0].GetProperty("attributes").GetProperty("<test>").GetProperty("<test>").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<test>").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<test>").ToString());
            Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("examples")[0].ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("usage").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result[0].GetProperty("longDescription").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
            Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
            Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result[0].GetProperty("guid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetEntitiesAssignedWithTerm()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = client.GetEntitiesAssignedWithTerm("<termGuid>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetEntitiesAssignedWithTerm_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = client.GetEntitiesAssignedWithTerm("<termGuid>", 1234, 1234, "<sort>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result[0].GetProperty("relationshipType").ToString());
            Console.WriteLine(result[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<test>").ToString());
            Console.WriteLine(result[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
            Console.WriteLine(result[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result[0].GetProperty("relationshipGuid").ToString());
            Console.WriteLine(result[0].GetProperty("relationshipStatus").ToString());
            Console.WriteLine(result[0].GetProperty("guid").ToString());
            Console.WriteLine(result[0].GetProperty("typeName").ToString());
            Console.WriteLine(result[0].GetProperty("uniqueAttributes").GetProperty("<test>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetEntitiesAssignedWithTerm_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = await client.GetEntitiesAssignedWithTermAsync("<termGuid>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetEntitiesAssignedWithTerm_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = await client.GetEntitiesAssignedWithTermAsync("<termGuid>", 1234, 1234, "<sort>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result[0].GetProperty("relationshipType").ToString());
            Console.WriteLine(result[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<test>").ToString());
            Console.WriteLine(result[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
            Console.WriteLine(result[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result[0].GetProperty("relationshipGuid").ToString());
            Console.WriteLine(result[0].GetProperty("relationshipStatus").ToString());
            Console.WriteLine(result[0].GetProperty("guid").ToString());
            Console.WriteLine(result[0].GetProperty("typeName").ToString());
            Console.WriteLine(result[0].GetProperty("uniqueAttributes").GetProperty("<test>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AssignTermToEntities()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            var data = new[] {
    new {}
};

            Response response = client.AssignTermToEntities("<termGuid>", RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AssignTermToEntities_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            var data = new[] {
    new {
        displayText = "<displayText>",
        entityStatus = "ACTIVE",
        relationshipType = "<relationshipType>",
        relationshipAttributes = new {
            entityGuid = "<entityGuid>",
            entityStatus = "ACTIVE",
            removePropagationsOnEntityDelete = true,
            validityPeriods = new[] {
                new {
                    endTime = "<endTime>",
                    startTime = "<startTime>",
                    timeZone = "<timeZone>",
                }
            },
            source = "<source>",
            sourceDetails = new {
                key = new {},
            },
            attributes = new {
                key = new {},
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        },
        relationshipGuid = "<relationshipGuid>",
        relationshipStatus = "ACTIVE",
        guid = "<guid>",
        typeName = "<typeName>",
        uniqueAttributes = new {
            key = new {},
        },
    }
};

            Response response = client.AssignTermToEntities("<termGuid>", RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AssignTermToEntities_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            var data = new[] {
    new {}
};

            Response response = await client.AssignTermToEntitiesAsync("<termGuid>", RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AssignTermToEntities_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            var data = new[] {
    new {
        displayText = "<displayText>",
        entityStatus = "ACTIVE",
        relationshipType = "<relationshipType>",
        relationshipAttributes = new {
            entityGuid = "<entityGuid>",
            entityStatus = "ACTIVE",
            removePropagationsOnEntityDelete = true,
            validityPeriods = new[] {
                new {
                    endTime = "<endTime>",
                    startTime = "<startTime>",
                    timeZone = "<timeZone>",
                }
            },
            source = "<source>",
            sourceDetails = new {
                key = new {},
            },
            attributes = new {
                key = new {},
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        },
        relationshipGuid = "<relationshipGuid>",
        relationshipStatus = "ACTIVE",
        guid = "<guid>",
        typeName = "<typeName>",
        uniqueAttributes = new {
            key = new {},
        },
    }
};

            Response response = await client.AssignTermToEntitiesAsync("<termGuid>", RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RemoveTermAssignmentFromEntities()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            var data = new[] {
    new {}
};

            Response response = client.RemoveTermAssignmentFromEntities("<termGuid>", RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RemoveTermAssignmentFromEntities_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            var data = new[] {
    new {
        displayText = "<displayText>",
        entityStatus = "ACTIVE",
        relationshipType = "<relationshipType>",
        relationshipAttributes = new {
            entityGuid = "<entityGuid>",
            entityStatus = "ACTIVE",
            removePropagationsOnEntityDelete = true,
            validityPeriods = new[] {
                new {
                    endTime = "<endTime>",
                    startTime = "<startTime>",
                    timeZone = "<timeZone>",
                }
            },
            source = "<source>",
            sourceDetails = new {
                key = new {},
            },
            attributes = new {
                key = new {},
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        },
        relationshipGuid = "<relationshipGuid>",
        relationshipStatus = "ACTIVE",
        guid = "<guid>",
        typeName = "<typeName>",
        uniqueAttributes = new {
            key = new {},
        },
    }
};

            Response response = client.RemoveTermAssignmentFromEntities("<termGuid>", RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RemoveTermAssignmentFromEntities_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            var data = new[] {
    new {}
};

            Response response = await client.RemoveTermAssignmentFromEntitiesAsync("<termGuid>", RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RemoveTermAssignmentFromEntities_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            var data = new[] {
    new {
        displayText = "<displayText>",
        entityStatus = "ACTIVE",
        relationshipType = "<relationshipType>",
        relationshipAttributes = new {
            entityGuid = "<entityGuid>",
            entityStatus = "ACTIVE",
            removePropagationsOnEntityDelete = true,
            validityPeriods = new[] {
                new {
                    endTime = "<endTime>",
                    startTime = "<startTime>",
                    timeZone = "<timeZone>",
                }
            },
            source = "<source>",
            sourceDetails = new {
                key = new {},
            },
            attributes = new {
                key = new {},
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        },
        relationshipGuid = "<relationshipGuid>",
        relationshipStatus = "ACTIVE",
        guid = "<guid>",
        typeName = "<typeName>",
        uniqueAttributes = new {
            key = new {},
        },
    }
};

            Response response = await client.RemoveTermAssignmentFromEntitiesAsync("<termGuid>", RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteTermAssignmentFromEntities()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            var data = new[] {
    new {}
};

            Response response = client.DeleteTermAssignmentFromEntities("<termGuid>", RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteTermAssignmentFromEntities_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            var data = new[] {
    new {
        displayText = "<displayText>",
        entityStatus = "ACTIVE",
        relationshipType = "<relationshipType>",
        relationshipAttributes = new {
            entityGuid = "<entityGuid>",
            entityStatus = "ACTIVE",
            removePropagationsOnEntityDelete = true,
            validityPeriods = new[] {
                new {
                    endTime = "<endTime>",
                    startTime = "<startTime>",
                    timeZone = "<timeZone>",
                }
            },
            source = "<source>",
            sourceDetails = new {
                key = new {},
            },
            attributes = new {
                key = new {},
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        },
        relationshipGuid = "<relationshipGuid>",
        relationshipStatus = "ACTIVE",
        guid = "<guid>",
        typeName = "<typeName>",
        uniqueAttributes = new {
            key = new {},
        },
    }
};

            Response response = client.DeleteTermAssignmentFromEntities("<termGuid>", RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteTermAssignmentFromEntities_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            var data = new[] {
    new {}
};

            Response response = await client.DeleteTermAssignmentFromEntitiesAsync("<termGuid>", RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteTermAssignmentFromEntities_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            var data = new[] {
    new {
        displayText = "<displayText>",
        entityStatus = "ACTIVE",
        relationshipType = "<relationshipType>",
        relationshipAttributes = new {
            entityGuid = "<entityGuid>",
            entityStatus = "ACTIVE",
            removePropagationsOnEntityDelete = true,
            validityPeriods = new[] {
                new {
                    endTime = "<endTime>",
                    startTime = "<startTime>",
                    timeZone = "<timeZone>",
                }
            },
            source = "<source>",
            sourceDetails = new {
                key = new {},
            },
            attributes = new {
                key = new {},
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        },
        relationshipGuid = "<relationshipGuid>",
        relationshipStatus = "ACTIVE",
        guid = "<guid>",
        typeName = "<typeName>",
        uniqueAttributes = new {
            key = new {},
        },
    }
};

            Response response = await client.DeleteTermAssignmentFromEntitiesAsync("<termGuid>", RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetRelatedTerms()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = client.GetRelatedTerms("<termGuid>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("<test>")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetRelatedTerms_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = client.GetRelatedTerms("<termGuid>", 1234, 1234, "<sort>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("termGuid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetRelatedTerms_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = await client.GetRelatedTermsAsync("<termGuid>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("<test>")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetRelatedTerms_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = await client.GetRelatedTermsAsync("<termGuid>", 1234, 1234, "<sort>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("<test>")[0].GetProperty("termGuid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetGlossary()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = client.GetGlossary("<glossaryGuid>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetGlossary_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = client.GetGlossary("<glossaryGuid>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("language").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("usage").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("longDescription").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("qualifiedName").ToString());
            Console.WriteLine(result.GetProperty("shortDescription").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("guid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetGlossary_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = await client.GetGlossaryAsync("<glossaryGuid>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetGlossary_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = await client.GetGlossaryAsync("<glossaryGuid>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("language").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("usage").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("longDescription").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("qualifiedName").ToString());
            Console.WriteLine(result.GetProperty("shortDescription").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("guid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UpdateGlossary()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            var data = new { };

            Response response = client.UpdateGlossary("<glossaryGuid>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UpdateGlossary_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            var data = new
            {
                categoryInfo = new
                {
                    key = new
                    {
                        anchor = new
                        {
                            displayText = "<displayText>",
                            glossaryGuid = "<glossaryGuid>",
                            relationGuid = "<relationGuid>",
                        },
                        childrenCategories = new[] {
                new {
                    categoryGuid = "<categoryGuid>",
                    description = "<description>",
                    displayText = "<displayText>",
                    parentCategoryGuid = "<parentCategoryGuid>",
                    relationGuid = "<relationGuid>",
                }
            },
                        parentCategory = new
                        {
                            categoryGuid = "<categoryGuid>",
                            description = "<description>",
                            displayText = "<displayText>",
                            parentCategoryGuid = "<parentCategoryGuid>",
                            relationGuid = "<relationGuid>",
                        },
                        terms = new[] {
                new {
                    description = "<description>",
                    displayText = "<displayText>",
                    expression = "<expression>",
                    relationGuid = "<relationGuid>",
                    source = "<source>",
                    status = "DRAFT",
                    steward = "<steward>",
                    termGuid = "<termGuid>",
                }
            },
                        classifications = new[] {
                new {
                    entityGuid = "<entityGuid>",
                    entityStatus = "ACTIVE",
                    removePropagationsOnEntityDelete = true,
                    validityPeriods = new[] {
                        new {
                            endTime = "<endTime>",
                            startTime = "<startTime>",
                            timeZone = "<timeZone>",
                        }
                    },
                    source = "<source>",
                    sourceDetails = new {
                        key = new {},
                    },
                    attributes = new {
                        key = new {},
                    },
                    typeName = "<typeName>",
                    lastModifiedTS = "<lastModifiedTS>",
                }
            },
                        longDescription = "<longDescription>",
                        name = "<name>",
                        qualifiedName = "<qualifiedName>",
                        shortDescription = "<shortDescription>",
                        lastModifiedTS = "<lastModifiedTS>",
                        guid = "<guid>",
                    },
                },
                termInfo = new
                {
                    key = new
                    {
                        abbreviation = "<abbreviation>",
                        templateName = new[] {
                new {}
            },
                        createTime = 123.45f,
                        createdBy = "<createdBy>",
                        updateTime = 123.45f,
                        updatedBy = "<updatedBy>",
                        status = "Draft",
                        resources = new[] {
                new {
                    displayName = "<displayName>",
                    url = "<url>",
                }
            },
                        contacts = new
                        {
                            key = new[] {
                    new {
                        id = "<id>",
                        info = "<info>",
                    }
                },
                        },
                        attributes = new
                        {
                            key = new
                            {
                                key = new { },
                            },
                        },
                        assignedEntities = new[] {
                new {
                    displayText = "<displayText>",
                    entityStatus = "ACTIVE",
                    relationshipType = "<relationshipType>",
                    relationshipAttributes = new {
                        entityGuid = "<entityGuid>",
                        entityStatus = "ACTIVE",
                        removePropagationsOnEntityDelete = true,
                        source = "<source>",
                        sourceDetails = new {
                            key = new {},
                        },
                        attributes = new {
                            key = new {},
                        },
                        typeName = "<typeName>",
                        lastModifiedTS = "<lastModifiedTS>",
                    },
                    relationshipGuid = "<relationshipGuid>",
                    relationshipStatus = "ACTIVE",
                    guid = "<guid>",
                    typeName = "<typeName>",
                    uniqueAttributes = new {
                        key = new {},
                    },
                }
            },
                        categories = new[] {
                new {
                    categoryGuid = "<categoryGuid>",
                    description = "<description>",
                    displayText = "<displayText>",
                    relationGuid = "<relationGuid>",
                    status = "DRAFT",
                }
            },
                        examples = new[] {
                "<String>"
            },
                        usage = "<usage>",
                        longDescription = "<longDescription>",
                        name = "<name>",
                        qualifiedName = "<qualifiedName>",
                        shortDescription = "<shortDescription>",
                        lastModifiedTS = "<lastModifiedTS>",
                        guid = "<guid>",
                    },
                },
                categories = new[] {
        new {
            categoryGuid = "<categoryGuid>",
            description = "<description>",
            displayText = "<displayText>",
            parentCategoryGuid = "<parentCategoryGuid>",
            relationGuid = "<relationGuid>",
        }
    },
                language = "<language>",
                terms = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
                usage = "<usage>",
                classifications = new[] {
        new {
            entityGuid = "<entityGuid>",
            entityStatus = "ACTIVE",
            removePropagationsOnEntityDelete = true,
            source = "<source>",
            sourceDetails = new {
                key = new {},
            },
            attributes = new {
                key = new {},
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        }
    },
                longDescription = "<longDescription>",
                name = "<name>",
                qualifiedName = "<qualifiedName>",
                shortDescription = "<shortDescription>",
                lastModifiedTS = "<lastModifiedTS>",
                guid = "<guid>",
            };

            Response response = client.UpdateGlossary("<glossaryGuid>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("language").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("usage").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("longDescription").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("qualifiedName").ToString());
            Console.WriteLine(result.GetProperty("shortDescription").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("guid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UpdateGlossary_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            var data = new { };

            Response response = await client.UpdateGlossaryAsync("<glossaryGuid>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UpdateGlossary_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            var data = new
            {
                categoryInfo = new
                {
                    key = new
                    {
                        anchor = new
                        {
                            displayText = "<displayText>",
                            glossaryGuid = "<glossaryGuid>",
                            relationGuid = "<relationGuid>",
                        },
                        childrenCategories = new[] {
                new {
                    categoryGuid = "<categoryGuid>",
                    description = "<description>",
                    displayText = "<displayText>",
                    parentCategoryGuid = "<parentCategoryGuid>",
                    relationGuid = "<relationGuid>",
                }
            },
                        parentCategory = new
                        {
                            categoryGuid = "<categoryGuid>",
                            description = "<description>",
                            displayText = "<displayText>",
                            parentCategoryGuid = "<parentCategoryGuid>",
                            relationGuid = "<relationGuid>",
                        },
                        terms = new[] {
                new {
                    description = "<description>",
                    displayText = "<displayText>",
                    expression = "<expression>",
                    relationGuid = "<relationGuid>",
                    source = "<source>",
                    status = "DRAFT",
                    steward = "<steward>",
                    termGuid = "<termGuid>",
                }
            },
                        classifications = new[] {
                new {
                    entityGuid = "<entityGuid>",
                    entityStatus = "ACTIVE",
                    removePropagationsOnEntityDelete = true,
                    validityPeriods = new[] {
                        new {
                            endTime = "<endTime>",
                            startTime = "<startTime>",
                            timeZone = "<timeZone>",
                        }
                    },
                    source = "<source>",
                    sourceDetails = new {
                        key = new {},
                    },
                    attributes = new {
                        key = new {},
                    },
                    typeName = "<typeName>",
                    lastModifiedTS = "<lastModifiedTS>",
                }
            },
                        longDescription = "<longDescription>",
                        name = "<name>",
                        qualifiedName = "<qualifiedName>",
                        shortDescription = "<shortDescription>",
                        lastModifiedTS = "<lastModifiedTS>",
                        guid = "<guid>",
                    },
                },
                termInfo = new
                {
                    key = new
                    {
                        abbreviation = "<abbreviation>",
                        templateName = new[] {
                new {}
            },
                        createTime = 123.45f,
                        createdBy = "<createdBy>",
                        updateTime = 123.45f,
                        updatedBy = "<updatedBy>",
                        status = "Draft",
                        resources = new[] {
                new {
                    displayName = "<displayName>",
                    url = "<url>",
                }
            },
                        contacts = new
                        {
                            key = new[] {
                    new {
                        id = "<id>",
                        info = "<info>",
                    }
                },
                        },
                        attributes = new
                        {
                            key = new
                            {
                                key = new { },
                            },
                        },
                        assignedEntities = new[] {
                new {
                    displayText = "<displayText>",
                    entityStatus = "ACTIVE",
                    relationshipType = "<relationshipType>",
                    relationshipAttributes = new {
                        entityGuid = "<entityGuid>",
                        entityStatus = "ACTIVE",
                        removePropagationsOnEntityDelete = true,
                        source = "<source>",
                        sourceDetails = new {
                            key = new {},
                        },
                        attributes = new {
                            key = new {},
                        },
                        typeName = "<typeName>",
                        lastModifiedTS = "<lastModifiedTS>",
                    },
                    relationshipGuid = "<relationshipGuid>",
                    relationshipStatus = "ACTIVE",
                    guid = "<guid>",
                    typeName = "<typeName>",
                    uniqueAttributes = new {
                        key = new {},
                    },
                }
            },
                        categories = new[] {
                new {
                    categoryGuid = "<categoryGuid>",
                    description = "<description>",
                    displayText = "<displayText>",
                    relationGuid = "<relationGuid>",
                    status = "DRAFT",
                }
            },
                        examples = new[] {
                "<String>"
            },
                        usage = "<usage>",
                        longDescription = "<longDescription>",
                        name = "<name>",
                        qualifiedName = "<qualifiedName>",
                        shortDescription = "<shortDescription>",
                        lastModifiedTS = "<lastModifiedTS>",
                        guid = "<guid>",
                    },
                },
                categories = new[] {
        new {
            categoryGuid = "<categoryGuid>",
            description = "<description>",
            displayText = "<displayText>",
            parentCategoryGuid = "<parentCategoryGuid>",
            relationGuid = "<relationGuid>",
        }
    },
                language = "<language>",
                terms = new[] {
        new {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
                usage = "<usage>",
                classifications = new[] {
        new {
            entityGuid = "<entityGuid>",
            entityStatus = "ACTIVE",
            removePropagationsOnEntityDelete = true,
            source = "<source>",
            sourceDetails = new {
                key = new {},
            },
            attributes = new {
                key = new {},
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        }
    },
                longDescription = "<longDescription>",
                name = "<name>",
                qualifiedName = "<qualifiedName>",
                shortDescription = "<shortDescription>",
                lastModifiedTS = "<lastModifiedTS>",
                guid = "<guid>",
            };

            Response response = await client.UpdateGlossaryAsync("<glossaryGuid>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("language").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("usage").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("longDescription").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("qualifiedName").ToString());
            Console.WriteLine(result.GetProperty("shortDescription").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("guid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteGlossary()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = client.DeleteGlossary("<glossaryGuid>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteGlossary_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = client.DeleteGlossary("<glossaryGuid>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteGlossary_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = await client.DeleteGlossaryAsync("<glossaryGuid>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteGlossary_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = await client.DeleteGlossaryAsync("<glossaryGuid>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetGlossaryCategories()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = client.GetGlossaryCategories("<glossaryGuid>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetGlossaryCategories_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = client.GetGlossaryCategories("<glossaryGuid>", 1234, 1234, "<sort>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("anchor").GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("anchor").GetProperty("glossaryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("anchor").GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result[0].GetProperty("longDescription").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
            Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
            Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result[0].GetProperty("guid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetGlossaryCategories_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = await client.GetGlossaryCategoriesAsync("<glossaryGuid>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetGlossaryCategories_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = await client.GetGlossaryCategoriesAsync("<glossaryGuid>", 1234, 1234, "<sort>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("anchor").GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("anchor").GetProperty("glossaryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("anchor").GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result[0].GetProperty("longDescription").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
            Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
            Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result[0].GetProperty("guid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetGlossaryCategoriesHeaders()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = client.GetGlossaryCategoriesHeaders("<glossaryGuid>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetGlossaryCategoriesHeaders_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = client.GetGlossaryCategoriesHeaders("<glossaryGuid>", 1234, 1234, "<sort>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("relationGuid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetGlossaryCategoriesHeaders_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = await client.GetGlossaryCategoriesHeadersAsync("<glossaryGuid>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetGlossaryCategoriesHeaders_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = await client.GetGlossaryCategoriesHeadersAsync("<glossaryGuid>", 1234, 1234, "<sort>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("relationGuid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDetailedGlossary()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = client.GetDetailedGlossary("<glossaryGuid>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDetailedGlossary_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = client.GetDetailedGlossary("<glossaryGuid>", true);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("anchor").GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("anchor").GetProperty("glossaryGuid").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("anchor").GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("childrenCategories")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("parentCategory").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("parentCategory").GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("parentCategory").GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("terms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("terms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("terms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("terms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("terms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("terms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("terms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("terms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("longDescription").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("qualifiedName").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("shortDescription").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("abbreviation").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("templateName")[0].ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("anchor").GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("anchor").GetProperty("glossaryGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("anchor").GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("antonyms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("antonyms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("antonyms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("antonyms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("antonyms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("antonyms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("resources")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("resources")[0].GetProperty("url").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("attributes").GetProperty("<test>").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("categories")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("categories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("categories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("categories")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifies")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifies")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifies")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifies")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifies")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifies")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifies")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("examples")[0].ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("isA")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("isA")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("isA")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("isA")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("isA")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("isA")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("isA")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("isA")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacedBy")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacedBy")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacedBy")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacedBy")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacedBy")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacementTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacementTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacementTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("seeAlso")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("seeAlso")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("seeAlso")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("seeAlso")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("seeAlso")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("synonyms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("synonyms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("synonyms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("synonyms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("synonyms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("synonyms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translatedTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translatedTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translatedTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translationTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translationTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translationTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translationTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translationTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("usage").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValues")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValues")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValues")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValues")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValues")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValues")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValues")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValuesFor")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValuesFor")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValuesFor")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("longDescription").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("qualifiedName").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("shortDescription").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("language").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("usage").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("longDescription").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("qualifiedName").ToString());
            Console.WriteLine(result.GetProperty("shortDescription").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("guid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDetailedGlossary_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = await client.GetDetailedGlossaryAsync("<glossaryGuid>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDetailedGlossary_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = await client.GetDetailedGlossaryAsync("<glossaryGuid>", true);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("anchor").GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("anchor").GetProperty("glossaryGuid").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("anchor").GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("childrenCategories")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("parentCategory").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("parentCategory").GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("parentCategory").GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("terms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("terms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("terms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("terms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("terms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("terms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("terms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("terms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("longDescription").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("qualifiedName").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("shortDescription").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<test>").GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("abbreviation").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("templateName")[0].ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("anchor").GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("anchor").GetProperty("glossaryGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("anchor").GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("antonyms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("antonyms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("antonyms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("antonyms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("antonyms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("antonyms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("resources")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("resources")[0].GetProperty("url").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("attributes").GetProperty("<test>").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("categories")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("categories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("categories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("categories")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifies")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifies")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifies")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifies")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifies")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifies")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifies")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("examples")[0].ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("isA")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("isA")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("isA")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("isA")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("isA")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("isA")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("isA")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("isA")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacedBy")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacedBy")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacedBy")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacedBy")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacedBy")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacementTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacementTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacementTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("seeAlso")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("seeAlso")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("seeAlso")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("seeAlso")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("seeAlso")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("synonyms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("synonyms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("synonyms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("synonyms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("synonyms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("synonyms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translatedTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translatedTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translatedTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translationTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translationTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translationTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translationTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translationTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("usage").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValues")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValues")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValues")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValues")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValues")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValues")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValues")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValuesFor")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValuesFor")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValuesFor")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("longDescription").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("qualifiedName").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("shortDescription").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("termInfo").GetProperty("<test>").GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("language").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("usage").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("longDescription").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("qualifiedName").ToString());
            Console.WriteLine(result.GetProperty("shortDescription").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("guid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PartialUpdateGlossary()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            var data = new
            {
                key = "<String>",
            };

            Response response = client.PartialUpdateGlossary("<glossaryGuid>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PartialUpdateGlossary_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            var data = new
            {
                key = "<String>",
            };

            Response response = client.PartialUpdateGlossary("<glossaryGuid>", RequestContent.Create(data), true);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("language").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("usage").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("longDescription").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("qualifiedName").ToString());
            Console.WriteLine(result.GetProperty("shortDescription").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("guid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PartialUpdateGlossary_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            var data = new
            {
                key = "<String>",
            };

            Response response = await client.PartialUpdateGlossaryAsync("<glossaryGuid>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PartialUpdateGlossary_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            var data = new
            {
                key = "<String>",
            };

            Response response = await client.PartialUpdateGlossaryAsync("<glossaryGuid>", RequestContent.Create(data), true);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("language").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("usage").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("longDescription").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("qualifiedName").ToString());
            Console.WriteLine(result.GetProperty("shortDescription").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("guid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetGlossaryTerms()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = client.GetGlossaryTerms("<glossaryGuid>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetGlossaryTerms_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = client.GetGlossaryTerms("<glossaryGuid>", true, 1234, 1234, "<sort>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("abbreviation").ToString());
            Console.WriteLine(result[0].GetProperty("templateName")[0].ToString());
            Console.WriteLine(result[0].GetProperty("anchor").GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("anchor").GetProperty("glossaryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("anchor").GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("createTime").ToString());
            Console.WriteLine(result[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result[0].GetProperty("updateTime").ToString());
            Console.WriteLine(result[0].GetProperty("updatedBy").ToString());
            Console.WriteLine(result[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("url").ToString());
            Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
            Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
            Console.WriteLine(result[0].GetProperty("attributes").GetProperty("<test>").GetProperty("<test>").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<test>").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<test>").ToString());
            Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("examples")[0].ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("usage").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result[0].GetProperty("longDescription").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
            Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
            Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result[0].GetProperty("guid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetGlossaryTerms_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = await client.GetGlossaryTermsAsync("<glossaryGuid>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetGlossaryTerms_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = await client.GetGlossaryTermsAsync("<glossaryGuid>", true, 1234, 1234, "<sort>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("abbreviation").ToString());
            Console.WriteLine(result[0].GetProperty("templateName")[0].ToString());
            Console.WriteLine(result[0].GetProperty("anchor").GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("anchor").GetProperty("glossaryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("anchor").GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("createTime").ToString());
            Console.WriteLine(result[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result[0].GetProperty("updateTime").ToString());
            Console.WriteLine(result[0].GetProperty("updatedBy").ToString());
            Console.WriteLine(result[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("url").ToString());
            Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
            Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
            Console.WriteLine(result[0].GetProperty("attributes").GetProperty("<test>").GetProperty("<test>").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<test>").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<test>").ToString());
            Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("examples")[0].ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("usage").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result[0].GetProperty("longDescription").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
            Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
            Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result[0].GetProperty("guid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetGlossaryTermHeaders()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = client.GetGlossaryTermHeaders("<glossaryGuid>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetGlossaryTermHeaders_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = client.GetGlossaryTermHeaders("<glossaryGuid>", 1234, 1234, "<sort>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("termGuid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetGlossaryTermHeaders_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = await client.GetGlossaryTermHeadersAsync("<glossaryGuid>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetGlossaryTermHeaders_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = await client.GetGlossaryTermHeadersAsync("<glossaryGuid>", 1234, 1234, "<sort>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("termGuid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetImportCsvOperationStatus()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = client.GetImportCsvOperationStatus("<operationGuid>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetImportCsvOperationStatus_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = client.GetImportCsvOperationStatus("<operationGuid>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("importedTerms").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("totalTermsDetected").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("errorCode").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("errorMessage").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetImportCsvOperationStatus_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = await client.GetImportCsvOperationStatusAsync("<operationGuid>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetImportCsvOperationStatus_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = await client.GetImportCsvOperationStatusAsync("<operationGuid>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("importedTerms").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("totalTermsDetected").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("errorCode").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("errorMessage").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ExportGlossaryTermsAsCsv()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            var data = new[] {
    "<String>"
};

            Response response = client.ExportGlossaryTermsAsCsv("<glossaryGuid>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ExportGlossaryTermsAsCsv_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            var data = new[] {
    "<String>"
};

            Response response = client.ExportGlossaryTermsAsCsv("<glossaryGuid>", RequestContent.Create(data), true);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ExportGlossaryTermsAsCsv_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            var data = new[] {
    "<String>"
};

            Response response = await client.ExportGlossaryTermsAsCsvAsync("<glossaryGuid>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ExportGlossaryTermsAsCsv_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            var data = new[] {
    "<String>"
};

            Response response = await client.ExportGlossaryTermsAsCsvAsync("<glossaryGuid>", RequestContent.Create(data), true);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetTermsByGlossaryName()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = client.GetTermsByGlossaryName("<glossaryName>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetTermsByGlossaryName_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = client.GetTermsByGlossaryName("<glossaryName>", 1234, 1234, true);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("abbreviation").ToString());
            Console.WriteLine(result[0].GetProperty("templateName")[0].ToString());
            Console.WriteLine(result[0].GetProperty("anchor").GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("anchor").GetProperty("glossaryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("anchor").GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("createTime").ToString());
            Console.WriteLine(result[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result[0].GetProperty("updateTime").ToString());
            Console.WriteLine(result[0].GetProperty("updatedBy").ToString());
            Console.WriteLine(result[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("url").ToString());
            Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
            Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
            Console.WriteLine(result[0].GetProperty("attributes").GetProperty("<test>").GetProperty("<test>").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<test>").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<test>").ToString());
            Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("examples")[0].ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("usage").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result[0].GetProperty("longDescription").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
            Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
            Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result[0].GetProperty("guid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetTermsByGlossaryName_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = await client.GetTermsByGlossaryNameAsync("<glossaryName>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetTermsByGlossaryName_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = await client.GetTermsByGlossaryNameAsync("<glossaryName>", 1234, 1234, true);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("abbreviation").ToString());
            Console.WriteLine(result[0].GetProperty("templateName")[0].ToString());
            Console.WriteLine(result[0].GetProperty("anchor").GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("anchor").GetProperty("glossaryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("anchor").GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("createTime").ToString());
            Console.WriteLine(result[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result[0].GetProperty("updateTime").ToString());
            Console.WriteLine(result[0].GetProperty("updatedBy").ToString());
            Console.WriteLine(result[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("url").ToString());
            Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<test>")[0].GetProperty("id").ToString());
            Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<test>")[0].GetProperty("info").ToString());
            Console.WriteLine(result[0].GetProperty("attributes").GetProperty("<test>").GetProperty("<test>").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<test>").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<test>").ToString());
            Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
            Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("examples")[0].ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("usage").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("status").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
            Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("source").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result[0].GetProperty("longDescription").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
            Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
            Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result[0].GetProperty("guid").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ImportGlossaryTermsViaCsv()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            var data = File.OpenRead("<filePath>");

            var operation = client.ImportGlossaryTermsViaCsv(WaitUntil.Completed, "<glossaryGuid>", RequestContent.Create(data));

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ImportGlossaryTermsViaCsv_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            var data = File.OpenRead("<filePath>");

            var operation = client.ImportGlossaryTermsViaCsv(WaitUntil.Completed, "<glossaryGuid>", RequestContent.Create(data), true);

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("importedTerms").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("totalTermsDetected").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("errorCode").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("errorMessage").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ImportGlossaryTermsViaCsv_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            var data = File.OpenRead("<filePath>");

            var operation = await client.ImportGlossaryTermsViaCsvAsync(WaitUntil.Completed, "<glossaryGuid>", RequestContent.Create(data));

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ImportGlossaryTermsViaCsv_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            var data = File.OpenRead("<filePath>");

            var operation = await client.ImportGlossaryTermsViaCsvAsync(WaitUntil.Completed, "<glossaryGuid>", RequestContent.Create(data), true);

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("importedTerms").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("totalTermsDetected").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("errorCode").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("errorMessage").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ImportGlossaryTermsViaCsvByGlossaryName()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            var data = File.OpenRead("<filePath>");

            var operation = client.ImportGlossaryTermsViaCsvByGlossaryName(WaitUntil.Completed, "<glossaryName>", RequestContent.Create(data));

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ImportGlossaryTermsViaCsvByGlossaryName_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            var data = File.OpenRead("<filePath>");

            var operation = client.ImportGlossaryTermsViaCsvByGlossaryName(WaitUntil.Completed, "<glossaryName>", RequestContent.Create(data), true);

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("importedTerms").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("totalTermsDetected").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("errorCode").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("errorMessage").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ImportGlossaryTermsViaCsvByGlossaryName_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            var data = File.OpenRead("<filePath>");

            var operation = await client.ImportGlossaryTermsViaCsvByGlossaryNameAsync(WaitUntil.Completed, "<glossaryName>", RequestContent.Create(data));

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ImportGlossaryTermsViaCsvByGlossaryName_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            var data = File.OpenRead("<filePath>");

            var operation = await client.ImportGlossaryTermsViaCsvByGlossaryNameAsync(WaitUntil.Completed, "<glossaryName>", RequestContent.Create(data), true);

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("importedTerms").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("totalTermsDetected").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("errorCode").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("errorMessage").ToString());
        }
    }
}
