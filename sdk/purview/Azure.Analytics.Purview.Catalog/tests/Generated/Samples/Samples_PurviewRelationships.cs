// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Analytics.Purview.Catalog.Samples
{
    internal class Samples_PurviewRelationships
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Create()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewRelationshipsClient();

            var data = new { };

            Response response = client.Create(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Create_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewRelationshipsClient();

            var data = new
            {
                createTime = 123.45f,
                createdBy = "<createdBy>",
                end1 = new
                {
                    displayText = "<displayText>",
                    entityStatus = "ACTIVE",
                    relationshipType = "<relationshipType>",
                    relationshipAttributes = new
                    {
                        entityGuid = "<entityGuid>",
                        entityStatus = "ACTIVE",
                        removePropagationsOnEntityDelete = true,
                        validityPeriods = new[] {
                new {
                    endTime = "<endTime>",
                    startTime = "<startTime>",
                    timeZone = "<timeZone>",
                }
            },
                        source = "<source>",
                        sourceDetails = new
                        {
                            key = new { },
                        },
                        attributes = new
                        {
                            key = new { },
                        },
                        typeName = "<typeName>",
                        lastModifiedTS = "<lastModifiedTS>",
                    },
                    relationshipGuid = "<relationshipGuid>",
                    relationshipStatus = "ACTIVE",
                    guid = "<guid>",
                    typeName = "<typeName>",
                    uniqueAttributes = new
                    {
                        key = new { },
                    },
                },
                end2 = new
                {
                    displayText = "<displayText>",
                    entityStatus = "ACTIVE",
                    relationshipType = "<relationshipType>",
                    relationshipGuid = "<relationshipGuid>",
                    relationshipStatus = "ACTIVE",
                    guid = "<guid>",
                    typeName = "<typeName>",
                    uniqueAttributes = new
                    {
                        key = new { },
                    },
                },
                guid = "<guid>",
                homeId = "<homeId>",
                label = "<label>",
                provenanceType = 123.45f,
                status = "ACTIVE",
                updateTime = 123.45f,
                updatedBy = "<updatedBy>",
                version = 123.45f,
                attributes = new
                {
                    key = new { },
                },
                typeName = "<typeName>",
                lastModifiedTS = "<lastModifiedTS>",
            };

            Response response = client.Create(RequestContent.Create(data), new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("end1").GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("end1").GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("end1").GetProperty("uniqueAttributes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("end2").GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("end2").GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("end2").GetProperty("uniqueAttributes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("homeId").ToString());
            Console.WriteLine(result.GetProperty("label").ToString());
            Console.WriteLine(result.GetProperty("provenanceType").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("attributes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Create_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewRelationshipsClient();

            var data = new { };

            Response response = await client.CreateAsync(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Create_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewRelationshipsClient();

            var data = new
            {
                createTime = 123.45f,
                createdBy = "<createdBy>",
                end1 = new
                {
                    displayText = "<displayText>",
                    entityStatus = "ACTIVE",
                    relationshipType = "<relationshipType>",
                    relationshipAttributes = new
                    {
                        entityGuid = "<entityGuid>",
                        entityStatus = "ACTIVE",
                        removePropagationsOnEntityDelete = true,
                        validityPeriods = new[] {
                new {
                    endTime = "<endTime>",
                    startTime = "<startTime>",
                    timeZone = "<timeZone>",
                }
            },
                        source = "<source>",
                        sourceDetails = new
                        {
                            key = new { },
                        },
                        attributes = new
                        {
                            key = new { },
                        },
                        typeName = "<typeName>",
                        lastModifiedTS = "<lastModifiedTS>",
                    },
                    relationshipGuid = "<relationshipGuid>",
                    relationshipStatus = "ACTIVE",
                    guid = "<guid>",
                    typeName = "<typeName>",
                    uniqueAttributes = new
                    {
                        key = new { },
                    },
                },
                end2 = new
                {
                    displayText = "<displayText>",
                    entityStatus = "ACTIVE",
                    relationshipType = "<relationshipType>",
                    relationshipGuid = "<relationshipGuid>",
                    relationshipStatus = "ACTIVE",
                    guid = "<guid>",
                    typeName = "<typeName>",
                    uniqueAttributes = new
                    {
                        key = new { },
                    },
                },
                guid = "<guid>",
                homeId = "<homeId>",
                label = "<label>",
                provenanceType = 123.45f,
                status = "ACTIVE",
                updateTime = 123.45f,
                updatedBy = "<updatedBy>",
                version = 123.45f,
                attributes = new
                {
                    key = new { },
                },
                typeName = "<typeName>",
                lastModifiedTS = "<lastModifiedTS>",
            };

            Response response = await client.CreateAsync(RequestContent.Create(data), new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("end1").GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("end1").GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("end1").GetProperty("uniqueAttributes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("end2").GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("end2").GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("end2").GetProperty("uniqueAttributes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("homeId").ToString());
            Console.WriteLine(result.GetProperty("label").ToString());
            Console.WriteLine(result.GetProperty("provenanceType").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("attributes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Update()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewRelationshipsClient();

            var data = new { };

            Response response = client.Update(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Update_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewRelationshipsClient();

            var data = new
            {
                createTime = 123.45f,
                createdBy = "<createdBy>",
                end1 = new
                {
                    displayText = "<displayText>",
                    entityStatus = "ACTIVE",
                    relationshipType = "<relationshipType>",
                    relationshipAttributes = new
                    {
                        entityGuid = "<entityGuid>",
                        entityStatus = "ACTIVE",
                        removePropagationsOnEntityDelete = true,
                        validityPeriods = new[] {
                new {
                    endTime = "<endTime>",
                    startTime = "<startTime>",
                    timeZone = "<timeZone>",
                }
            },
                        source = "<source>",
                        sourceDetails = new
                        {
                            key = new { },
                        },
                        attributes = new
                        {
                            key = new { },
                        },
                        typeName = "<typeName>",
                        lastModifiedTS = "<lastModifiedTS>",
                    },
                    relationshipGuid = "<relationshipGuid>",
                    relationshipStatus = "ACTIVE",
                    guid = "<guid>",
                    typeName = "<typeName>",
                    uniqueAttributes = new
                    {
                        key = new { },
                    },
                },
                end2 = new
                {
                    displayText = "<displayText>",
                    entityStatus = "ACTIVE",
                    relationshipType = "<relationshipType>",
                    relationshipGuid = "<relationshipGuid>",
                    relationshipStatus = "ACTIVE",
                    guid = "<guid>",
                    typeName = "<typeName>",
                    uniqueAttributes = new
                    {
                        key = new { },
                    },
                },
                guid = "<guid>",
                homeId = "<homeId>",
                label = "<label>",
                provenanceType = 123.45f,
                status = "ACTIVE",
                updateTime = 123.45f,
                updatedBy = "<updatedBy>",
                version = 123.45f,
                attributes = new
                {
                    key = new { },
                },
                typeName = "<typeName>",
                lastModifiedTS = "<lastModifiedTS>",
            };

            Response response = client.Update(RequestContent.Create(data), new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("end1").GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("end1").GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("end1").GetProperty("uniqueAttributes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("end2").GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("end2").GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("end2").GetProperty("uniqueAttributes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("homeId").ToString());
            Console.WriteLine(result.GetProperty("label").ToString());
            Console.WriteLine(result.GetProperty("provenanceType").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("attributes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Update_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewRelationshipsClient();

            var data = new { };

            Response response = await client.UpdateAsync(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Update_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewRelationshipsClient();

            var data = new
            {
                createTime = 123.45f,
                createdBy = "<createdBy>",
                end1 = new
                {
                    displayText = "<displayText>",
                    entityStatus = "ACTIVE",
                    relationshipType = "<relationshipType>",
                    relationshipAttributes = new
                    {
                        entityGuid = "<entityGuid>",
                        entityStatus = "ACTIVE",
                        removePropagationsOnEntityDelete = true,
                        validityPeriods = new[] {
                new {
                    endTime = "<endTime>",
                    startTime = "<startTime>",
                    timeZone = "<timeZone>",
                }
            },
                        source = "<source>",
                        sourceDetails = new
                        {
                            key = new { },
                        },
                        attributes = new
                        {
                            key = new { },
                        },
                        typeName = "<typeName>",
                        lastModifiedTS = "<lastModifiedTS>",
                    },
                    relationshipGuid = "<relationshipGuid>",
                    relationshipStatus = "ACTIVE",
                    guid = "<guid>",
                    typeName = "<typeName>",
                    uniqueAttributes = new
                    {
                        key = new { },
                    },
                },
                end2 = new
                {
                    displayText = "<displayText>",
                    entityStatus = "ACTIVE",
                    relationshipType = "<relationshipType>",
                    relationshipGuid = "<relationshipGuid>",
                    relationshipStatus = "ACTIVE",
                    guid = "<guid>",
                    typeName = "<typeName>",
                    uniqueAttributes = new
                    {
                        key = new { },
                    },
                },
                guid = "<guid>",
                homeId = "<homeId>",
                label = "<label>",
                provenanceType = 123.45f,
                status = "ACTIVE",
                updateTime = 123.45f,
                updatedBy = "<updatedBy>",
                version = 123.45f,
                attributes = new
                {
                    key = new { },
                },
                typeName = "<typeName>",
                lastModifiedTS = "<lastModifiedTS>",
            };

            Response response = await client.UpdateAsync(RequestContent.Create(data), new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("end1").GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("end1").GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("end1").GetProperty("uniqueAttributes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("end2").GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("end2").GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("end2").GetProperty("uniqueAttributes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("homeId").ToString());
            Console.WriteLine(result.GetProperty("label").ToString());
            Console.WriteLine(result.GetProperty("provenanceType").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("attributes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetPurviewRelationship()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewRelationshipsClient();

            Response response = client.GetPurviewRelationship("<guid>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetPurviewRelationship_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewRelationshipsClient();

            Response response = client.GetPurviewRelationship("<guid>", true, new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classificationNames")[0].ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("isIncomplete").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("labels")[0].ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meaningNames")[0].ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("confidence").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("attributes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("end1").GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("end1").GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("end1").GetProperty("uniqueAttributes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("end2").GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("end2").GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("end2").GetProperty("uniqueAttributes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("homeId").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("label").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("provenanceType").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("attributes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("lastModifiedTS").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetPurviewRelationship_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewRelationshipsClient();

            Response response = await client.GetPurviewRelationshipAsync("<guid>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetPurviewRelationship_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewRelationshipsClient();

            Response response = await client.GetPurviewRelationshipAsync("<guid>", true, new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classificationNames")[0].ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("isIncomplete").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("labels")[0].ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meaningNames")[0].ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("confidence").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("expression").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("steward").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("meanings")[0].GetProperty("termGuid").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("attributes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("referredEntities").GetProperty("<test>").GetProperty("lastModifiedTS").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("createTime").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("end1").GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("end1").GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("end1").GetProperty("uniqueAttributes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("end2").GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("end2").GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("end2").GetProperty("uniqueAttributes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("guid").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("homeId").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("label").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("provenanceType").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("updateTime").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("attributes").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("relationship").GetProperty("lastModifiedTS").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Delete()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewRelationshipsClient();

            Response response = client.Delete("<guid>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Delete_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewRelationshipsClient();

            Response response = client.Delete("<guid>", new RequestContext());
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Delete_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewRelationshipsClient();

            Response response = await client.DeleteAsync("<guid>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Delete_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewCatalogClient(endpoint, credential).GetPurviewRelationshipsClient();

            Response response = await client.DeleteAsync("<guid>", new RequestContext());
            Console.WriteLine(response.Status);
        }
    }
}
