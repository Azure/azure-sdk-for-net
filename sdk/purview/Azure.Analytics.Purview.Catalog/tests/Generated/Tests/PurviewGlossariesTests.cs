// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Analytics.Purview.Catalog.Tests
{
    public partial class PurviewGlossariesTests : AnalyticsPurviewCatalogTestBase
    {
        public PurviewGlossariesTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetGlossaries_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewGlossaries client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = await client.GetGlossariesAsync(null, null, null, null, null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetGlossaries_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewGlossaries client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = await client.GetGlossariesAsync(1234, 1234, "<sort>", true, null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task CreateGlossary_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewGlossaries client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.CreateGlossaryAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task CreateGlossary_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewGlossaries client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            using RequestContent content = RequestContent.Create(new
            {
                categories = new object[]
            {
new
{
categoryGuid = "<categoryGuid>",
description = "<description>",
displayText = "<displayText>",
parentCategoryGuid = "<parentCategoryGuid>",
relationGuid = "<relationGuid>",
}
            },
                language = "<language>",
                terms = new object[]
            {
new
{
description = "<description>",
displayText = "<displayText>",
expression = "<expression>",
relationGuid = "<relationGuid>",
source = "<source>",
status = "DRAFT",
steward = "<steward>",
termGuid = "<termGuid>",
}
            },
                usage = "<usage>",
                classifications = new object[]
            {
new
{
entityGuid = "<entityGuid>",
entityStatus = "ACTIVE",
removePropagationsOnEntityDelete = true,
validityPeriods = new object[]
{
new
{
endTime = "<endTime>",
startTime = "<startTime>",
timeZone = "<timeZone>",
}
},
source = "<source>",
sourceDetails = new
{
key = new object(),
},
attributes = new
{
key = new object(),
},
typeName = "<typeName>",
lastModifiedTS = "<lastModifiedTS>",
}
            },
                longDescription = "<longDescription>",
                name = "<name>",
                qualifiedName = "<qualifiedName>",
                shortDescription = "<shortDescription>",
                lastModifiedTS = "<lastModifiedTS>",
                guid = "<guid>",
            });
            Response response = await client.CreateGlossaryAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task CreateGlossaryCategories_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewGlossaries client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            using RequestContent content = RequestContent.Create(new object[]
            {
new object()
            });
            Response response = await client.CreateGlossaryCategoriesAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task CreateGlossaryCategories_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewGlossaries client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            using RequestContent content = RequestContent.Create(new object[]
            {
new
{
anchor = new
{
displayText = "<displayText>",
glossaryGuid = "<glossaryGuid>",
relationGuid = "<relationGuid>",
},
childrenCategories = new object[]
{
new
{
categoryGuid = "<categoryGuid>",
description = "<description>",
displayText = "<displayText>",
parentCategoryGuid = "<parentCategoryGuid>",
relationGuid = "<relationGuid>",
}
},
terms = new object[]
{
new
{
description = "<description>",
displayText = "<displayText>",
expression = "<expression>",
relationGuid = "<relationGuid>",
source = "<source>",
status = "DRAFT",
steward = "<steward>",
termGuid = "<termGuid>",
}
},
classifications = new object[]
{
new
{
entityGuid = "<entityGuid>",
entityStatus = "ACTIVE",
removePropagationsOnEntityDelete = true,
validityPeriods = new object[]
{
new
{
endTime = "<endTime>",
startTime = "<startTime>",
timeZone = "<timeZone>",
}
},
source = "<source>",
sourceDetails = new
{
key = new object(),
},
attributes = new
{
key = new object(),
},
typeName = "<typeName>",
lastModifiedTS = "<lastModifiedTS>",
}
},
longDescription = "<longDescription>",
name = "<name>",
qualifiedName = "<qualifiedName>",
shortDescription = "<shortDescription>",
lastModifiedTS = "<lastModifiedTS>",
guid = "<guid>",
}
            });
            Response response = await client.CreateGlossaryCategoriesAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task CreateGlossaryCategory_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewGlossaries client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.CreateGlossaryCategoryAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task CreateGlossaryCategory_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewGlossaries client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            using RequestContent content = RequestContent.Create(new
            {
                anchor = new
                {
                    displayText = "<displayText>",
                    glossaryGuid = "<glossaryGuid>",
                    relationGuid = "<relationGuid>",
                },
                childrenCategories = new object[]
            {
new
{
categoryGuid = "<categoryGuid>",
description = "<description>",
displayText = "<displayText>",
parentCategoryGuid = "<parentCategoryGuid>",
relationGuid = "<relationGuid>",
}
            },
                terms = new object[]
            {
new
{
description = "<description>",
displayText = "<displayText>",
expression = "<expression>",
relationGuid = "<relationGuid>",
source = "<source>",
status = "DRAFT",
steward = "<steward>",
termGuid = "<termGuid>",
}
            },
                classifications = new object[]
            {
new
{
entityGuid = "<entityGuid>",
entityStatus = "ACTIVE",
removePropagationsOnEntityDelete = true,
validityPeriods = new object[]
{
new
{
endTime = "<endTime>",
startTime = "<startTime>",
timeZone = "<timeZone>",
}
},
source = "<source>",
sourceDetails = new
{
key = new object(),
},
attributes = new
{
key = new object(),
},
typeName = "<typeName>",
lastModifiedTS = "<lastModifiedTS>",
}
            },
                longDescription = "<longDescription>",
                name = "<name>",
                qualifiedName = "<qualifiedName>",
                shortDescription = "<shortDescription>",
                lastModifiedTS = "<lastModifiedTS>",
                guid = "<guid>",
            });
            Response response = await client.CreateGlossaryCategoryAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetGlossaryCategory_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewGlossaries client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = await client.GetGlossaryCategoryAsync("<categoryGuid>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetGlossaryCategory_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewGlossaries client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = await client.GetGlossaryCategoryAsync("<categoryGuid>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task UpdateGlossaryCategory_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewGlossaries client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.UpdateGlossaryCategoryAsync("<categoryGuid>", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task UpdateGlossaryCategory_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewGlossaries client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            using RequestContent content = RequestContent.Create(new
            {
                anchor = new
                {
                    displayText = "<displayText>",
                    glossaryGuid = "<glossaryGuid>",
                    relationGuid = "<relationGuid>",
                },
                childrenCategories = new object[]
            {
new
{
categoryGuid = "<categoryGuid>",
description = "<description>",
displayText = "<displayText>",
parentCategoryGuid = "<parentCategoryGuid>",
relationGuid = "<relationGuid>",
}
            },
                terms = new object[]
            {
new
{
description = "<description>",
displayText = "<displayText>",
expression = "<expression>",
relationGuid = "<relationGuid>",
source = "<source>",
status = "DRAFT",
steward = "<steward>",
termGuid = "<termGuid>",
}
            },
                classifications = new object[]
            {
new
{
entityGuid = "<entityGuid>",
entityStatus = "ACTIVE",
removePropagationsOnEntityDelete = true,
validityPeriods = new object[]
{
new
{
endTime = "<endTime>",
startTime = "<startTime>",
timeZone = "<timeZone>",
}
},
source = "<source>",
sourceDetails = new
{
key = new object(),
},
attributes = new
{
key = new object(),
},
typeName = "<typeName>",
lastModifiedTS = "<lastModifiedTS>",
}
            },
                longDescription = "<longDescription>",
                name = "<name>",
                qualifiedName = "<qualifiedName>",
                shortDescription = "<shortDescription>",
                lastModifiedTS = "<lastModifiedTS>",
                guid = "<guid>",
            });
            Response response = await client.UpdateGlossaryCategoryAsync("<categoryGuid>", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DeleteGlossaryCategory_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewGlossaries client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = await client.DeleteGlossaryCategoryAsync("<categoryGuid>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DeleteGlossaryCategory_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewGlossaries client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = await client.DeleteGlossaryCategoryAsync("<categoryGuid>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task PartialUpdateGlossaryCategory_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewGlossaries client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            using RequestContent content = RequestContent.Create(new
            {
                key = "<partialUpdates>",
            });
            Response response = await client.PartialUpdateGlossaryCategoryAsync("<categoryGuid>", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task PartialUpdateGlossaryCategory_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewGlossaries client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            using RequestContent content = RequestContent.Create(new
            {
                key = "<partialUpdates>",
            });
            Response response = await client.PartialUpdateGlossaryCategoryAsync("<categoryGuid>", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetRelatedCategories_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewGlossaries client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = await client.GetRelatedCategoriesAsync("<categoryGuid>", null, null, null, null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetRelatedCategories_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewGlossaries client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = await client.GetRelatedCategoriesAsync("<categoryGuid>", 1234, 1234, "<sort>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetCategoryTerms_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewGlossaries client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = await client.GetCategoryTermsAsync("<categoryGuid>", null, null, null, null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetCategoryTerms_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewGlossaries client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = await client.GetCategoryTermsAsync("<categoryGuid>", 1234, 1234, "<sort>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task CreateGlossaryTerm_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewGlossaries client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.CreateGlossaryTermAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task CreateGlossaryTerm_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewGlossaries client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            using RequestContent content = RequestContent.Create(new
            {
                abbreviation = "<abbreviation>",
                templateName = new object[]
            {
new object()
            },
                anchor = new
                {
                    displayText = "<displayText>",
                    glossaryGuid = "<glossaryGuid>",
                    relationGuid = "<relationGuid>",
                },
                antonyms = new object[]
            {
new
{
description = "<description>",
displayText = "<displayText>",
expression = "<expression>",
relationGuid = "<relationGuid>",
source = "<source>",
status = "DRAFT",
steward = "<steward>",
termGuid = "<termGuid>",
}
            },
                createTime = 123.45F,
                createdBy = "<createdBy>",
                updateTime = 123.45F,
                updatedBy = "<updatedBy>",
                status = "Draft",
                resources = new object[]
            {
new
{
displayName = "<displayName>",
url = "<url>",
}
            },
                contacts = new
                {
                    key = new object[]
            {
new
{
id = "<id>",
info = "<info>",
}
            },
                },
                attributes = new
                {
                    key = new
                    {
                        key = new object(),
                    },
                },
                assignedEntities = new object[]
            {
new
{
displayText = "<displayText>",
entityStatus = "ACTIVE",
relationshipType = "<relationshipType>",
relationshipAttributes = new
{
attributes = new
{
key = new object(),
},
typeName = "<typeName>",
lastModifiedTS = "<lastModifiedTS>",
},
relationshipGuid = "<relationshipGuid>",
relationshipStatus = "ACTIVE",
guid = "<guid>",
typeName = "<typeName>",
uniqueAttributes = new
{
key = new object(),
},
}
            },
                categories = new object[]
            {
new
{
categoryGuid = "<categoryGuid>",
description = "<description>",
displayText = "<displayText>",
relationGuid = "<relationGuid>",
status = "DRAFT",
}
            },
                classifies = new object[]
            {
null
            },
                examples = new object[]
            {
"<examples>"
            },
                isA = new object[]
            {
null
            },
                preferredTerms = new object[]
            {
null
            },
                preferredToTerms = new object[]
            {
null
            },
                replacedBy = new object[]
            {
null
            },
                replacementTerms = new object[]
            {
null
            },
                seeAlso = new object[]
            {
null
            },
                synonyms = new object[]
            {
null
            },
                translatedTerms = new object[]
            {
null
            },
                translationTerms = new object[]
            {
null
            },
                usage = "<usage>",
                validValues = new object[]
            {
null
            },
                validValuesFor = new object[]
            {
null
            },
                classifications = new object[]
            {
new
{
entityGuid = "<entityGuid>",
entityStatus = "ACTIVE",
removePropagationsOnEntityDelete = true,
validityPeriods = new object[]
{
new
{
endTime = "<endTime>",
startTime = "<startTime>",
timeZone = "<timeZone>",
}
},
source = "<source>",
sourceDetails = new
{
key = new object(),
},
attributes = new
{
key = new object(),
},
typeName = "<typeName>",
lastModifiedTS = "<lastModifiedTS>",
}
            },
                longDescription = "<longDescription>",
                name = "<name>",
                qualifiedName = "<qualifiedName>",
                shortDescription = "<shortDescription>",
                lastModifiedTS = "<lastModifiedTS>",
                guid = "<guid>",
            });
            Response response = await client.CreateGlossaryTermAsync(content, includeTermHierarchy: true);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetGlossaryTerm_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewGlossaries client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = await client.GetGlossaryTermAsync("<termGuid>", null, null, null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetGlossaryTerm_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewGlossaries client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = await client.GetGlossaryTermAsync("<termGuid>", true, new string[] { "<excludeRelationshipTypeList>" }, null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task UpdateGlossaryTerm_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewGlossaries client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.UpdateGlossaryTermAsync("<termGuid>", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task UpdateGlossaryTerm_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewGlossaries client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            using RequestContent content = RequestContent.Create(new
            {
                abbreviation = "<abbreviation>",
                templateName = new object[]
            {
new object()
            },
                anchor = new
                {
                    displayText = "<displayText>",
                    glossaryGuid = "<glossaryGuid>",
                    relationGuid = "<relationGuid>",
                },
                antonyms = new object[]
            {
new
{
description = "<description>",
displayText = "<displayText>",
expression = "<expression>",
relationGuid = "<relationGuid>",
source = "<source>",
status = "DRAFT",
steward = "<steward>",
termGuid = "<termGuid>",
}
            },
                createTime = 123.45F,
                createdBy = "<createdBy>",
                updateTime = 123.45F,
                updatedBy = "<updatedBy>",
                status = "Draft",
                resources = new object[]
            {
new
{
displayName = "<displayName>",
url = "<url>",
}
            },
                contacts = new
                {
                    key = new object[]
            {
new
{
id = "<id>",
info = "<info>",
}
            },
                },
                attributes = new
                {
                    key = new
                    {
                        key = new object(),
                    },
                },
                assignedEntities = new object[]
            {
new
{
displayText = "<displayText>",
entityStatus = "ACTIVE",
relationshipType = "<relationshipType>",
relationshipAttributes = new
{
attributes = new
{
key = new object(),
},
typeName = "<typeName>",
lastModifiedTS = "<lastModifiedTS>",
},
relationshipGuid = "<relationshipGuid>",
relationshipStatus = "ACTIVE",
guid = "<guid>",
typeName = "<typeName>",
uniqueAttributes = new
{
key = new object(),
},
}
            },
                categories = new object[]
            {
new
{
categoryGuid = "<categoryGuid>",
description = "<description>",
displayText = "<displayText>",
relationGuid = "<relationGuid>",
status = "DRAFT",
}
            },
                classifies = new object[]
            {
null
            },
                examples = new object[]
            {
"<examples>"
            },
                isA = new object[]
            {
null
            },
                preferredTerms = new object[]
            {
null
            },
                preferredToTerms = new object[]
            {
null
            },
                replacedBy = new object[]
            {
null
            },
                replacementTerms = new object[]
            {
null
            },
                seeAlso = new object[]
            {
null
            },
                synonyms = new object[]
            {
null
            },
                translatedTerms = new object[]
            {
null
            },
                translationTerms = new object[]
            {
null
            },
                usage = "<usage>",
                validValues = new object[]
            {
null
            },
                validValuesFor = new object[]
            {
null
            },
                classifications = new object[]
            {
new
{
entityGuid = "<entityGuid>",
entityStatus = "ACTIVE",
removePropagationsOnEntityDelete = true,
validityPeriods = new object[]
{
new
{
endTime = "<endTime>",
startTime = "<startTime>",
timeZone = "<timeZone>",
}
},
source = "<source>",
sourceDetails = new
{
key = new object(),
},
attributes = new
{
key = new object(),
},
typeName = "<typeName>",
lastModifiedTS = "<lastModifiedTS>",
}
            },
                longDescription = "<longDescription>",
                name = "<name>",
                qualifiedName = "<qualifiedName>",
                shortDescription = "<shortDescription>",
                lastModifiedTS = "<lastModifiedTS>",
                guid = "<guid>",
            });
            Response response = await client.UpdateGlossaryTermAsync("<termGuid>", content, includeTermHierarchy: true);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DeleteGlossaryTerm_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewGlossaries client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = await client.DeleteGlossaryTermAsync("<termGuid>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DeleteGlossaryTerm_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewGlossaries client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = await client.DeleteGlossaryTermAsync("<termGuid>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task PartialUpdateGlossaryTerm_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewGlossaries client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            using RequestContent content = RequestContent.Create(new
            {
                key = "<partialUpdates>",
            });
            Response response = await client.PartialUpdateGlossaryTermAsync("<termGuid>", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task PartialUpdateGlossaryTerm_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewGlossaries client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            using RequestContent content = RequestContent.Create(new
            {
                key = "<partialUpdates>",
            });
            Response response = await client.PartialUpdateGlossaryTermAsync("<termGuid>", content, includeTermHierarchy: true);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task CreateGlossaryTerms_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewGlossaries client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            using RequestContent content = RequestContent.Create(new object[]
            {
new object()
            });
            Response response = await client.CreateGlossaryTermsAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task CreateGlossaryTerms_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewGlossaries client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            using RequestContent content = RequestContent.Create(new object[]
            {
new
{
abbreviation = "<abbreviation>",
templateName = new object[]
{
new object()
},
anchor = new
{
displayText = "<displayText>",
glossaryGuid = "<glossaryGuid>",
relationGuid = "<relationGuid>",
},
antonyms = new object[]
{
new
{
description = "<description>",
displayText = "<displayText>",
expression = "<expression>",
relationGuid = "<relationGuid>",
source = "<source>",
status = "DRAFT",
steward = "<steward>",
termGuid = "<termGuid>",
}
},
createTime = 123.45F,
createdBy = "<createdBy>",
updateTime = 123.45F,
updatedBy = "<updatedBy>",
status = "Draft",
resources = new object[]
{
new
{
displayName = "<displayName>",
url = "<url>",
}
},
contacts = new
{
key = new object[]
{
new
{
id = "<id>",
info = "<info>",
}
},
},
attributes = new
{
key = new
{
key = new object(),
},
},
assignedEntities = new object[]
{
new
{
displayText = "<displayText>",
entityStatus = "ACTIVE",
relationshipType = "<relationshipType>",
relationshipAttributes = new
{
attributes = new
{
key = new object(),
},
typeName = "<typeName>",
lastModifiedTS = "<lastModifiedTS>",
},
relationshipGuid = "<relationshipGuid>",
relationshipStatus = "ACTIVE",
guid = "<guid>",
typeName = "<typeName>",
uniqueAttributes = new
{
key = new object(),
},
}
},
categories = new object[]
{
new
{
categoryGuid = "<categoryGuid>",
description = "<description>",
displayText = "<displayText>",
relationGuid = "<relationGuid>",
status = "DRAFT",
}
},
classifies = new object[]
{
null
},
examples = new object[]
{
"<examples>"
},
isA = new object[]
{
null
},
preferredTerms = new object[]
{
null
},
preferredToTerms = new object[]
{
null
},
replacedBy = new object[]
{
null
},
replacementTerms = new object[]
{
null
},
seeAlso = new object[]
{
null
},
synonyms = new object[]
{
null
},
translatedTerms = new object[]
{
null
},
translationTerms = new object[]
{
null
},
usage = "<usage>",
validValues = new object[]
{
null
},
validValuesFor = new object[]
{
null
},
classifications = new object[]
{
new
{
entityGuid = "<entityGuid>",
entityStatus = "ACTIVE",
removePropagationsOnEntityDelete = true,
validityPeriods = new object[]
{
new
{
endTime = "<endTime>",
startTime = "<startTime>",
timeZone = "<timeZone>",
}
},
source = "<source>",
sourceDetails = new
{
key = new object(),
},
attributes = new
{
key = new object(),
},
typeName = "<typeName>",
lastModifiedTS = "<lastModifiedTS>",
}
},
longDescription = "<longDescription>",
name = "<name>",
qualifiedName = "<qualifiedName>",
shortDescription = "<shortDescription>",
lastModifiedTS = "<lastModifiedTS>",
guid = "<guid>",
}
            });
            Response response = await client.CreateGlossaryTermsAsync(content, includeTermHierarchy: true);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetEntitiesAssignedWithTerm_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewGlossaries client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = await client.GetEntitiesAssignedWithTermAsync("<termGuid>", null, null, null, null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetEntitiesAssignedWithTerm_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewGlossaries client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = await client.GetEntitiesAssignedWithTermAsync("<termGuid>", 1234, 1234, "<sort>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task AssignTermToEntities_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewGlossaries client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            using RequestContent content = RequestContent.Create(new object[]
            {
new object()
            });
            Response response = await client.AssignTermToEntitiesAsync("<termGuid>", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task AssignTermToEntities_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewGlossaries client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            using RequestContent content = RequestContent.Create(new object[]
            {
new
{
displayText = "<displayText>",
entityStatus = "ACTIVE",
relationshipType = "<relationshipType>",
relationshipAttributes = new
{
attributes = new
{
key = new object(),
},
typeName = "<typeName>",
lastModifiedTS = "<lastModifiedTS>",
},
relationshipGuid = "<relationshipGuid>",
relationshipStatus = "ACTIVE",
guid = "<guid>",
typeName = "<typeName>",
uniqueAttributes = new
{
key = new object(),
},
}
            });
            Response response = await client.AssignTermToEntitiesAsync("<termGuid>", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task RemoveTermAssignmentFromEntities_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewGlossaries client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            using RequestContent content = RequestContent.Create(new object[]
            {
new object()
            });
            Response response = await client.RemoveTermAssignmentFromEntitiesAsync("<termGuid>", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task RemoveTermAssignmentFromEntities_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewGlossaries client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            using RequestContent content = RequestContent.Create(new object[]
            {
new
{
displayText = "<displayText>",
entityStatus = "ACTIVE",
relationshipType = "<relationshipType>",
relationshipAttributes = new
{
attributes = new
{
key = new object(),
},
typeName = "<typeName>",
lastModifiedTS = "<lastModifiedTS>",
},
relationshipGuid = "<relationshipGuid>",
relationshipStatus = "ACTIVE",
guid = "<guid>",
typeName = "<typeName>",
uniqueAttributes = new
{
key = new object(),
},
}
            });
            Response response = await client.RemoveTermAssignmentFromEntitiesAsync("<termGuid>", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DeleteTermAssignmentFromEntities_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewGlossaries client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            using RequestContent content = RequestContent.Create(new object[]
            {
new object()
            });
            Response response = await client.DeleteTermAssignmentFromEntitiesAsync("<termGuid>", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DeleteTermAssignmentFromEntities_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewGlossaries client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            using RequestContent content = RequestContent.Create(new object[]
            {
new
{
displayText = "<displayText>",
entityStatus = "ACTIVE",
relationshipType = "<relationshipType>",
relationshipAttributes = new
{
attributes = new
{
key = new object(),
},
typeName = "<typeName>",
lastModifiedTS = "<lastModifiedTS>",
},
relationshipGuid = "<relationshipGuid>",
relationshipStatus = "ACTIVE",
guid = "<guid>",
typeName = "<typeName>",
uniqueAttributes = new
{
key = new object(),
},
}
            });
            Response response = await client.DeleteTermAssignmentFromEntitiesAsync("<termGuid>", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetRelatedTerms_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewGlossaries client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = await client.GetRelatedTermsAsync("<termGuid>", null, null, null, null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetRelatedTerms_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewGlossaries client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = await client.GetRelatedTermsAsync("<termGuid>", 1234, 1234, "<sort>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetGlossary_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewGlossaries client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = await client.GetGlossaryAsync("<glossaryGuid>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetGlossary_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewGlossaries client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = await client.GetGlossaryAsync("<glossaryGuid>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task UpdateGlossary_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewGlossaries client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.UpdateGlossaryAsync("<glossaryGuid>", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task UpdateGlossary_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewGlossaries client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            using RequestContent content = RequestContent.Create(new
            {
                categories = new object[]
            {
new
{
categoryGuid = "<categoryGuid>",
description = "<description>",
displayText = "<displayText>",
parentCategoryGuid = "<parentCategoryGuid>",
relationGuid = "<relationGuid>",
}
            },
                language = "<language>",
                terms = new object[]
            {
new
{
description = "<description>",
displayText = "<displayText>",
expression = "<expression>",
relationGuid = "<relationGuid>",
source = "<source>",
status = "DRAFT",
steward = "<steward>",
termGuid = "<termGuid>",
}
            },
                usage = "<usage>",
                classifications = new object[]
            {
new
{
entityGuid = "<entityGuid>",
entityStatus = "ACTIVE",
removePropagationsOnEntityDelete = true,
validityPeriods = new object[]
{
new
{
endTime = "<endTime>",
startTime = "<startTime>",
timeZone = "<timeZone>",
}
},
source = "<source>",
sourceDetails = new
{
key = new object(),
},
attributes = new
{
key = new object(),
},
typeName = "<typeName>",
lastModifiedTS = "<lastModifiedTS>",
}
            },
                longDescription = "<longDescription>",
                name = "<name>",
                qualifiedName = "<qualifiedName>",
                shortDescription = "<shortDescription>",
                lastModifiedTS = "<lastModifiedTS>",
                guid = "<guid>",
            });
            Response response = await client.UpdateGlossaryAsync("<glossaryGuid>", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DeleteGlossary_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewGlossaries client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = await client.DeleteGlossaryAsync("<glossaryGuid>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DeleteGlossary_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewGlossaries client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = await client.DeleteGlossaryAsync("<glossaryGuid>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetGlossaryCategories_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewGlossaries client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = await client.GetGlossaryCategoriesAsync("<glossaryGuid>", null, null, null, null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetGlossaryCategories_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewGlossaries client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = await client.GetGlossaryCategoriesAsync("<glossaryGuid>", 1234, 1234, "<sort>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetGlossaryCategoriesHeaders_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewGlossaries client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = await client.GetGlossaryCategoriesHeadersAsync("<glossaryGuid>", null, null, null, null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetGlossaryCategoriesHeaders_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewGlossaries client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = await client.GetGlossaryCategoriesHeadersAsync("<glossaryGuid>", 1234, 1234, "<sort>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetDetailedGlossary_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewGlossaries client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = await client.GetDetailedGlossaryAsync("<glossaryGuid>", null, null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetDetailedGlossary_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewGlossaries client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = await client.GetDetailedGlossaryAsync("<glossaryGuid>", true, null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task PartialUpdateGlossary_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewGlossaries client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            using RequestContent content = RequestContent.Create(new
            {
                key = "<partialUpdates>",
            });
            Response response = await client.PartialUpdateGlossaryAsync("<glossaryGuid>", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task PartialUpdateGlossary_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewGlossaries client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            using RequestContent content = RequestContent.Create(new
            {
                key = "<partialUpdates>",
            });
            Response response = await client.PartialUpdateGlossaryAsync("<glossaryGuid>", content, includeTermHierarchy: true);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetGlossaryTerms_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewGlossaries client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = await client.GetGlossaryTermsAsync("<glossaryGuid>", null, null, null, null, null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetGlossaryTerms_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewGlossaries client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = await client.GetGlossaryTermsAsync("<glossaryGuid>", true, 1234, 1234, "<sort>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetGlossaryTermHeaders_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewGlossaries client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = await client.GetGlossaryTermHeadersAsync("<glossaryGuid>", null, null, null, null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetGlossaryTermHeaders_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewGlossaries client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = await client.GetGlossaryTermHeadersAsync("<glossaryGuid>", 1234, 1234, "<sort>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetImportCsvOperationStatus_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewGlossaries client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = await client.GetImportCsvOperationStatusAsync("<operationGuid>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetImportCsvOperationStatus_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewGlossaries client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = await client.GetImportCsvOperationStatusAsync("<operationGuid>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task ExportGlossaryTermsAsCsv_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewGlossaries client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            using RequestContent content = RequestContent.Create(new object[]
            {
"<termGuids>"
            });
            Response response = await client.ExportGlossaryTermsAsCsvAsync("<glossaryGuid>", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task ExportGlossaryTermsAsCsv_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewGlossaries client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            using RequestContent content = RequestContent.Create(new object[]
            {
"<termGuids>"
            });
            Response response = await client.ExportGlossaryTermsAsCsvAsync("<glossaryGuid>", content, includeTermHierarchy: true);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetTermsByGlossaryName_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewGlossaries client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = await client.GetTermsByGlossaryNameAsync("<glossaryName>", null, null, null, null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetTermsByGlossaryName_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewGlossaries client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            Response response = await client.GetTermsByGlossaryNameAsync("<glossaryName>", 1234, 1234, true, null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task ImportGlossaryTermsViaCsv_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewGlossaries client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            using RequestContent content = RequestContent.Create(File.OpenRead("<filePath>"));
            Operation<BinaryData> operation = await client.ImportGlossaryTermsViaCsvAsync(WaitUntil.Completed, "<glossaryGuid>", content, "multipart/form-data");
            BinaryData responseData = operation.Value;
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task ImportGlossaryTermsViaCsv_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewGlossaries client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            using RequestContent content = RequestContent.Create(File.OpenRead("<filePath>"));
            Operation<BinaryData> operation = await client.ImportGlossaryTermsViaCsvAsync(WaitUntil.Completed, "<glossaryGuid>", content, "multipart/form-data", includeTermHierarchy: true);
            BinaryData responseData = operation.Value;
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task ImportGlossaryTermsViaCsvByGlossaryName_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewGlossaries client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            using RequestContent content = RequestContent.Create(File.OpenRead("<filePath>"));
            Operation<BinaryData> operation = await client.ImportGlossaryTermsViaCsvByGlossaryNameAsync(WaitUntil.Completed, "<glossaryName>", content, "multipart/form-data");
            BinaryData responseData = operation.Value;
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task ImportGlossaryTermsViaCsvByGlossaryName_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewGlossaries client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

            using RequestContent content = RequestContent.Create(File.OpenRead("<filePath>"));
            Operation<BinaryData> operation = await client.ImportGlossaryTermsViaCsvByGlossaryNameAsync(WaitUntil.Completed, "<glossaryName>", content, "multipart/form-data", includeTermHierarchy: true);
            BinaryData responseData = operation.Value;
        }
    }
}
