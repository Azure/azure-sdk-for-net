// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Analytics.Purview.Catalog.Tests
{
    public partial class PurviewTypesTests : AnalyticsPurviewCatalogTestBase
    {
        public PurviewTypesTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetBusinessMetadataDefByGuid_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewTypes client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewTypesClient();

            Response response = await client.GetBusinessMetadataDefByGuidAsync("<guid>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetBusinessMetadataDefByGuid_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewTypes client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewTypesClient();

            Response response = await client.GetBusinessMetadataDefByGuidAsync("<guid>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetBusinessMetadataDefByName_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewTypes client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewTypesClient();

            Response response = await client.GetBusinessMetadataDefByNameAsync("<name>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetBusinessMetadataDefByName_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewTypes client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewTypesClient();

            Response response = await client.GetBusinessMetadataDefByNameAsync("<name>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetClassificationDefByGuid_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewTypes client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewTypesClient();

            Response response = await client.GetClassificationDefByGuidAsync("<guid>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetClassificationDefByGuid_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewTypes client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewTypesClient();

            Response response = await client.GetClassificationDefByGuidAsync("<guid>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetClassificationDefByName_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewTypes client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewTypesClient();

            Response response = await client.GetClassificationDefByNameAsync("<name>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetClassificationDefByName_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewTypes client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewTypesClient();

            Response response = await client.GetClassificationDefByNameAsync("<name>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetEntityDefinitionByGuid_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewTypes client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewTypesClient();

            Response response = await client.GetEntityDefinitionByGuidAsync("<guid>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetEntityDefinitionByGuid_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewTypes client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewTypesClient();

            Response response = await client.GetEntityDefinitionByGuidAsync("<guid>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetEntityDefinitionByName_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewTypes client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewTypesClient();

            Response response = await client.GetEntityDefinitionByNameAsync("<name>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetEntityDefinitionByName_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewTypes client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewTypesClient();

            Response response = await client.GetEntityDefinitionByNameAsync("<name>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetEnumDefByGuid_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewTypes client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewTypesClient();

            Response response = await client.GetEnumDefByGuidAsync("<guid>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetEnumDefByGuid_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewTypes client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewTypesClient();

            Response response = await client.GetEnumDefByGuidAsync("<guid>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetEnumDefByName_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewTypes client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewTypesClient();

            Response response = await client.GetEnumDefByNameAsync("<name>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetEnumDefByName_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewTypes client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewTypesClient();

            Response response = await client.GetEnumDefByNameAsync("<name>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetRelationshipDefByGuid_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewTypes client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewTypesClient();

            Response response = await client.GetRelationshipDefByGuidAsync("<guid>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetRelationshipDefByGuid_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewTypes client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewTypesClient();

            Response response = await client.GetRelationshipDefByGuidAsync("<guid>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetRelationshipDefByName_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewTypes client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewTypesClient();

            Response response = await client.GetRelationshipDefByNameAsync("<name>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetRelationshipDefByName_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewTypes client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewTypesClient();

            Response response = await client.GetRelationshipDefByNameAsync("<name>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetStructDefByGuid_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewTypes client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewTypesClient();

            Response response = await client.GetStructDefByGuidAsync("<guid>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetStructDefByGuid_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewTypes client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewTypesClient();

            Response response = await client.GetStructDefByGuidAsync("<guid>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetStructDefByName_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewTypes client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewTypesClient();

            Response response = await client.GetStructDefByNameAsync("<name>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetStructDefByName_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewTypes client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewTypesClient();

            Response response = await client.GetStructDefByNameAsync("<name>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetTypeDefinitionByGuid_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewTypes client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewTypesClient();

            Response response = await client.GetTypeDefinitionByGuidAsync("<guid>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetTypeDefinitionByGuid_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewTypes client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewTypesClient();

            Response response = await client.GetTypeDefinitionByGuidAsync("<guid>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetTypeDefinitionByName_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewTypes client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewTypesClient();

            Response response = await client.GetTypeDefinitionByNameAsync("<name>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetTypeDefinitionByName_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewTypes client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewTypesClient();

            Response response = await client.GetTypeDefinitionByNameAsync("<name>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DeleteTypeByName_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewTypes client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewTypesClient();

            Response response = await client.DeleteTypeByNameAsync("<name>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DeleteTypeByName_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewTypes client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewTypesClient();

            Response response = await client.DeleteTypeByNameAsync("<name>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetAllTypeDefinitions_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewTypes client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewTypesClient();

            Response response = await client.GetAllTypeDefinitionsAsync(null, null, null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetAllTypeDefinitions_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewTypes client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewTypesClient();

            Response response = await client.GetAllTypeDefinitionsAsync(true, "enum", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task CreateTypeDefinitions_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewTypes client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewTypesClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.CreateTypeDefinitionsAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task CreateTypeDefinitions_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewTypes client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewTypesClient();

            using RequestContent content = RequestContent.Create(new
            {
                businessMetadataDefs = new object[]
            {
new
{
attributeDefs = new object[]
{
new
{
cardinality = "SINGLE",
constraints = new object[]
{
new Dictionary<string, object>
{
["params"] = new
{
key = new object(),
},
["type"] = "<type>"
}
},
defaultValue = "<defaultValue>",
description = "<description>",
includeInNotification = true,
isIndexable = true,
isOptional = true,
isUnique = true,
name = "<name>",
options = new
{
key = "<options>",
},
typeName = "<typeName>",
valuesMaxCount = 1234,
valuesMinCount = 1234,
}
},
category = "PRIMITIVE",
createTime = 123.45F,
createdBy = "<createdBy>",
dateFormatter = new
{
availableLocales = new object[]
{
"<availableLocales>"
},
calendar = 123.45F,
lenient = true,
numberFormat = new
{
availableLocales = new object[]
{
"<availableLocales>"
},
currency = "<currency>",
groupingUsed = true,
maximumFractionDigits = 1234,
maximumIntegerDigits = 1234,
minimumFractionDigits = 1234,
minimumIntegerDigits = 1234,
parseIntegerOnly = true,
roundingMode = "UP",
},
timeZone = new Dictionary<string, object>
{
["dstSavings"] = 1234,
["id"] = "<id>",
["availableIds"] = new object[]
{
"<availableIds>"
},
["default"] = null,
["displayName"] = "<displayName>",
["rawOffset"] = 1234
},
},
description = "<description>",
guid = "<guid>",
name = "<name>",
options = new
{
key = "<options>",
},
serviceType = "<serviceType>",
typeVersion = "<typeVersion>",
updateTime = 123.45F,
updatedBy = "<updatedBy>",
version = 123.45F,
lastModifiedTS = "<lastModifiedTS>",
}
            },
                classificationDefs = new object[]
            {
new
{
entityTypes = new object[]
{
"<entityTypes>"
},
subTypes = new object[]
{
"<subTypes>"
},
superTypes = new object[]
{
"<superTypes>"
},
attributeDefs = new object[]
{
null
},
category = "PRIMITIVE",
createTime = 123.45F,
createdBy = "<createdBy>",
description = "<description>",
guid = "<guid>",
name = "<name>",
options = new
{
key = "<options>",
},
serviceType = "<serviceType>",
typeVersion = "<typeVersion>",
updateTime = 123.45F,
updatedBy = "<updatedBy>",
version = 123.45F,
lastModifiedTS = "<lastModifiedTS>",
}
            },
                entityDefs = new object[]
            {
new
{
subTypes = new object[]
{
"<subTypes>"
},
superTypes = new object[]
{
"<superTypes>"
},
relationshipAttributeDefs = new object[]
{
new
{
isLegacyAttribute = true,
relationshipTypeName = "<relationshipTypeName>",
cardinality = "SINGLE",
constraints = new object[]
{
null
},
defaultValue = "<defaultValue>",
description = "<description>",
includeInNotification = true,
isIndexable = true,
isOptional = true,
isUnique = true,
name = "<name>",
options = new
{
key = "<options>",
},
typeName = "<typeName>",
valuesMaxCount = 1234,
valuesMinCount = 1234,
}
},
attributeDefs = new object[]
{
null
},
category = "PRIMITIVE",
createTime = 123.45F,
createdBy = "<createdBy>",
description = "<description>",
guid = "<guid>",
name = "<name>",
options = new
{
key = "<options>",
},
serviceType = "<serviceType>",
typeVersion = "<typeVersion>",
updateTime = 123.45F,
updatedBy = "<updatedBy>",
version = 123.45F,
lastModifiedTS = "<lastModifiedTS>",
}
            },
                enumDefs = new object[]
            {
new
{
defaultValue = "<defaultValue>",
elementDefs = new object[]
{
new
{
description = "<description>",
ordinal = 123.45F,
value = "<value>",
}
},
category = "PRIMITIVE",
createTime = 123.45F,
createdBy = "<createdBy>",
description = "<description>",
guid = "<guid>",
name = "<name>",
options = new
{
key = "<options>",
},
serviceType = "<serviceType>",
typeVersion = "<typeVersion>",
updateTime = 123.45F,
updatedBy = "<updatedBy>",
version = 123.45F,
lastModifiedTS = "<lastModifiedTS>",
}
            },
                relationshipDefs = new object[]
            {
new
{
endDef1 = new
{
cardinality = "SINGLE",
description = "<description>",
isContainer = true,
isLegacyAttribute = true,
name = "<name>",
type = "<type>",
},
relationshipCategory = "ASSOCIATION",
relationshipLabel = "<relationshipLabel>",
attributeDefs = new object[]
{
null
},
category = "PRIMITIVE",
createTime = 123.45F,
createdBy = "<createdBy>",
description = "<description>",
guid = "<guid>",
name = "<name>",
options = new
{
key = "<options>",
},
serviceType = "<serviceType>",
typeVersion = "<typeVersion>",
updateTime = 123.45F,
updatedBy = "<updatedBy>",
version = 123.45F,
lastModifiedTS = "<lastModifiedTS>",
}
            },
                structDefs = new object[]
            {
new
{
attributeDefs = new object[]
{
null
},
category = "PRIMITIVE",
createTime = 123.45F,
createdBy = "<createdBy>",
description = "<description>",
guid = "<guid>",
name = "<name>",
options = new
{
key = "<options>",
},
serviceType = "<serviceType>",
typeVersion = "<typeVersion>",
updateTime = 123.45F,
updatedBy = "<updatedBy>",
version = 123.45F,
lastModifiedTS = "<lastModifiedTS>",
}
            },
                termTemplateDefs = new object[]
            {
new
{
attributeDefs = new object[]
{
null
},
category = "PRIMITIVE",
createTime = 123.45F,
createdBy = "<createdBy>",
description = "<description>",
guid = "<guid>",
name = "<name>",
options = new
{
key = "<options>",
},
serviceType = "<serviceType>",
typeVersion = "<typeVersion>",
updateTime = 123.45F,
updatedBy = "<updatedBy>",
version = 123.45F,
lastModifiedTS = "<lastModifiedTS>",
}
            },
            });
            Response response = await client.CreateTypeDefinitionsAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task UpdateAtlasTypeDefinitions_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewTypes client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewTypesClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.UpdateAtlasTypeDefinitionsAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task UpdateAtlasTypeDefinitions_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewTypes client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewTypesClient();

            using RequestContent content = RequestContent.Create(new
            {
                businessMetadataDefs = new object[]
            {
new
{
attributeDefs = new object[]
{
new
{
cardinality = "SINGLE",
constraints = new object[]
{
new Dictionary<string, object>
{
["params"] = new
{
key = new object(),
},
["type"] = "<type>"
}
},
defaultValue = "<defaultValue>",
description = "<description>",
includeInNotification = true,
isIndexable = true,
isOptional = true,
isUnique = true,
name = "<name>",
options = new
{
key = "<options>",
},
typeName = "<typeName>",
valuesMaxCount = 1234,
valuesMinCount = 1234,
}
},
category = "PRIMITIVE",
createTime = 123.45F,
createdBy = "<createdBy>",
dateFormatter = new
{
availableLocales = new object[]
{
"<availableLocales>"
},
calendar = 123.45F,
lenient = true,
numberFormat = new
{
availableLocales = new object[]
{
"<availableLocales>"
},
currency = "<currency>",
groupingUsed = true,
maximumFractionDigits = 1234,
maximumIntegerDigits = 1234,
minimumFractionDigits = 1234,
minimumIntegerDigits = 1234,
parseIntegerOnly = true,
roundingMode = "UP",
},
timeZone = new Dictionary<string, object>
{
["dstSavings"] = 1234,
["id"] = "<id>",
["availableIds"] = new object[]
{
"<availableIds>"
},
["default"] = null,
["displayName"] = "<displayName>",
["rawOffset"] = 1234
},
},
description = "<description>",
guid = "<guid>",
name = "<name>",
options = new
{
key = "<options>",
},
serviceType = "<serviceType>",
typeVersion = "<typeVersion>",
updateTime = 123.45F,
updatedBy = "<updatedBy>",
version = 123.45F,
lastModifiedTS = "<lastModifiedTS>",
}
            },
                classificationDefs = new object[]
            {
new
{
entityTypes = new object[]
{
"<entityTypes>"
},
subTypes = new object[]
{
"<subTypes>"
},
superTypes = new object[]
{
"<superTypes>"
},
attributeDefs = new object[]
{
null
},
category = "PRIMITIVE",
createTime = 123.45F,
createdBy = "<createdBy>",
description = "<description>",
guid = "<guid>",
name = "<name>",
options = new
{
key = "<options>",
},
serviceType = "<serviceType>",
typeVersion = "<typeVersion>",
updateTime = 123.45F,
updatedBy = "<updatedBy>",
version = 123.45F,
lastModifiedTS = "<lastModifiedTS>",
}
            },
                entityDefs = new object[]
            {
new
{
subTypes = new object[]
{
"<subTypes>"
},
superTypes = new object[]
{
"<superTypes>"
},
relationshipAttributeDefs = new object[]
{
new
{
isLegacyAttribute = true,
relationshipTypeName = "<relationshipTypeName>",
cardinality = "SINGLE",
constraints = new object[]
{
null
},
defaultValue = "<defaultValue>",
description = "<description>",
includeInNotification = true,
isIndexable = true,
isOptional = true,
isUnique = true,
name = "<name>",
options = new
{
key = "<options>",
},
typeName = "<typeName>",
valuesMaxCount = 1234,
valuesMinCount = 1234,
}
},
attributeDefs = new object[]
{
null
},
category = "PRIMITIVE",
createTime = 123.45F,
createdBy = "<createdBy>",
description = "<description>",
guid = "<guid>",
name = "<name>",
options = new
{
key = "<options>",
},
serviceType = "<serviceType>",
typeVersion = "<typeVersion>",
updateTime = 123.45F,
updatedBy = "<updatedBy>",
version = 123.45F,
lastModifiedTS = "<lastModifiedTS>",
}
            },
                enumDefs = new object[]
            {
new
{
defaultValue = "<defaultValue>",
elementDefs = new object[]
{
new
{
description = "<description>",
ordinal = 123.45F,
value = "<value>",
}
},
category = "PRIMITIVE",
createTime = 123.45F,
createdBy = "<createdBy>",
description = "<description>",
guid = "<guid>",
name = "<name>",
options = new
{
key = "<options>",
},
serviceType = "<serviceType>",
typeVersion = "<typeVersion>",
updateTime = 123.45F,
updatedBy = "<updatedBy>",
version = 123.45F,
lastModifiedTS = "<lastModifiedTS>",
}
            },
                relationshipDefs = new object[]
            {
new
{
endDef1 = new
{
cardinality = "SINGLE",
description = "<description>",
isContainer = true,
isLegacyAttribute = true,
name = "<name>",
type = "<type>",
},
relationshipCategory = "ASSOCIATION",
relationshipLabel = "<relationshipLabel>",
attributeDefs = new object[]
{
null
},
category = "PRIMITIVE",
createTime = 123.45F,
createdBy = "<createdBy>",
description = "<description>",
guid = "<guid>",
name = "<name>",
options = new
{
key = "<options>",
},
serviceType = "<serviceType>",
typeVersion = "<typeVersion>",
updateTime = 123.45F,
updatedBy = "<updatedBy>",
version = 123.45F,
lastModifiedTS = "<lastModifiedTS>",
}
            },
                structDefs = new object[]
            {
new
{
attributeDefs = new object[]
{
null
},
category = "PRIMITIVE",
createTime = 123.45F,
createdBy = "<createdBy>",
description = "<description>",
guid = "<guid>",
name = "<name>",
options = new
{
key = "<options>",
},
serviceType = "<serviceType>",
typeVersion = "<typeVersion>",
updateTime = 123.45F,
updatedBy = "<updatedBy>",
version = 123.45F,
lastModifiedTS = "<lastModifiedTS>",
}
            },
                termTemplateDefs = new object[]
            {
new
{
attributeDefs = new object[]
{
null
},
category = "PRIMITIVE",
createTime = 123.45F,
createdBy = "<createdBy>",
description = "<description>",
guid = "<guid>",
name = "<name>",
options = new
{
key = "<options>",
},
serviceType = "<serviceType>",
typeVersion = "<typeVersion>",
updateTime = 123.45F,
updatedBy = "<updatedBy>",
version = 123.45F,
lastModifiedTS = "<lastModifiedTS>",
}
            },
            });
            Response response = await client.UpdateAtlasTypeDefinitionsAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DeleteTypeDefinitions_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewTypes client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewTypesClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.DeleteTypeDefinitionsAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DeleteTypeDefinitions_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewTypes client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewTypesClient();

            using RequestContent content = RequestContent.Create(new
            {
                businessMetadataDefs = new object[]
            {
new
{
attributeDefs = new object[]
{
new
{
cardinality = "SINGLE",
constraints = new object[]
{
new Dictionary<string, object>
{
["params"] = new
{
key = new object(),
},
["type"] = "<type>"
}
},
defaultValue = "<defaultValue>",
description = "<description>",
includeInNotification = true,
isIndexable = true,
isOptional = true,
isUnique = true,
name = "<name>",
options = new
{
key = "<options>",
},
typeName = "<typeName>",
valuesMaxCount = 1234,
valuesMinCount = 1234,
}
},
category = "PRIMITIVE",
createTime = 123.45F,
createdBy = "<createdBy>",
dateFormatter = new
{
availableLocales = new object[]
{
"<availableLocales>"
},
calendar = 123.45F,
lenient = true,
numberFormat = new
{
availableLocales = new object[]
{
"<availableLocales>"
},
currency = "<currency>",
groupingUsed = true,
maximumFractionDigits = 1234,
maximumIntegerDigits = 1234,
minimumFractionDigits = 1234,
minimumIntegerDigits = 1234,
parseIntegerOnly = true,
roundingMode = "UP",
},
timeZone = new Dictionary<string, object>
{
["dstSavings"] = 1234,
["id"] = "<id>",
["availableIds"] = new object[]
{
"<availableIds>"
},
["default"] = null,
["displayName"] = "<displayName>",
["rawOffset"] = 1234
},
},
description = "<description>",
guid = "<guid>",
name = "<name>",
options = new
{
key = "<options>",
},
serviceType = "<serviceType>",
typeVersion = "<typeVersion>",
updateTime = 123.45F,
updatedBy = "<updatedBy>",
version = 123.45F,
lastModifiedTS = "<lastModifiedTS>",
}
            },
                classificationDefs = new object[]
            {
new
{
entityTypes = new object[]
{
"<entityTypes>"
},
subTypes = new object[]
{
"<subTypes>"
},
superTypes = new object[]
{
"<superTypes>"
},
attributeDefs = new object[]
{
null
},
category = "PRIMITIVE",
createTime = 123.45F,
createdBy = "<createdBy>",
description = "<description>",
guid = "<guid>",
name = "<name>",
options = new
{
key = "<options>",
},
serviceType = "<serviceType>",
typeVersion = "<typeVersion>",
updateTime = 123.45F,
updatedBy = "<updatedBy>",
version = 123.45F,
lastModifiedTS = "<lastModifiedTS>",
}
            },
                entityDefs = new object[]
            {
new
{
subTypes = new object[]
{
"<subTypes>"
},
superTypes = new object[]
{
"<superTypes>"
},
relationshipAttributeDefs = new object[]
{
new
{
isLegacyAttribute = true,
relationshipTypeName = "<relationshipTypeName>",
cardinality = "SINGLE",
constraints = new object[]
{
null
},
defaultValue = "<defaultValue>",
description = "<description>",
includeInNotification = true,
isIndexable = true,
isOptional = true,
isUnique = true,
name = "<name>",
options = new
{
key = "<options>",
},
typeName = "<typeName>",
valuesMaxCount = 1234,
valuesMinCount = 1234,
}
},
attributeDefs = new object[]
{
null
},
category = "PRIMITIVE",
createTime = 123.45F,
createdBy = "<createdBy>",
description = "<description>",
guid = "<guid>",
name = "<name>",
options = new
{
key = "<options>",
},
serviceType = "<serviceType>",
typeVersion = "<typeVersion>",
updateTime = 123.45F,
updatedBy = "<updatedBy>",
version = 123.45F,
lastModifiedTS = "<lastModifiedTS>",
}
            },
                enumDefs = new object[]
            {
new
{
defaultValue = "<defaultValue>",
elementDefs = new object[]
{
new
{
description = "<description>",
ordinal = 123.45F,
value = "<value>",
}
},
category = "PRIMITIVE",
createTime = 123.45F,
createdBy = "<createdBy>",
description = "<description>",
guid = "<guid>",
name = "<name>",
options = new
{
key = "<options>",
},
serviceType = "<serviceType>",
typeVersion = "<typeVersion>",
updateTime = 123.45F,
updatedBy = "<updatedBy>",
version = 123.45F,
lastModifiedTS = "<lastModifiedTS>",
}
            },
                relationshipDefs = new object[]
            {
new
{
endDef1 = new
{
cardinality = "SINGLE",
description = "<description>",
isContainer = true,
isLegacyAttribute = true,
name = "<name>",
type = "<type>",
},
relationshipCategory = "ASSOCIATION",
relationshipLabel = "<relationshipLabel>",
attributeDefs = new object[]
{
null
},
category = "PRIMITIVE",
createTime = 123.45F,
createdBy = "<createdBy>",
description = "<description>",
guid = "<guid>",
name = "<name>",
options = new
{
key = "<options>",
},
serviceType = "<serviceType>",
typeVersion = "<typeVersion>",
updateTime = 123.45F,
updatedBy = "<updatedBy>",
version = 123.45F,
lastModifiedTS = "<lastModifiedTS>",
}
            },
                structDefs = new object[]
            {
new
{
attributeDefs = new object[]
{
null
},
category = "PRIMITIVE",
createTime = 123.45F,
createdBy = "<createdBy>",
description = "<description>",
guid = "<guid>",
name = "<name>",
options = new
{
key = "<options>",
},
serviceType = "<serviceType>",
typeVersion = "<typeVersion>",
updateTime = 123.45F,
updatedBy = "<updatedBy>",
version = 123.45F,
lastModifiedTS = "<lastModifiedTS>",
}
            },
                termTemplateDefs = new object[]
            {
new
{
attributeDefs = new object[]
{
null
},
category = "PRIMITIVE",
createTime = 123.45F,
createdBy = "<createdBy>",
description = "<description>",
guid = "<guid>",
name = "<name>",
options = new
{
key = "<options>",
},
serviceType = "<serviceType>",
typeVersion = "<typeVersion>",
updateTime = 123.45F,
updatedBy = "<updatedBy>",
version = 123.45F,
lastModifiedTS = "<lastModifiedTS>",
}
            },
            });
            Response response = await client.DeleteTypeDefinitionsAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetTypeDefinitionHeaders_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewTypes client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewTypesClient();

            Response response = await client.GetTypeDefinitionHeadersAsync(null, null, null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetTypeDefinitionHeaders_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewTypes client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewTypesClient();

            Response response = await client.GetTypeDefinitionHeadersAsync(true, "enum", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetTermTemplateDefByGuid_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewTypes client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewTypesClient();

            Response response = await client.GetTermTemplateDefByGuidAsync("<guid>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetTermTemplateDefByGuid_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewTypes client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewTypesClient();

            Response response = await client.GetTermTemplateDefByGuidAsync("<guid>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetTermTemplateDefByName_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewTypes client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewTypesClient();

            Response response = await client.GetTermTemplateDefByNameAsync("<name>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetTermTemplateDefByName_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewTypes client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewTypesClient();

            Response response = await client.GetTermTemplateDefByNameAsync("<name>", null);
        }
    }
}
