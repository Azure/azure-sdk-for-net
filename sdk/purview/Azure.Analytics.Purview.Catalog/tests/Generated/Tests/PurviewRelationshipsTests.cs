// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Analytics.Purview.Catalog.Tests
{
    public partial class PurviewRelationshipsTests : AnalyticsPurviewCatalogTestBase
    {
        public PurviewRelationshipsTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Create_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewRelationships client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewRelationshipsClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.CreateAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Create_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewRelationships client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewRelationshipsClient();

            using RequestContent content = RequestContent.Create(new
            {
                createTime = 123.45F,
                createdBy = "<createdBy>",
                end1 = new
                {
                    guid = "<guid>",
                    typeName = "<typeName>",
                    uniqueAttributes = new
                    {
                        key = new object(),
                    },
                },
                guid = "<guid>",
                homeId = "<homeId>",
                label = "<label>",
                provenanceType = 123.45F,
                status = "ACTIVE",
                updateTime = 123.45F,
                updatedBy = "<updatedBy>",
                version = 123.45F,
                attributes = new
                {
                    key = new object(),
                },
                typeName = "<typeName>",
                lastModifiedTS = "<lastModifiedTS>",
            });
            Response response = await client.CreateAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Update_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewRelationships client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewRelationshipsClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.UpdateAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Update_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewRelationships client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewRelationshipsClient();

            using RequestContent content = RequestContent.Create(new
            {
                createTime = 123.45F,
                createdBy = "<createdBy>",
                end1 = new
                {
                    guid = "<guid>",
                    typeName = "<typeName>",
                    uniqueAttributes = new
                    {
                        key = new object(),
                    },
                },
                guid = "<guid>",
                homeId = "<homeId>",
                label = "<label>",
                provenanceType = 123.45F,
                status = "ACTIVE",
                updateTime = 123.45F,
                updatedBy = "<updatedBy>",
                version = 123.45F,
                attributes = new
                {
                    key = new object(),
                },
                typeName = "<typeName>",
                lastModifiedTS = "<lastModifiedTS>",
            });
            Response response = await client.UpdateAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetPurviewRelationship_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewRelationships client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewRelationshipsClient();

            Response response = await client.GetPurviewRelationshipAsync("<guid>", null, null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetPurviewRelationship_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewRelationships client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewRelationshipsClient();

            Response response = await client.GetPurviewRelationshipAsync("<guid>", true, null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Delete_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewRelationships client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewRelationshipsClient();

            Response response = await client.DeleteAsync("<guid>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Delete_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewRelationships client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewRelationshipsClient();

            Response response = await client.DeleteAsync("<guid>");
        }
    }
}
