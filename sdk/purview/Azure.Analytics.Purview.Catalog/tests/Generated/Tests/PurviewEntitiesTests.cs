// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Analytics.Purview.Catalog.Tests
{
    public partial class PurviewEntitiesTests : AnalyticsPurviewCatalogTestBase
    {
        public PurviewEntitiesTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task CreateOrUpdate_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewEntities client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.CreateOrUpdateAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task CreateOrUpdate_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewEntities client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

            using RequestContent content = RequestContent.Create(new
            {
                entity = new
                {
                    businessAttributes = new
                    {
                        key = new object(),
                    },
                    classifications = new object[]
            {
new
{
entityGuid = "<entityGuid>",
entityStatus = "ACTIVE",
removePropagationsOnEntityDelete = true,
validityPeriods = new object[]
{
new
{
endTime = "<endTime>",
startTime = "<startTime>",
timeZone = "<timeZone>",
}
},
source = "<source>",
sourceDetails = new
{
key = new object(),
},
attributes = new
{
key = new object(),
},
typeName = "<typeName>",
lastModifiedTS = "<lastModifiedTS>",
}
            },
                    createTime = 123.45F,
                    createdBy = "<createdBy>",
                    customAttributes = new
                    {
                        key = "<customAttributes>",
                    },
                    guid = "<guid>",
                    homeId = "<homeId>",
                    isIncomplete = true,
                    labels = new object[]
            {
"<labels>"
            },
                    meanings = new object[]
            {
new
{
confidence = 1234,
createdBy = "<createdBy>",
description = "<description>",
displayText = "<displayText>",
expression = "<expression>",
relationGuid = "<relationGuid>",
source = "<source>",
status = "DISCOVERED",
steward = "<steward>",
termGuid = "<termGuid>",
}
            },
                    provenanceType = 123.45F,
                    proxy = true,
                    relationshipAttributes = new
                    {
                        key = new object(),
                    },
                    status = "ACTIVE",
                    updateTime = 123.45F,
                    updatedBy = "<updatedBy>",
                    version = 123.45F,
                    source = "<source>",
                    sourceDetails = new
                    {
                        key = new object(),
                    },
                    contacts = new
                    {
                        key = new object[]
            {
new
{
id = "<id>",
info = "<info>",
}
            },
                    },
                    attributes = new
                    {
                        key = new object(),
                    },
                    typeName = "<typeName>",
                    lastModifiedTS = "<lastModifiedTS>",
                },
                referredEntities = new { },
            });
            Response response = await client.CreateOrUpdateAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetByGuids_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewEntities client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

            Response response = await client.GetByGuidsAsync(new string[] { "<guids>" }, null, null, null, null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetByGuids_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewEntities client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

            Response response = await client.GetByGuidsAsync(new string[] { "<guids>" }, true, true, new string[] { "<excludeRelationshipTypes>" }, null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task CreateOrUpdateEntities_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewEntities client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.CreateOrUpdateEntitiesAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task CreateOrUpdateEntities_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewEntities client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

            using RequestContent content = RequestContent.Create(new
            {
                entities = new object[]
            {
new
{
businessAttributes = new
{
key = new object(),
},
classifications = new object[]
{
new
{
entityGuid = "<entityGuid>",
entityStatus = "ACTIVE",
removePropagationsOnEntityDelete = true,
validityPeriods = new object[]
{
new
{
endTime = "<endTime>",
startTime = "<startTime>",
timeZone = "<timeZone>",
}
},
source = "<source>",
sourceDetails = new
{
key = new object(),
},
attributes = new
{
key = new object(),
},
typeName = "<typeName>",
lastModifiedTS = "<lastModifiedTS>",
}
},
createTime = 123.45F,
createdBy = "<createdBy>",
customAttributes = new
{
key = "<customAttributes>",
},
guid = "<guid>",
homeId = "<homeId>",
isIncomplete = true,
labels = new object[]
{
"<labels>"
},
meanings = new object[]
{
new
{
confidence = 1234,
createdBy = "<createdBy>",
description = "<description>",
displayText = "<displayText>",
expression = "<expression>",
relationGuid = "<relationGuid>",
source = "<source>",
status = "DISCOVERED",
steward = "<steward>",
termGuid = "<termGuid>",
}
},
provenanceType = 123.45F,
proxy = true,
relationshipAttributes = new
{
key = new object(),
},
status = "ACTIVE",
updateTime = 123.45F,
updatedBy = "<updatedBy>",
version = 123.45F,
source = "<source>",
sourceDetails = new
{
key = new object(),
},
contacts = new
{
key = new object[]
{
new
{
id = "<id>",
info = "<info>",
}
},
},
attributes = new
{
key = new object(),
},
typeName = "<typeName>",
lastModifiedTS = "<lastModifiedTS>",
}
            },
                referredEntities = new { },
            });
            Response response = await client.CreateOrUpdateEntitiesAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DeleteByGuids_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewEntities client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

            Response response = await client.DeleteByGuidsAsync(new string[] { "<guids>" }, null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DeleteByGuids_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewEntities client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

            Response response = await client.DeleteByGuidsAsync(new string[] { "<guids>" }, null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task AddClassification_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewEntities client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.AddClassificationAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task AddClassification_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewEntities client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

            using RequestContent content = RequestContent.Create(new
            {
                classification = new
                {
                    entityGuid = "<entityGuid>",
                    entityStatus = "ACTIVE",
                    removePropagationsOnEntityDelete = true,
                    validityPeriods = new object[]
            {
new
{
endTime = "<endTime>",
startTime = "<startTime>",
timeZone = "<timeZone>",
}
            },
                    source = "<source>",
                    sourceDetails = new
                    {
                        key = new object(),
                    },
                    attributes = new
                    {
                        key = new object(),
                    },
                    typeName = "<typeName>",
                    lastModifiedTS = "<lastModifiedTS>",
                },
                entityGuids = new object[]
            {
"<entityGuids>"
            },
            });
            Response response = await client.AddClassificationAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetByGuid_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewEntities client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

            Response response = await client.GetByGuidAsync("<guid>", null, null, null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetByGuid_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewEntities client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

            Response response = await client.GetByGuidAsync("<guid>", true, true, null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task PartialUpdateEntityAttributeByGuid_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewEntities client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.PartialUpdateEntityAttributeByGuidAsync("<guid>", "<name>", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task PartialUpdateEntityAttributeByGuid_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewEntities client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.PartialUpdateEntityAttributeByGuidAsync("<guid>", "<name>", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DeleteByGuid_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewEntities client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

            Response response = await client.DeleteByGuidAsync("<guid>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DeleteByGuid_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewEntities client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

            Response response = await client.DeleteByGuidAsync("<guid>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetClassification_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewEntities client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

            Response response = await client.GetClassificationAsync("<guid>", "<classificationName>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetClassification_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewEntities client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

            Response response = await client.GetClassificationAsync("<guid>", "<classificationName>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DeleteClassification_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewEntities client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

            Response response = await client.DeleteClassificationAsync("<guid>", "<classificationName>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DeleteClassification_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewEntities client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

            Response response = await client.DeleteClassificationAsync("<guid>", "<classificationName>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetClassifications_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewEntities client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

            Response response = await client.GetClassificationsAsync("<guid>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetClassifications_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewEntities client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

            Response response = await client.GetClassificationsAsync("<guid>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task AddClassifications_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewEntities client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

            using RequestContent content = RequestContent.Create(new object[]
            {
new object()
            });
            Response response = await client.AddClassificationsAsync("<guid>", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task AddClassifications_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewEntities client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

            using RequestContent content = RequestContent.Create(new object[]
            {
new
{
entityGuid = "<entityGuid>",
entityStatus = "ACTIVE",
removePropagationsOnEntityDelete = true,
validityPeriods = new object[]
{
new
{
endTime = "<endTime>",
startTime = "<startTime>",
timeZone = "<timeZone>",
}
},
source = "<source>",
sourceDetails = new
{
key = new object(),
},
attributes = new
{
key = new object(),
},
typeName = "<typeName>",
lastModifiedTS = "<lastModifiedTS>",
}
            });
            Response response = await client.AddClassificationsAsync("<guid>", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task UpdateClassifications_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewEntities client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

            using RequestContent content = RequestContent.Create(new object[]
            {
new object()
            });
            Response response = await client.UpdateClassificationsAsync("<guid>", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task UpdateClassifications_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewEntities client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

            using RequestContent content = RequestContent.Create(new object[]
            {
new
{
entityGuid = "<entityGuid>",
entityStatus = "ACTIVE",
removePropagationsOnEntityDelete = true,
validityPeriods = new object[]
{
new
{
endTime = "<endTime>",
startTime = "<startTime>",
timeZone = "<timeZone>",
}
},
source = "<source>",
sourceDetails = new
{
key = new object(),
},
attributes = new
{
key = new object(),
},
typeName = "<typeName>",
lastModifiedTS = "<lastModifiedTS>",
}
            });
            Response response = await client.UpdateClassificationsAsync("<guid>", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetByUniqueAttributes_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewEntities client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

            Response response = await client.GetByUniqueAttributesAsync("<typeName>", null, null, null, null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetByUniqueAttributes_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewEntities client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

            Response response = await client.GetByUniqueAttributesAsync("<typeName>", true, true, "<attrQualifiedName>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task PartialUpdateEntityByUniqueAttributes_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewEntities client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.PartialUpdateEntityByUniqueAttributesAsync("<typeName>", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task PartialUpdateEntityByUniqueAttributes_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewEntities client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

            using RequestContent content = RequestContent.Create(new
            {
                entity = new
                {
                    businessAttributes = new
                    {
                        key = new object(),
                    },
                    classifications = new object[]
            {
new
{
entityGuid = "<entityGuid>",
entityStatus = "ACTIVE",
removePropagationsOnEntityDelete = true,
validityPeriods = new object[]
{
new
{
endTime = "<endTime>",
startTime = "<startTime>",
timeZone = "<timeZone>",
}
},
source = "<source>",
sourceDetails = new
{
key = new object(),
},
attributes = new
{
key = new object(),
},
typeName = "<typeName>",
lastModifiedTS = "<lastModifiedTS>",
}
            },
                    createTime = 123.45F,
                    createdBy = "<createdBy>",
                    customAttributes = new
                    {
                        key = "<customAttributes>",
                    },
                    guid = "<guid>",
                    homeId = "<homeId>",
                    isIncomplete = true,
                    labels = new object[]
            {
"<labels>"
            },
                    meanings = new object[]
            {
new
{
confidence = 1234,
createdBy = "<createdBy>",
description = "<description>",
displayText = "<displayText>",
expression = "<expression>",
relationGuid = "<relationGuid>",
source = "<source>",
status = "DISCOVERED",
steward = "<steward>",
termGuid = "<termGuid>",
}
            },
                    provenanceType = 123.45F,
                    proxy = true,
                    relationshipAttributes = new
                    {
                        key = new object(),
                    },
                    status = "ACTIVE",
                    updateTime = 123.45F,
                    updatedBy = "<updatedBy>",
                    version = 123.45F,
                    source = "<source>",
                    sourceDetails = new
                    {
                        key = new object(),
                    },
                    contacts = new
                    {
                        key = new object[]
            {
new
{
id = "<id>",
info = "<info>",
}
            },
                    },
                    attributes = new
                    {
                        key = new object(),
                    },
                    typeName = "<typeName>",
                    lastModifiedTS = "<lastModifiedTS>",
                },
                referredEntities = new { },
            });
            Response response = await client.PartialUpdateEntityByUniqueAttributesAsync("<typeName>", content, attrQualifiedName: "<attrQualifiedName>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DeleteByUniqueAttribute_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewEntities client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

            Response response = await client.DeleteByUniqueAttributeAsync("<typeName>", null, null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DeleteByUniqueAttribute_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewEntities client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

            Response response = await client.DeleteByUniqueAttributeAsync("<typeName>", "<attrQualifiedName>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DeleteClassificationByUniqueAttribute_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewEntities client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

            Response response = await client.DeleteClassificationByUniqueAttributeAsync("<typeName>", "<classificationName>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DeleteClassificationByUniqueAttribute_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewEntities client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

            Response response = await client.DeleteClassificationByUniqueAttributeAsync("<typeName>", "<classificationName>", attrQualifiedName: "<attrQualifiedName>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task AddClassificationsByUniqueAttribute_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewEntities client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

            using RequestContent content = RequestContent.Create(new object[]
            {
new object()
            });
            Response response = await client.AddClassificationsByUniqueAttributeAsync("<typeName>", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task AddClassificationsByUniqueAttribute_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewEntities client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

            using RequestContent content = RequestContent.Create(new object[]
            {
new
{
entityGuid = "<entityGuid>",
entityStatus = "ACTIVE",
removePropagationsOnEntityDelete = true,
validityPeriods = new object[]
{
new
{
endTime = "<endTime>",
startTime = "<startTime>",
timeZone = "<timeZone>",
}
},
source = "<source>",
sourceDetails = new
{
key = new object(),
},
attributes = new
{
key = new object(),
},
typeName = "<typeName>",
lastModifiedTS = "<lastModifiedTS>",
}
            });
            Response response = await client.AddClassificationsByUniqueAttributeAsync("<typeName>", content, attrQualifiedName: "<attrQualifiedName>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task UpdateClassificationsByUniqueAttribute_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewEntities client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

            using RequestContent content = RequestContent.Create(new object[]
            {
new object()
            });
            Response response = await client.UpdateClassificationsByUniqueAttributeAsync("<typeName>", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task UpdateClassificationsByUniqueAttribute_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewEntities client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

            using RequestContent content = RequestContent.Create(new object[]
            {
new
{
entityGuid = "<entityGuid>",
entityStatus = "ACTIVE",
removePropagationsOnEntityDelete = true,
validityPeriods = new object[]
{
new
{
endTime = "<endTime>",
startTime = "<startTime>",
timeZone = "<timeZone>",
}
},
source = "<source>",
sourceDetails = new
{
key = new object(),
},
attributes = new
{
key = new object(),
},
typeName = "<typeName>",
lastModifiedTS = "<lastModifiedTS>",
}
            });
            Response response = await client.UpdateClassificationsByUniqueAttributeAsync("<typeName>", content, attrQualifiedName: "<attrQualifiedName>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task SetClassifications_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewEntities client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.SetClassificationsAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task SetClassifications_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewEntities client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

            using RequestContent content = RequestContent.Create(new
            {
                guidHeaderMap = new
                {
                    key = new
                    {
                        classificationNames = new object[]
            {
"<classificationNames>"
            },
                        classifications = new object[]
            {
new
{
entityGuid = "<entityGuid>",
entityStatus = "ACTIVE",
removePropagationsOnEntityDelete = true,
validityPeriods = new object[]
{
new
{
endTime = "<endTime>",
startTime = "<startTime>",
timeZone = "<timeZone>",
}
},
source = "<source>",
sourceDetails = new
{
key = new object(),
},
attributes = new
{
key = new object(),
},
typeName = "<typeName>",
lastModifiedTS = "<lastModifiedTS>",
}
            },
                        displayText = "<displayText>",
                        guid = "<guid>",
                        isIncomplete = true,
                        labels = new object[]
            {
"<labels>"
            },
                        meaningNames = new object[]
            {
"<meaningNames>"
            },
                        meanings = new object[]
            {
new
{
confidence = 1234,
createdBy = "<createdBy>",
description = "<description>",
displayText = "<displayText>",
expression = "<expression>",
relationGuid = "<relationGuid>",
source = "<source>",
status = "DISCOVERED",
steward = "<steward>",
termGuid = "<termGuid>",
}
            },
                        status = "ACTIVE",
                        attributes = new
                        {
                            key = new object(),
                        },
                        typeName = "<typeName>",
                        lastModifiedTS = "<lastModifiedTS>",
                    },
                },
            });
            Response response = await client.SetClassificationsAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetEntitiesByUniqueAttributes_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewEntities client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

            Response response = await client.GetEntitiesByUniqueAttributesAsync("<typeName>", null, null, null, null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetEntitiesByUniqueAttributes_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewEntities client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

            Response response = await client.GetEntitiesByUniqueAttributesAsync("<typeName>", true, true, "<attrNQualifiedName>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetHeader_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewEntities client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

            Response response = await client.GetHeaderAsync("<guid>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetHeader_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewEntities client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

            Response response = await client.GetHeaderAsync("<guid>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DeleteBusinessMetadata_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewEntities client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

            using RequestContent content = null;
            Response response = await client.DeleteBusinessMetadataAsync("<guid>", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DeleteBusinessMetadata_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewEntities client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

            using RequestContent content = RequestContent.Create(new
            {
                key = new object(),
            });
            Response response = await client.DeleteBusinessMetadataAsync("<guid>", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task AddOrUpdateBusinessMetadata_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewEntities client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

            using RequestContent content = null;
            Response response = await client.AddOrUpdateBusinessMetadataAsync("<guid>", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task AddOrUpdateBusinessMetadata_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewEntities client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

            using RequestContent content = RequestContent.Create(new
            {
                key = new object(),
            });
            Response response = await client.AddOrUpdateBusinessMetadataAsync("<guid>", content, isOverwrite: true);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DeleteBusinessMetadataAttributes_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewEntities client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

            using RequestContent content = null;
            Response response = await client.DeleteBusinessMetadataAttributesAsync("<guid>", "<bmName>", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DeleteBusinessMetadataAttributes_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewEntities client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

            using RequestContent content = RequestContent.Create(new
            {
                key = new object(),
            });
            Response response = await client.DeleteBusinessMetadataAttributesAsync("<guid>", "<bmName>", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task AddOrUpdateBusinessMetadataAttributes_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewEntities client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

            using RequestContent content = null;
            Response response = await client.AddOrUpdateBusinessMetadataAttributesAsync("<guid>", "<bmName>", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task AddOrUpdateBusinessMetadataAttributes_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewEntities client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

            using RequestContent content = RequestContent.Create(new
            {
                key = new object(),
            });
            Response response = await client.AddOrUpdateBusinessMetadataAttributesAsync("<guid>", "<bmName>", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetSampleBusinessMetadataTemplate_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewEntities client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

            Response response = await client.GetSampleBusinessMetadataTemplateAsync(null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetSampleBusinessMetadataTemplate_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewEntities client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

            Response response = await client.GetSampleBusinessMetadataTemplateAsync(null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task ImportBusinessMetadata_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewEntities client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

            using RequestContent content = null;
            Response response = await client.ImportBusinessMetadataAsync(content, "multipart/form-data");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task ImportBusinessMetadata_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewEntities client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

            using RequestContent content = RequestContent.Create(File.OpenRead("<filePath>"));
            Response response = await client.ImportBusinessMetadataAsync(content, "multipart/form-data");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DeleteLabels_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewEntities client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

            using RequestContent content = null;
            Response response = await client.DeleteLabelsAsync("<guid>", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DeleteLabels_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewEntities client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

            using RequestContent content = RequestContent.Create(new object[]
            {
"<body>"
            });
            Response response = await client.DeleteLabelsAsync("<guid>", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task SetLabels_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewEntities client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

            using RequestContent content = null;
            Response response = await client.SetLabelsAsync("<guid>", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task SetLabels_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewEntities client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

            using RequestContent content = RequestContent.Create(new object[]
            {
"<body>"
            });
            Response response = await client.SetLabelsAsync("<guid>", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task AddLabel_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewEntities client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

            using RequestContent content = null;
            Response response = await client.AddLabelAsync("<guid>", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task AddLabel_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewEntities client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

            using RequestContent content = RequestContent.Create(new object[]
            {
"<body>"
            });
            Response response = await client.AddLabelAsync("<guid>", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DeleteLabelsByUniqueAttribute_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewEntities client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

            using RequestContent content = null;
            Response response = await client.DeleteLabelsByUniqueAttributeAsync("<typeName>", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DeleteLabelsByUniqueAttribute_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewEntities client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

            using RequestContent content = RequestContent.Create(new object[]
            {
"<body>"
            });
            Response response = await client.DeleteLabelsByUniqueAttributeAsync("<typeName>", content, attrQualifiedName: "<attrQualifiedName>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task SetLabelsByUniqueAttribute_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewEntities client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

            using RequestContent content = null;
            Response response = await client.SetLabelsByUniqueAttributeAsync("<typeName>", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task SetLabelsByUniqueAttribute_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewEntities client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

            using RequestContent content = RequestContent.Create(new object[]
            {
"<body>"
            });
            Response response = await client.SetLabelsByUniqueAttributeAsync("<typeName>", content, attrQualifiedName: "<attrQualifiedName>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task AddLabelsByUniqueAttribute_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewEntities client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

            using RequestContent content = null;
            Response response = await client.AddLabelsByUniqueAttributeAsync("<typeName>", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task AddLabelsByUniqueAttribute_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewEntities client = CreatePurviewCatalogClient(endpoint, credential).GetPurviewEntitiesClient();

            using RequestContent content = RequestContent.Create(new object[]
            {
"<body>"
            });
            Response response = await client.AddLabelsByUniqueAttributeAsync("<typeName>", content, attrQualifiedName: "<attrQualifiedName>");
        }
    }
}
