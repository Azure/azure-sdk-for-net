// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.Analytics.Purview.Account.Models
{
    /// <summary> Model factory for read-only models. </summary>
    public static partial class PurviewAccountModelFactory
    {
        /// <summary> Initializes a new instance of Account. </summary>
        /// <param name="id"> Gets or sets the identifier. </param>
        /// <param name="identity"> Identity Info on the tracked resource. </param>
        /// <param name="location"> Gets or sets the location. </param>
        /// <param name="name"> Gets or sets the name. </param>
        /// <param name="properties"> Gets or sets the properties. </param>
        /// <param name="sku"> Gets or sets the Sku. </param>
        /// <param name="systemData"> Metadata pertaining to creation and last modification of the resource. </param>
        /// <param name="tags"> Tags on the azure resource. </param>
        /// <param name="type"> Gets or sets the type. </param>
        /// <returns> A new <see cref="Models.Account"/> instance for mocking. </returns>
        public static Account Account(string id = null, Identity identity = null, string location = null, string name = null, AccountProperties properties = null, AccountSku sku = null, AccountSystemData systemData = null, IReadOnlyDictionary<string, string> tags = null, string type = null)
        {
            tags ??= new Dictionary<string, string>();

            return new Account(id, identity, location, name, properties, sku, systemData, tags, type);
        }

        /// <summary> Initializes a new instance of Identity. </summary>
        /// <param name="principalId"> Service principal object Id. </param>
        /// <param name="tenantId"> Tenant Id. </param>
        /// <param name="type"> Identity Type. </param>
        /// <returns> A new <see cref="Models.Identity"/> instance for mocking. </returns>
        public static Identity Identity(string principalId = null, string tenantId = null, Type? type = null)
        {
            return new Identity(principalId, tenantId, type);
        }

        /// <summary> Initializes a new instance of AccountProperties. </summary>
        /// <param name="cloudConnectors">
        /// Cloud connectors.
        /// External cloud identifier used as part of scanning configuration.
        /// </param>
        /// <param name="createdAt"> Gets the time at which the entity was created. </param>
        /// <param name="createdBy"> Gets the creator of the entity. </param>
        /// <param name="createdByObjectId"> Gets the creators of the entity&apos;s object id. </param>
        /// <param name="endpoints"> The URIs that are the public endpoints of the account. </param>
        /// <param name="friendlyName"> Gets or sets the friendly name. </param>
        /// <param name="managedResourceGroupName"> Gets or sets the managed resource group name. </param>
        /// <param name="managedResources"> Gets the resource identifiers of the managed resources. </param>
        /// <param name="privateEndpointConnections"> Gets the private endpoint connections information. </param>
        /// <param name="provisioningState"> Gets or sets the state of the provisioning. </param>
        /// <param name="publicNetworkAccess"> Gets or sets the public network access. </param>
        /// <returns> A new <see cref="Models.AccountProperties"/> instance for mocking. </returns>
        public static AccountProperties AccountProperties(CloudConnectors cloudConnectors = null, DateTimeOffset? createdAt = null, string createdBy = null, string createdByObjectId = null, AccountPropertiesEndpoints endpoints = null, string friendlyName = null, string managedResourceGroupName = null, AccountPropertiesManagedResources managedResources = null, IEnumerable<PrivateEndpointConnection> privateEndpointConnections = null, ProvisioningState? provisioningState = null, PublicNetworkAccess? publicNetworkAccess = null)
        {
            privateEndpointConnections ??= new List<PrivateEndpointConnection>();

            return new AccountProperties(cloudConnectors, createdAt, createdBy, createdByObjectId, endpoints, friendlyName, managedResourceGroupName, managedResources, privateEndpointConnections?.ToList(), provisioningState, publicNetworkAccess);
        }

        /// <summary> Initializes a new instance of CloudConnectors. </summary>
        /// <param name="awsExternalId">
        /// AWS external identifier.
        /// Configured in AWS to allow use of the role arn used for scanning
        /// </param>
        /// <returns> A new <see cref="Models.CloudConnectors"/> instance for mocking. </returns>
        public static CloudConnectors CloudConnectors(string awsExternalId = null)
        {
            return new CloudConnectors(awsExternalId);
        }

        /// <summary> Initializes a new instance of AccountEndpoints. </summary>
        /// <param name="catalog"> Gets the catalog endpoint. </param>
        /// <param name="guardian"> Gets the guardian endpoint. </param>
        /// <param name="scan"> Gets the scan endpoint. </param>
        /// <returns> A new <see cref="Models.AccountEndpoints"/> instance for mocking. </returns>
        public static AccountEndpoints AccountEndpoints(string catalog = null, string guardian = null, string scan = null)
        {
            return new AccountEndpoints(catalog, guardian, scan);
        }

        /// <summary> Initializes a new instance of ManagedResources. </summary>
        /// <param name="eventHubNamespace"> Gets the managed event hub namespace resource identifier. </param>
        /// <param name="resourceGroup"> Gets the managed resource group resource identifier. This resource group will host resource dependencies for the account. </param>
        /// <param name="storageAccount"> Gets the managed storage account resource identifier. </param>
        /// <returns> A new <see cref="Models.ManagedResources"/> instance for mocking. </returns>
        public static ManagedResources ManagedResources(string eventHubNamespace = null, string resourceGroup = null, string storageAccount = null)
        {
            return new ManagedResources(eventHubNamespace, resourceGroup, storageAccount);
        }

        /// <summary> Initializes a new instance of PrivateEndpointConnection. </summary>
        /// <param name="id"> Gets or sets the identifier. </param>
        /// <param name="name"> Gets or sets the name. </param>
        /// <param name="properties"> The connection identifier. </param>
        /// <param name="type"> Gets or sets the type. </param>
        /// <returns> A new <see cref="Models.PrivateEndpointConnection"/> instance for mocking. </returns>
        public static PrivateEndpointConnection PrivateEndpointConnection(string id = null, string name = null, PrivateEndpointConnectionProperties properties = null, string type = null)
        {
            return new PrivateEndpointConnection(id, name, properties, type);
        }

        /// <summary> Initializes a new instance of PrivateEndpointConnectionProperties. </summary>
        /// <param name="privateEndpoint"> The private endpoint information. </param>
        /// <param name="privateLinkServiceConnectionState"> The private link service connection state. </param>
        /// <param name="provisioningState"> The provisioning state. </param>
        /// <returns> A new <see cref="Models.PrivateEndpointConnectionProperties"/> instance for mocking. </returns>
        public static PrivateEndpointConnectionProperties PrivateEndpointConnectionProperties(PrivateEndpoint privateEndpoint = null, PrivateLinkServiceConnectionState privateLinkServiceConnectionState = null, string provisioningState = null)
        {
            return new PrivateEndpointConnectionProperties(privateEndpoint, privateLinkServiceConnectionState, provisioningState);
        }

        /// <summary> Initializes a new instance of PrivateEndpoint. </summary>
        /// <param name="id"> The private endpoint identifier. </param>
        /// <returns> A new <see cref="Models.PrivateEndpoint"/> instance for mocking. </returns>
        public static PrivateEndpoint PrivateEndpoint(string id = null)
        {
            return new PrivateEndpoint(id);
        }

        /// <summary> Initializes a new instance of PrivateLinkServiceConnectionState. </summary>
        /// <param name="actionsRequired"> The required actions. </param>
        /// <param name="description"> The description. </param>
        /// <param name="status"> The status. </param>
        /// <returns> A new <see cref="Models.PrivateLinkServiceConnectionState"/> instance for mocking. </returns>
        public static PrivateLinkServiceConnectionState PrivateLinkServiceConnectionState(string actionsRequired = null, string description = null, Status? status = null)
        {
            return new PrivateLinkServiceConnectionState(actionsRequired, description, status);
        }

        /// <summary> Initializes a new instance of AccountSku. </summary>
        /// <param name="capacity"> Gets or sets the sku capacity. Possible values include: 4, 16. </param>
        /// <param name="name"> Gets or sets the sku name. </param>
        /// <returns> A new <see cref="Models.AccountSku"/> instance for mocking. </returns>
        public static AccountSku AccountSku(int? capacity = null, Name? name = null)
        {
            return new AccountSku(capacity, name);
        }

        /// <summary> Initializes a new instance of SystemData. </summary>
        /// <param name="createdAt"> The timestamp of resource creation (UTC). </param>
        /// <param name="createdBy"> The identity that created the resource. </param>
        /// <param name="createdByType"> The type of identity that created the resource. </param>
        /// <param name="lastModifiedAt"> The timestamp of the last modification the resource (UTC). </param>
        /// <param name="lastModifiedBy"> The identity that last modified the resource. </param>
        /// <param name="lastModifiedByType"> The type of identity that last modified the resource. </param>
        /// <returns> A new <see cref="Models.SystemData"/> instance for mocking. </returns>
        public static SystemData SystemData(DateTimeOffset? createdAt = null, string createdBy = null, CreatedByType? createdByType = null, DateTimeOffset? lastModifiedAt = null, string lastModifiedBy = null, LastModifiedByType? lastModifiedByType = null)
        {
            return new SystemData(createdAt, createdBy, createdByType, lastModifiedAt, lastModifiedBy, lastModifiedByType);
        }

        /// <summary> Initializes a new instance of AccessKeys. </summary>
        /// <param name="atlasKafkaPrimaryEndpoint"> Gets or sets the primary connection string. </param>
        /// <param name="atlasKafkaSecondaryEndpoint"> Gets or sets the secondary connection string. </param>
        /// <returns> A new <see cref="Models.AccessKeys"/> instance for mocking. </returns>
        public static AccessKeys AccessKeys(string atlasKafkaPrimaryEndpoint = null, string atlasKafkaSecondaryEndpoint = null)
        {
            return new AccessKeys(atlasKafkaPrimaryEndpoint, atlasKafkaSecondaryEndpoint);
        }

        /// <summary> Initializes a new instance of Collection. </summary>
        /// <param name="collectionProvisioningState"> Gets the state of the provisioning. </param>
        /// <param name="description"> Gets or sets the description. </param>
        /// <param name="friendlyName"> Gets or sets the friendly name of the collection. </param>
        /// <param name="name"> Gets the name. </param>
        /// <param name="parentCollection"> Gets or sets the parent collection reference. </param>
        /// <param name="systemData"> Gets the system data that contains information about who and when created and updated the resource. </param>
        /// <returns> A new <see cref="Models.Collection"/> instance for mocking. </returns>
        public static Collection Collection(CollectionProvisioningState? collectionProvisioningState = null, string description = null, string friendlyName = null, string name = null, CollectionReference parentCollection = null, CollectionSystemData systemData = null)
        {
            return new Collection(collectionProvisioningState, description, friendlyName, name, parentCollection, systemData);
        }

        /// <summary> Initializes a new instance of CollectionReference. </summary>
        /// <param name="referenceName"> Gets or sets the reference name. </param>
        /// <param name="type"> Gets the reference type property. </param>
        /// <returns> A new <see cref="Models.CollectionReference"/> instance for mocking. </returns>
        public static CollectionReference CollectionReference(string referenceName = null, string type = null)
        {
            return new CollectionReference(referenceName, type);
        }

        /// <summary> Initializes a new instance of CollectionNameResponse. </summary>
        /// <param name="friendlyName"> Gets or sets the friendly name of the collection. </param>
        /// <param name="name"> Gets the name. </param>
        /// <returns> A new <see cref="Models.CollectionNameResponse"/> instance for mocking. </returns>
        public static CollectionNameResponse CollectionNameResponse(string friendlyName = null, string name = null)
        {
            return new CollectionNameResponse(friendlyName, name);
        }

        /// <summary> Initializes a new instance of CollectionPathResponse. </summary>
        /// <param name="parentFriendlyNameChain"> The friendly names of ancestors starting from the default (root) collection and ending with the immediate parent. </param>
        /// <param name="parentNameChain"> The names of ancestors starting from the default (root) collection and ending with the immediate parent. </param>
        /// <returns> A new <see cref="Models.CollectionPathResponse"/> instance for mocking. </returns>
        public static CollectionPathResponse CollectionPathResponse(IEnumerable<string> parentFriendlyNameChain = null, IEnumerable<string> parentNameChain = null)
        {
            parentFriendlyNameChain ??= new List<string>();
            parentNameChain ??= new List<string>();

            return new CollectionPathResponse(parentFriendlyNameChain?.ToList(), parentNameChain?.ToList());
        }

        /// <summary> Initializes a new instance of ResourceSetRuleConfig. </summary>
        /// <param name="advancedResourceSet"> Gets or sets the advanced resource set property of the account. </param>
        /// <param name="name"> The name of the rule. </param>
        /// <param name="pathPatternConfig"> The configuration rules for path pattern extraction. </param>
        /// <returns> A new <see cref="Models.ResourceSetRuleConfig"/> instance for mocking. </returns>
        public static ResourceSetRuleConfig ResourceSetRuleConfig(AdvancedResourceSet advancedResourceSet = null, string name = null, PathPatternExtractorConfig pathPatternConfig = null)
        {
            return new ResourceSetRuleConfig(advancedResourceSet, name, pathPatternConfig);
        }
    }
}
