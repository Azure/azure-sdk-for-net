// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Analytics.Purview.Account
{
    /// <summary> The ResourceSetRules service client. </summary>
    public partial class ResourceSetRulesClient
    {
        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline { get; }
        private readonly string[] AuthorizationScopes = { "https://purview.azure.net/.default" };
        private readonly TokenCredential _tokenCredential;
        private Uri endpoint;
        private readonly string apiVersion;
        private readonly ClientDiagnostics _clientDiagnostics;

        /// <summary> Initializes a new instance of ResourceSetRulesClient for mocking. </summary>
        protected ResourceSetRulesClient()
        {
        }

        /// <summary> Initializes a new instance of ResourceSetRulesClient. </summary>
        /// <param name="endpoint"> The account endpoint of your Purview account. Example: https://{accountName}.purview.azure.com/account/. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public ResourceSetRulesClient(Uri endpoint, TokenCredential credential, PurviewAccountClientOptions options = null)
        {
            if (endpoint == null)
            {
                throw new ArgumentNullException(nameof(endpoint));
            }
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }

            options ??= new PurviewAccountClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            _tokenCredential = credential;
            var authPolicy = new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes);
            Pipeline = HttpPipelineBuilder.Build(options, new HttpPipelinePolicy[] { new LowLevelCallbackPolicy() }, new HttpPipelinePolicy[] { authPolicy }, new ResponseClassifier());
            this.endpoint = endpoint;
            apiVersion = options.Version;
        }

        /// <summary> Get a resource set config service model. </summary>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> GetResourceSetRuleAsync(RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            HttpMessage message = CreateGetResourceSetRuleRequest(options);
            if (options.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", options.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("ResourceSetRulesClient.GetResourceSetRule");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, options.CancellationToken).ConfigureAwait(false);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a resource set config service model. </summary>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response GetResourceSetRule(RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            HttpMessage message = CreateGetResourceSetRuleRequest(options);
            if (options.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", options.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("ResourceSetRulesClient.GetResourceSetRule");
            scope.Start();
            try
            {
                Pipeline.Send(message, options.CancellationToken);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create Request for <see cref="GetResourceSetRule"/> and <see cref="GetResourceSetRuleAsync"/> operations. </summary>
        /// <param name="options"> The request options. </param>
        private HttpMessage CreateGetResourceSetRuleRequest(RequestOptions options = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/resourceSetRuleConfigs/defaultResourceSetRuleConfig", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Creates or updates an resource set config. </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <list type="table">
        ///   <listheader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listheader>
        ///   <item>
        ///     <term>advancedResourceSet</term>
        ///     <term>AdvancedResourceSet</term>
        ///     <term></term>
        ///     <term>Gets or sets the advanced resource set property of the account.</term>
        ///   </item>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>The name of the rule</term>
        ///   </item>
        ///   <item>
        ///     <term>pathPatternConfig</term>
        ///     <term>PathPatternExtractorConfig</term>
        ///     <term></term>
        ///     <term>The configuration rules for path pattern extraction.</term>
        ///   </item>
        /// </list>
        /// Schema for <c>AdvancedResourceSet</c>:
        /// <list type="table">
        ///   <listheader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listheader>
        ///   <item>
        ///     <term>modifiedAt</term>
        ///     <term>string (ISO 8601 Format)</term>
        ///     <term></term>
        ///     <term>Date at which ResourceSetProcessing property of the account is updated.</term>
        ///   </item>
        ///   <item>
        ///     <term>resourceSetProcessing</term>
        ///     <term>&quot;Default&quot; | &quot;Advanced&quot;</term>
        ///     <term></term>
        ///     <term>The advanced resource property of the account.</term>
        ///   </item>
        /// </list>
        /// Schema for <c>PathPatternExtractorConfig</c>:
        /// <list type="table">
        ///   <listheader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listheader>
        ///   <item>
        ///     <term>acceptedPatterns</term>
        ///     <term>Filter[]</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>complexReplacers</term>
        ///     <term>ComplexReplacerConfig[]</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>createdBy</term>
        ///     <term>string</term>
        ///     <term>Yes</term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>enableDefaultPatterns</term>
        ///     <term>boolean</term>
        ///     <term>Yes</term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>lastUpdatedTimestamp</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>modifiedBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>normalizationRules</term>
        ///     <term>NormalizationRule[]</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>regexReplacers</term>
        ///     <term>RegexReplacer[]</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>rejectedPatterns</term>
        ///     <term>Filter[]</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>scopedRules</term>
        ///     <term>ScopedRule[]</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>version</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        /// </list>
        /// Schema for <c>Filter</c>:
        /// <list type="table">
        ///   <listheader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listheader>
        ///   <item>
        ///     <term>createdBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>filterType</term>
        ///     <term>&quot;Pattern&quot; | &quot;Regex&quot;</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>lastUpdatedTimestamp</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>modifiedBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term>Yes</term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>path</term>
        ///     <term>string</term>
        ///     <term>Yes</term>
        ///     <term></term>
        ///   </item>
        /// </list>
        /// Schema for <c>ComplexReplacerConfig</c>:
        /// <list type="table">
        ///   <listheader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listheader>
        ///   <item>
        ///     <term>createdBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>disabled</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>disableRecursiveReplacerApplication</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>lastUpdatedTimestamp</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>modifiedBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>typeName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        /// </list>
        /// Schema for <c>NormalizationRule</c>:
        /// <list type="table">
        ///   <listheader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listheader>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>disabled</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>dynamicReplacement</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>entityTypes</term>
        ///     <term>string[]</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>lastUpdatedTimestamp</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>regex</term>
        ///     <term>FastRegex</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>replaceWith</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>version</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        /// </list>
        /// Schema for <c>RegexReplacer</c>:
        /// <list type="table">
        ///   <listheader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listheader>
        ///   <item>
        ///     <term>condition</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>createdBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>disabled</term>
        ///     <term>boolean</term>
        ///     <term>Yes</term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>disableRecursiveReplacerApplication</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>doNotReplaceRegex</term>
        ///     <term>FastRegex</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>lastUpdatedTimestamp</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>modifiedBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term>Yes</term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>regex</term>
        ///     <term>FastRegex</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>replaceWith</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        /// </list>
        /// Schema for <c>ScopedRule</c>:
        /// <list type="table">
        ///   <listheader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listheader>
        ///   <item>
        ///     <term>bindingUrl</term>
        ///     <term>string</term>
        ///     <term>Yes</term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>rules</term>
        ///     <term>Rule[]</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>storeType</term>
        ///     <term>string</term>
        ///     <term>Yes</term>
        ///     <term></term>
        ///   </item>
        /// </list>
        /// Schema for <c>FastRegex</c>:
        /// <list type="table">
        ///   <listheader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listheader>
        ///   <item>
        ///     <term>maxDigits</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>maxLetters</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>minDashes</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>minDigits</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>minDigitsOrLetters</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>minDots</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>minHex</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>minLetters</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>minUnderscores</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>options</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>regexStr</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        /// </list>
        /// Schema for <c>Rule</c>:
        /// <list type="table">
        ///   <listheader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listheader>
        ///   <item>
        ///     <term>displayName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>isResourceSet</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>lastUpdatedTimestamp</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>qualifiedName</term>
        ///     <term>string</term>
        ///     <term>Yes</term>
        ///     <term></term>
        ///   </item>
        /// </list>
        /// </remarks>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> CreateOrUpdateResourceSetRuleAsync(RequestContent content, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            HttpMessage message = CreateCreateOrUpdateResourceSetRuleRequest(content, options);
            if (options.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", options.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("ResourceSetRulesClient.CreateOrUpdateResourceSetRule");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, options.CancellationToken).ConfigureAwait(false);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates or updates an resource set config. </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <list type="table">
        ///   <listheader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listheader>
        ///   <item>
        ///     <term>advancedResourceSet</term>
        ///     <term>AdvancedResourceSet</term>
        ///     <term></term>
        ///     <term>Gets or sets the advanced resource set property of the account.</term>
        ///   </item>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term>The name of the rule</term>
        ///   </item>
        ///   <item>
        ///     <term>pathPatternConfig</term>
        ///     <term>PathPatternExtractorConfig</term>
        ///     <term></term>
        ///     <term>The configuration rules for path pattern extraction.</term>
        ///   </item>
        /// </list>
        /// Schema for <c>AdvancedResourceSet</c>:
        /// <list type="table">
        ///   <listheader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listheader>
        ///   <item>
        ///     <term>modifiedAt</term>
        ///     <term>string (ISO 8601 Format)</term>
        ///     <term></term>
        ///     <term>Date at which ResourceSetProcessing property of the account is updated.</term>
        ///   </item>
        ///   <item>
        ///     <term>resourceSetProcessing</term>
        ///     <term>&quot;Default&quot; | &quot;Advanced&quot;</term>
        ///     <term></term>
        ///     <term>The advanced resource property of the account.</term>
        ///   </item>
        /// </list>
        /// Schema for <c>PathPatternExtractorConfig</c>:
        /// <list type="table">
        ///   <listheader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listheader>
        ///   <item>
        ///     <term>acceptedPatterns</term>
        ///     <term>Filter[]</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>complexReplacers</term>
        ///     <term>ComplexReplacerConfig[]</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>createdBy</term>
        ///     <term>string</term>
        ///     <term>Yes</term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>enableDefaultPatterns</term>
        ///     <term>boolean</term>
        ///     <term>Yes</term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>lastUpdatedTimestamp</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>modifiedBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>normalizationRules</term>
        ///     <term>NormalizationRule[]</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>regexReplacers</term>
        ///     <term>RegexReplacer[]</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>rejectedPatterns</term>
        ///     <term>Filter[]</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>scopedRules</term>
        ///     <term>ScopedRule[]</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>version</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        /// </list>
        /// Schema for <c>Filter</c>:
        /// <list type="table">
        ///   <listheader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listheader>
        ///   <item>
        ///     <term>createdBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>filterType</term>
        ///     <term>&quot;Pattern&quot; | &quot;Regex&quot;</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>lastUpdatedTimestamp</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>modifiedBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term>Yes</term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>path</term>
        ///     <term>string</term>
        ///     <term>Yes</term>
        ///     <term></term>
        ///   </item>
        /// </list>
        /// Schema for <c>ComplexReplacerConfig</c>:
        /// <list type="table">
        ///   <listheader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listheader>
        ///   <item>
        ///     <term>createdBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>disabled</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>disableRecursiveReplacerApplication</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>lastUpdatedTimestamp</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>modifiedBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>typeName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        /// </list>
        /// Schema for <c>NormalizationRule</c>:
        /// <list type="table">
        ///   <listheader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listheader>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>disabled</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>dynamicReplacement</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>entityTypes</term>
        ///     <term>string[]</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>lastUpdatedTimestamp</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>regex</term>
        ///     <term>FastRegex</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>replaceWith</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>version</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        /// </list>
        /// Schema for <c>RegexReplacer</c>:
        /// <list type="table">
        ///   <listheader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listheader>
        ///   <item>
        ///     <term>condition</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>createdBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>disabled</term>
        ///     <term>boolean</term>
        ///     <term>Yes</term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>disableRecursiveReplacerApplication</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>doNotReplaceRegex</term>
        ///     <term>FastRegex</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>lastUpdatedTimestamp</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>modifiedBy</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term>Yes</term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>regex</term>
        ///     <term>FastRegex</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>replaceWith</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        /// </list>
        /// Schema for <c>ScopedRule</c>:
        /// <list type="table">
        ///   <listheader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listheader>
        ///   <item>
        ///     <term>bindingUrl</term>
        ///     <term>string</term>
        ///     <term>Yes</term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>rules</term>
        ///     <term>Rule[]</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>storeType</term>
        ///     <term>string</term>
        ///     <term>Yes</term>
        ///     <term></term>
        ///   </item>
        /// </list>
        /// Schema for <c>FastRegex</c>:
        /// <list type="table">
        ///   <listheader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listheader>
        ///   <item>
        ///     <term>maxDigits</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>maxLetters</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>minDashes</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>minDigits</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>minDigitsOrLetters</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>minDots</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>minHex</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>minLetters</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>minUnderscores</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>options</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>regexStr</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        /// </list>
        /// Schema for <c>Rule</c>:
        /// <list type="table">
        ///   <listheader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listheader>
        ///   <item>
        ///     <term>displayName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>isResourceSet</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>lastUpdatedTimestamp</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term></term>
        ///   </item>
        ///   <item>
        ///     <term>qualifiedName</term>
        ///     <term>string</term>
        ///     <term>Yes</term>
        ///     <term></term>
        ///   </item>
        /// </list>
        /// </remarks>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response CreateOrUpdateResourceSetRule(RequestContent content, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            HttpMessage message = CreateCreateOrUpdateResourceSetRuleRequest(content, options);
            if (options.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", options.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("ResourceSetRulesClient.CreateOrUpdateResourceSetRule");
            scope.Start();
            try
            {
                Pipeline.Send(message, options.CancellationToken);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create Request for <see cref="CreateOrUpdateResourceSetRule"/> and <see cref="CreateOrUpdateResourceSetRuleAsync"/> operations. </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options. </param>
        private HttpMessage CreateCreateOrUpdateResourceSetRuleRequest(RequestContent content, RequestOptions options = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/resourceSetRuleConfigs/defaultResourceSetRuleConfig", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        /// <summary> Deletes a ResourceSetRuleConfig resource. </summary>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> DeleteResourceSetRuleAsync(RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            HttpMessage message = CreateDeleteResourceSetRuleRequest(options);
            if (options.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", options.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("ResourceSetRulesClient.DeleteResourceSetRule");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, options.CancellationToken).ConfigureAwait(false);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                        case 204:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a ResourceSetRuleConfig resource. </summary>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response DeleteResourceSetRule(RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            HttpMessage message = CreateDeleteResourceSetRuleRequest(options);
            if (options.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", options.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("ResourceSetRulesClient.DeleteResourceSetRule");
            scope.Start();
            try
            {
                Pipeline.Send(message, options.CancellationToken);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                        case 204:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create Request for <see cref="DeleteResourceSetRule"/> and <see cref="DeleteResourceSetRuleAsync"/> operations. </summary>
        /// <param name="options"> The request options. </param>
        private HttpMessage CreateDeleteResourceSetRuleRequest(RequestOptions options = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/resourceSetRuleConfigs/defaultResourceSetRuleConfig", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get a resource set config service model. </summary>
        /// <param name="skipToken"> The String to use. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> ListResourceSetRulesAsync(string skipToken = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            HttpMessage message = CreateListResourceSetRulesRequest(skipToken, options);
            if (options.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", options.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("ResourceSetRulesClient.ListResourceSetRules");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, options.CancellationToken).ConfigureAwait(false);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a resource set config service model. </summary>
        /// <param name="skipToken"> The String to use. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response ListResourceSetRules(string skipToken = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            HttpMessage message = CreateListResourceSetRulesRequest(skipToken, options);
            if (options.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", options.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("ResourceSetRulesClient.ListResourceSetRules");
            scope.Start();
            try
            {
                Pipeline.Send(message, options.CancellationToken);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create Request for <see cref="ListResourceSetRules"/> and <see cref="ListResourceSetRulesAsync"/> operations. </summary>
        /// <param name="skipToken"> The String to use. </param>
        /// <param name="options"> The request options. </param>
        private HttpMessage CreateListResourceSetRulesRequest(string skipToken = null, RequestOptions options = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/resourceSetRuleConfigs", false);
            uri.AppendQuery("api-version", apiVersion, true);
            if (skipToken != null)
            {
                uri.AppendQuery("$skipToken", skipToken, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }
    }
}
