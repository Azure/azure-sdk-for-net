<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="GetCollectionAsync(RequestContext)">
<example>
This sample shows how to call GetCollectionAsync and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewAccountClient(endpoint, credential).GetPurviewCollectionClient("<collectionName>");

Response response = await client.GetCollectionAsync();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("collectionProvisioningState").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("parentCollection").GetProperty("referenceName").ToString());
Console.WriteLine(result.GetProperty("parentCollection").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedBy").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedByType").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Collection</c>:
<code>{
  collectionProvisioningState: &quot;Unknown&quot; | &quot;Creating&quot; | &quot;Moving&quot; | &quot;Deleting&quot; | &quot;Failed&quot; | &quot;Succeeded&quot;, # Optional. Gets the state of the provisioning.
  description: string, # Optional. Gets or sets the description.
  friendlyName: string, # Optional. Gets or sets the friendly name of the collection.
  name: string, # Optional. Gets the name.
  parentCollection: {
    referenceName: string, # Optional. Gets or sets the reference name.
    type: string, # Optional. Gets the reference type property.
  }, # Optional. Gets or sets the parent collection reference.
  systemData: {
    createdAt: string (ISO 8601 Format), # Optional. The timestamp of resource creation (UTC).
    createdBy: string, # Optional. The identity that created the resource.
    createdByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;, # Optional. The type of identity that created the resource.
    lastModifiedAt: string (ISO 8601 Format), # Optional. The timestamp of the last modification the resource (UTC).
    lastModifiedBy: string, # Optional. The identity that last modified the resource.
    lastModifiedByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;, # Optional. The type of identity that last modified the resource.
  }, # Optional. Gets the system data that contains information about who and when created and updated the resource.
}
</code>

</remarks>
    </member>
    <member name="GetCollection(RequestContext)">
<example>
This sample shows how to call GetCollection and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewAccountClient(endpoint, credential).GetPurviewCollectionClient("<collectionName>");

Response response = client.GetCollection();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("collectionProvisioningState").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("parentCollection").GetProperty("referenceName").ToString());
Console.WriteLine(result.GetProperty("parentCollection").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedBy").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedByType").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Collection</c>:
<code>{
  collectionProvisioningState: &quot;Unknown&quot; | &quot;Creating&quot; | &quot;Moving&quot; | &quot;Deleting&quot; | &quot;Failed&quot; | &quot;Succeeded&quot;, # Optional. Gets the state of the provisioning.
  description: string, # Optional. Gets or sets the description.
  friendlyName: string, # Optional. Gets or sets the friendly name of the collection.
  name: string, # Optional. Gets the name.
  parentCollection: {
    referenceName: string, # Optional. Gets or sets the reference name.
    type: string, # Optional. Gets the reference type property.
  }, # Optional. Gets or sets the parent collection reference.
  systemData: {
    createdAt: string (ISO 8601 Format), # Optional. The timestamp of resource creation (UTC).
    createdBy: string, # Optional. The identity that created the resource.
    createdByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;, # Optional. The type of identity that created the resource.
    lastModifiedAt: string (ISO 8601 Format), # Optional. The timestamp of the last modification the resource (UTC).
    lastModifiedBy: string, # Optional. The identity that last modified the resource.
    lastModifiedByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;, # Optional. The type of identity that last modified the resource.
  }, # Optional. Gets the system data that contains information about who and when created and updated the resource.
}
</code>

</remarks>
    </member>
    <member name="CreateOrUpdateCollectionAsync(RequestContent,RequestContext)">
<example>
This sample shows how to call CreateOrUpdateCollectionAsync and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewAccountClient(endpoint, credential).GetPurviewCollectionClient("<collectionName>");

var data = new {};

Response response = await client.CreateOrUpdateCollectionAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateOrUpdateCollectionAsync with all request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewAccountClient(endpoint, credential).GetPurviewCollectionClient("<collectionName>");

var data = new {
    description = "<description>",
    friendlyName = "<friendlyName>",
    parentCollection = new {
        referenceName = "<referenceName>",
    },
};

Response response = await client.CreateOrUpdateCollectionAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("collectionProvisioningState").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("parentCollection").GetProperty("referenceName").ToString());
Console.WriteLine(result.GetProperty("parentCollection").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedBy").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedByType").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>Collection</c>:
<code>{
  collectionProvisioningState: &quot;Unknown&quot; | &quot;Creating&quot; | &quot;Moving&quot; | &quot;Deleting&quot; | &quot;Failed&quot; | &quot;Succeeded&quot;, # Optional. Gets the state of the provisioning.
  description: string, # Optional. Gets or sets the description.
  friendlyName: string, # Optional. Gets or sets the friendly name of the collection.
  name: string, # Optional. Gets the name.
  parentCollection: {
    referenceName: string, # Optional. Gets or sets the reference name.
    type: string, # Optional. Gets the reference type property.
  }, # Optional. Gets or sets the parent collection reference.
  systemData: {
    createdAt: string (ISO 8601 Format), # Optional. The timestamp of resource creation (UTC).
    createdBy: string, # Optional. The identity that created the resource.
    createdByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;, # Optional. The type of identity that created the resource.
    lastModifiedAt: string (ISO 8601 Format), # Optional. The timestamp of the last modification the resource (UTC).
    lastModifiedBy: string, # Optional. The identity that last modified the resource.
    lastModifiedByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;, # Optional. The type of identity that last modified the resource.
  }, # Optional. Gets the system data that contains information about who and when created and updated the resource.
}
</code>

Response Body:

Schema for <c>Collection</c>:
<code>{
  collectionProvisioningState: &quot;Unknown&quot; | &quot;Creating&quot; | &quot;Moving&quot; | &quot;Deleting&quot; | &quot;Failed&quot; | &quot;Succeeded&quot;, # Optional. Gets the state of the provisioning.
  description: string, # Optional. Gets or sets the description.
  friendlyName: string, # Optional. Gets or sets the friendly name of the collection.
  name: string, # Optional. Gets the name.
  parentCollection: {
    referenceName: string, # Optional. Gets or sets the reference name.
    type: string, # Optional. Gets the reference type property.
  }, # Optional. Gets or sets the parent collection reference.
  systemData: {
    createdAt: string (ISO 8601 Format), # Optional. The timestamp of resource creation (UTC).
    createdBy: string, # Optional. The identity that created the resource.
    createdByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;, # Optional. The type of identity that created the resource.
    lastModifiedAt: string (ISO 8601 Format), # Optional. The timestamp of the last modification the resource (UTC).
    lastModifiedBy: string, # Optional. The identity that last modified the resource.
    lastModifiedByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;, # Optional. The type of identity that last modified the resource.
  }, # Optional. Gets the system data that contains information about who and when created and updated the resource.
}
</code>

</remarks>
    </member>
    <member name="CreateOrUpdateCollection(RequestContent,RequestContext)">
<example>
This sample shows how to call CreateOrUpdateCollection and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewAccountClient(endpoint, credential).GetPurviewCollectionClient("<collectionName>");

var data = new {};

Response response = client.CreateOrUpdateCollection(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateOrUpdateCollection with all request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewAccountClient(endpoint, credential).GetPurviewCollectionClient("<collectionName>");

var data = new {
    description = "<description>",
    friendlyName = "<friendlyName>",
    parentCollection = new {
        referenceName = "<referenceName>",
    },
};

Response response = client.CreateOrUpdateCollection(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("collectionProvisioningState").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("parentCollection").GetProperty("referenceName").ToString());
Console.WriteLine(result.GetProperty("parentCollection").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedBy").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedByType").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>Collection</c>:
<code>{
  collectionProvisioningState: &quot;Unknown&quot; | &quot;Creating&quot; | &quot;Moving&quot; | &quot;Deleting&quot; | &quot;Failed&quot; | &quot;Succeeded&quot;, # Optional. Gets the state of the provisioning.
  description: string, # Optional. Gets or sets the description.
  friendlyName: string, # Optional. Gets or sets the friendly name of the collection.
  name: string, # Optional. Gets the name.
  parentCollection: {
    referenceName: string, # Optional. Gets or sets the reference name.
    type: string, # Optional. Gets the reference type property.
  }, # Optional. Gets or sets the parent collection reference.
  systemData: {
    createdAt: string (ISO 8601 Format), # Optional. The timestamp of resource creation (UTC).
    createdBy: string, # Optional. The identity that created the resource.
    createdByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;, # Optional. The type of identity that created the resource.
    lastModifiedAt: string (ISO 8601 Format), # Optional. The timestamp of the last modification the resource (UTC).
    lastModifiedBy: string, # Optional. The identity that last modified the resource.
    lastModifiedByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;, # Optional. The type of identity that last modified the resource.
  }, # Optional. Gets the system data that contains information about who and when created and updated the resource.
}
</code>

Response Body:

Schema for <c>Collection</c>:
<code>{
  collectionProvisioningState: &quot;Unknown&quot; | &quot;Creating&quot; | &quot;Moving&quot; | &quot;Deleting&quot; | &quot;Failed&quot; | &quot;Succeeded&quot;, # Optional. Gets the state of the provisioning.
  description: string, # Optional. Gets or sets the description.
  friendlyName: string, # Optional. Gets or sets the friendly name of the collection.
  name: string, # Optional. Gets the name.
  parentCollection: {
    referenceName: string, # Optional. Gets or sets the reference name.
    type: string, # Optional. Gets the reference type property.
  }, # Optional. Gets or sets the parent collection reference.
  systemData: {
    createdAt: string (ISO 8601 Format), # Optional. The timestamp of resource creation (UTC).
    createdBy: string, # Optional. The identity that created the resource.
    createdByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;, # Optional. The type of identity that created the resource.
    lastModifiedAt: string (ISO 8601 Format), # Optional. The timestamp of the last modification the resource (UTC).
    lastModifiedBy: string, # Optional. The identity that last modified the resource.
    lastModifiedByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;, # Optional. The type of identity that last modified the resource.
  }, # Optional. Gets the system data that contains information about who and when created and updated the resource.
}
</code>

</remarks>
    </member>
    <member name="DeleteCollectionAsync(RequestContext)">
<example>
This sample shows how to call DeleteCollectionAsync.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewAccountClient(endpoint, credential).GetPurviewCollectionClient("<collectionName>");

Response response = await client.DeleteCollectionAsync();
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="DeleteCollection(RequestContext)">
<example>
This sample shows how to call DeleteCollection.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewAccountClient(endpoint, credential).GetPurviewCollectionClient("<collectionName>");

Response response = client.DeleteCollection();
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="GetCollectionPathAsync(RequestContext)">
<example>
This sample shows how to call GetCollectionPathAsync and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewAccountClient(endpoint, credential).GetPurviewCollectionClient("<collectionName>");

Response response = await client.GetCollectionPathAsync();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("parentFriendlyNameChain")[0].ToString());
Console.WriteLine(result.GetProperty("parentNameChain")[0].ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>CollectionPathResponse</c>:
<code>{
  parentFriendlyNameChain: [string], # Optional. The friendly names of ancestors starting from the default (root) collection and ending with the immediate parent.
  parentNameChain: [string], # Optional. The names of ancestors starting from the default (root) collection and ending with the immediate parent.
}
</code>

</remarks>
    </member>
    <member name="GetCollectionPath(RequestContext)">
<example>
This sample shows how to call GetCollectionPath and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewAccountClient(endpoint, credential).GetPurviewCollectionClient("<collectionName>");

Response response = client.GetCollectionPath();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("parentFriendlyNameChain")[0].ToString());
Console.WriteLine(result.GetProperty("parentNameChain")[0].ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>CollectionPathResponse</c>:
<code>{
  parentFriendlyNameChain: [string], # Optional. The friendly names of ancestors starting from the default (root) collection and ending with the immediate parent.
  parentNameChain: [string], # Optional. The names of ancestors starting from the default (root) collection and ending with the immediate parent.
}
</code>

</remarks>
    </member>
    <member name="GetChildCollectionNamesAsync(String,RequestContext)">
<example>
This sample shows how to call GetChildCollectionNamesAsync and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewAccountClient(endpoint, credential).GetPurviewCollectionClient("<collectionName>");

await foreach (var data in client.GetChildCollectionNamesAsync())
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetChildCollectionNamesAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewAccountClient(endpoint, credential).GetPurviewCollectionClient("<collectionName>");

await foreach (var data in client.GetChildCollectionNamesAsync("<skipToken>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("friendlyName").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>CollectionNameResponseListValue</c>:
<code>{
  friendlyName: string, # Optional. Gets or sets the friendly name of the collection.
  name: string, # Optional. Gets the name.
}
</code>

</remarks>
    </member>
    <member name="GetChildCollectionNames(String,RequestContext)">
<example>
This sample shows how to call GetChildCollectionNames and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewAccountClient(endpoint, credential).GetPurviewCollectionClient("<collectionName>");

foreach (var data in client.GetChildCollectionNames())
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetChildCollectionNames with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewAccountClient(endpoint, credential).GetPurviewCollectionClient("<collectionName>");

foreach (var data in client.GetChildCollectionNames("<skipToken>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("friendlyName").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>CollectionNameResponseListValue</c>:
<code>{
  friendlyName: string, # Optional. Gets or sets the friendly name of the collection.
  name: string, # Optional. Gets the name.
}
</code>

</remarks>
    </member>
  </members>
</doc>