// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Analytics.Purview.Account
{
    /// <summary> The PurviewAccount service client. </summary>
    public partial class PurviewAccountClient
    {
        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline { get => _pipeline; }
        private HttpPipeline _pipeline;
        private readonly string[] AuthorizationScopes = { "https://purview.azure.net/.default" };
        private readonly TokenCredential _tokenCredential;
        private Uri endpoint;
        private readonly string apiVersion;
        private readonly ClientDiagnostics _clientDiagnostics;

        /// <summary> Initializes a new instance of PurviewAccountClient for mocking. </summary>
        protected PurviewAccountClient()
        {
        }

        /// <summary> Initializes a new instance of PurviewAccountClient. </summary>
        /// <param name="endpoint"> The account endpoint of your Purview account. Example: https://{accountName}.purview.azure.com/account/. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public PurviewAccountClient(Uri endpoint, TokenCredential credential, PurviewAccountClientOptions options = null)
        {
            if (endpoint == null)
            {
                throw new ArgumentNullException(nameof(endpoint));
            }
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }

            options ??= new PurviewAccountClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            _tokenCredential = credential;
            var authPolicy = new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes);
            _pipeline = HttpPipelineBuilder.Build(options, new HttpPipelinePolicy[] { new LowLevelCallbackPolicy() }, new HttpPipelinePolicy[] { authPolicy }, new ResponseClassifier());
            this.endpoint = endpoint;
            apiVersion = options.Version;
        }

        /// <summary> Get an account. </summary>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   id: string,
        ///   identity: {
        ///     principalId: string,
        ///     tenantId: string,
        ///     type: &quot;SystemAssigned&quot;
        ///   },
        ///   location: string,
        ///   name: string,
        ///   properties: {
        ///     cloudConnectors: {
        ///       awsExternalId: string
        ///     },
        ///     createdAt: string (ISO 8601 Format),
        ///     createdBy: string,
        ///     createdByObjectId: string,
        ///     endpoints: {
        ///       catalog: string,
        ///       guardian: string,
        ///       scan: string
        ///     },
        ///     friendlyName: string,
        ///     managedResourceGroupName: string,
        ///     managedResources: {
        ///       eventHubNamespace: string,
        ///       resourceGroup: string,
        ///       storageAccount: string
        ///     },
        ///     privateEndpointConnections: [
        ///       {
        ///         id: string,
        ///         name: string,
        ///         properties: {
        ///           privateEndpoint: {
        ///             id: string
        ///           },
        ///           privateLinkServiceConnectionState: {
        ///             actionsRequired: string,
        ///             description: string,
        ///             status: &quot;Unknown&quot; | &quot;Pending&quot; | &quot;Approved&quot; | &quot;Rejected&quot; | &quot;Disconnected&quot;
        ///           },
        ///           provisioningState: string
        ///         },
        ///         type: string
        ///       }
        ///     ],
        ///     provisioningState: &quot;Unknown&quot; | &quot;Creating&quot; | &quot;Moving&quot; | &quot;Deleting&quot; | &quot;SoftDeleting&quot; | &quot;SoftDeleted&quot; | &quot;Failed&quot; | &quot;Succeeded&quot; | &quot;Canceled&quot;,
        ///     publicNetworkAccess: &quot;NotSpecified&quot; | &quot;Enabled&quot; | &quot;Disabled&quot;
        ///   },
        ///   sku: {
        ///     capacity: number,
        ///     name: &quot;Standard&quot;
        ///   },
        ///   systemData: {
        ///     createdAt: string (ISO 8601 Format),
        ///     createdBy: string,
        ///     createdByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;,
        ///     lastModifiedAt: string (ISO 8601 Format),
        ///     lastModifiedBy: string,
        ///     lastModifiedByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;
        ///   },
        ///   tags: Dictionary&lt;string, string&gt;,
        ///   type: string
        /// }
        /// </code>
        /// 
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         details: [ErrorModel],
        ///         message: string,
        ///         target: string
        ///       }
        ///     ],
        ///     message: string,
        ///     target: string
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> GetAccountPropertiesAsync(RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateGetAccountPropertiesRequest();
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewAccountClient.GetAccountProperties");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, options.CancellationToken).ConfigureAwait(false);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get an account. </summary>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   id: string,
        ///   identity: {
        ///     principalId: string,
        ///     tenantId: string,
        ///     type: &quot;SystemAssigned&quot;
        ///   },
        ///   location: string,
        ///   name: string,
        ///   properties: {
        ///     cloudConnectors: {
        ///       awsExternalId: string
        ///     },
        ///     createdAt: string (ISO 8601 Format),
        ///     createdBy: string,
        ///     createdByObjectId: string,
        ///     endpoints: {
        ///       catalog: string,
        ///       guardian: string,
        ///       scan: string
        ///     },
        ///     friendlyName: string,
        ///     managedResourceGroupName: string,
        ///     managedResources: {
        ///       eventHubNamespace: string,
        ///       resourceGroup: string,
        ///       storageAccount: string
        ///     },
        ///     privateEndpointConnections: [
        ///       {
        ///         id: string,
        ///         name: string,
        ///         properties: {
        ///           privateEndpoint: {
        ///             id: string
        ///           },
        ///           privateLinkServiceConnectionState: {
        ///             actionsRequired: string,
        ///             description: string,
        ///             status: &quot;Unknown&quot; | &quot;Pending&quot; | &quot;Approved&quot; | &quot;Rejected&quot; | &quot;Disconnected&quot;
        ///           },
        ///           provisioningState: string
        ///         },
        ///         type: string
        ///       }
        ///     ],
        ///     provisioningState: &quot;Unknown&quot; | &quot;Creating&quot; | &quot;Moving&quot; | &quot;Deleting&quot; | &quot;SoftDeleting&quot; | &quot;SoftDeleted&quot; | &quot;Failed&quot; | &quot;Succeeded&quot; | &quot;Canceled&quot;,
        ///     publicNetworkAccess: &quot;NotSpecified&quot; | &quot;Enabled&quot; | &quot;Disabled&quot;
        ///   },
        ///   sku: {
        ///     capacity: number,
        ///     name: &quot;Standard&quot;
        ///   },
        ///   systemData: {
        ///     createdAt: string (ISO 8601 Format),
        ///     createdBy: string,
        ///     createdByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;,
        ///     lastModifiedAt: string (ISO 8601 Format),
        ///     lastModifiedBy: string,
        ///     lastModifiedByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;
        ///   },
        ///   tags: Dictionary&lt;string, string&gt;,
        ///   type: string
        /// }
        /// </code>
        /// 
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         details: [ErrorModel],
        ///         message: string,
        ///         target: string
        ///       }
        ///     ],
        ///     message: string,
        ///     target: string
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response GetAccountProperties(RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateGetAccountPropertiesRequest();
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewAccountClient.GetAccountProperties");
            scope.Start();
            try
            {
                Pipeline.Send(message, options.CancellationToken);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        private HttpMessage CreateGetAccountPropertiesRequest()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Updates an account. </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   friendlyName: string
        /// }
        /// </code>
        /// 
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   id: string,
        ///   identity: {
        ///     principalId: string,
        ///     tenantId: string,
        ///     type: &quot;SystemAssigned&quot;
        ///   },
        ///   location: string,
        ///   name: string,
        ///   properties: {
        ///     cloudConnectors: {
        ///       awsExternalId: string
        ///     },
        ///     createdAt: string (ISO 8601 Format),
        ///     createdBy: string,
        ///     createdByObjectId: string,
        ///     endpoints: {
        ///       catalog: string,
        ///       guardian: string,
        ///       scan: string
        ///     },
        ///     friendlyName: string,
        ///     managedResourceGroupName: string,
        ///     managedResources: {
        ///       eventHubNamespace: string,
        ///       resourceGroup: string,
        ///       storageAccount: string
        ///     },
        ///     privateEndpointConnections: [
        ///       {
        ///         id: string,
        ///         name: string,
        ///         properties: {
        ///           privateEndpoint: {
        ///             id: string
        ///           },
        ///           privateLinkServiceConnectionState: {
        ///             actionsRequired: string,
        ///             description: string,
        ///             status: &quot;Unknown&quot; | &quot;Pending&quot; | &quot;Approved&quot; | &quot;Rejected&quot; | &quot;Disconnected&quot;
        ///           },
        ///           provisioningState: string
        ///         },
        ///         type: string
        ///       }
        ///     ],
        ///     provisioningState: &quot;Unknown&quot; | &quot;Creating&quot; | &quot;Moving&quot; | &quot;Deleting&quot; | &quot;SoftDeleting&quot; | &quot;SoftDeleted&quot; | &quot;Failed&quot; | &quot;Succeeded&quot; | &quot;Canceled&quot;,
        ///     publicNetworkAccess: &quot;NotSpecified&quot; | &quot;Enabled&quot; | &quot;Disabled&quot;
        ///   },
        ///   sku: {
        ///     capacity: number,
        ///     name: &quot;Standard&quot;
        ///   },
        ///   systemData: {
        ///     createdAt: string (ISO 8601 Format),
        ///     createdBy: string,
        ///     createdByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;,
        ///     lastModifiedAt: string (ISO 8601 Format),
        ///     lastModifiedBy: string,
        ///     lastModifiedByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;
        ///   },
        ///   tags: Dictionary&lt;string, string&gt;,
        ///   type: string
        /// }
        /// </code>
        /// 
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         details: [ErrorModel],
        ///         message: string,
        ///         target: string
        ///       }
        ///     ],
        ///     message: string,
        ///     target: string
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> UpdateAccountPropertiesAsync(RequestContent content, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateUpdateAccountPropertiesRequest(content);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewAccountClient.UpdateAccountProperties");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, options.CancellationToken).ConfigureAwait(false);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates an account. </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   friendlyName: string
        /// }
        /// </code>
        /// 
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   id: string,
        ///   identity: {
        ///     principalId: string,
        ///     tenantId: string,
        ///     type: &quot;SystemAssigned&quot;
        ///   },
        ///   location: string,
        ///   name: string,
        ///   properties: {
        ///     cloudConnectors: {
        ///       awsExternalId: string
        ///     },
        ///     createdAt: string (ISO 8601 Format),
        ///     createdBy: string,
        ///     createdByObjectId: string,
        ///     endpoints: {
        ///       catalog: string,
        ///       guardian: string,
        ///       scan: string
        ///     },
        ///     friendlyName: string,
        ///     managedResourceGroupName: string,
        ///     managedResources: {
        ///       eventHubNamespace: string,
        ///       resourceGroup: string,
        ///       storageAccount: string
        ///     },
        ///     privateEndpointConnections: [
        ///       {
        ///         id: string,
        ///         name: string,
        ///         properties: {
        ///           privateEndpoint: {
        ///             id: string
        ///           },
        ///           privateLinkServiceConnectionState: {
        ///             actionsRequired: string,
        ///             description: string,
        ///             status: &quot;Unknown&quot; | &quot;Pending&quot; | &quot;Approved&quot; | &quot;Rejected&quot; | &quot;Disconnected&quot;
        ///           },
        ///           provisioningState: string
        ///         },
        ///         type: string
        ///       }
        ///     ],
        ///     provisioningState: &quot;Unknown&quot; | &quot;Creating&quot; | &quot;Moving&quot; | &quot;Deleting&quot; | &quot;SoftDeleting&quot; | &quot;SoftDeleted&quot; | &quot;Failed&quot; | &quot;Succeeded&quot; | &quot;Canceled&quot;,
        ///     publicNetworkAccess: &quot;NotSpecified&quot; | &quot;Enabled&quot; | &quot;Disabled&quot;
        ///   },
        ///   sku: {
        ///     capacity: number,
        ///     name: &quot;Standard&quot;
        ///   },
        ///   systemData: {
        ///     createdAt: string (ISO 8601 Format),
        ///     createdBy: string,
        ///     createdByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;,
        ///     lastModifiedAt: string (ISO 8601 Format),
        ///     lastModifiedBy: string,
        ///     lastModifiedByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;
        ///   },
        ///   tags: Dictionary&lt;string, string&gt;,
        ///   type: string
        /// }
        /// </code>
        /// 
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         details: [ErrorModel],
        ///         message: string,
        ///         target: string
        ///       }
        ///     ],
        ///     message: string,
        ///     target: string
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response UpdateAccountProperties(RequestContent content, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateUpdateAccountPropertiesRequest(content);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewAccountClient.UpdateAccountProperties");
            scope.Start();
            try
            {
                Pipeline.Send(message, options.CancellationToken);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        private HttpMessage CreateUpdateAccountPropertiesRequest(RequestContent content)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        /// <summary> List the authorization keys associated with this account. </summary>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   atlasKafkaPrimaryEndpoint: string,
        ///   atlasKafkaSecondaryEndpoint: string
        /// }
        /// </code>
        /// 
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         details: [ErrorModel],
        ///         message: string,
        ///         target: string
        ///       }
        ///     ],
        ///     message: string,
        ///     target: string
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> GetAccessKeysAsync(RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateGetAccessKeysRequest();
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewAccountClient.GetAccessKeys");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, options.CancellationToken).ConfigureAwait(false);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List the authorization keys associated with this account. </summary>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   atlasKafkaPrimaryEndpoint: string,
        ///   atlasKafkaSecondaryEndpoint: string
        /// }
        /// </code>
        /// 
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         details: [ErrorModel],
        ///         message: string,
        ///         target: string
        ///       }
        ///     ],
        ///     message: string,
        ///     target: string
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response GetAccessKeys(RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateGetAccessKeysRequest();
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewAccountClient.GetAccessKeys");
            scope.Start();
            try
            {
                Pipeline.Send(message, options.CancellationToken);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        private HttpMessage CreateGetAccessKeysRequest()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/listkeys", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Regenerate the authorization keys associated with this data catalog. </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   keyType: &quot;PrimaryAtlasKafkaKey&quot; | &quot;SecondaryAtlasKafkaKey&quot;
        /// }
        /// </code>
        /// 
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   atlasKafkaPrimaryEndpoint: string,
        ///   atlasKafkaSecondaryEndpoint: string
        /// }
        /// </code>
        /// 
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         details: [ErrorModel],
        ///         message: string,
        ///         target: string
        ///       }
        ///     ],
        ///     message: string,
        ///     target: string
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> RegenerateAccessKeyAsync(RequestContent content, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateRegenerateAccessKeyRequest(content);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewAccountClient.RegenerateAccessKey");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, options.CancellationToken).ConfigureAwait(false);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Regenerate the authorization keys associated with this data catalog. </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   keyType: &quot;PrimaryAtlasKafkaKey&quot; | &quot;SecondaryAtlasKafkaKey&quot;
        /// }
        /// </code>
        /// 
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   atlasKafkaPrimaryEndpoint: string,
        ///   atlasKafkaSecondaryEndpoint: string
        /// }
        /// </code>
        /// 
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         details: [ErrorModel],
        ///         message: string,
        ///         target: string
        ///       }
        ///     ],
        ///     message: string,
        ///     target: string
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response RegenerateAccessKey(RequestContent content, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateRegenerateAccessKeyRequest(content);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewAccountClient.RegenerateAccessKey");
            scope.Start();
            try
            {
                Pipeline.Send(message, options.CancellationToken);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        private HttpMessage CreateRegenerateAccessKeyRequest(RequestContent content)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/regeneratekeys", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        /// <summary> List the collections in the account. </summary>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   count: number,
        ///   nextLink: string,
        ///   value: [
        ///     {
        ///       collectionProvisioningState: &quot;Unknown&quot; | &quot;Creating&quot; | &quot;Moving&quot; | &quot;Deleting&quot; | &quot;Failed&quot; | &quot;Succeeded&quot;,
        ///       description: string,
        ///       friendlyName: string,
        ///       name: string,
        ///       parentCollection: {
        ///         referenceName: string,
        ///         type: string
        ///       },
        ///       systemData: {
        ///         createdAt: string (ISO 8601 Format),
        ///         createdBy: string,
        ///         createdByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;,
        ///         lastModifiedAt: string (ISO 8601 Format),
        ///         lastModifiedBy: string,
        ///         lastModifiedByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;
        ///       }
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         details: [ErrorModel],
        ///         message: string,
        ///         target: string
        ///       }
        ///     ],
        ///     message: string,
        ///     target: string
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="skipToken"> The String to use. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> GetCollectionsAsync(string skipToken = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateGetCollectionsRequest(skipToken);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewAccountClient.GetCollections");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, options.CancellationToken).ConfigureAwait(false);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List the collections in the account. </summary>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   count: number,
        ///   nextLink: string,
        ///   value: [
        ///     {
        ///       collectionProvisioningState: &quot;Unknown&quot; | &quot;Creating&quot; | &quot;Moving&quot; | &quot;Deleting&quot; | &quot;Failed&quot; | &quot;Succeeded&quot;,
        ///       description: string,
        ///       friendlyName: string,
        ///       name: string,
        ///       parentCollection: {
        ///         referenceName: string,
        ///         type: string
        ///       },
        ///       systemData: {
        ///         createdAt: string (ISO 8601 Format),
        ///         createdBy: string,
        ///         createdByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;,
        ///         lastModifiedAt: string (ISO 8601 Format),
        ///         lastModifiedBy: string,
        ///         lastModifiedByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;
        ///       }
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         details: [ErrorModel],
        ///         message: string,
        ///         target: string
        ///       }
        ///     ],
        ///     message: string,
        ///     target: string
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="skipToken"> The String to use. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response GetCollections(string skipToken = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateGetCollectionsRequest(skipToken);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewAccountClient.GetCollections");
            scope.Start();
            try
            {
                Pipeline.Send(message, options.CancellationToken);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        private HttpMessage CreateGetCollectionsRequest(string skipToken)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/collections", false);
            uri.AppendQuery("api-version", apiVersion, true);
            if (skipToken != null)
            {
                uri.AppendQuery("$skipToken", skipToken, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get a resource set config service model. </summary>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   count: number,
        ///   nextLink: string,
        ///   value: [
        ///     {
        ///       advancedResourceSet: {
        ///         modifiedAt: string (ISO 8601 Format),
        ///         resourceSetProcessing: &quot;Default&quot; | &quot;Advanced&quot;
        ///       },
        ///       name: string,
        ///       pathPatternConfig: {
        ///         acceptedPatterns: [
        ///           {
        ///             createdBy: string,
        ///             filterType: &quot;Pattern&quot; | &quot;Regex&quot;,
        ///             lastUpdatedTimestamp: number,
        ///             modifiedBy: string,
        ///             name: string,
        ///             path: string
        ///           }
        ///         ],
        ///         complexReplacers: [
        ///           {
        ///             createdBy: string,
        ///             description: string,
        ///             disabled: boolean,
        ///             disableRecursiveReplacerApplication: boolean,
        ///             lastUpdatedTimestamp: number,
        ///             modifiedBy: string,
        ///             name: string,
        ///             typeName: string
        ///           }
        ///         ],
        ///         createdBy: string,
        ///         enableDefaultPatterns: boolean,
        ///         lastUpdatedTimestamp: number,
        ///         modifiedBy: string,
        ///         normalizationRules: [
        ///           {
        ///             description: string,
        ///             disabled: boolean,
        ///             dynamicReplacement: boolean,
        ///             entityTypes: [string],
        ///             lastUpdatedTimestamp: number,
        ///             name: string,
        ///             regex: {
        ///               maxDigits: number,
        ///               maxLetters: number,
        ///               minDashes: number,
        ///               minDigits: number,
        ///               minDigitsOrLetters: number,
        ///               minDots: number,
        ///               minHex: number,
        ///               minLetters: number,
        ///               minUnderscores: number,
        ///               options: number,
        ///               regexStr: string
        ///             },
        ///             replaceWith: string,
        ///             version: number
        ///           }
        ///         ],
        ///         regexReplacers: [
        ///           {
        ///             condition: string,
        ///             createdBy: string,
        ///             description: string,
        ///             disabled: boolean,
        ///             disableRecursiveReplacerApplication: boolean,
        ///             doNotReplaceRegex: FastRegex,
        ///             lastUpdatedTimestamp: number,
        ///             modifiedBy: string,
        ///             name: string,
        ///             regex: FastRegex,
        ///             replaceWith: string
        ///           }
        ///         ],
        ///         rejectedPatterns: [Filter],
        ///         scopedRules: [
        ///           {
        ///             bindingUrl: string,
        ///             rules: [
        ///               {
        ///                 displayName: string,
        ///                 isResourceSet: boolean,
        ///                 lastUpdatedTimestamp: number,
        ///                 name: string,
        ///                 qualifiedName: string
        ///               }
        ///             ],
        ///             storeType: string
        ///           }
        ///         ],
        ///         version: number
        ///       }
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         details: [ErrorModel],
        ///         message: string,
        ///         target: string
        ///       }
        ///     ],
        ///     message: string,
        ///     target: string
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="skipToken"> The String to use. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> GetResourceSetRulesAsync(string skipToken = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateGetResourceSetRulesRequest(skipToken);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewAccountClient.GetResourceSetRules");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, options.CancellationToken).ConfigureAwait(false);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a resource set config service model. </summary>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   count: number,
        ///   nextLink: string,
        ///   value: [
        ///     {
        ///       advancedResourceSet: {
        ///         modifiedAt: string (ISO 8601 Format),
        ///         resourceSetProcessing: &quot;Default&quot; | &quot;Advanced&quot;
        ///       },
        ///       name: string,
        ///       pathPatternConfig: {
        ///         acceptedPatterns: [
        ///           {
        ///             createdBy: string,
        ///             filterType: &quot;Pattern&quot; | &quot;Regex&quot;,
        ///             lastUpdatedTimestamp: number,
        ///             modifiedBy: string,
        ///             name: string,
        ///             path: string
        ///           }
        ///         ],
        ///         complexReplacers: [
        ///           {
        ///             createdBy: string,
        ///             description: string,
        ///             disabled: boolean,
        ///             disableRecursiveReplacerApplication: boolean,
        ///             lastUpdatedTimestamp: number,
        ///             modifiedBy: string,
        ///             name: string,
        ///             typeName: string
        ///           }
        ///         ],
        ///         createdBy: string,
        ///         enableDefaultPatterns: boolean,
        ///         lastUpdatedTimestamp: number,
        ///         modifiedBy: string,
        ///         normalizationRules: [
        ///           {
        ///             description: string,
        ///             disabled: boolean,
        ///             dynamicReplacement: boolean,
        ///             entityTypes: [string],
        ///             lastUpdatedTimestamp: number,
        ///             name: string,
        ///             regex: {
        ///               maxDigits: number,
        ///               maxLetters: number,
        ///               minDashes: number,
        ///               minDigits: number,
        ///               minDigitsOrLetters: number,
        ///               minDots: number,
        ///               minHex: number,
        ///               minLetters: number,
        ///               minUnderscores: number,
        ///               options: number,
        ///               regexStr: string
        ///             },
        ///             replaceWith: string,
        ///             version: number
        ///           }
        ///         ],
        ///         regexReplacers: [
        ///           {
        ///             condition: string,
        ///             createdBy: string,
        ///             description: string,
        ///             disabled: boolean,
        ///             disableRecursiveReplacerApplication: boolean,
        ///             doNotReplaceRegex: FastRegex,
        ///             lastUpdatedTimestamp: number,
        ///             modifiedBy: string,
        ///             name: string,
        ///             regex: FastRegex,
        ///             replaceWith: string
        ///           }
        ///         ],
        ///         rejectedPatterns: [Filter],
        ///         scopedRules: [
        ///           {
        ///             bindingUrl: string,
        ///             rules: [
        ///               {
        ///                 displayName: string,
        ///                 isResourceSet: boolean,
        ///                 lastUpdatedTimestamp: number,
        ///                 name: string,
        ///                 qualifiedName: string
        ///               }
        ///             ],
        ///             storeType: string
        ///           }
        ///         ],
        ///         version: number
        ///       }
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         details: [ErrorModel],
        ///         message: string,
        ///         target: string
        ///       }
        ///     ],
        ///     message: string,
        ///     target: string
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        /// <param name="skipToken"> The String to use. </param>
        /// <param name="options"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response GetResourceSetRules(string skipToken = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            using HttpMessage message = CreateGetResourceSetRulesRequest(skipToken);
            RequestOptions.Apply(options, message);
            using var scope = _clientDiagnostics.CreateScope("PurviewAccountClient.GetResourceSetRules");
            scope.Start();
            try
            {
                Pipeline.Send(message, options.CancellationToken);
                if (options.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        private HttpMessage CreateGetResourceSetRulesRequest(string skipToken)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/resourceSetRuleConfigs", false);
            uri.AppendQuery("api-version", apiVersion, true);
            if (skipToken != null)
            {
                uri.AppendQuery("$skipToken", skipToken, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }
    }
}
