// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Analytics.Purview.Account.Models
{
    public partial class NormalizationRule : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description");
                writer.WriteStringValue(Description);
            }
            if (Optional.IsDefined(Disabled))
            {
                writer.WritePropertyName("disabled");
                writer.WriteBooleanValue(Disabled.Value);
            }
            if (Optional.IsDefined(DynamicReplacement))
            {
                writer.WritePropertyName("dynamicReplacement");
                writer.WriteBooleanValue(DynamicReplacement.Value);
            }
            if (Optional.IsCollectionDefined(EntityTypes))
            {
                writer.WritePropertyName("entityTypes");
                writer.WriteStartArray();
                foreach (var item in EntityTypes)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(LastUpdatedTimestamp))
            {
                writer.WritePropertyName("lastUpdatedTimestamp");
                writer.WriteNumberValue(LastUpdatedTimestamp.Value);
            }
            if (Optional.IsDefined(Name))
            {
                writer.WritePropertyName("name");
                writer.WriteStringValue(Name);
            }
            if (Optional.IsDefined(Regex))
            {
                writer.WritePropertyName("regex");
                writer.WriteObjectValue(Regex);
            }
            if (Optional.IsDefined(ReplaceWith))
            {
                writer.WritePropertyName("replaceWith");
                writer.WriteStringValue(ReplaceWith);
            }
            if (Optional.IsDefined(Version))
            {
                writer.WritePropertyName("version");
                writer.WriteNumberValue(Version.Value);
            }
            writer.WriteEndObject();
        }

        internal static NormalizationRule DeserializeNormalizationRule(JsonElement element)
        {
            Optional<string> description = default;
            Optional<bool> disabled = default;
            Optional<bool> dynamicReplacement = default;
            Optional<IList<string>> entityTypes = default;
            Optional<long> lastUpdatedTimestamp = default;
            Optional<string> name = default;
            Optional<FastRegex> regex = default;
            Optional<string> replaceWith = default;
            Optional<double> version = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("description"))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("disabled"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    disabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("dynamicReplacement"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    dynamicReplacement = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("entityTypes"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    entityTypes = array;
                    continue;
                }
                if (property.NameEquals("lastUpdatedTimestamp"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    lastUpdatedTimestamp = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("regex"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    regex = FastRegex.DeserializeFastRegex(property.Value);
                    continue;
                }
                if (property.NameEquals("replaceWith"))
                {
                    replaceWith = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("version"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    version = property.Value.GetDouble();
                    continue;
                }
            }
            return new NormalizationRule(description.Value, Optional.ToNullable(disabled), Optional.ToNullable(dynamicReplacement), Optional.ToList(entityTypes), Optional.ToNullable(lastUpdatedTimestamp), name.Value, regex.Value, replaceWith.Value, Optional.ToNullable(version));
        }
    }
}
