// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.Analytics.Purview.Account.Models
{
    public partial class FastRegex : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(MaxDigits))
            {
                writer.WritePropertyName("maxDigits");
                writer.WriteNumberValue(MaxDigits.Value);
            }
            if (Optional.IsDefined(MaxLetters))
            {
                writer.WritePropertyName("maxLetters");
                writer.WriteNumberValue(MaxLetters.Value);
            }
            if (Optional.IsDefined(MinDashes))
            {
                writer.WritePropertyName("minDashes");
                writer.WriteNumberValue(MinDashes.Value);
            }
            if (Optional.IsDefined(MinDigits))
            {
                writer.WritePropertyName("minDigits");
                writer.WriteNumberValue(MinDigits.Value);
            }
            if (Optional.IsDefined(MinDigitsOrLetters))
            {
                writer.WritePropertyName("minDigitsOrLetters");
                writer.WriteNumberValue(MinDigitsOrLetters.Value);
            }
            if (Optional.IsDefined(MinDots))
            {
                writer.WritePropertyName("minDots");
                writer.WriteNumberValue(MinDots.Value);
            }
            if (Optional.IsDefined(MinHex))
            {
                writer.WritePropertyName("minHex");
                writer.WriteNumberValue(MinHex.Value);
            }
            if (Optional.IsDefined(MinLetters))
            {
                writer.WritePropertyName("minLetters");
                writer.WriteNumberValue(MinLetters.Value);
            }
            if (Optional.IsDefined(MinUnderscores))
            {
                writer.WritePropertyName("minUnderscores");
                writer.WriteNumberValue(MinUnderscores.Value);
            }
            if (Optional.IsDefined(Options))
            {
                writer.WritePropertyName("options");
                writer.WriteNumberValue(Options.Value);
            }
            if (Optional.IsDefined(RegexStr))
            {
                writer.WritePropertyName("regexStr");
                writer.WriteStringValue(RegexStr);
            }
            writer.WriteEndObject();
        }

        internal static FastRegex DeserializeFastRegex(JsonElement element)
        {
            Optional<int> maxDigits = default;
            Optional<int> maxLetters = default;
            Optional<int> minDashes = default;
            Optional<int> minDigits = default;
            Optional<int> minDigitsOrLetters = default;
            Optional<int> minDots = default;
            Optional<int> minHex = default;
            Optional<int> minLetters = default;
            Optional<int> minUnderscores = default;
            Optional<int> options = default;
            Optional<string> regexStr = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("maxDigits"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    maxDigits = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("maxLetters"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    maxLetters = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("minDashes"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    minDashes = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("minDigits"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    minDigits = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("minDigitsOrLetters"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    minDigitsOrLetters = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("minDots"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    minDots = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("minHex"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    minHex = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("minLetters"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    minLetters = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("minUnderscores"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    minUnderscores = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("options"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    options = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("regexStr"))
                {
                    regexStr = property.Value.GetString();
                    continue;
                }
            }
            return new FastRegex(Optional.ToNullable(maxDigits), Optional.ToNullable(maxLetters), Optional.ToNullable(minDashes), Optional.ToNullable(minDigits), Optional.ToNullable(minDigitsOrLetters), Optional.ToNullable(minDots), Optional.ToNullable(minHex), Optional.ToNullable(minLetters), Optional.ToNullable(minUnderscores), Optional.ToNullable(options), regexStr.Value);
        }
    }
}
