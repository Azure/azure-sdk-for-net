// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Analytics.Purview.Account
{
    // Data plane generated client. The Collection service client.
    /// <summary> The Collection service client. </summary>
    public partial class CollectionClient
    {
        private static readonly string[] AuthorizationScopes = new string[] { "https://purview.azure.net/.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly string _endpoint;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of CollectionClient for mocking. </summary>
        protected CollectionClient()
        {
        }

        /// <summary> Initializes a new instance of CollectionClient. </summary>
        /// <param name="endpoint"> The catalog endpoint of your Purview account. Example: https://{accountName}.purview.azure.com. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public CollectionClient(string endpoint, TokenCredential credential) : this(endpoint, credential, new PurviewAccountClientOptions())
        {
        }

        /// <summary> Initializes a new instance of CollectionClient. </summary>
        /// <param name="endpoint"> The catalog endpoint of your Purview account. Example: https://{accountName}.purview.azure.com. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public CollectionClient(string endpoint, TokenCredential credential, PurviewAccountClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            Argument.AssertNotNull(credential, nameof(credential));
            options ??= new PurviewAccountClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes) }, new ResponseClassifier());
            _endpoint = endpoint;
        }

        /// <summary>
        /// Creates or updates an entity to a collection.
        /// Existing entity is matched using its unique guid if supplied or by its unique attributes eg: qualifiedName.
        /// Map and array of collections are not well supported. E.g., array&lt;array&lt;int&gt;&gt;, array&lt;map&lt;string, int&gt;&gt;.
        /// </summary>
        /// <param name="collection"> the collection unique name. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collection"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collection"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call CreateOrUpdateAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new CollectionClient("<https://my-service.azure.com>", credential);
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.CreateOrUpdateAsync("<collection>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call CreateOrUpdateAsync with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new CollectionClient("<https://my-service.azure.com>", credential);
        /// 
        /// var data = new {
        ///     entity = new {
        ///         businessAttributes = new {
        ///             key = new {},
        ///         },
        ///         classifications = new[] {
        ///             new {
        ///                 entityGuid = "<entityGuid>",
        ///                 entityStatus = "ACTIVE",
        ///                 removePropagationsOnEntityDelete = true,
        ///                 validityPeriods = new[] {
        ///                     new {
        ///                         endTime = "<endTime>",
        ///                         startTime = "<startTime>",
        ///                         timeZone = "<timeZone>",
        ///                     }
        ///                 },
        ///                 source = "<source>",
        ///                 sourceDetails = new {
        ///                     key = new {},
        ///                 },
        ///                 attributes = new {
        ///                     key = new {},
        ///                 },
        ///                 typeName = "<typeName>",
        ///                 lastModifiedTS = "<lastModifiedTS>",
        ///             }
        ///         },
        ///         createTime = 123.45f,
        ///         createdBy = "<createdBy>",
        ///         customAttributes = new {
        ///             key = "<String>",
        ///         },
        ///         guid = "<guid>",
        ///         homeId = "<homeId>",
        ///         isIncomplete = true,
        ///         labels = new[] {
        ///             "<String>"
        ///         },
        ///         meanings = new[] {
        ///             new {
        ///                 confidence = 1234,
        ///                 createdBy = "<createdBy>",
        ///                 description = "<description>",
        ///                 displayText = "<displayText>",
        ///                 expression = "<expression>",
        ///                 relationGuid = "<relationGuid>",
        ///                 source = "<source>",
        ///                 status = "DISCOVERED",
        ///                 steward = "<steward>",
        ///                 termGuid = "<termGuid>",
        ///             }
        ///         },
        ///         provenanceType = 123.45f,
        ///         proxy = true,
        ///         relationshipAttributes = new {
        ///             key = new {},
        ///         },
        ///         status = "ACTIVE",
        ///         updateTime = 123.45f,
        ///         updatedBy = "<updatedBy>",
        ///         version = 123.45f,
        ///         source = "<source>",
        ///         sourceDetails = new {
        ///             key = new {},
        ///         },
        ///         contacts = new {
        ///             key = new[] {
        ///                 new {
        ///                     id = "<id>",
        ///                     info = "<info>",
        ///                 }
        ///             },
        ///         },
        ///         attributes = new {
        ///             key = new {},
        ///         },
        ///         typeName = "<typeName>",
        ///         lastModifiedTS = "<lastModifiedTS>",
        ///     },
        ///     referredEntities = new {
        ///         key = new {
        ///             businessAttributes = new {
        ///                 key = new {},
        ///             },
        ///             classifications = new[] {
        ///                 new {
        ///                     entityGuid = "<entityGuid>",
        ///                     entityStatus = "ACTIVE",
        ///                     removePropagationsOnEntityDelete = true,
        ///                     validityPeriods = new[] {
        ///                         new {
        ///                             endTime = "<endTime>",
        ///                             startTime = "<startTime>",
        ///                             timeZone = "<timeZone>",
        ///                         }
        ///                     },
        ///                     source = "<source>",
        ///                     sourceDetails = new {
        ///                         key = new {},
        ///                     },
        ///                     attributes = new {
        ///                         key = new {},
        ///                     },
        ///                     typeName = "<typeName>",
        ///                     lastModifiedTS = "<lastModifiedTS>",
        ///                 }
        ///             },
        ///             createTime = 123.45f,
        ///             createdBy = "<createdBy>",
        ///             customAttributes = new {
        ///                 key = "<String>",
        ///             },
        ///             guid = "<guid>",
        ///             homeId = "<homeId>",
        ///             isIncomplete = true,
        ///             labels = new[] {
        ///                 "<String>"
        ///             },
        ///             meanings = new[] {
        ///                 new {
        ///                     confidence = 1234,
        ///                     createdBy = "<createdBy>",
        ///                     description = "<description>",
        ///                     displayText = "<displayText>",
        ///                     expression = "<expression>",
        ///                     relationGuid = "<relationGuid>",
        ///                     source = "<source>",
        ///                     status = "DISCOVERED",
        ///                     steward = "<steward>",
        ///                     termGuid = "<termGuid>",
        ///                 }
        ///             },
        ///             provenanceType = 123.45f,
        ///             proxy = true,
        ///             relationshipAttributes = new {
        ///                 key = new {},
        ///             },
        ///             status = "ACTIVE",
        ///             updateTime = 123.45f,
        ///             updatedBy = "<updatedBy>",
        ///             version = 123.45f,
        ///             source = "<source>",
        ///             sourceDetails = new {
        ///                 key = new {},
        ///             },
        ///             contacts = new {
        ///                 key = new[] {
        ///                     new {
        ///                         id = "<id>",
        ///                         info = "<info>",
        ///                     }
        ///                 },
        ///             },
        ///             attributes = new {
        ///                 key = new {},
        ///             },
        ///             typeName = "<typeName>",
        ///             lastModifiedTS = "<lastModifiedTS>",
        ///         },
        ///     },
        /// };
        /// 
        /// Response response = await client.CreateOrUpdateAsync("<collection>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("guidAssignments").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classificationNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("isIncomplete").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("labels")[0].ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meaningNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classificationNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("isIncomplete").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("labels")[0].ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meaningNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("lastModifiedTS").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>AtlasEntityWithExtInfo</c>:
        /// <code>{
        ///   entity: {
        ///     businessAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. Business Attributes
        ///     classifications: [
        ///       {
        ///         entityGuid: string, # Optional. The GUID of the entity.
        ///         entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///         removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///         validityPeriods: [
        ///           {
        ///             endTime: string, # Optional. The end of the time boundary.
        ///             startTime: string, # Optional. The start of the time boundary.
        ///             timeZone: string, # Optional. The timezone of the time boundary.
        ///           }
        ///         ], # Optional. An array of time boundaries indicating validity periods.
        ///         source: string, # Optional. indicate the source who create the classification detail
        ///         sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///         attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///         typeName: string, # Optional. The name of the type.
        ///         lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       }
        ///     ], # Optional. An array of classifications.
        ///     createTime: number, # Optional. The created time of the record.
        ///     createdBy: string, # Optional. The user who created the record.
        ///     customAttributes: Dictionary&lt;string, string&gt;, # Optional. Custom Attribute
        ///     guid: string, # Optional. The GUID of the entity.
        ///     homeId: string, # Optional. The home ID of the entity.
        ///     isIncomplete: boolean, # Optional. Whether it is a shell entity
        ///     labels: [string], # Optional. labels
        ///     meanings: [
        ///       {
        ///         confidence: number, # Optional. The confidence of the term assignment.
        ///         createdBy: string, # Optional. The user who created the record.
        ///         description: string, # Optional. The description of the term assignment.
        ///         displayText: string, # Optional. The display text.
        ///         expression: string, # Optional. The expression of the term assignment.
        ///         relationGuid: string, # Optional. The GUID of the relationship.
        ///         source: string, # Optional. The source of the term.
        ///         status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of terms assignment.
        ///         steward: string, # Optional. The steward of the term.
        ///         termGuid: string, # Optional. The GUID of the term.
        ///       }
        ///     ], # Optional. An array of term assignment headers indicating the meanings of the entity.
        ///     provenanceType: number, # Optional. Used to record the provenance of an instance of an entity or relationship.
        ///     proxy: boolean, # Optional. Determines if there&apos;s a proxy.
        ///     relationshipAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of relationship.
        ///     status: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///     updateTime: number, # Optional. The update time of the record.
        ///     updatedBy: string, # Optional. The user who updated the record.
        ///     version: number, # Optional. The version of the entity.
        ///     source: string, # Optional. indicate the source who create the classification detail
        ///     sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///     contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. The dictionary of contacts for terms. Key could be Expert or Owner.
        ///     attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///     typeName: string, # Optional. The name of the type.
        ///     lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///   }, # Optional. An instance of an entity - like hive_table, hive_database.
        ///   referredEntities: Dictionary&lt;string, AtlasEntity&gt;, # Optional. The referred entities.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>EntityMutationResponse</c>:
        /// <code>{
        ///   guidAssignments: Dictionary&lt;string, string&gt;, # Optional. A map of GUID assignments with entities.
        ///   mutatedEntities: Dictionary&lt;string, AtlasEntityHeader[]&gt;, # Optional. The entity headers of mutated entities.
        ///   partialUpdatedEntities: [
        ///     {
        ///       classificationNames: [string], # Optional. An array of classification names.
        ///       classifications: [
        ///         {
        ///           entityGuid: string, # Optional. The GUID of the entity.
        ///           entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///           removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///           validityPeriods: [
        ///             {
        ///               endTime: string, # Optional. The end of the time boundary.
        ///               startTime: string, # Optional. The start of the time boundary.
        ///               timeZone: string, # Optional. The timezone of the time boundary.
        ///             }
        ///           ], # Optional. An array of time boundaries indicating validity periods.
        ///           source: string, # Optional. indicate the source who create the classification detail
        ///           sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///           attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///           typeName: string, # Optional. The name of the type.
        ///           lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///         }
        ///       ], # Optional. An array of classifications.
        ///       displayText: string, # Optional. The display text.
        ///       guid: string, # Optional. The GUID of the record.
        ///       isIncomplete: boolean, # Optional. Whether it is a shell entity
        ///       labels: [string], # Optional. labels
        ///       meaningNames: [string], # Optional. An array of meanings.
        ///       meanings: [
        ///         {
        ///           confidence: number, # Optional. The confidence of the term assignment.
        ///           createdBy: string, # Optional. The user who created the record.
        ///           description: string, # Optional. The description of the term assignment.
        ///           displayText: string, # Optional. The display text.
        ///           expression: string, # Optional. The expression of the term assignment.
        ///           relationGuid: string, # Optional. The GUID of the relationship.
        ///           source: string, # Optional. The source of the term.
        ///           status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of terms assignment.
        ///           steward: string, # Optional. The steward of the term.
        ///           termGuid: string, # Optional. The GUID of the term.
        ///         }
        ///       ], # Optional. An array of term assignment headers.
        ///       status: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///     }
        ///   ], # Optional. An array of entity headers that partially updated.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> CreateOrUpdateAsync(string collection, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(collection, nameof(collection));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("CollectionClient.CreateOrUpdate");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrUpdateRequest(collection, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Creates or updates an entity to a collection.
        /// Existing entity is matched using its unique guid if supplied or by its unique attributes eg: qualifiedName.
        /// Map and array of collections are not well supported. E.g., array&lt;array&lt;int&gt;&gt;, array&lt;map&lt;string, int&gt;&gt;.
        /// </summary>
        /// <param name="collection"> the collection unique name. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collection"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collection"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call CreateOrUpdate with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new CollectionClient("<https://my-service.azure.com>", credential);
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.CreateOrUpdate("<collection>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call CreateOrUpdate with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new CollectionClient("<https://my-service.azure.com>", credential);
        /// 
        /// var data = new {
        ///     entity = new {
        ///         businessAttributes = new {
        ///             key = new {},
        ///         },
        ///         classifications = new[] {
        ///             new {
        ///                 entityGuid = "<entityGuid>",
        ///                 entityStatus = "ACTIVE",
        ///                 removePropagationsOnEntityDelete = true,
        ///                 validityPeriods = new[] {
        ///                     new {
        ///                         endTime = "<endTime>",
        ///                         startTime = "<startTime>",
        ///                         timeZone = "<timeZone>",
        ///                     }
        ///                 },
        ///                 source = "<source>",
        ///                 sourceDetails = new {
        ///                     key = new {},
        ///                 },
        ///                 attributes = new {
        ///                     key = new {},
        ///                 },
        ///                 typeName = "<typeName>",
        ///                 lastModifiedTS = "<lastModifiedTS>",
        ///             }
        ///         },
        ///         createTime = 123.45f,
        ///         createdBy = "<createdBy>",
        ///         customAttributes = new {
        ///             key = "<String>",
        ///         },
        ///         guid = "<guid>",
        ///         homeId = "<homeId>",
        ///         isIncomplete = true,
        ///         labels = new[] {
        ///             "<String>"
        ///         },
        ///         meanings = new[] {
        ///             new {
        ///                 confidence = 1234,
        ///                 createdBy = "<createdBy>",
        ///                 description = "<description>",
        ///                 displayText = "<displayText>",
        ///                 expression = "<expression>",
        ///                 relationGuid = "<relationGuid>",
        ///                 source = "<source>",
        ///                 status = "DISCOVERED",
        ///                 steward = "<steward>",
        ///                 termGuid = "<termGuid>",
        ///             }
        ///         },
        ///         provenanceType = 123.45f,
        ///         proxy = true,
        ///         relationshipAttributes = new {
        ///             key = new {},
        ///         },
        ///         status = "ACTIVE",
        ///         updateTime = 123.45f,
        ///         updatedBy = "<updatedBy>",
        ///         version = 123.45f,
        ///         source = "<source>",
        ///         sourceDetails = new {
        ///             key = new {},
        ///         },
        ///         contacts = new {
        ///             key = new[] {
        ///                 new {
        ///                     id = "<id>",
        ///                     info = "<info>",
        ///                 }
        ///             },
        ///         },
        ///         attributes = new {
        ///             key = new {},
        ///         },
        ///         typeName = "<typeName>",
        ///         lastModifiedTS = "<lastModifiedTS>",
        ///     },
        ///     referredEntities = new {
        ///         key = new {
        ///             businessAttributes = new {
        ///                 key = new {},
        ///             },
        ///             classifications = new[] {
        ///                 new {
        ///                     entityGuid = "<entityGuid>",
        ///                     entityStatus = "ACTIVE",
        ///                     removePropagationsOnEntityDelete = true,
        ///                     validityPeriods = new[] {
        ///                         new {
        ///                             endTime = "<endTime>",
        ///                             startTime = "<startTime>",
        ///                             timeZone = "<timeZone>",
        ///                         }
        ///                     },
        ///                     source = "<source>",
        ///                     sourceDetails = new {
        ///                         key = new {},
        ///                     },
        ///                     attributes = new {
        ///                         key = new {},
        ///                     },
        ///                     typeName = "<typeName>",
        ///                     lastModifiedTS = "<lastModifiedTS>",
        ///                 }
        ///             },
        ///             createTime = 123.45f,
        ///             createdBy = "<createdBy>",
        ///             customAttributes = new {
        ///                 key = "<String>",
        ///             },
        ///             guid = "<guid>",
        ///             homeId = "<homeId>",
        ///             isIncomplete = true,
        ///             labels = new[] {
        ///                 "<String>"
        ///             },
        ///             meanings = new[] {
        ///                 new {
        ///                     confidence = 1234,
        ///                     createdBy = "<createdBy>",
        ///                     description = "<description>",
        ///                     displayText = "<displayText>",
        ///                     expression = "<expression>",
        ///                     relationGuid = "<relationGuid>",
        ///                     source = "<source>",
        ///                     status = "DISCOVERED",
        ///                     steward = "<steward>",
        ///                     termGuid = "<termGuid>",
        ///                 }
        ///             },
        ///             provenanceType = 123.45f,
        ///             proxy = true,
        ///             relationshipAttributes = new {
        ///                 key = new {},
        ///             },
        ///             status = "ACTIVE",
        ///             updateTime = 123.45f,
        ///             updatedBy = "<updatedBy>",
        ///             version = 123.45f,
        ///             source = "<source>",
        ///             sourceDetails = new {
        ///                 key = new {},
        ///             },
        ///             contacts = new {
        ///                 key = new[] {
        ///                     new {
        ///                         id = "<id>",
        ///                         info = "<info>",
        ///                     }
        ///                 },
        ///             },
        ///             attributes = new {
        ///                 key = new {},
        ///             },
        ///             typeName = "<typeName>",
        ///             lastModifiedTS = "<lastModifiedTS>",
        ///         },
        ///     },
        /// };
        /// 
        /// Response response = client.CreateOrUpdate("<collection>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("guidAssignments").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classificationNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("isIncomplete").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("labels")[0].ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meaningNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classificationNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("isIncomplete").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("labels")[0].ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meaningNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("lastModifiedTS").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>AtlasEntityWithExtInfo</c>:
        /// <code>{
        ///   entity: {
        ///     businessAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. Business Attributes
        ///     classifications: [
        ///       {
        ///         entityGuid: string, # Optional. The GUID of the entity.
        ///         entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///         removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///         validityPeriods: [
        ///           {
        ///             endTime: string, # Optional. The end of the time boundary.
        ///             startTime: string, # Optional. The start of the time boundary.
        ///             timeZone: string, # Optional. The timezone of the time boundary.
        ///           }
        ///         ], # Optional. An array of time boundaries indicating validity periods.
        ///         source: string, # Optional. indicate the source who create the classification detail
        ///         sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///         attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///         typeName: string, # Optional. The name of the type.
        ///         lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///       }
        ///     ], # Optional. An array of classifications.
        ///     createTime: number, # Optional. The created time of the record.
        ///     createdBy: string, # Optional. The user who created the record.
        ///     customAttributes: Dictionary&lt;string, string&gt;, # Optional. Custom Attribute
        ///     guid: string, # Optional. The GUID of the entity.
        ///     homeId: string, # Optional. The home ID of the entity.
        ///     isIncomplete: boolean, # Optional. Whether it is a shell entity
        ///     labels: [string], # Optional. labels
        ///     meanings: [
        ///       {
        ///         confidence: number, # Optional. The confidence of the term assignment.
        ///         createdBy: string, # Optional. The user who created the record.
        ///         description: string, # Optional. The description of the term assignment.
        ///         displayText: string, # Optional. The display text.
        ///         expression: string, # Optional. The expression of the term assignment.
        ///         relationGuid: string, # Optional. The GUID of the relationship.
        ///         source: string, # Optional. The source of the term.
        ///         status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of terms assignment.
        ///         steward: string, # Optional. The steward of the term.
        ///         termGuid: string, # Optional. The GUID of the term.
        ///       }
        ///     ], # Optional. An array of term assignment headers indicating the meanings of the entity.
        ///     provenanceType: number, # Optional. Used to record the provenance of an instance of an entity or relationship.
        ///     proxy: boolean, # Optional. Determines if there&apos;s a proxy.
        ///     relationshipAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of relationship.
        ///     status: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///     updateTime: number, # Optional. The update time of the record.
        ///     updatedBy: string, # Optional. The user who updated the record.
        ///     version: number, # Optional. The version of the entity.
        ///     source: string, # Optional. indicate the source who create the classification detail
        ///     sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///     contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. The dictionary of contacts for terms. Key could be Expert or Owner.
        ///     attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///     typeName: string, # Optional. The name of the type.
        ///     lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///   }, # Optional. An instance of an entity - like hive_table, hive_database.
        ///   referredEntities: Dictionary&lt;string, AtlasEntity&gt;, # Optional. The referred entities.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>EntityMutationResponse</c>:
        /// <code>{
        ///   guidAssignments: Dictionary&lt;string, string&gt;, # Optional. A map of GUID assignments with entities.
        ///   mutatedEntities: Dictionary&lt;string, AtlasEntityHeader[]&gt;, # Optional. The entity headers of mutated entities.
        ///   partialUpdatedEntities: [
        ///     {
        ///       classificationNames: [string], # Optional. An array of classification names.
        ///       classifications: [
        ///         {
        ///           entityGuid: string, # Optional. The GUID of the entity.
        ///           entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///           removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///           validityPeriods: [
        ///             {
        ///               endTime: string, # Optional. The end of the time boundary.
        ///               startTime: string, # Optional. The start of the time boundary.
        ///               timeZone: string, # Optional. The timezone of the time boundary.
        ///             }
        ///           ], # Optional. An array of time boundaries indicating validity periods.
        ///           source: string, # Optional. indicate the source who create the classification detail
        ///           sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///           attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///           typeName: string, # Optional. The name of the type.
        ///           lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///         }
        ///       ], # Optional. An array of classifications.
        ///       displayText: string, # Optional. The display text.
        ///       guid: string, # Optional. The GUID of the record.
        ///       isIncomplete: boolean, # Optional. Whether it is a shell entity
        ///       labels: [string], # Optional. labels
        ///       meaningNames: [string], # Optional. An array of meanings.
        ///       meanings: [
        ///         {
        ///           confidence: number, # Optional. The confidence of the term assignment.
        ///           createdBy: string, # Optional. The user who created the record.
        ///           description: string, # Optional. The description of the term assignment.
        ///           displayText: string, # Optional. The display text.
        ///           expression: string, # Optional. The expression of the term assignment.
        ///           relationGuid: string, # Optional. The GUID of the relationship.
        ///           source: string, # Optional. The source of the term.
        ///           status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of terms assignment.
        ///           steward: string, # Optional. The steward of the term.
        ///           termGuid: string, # Optional. The GUID of the term.
        ///         }
        ///       ], # Optional. An array of term assignment headers.
        ///       status: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///     }
        ///   ], # Optional. An array of entity headers that partially updated.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response CreateOrUpdate(string collection, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(collection, nameof(collection));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("CollectionClient.CreateOrUpdate");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrUpdateRequest(collection, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Creates or updates entities in bulk to a collection.
        /// Existing entity is matched using its unique guid if supplied or by its unique attributes eg: qualifiedName.
        /// Map and array of collections are not well supported. E.g., array&lt;array&lt;int&gt;&gt;, array&lt;map&lt;string, int&gt;&gt;.
        /// </summary>
        /// <param name="collection"> the collection unique name. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collection"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collection"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call CreateOrUpdateBulkAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new CollectionClient("<https://my-service.azure.com>", credential);
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.CreateOrUpdateBulkAsync("<collection>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call CreateOrUpdateBulkAsync with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new CollectionClient("<https://my-service.azure.com>", credential);
        /// 
        /// var data = new {
        ///     entities = new[] {
        ///         new {
        ///             businessAttributes = new {
        ///                 key = new {},
        ///             },
        ///             classifications = new[] {
        ///                 new {
        ///                     entityGuid = "<entityGuid>",
        ///                     entityStatus = "ACTIVE",
        ///                     removePropagationsOnEntityDelete = true,
        ///                     validityPeriods = new[] {
        ///                         new {
        ///                             endTime = "<endTime>",
        ///                             startTime = "<startTime>",
        ///                             timeZone = "<timeZone>",
        ///                         }
        ///                     },
        ///                     source = "<source>",
        ///                     sourceDetails = new {
        ///                         key = new {},
        ///                     },
        ///                     attributes = new {
        ///                         key = new {},
        ///                     },
        ///                     typeName = "<typeName>",
        ///                     lastModifiedTS = "<lastModifiedTS>",
        ///                 }
        ///             },
        ///             createTime = 123.45f,
        ///             createdBy = "<createdBy>",
        ///             customAttributes = new {
        ///                 key = "<String>",
        ///             },
        ///             guid = "<guid>",
        ///             homeId = "<homeId>",
        ///             isIncomplete = true,
        ///             labels = new[] {
        ///                 "<String>"
        ///             },
        ///             meanings = new[] {
        ///                 new {
        ///                     confidence = 1234,
        ///                     createdBy = "<createdBy>",
        ///                     description = "<description>",
        ///                     displayText = "<displayText>",
        ///                     expression = "<expression>",
        ///                     relationGuid = "<relationGuid>",
        ///                     source = "<source>",
        ///                     status = "DISCOVERED",
        ///                     steward = "<steward>",
        ///                     termGuid = "<termGuid>",
        ///                 }
        ///             },
        ///             provenanceType = 123.45f,
        ///             proxy = true,
        ///             relationshipAttributes = new {
        ///                 key = new {},
        ///             },
        ///             status = "ACTIVE",
        ///             updateTime = 123.45f,
        ///             updatedBy = "<updatedBy>",
        ///             version = 123.45f,
        ///             source = "<source>",
        ///             sourceDetails = new {
        ///                 key = new {},
        ///             },
        ///             contacts = new {
        ///                 key = new[] {
        ///                     new {
        ///                         id = "<id>",
        ///                         info = "<info>",
        ///                     }
        ///                 },
        ///             },
        ///             attributes = new {
        ///                 key = new {},
        ///             },
        ///             typeName = "<typeName>",
        ///             lastModifiedTS = "<lastModifiedTS>",
        ///         }
        ///     },
        ///     referredEntities = new {
        ///         key = new {
        ///             businessAttributes = new {
        ///                 key = new {},
        ///             },
        ///             classifications = new[] {
        ///                 new {
        ///                     entityGuid = "<entityGuid>",
        ///                     entityStatus = "ACTIVE",
        ///                     removePropagationsOnEntityDelete = true,
        ///                     validityPeriods = new[] {
        ///                         new {
        ///                             endTime = "<endTime>",
        ///                             startTime = "<startTime>",
        ///                             timeZone = "<timeZone>",
        ///                         }
        ///                     },
        ///                     source = "<source>",
        ///                     sourceDetails = new {
        ///                         key = new {},
        ///                     },
        ///                     attributes = new {
        ///                         key = new {},
        ///                     },
        ///                     typeName = "<typeName>",
        ///                     lastModifiedTS = "<lastModifiedTS>",
        ///                 }
        ///             },
        ///             createTime = 123.45f,
        ///             createdBy = "<createdBy>",
        ///             customAttributes = new {
        ///                 key = "<String>",
        ///             },
        ///             guid = "<guid>",
        ///             homeId = "<homeId>",
        ///             isIncomplete = true,
        ///             labels = new[] {
        ///                 "<String>"
        ///             },
        ///             meanings = new[] {
        ///                 new {
        ///                     confidence = 1234,
        ///                     createdBy = "<createdBy>",
        ///                     description = "<description>",
        ///                     displayText = "<displayText>",
        ///                     expression = "<expression>",
        ///                     relationGuid = "<relationGuid>",
        ///                     source = "<source>",
        ///                     status = "DISCOVERED",
        ///                     steward = "<steward>",
        ///                     termGuid = "<termGuid>",
        ///                 }
        ///             },
        ///             provenanceType = 123.45f,
        ///             proxy = true,
        ///             relationshipAttributes = new {
        ///                 key = new {},
        ///             },
        ///             status = "ACTIVE",
        ///             updateTime = 123.45f,
        ///             updatedBy = "<updatedBy>",
        ///             version = 123.45f,
        ///             source = "<source>",
        ///             sourceDetails = new {
        ///                 key = new {},
        ///             },
        ///             contacts = new {
        ///                 key = new[] {
        ///                     new {
        ///                         id = "<id>",
        ///                         info = "<info>",
        ///                     }
        ///                 },
        ///             },
        ///             attributes = new {
        ///                 key = new {},
        ///             },
        ///             typeName = "<typeName>",
        ///             lastModifiedTS = "<lastModifiedTS>",
        ///         },
        ///     },
        /// };
        /// 
        /// Response response = await client.CreateOrUpdateBulkAsync("<collection>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("guidAssignments").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classificationNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("isIncomplete").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("labels")[0].ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meaningNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classificationNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("isIncomplete").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("labels")[0].ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meaningNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("lastModifiedTS").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>AtlasEntitiesWithExtInfo</c>:
        /// <code>{
        ///   entities: [
        ///     {
        ///       businessAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. Business Attributes
        ///       classifications: [
        ///         {
        ///           entityGuid: string, # Optional. The GUID of the entity.
        ///           entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///           removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///           validityPeriods: [
        ///             {
        ///               endTime: string, # Optional. The end of the time boundary.
        ///               startTime: string, # Optional. The start of the time boundary.
        ///               timeZone: string, # Optional. The timezone of the time boundary.
        ///             }
        ///           ], # Optional. An array of time boundaries indicating validity periods.
        ///           source: string, # Optional. indicate the source who create the classification detail
        ///           sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///           attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///           typeName: string, # Optional. The name of the type.
        ///           lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///         }
        ///       ], # Optional. An array of classifications.
        ///       createTime: number, # Optional. The created time of the record.
        ///       createdBy: string, # Optional. The user who created the record.
        ///       customAttributes: Dictionary&lt;string, string&gt;, # Optional. Custom Attribute
        ///       guid: string, # Optional. The GUID of the entity.
        ///       homeId: string, # Optional. The home ID of the entity.
        ///       isIncomplete: boolean, # Optional. Whether it is a shell entity
        ///       labels: [string], # Optional. labels
        ///       meanings: [
        ///         {
        ///           confidence: number, # Optional. The confidence of the term assignment.
        ///           createdBy: string, # Optional. The user who created the record.
        ///           description: string, # Optional. The description of the term assignment.
        ///           displayText: string, # Optional. The display text.
        ///           expression: string, # Optional. The expression of the term assignment.
        ///           relationGuid: string, # Optional. The GUID of the relationship.
        ///           source: string, # Optional. The source of the term.
        ///           status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of terms assignment.
        ///           steward: string, # Optional. The steward of the term.
        ///           termGuid: string, # Optional. The GUID of the term.
        ///         }
        ///       ], # Optional. An array of term assignment headers indicating the meanings of the entity.
        ///       provenanceType: number, # Optional. Used to record the provenance of an instance of an entity or relationship.
        ///       proxy: boolean, # Optional. Determines if there&apos;s a proxy.
        ///       relationshipAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of relationship.
        ///       status: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       updateTime: number, # Optional. The update time of the record.
        ///       updatedBy: string, # Optional. The user who updated the record.
        ///       version: number, # Optional. The version of the entity.
        ///       source: string, # Optional. indicate the source who create the classification detail
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///       contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. The dictionary of contacts for terms. Key could be Expert or Owner.
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///     }
        ///   ], # Optional. An array of entities.
        ///   referredEntities: Dictionary&lt;string, AtlasEntity&gt;, # Optional. The referred entities.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>EntityMutationResponse</c>:
        /// <code>{
        ///   guidAssignments: Dictionary&lt;string, string&gt;, # Optional. A map of GUID assignments with entities.
        ///   mutatedEntities: Dictionary&lt;string, AtlasEntityHeader[]&gt;, # Optional. The entity headers of mutated entities.
        ///   partialUpdatedEntities: [
        ///     {
        ///       classificationNames: [string], # Optional. An array of classification names.
        ///       classifications: [
        ///         {
        ///           entityGuid: string, # Optional. The GUID of the entity.
        ///           entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///           removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///           validityPeriods: [
        ///             {
        ///               endTime: string, # Optional. The end of the time boundary.
        ///               startTime: string, # Optional. The start of the time boundary.
        ///               timeZone: string, # Optional. The timezone of the time boundary.
        ///             }
        ///           ], # Optional. An array of time boundaries indicating validity periods.
        ///           source: string, # Optional. indicate the source who create the classification detail
        ///           sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///           attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///           typeName: string, # Optional. The name of the type.
        ///           lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///         }
        ///       ], # Optional. An array of classifications.
        ///       displayText: string, # Optional. The display text.
        ///       guid: string, # Optional. The GUID of the record.
        ///       isIncomplete: boolean, # Optional. Whether it is a shell entity
        ///       labels: [string], # Optional. labels
        ///       meaningNames: [string], # Optional. An array of meanings.
        ///       meanings: [
        ///         {
        ///           confidence: number, # Optional. The confidence of the term assignment.
        ///           createdBy: string, # Optional. The user who created the record.
        ///           description: string, # Optional. The description of the term assignment.
        ///           displayText: string, # Optional. The display text.
        ///           expression: string, # Optional. The expression of the term assignment.
        ///           relationGuid: string, # Optional. The GUID of the relationship.
        ///           source: string, # Optional. The source of the term.
        ///           status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of terms assignment.
        ///           steward: string, # Optional. The steward of the term.
        ///           termGuid: string, # Optional. The GUID of the term.
        ///         }
        ///       ], # Optional. An array of term assignment headers.
        ///       status: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///     }
        ///   ], # Optional. An array of entity headers that partially updated.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> CreateOrUpdateBulkAsync(string collection, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(collection, nameof(collection));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("CollectionClient.CreateOrUpdateBulk");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrUpdateBulkRequest(collection, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Creates or updates entities in bulk to a collection.
        /// Existing entity is matched using its unique guid if supplied or by its unique attributes eg: qualifiedName.
        /// Map and array of collections are not well supported. E.g., array&lt;array&lt;int&gt;&gt;, array&lt;map&lt;string, int&gt;&gt;.
        /// </summary>
        /// <param name="collection"> the collection unique name. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collection"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collection"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call CreateOrUpdateBulk with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new CollectionClient("<https://my-service.azure.com>", credential);
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.CreateOrUpdateBulk("<collection>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call CreateOrUpdateBulk with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new CollectionClient("<https://my-service.azure.com>", credential);
        /// 
        /// var data = new {
        ///     entities = new[] {
        ///         new {
        ///             businessAttributes = new {
        ///                 key = new {},
        ///             },
        ///             classifications = new[] {
        ///                 new {
        ///                     entityGuid = "<entityGuid>",
        ///                     entityStatus = "ACTIVE",
        ///                     removePropagationsOnEntityDelete = true,
        ///                     validityPeriods = new[] {
        ///                         new {
        ///                             endTime = "<endTime>",
        ///                             startTime = "<startTime>",
        ///                             timeZone = "<timeZone>",
        ///                         }
        ///                     },
        ///                     source = "<source>",
        ///                     sourceDetails = new {
        ///                         key = new {},
        ///                     },
        ///                     attributes = new {
        ///                         key = new {},
        ///                     },
        ///                     typeName = "<typeName>",
        ///                     lastModifiedTS = "<lastModifiedTS>",
        ///                 }
        ///             },
        ///             createTime = 123.45f,
        ///             createdBy = "<createdBy>",
        ///             customAttributes = new {
        ///                 key = "<String>",
        ///             },
        ///             guid = "<guid>",
        ///             homeId = "<homeId>",
        ///             isIncomplete = true,
        ///             labels = new[] {
        ///                 "<String>"
        ///             },
        ///             meanings = new[] {
        ///                 new {
        ///                     confidence = 1234,
        ///                     createdBy = "<createdBy>",
        ///                     description = "<description>",
        ///                     displayText = "<displayText>",
        ///                     expression = "<expression>",
        ///                     relationGuid = "<relationGuid>",
        ///                     source = "<source>",
        ///                     status = "DISCOVERED",
        ///                     steward = "<steward>",
        ///                     termGuid = "<termGuid>",
        ///                 }
        ///             },
        ///             provenanceType = 123.45f,
        ///             proxy = true,
        ///             relationshipAttributes = new {
        ///                 key = new {},
        ///             },
        ///             status = "ACTIVE",
        ///             updateTime = 123.45f,
        ///             updatedBy = "<updatedBy>",
        ///             version = 123.45f,
        ///             source = "<source>",
        ///             sourceDetails = new {
        ///                 key = new {},
        ///             },
        ///             contacts = new {
        ///                 key = new[] {
        ///                     new {
        ///                         id = "<id>",
        ///                         info = "<info>",
        ///                     }
        ///                 },
        ///             },
        ///             attributes = new {
        ///                 key = new {},
        ///             },
        ///             typeName = "<typeName>",
        ///             lastModifiedTS = "<lastModifiedTS>",
        ///         }
        ///     },
        ///     referredEntities = new {
        ///         key = new {
        ///             businessAttributes = new {
        ///                 key = new {},
        ///             },
        ///             classifications = new[] {
        ///                 new {
        ///                     entityGuid = "<entityGuid>",
        ///                     entityStatus = "ACTIVE",
        ///                     removePropagationsOnEntityDelete = true,
        ///                     validityPeriods = new[] {
        ///                         new {
        ///                             endTime = "<endTime>",
        ///                             startTime = "<startTime>",
        ///                             timeZone = "<timeZone>",
        ///                         }
        ///                     },
        ///                     source = "<source>",
        ///                     sourceDetails = new {
        ///                         key = new {},
        ///                     },
        ///                     attributes = new {
        ///                         key = new {},
        ///                     },
        ///                     typeName = "<typeName>",
        ///                     lastModifiedTS = "<lastModifiedTS>",
        ///                 }
        ///             },
        ///             createTime = 123.45f,
        ///             createdBy = "<createdBy>",
        ///             customAttributes = new {
        ///                 key = "<String>",
        ///             },
        ///             guid = "<guid>",
        ///             homeId = "<homeId>",
        ///             isIncomplete = true,
        ///             labels = new[] {
        ///                 "<String>"
        ///             },
        ///             meanings = new[] {
        ///                 new {
        ///                     confidence = 1234,
        ///                     createdBy = "<createdBy>",
        ///                     description = "<description>",
        ///                     displayText = "<displayText>",
        ///                     expression = "<expression>",
        ///                     relationGuid = "<relationGuid>",
        ///                     source = "<source>",
        ///                     status = "DISCOVERED",
        ///                     steward = "<steward>",
        ///                     termGuid = "<termGuid>",
        ///                 }
        ///             },
        ///             provenanceType = 123.45f,
        ///             proxy = true,
        ///             relationshipAttributes = new {
        ///                 key = new {},
        ///             },
        ///             status = "ACTIVE",
        ///             updateTime = 123.45f,
        ///             updatedBy = "<updatedBy>",
        ///             version = 123.45f,
        ///             source = "<source>",
        ///             sourceDetails = new {
        ///                 key = new {},
        ///             },
        ///             contacts = new {
        ///                 key = new[] {
        ///                     new {
        ///                         id = "<id>",
        ///                         info = "<info>",
        ///                     }
        ///                 },
        ///             },
        ///             attributes = new {
        ///                 key = new {},
        ///             },
        ///             typeName = "<typeName>",
        ///             lastModifiedTS = "<lastModifiedTS>",
        ///         },
        ///     },
        /// };
        /// 
        /// Response response = client.CreateOrUpdateBulk("<collection>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("guidAssignments").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classificationNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("isIncomplete").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("labels")[0].ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meaningNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classificationNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("isIncomplete").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("labels")[0].ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meaningNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("lastModifiedTS").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>AtlasEntitiesWithExtInfo</c>:
        /// <code>{
        ///   entities: [
        ///     {
        ///       businessAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. Business Attributes
        ///       classifications: [
        ///         {
        ///           entityGuid: string, # Optional. The GUID of the entity.
        ///           entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///           removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///           validityPeriods: [
        ///             {
        ///               endTime: string, # Optional. The end of the time boundary.
        ///               startTime: string, # Optional. The start of the time boundary.
        ///               timeZone: string, # Optional. The timezone of the time boundary.
        ///             }
        ///           ], # Optional. An array of time boundaries indicating validity periods.
        ///           source: string, # Optional. indicate the source who create the classification detail
        ///           sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///           attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///           typeName: string, # Optional. The name of the type.
        ///           lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///         }
        ///       ], # Optional. An array of classifications.
        ///       createTime: number, # Optional. The created time of the record.
        ///       createdBy: string, # Optional. The user who created the record.
        ///       customAttributes: Dictionary&lt;string, string&gt;, # Optional. Custom Attribute
        ///       guid: string, # Optional. The GUID of the entity.
        ///       homeId: string, # Optional. The home ID of the entity.
        ///       isIncomplete: boolean, # Optional. Whether it is a shell entity
        ///       labels: [string], # Optional. labels
        ///       meanings: [
        ///         {
        ///           confidence: number, # Optional. The confidence of the term assignment.
        ///           createdBy: string, # Optional. The user who created the record.
        ///           description: string, # Optional. The description of the term assignment.
        ///           displayText: string, # Optional. The display text.
        ///           expression: string, # Optional. The expression of the term assignment.
        ///           relationGuid: string, # Optional. The GUID of the relationship.
        ///           source: string, # Optional. The source of the term.
        ///           status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of terms assignment.
        ///           steward: string, # Optional. The steward of the term.
        ///           termGuid: string, # Optional. The GUID of the term.
        ///         }
        ///       ], # Optional. An array of term assignment headers indicating the meanings of the entity.
        ///       provenanceType: number, # Optional. Used to record the provenance of an instance of an entity or relationship.
        ///       proxy: boolean, # Optional. Determines if there&apos;s a proxy.
        ///       relationshipAttributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of relationship.
        ///       status: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       updateTime: number, # Optional. The update time of the record.
        ///       updatedBy: string, # Optional. The user who updated the record.
        ///       version: number, # Optional. The version of the entity.
        ///       source: string, # Optional. indicate the source who create the classification detail
        ///       sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///       contacts: Dictionary&lt;string, ContactBasic[]&gt;, # Optional. The dictionary of contacts for terms. Key could be Expert or Owner.
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///     }
        ///   ], # Optional. An array of entities.
        ///   referredEntities: Dictionary&lt;string, AtlasEntity&gt;, # Optional. The referred entities.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>EntityMutationResponse</c>:
        /// <code>{
        ///   guidAssignments: Dictionary&lt;string, string&gt;, # Optional. A map of GUID assignments with entities.
        ///   mutatedEntities: Dictionary&lt;string, AtlasEntityHeader[]&gt;, # Optional. The entity headers of mutated entities.
        ///   partialUpdatedEntities: [
        ///     {
        ///       classificationNames: [string], # Optional. An array of classification names.
        ///       classifications: [
        ///         {
        ///           entityGuid: string, # Optional. The GUID of the entity.
        ///           entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///           removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///           validityPeriods: [
        ///             {
        ///               endTime: string, # Optional. The end of the time boundary.
        ///               startTime: string, # Optional. The start of the time boundary.
        ///               timeZone: string, # Optional. The timezone of the time boundary.
        ///             }
        ///           ], # Optional. An array of time boundaries indicating validity periods.
        ///           source: string, # Optional. indicate the source who create the classification detail
        ///           sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///           attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///           typeName: string, # Optional. The name of the type.
        ///           lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///         }
        ///       ], # Optional. An array of classifications.
        ///       displayText: string, # Optional. The display text.
        ///       guid: string, # Optional. The GUID of the record.
        ///       isIncomplete: boolean, # Optional. Whether it is a shell entity
        ///       labels: [string], # Optional. labels
        ///       meaningNames: [string], # Optional. An array of meanings.
        ///       meanings: [
        ///         {
        ///           confidence: number, # Optional. The confidence of the term assignment.
        ///           createdBy: string, # Optional. The user who created the record.
        ///           description: string, # Optional. The description of the term assignment.
        ///           displayText: string, # Optional. The display text.
        ///           expression: string, # Optional. The expression of the term assignment.
        ///           relationGuid: string, # Optional. The GUID of the relationship.
        ///           source: string, # Optional. The source of the term.
        ///           status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of terms assignment.
        ///           steward: string, # Optional. The steward of the term.
        ///           termGuid: string, # Optional. The GUID of the term.
        ///         }
        ///       ], # Optional. An array of term assignment headers.
        ///       status: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///     }
        ///   ], # Optional. An array of entity headers that partially updated.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response CreateOrUpdateBulk(string collection, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(collection, nameof(collection));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("CollectionClient.CreateOrUpdateBulk");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrUpdateBulkRequest(collection, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Move existing entities to the target collection. </summary>
        /// <param name="collection"> the collection unique name. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collection"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collection"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call MoveEntitiesToCollectionAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new CollectionClient("<https://my-service.azure.com>", credential);
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.MoveEntitiesToCollectionAsync("<collection>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call MoveEntitiesToCollectionAsync with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new CollectionClient("<https://my-service.azure.com>", credential);
        /// 
        /// var data = new {
        ///     entityGuids = new[] {
        ///         "<String>"
        ///     },
        /// };
        /// 
        /// Response response = await client.MoveEntitiesToCollectionAsync("<collection>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("guidAssignments").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classificationNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("isIncomplete").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("labels")[0].ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meaningNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classificationNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("isIncomplete").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("labels")[0].ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meaningNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("lastModifiedTS").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>MoveEntitiesRequest</c>:
        /// <code>{
        ///   entityGuids: [string], # Optional. An array of entity guids to be moved to target collection.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>EntityMutationResponse</c>:
        /// <code>{
        ///   guidAssignments: Dictionary&lt;string, string&gt;, # Optional. A map of GUID assignments with entities.
        ///   mutatedEntities: Dictionary&lt;string, AtlasEntityHeader[]&gt;, # Optional. The entity headers of mutated entities.
        ///   partialUpdatedEntities: [
        ///     {
        ///       classificationNames: [string], # Optional. An array of classification names.
        ///       classifications: [
        ///         {
        ///           entityGuid: string, # Optional. The GUID of the entity.
        ///           entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///           removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///           validityPeriods: [
        ///             {
        ///               endTime: string, # Optional. The end of the time boundary.
        ///               startTime: string, # Optional. The start of the time boundary.
        ///               timeZone: string, # Optional. The timezone of the time boundary.
        ///             }
        ///           ], # Optional. An array of time boundaries indicating validity periods.
        ///           source: string, # Optional. indicate the source who create the classification detail
        ///           sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///           attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///           typeName: string, # Optional. The name of the type.
        ///           lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///         }
        ///       ], # Optional. An array of classifications.
        ///       displayText: string, # Optional. The display text.
        ///       guid: string, # Optional. The GUID of the record.
        ///       isIncomplete: boolean, # Optional. Whether it is a shell entity
        ///       labels: [string], # Optional. labels
        ///       meaningNames: [string], # Optional. An array of meanings.
        ///       meanings: [
        ///         {
        ///           confidence: number, # Optional. The confidence of the term assignment.
        ///           createdBy: string, # Optional. The user who created the record.
        ///           description: string, # Optional. The description of the term assignment.
        ///           displayText: string, # Optional. The display text.
        ///           expression: string, # Optional. The expression of the term assignment.
        ///           relationGuid: string, # Optional. The GUID of the relationship.
        ///           source: string, # Optional. The source of the term.
        ///           status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of terms assignment.
        ///           steward: string, # Optional. The steward of the term.
        ///           termGuid: string, # Optional. The GUID of the term.
        ///         }
        ///       ], # Optional. An array of term assignment headers.
        ///       status: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///     }
        ///   ], # Optional. An array of entity headers that partially updated.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> MoveEntitiesToCollectionAsync(string collection, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(collection, nameof(collection));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("CollectionClient.MoveEntitiesToCollection");
            scope.Start();
            try
            {
                using HttpMessage message = CreateMoveEntitiesToCollectionRequest(collection, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Move existing entities to the target collection. </summary>
        /// <param name="collection"> the collection unique name. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collection"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collection"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call MoveEntitiesToCollection with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new CollectionClient("<https://my-service.azure.com>", credential);
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.MoveEntitiesToCollection("<collection>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call MoveEntitiesToCollection with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new CollectionClient("<https://my-service.azure.com>", credential);
        /// 
        /// var data = new {
        ///     entityGuids = new[] {
        ///         "<String>"
        ///     },
        /// };
        /// 
        /// Response response = client.MoveEntitiesToCollection("<collection>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("guidAssignments").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classificationNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("isIncomplete").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("labels")[0].ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meaningNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("mutatedEntities").GetProperty("<test>")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classificationNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("guid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("isIncomplete").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("labels")[0].ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meaningNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("confidence").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("createdBy").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("displayText").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("expression").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("relationGuid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("steward").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("meanings")[0].GetProperty("termGuid").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("attributes").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("typeName").ToString());
        /// Console.WriteLine(result.GetProperty("partialUpdatedEntities")[0].GetProperty("lastModifiedTS").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>MoveEntitiesRequest</c>:
        /// <code>{
        ///   entityGuids: [string], # Optional. An array of entity guids to be moved to target collection.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>EntityMutationResponse</c>:
        /// <code>{
        ///   guidAssignments: Dictionary&lt;string, string&gt;, # Optional. A map of GUID assignments with entities.
        ///   mutatedEntities: Dictionary&lt;string, AtlasEntityHeader[]&gt;, # Optional. The entity headers of mutated entities.
        ///   partialUpdatedEntities: [
        ///     {
        ///       classificationNames: [string], # Optional. An array of classification names.
        ///       classifications: [
        ///         {
        ///           entityGuid: string, # Optional. The GUID of the entity.
        ///           entityStatus: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///           removePropagationsOnEntityDelete: boolean, # Optional. Determines if propagations will be removed on entity deletion.
        ///           validityPeriods: [
        ///             {
        ///               endTime: string, # Optional. The end of the time boundary.
        ///               startTime: string, # Optional. The start of the time boundary.
        ///               timeZone: string, # Optional. The timezone of the time boundary.
        ///             }
        ///           ], # Optional. An array of time boundaries indicating validity periods.
        ///           source: string, # Optional. indicate the source who create the classification detail
        ///           sourceDetails: Dictionary&lt;string, AnyObject&gt;, # Optional. more detail on source information
        ///           attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///           typeName: string, # Optional. The name of the type.
        ///           lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///         }
        ///       ], # Optional. An array of classifications.
        ///       displayText: string, # Optional. The display text.
        ///       guid: string, # Optional. The GUID of the record.
        ///       isIncomplete: boolean, # Optional. Whether it is a shell entity
        ///       labels: [string], # Optional. labels
        ///       meaningNames: [string], # Optional. An array of meanings.
        ///       meanings: [
        ///         {
        ///           confidence: number, # Optional. The confidence of the term assignment.
        ///           createdBy: string, # Optional. The user who created the record.
        ///           description: string, # Optional. The description of the term assignment.
        ///           displayText: string, # Optional. The display text.
        ///           expression: string, # Optional. The expression of the term assignment.
        ///           relationGuid: string, # Optional. The GUID of the relationship.
        ///           source: string, # Optional. The source of the term.
        ///           status: &quot;DISCOVERED&quot; | &quot;PROPOSED&quot; | &quot;IMPORTED&quot; | &quot;VALIDATED&quot; | &quot;DEPRECATED&quot; | &quot;OBSOLETE&quot; | &quot;OTHER&quot;, # Optional. The status of terms assignment.
        ///           steward: string, # Optional. The steward of the term.
        ///           termGuid: string, # Optional. The GUID of the term.
        ///         }
        ///       ], # Optional. An array of term assignment headers.
        ///       status: &quot;ACTIVE&quot; | &quot;DELETED&quot;, # Optional. Status of the entity - can be active or deleted. Deleted entities are not removed from Atlas store.
        ///       attributes: Dictionary&lt;string, AnyObject&gt;, # Optional. The attributes of the struct.
        ///       typeName: string, # Optional. The name of the type.
        ///       lastModifiedTS: string, # Optional. ETag for concurrency control.
        ///     }
        ///   ], # Optional. An array of entity headers that partially updated.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response MoveEntitiesToCollection(string collection, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(collection, nameof(collection));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("CollectionClient.MoveEntitiesToCollection");
            scope.Start();
            try
            {
                using HttpMessage message = CreateMoveEntitiesToCollectionRequest(collection, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateCreateOrUpdateRequest(string collection, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_endpoint, false);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/collections/", false);
            uri.AppendPath(collection, true);
            uri.AppendPath("/entity", false);
            uri.AppendQuery("api-version", "2022-03-01-preview", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateCreateOrUpdateBulkRequest(string collection, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_endpoint, false);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/collections/", false);
            uri.AppendPath(collection, true);
            uri.AppendPath("/entity/bulk", false);
            uri.AppendQuery("api-version", "2022-03-01-preview", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateMoveEntitiesToCollectionRequest(string collection, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_endpoint, false);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/collections/", false);
            uri.AppendPath(collection, true);
            uri.AppendPath("/entity/moveHere", false);
            uri.AppendQuery("api-version", "2022-03-01-preview", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
    }
}
