// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Analytics.Purview.Scanning.Models;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Analytics.Purview.Scanning
{
    internal partial class PurviewScanningServiceRestClient
    {
        private Uri endpoint;
        private string apiVersion;
        private ClientDiagnostics _clientDiagnostics;
        private HttpPipeline _pipeline;

        /// <summary> Initializes a new instance of PurviewScanningServiceRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> The scanning endpoint of your purview account. Example: https://{accountName}.scan.purview.azure.com. </param>
        /// <param name="apiVersion"> Api Version. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="apiVersion"/> is null. </exception>
        public PurviewScanningServiceRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint, string apiVersion = "2018-12-01-preview")
        {
            this.endpoint = endpoint ?? throw new ArgumentNullException(nameof(endpoint));
            this.apiVersion = apiVersion ?? throw new ArgumentNullException(nameof(apiVersion));
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        internal HttpMessage CreateGetKeyVaultReferenceRequest(string keyVaultName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/azureKeyVaults/", false);
            uri.AppendPath(keyVaultName, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Gets key vault information. </summary>
        /// <param name="keyVaultName"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="keyVaultName"/> is null. </exception>
        public async Task<Response<AzureKeyVault>> GetKeyVaultReferenceAsync(string keyVaultName, CancellationToken cancellationToken = default)
        {
            if (keyVaultName == null)
            {
                throw new ArgumentNullException(nameof(keyVaultName));
            }

            using var message = CreateGetKeyVaultReferenceRequest(keyVaultName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AzureKeyVault value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = AzureKeyVault.DeserializeAzureKeyVault(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets key vault information. </summary>
        /// <param name="keyVaultName"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="keyVaultName"/> is null. </exception>
        public Response<AzureKeyVault> GetKeyVaultReference(string keyVaultName, CancellationToken cancellationToken = default)
        {
            if (keyVaultName == null)
            {
                throw new ArgumentNullException(nameof(keyVaultName));
            }

            using var message = CreateGetKeyVaultReferenceRequest(keyVaultName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AzureKeyVault value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = AzureKeyVault.DeserializeAzureKeyVault(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateOrUpdateKeyVaultReferenceRequest(string keyVaultName, AzureKeyVault body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/azureKeyVaults/", false);
            uri.AppendPath(keyVaultName, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Creates an instance of a key vault connection. </summary>
        /// <param name="keyVaultName"> The String to use. </param>
        /// <param name="body"> The AzureKeyVault to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="keyVaultName"/> or <paramref name="body"/> is null. </exception>
        public async Task<Response<AzureKeyVault>> CreateOrUpdateKeyVaultReferenceAsync(string keyVaultName, AzureKeyVault body, CancellationToken cancellationToken = default)
        {
            if (keyVaultName == null)
            {
                throw new ArgumentNullException(nameof(keyVaultName));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateCreateOrUpdateKeyVaultReferenceRequest(keyVaultName, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AzureKeyVault value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = AzureKeyVault.DeserializeAzureKeyVault(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Creates an instance of a key vault connection. </summary>
        /// <param name="keyVaultName"> The String to use. </param>
        /// <param name="body"> The AzureKeyVault to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="keyVaultName"/> or <paramref name="body"/> is null. </exception>
        public Response<AzureKeyVault> CreateOrUpdateKeyVaultReference(string keyVaultName, AzureKeyVault body, CancellationToken cancellationToken = default)
        {
            if (keyVaultName == null)
            {
                throw new ArgumentNullException(nameof(keyVaultName));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateCreateOrUpdateKeyVaultReferenceRequest(keyVaultName, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AzureKeyVault value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = AzureKeyVault.DeserializeAzureKeyVault(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteKeyVaultReferenceRequest(string keyVaultName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/azureKeyVaults/", false);
            uri.AppendPath(keyVaultName, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Deletes the key vault connection associated with the account. </summary>
        /// <param name="keyVaultName"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="keyVaultName"/> is null. </exception>
        public async Task<Response<AzureKeyVault>> DeleteKeyVaultReferenceAsync(string keyVaultName, CancellationToken cancellationToken = default)
        {
            if (keyVaultName == null)
            {
                throw new ArgumentNullException(nameof(keyVaultName));
            }

            using var message = CreateDeleteKeyVaultReferenceRequest(keyVaultName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AzureKeyVault value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = AzureKeyVault.DeserializeAzureKeyVault(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 204:
                    return Response.FromValue((AzureKeyVault)null, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Deletes the key vault connection associated with the account. </summary>
        /// <param name="keyVaultName"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="keyVaultName"/> is null. </exception>
        public Response<AzureKeyVault> DeleteKeyVaultReference(string keyVaultName, CancellationToken cancellationToken = default)
        {
            if (keyVaultName == null)
            {
                throw new ArgumentNullException(nameof(keyVaultName));
            }

            using var message = CreateDeleteKeyVaultReferenceRequest(keyVaultName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AzureKeyVault value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = AzureKeyVault.DeserializeAzureKeyVault(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 204:
                    return Response.FromValue((AzureKeyVault)null, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetKeyVaultReferencesRequest()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/azureKeyVaults", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> List key vault connections in account. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<AzureKeyVaultList>> GetKeyVaultReferencesAsync(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetKeyVaultReferencesRequest();
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AzureKeyVaultList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = AzureKeyVaultList.DeserializeAzureKeyVaultList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> List key vault connections in account. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<AzureKeyVaultList> GetKeyVaultReferences(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetKeyVaultReferencesRequest();
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AzureKeyVaultList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = AzureKeyVaultList.DeserializeAzureKeyVaultList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetClassificationRulesRequest()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/classificationrules", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> List classification rules in Account. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<ClassificationRuleList>> GetClassificationRulesAsync(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetClassificationRulesRequest();
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ClassificationRuleList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ClassificationRuleList.DeserializeClassificationRuleList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> List classification rules in Account. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<ClassificationRuleList> GetClassificationRules(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetClassificationRulesRequest();
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ClassificationRuleList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ClassificationRuleList.DeserializeClassificationRuleList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetDataSourcesRequest()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/datasources", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> List data sources in Data catalog. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<DataSourceList>> GetDataSourcesAsync(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetDataSourcesRequest();
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DataSourceList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DataSourceList.DeserializeDataSourceList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> List data sources in Data catalog. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<DataSourceList> GetDataSources(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetDataSourcesRequest();
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DataSourceList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DataSourceList.DeserializeDataSourceList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetScanRulesetRequest(string scanRulesetName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/scanrulesets/", false);
            uri.AppendPath(scanRulesetName, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get a scan ruleset. </summary>
        /// <param name="scanRulesetName"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scanRulesetName"/> is null. </exception>
        public async Task<Response<ScanRuleset>> GetScanRulesetAsync(string scanRulesetName, CancellationToken cancellationToken = default)
        {
            if (scanRulesetName == null)
            {
                throw new ArgumentNullException(nameof(scanRulesetName));
            }

            using var message = CreateGetScanRulesetRequest(scanRulesetName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ScanRuleset value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ScanRuleset.DeserializeScanRuleset(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get a scan ruleset. </summary>
        /// <param name="scanRulesetName"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scanRulesetName"/> is null. </exception>
        public Response<ScanRuleset> GetScanRuleset(string scanRulesetName, CancellationToken cancellationToken = default)
        {
            if (scanRulesetName == null)
            {
                throw new ArgumentNullException(nameof(scanRulesetName));
            }

            using var message = CreateGetScanRulesetRequest(scanRulesetName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ScanRuleset value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ScanRuleset.DeserializeScanRuleset(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateOrUpdateScanRulesetRequest(string scanRulesetName, ScanRuleset body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/scanrulesets/", false);
            uri.AppendPath(scanRulesetName, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            if (body != null)
            {
                request.Headers.Add("Content-Type", "application/json");
                var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteObjectValue(body);
                request.Content = content;
            }
            return message;
        }

        /// <summary> Creates or Updates a scan ruleset. </summary>
        /// <param name="scanRulesetName"> The String to use. </param>
        /// <param name="body"> The ScanRuleset to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scanRulesetName"/> is null. </exception>
        public async Task<Response<ScanRuleset>> CreateOrUpdateScanRulesetAsync(string scanRulesetName, ScanRuleset body = null, CancellationToken cancellationToken = default)
        {
            if (scanRulesetName == null)
            {
                throw new ArgumentNullException(nameof(scanRulesetName));
            }

            using var message = CreateCreateOrUpdateScanRulesetRequest(scanRulesetName, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    {
                        ScanRuleset value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ScanRuleset.DeserializeScanRuleset(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Creates or Updates a scan ruleset. </summary>
        /// <param name="scanRulesetName"> The String to use. </param>
        /// <param name="body"> The ScanRuleset to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scanRulesetName"/> is null. </exception>
        public Response<ScanRuleset> CreateOrUpdateScanRuleset(string scanRulesetName, ScanRuleset body = null, CancellationToken cancellationToken = default)
        {
            if (scanRulesetName == null)
            {
                throw new ArgumentNullException(nameof(scanRulesetName));
            }

            using var message = CreateCreateOrUpdateScanRulesetRequest(scanRulesetName, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    {
                        ScanRuleset value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ScanRuleset.DeserializeScanRuleset(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteScanRulesetRequest(string scanRulesetName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/scanrulesets/", false);
            uri.AppendPath(scanRulesetName, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Deletes a scan ruleset. </summary>
        /// <param name="scanRulesetName"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scanRulesetName"/> is null. </exception>
        public async Task<Response<ScanRuleset>> DeleteScanRulesetAsync(string scanRulesetName, CancellationToken cancellationToken = default)
        {
            if (scanRulesetName == null)
            {
                throw new ArgumentNullException(nameof(scanRulesetName));
            }

            using var message = CreateDeleteScanRulesetRequest(scanRulesetName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ScanRuleset value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ScanRuleset.DeserializeScanRuleset(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 204:
                    return Response.FromValue((ScanRuleset)null, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Deletes a scan ruleset. </summary>
        /// <param name="scanRulesetName"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scanRulesetName"/> is null. </exception>
        public Response<ScanRuleset> DeleteScanRuleset(string scanRulesetName, CancellationToken cancellationToken = default)
        {
            if (scanRulesetName == null)
            {
                throw new ArgumentNullException(nameof(scanRulesetName));
            }

            using var message = CreateDeleteScanRulesetRequest(scanRulesetName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ScanRuleset value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ScanRuleset.DeserializeScanRuleset(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 204:
                    return Response.FromValue((ScanRuleset)null, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetScanRulesetsRequest()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/scanrulesets", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> List scan rulesets in Data catalog. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<ScanRulesetList>> GetScanRulesetsAsync(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetScanRulesetsRequest();
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ScanRulesetList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ScanRulesetList.DeserializeScanRulesetList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> List scan rulesets in Data catalog. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<ScanRulesetList> GetScanRulesets(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetScanRulesetsRequest();
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ScanRulesetList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ScanRulesetList.DeserializeScanRulesetList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetSystemRulesetsRequest()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/systemScanRulesets", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> List all system scan rulesets for an account. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<SystemScanRulesetList>> GetSystemRulesetsAsync(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetSystemRulesetsRequest();
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SystemScanRulesetList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = SystemScanRulesetList.DeserializeSystemScanRulesetList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> List all system scan rulesets for an account. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<SystemScanRulesetList> GetSystemRulesets(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetSystemRulesetsRequest();
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SystemScanRulesetList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = SystemScanRulesetList.DeserializeSystemScanRulesetList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetSystemRulesetsForDataSourceRequest(DataSourceType dataSourceType)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/systemScanRulesets/datasources/", false);
            uri.AppendPath(dataSourceType.ToString(), true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get a system scan ruleset for a data source. </summary>
        /// <param name="dataSourceType"> The DataSourceType to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<SystemScanRuleset>> GetSystemRulesetsForDataSourceAsync(DataSourceType dataSourceType, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetSystemRulesetsForDataSourceRequest(dataSourceType);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SystemScanRuleset value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = SystemScanRuleset.DeserializeSystemScanRuleset(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get a system scan ruleset for a data source. </summary>
        /// <param name="dataSourceType"> The DataSourceType to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<SystemScanRuleset> GetSystemRulesetsForDataSource(DataSourceType dataSourceType, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetSystemRulesetsForDataSourceRequest(dataSourceType);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SystemScanRuleset value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = SystemScanRuleset.DeserializeSystemScanRuleset(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetSystemRulesetsForVersionRequest(int version, DataSourceType? dataSourceType)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/systemScanRulesets/versions/", false);
            uri.AppendPath(version, true);
            if (dataSourceType != null)
            {
                uri.AppendQuery("dataSourceType", dataSourceType.Value.ToString(), true);
            }
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get a scan ruleset by version. </summary>
        /// <param name="version"> The Integer to use. </param>
        /// <param name="dataSourceType"> The DataSourceType to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<SystemScanRuleset>> GetSystemRulesetsForVersionAsync(int version, DataSourceType? dataSourceType = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetSystemRulesetsForVersionRequest(version, dataSourceType);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SystemScanRuleset value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = SystemScanRuleset.DeserializeSystemScanRuleset(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get a scan ruleset by version. </summary>
        /// <param name="version"> The Integer to use. </param>
        /// <param name="dataSourceType"> The DataSourceType to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<SystemScanRuleset> GetSystemRulesetsForVersion(int version, DataSourceType? dataSourceType = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetSystemRulesetsForVersionRequest(version, dataSourceType);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SystemScanRuleset value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = SystemScanRuleset.DeserializeSystemScanRuleset(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetLatestSystemRulesetsRequest(DataSourceType? dataSourceType)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/systemScanRulesets/versions/latest", false);
            if (dataSourceType != null)
            {
                uri.AppendQuery("dataSourceType", dataSourceType.Value.ToString(), true);
            }
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get the latest version of a system scan ruleset. </summary>
        /// <param name="dataSourceType"> The DataSourceType to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<SystemScanRuleset>> GetLatestSystemRulesetsAsync(DataSourceType? dataSourceType = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetLatestSystemRulesetsRequest(dataSourceType);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SystemScanRuleset value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = SystemScanRuleset.DeserializeSystemScanRuleset(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get the latest version of a system scan ruleset. </summary>
        /// <param name="dataSourceType"> The DataSourceType to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<SystemScanRuleset> GetLatestSystemRulesets(DataSourceType? dataSourceType = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetLatestSystemRulesetsRequest(dataSourceType);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SystemScanRuleset value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = SystemScanRuleset.DeserializeSystemScanRuleset(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetSystemRulesetsVersionsRequest(DataSourceType? dataSourceType)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/systemScanRulesets/versions", false);
            if (dataSourceType != null)
            {
                uri.AppendQuery("dataSourceType", dataSourceType.Value.ToString(), true);
            }
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> List system scan ruleset versions in Data catalog. </summary>
        /// <param name="dataSourceType"> The DataSourceType to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<SystemScanRulesetList>> GetSystemRulesetsVersionsAsync(DataSourceType? dataSourceType = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetSystemRulesetsVersionsRequest(dataSourceType);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SystemScanRulesetList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = SystemScanRulesetList.DeserializeSystemScanRulesetList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> List system scan ruleset versions in Data catalog. </summary>
        /// <param name="dataSourceType"> The DataSourceType to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<SystemScanRulesetList> GetSystemRulesetsVersions(DataSourceType? dataSourceType = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetSystemRulesetsVersionsRequest(dataSourceType);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SystemScanRulesetList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = SystemScanRulesetList.DeserializeSystemScanRulesetList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetKeyVaultReferencesNextPageRequest(string nextLink)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> List key vault connections in account. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        public async Task<Response<AzureKeyVaultList>> GetKeyVaultReferencesNextPageAsync(string nextLink, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateGetKeyVaultReferencesNextPageRequest(nextLink);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AzureKeyVaultList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = AzureKeyVaultList.DeserializeAzureKeyVaultList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> List key vault connections in account. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        public Response<AzureKeyVaultList> GetKeyVaultReferencesNextPage(string nextLink, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateGetKeyVaultReferencesNextPageRequest(nextLink);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AzureKeyVaultList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = AzureKeyVaultList.DeserializeAzureKeyVaultList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetClassificationRulesNextPageRequest(string nextLink)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> List classification rules in Account. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        public async Task<Response<ClassificationRuleList>> GetClassificationRulesNextPageAsync(string nextLink, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateGetClassificationRulesNextPageRequest(nextLink);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ClassificationRuleList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ClassificationRuleList.DeserializeClassificationRuleList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> List classification rules in Account. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        public Response<ClassificationRuleList> GetClassificationRulesNextPage(string nextLink, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateGetClassificationRulesNextPageRequest(nextLink);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ClassificationRuleList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ClassificationRuleList.DeserializeClassificationRuleList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetDataSourcesNextPageRequest(string nextLink)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> List data sources in Data catalog. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        public async Task<Response<DataSourceList>> GetDataSourcesNextPageAsync(string nextLink, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateGetDataSourcesNextPageRequest(nextLink);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DataSourceList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DataSourceList.DeserializeDataSourceList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> List data sources in Data catalog. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        public Response<DataSourceList> GetDataSourcesNextPage(string nextLink, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateGetDataSourcesNextPageRequest(nextLink);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DataSourceList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DataSourceList.DeserializeDataSourceList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetScanRulesetsNextPageRequest(string nextLink)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> List scan rulesets in Data catalog. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        public async Task<Response<ScanRulesetList>> GetScanRulesetsNextPageAsync(string nextLink, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateGetScanRulesetsNextPageRequest(nextLink);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ScanRulesetList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ScanRulesetList.DeserializeScanRulesetList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> List scan rulesets in Data catalog. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        public Response<ScanRulesetList> GetScanRulesetsNextPage(string nextLink, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateGetScanRulesetsNextPageRequest(nextLink);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ScanRulesetList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ScanRulesetList.DeserializeScanRulesetList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetSystemRulesetsNextPageRequest(string nextLink)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> List all system scan rulesets for an account. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        public async Task<Response<SystemScanRulesetList>> GetSystemRulesetsNextPageAsync(string nextLink, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateGetSystemRulesetsNextPageRequest(nextLink);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SystemScanRulesetList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = SystemScanRulesetList.DeserializeSystemScanRulesetList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> List all system scan rulesets for an account. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        public Response<SystemScanRulesetList> GetSystemRulesetsNextPage(string nextLink, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateGetSystemRulesetsNextPageRequest(nextLink);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SystemScanRulesetList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = SystemScanRulesetList.DeserializeSystemScanRulesetList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetSystemRulesetsVersionsNextPageRequest(string nextLink, DataSourceType? dataSourceType)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> List system scan ruleset versions in Data catalog. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="dataSourceType"> The DataSourceType to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        public async Task<Response<SystemScanRulesetList>> GetSystemRulesetsVersionsNextPageAsync(string nextLink, DataSourceType? dataSourceType = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateGetSystemRulesetsVersionsNextPageRequest(nextLink, dataSourceType);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SystemScanRulesetList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = SystemScanRulesetList.DeserializeSystemScanRulesetList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> List system scan ruleset versions in Data catalog. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="dataSourceType"> The DataSourceType to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        public Response<SystemScanRulesetList> GetSystemRulesetsVersionsNextPage(string nextLink, DataSourceType? dataSourceType = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateGetSystemRulesetsVersionsNextPageRequest(nextLink, dataSourceType);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SystemScanRulesetList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = SystemScanRulesetList.DeserializeSystemScanRulesetList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
