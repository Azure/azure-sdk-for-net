// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Analytics.Purview.Scanning
{
    /// <summary> The PurviewScan service client. </summary>
    public partial class PurviewScanClient
    {
        private static readonly string[] AuthorizationScopes = new string[] { "https://purview.azure.net/.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _dataSourceName;
        private readonly string _scanName;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of PurviewScanClient for mocking. </summary>
        protected PurviewScanClient()
        {
        }

        /// <summary> Initializes a new instance of PurviewScanClient. </summary>
        /// <param name="endpoint"> The scanning endpoint of your purview account. Example: https://{accountName}.scan.purview.azure.com. </param>
        /// <param name="dataSourceName"> The String to use. </param>
        /// <param name="scanName"> The String to use. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/>, <paramref name="dataSourceName"/>, <paramref name="scanName"/> or <paramref name="credential"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="dataSourceName"/> or <paramref name="scanName"/> is an empty string, and was expected to be non-empty. </exception>
        public PurviewScanClient(Uri endpoint, string dataSourceName, string scanName, TokenCredential credential) : this(endpoint, dataSourceName, scanName, credential, new PurviewScanningServiceClientOptions())
        {
        }

        /// <summary> Initializes a new instance of PurviewScanClient. </summary>
        /// <param name="endpoint"> The scanning endpoint of your purview account. Example: https://{accountName}.scan.purview.azure.com. </param>
        /// <param name="dataSourceName"> The String to use. </param>
        /// <param name="scanName"> The String to use. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/>, <paramref name="dataSourceName"/>, <paramref name="scanName"/> or <paramref name="credential"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="dataSourceName"/> or <paramref name="scanName"/> is an empty string, and was expected to be non-empty. </exception>
        public PurviewScanClient(Uri endpoint, string dataSourceName, string scanName, TokenCredential credential, PurviewScanningServiceClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            Argument.AssertNotNullOrEmpty(dataSourceName, nameof(dataSourceName));
            Argument.AssertNotNullOrEmpty(scanName, nameof(scanName));
            Argument.AssertNotNull(credential, nameof(credential));
            options ??= new PurviewScanningServiceClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes) }, new ResponseClassifier());
            _endpoint = endpoint;
            _dataSourceName = dataSourceName;
            _scanName = scanName;
            _apiVersion = options.Version;
        }

        /// <summary> Get a filter. </summary>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <example>
        /// This sample shows how to call GetFilterAsync and parse the result.
        /// <code>
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("https://my-account-name.azure.com");
        /// var client = new PurviewScanClient(endpoint, credential);
        /// 
        /// Response response = await client.GetFilterAsync();
        /// JsonElement result = JsonDocument.Parse(GetContentFromResponse(response)).RootElement;
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("excludeUriPrefixes").Item[0].ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("includeUriPrefixes").Item[0].ToString());
        /// </code>
        /// </example>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   id: string,
        ///   name: string,
        ///   properties: {
        ///     excludeUriPrefixes: [string],
        ///     includeUriPrefixes: [string]
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         message: string,
        ///         target: string,
        ///         details: [ErrorModel]
        ///       }
        ///     ]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetFilterAsync(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("PurviewScanClient.GetFilter");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetFilterRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a filter. </summary>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <example>
        /// This sample shows how to call GetFilter and parse the result.
        /// <code>
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("https://my-account-name.azure.com");
        /// var client = new PurviewScanClient(endpoint, credential);
        /// 
        /// Response response = client.GetFilter();
        /// JsonElement result = JsonDocument.Parse(GetContentFromResponse(response)).RootElement;
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("excludeUriPrefixes").Item[0].ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("includeUriPrefixes").Item[0].ToString());
        /// </code>
        /// </example>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   id: string,
        ///   name: string,
        ///   properties: {
        ///     excludeUriPrefixes: [string],
        ///     includeUriPrefixes: [string]
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         message: string,
        ///         target: string,
        ///         details: [ErrorModel]
        ///       }
        ///     ]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetFilter(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("PurviewScanClient.GetFilter");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetFilterRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates or updates a filter. </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <example>
        /// This sample shows how to call CreateOrUpdateFilterAsync with all request content, and how to parse the result.
        /// <code>
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("https://my-account-name.azure.com");
        /// var client = new PurviewScanClient(endpoint, credential);
        /// 
        /// var data = new {
        ///     properties = new {
        ///         excludeUriPrefixes = new[] {
        ///             "FilterPropertiesExcludeUriPrefixesItem"
        ///         },
        ///         includeUriPrefixes = new[] {
        ///             "FilterPropertiesIncludeUriPrefixesItem"
        ///         },
        ///     },
        /// };
        /// 
        /// Response response = await client.CreateOrUpdateFilterAsync(RequestContent.Create(data));
        /// JsonElement result = JsonDocument.Parse(GetContentFromResponse(response)).RootElement;
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("excludeUriPrefixes").Item[0].ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("includeUriPrefixes").Item[0].ToString());
        /// </code>
        /// </example>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   id: string,
        ///   name: string,
        ///   properties: {
        ///     excludeUriPrefixes: [string],
        ///     includeUriPrefixes: [string]
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   id: string,
        ///   name: string,
        ///   properties: {
        ///     excludeUriPrefixes: [string],
        ///     includeUriPrefixes: [string]
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         message: string,
        ///         target: string,
        ///         details: [ErrorModel]
        ///       }
        ///     ]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> CreateOrUpdateFilterAsync(RequestContent content, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("PurviewScanClient.CreateOrUpdateFilter");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrUpdateFilterRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates or updates a filter. </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <example>
        /// This sample shows how to call CreateOrUpdateFilter with all request content, and how to parse the result.
        /// <code>
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("https://my-account-name.azure.com");
        /// var client = new PurviewScanClient(endpoint, credential);
        /// 
        /// var data = new {
        ///     properties = new {
        ///         excludeUriPrefixes = new[] {
        ///             "FilterPropertiesExcludeUriPrefixesItem"
        ///         },
        ///         includeUriPrefixes = new[] {
        ///             "FilterPropertiesIncludeUriPrefixesItem"
        ///         },
        ///     },
        /// };
        /// 
        /// Response response = client.CreateOrUpdateFilter(RequestContent.Create(data));
        /// JsonElement result = JsonDocument.Parse(GetContentFromResponse(response)).RootElement;
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("excludeUriPrefixes").Item[0].ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("includeUriPrefixes").Item[0].ToString());
        /// </code>
        /// </example>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   id: string,
        ///   name: string,
        ///   properties: {
        ///     excludeUriPrefixes: [string],
        ///     includeUriPrefixes: [string]
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   id: string,
        ///   name: string,
        ///   properties: {
        ///     excludeUriPrefixes: [string],
        ///     includeUriPrefixes: [string]
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         message: string,
        ///         target: string,
        ///         details: [ErrorModel]
        ///       }
        ///     ]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response CreateOrUpdateFilter(RequestContent content, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("PurviewScanClient.CreateOrUpdateFilter");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrUpdateFilterRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates an instance of a scan. </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <example>
        /// This sample shows how to call CreateOrUpdateAsync and parse the result.
        /// <code>
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("https://my-account-name.azure.com");
        /// var client = new PurviewScanClient(endpoint, credential);
        /// 
        /// var data = new {
        ///     kind = "AzureSubscriptionCredential",
        /// };
        /// 
        /// Response response = await client.CreateOrUpdateAsync(RequestContent.Create(data));
        /// JsonElement result = JsonDocument.Parse(GetContentFromResponse(response)).RootElement;
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("kind").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("parentId").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("resourceId").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("assetsDiscovered").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("assetsClassified").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("diagnostics").GetProperty("notifications").Item[0].GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("diagnostics").GetProperty("notifications").Item[0].GetProperty("code").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("diagnostics").GetProperty("exceptionCountMap").GetProperty("test").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("queuedTime").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("pipelineStartTime").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("scanRulesetVersion").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("scanRulesetType").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("scanLevelType").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("errorMessage").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("error").GetProperty("code").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("error").GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("error").GetProperty("target").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("error").GetProperty("details").Item[0].GetProperty("code").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("error").GetProperty("details").Item[0].GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("error").GetProperty("details").Item[0].GetProperty("target").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("runType").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("dataSourceType").ToString());
        /// </code>
        /// </example>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   id: string,
        ///   name: string,
        ///   kind: &quot;AzureSubscriptionCredential&quot; | &quot;AzureSubscriptionMsi&quot; | &quot;AzureResourceGroupCredential&quot; | &quot;AzureResourceGroupMsi&quot; | &quot;AzureSynapseWorkspaceCredential&quot; | &quot;AzureSynapseWorkspaceMsi&quot; | &quot;AzureSynapseCredential&quot; | &quot;AzureSynapseMsi&quot; | &quot;AdlsGen1Credential&quot; | &quot;AdlsGen1Msi&quot; | &quot;AdlsGen2Credential&quot; | &quot;AdlsGen2Msi&quot; | &quot;AmazonAccountCredential&quot; | &quot;AmazonS3Credential&quot; | &quot;AmazonS3RoleARN&quot; | &quot;AmazonSqlCredential&quot; | &quot;AzureCosmosDbCredential&quot; | &quot;AzureDataExplorerCredential&quot; | &quot;AzureDataExplorerMsi&quot; | &quot;AzureFileServiceCredential&quot; | &quot;AzureSqlDatabaseCredential&quot; | &quot;AzureSqlDatabaseMsi&quot; | &quot;AmazonPostgreSqlCredential&quot; | &quot;AzurePostgreSqlCredential&quot; | &quot;SqlServerDatabaseCredential&quot; | &quot;AzureSqlDatabaseManagedInstanceCredential&quot; | &quot;AzureSqlDatabaseManagedInstanceMsi&quot; | &quot;AzureSqlDataWarehouseCredential&quot; | &quot;AzureSqlDataWarehouseMsi&quot; | &quot;AzureMySqlCredential&quot; | &quot;AzureStorageCredential&quot; | &quot;AzureStorageMsi&quot; | &quot;TeradataTeradataCredential&quot; | &quot;TeradataTeradataUserPass&quot; | &quot;TeradataUserPass&quot; | &quot;OracleOracleCredential&quot; | &quot;OracleOracleUserPass&quot; | &quot;SapS4HanaSapS4HanaCredential&quot; | &quot;SapS4HanaSapS4HanaUserPass&quot; | &quot;SapEccSapEccCredential&quot; | &quot;SapEccSapEccUserPass&quot; | &quot;PowerBIDelegated&quot; | &quot;PowerBIMsi&quot; (required),
        ///   scanResults: [
        ///     {
        ///       parentId: string,
        ///       id: string,
        ///       resourceId: string,
        ///       status: string,
        ///       assetsDiscovered: number,
        ///       assetsClassified: number,
        ///       diagnostics: {
        ///         notifications: [
        ///           {
        ///             message: string,
        ///             code: number
        ///           }
        ///         ],
        ///         exceptionCountMap: Dictionary&lt;string, number&gt;
        ///       },
        ///       startTime: string (ISO 8601 Format),
        ///       queuedTime: string (ISO 8601 Format),
        ///       pipelineStartTime: string (ISO 8601 Format),
        ///       endTime: string (ISO 8601 Format),
        ///       scanRulesetVersion: number,
        ///       scanRulesetType: &quot;Custom&quot; | &quot;System&quot;,
        ///       scanLevelType: &quot;Full&quot; | &quot;Incremental&quot;,
        ///       errorMessage: string,
        ///       error: {
        ///         code: string,
        ///         message: string,
        ///         target: string,
        ///         details: [
        ///           {
        ///             code: string,
        ///             message: string,
        ///             target: string,
        ///             details: [ErrorModel]
        ///           }
        ///         ]
        ///       },
        ///       runType: string,
        ///       dataSourceType: &quot;None&quot; | &quot;AzureSubscription&quot; | &quot;AzureResourceGroup&quot; | &quot;AzureSynapseWorkspace&quot; | &quot;AzureSynapse&quot; | &quot;AdlsGen1&quot; | &quot;AdlsGen2&quot; | &quot;AmazonAccount&quot; | &quot;AmazonS3&quot; | &quot;AmazonSql&quot; | &quot;AzureCosmosDb&quot; | &quot;AzureDataExplorer&quot; | &quot;AzureFileService&quot; | &quot;AzureSqlDatabase&quot; | &quot;AmazonPostgreSql&quot; | &quot;AzurePostgreSql&quot; | &quot;SqlServerDatabase&quot; | &quot;AzureSqlDatabaseManagedInstance&quot; | &quot;AzureSqlDataWarehouse&quot; | &quot;AzureMySql&quot; | &quot;AzureStorage&quot; | &quot;Teradata&quot; | &quot;Oracle&quot; | &quot;SapS4Hana&quot; | &quot;SapEcc&quot; | &quot;PowerBI&quot;
        ///     }
        ///   ]
        /// }
        /// </code>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   id: string,
        ///   name: string,
        ///   kind: &quot;AzureSubscriptionCredential&quot; | &quot;AzureSubscriptionMsi&quot; | &quot;AzureResourceGroupCredential&quot; | &quot;AzureResourceGroupMsi&quot; | &quot;AzureSynapseWorkspaceCredential&quot; | &quot;AzureSynapseWorkspaceMsi&quot; | &quot;AzureSynapseCredential&quot; | &quot;AzureSynapseMsi&quot; | &quot;AdlsGen1Credential&quot; | &quot;AdlsGen1Msi&quot; | &quot;AdlsGen2Credential&quot; | &quot;AdlsGen2Msi&quot; | &quot;AmazonAccountCredential&quot; | &quot;AmazonS3Credential&quot; | &quot;AmazonS3RoleARN&quot; | &quot;AmazonSqlCredential&quot; | &quot;AzureCosmosDbCredential&quot; | &quot;AzureDataExplorerCredential&quot; | &quot;AzureDataExplorerMsi&quot; | &quot;AzureFileServiceCredential&quot; | &quot;AzureSqlDatabaseCredential&quot; | &quot;AzureSqlDatabaseMsi&quot; | &quot;AmazonPostgreSqlCredential&quot; | &quot;AzurePostgreSqlCredential&quot; | &quot;SqlServerDatabaseCredential&quot; | &quot;AzureSqlDatabaseManagedInstanceCredential&quot; | &quot;AzureSqlDatabaseManagedInstanceMsi&quot; | &quot;AzureSqlDataWarehouseCredential&quot; | &quot;AzureSqlDataWarehouseMsi&quot; | &quot;AzureMySqlCredential&quot; | &quot;AzureStorageCredential&quot; | &quot;AzureStorageMsi&quot; | &quot;TeradataTeradataCredential&quot; | &quot;TeradataTeradataUserPass&quot; | &quot;TeradataUserPass&quot; | &quot;OracleOracleCredential&quot; | &quot;OracleOracleUserPass&quot; | &quot;SapS4HanaSapS4HanaCredential&quot; | &quot;SapS4HanaSapS4HanaUserPass&quot; | &quot;SapEccSapEccCredential&quot; | &quot;SapEccSapEccUserPass&quot; | &quot;PowerBIDelegated&quot; | &quot;PowerBIMsi&quot;,
        ///   scanResults: [
        ///     {
        ///       parentId: string,
        ///       id: string,
        ///       resourceId: string,
        ///       status: string,
        ///       assetsDiscovered: number,
        ///       assetsClassified: number,
        ///       diagnostics: {
        ///         notifications: [
        ///           {
        ///             message: string,
        ///             code: number
        ///           }
        ///         ],
        ///         exceptionCountMap: Dictionary&lt;string, number&gt;
        ///       },
        ///       startTime: string (ISO 8601 Format),
        ///       queuedTime: string (ISO 8601 Format),
        ///       pipelineStartTime: string (ISO 8601 Format),
        ///       endTime: string (ISO 8601 Format),
        ///       scanRulesetVersion: number,
        ///       scanRulesetType: &quot;Custom&quot; | &quot;System&quot;,
        ///       scanLevelType: &quot;Full&quot; | &quot;Incremental&quot;,
        ///       errorMessage: string,
        ///       error: {
        ///         code: string,
        ///         message: string,
        ///         target: string,
        ///         details: [
        ///           {
        ///             code: string,
        ///             message: string,
        ///             target: string,
        ///             details: [ErrorModel]
        ///           }
        ///         ]
        ///       },
        ///       runType: string,
        ///       dataSourceType: &quot;None&quot; | &quot;AzureSubscription&quot; | &quot;AzureResourceGroup&quot; | &quot;AzureSynapseWorkspace&quot; | &quot;AzureSynapse&quot; | &quot;AdlsGen1&quot; | &quot;AdlsGen2&quot; | &quot;AmazonAccount&quot; | &quot;AmazonS3&quot; | &quot;AmazonSql&quot; | &quot;AzureCosmosDb&quot; | &quot;AzureDataExplorer&quot; | &quot;AzureFileService&quot; | &quot;AzureSqlDatabase&quot; | &quot;AmazonPostgreSql&quot; | &quot;AzurePostgreSql&quot; | &quot;SqlServerDatabase&quot; | &quot;AzureSqlDatabaseManagedInstance&quot; | &quot;AzureSqlDataWarehouse&quot; | &quot;AzureMySql&quot; | &quot;AzureStorage&quot; | &quot;Teradata&quot; | &quot;Oracle&quot; | &quot;SapS4Hana&quot; | &quot;SapEcc&quot; | &quot;PowerBI&quot;
        ///     }
        ///   ]
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         message: string,
        ///         target: string,
        ///         details: [ErrorModel]
        ///       }
        ///     ]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> CreateOrUpdateAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewScanClient.CreateOrUpdate");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrUpdateRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates an instance of a scan. </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <example>
        /// This sample shows how to call CreateOrUpdate and parse the result.
        /// <code>
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("https://my-account-name.azure.com");
        /// var client = new PurviewScanClient(endpoint, credential);
        /// 
        /// var data = new {
        ///     kind = "AzureSubscriptionCredential",
        /// };
        /// 
        /// Response response = client.CreateOrUpdate(RequestContent.Create(data));
        /// JsonElement result = JsonDocument.Parse(GetContentFromResponse(response)).RootElement;
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("kind").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("parentId").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("resourceId").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("assetsDiscovered").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("assetsClassified").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("diagnostics").GetProperty("notifications").Item[0].GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("diagnostics").GetProperty("notifications").Item[0].GetProperty("code").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("diagnostics").GetProperty("exceptionCountMap").GetProperty("test").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("queuedTime").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("pipelineStartTime").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("scanRulesetVersion").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("scanRulesetType").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("scanLevelType").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("errorMessage").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("error").GetProperty("code").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("error").GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("error").GetProperty("target").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("error").GetProperty("details").Item[0].GetProperty("code").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("error").GetProperty("details").Item[0].GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("error").GetProperty("details").Item[0].GetProperty("target").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("runType").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("dataSourceType").ToString());
        /// </code>
        /// </example>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   id: string,
        ///   name: string,
        ///   kind: &quot;AzureSubscriptionCredential&quot; | &quot;AzureSubscriptionMsi&quot; | &quot;AzureResourceGroupCredential&quot; | &quot;AzureResourceGroupMsi&quot; | &quot;AzureSynapseWorkspaceCredential&quot; | &quot;AzureSynapseWorkspaceMsi&quot; | &quot;AzureSynapseCredential&quot; | &quot;AzureSynapseMsi&quot; | &quot;AdlsGen1Credential&quot; | &quot;AdlsGen1Msi&quot; | &quot;AdlsGen2Credential&quot; | &quot;AdlsGen2Msi&quot; | &quot;AmazonAccountCredential&quot; | &quot;AmazonS3Credential&quot; | &quot;AmazonS3RoleARN&quot; | &quot;AmazonSqlCredential&quot; | &quot;AzureCosmosDbCredential&quot; | &quot;AzureDataExplorerCredential&quot; | &quot;AzureDataExplorerMsi&quot; | &quot;AzureFileServiceCredential&quot; | &quot;AzureSqlDatabaseCredential&quot; | &quot;AzureSqlDatabaseMsi&quot; | &quot;AmazonPostgreSqlCredential&quot; | &quot;AzurePostgreSqlCredential&quot; | &quot;SqlServerDatabaseCredential&quot; | &quot;AzureSqlDatabaseManagedInstanceCredential&quot; | &quot;AzureSqlDatabaseManagedInstanceMsi&quot; | &quot;AzureSqlDataWarehouseCredential&quot; | &quot;AzureSqlDataWarehouseMsi&quot; | &quot;AzureMySqlCredential&quot; | &quot;AzureStorageCredential&quot; | &quot;AzureStorageMsi&quot; | &quot;TeradataTeradataCredential&quot; | &quot;TeradataTeradataUserPass&quot; | &quot;TeradataUserPass&quot; | &quot;OracleOracleCredential&quot; | &quot;OracleOracleUserPass&quot; | &quot;SapS4HanaSapS4HanaCredential&quot; | &quot;SapS4HanaSapS4HanaUserPass&quot; | &quot;SapEccSapEccCredential&quot; | &quot;SapEccSapEccUserPass&quot; | &quot;PowerBIDelegated&quot; | &quot;PowerBIMsi&quot; (required),
        ///   scanResults: [
        ///     {
        ///       parentId: string,
        ///       id: string,
        ///       resourceId: string,
        ///       status: string,
        ///       assetsDiscovered: number,
        ///       assetsClassified: number,
        ///       diagnostics: {
        ///         notifications: [
        ///           {
        ///             message: string,
        ///             code: number
        ///           }
        ///         ],
        ///         exceptionCountMap: Dictionary&lt;string, number&gt;
        ///       },
        ///       startTime: string (ISO 8601 Format),
        ///       queuedTime: string (ISO 8601 Format),
        ///       pipelineStartTime: string (ISO 8601 Format),
        ///       endTime: string (ISO 8601 Format),
        ///       scanRulesetVersion: number,
        ///       scanRulesetType: &quot;Custom&quot; | &quot;System&quot;,
        ///       scanLevelType: &quot;Full&quot; | &quot;Incremental&quot;,
        ///       errorMessage: string,
        ///       error: {
        ///         code: string,
        ///         message: string,
        ///         target: string,
        ///         details: [
        ///           {
        ///             code: string,
        ///             message: string,
        ///             target: string,
        ///             details: [ErrorModel]
        ///           }
        ///         ]
        ///       },
        ///       runType: string,
        ///       dataSourceType: &quot;None&quot; | &quot;AzureSubscription&quot; | &quot;AzureResourceGroup&quot; | &quot;AzureSynapseWorkspace&quot; | &quot;AzureSynapse&quot; | &quot;AdlsGen1&quot; | &quot;AdlsGen2&quot; | &quot;AmazonAccount&quot; | &quot;AmazonS3&quot; | &quot;AmazonSql&quot; | &quot;AzureCosmosDb&quot; | &quot;AzureDataExplorer&quot; | &quot;AzureFileService&quot; | &quot;AzureSqlDatabase&quot; | &quot;AmazonPostgreSql&quot; | &quot;AzurePostgreSql&quot; | &quot;SqlServerDatabase&quot; | &quot;AzureSqlDatabaseManagedInstance&quot; | &quot;AzureSqlDataWarehouse&quot; | &quot;AzureMySql&quot; | &quot;AzureStorage&quot; | &quot;Teradata&quot; | &quot;Oracle&quot; | &quot;SapS4Hana&quot; | &quot;SapEcc&quot; | &quot;PowerBI&quot;
        ///     }
        ///   ]
        /// }
        /// </code>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   id: string,
        ///   name: string,
        ///   kind: &quot;AzureSubscriptionCredential&quot; | &quot;AzureSubscriptionMsi&quot; | &quot;AzureResourceGroupCredential&quot; | &quot;AzureResourceGroupMsi&quot; | &quot;AzureSynapseWorkspaceCredential&quot; | &quot;AzureSynapseWorkspaceMsi&quot; | &quot;AzureSynapseCredential&quot; | &quot;AzureSynapseMsi&quot; | &quot;AdlsGen1Credential&quot; | &quot;AdlsGen1Msi&quot; | &quot;AdlsGen2Credential&quot; | &quot;AdlsGen2Msi&quot; | &quot;AmazonAccountCredential&quot; | &quot;AmazonS3Credential&quot; | &quot;AmazonS3RoleARN&quot; | &quot;AmazonSqlCredential&quot; | &quot;AzureCosmosDbCredential&quot; | &quot;AzureDataExplorerCredential&quot; | &quot;AzureDataExplorerMsi&quot; | &quot;AzureFileServiceCredential&quot; | &quot;AzureSqlDatabaseCredential&quot; | &quot;AzureSqlDatabaseMsi&quot; | &quot;AmazonPostgreSqlCredential&quot; | &quot;AzurePostgreSqlCredential&quot; | &quot;SqlServerDatabaseCredential&quot; | &quot;AzureSqlDatabaseManagedInstanceCredential&quot; | &quot;AzureSqlDatabaseManagedInstanceMsi&quot; | &quot;AzureSqlDataWarehouseCredential&quot; | &quot;AzureSqlDataWarehouseMsi&quot; | &quot;AzureMySqlCredential&quot; | &quot;AzureStorageCredential&quot; | &quot;AzureStorageMsi&quot; | &quot;TeradataTeradataCredential&quot; | &quot;TeradataTeradataUserPass&quot; | &quot;TeradataUserPass&quot; | &quot;OracleOracleCredential&quot; | &quot;OracleOracleUserPass&quot; | &quot;SapS4HanaSapS4HanaCredential&quot; | &quot;SapS4HanaSapS4HanaUserPass&quot; | &quot;SapEccSapEccCredential&quot; | &quot;SapEccSapEccUserPass&quot; | &quot;PowerBIDelegated&quot; | &quot;PowerBIMsi&quot;,
        ///   scanResults: [
        ///     {
        ///       parentId: string,
        ///       id: string,
        ///       resourceId: string,
        ///       status: string,
        ///       assetsDiscovered: number,
        ///       assetsClassified: number,
        ///       diagnostics: {
        ///         notifications: [
        ///           {
        ///             message: string,
        ///             code: number
        ///           }
        ///         ],
        ///         exceptionCountMap: Dictionary&lt;string, number&gt;
        ///       },
        ///       startTime: string (ISO 8601 Format),
        ///       queuedTime: string (ISO 8601 Format),
        ///       pipelineStartTime: string (ISO 8601 Format),
        ///       endTime: string (ISO 8601 Format),
        ///       scanRulesetVersion: number,
        ///       scanRulesetType: &quot;Custom&quot; | &quot;System&quot;,
        ///       scanLevelType: &quot;Full&quot; | &quot;Incremental&quot;,
        ///       errorMessage: string,
        ///       error: {
        ///         code: string,
        ///         message: string,
        ///         target: string,
        ///         details: [
        ///           {
        ///             code: string,
        ///             message: string,
        ///             target: string,
        ///             details: [ErrorModel]
        ///           }
        ///         ]
        ///       },
        ///       runType: string,
        ///       dataSourceType: &quot;None&quot; | &quot;AzureSubscription&quot; | &quot;AzureResourceGroup&quot; | &quot;AzureSynapseWorkspace&quot; | &quot;AzureSynapse&quot; | &quot;AdlsGen1&quot; | &quot;AdlsGen2&quot; | &quot;AmazonAccount&quot; | &quot;AmazonS3&quot; | &quot;AmazonSql&quot; | &quot;AzureCosmosDb&quot; | &quot;AzureDataExplorer&quot; | &quot;AzureFileService&quot; | &quot;AzureSqlDatabase&quot; | &quot;AmazonPostgreSql&quot; | &quot;AzurePostgreSql&quot; | &quot;SqlServerDatabase&quot; | &quot;AzureSqlDatabaseManagedInstance&quot; | &quot;AzureSqlDataWarehouse&quot; | &quot;AzureMySql&quot; | &quot;AzureStorage&quot; | &quot;Teradata&quot; | &quot;Oracle&quot; | &quot;SapS4Hana&quot; | &quot;SapEcc&quot; | &quot;PowerBI&quot;
        ///     }
        ///   ]
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         message: string,
        ///         target: string,
        ///         details: [ErrorModel]
        ///       }
        ///     ]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response CreateOrUpdate(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewScanClient.CreateOrUpdate");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrUpdateRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a scan information. </summary>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <example>
        /// This sample shows how to call GetPropertiesAsync and parse the result.
        /// <code>
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("https://my-account-name.azure.com");
        /// var client = new PurviewScanClient(endpoint, credential);
        /// 
        /// Response response = await client.GetPropertiesAsync();
        /// JsonElement result = JsonDocument.Parse(GetContentFromResponse(response)).RootElement;
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("kind").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("parentId").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("resourceId").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("assetsDiscovered").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("assetsClassified").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("diagnostics").GetProperty("notifications").Item[0].GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("diagnostics").GetProperty("notifications").Item[0].GetProperty("code").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("diagnostics").GetProperty("exceptionCountMap").GetProperty("test").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("queuedTime").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("pipelineStartTime").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("scanRulesetVersion").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("scanRulesetType").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("scanLevelType").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("errorMessage").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("error").GetProperty("code").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("error").GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("error").GetProperty("target").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("error").GetProperty("details").Item[0].GetProperty("code").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("error").GetProperty("details").Item[0].GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("error").GetProperty("details").Item[0].GetProperty("target").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("runType").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("dataSourceType").ToString());
        /// </code>
        /// </example>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   id: string,
        ///   name: string,
        ///   kind: &quot;AzureSubscriptionCredential&quot; | &quot;AzureSubscriptionMsi&quot; | &quot;AzureResourceGroupCredential&quot; | &quot;AzureResourceGroupMsi&quot; | &quot;AzureSynapseWorkspaceCredential&quot; | &quot;AzureSynapseWorkspaceMsi&quot; | &quot;AzureSynapseCredential&quot; | &quot;AzureSynapseMsi&quot; | &quot;AdlsGen1Credential&quot; | &quot;AdlsGen1Msi&quot; | &quot;AdlsGen2Credential&quot; | &quot;AdlsGen2Msi&quot; | &quot;AmazonAccountCredential&quot; | &quot;AmazonS3Credential&quot; | &quot;AmazonS3RoleARN&quot; | &quot;AmazonSqlCredential&quot; | &quot;AzureCosmosDbCredential&quot; | &quot;AzureDataExplorerCredential&quot; | &quot;AzureDataExplorerMsi&quot; | &quot;AzureFileServiceCredential&quot; | &quot;AzureSqlDatabaseCredential&quot; | &quot;AzureSqlDatabaseMsi&quot; | &quot;AmazonPostgreSqlCredential&quot; | &quot;AzurePostgreSqlCredential&quot; | &quot;SqlServerDatabaseCredential&quot; | &quot;AzureSqlDatabaseManagedInstanceCredential&quot; | &quot;AzureSqlDatabaseManagedInstanceMsi&quot; | &quot;AzureSqlDataWarehouseCredential&quot; | &quot;AzureSqlDataWarehouseMsi&quot; | &quot;AzureMySqlCredential&quot; | &quot;AzureStorageCredential&quot; | &quot;AzureStorageMsi&quot; | &quot;TeradataTeradataCredential&quot; | &quot;TeradataTeradataUserPass&quot; | &quot;TeradataUserPass&quot; | &quot;OracleOracleCredential&quot; | &quot;OracleOracleUserPass&quot; | &quot;SapS4HanaSapS4HanaCredential&quot; | &quot;SapS4HanaSapS4HanaUserPass&quot; | &quot;SapEccSapEccCredential&quot; | &quot;SapEccSapEccUserPass&quot; | &quot;PowerBIDelegated&quot; | &quot;PowerBIMsi&quot;,
        ///   scanResults: [
        ///     {
        ///       parentId: string,
        ///       id: string,
        ///       resourceId: string,
        ///       status: string,
        ///       assetsDiscovered: number,
        ///       assetsClassified: number,
        ///       diagnostics: {
        ///         notifications: [
        ///           {
        ///             message: string,
        ///             code: number
        ///           }
        ///         ],
        ///         exceptionCountMap: Dictionary&lt;string, number&gt;
        ///       },
        ///       startTime: string (ISO 8601 Format),
        ///       queuedTime: string (ISO 8601 Format),
        ///       pipelineStartTime: string (ISO 8601 Format),
        ///       endTime: string (ISO 8601 Format),
        ///       scanRulesetVersion: number,
        ///       scanRulesetType: &quot;Custom&quot; | &quot;System&quot;,
        ///       scanLevelType: &quot;Full&quot; | &quot;Incremental&quot;,
        ///       errorMessage: string,
        ///       error: {
        ///         code: string,
        ///         message: string,
        ///         target: string,
        ///         details: [
        ///           {
        ///             code: string,
        ///             message: string,
        ///             target: string,
        ///             details: [ErrorModel]
        ///           }
        ///         ]
        ///       },
        ///       runType: string,
        ///       dataSourceType: &quot;None&quot; | &quot;AzureSubscription&quot; | &quot;AzureResourceGroup&quot; | &quot;AzureSynapseWorkspace&quot; | &quot;AzureSynapse&quot; | &quot;AdlsGen1&quot; | &quot;AdlsGen2&quot; | &quot;AmazonAccount&quot; | &quot;AmazonS3&quot; | &quot;AmazonSql&quot; | &quot;AzureCosmosDb&quot; | &quot;AzureDataExplorer&quot; | &quot;AzureFileService&quot; | &quot;AzureSqlDatabase&quot; | &quot;AmazonPostgreSql&quot; | &quot;AzurePostgreSql&quot; | &quot;SqlServerDatabase&quot; | &quot;AzureSqlDatabaseManagedInstance&quot; | &quot;AzureSqlDataWarehouse&quot; | &quot;AzureMySql&quot; | &quot;AzureStorage&quot; | &quot;Teradata&quot; | &quot;Oracle&quot; | &quot;SapS4Hana&quot; | &quot;SapEcc&quot; | &quot;PowerBI&quot;
        ///     }
        ///   ]
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         message: string,
        ///         target: string,
        ///         details: [ErrorModel]
        ///       }
        ///     ]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetPropertiesAsync(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("PurviewScanClient.GetProperties");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetPropertiesRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a scan information. </summary>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <example>
        /// This sample shows how to call GetProperties and parse the result.
        /// <code>
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("https://my-account-name.azure.com");
        /// var client = new PurviewScanClient(endpoint, credential);
        /// 
        /// Response response = client.GetProperties();
        /// JsonElement result = JsonDocument.Parse(GetContentFromResponse(response)).RootElement;
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("kind").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("parentId").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("resourceId").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("assetsDiscovered").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("assetsClassified").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("diagnostics").GetProperty("notifications").Item[0].GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("diagnostics").GetProperty("notifications").Item[0].GetProperty("code").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("diagnostics").GetProperty("exceptionCountMap").GetProperty("test").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("queuedTime").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("pipelineStartTime").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("scanRulesetVersion").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("scanRulesetType").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("scanLevelType").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("errorMessage").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("error").GetProperty("code").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("error").GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("error").GetProperty("target").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("error").GetProperty("details").Item[0].GetProperty("code").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("error").GetProperty("details").Item[0].GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("error").GetProperty("details").Item[0].GetProperty("target").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("runType").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("dataSourceType").ToString());
        /// </code>
        /// </example>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   id: string,
        ///   name: string,
        ///   kind: &quot;AzureSubscriptionCredential&quot; | &quot;AzureSubscriptionMsi&quot; | &quot;AzureResourceGroupCredential&quot; | &quot;AzureResourceGroupMsi&quot; | &quot;AzureSynapseWorkspaceCredential&quot; | &quot;AzureSynapseWorkspaceMsi&quot; | &quot;AzureSynapseCredential&quot; | &quot;AzureSynapseMsi&quot; | &quot;AdlsGen1Credential&quot; | &quot;AdlsGen1Msi&quot; | &quot;AdlsGen2Credential&quot; | &quot;AdlsGen2Msi&quot; | &quot;AmazonAccountCredential&quot; | &quot;AmazonS3Credential&quot; | &quot;AmazonS3RoleARN&quot; | &quot;AmazonSqlCredential&quot; | &quot;AzureCosmosDbCredential&quot; | &quot;AzureDataExplorerCredential&quot; | &quot;AzureDataExplorerMsi&quot; | &quot;AzureFileServiceCredential&quot; | &quot;AzureSqlDatabaseCredential&quot; | &quot;AzureSqlDatabaseMsi&quot; | &quot;AmazonPostgreSqlCredential&quot; | &quot;AzurePostgreSqlCredential&quot; | &quot;SqlServerDatabaseCredential&quot; | &quot;AzureSqlDatabaseManagedInstanceCredential&quot; | &quot;AzureSqlDatabaseManagedInstanceMsi&quot; | &quot;AzureSqlDataWarehouseCredential&quot; | &quot;AzureSqlDataWarehouseMsi&quot; | &quot;AzureMySqlCredential&quot; | &quot;AzureStorageCredential&quot; | &quot;AzureStorageMsi&quot; | &quot;TeradataTeradataCredential&quot; | &quot;TeradataTeradataUserPass&quot; | &quot;TeradataUserPass&quot; | &quot;OracleOracleCredential&quot; | &quot;OracleOracleUserPass&quot; | &quot;SapS4HanaSapS4HanaCredential&quot; | &quot;SapS4HanaSapS4HanaUserPass&quot; | &quot;SapEccSapEccCredential&quot; | &quot;SapEccSapEccUserPass&quot; | &quot;PowerBIDelegated&quot; | &quot;PowerBIMsi&quot;,
        ///   scanResults: [
        ///     {
        ///       parentId: string,
        ///       id: string,
        ///       resourceId: string,
        ///       status: string,
        ///       assetsDiscovered: number,
        ///       assetsClassified: number,
        ///       diagnostics: {
        ///         notifications: [
        ///           {
        ///             message: string,
        ///             code: number
        ///           }
        ///         ],
        ///         exceptionCountMap: Dictionary&lt;string, number&gt;
        ///       },
        ///       startTime: string (ISO 8601 Format),
        ///       queuedTime: string (ISO 8601 Format),
        ///       pipelineStartTime: string (ISO 8601 Format),
        ///       endTime: string (ISO 8601 Format),
        ///       scanRulesetVersion: number,
        ///       scanRulesetType: &quot;Custom&quot; | &quot;System&quot;,
        ///       scanLevelType: &quot;Full&quot; | &quot;Incremental&quot;,
        ///       errorMessage: string,
        ///       error: {
        ///         code: string,
        ///         message: string,
        ///         target: string,
        ///         details: [
        ///           {
        ///             code: string,
        ///             message: string,
        ///             target: string,
        ///             details: [ErrorModel]
        ///           }
        ///         ]
        ///       },
        ///       runType: string,
        ///       dataSourceType: &quot;None&quot; | &quot;AzureSubscription&quot; | &quot;AzureResourceGroup&quot; | &quot;AzureSynapseWorkspace&quot; | &quot;AzureSynapse&quot; | &quot;AdlsGen1&quot; | &quot;AdlsGen2&quot; | &quot;AmazonAccount&quot; | &quot;AmazonS3&quot; | &quot;AmazonSql&quot; | &quot;AzureCosmosDb&quot; | &quot;AzureDataExplorer&quot; | &quot;AzureFileService&quot; | &quot;AzureSqlDatabase&quot; | &quot;AmazonPostgreSql&quot; | &quot;AzurePostgreSql&quot; | &quot;SqlServerDatabase&quot; | &quot;AzureSqlDatabaseManagedInstance&quot; | &quot;AzureSqlDataWarehouse&quot; | &quot;AzureMySql&quot; | &quot;AzureStorage&quot; | &quot;Teradata&quot; | &quot;Oracle&quot; | &quot;SapS4Hana&quot; | &quot;SapEcc&quot; | &quot;PowerBI&quot;
        ///     }
        ///   ]
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         message: string,
        ///         target: string,
        ///         details: [ErrorModel]
        ///       }
        ///     ]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetProperties(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("PurviewScanClient.GetProperties");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetPropertiesRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes the scan associated with the data source. </summary>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <example>
        /// This sample shows how to call DeleteAsync and parse the result.
        /// <code>
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("https://my-account-name.azure.com");
        /// var client = new PurviewScanClient(endpoint, credential);
        /// 
        /// Response response = await client.DeleteAsync();
        /// JsonElement result = JsonDocument.Parse(GetContentFromResponse(response)).RootElement;
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("kind").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("parentId").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("resourceId").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("assetsDiscovered").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("assetsClassified").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("diagnostics").GetProperty("notifications").Item[0].GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("diagnostics").GetProperty("notifications").Item[0].GetProperty("code").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("diagnostics").GetProperty("exceptionCountMap").GetProperty("test").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("queuedTime").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("pipelineStartTime").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("scanRulesetVersion").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("scanRulesetType").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("scanLevelType").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("errorMessage").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("error").GetProperty("code").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("error").GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("error").GetProperty("target").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("error").GetProperty("details").Item[0].GetProperty("code").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("error").GetProperty("details").Item[0].GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("error").GetProperty("details").Item[0].GetProperty("target").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("runType").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("dataSourceType").ToString());
        /// </code>
        /// </example>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   id: string,
        ///   name: string,
        ///   kind: &quot;AzureSubscriptionCredential&quot; | &quot;AzureSubscriptionMsi&quot; | &quot;AzureResourceGroupCredential&quot; | &quot;AzureResourceGroupMsi&quot; | &quot;AzureSynapseWorkspaceCredential&quot; | &quot;AzureSynapseWorkspaceMsi&quot; | &quot;AzureSynapseCredential&quot; | &quot;AzureSynapseMsi&quot; | &quot;AdlsGen1Credential&quot; | &quot;AdlsGen1Msi&quot; | &quot;AdlsGen2Credential&quot; | &quot;AdlsGen2Msi&quot; | &quot;AmazonAccountCredential&quot; | &quot;AmazonS3Credential&quot; | &quot;AmazonS3RoleARN&quot; | &quot;AmazonSqlCredential&quot; | &quot;AzureCosmosDbCredential&quot; | &quot;AzureDataExplorerCredential&quot; | &quot;AzureDataExplorerMsi&quot; | &quot;AzureFileServiceCredential&quot; | &quot;AzureSqlDatabaseCredential&quot; | &quot;AzureSqlDatabaseMsi&quot; | &quot;AmazonPostgreSqlCredential&quot; | &quot;AzurePostgreSqlCredential&quot; | &quot;SqlServerDatabaseCredential&quot; | &quot;AzureSqlDatabaseManagedInstanceCredential&quot; | &quot;AzureSqlDatabaseManagedInstanceMsi&quot; | &quot;AzureSqlDataWarehouseCredential&quot; | &quot;AzureSqlDataWarehouseMsi&quot; | &quot;AzureMySqlCredential&quot; | &quot;AzureStorageCredential&quot; | &quot;AzureStorageMsi&quot; | &quot;TeradataTeradataCredential&quot; | &quot;TeradataTeradataUserPass&quot; | &quot;TeradataUserPass&quot; | &quot;OracleOracleCredential&quot; | &quot;OracleOracleUserPass&quot; | &quot;SapS4HanaSapS4HanaCredential&quot; | &quot;SapS4HanaSapS4HanaUserPass&quot; | &quot;SapEccSapEccCredential&quot; | &quot;SapEccSapEccUserPass&quot; | &quot;PowerBIDelegated&quot; | &quot;PowerBIMsi&quot;,
        ///   scanResults: [
        ///     {
        ///       parentId: string,
        ///       id: string,
        ///       resourceId: string,
        ///       status: string,
        ///       assetsDiscovered: number,
        ///       assetsClassified: number,
        ///       diagnostics: {
        ///         notifications: [
        ///           {
        ///             message: string,
        ///             code: number
        ///           }
        ///         ],
        ///         exceptionCountMap: Dictionary&lt;string, number&gt;
        ///       },
        ///       startTime: string (ISO 8601 Format),
        ///       queuedTime: string (ISO 8601 Format),
        ///       pipelineStartTime: string (ISO 8601 Format),
        ///       endTime: string (ISO 8601 Format),
        ///       scanRulesetVersion: number,
        ///       scanRulesetType: &quot;Custom&quot; | &quot;System&quot;,
        ///       scanLevelType: &quot;Full&quot; | &quot;Incremental&quot;,
        ///       errorMessage: string,
        ///       error: {
        ///         code: string,
        ///         message: string,
        ///         target: string,
        ///         details: [
        ///           {
        ///             code: string,
        ///             message: string,
        ///             target: string,
        ///             details: [ErrorModel]
        ///           }
        ///         ]
        ///       },
        ///       runType: string,
        ///       dataSourceType: &quot;None&quot; | &quot;AzureSubscription&quot; | &quot;AzureResourceGroup&quot; | &quot;AzureSynapseWorkspace&quot; | &quot;AzureSynapse&quot; | &quot;AdlsGen1&quot; | &quot;AdlsGen2&quot; | &quot;AmazonAccount&quot; | &quot;AmazonS3&quot; | &quot;AmazonSql&quot; | &quot;AzureCosmosDb&quot; | &quot;AzureDataExplorer&quot; | &quot;AzureFileService&quot; | &quot;AzureSqlDatabase&quot; | &quot;AmazonPostgreSql&quot; | &quot;AzurePostgreSql&quot; | &quot;SqlServerDatabase&quot; | &quot;AzureSqlDatabaseManagedInstance&quot; | &quot;AzureSqlDataWarehouse&quot; | &quot;AzureMySql&quot; | &quot;AzureStorage&quot; | &quot;Teradata&quot; | &quot;Oracle&quot; | &quot;SapS4Hana&quot; | &quot;SapEcc&quot; | &quot;PowerBI&quot;
        ///     }
        ///   ]
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         message: string,
        ///         target: string,
        ///         details: [ErrorModel]
        ///       }
        ///     ]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> DeleteAsync(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("PurviewScanClient.Delete");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes the scan associated with the data source. </summary>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <example>
        /// This sample shows how to call Delete and parse the result.
        /// <code>
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("https://my-account-name.azure.com");
        /// var client = new PurviewScanClient(endpoint, credential);
        /// 
        /// Response response = client.Delete();
        /// JsonElement result = JsonDocument.Parse(GetContentFromResponse(response)).RootElement;
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("kind").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("parentId").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("resourceId").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("assetsDiscovered").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("assetsClassified").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("diagnostics").GetProperty("notifications").Item[0].GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("diagnostics").GetProperty("notifications").Item[0].GetProperty("code").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("diagnostics").GetProperty("exceptionCountMap").GetProperty("test").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("queuedTime").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("pipelineStartTime").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("scanRulesetVersion").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("scanRulesetType").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("scanLevelType").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("errorMessage").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("error").GetProperty("code").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("error").GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("error").GetProperty("target").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("error").GetProperty("details").Item[0].GetProperty("code").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("error").GetProperty("details").Item[0].GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("error").GetProperty("details").Item[0].GetProperty("target").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("runType").ToString());
        /// Console.WriteLine(result.GetProperty("scanResults").Item[0].GetProperty("dataSourceType").ToString());
        /// </code>
        /// </example>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   id: string,
        ///   name: string,
        ///   kind: &quot;AzureSubscriptionCredential&quot; | &quot;AzureSubscriptionMsi&quot; | &quot;AzureResourceGroupCredential&quot; | &quot;AzureResourceGroupMsi&quot; | &quot;AzureSynapseWorkspaceCredential&quot; | &quot;AzureSynapseWorkspaceMsi&quot; | &quot;AzureSynapseCredential&quot; | &quot;AzureSynapseMsi&quot; | &quot;AdlsGen1Credential&quot; | &quot;AdlsGen1Msi&quot; | &quot;AdlsGen2Credential&quot; | &quot;AdlsGen2Msi&quot; | &quot;AmazonAccountCredential&quot; | &quot;AmazonS3Credential&quot; | &quot;AmazonS3RoleARN&quot; | &quot;AmazonSqlCredential&quot; | &quot;AzureCosmosDbCredential&quot; | &quot;AzureDataExplorerCredential&quot; | &quot;AzureDataExplorerMsi&quot; | &quot;AzureFileServiceCredential&quot; | &quot;AzureSqlDatabaseCredential&quot; | &quot;AzureSqlDatabaseMsi&quot; | &quot;AmazonPostgreSqlCredential&quot; | &quot;AzurePostgreSqlCredential&quot; | &quot;SqlServerDatabaseCredential&quot; | &quot;AzureSqlDatabaseManagedInstanceCredential&quot; | &quot;AzureSqlDatabaseManagedInstanceMsi&quot; | &quot;AzureSqlDataWarehouseCredential&quot; | &quot;AzureSqlDataWarehouseMsi&quot; | &quot;AzureMySqlCredential&quot; | &quot;AzureStorageCredential&quot; | &quot;AzureStorageMsi&quot; | &quot;TeradataTeradataCredential&quot; | &quot;TeradataTeradataUserPass&quot; | &quot;TeradataUserPass&quot; | &quot;OracleOracleCredential&quot; | &quot;OracleOracleUserPass&quot; | &quot;SapS4HanaSapS4HanaCredential&quot; | &quot;SapS4HanaSapS4HanaUserPass&quot; | &quot;SapEccSapEccCredential&quot; | &quot;SapEccSapEccUserPass&quot; | &quot;PowerBIDelegated&quot; | &quot;PowerBIMsi&quot;,
        ///   scanResults: [
        ///     {
        ///       parentId: string,
        ///       id: string,
        ///       resourceId: string,
        ///       status: string,
        ///       assetsDiscovered: number,
        ///       assetsClassified: number,
        ///       diagnostics: {
        ///         notifications: [
        ///           {
        ///             message: string,
        ///             code: number
        ///           }
        ///         ],
        ///         exceptionCountMap: Dictionary&lt;string, number&gt;
        ///       },
        ///       startTime: string (ISO 8601 Format),
        ///       queuedTime: string (ISO 8601 Format),
        ///       pipelineStartTime: string (ISO 8601 Format),
        ///       endTime: string (ISO 8601 Format),
        ///       scanRulesetVersion: number,
        ///       scanRulesetType: &quot;Custom&quot; | &quot;System&quot;,
        ///       scanLevelType: &quot;Full&quot; | &quot;Incremental&quot;,
        ///       errorMessage: string,
        ///       error: {
        ///         code: string,
        ///         message: string,
        ///         target: string,
        ///         details: [
        ///           {
        ///             code: string,
        ///             message: string,
        ///             target: string,
        ///             details: [ErrorModel]
        ///           }
        ///         ]
        ///       },
        ///       runType: string,
        ///       dataSourceType: &quot;None&quot; | &quot;AzureSubscription&quot; | &quot;AzureResourceGroup&quot; | &quot;AzureSynapseWorkspace&quot; | &quot;AzureSynapse&quot; | &quot;AdlsGen1&quot; | &quot;AdlsGen2&quot; | &quot;AmazonAccount&quot; | &quot;AmazonS3&quot; | &quot;AmazonSql&quot; | &quot;AzureCosmosDb&quot; | &quot;AzureDataExplorer&quot; | &quot;AzureFileService&quot; | &quot;AzureSqlDatabase&quot; | &quot;AmazonPostgreSql&quot; | &quot;AzurePostgreSql&quot; | &quot;SqlServerDatabase&quot; | &quot;AzureSqlDatabaseManagedInstance&quot; | &quot;AzureSqlDataWarehouse&quot; | &quot;AzureMySql&quot; | &quot;AzureStorage&quot; | &quot;Teradata&quot; | &quot;Oracle&quot; | &quot;SapS4Hana&quot; | &quot;SapEcc&quot; | &quot;PowerBI&quot;
        ///     }
        ///   ]
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         message: string,
        ///         target: string,
        ///         details: [ErrorModel]
        ///       }
        ///     ]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response Delete(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("PurviewScanClient.Delete");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Runs the scan. </summary>
        /// <param name="runId"> The String to use. </param>
        /// <param name="scanLevel"> The ScanLevelType to use. Allowed values: &quot;Full&quot; | &quot;Incremental&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="runId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="runId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <example>
        /// This sample shows how to call RunScanAsync with required parameters, and how to parse the result.
        /// <code>
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("https://my-account-name.azure.com");
        /// var client = new PurviewScanClient(endpoint, credential);
        /// 
        /// Response response = await client.RunScanAsync("runId");
        /// JsonElement result = JsonDocument.Parse(GetContentFromResponse(response)).RootElement;
        /// Console.WriteLine(result.ToString());
        /// </code>
        /// This sample shows how to call RunScanAsync with all parameters, and how to parse the result.
        /// <code>
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("https://my-account-name.azure.com");
        /// var client = new PurviewScanClient(endpoint, credential);
        /// 
        /// Response response = await client.RunScanAsync("runId", "scanLevel");
        /// JsonElement result = JsonDocument.Parse(GetContentFromResponse(response)).RootElement;
        /// Console.WriteLine(result.GetProperty("scanResultId").ToString());
        /// Console.WriteLine(result.GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("details").Item[0].GetProperty("code").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("details").Item[0].GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("details").Item[0].GetProperty("target").ToString());
        /// </code>
        /// </example>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   scanResultId: OperationResponseScanResultId,
        ///   startTime: string (ISO 8601 Format),
        ///   endTime: string (ISO 8601 Format),
        ///   status: &quot;Accepted&quot; | &quot;InProgress&quot; | &quot;TransientFailure&quot; | &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;Canceled&quot;,
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         message: string,
        ///         target: string,
        ///         details: [ErrorInfo]
        ///       }
        ///     ]
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         message: string,
        ///         target: string,
        ///         details: [ErrorModel]
        ///       }
        ///     ]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> RunScanAsync(string runId, string scanLevel = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(runId, nameof(runId));

            using var scope = ClientDiagnostics.CreateScope("PurviewScanClient.RunScan");
            scope.Start();
            try
            {
                using HttpMessage message = CreateRunScanRequest(runId, scanLevel, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Runs the scan. </summary>
        /// <param name="runId"> The String to use. </param>
        /// <param name="scanLevel"> The ScanLevelType to use. Allowed values: &quot;Full&quot; | &quot;Incremental&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="runId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="runId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <example>
        /// This sample shows how to call RunScan with required parameters, and how to parse the result.
        /// <code>
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("https://my-account-name.azure.com");
        /// var client = new PurviewScanClient(endpoint, credential);
        /// 
        /// Response response = client.RunScan("runId");
        /// JsonElement result = JsonDocument.Parse(GetContentFromResponse(response)).RootElement;
        /// Console.WriteLine(result.ToString());
        /// </code>
        /// This sample shows how to call RunScan with all parameters, and how to parse the result.
        /// <code>
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("https://my-account-name.azure.com");
        /// var client = new PurviewScanClient(endpoint, credential);
        /// 
        /// Response response = client.RunScan("runId", "scanLevel");
        /// JsonElement result = JsonDocument.Parse(GetContentFromResponse(response)).RootElement;
        /// Console.WriteLine(result.GetProperty("scanResultId").ToString());
        /// Console.WriteLine(result.GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("details").Item[0].GetProperty("code").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("details").Item[0].GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("details").Item[0].GetProperty("target").ToString());
        /// </code>
        /// </example>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   scanResultId: OperationResponseScanResultId,
        ///   startTime: string (ISO 8601 Format),
        ///   endTime: string (ISO 8601 Format),
        ///   status: &quot;Accepted&quot; | &quot;InProgress&quot; | &quot;TransientFailure&quot; | &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;Canceled&quot;,
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         message: string,
        ///         target: string,
        ///         details: [ErrorInfo]
        ///       }
        ///     ]
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         message: string,
        ///         target: string,
        ///         details: [ErrorModel]
        ///       }
        ///     ]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response RunScan(string runId, string scanLevel = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(runId, nameof(runId));

            using var scope = ClientDiagnostics.CreateScope("PurviewScanClient.RunScan");
            scope.Start();
            try
            {
                using HttpMessage message = CreateRunScanRequest(runId, scanLevel, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Cancels a scan. </summary>
        /// <param name="runId"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="runId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="runId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <example>
        /// This sample shows how to call CancelScanAsync and parse the result.
        /// <code>
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("https://my-account-name.azure.com");
        /// var client = new PurviewScanClient(endpoint, credential);
        /// 
        /// Response response = await client.CancelScanAsync("runId");
        /// JsonElement result = JsonDocument.Parse(GetContentFromResponse(response)).RootElement;
        /// Console.WriteLine(result.GetProperty("scanResultId").ToString());
        /// Console.WriteLine(result.GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("details").Item[0].GetProperty("code").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("details").Item[0].GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("details").Item[0].GetProperty("target").ToString());
        /// </code>
        /// </example>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   scanResultId: OperationResponseScanResultId,
        ///   startTime: string (ISO 8601 Format),
        ///   endTime: string (ISO 8601 Format),
        ///   status: &quot;Accepted&quot; | &quot;InProgress&quot; | &quot;TransientFailure&quot; | &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;Canceled&quot;,
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         message: string,
        ///         target: string,
        ///         details: [ErrorInfo]
        ///       }
        ///     ]
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         message: string,
        ///         target: string,
        ///         details: [ErrorModel]
        ///       }
        ///     ]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> CancelScanAsync(string runId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(runId, nameof(runId));

            using var scope = ClientDiagnostics.CreateScope("PurviewScanClient.CancelScan");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCancelScanRequest(runId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Cancels a scan. </summary>
        /// <param name="runId"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="runId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="runId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <example>
        /// This sample shows how to call CancelScan and parse the result.
        /// <code>
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("https://my-account-name.azure.com");
        /// var client = new PurviewScanClient(endpoint, credential);
        /// 
        /// Response response = client.CancelScan("runId");
        /// JsonElement result = JsonDocument.Parse(GetContentFromResponse(response)).RootElement;
        /// Console.WriteLine(result.GetProperty("scanResultId").ToString());
        /// Console.WriteLine(result.GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("details").Item[0].GetProperty("code").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("details").Item[0].GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("details").Item[0].GetProperty("target").ToString());
        /// </code>
        /// </example>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   scanResultId: OperationResponseScanResultId,
        ///   startTime: string (ISO 8601 Format),
        ///   endTime: string (ISO 8601 Format),
        ///   status: &quot;Accepted&quot; | &quot;InProgress&quot; | &quot;TransientFailure&quot; | &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;Canceled&quot;,
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         message: string,
        ///         target: string,
        ///         details: [ErrorInfo]
        ///       }
        ///     ]
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         message: string,
        ///         target: string,
        ///         details: [ErrorModel]
        ///       }
        ///     ]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response CancelScan(string runId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(runId, nameof(runId));

            using var scope = ClientDiagnostics.CreateScope("PurviewScanClient.CancelScan");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCancelScanRequest(runId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets trigger information. </summary>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <example>
        /// This sample shows how to call GetTriggerAsync and parse the result.
        /// <code>
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("https://my-account-name.azure.com");
        /// var client = new PurviewScanClient(endpoint, credential);
        /// 
        /// Response response = await client.GetTriggerAsync();
        /// JsonElement result = JsonDocument.Parse(GetContentFromResponse(response)).RootElement;
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("frequency").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("interval").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("additionalProperties").GetProperty("test").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("minutes").Item[0].ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("hours").Item[0].ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("weekDays").Item[0].ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("monthDays").Item[0].ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("monthlyOccurrences").Item[0].GetProperty("additionalProperties").GetProperty("test").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("monthlyOccurrences").Item[0].GetProperty("day").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("monthlyOccurrences").Item[0].GetProperty("occurrence").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrenceInterval").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("createdAt").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("lastModifiedAt").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("lastScheduled").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("scanLevel").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("incrementalScanStartTime").ToString());
        /// </code>
        /// </example>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   id: string,
        ///   name: string,
        ///   properties: {
        ///     recurrence: {
        ///       frequency: &quot;Week&quot; | &quot;Month&quot;,
        ///       interval: number,
        ///       startTime: string (ISO 8601 Format),
        ///       endTime: string (ISO 8601 Format),
        ///       schedule: {
        ///         additionalProperties: Dictionary&lt;string, AnyObject&gt;,
        ///         minutes: [number],
        ///         hours: [number],
        ///         weekDays: [&quot;Sunday&quot; | &quot;Monday&quot; | &quot;Tuesday&quot; | &quot;Wednesday&quot; | &quot;Thursday&quot; | &quot;Friday&quot; | &quot;Saturday&quot;],
        ///         monthDays: [number],
        ///         monthlyOccurrences: [
        ///           {
        ///             additionalProperties: Dictionary&lt;string, AnyObject&gt;,
        ///             day: &quot;Sunday&quot; | &quot;Monday&quot; | &quot;Tuesday&quot; | &quot;Wednesday&quot; | &quot;Thursday&quot; | &quot;Friday&quot; | &quot;Saturday&quot;,
        ///             occurrence: number
        ///           }
        ///         ]
        ///       },
        ///       timeZone: string
        ///     },
        ///     recurrenceInterval: string,
        ///     createdAt: string (ISO 8601 Format),
        ///     lastModifiedAt: string (ISO 8601 Format),
        ///     lastScheduled: string (ISO 8601 Format),
        ///     scanLevel: &quot;Full&quot; | &quot;Incremental&quot;,
        ///     incrementalScanStartTime: string (ISO 8601 Format)
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         message: string,
        ///         target: string,
        ///         details: [ErrorModel]
        ///       }
        ///     ]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetTriggerAsync(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("PurviewScanClient.GetTrigger");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetTriggerRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets trigger information. </summary>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <example>
        /// This sample shows how to call GetTrigger and parse the result.
        /// <code>
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("https://my-account-name.azure.com");
        /// var client = new PurviewScanClient(endpoint, credential);
        /// 
        /// Response response = client.GetTrigger();
        /// JsonElement result = JsonDocument.Parse(GetContentFromResponse(response)).RootElement;
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("frequency").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("interval").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("additionalProperties").GetProperty("test").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("minutes").Item[0].ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("hours").Item[0].ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("weekDays").Item[0].ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("monthDays").Item[0].ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("monthlyOccurrences").Item[0].GetProperty("additionalProperties").GetProperty("test").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("monthlyOccurrences").Item[0].GetProperty("day").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("monthlyOccurrences").Item[0].GetProperty("occurrence").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrenceInterval").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("createdAt").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("lastModifiedAt").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("lastScheduled").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("scanLevel").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("incrementalScanStartTime").ToString());
        /// </code>
        /// </example>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   id: string,
        ///   name: string,
        ///   properties: {
        ///     recurrence: {
        ///       frequency: &quot;Week&quot; | &quot;Month&quot;,
        ///       interval: number,
        ///       startTime: string (ISO 8601 Format),
        ///       endTime: string (ISO 8601 Format),
        ///       schedule: {
        ///         additionalProperties: Dictionary&lt;string, AnyObject&gt;,
        ///         minutes: [number],
        ///         hours: [number],
        ///         weekDays: [&quot;Sunday&quot; | &quot;Monday&quot; | &quot;Tuesday&quot; | &quot;Wednesday&quot; | &quot;Thursday&quot; | &quot;Friday&quot; | &quot;Saturday&quot;],
        ///         monthDays: [number],
        ///         monthlyOccurrences: [
        ///           {
        ///             additionalProperties: Dictionary&lt;string, AnyObject&gt;,
        ///             day: &quot;Sunday&quot; | &quot;Monday&quot; | &quot;Tuesday&quot; | &quot;Wednesday&quot; | &quot;Thursday&quot; | &quot;Friday&quot; | &quot;Saturday&quot;,
        ///             occurrence: number
        ///           }
        ///         ]
        ///       },
        ///       timeZone: string
        ///     },
        ///     recurrenceInterval: string,
        ///     createdAt: string (ISO 8601 Format),
        ///     lastModifiedAt: string (ISO 8601 Format),
        ///     lastScheduled: string (ISO 8601 Format),
        ///     scanLevel: &quot;Full&quot; | &quot;Incremental&quot;,
        ///     incrementalScanStartTime: string (ISO 8601 Format)
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         message: string,
        ///         target: string,
        ///         details: [ErrorModel]
        ///       }
        ///     ]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetTrigger(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("PurviewScanClient.GetTrigger");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetTriggerRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates an instance of a trigger. </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <example>
        /// This sample shows how to call CreateOrUpdateTriggerAsync with all request content, and how to parse the result.
        /// <code>
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("https://my-account-name.azure.com");
        /// var client = new PurviewScanClient(endpoint, credential);
        /// 
        /// var data = new {
        ///     properties = new {
        ///         recurrence = new {
        ///             frequency = "Week",
        ///             interval = 1234,
        ///             startTime = "2022-05-10T14:57:31.2311892-04:00",
        ///             endTime = "2022-05-10T14:57:31.2311892-04:00",
        ///             schedule = new {
        ///                 additionalProperties = new {
        ///                     key = new {},
        ///                 },
        ///                 minutes = new[] {
        ///                     1234
        ///                 },
        ///                 hours = new[] {
        ///                     1234
        ///                 },
        ///                 weekDays = new[] {
        ///                     "Sunday"
        ///                 },
        ///                 monthDays = new[] {
        ///                     1234
        ///                 },
        ///                 monthlyOccurrences = new[] {
        ///                     new {
        ///                         additionalProperties = new {
        ///                             key = new {},
        ///                         },
        ///                         day = "Sunday",
        ///                         occurrence = ,
        ///                     }
        ///                 },
        ///             },
        ///             timeZone = "TriggerRecurrenceTimeZone",
        ///         },
        ///         recurrenceInterval = "TriggerPropertiesRecurrenceInterval",
        ///         scanLevel = "Full",
        ///         incrementalScanStartTime = "2022-05-10T14:57:31.2311892-04:00",
        ///     },
        /// };
        /// 
        /// Response response = await client.CreateOrUpdateTriggerAsync(RequestContent.Create(data));
        /// JsonElement result = JsonDocument.Parse(GetContentFromResponse(response)).RootElement;
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("frequency").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("interval").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("additionalProperties").GetProperty("test").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("minutes").Item[0].ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("hours").Item[0].ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("weekDays").Item[0].ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("monthDays").Item[0].ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("monthlyOccurrences").Item[0].GetProperty("additionalProperties").GetProperty("test").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("monthlyOccurrences").Item[0].GetProperty("day").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("monthlyOccurrences").Item[0].GetProperty("occurrence").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrenceInterval").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("createdAt").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("lastModifiedAt").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("lastScheduled").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("scanLevel").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("incrementalScanStartTime").ToString());
        /// </code>
        /// </example>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   id: string,
        ///   name: string,
        ///   properties: {
        ///     recurrence: {
        ///       frequency: &quot;Week&quot; | &quot;Month&quot;,
        ///       interval: number,
        ///       startTime: string (ISO 8601 Format),
        ///       endTime: string (ISO 8601 Format),
        ///       schedule: {
        ///         additionalProperties: Dictionary&lt;string, AnyObject&gt;,
        ///         minutes: [number],
        ///         hours: [number],
        ///         weekDays: [&quot;Sunday&quot; | &quot;Monday&quot; | &quot;Tuesday&quot; | &quot;Wednesday&quot; | &quot;Thursday&quot; | &quot;Friday&quot; | &quot;Saturday&quot;],
        ///         monthDays: [number],
        ///         monthlyOccurrences: [
        ///           {
        ///             additionalProperties: Dictionary&lt;string, AnyObject&gt;,
        ///             day: &quot;Sunday&quot; | &quot;Monday&quot; | &quot;Tuesday&quot; | &quot;Wednesday&quot; | &quot;Thursday&quot; | &quot;Friday&quot; | &quot;Saturday&quot;,
        ///             occurrence: number
        ///           }
        ///         ]
        ///       },
        ///       timeZone: string
        ///     },
        ///     recurrenceInterval: string,
        ///     createdAt: string (ISO 8601 Format),
        ///     lastModifiedAt: string (ISO 8601 Format),
        ///     lastScheduled: string (ISO 8601 Format),
        ///     scanLevel: &quot;Full&quot; | &quot;Incremental&quot;,
        ///     incrementalScanStartTime: string (ISO 8601 Format)
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   id: string,
        ///   name: string,
        ///   properties: {
        ///     recurrence: {
        ///       frequency: &quot;Week&quot; | &quot;Month&quot;,
        ///       interval: number,
        ///       startTime: string (ISO 8601 Format),
        ///       endTime: string (ISO 8601 Format),
        ///       schedule: {
        ///         additionalProperties: Dictionary&lt;string, AnyObject&gt;,
        ///         minutes: [number],
        ///         hours: [number],
        ///         weekDays: [&quot;Sunday&quot; | &quot;Monday&quot; | &quot;Tuesday&quot; | &quot;Wednesday&quot; | &quot;Thursday&quot; | &quot;Friday&quot; | &quot;Saturday&quot;],
        ///         monthDays: [number],
        ///         monthlyOccurrences: [
        ///           {
        ///             additionalProperties: Dictionary&lt;string, AnyObject&gt;,
        ///             day: &quot;Sunday&quot; | &quot;Monday&quot; | &quot;Tuesday&quot; | &quot;Wednesday&quot; | &quot;Thursday&quot; | &quot;Friday&quot; | &quot;Saturday&quot;,
        ///             occurrence: number
        ///           }
        ///         ]
        ///       },
        ///       timeZone: string
        ///     },
        ///     recurrenceInterval: string,
        ///     createdAt: string (ISO 8601 Format),
        ///     lastModifiedAt: string (ISO 8601 Format),
        ///     lastScheduled: string (ISO 8601 Format),
        ///     scanLevel: &quot;Full&quot; | &quot;Incremental&quot;,
        ///     incrementalScanStartTime: string (ISO 8601 Format)
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         message: string,
        ///         target: string,
        ///         details: [ErrorModel]
        ///       }
        ///     ]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> CreateOrUpdateTriggerAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewScanClient.CreateOrUpdateTrigger");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrUpdateTriggerRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates an instance of a trigger. </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <example>
        /// This sample shows how to call CreateOrUpdateTrigger with all request content, and how to parse the result.
        /// <code>
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("https://my-account-name.azure.com");
        /// var client = new PurviewScanClient(endpoint, credential);
        /// 
        /// var data = new {
        ///     properties = new {
        ///         recurrence = new {
        ///             frequency = "Week",
        ///             interval = 1234,
        ///             startTime = "2022-05-10T14:57:31.2311892-04:00",
        ///             endTime = "2022-05-10T14:57:31.2311892-04:00",
        ///             schedule = new {
        ///                 additionalProperties = new {
        ///                     key = new {},
        ///                 },
        ///                 minutes = new[] {
        ///                     1234
        ///                 },
        ///                 hours = new[] {
        ///                     1234
        ///                 },
        ///                 weekDays = new[] {
        ///                     "Sunday"
        ///                 },
        ///                 monthDays = new[] {
        ///                     1234
        ///                 },
        ///                 monthlyOccurrences = new[] {
        ///                     new {
        ///                         additionalProperties = new {
        ///                             key = new {},
        ///                         },
        ///                         day = "Sunday",
        ///                         occurrence = ,
        ///                     }
        ///                 },
        ///             },
        ///             timeZone = "TriggerRecurrenceTimeZone",
        ///         },
        ///         recurrenceInterval = "TriggerPropertiesRecurrenceInterval",
        ///         scanLevel = "Full",
        ///         incrementalScanStartTime = "2022-05-10T14:57:31.2311892-04:00",
        ///     },
        /// };
        /// 
        /// Response response = client.CreateOrUpdateTrigger(RequestContent.Create(data));
        /// JsonElement result = JsonDocument.Parse(GetContentFromResponse(response)).RootElement;
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("frequency").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("interval").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("additionalProperties").GetProperty("test").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("minutes").Item[0].ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("hours").Item[0].ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("weekDays").Item[0].ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("monthDays").Item[0].ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("monthlyOccurrences").Item[0].GetProperty("additionalProperties").GetProperty("test").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("monthlyOccurrences").Item[0].GetProperty("day").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("monthlyOccurrences").Item[0].GetProperty("occurrence").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrenceInterval").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("createdAt").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("lastModifiedAt").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("lastScheduled").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("scanLevel").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("incrementalScanStartTime").ToString());
        /// </code>
        /// </example>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   id: string,
        ///   name: string,
        ///   properties: {
        ///     recurrence: {
        ///       frequency: &quot;Week&quot; | &quot;Month&quot;,
        ///       interval: number,
        ///       startTime: string (ISO 8601 Format),
        ///       endTime: string (ISO 8601 Format),
        ///       schedule: {
        ///         additionalProperties: Dictionary&lt;string, AnyObject&gt;,
        ///         minutes: [number],
        ///         hours: [number],
        ///         weekDays: [&quot;Sunday&quot; | &quot;Monday&quot; | &quot;Tuesday&quot; | &quot;Wednesday&quot; | &quot;Thursday&quot; | &quot;Friday&quot; | &quot;Saturday&quot;],
        ///         monthDays: [number],
        ///         monthlyOccurrences: [
        ///           {
        ///             additionalProperties: Dictionary&lt;string, AnyObject&gt;,
        ///             day: &quot;Sunday&quot; | &quot;Monday&quot; | &quot;Tuesday&quot; | &quot;Wednesday&quot; | &quot;Thursday&quot; | &quot;Friday&quot; | &quot;Saturday&quot;,
        ///             occurrence: number
        ///           }
        ///         ]
        ///       },
        ///       timeZone: string
        ///     },
        ///     recurrenceInterval: string,
        ///     createdAt: string (ISO 8601 Format),
        ///     lastModifiedAt: string (ISO 8601 Format),
        ///     lastScheduled: string (ISO 8601 Format),
        ///     scanLevel: &quot;Full&quot; | &quot;Incremental&quot;,
        ///     incrementalScanStartTime: string (ISO 8601 Format)
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   id: string,
        ///   name: string,
        ///   properties: {
        ///     recurrence: {
        ///       frequency: &quot;Week&quot; | &quot;Month&quot;,
        ///       interval: number,
        ///       startTime: string (ISO 8601 Format),
        ///       endTime: string (ISO 8601 Format),
        ///       schedule: {
        ///         additionalProperties: Dictionary&lt;string, AnyObject&gt;,
        ///         minutes: [number],
        ///         hours: [number],
        ///         weekDays: [&quot;Sunday&quot; | &quot;Monday&quot; | &quot;Tuesday&quot; | &quot;Wednesday&quot; | &quot;Thursday&quot; | &quot;Friday&quot; | &quot;Saturday&quot;],
        ///         monthDays: [number],
        ///         monthlyOccurrences: [
        ///           {
        ///             additionalProperties: Dictionary&lt;string, AnyObject&gt;,
        ///             day: &quot;Sunday&quot; | &quot;Monday&quot; | &quot;Tuesday&quot; | &quot;Wednesday&quot; | &quot;Thursday&quot; | &quot;Friday&quot; | &quot;Saturday&quot;,
        ///             occurrence: number
        ///           }
        ///         ]
        ///       },
        ///       timeZone: string
        ///     },
        ///     recurrenceInterval: string,
        ///     createdAt: string (ISO 8601 Format),
        ///     lastModifiedAt: string (ISO 8601 Format),
        ///     lastScheduled: string (ISO 8601 Format),
        ///     scanLevel: &quot;Full&quot; | &quot;Incremental&quot;,
        ///     incrementalScanStartTime: string (ISO 8601 Format)
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         message: string,
        ///         target: string,
        ///         details: [ErrorModel]
        ///       }
        ///     ]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response CreateOrUpdateTrigger(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewScanClient.CreateOrUpdateTrigger");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrUpdateTriggerRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes the trigger associated with the scan. </summary>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <example>
        /// This sample shows how to call DeleteTriggerAsync and parse the result.
        /// <code>
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("https://my-account-name.azure.com");
        /// var client = new PurviewScanClient(endpoint, credential);
        /// 
        /// Response response = await client.DeleteTriggerAsync();
        /// JsonElement result = JsonDocument.Parse(GetContentFromResponse(response)).RootElement;
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("frequency").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("interval").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("additionalProperties").GetProperty("test").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("minutes").Item[0].ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("hours").Item[0].ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("weekDays").Item[0].ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("monthDays").Item[0].ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("monthlyOccurrences").Item[0].GetProperty("additionalProperties").GetProperty("test").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("monthlyOccurrences").Item[0].GetProperty("day").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("monthlyOccurrences").Item[0].GetProperty("occurrence").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrenceInterval").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("createdAt").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("lastModifiedAt").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("lastScheduled").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("scanLevel").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("incrementalScanStartTime").ToString());
        /// </code>
        /// </example>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   id: string,
        ///   name: string,
        ///   properties: {
        ///     recurrence: {
        ///       frequency: &quot;Week&quot; | &quot;Month&quot;,
        ///       interval: number,
        ///       startTime: string (ISO 8601 Format),
        ///       endTime: string (ISO 8601 Format),
        ///       schedule: {
        ///         additionalProperties: Dictionary&lt;string, AnyObject&gt;,
        ///         minutes: [number],
        ///         hours: [number],
        ///         weekDays: [&quot;Sunday&quot; | &quot;Monday&quot; | &quot;Tuesday&quot; | &quot;Wednesday&quot; | &quot;Thursday&quot; | &quot;Friday&quot; | &quot;Saturday&quot;],
        ///         monthDays: [number],
        ///         monthlyOccurrences: [
        ///           {
        ///             additionalProperties: Dictionary&lt;string, AnyObject&gt;,
        ///             day: &quot;Sunday&quot; | &quot;Monday&quot; | &quot;Tuesday&quot; | &quot;Wednesday&quot; | &quot;Thursday&quot; | &quot;Friday&quot; | &quot;Saturday&quot;,
        ///             occurrence: number
        ///           }
        ///         ]
        ///       },
        ///       timeZone: string
        ///     },
        ///     recurrenceInterval: string,
        ///     createdAt: string (ISO 8601 Format),
        ///     lastModifiedAt: string (ISO 8601 Format),
        ///     lastScheduled: string (ISO 8601 Format),
        ///     scanLevel: &quot;Full&quot; | &quot;Incremental&quot;,
        ///     incrementalScanStartTime: string (ISO 8601 Format)
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         message: string,
        ///         target: string,
        ///         details: [ErrorModel]
        ///       }
        ///     ]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> DeleteTriggerAsync(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("PurviewScanClient.DeleteTrigger");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteTriggerRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes the trigger associated with the scan. </summary>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <example>
        /// This sample shows how to call DeleteTrigger and parse the result.
        /// <code>
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("https://my-account-name.azure.com");
        /// var client = new PurviewScanClient(endpoint, credential);
        /// 
        /// Response response = client.DeleteTrigger();
        /// JsonElement result = JsonDocument.Parse(GetContentFromResponse(response)).RootElement;
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("frequency").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("interval").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("additionalProperties").GetProperty("test").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("minutes").Item[0].ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("hours").Item[0].ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("weekDays").Item[0].ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("monthDays").Item[0].ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("monthlyOccurrences").Item[0].GetProperty("additionalProperties").GetProperty("test").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("monthlyOccurrences").Item[0].GetProperty("day").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("monthlyOccurrences").Item[0].GetProperty("occurrence").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrenceInterval").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("createdAt").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("lastModifiedAt").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("lastScheduled").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("scanLevel").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("incrementalScanStartTime").ToString());
        /// </code>
        /// </example>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   id: string,
        ///   name: string,
        ///   properties: {
        ///     recurrence: {
        ///       frequency: &quot;Week&quot; | &quot;Month&quot;,
        ///       interval: number,
        ///       startTime: string (ISO 8601 Format),
        ///       endTime: string (ISO 8601 Format),
        ///       schedule: {
        ///         additionalProperties: Dictionary&lt;string, AnyObject&gt;,
        ///         minutes: [number],
        ///         hours: [number],
        ///         weekDays: [&quot;Sunday&quot; | &quot;Monday&quot; | &quot;Tuesday&quot; | &quot;Wednesday&quot; | &quot;Thursday&quot; | &quot;Friday&quot; | &quot;Saturday&quot;],
        ///         monthDays: [number],
        ///         monthlyOccurrences: [
        ///           {
        ///             additionalProperties: Dictionary&lt;string, AnyObject&gt;,
        ///             day: &quot;Sunday&quot; | &quot;Monday&quot; | &quot;Tuesday&quot; | &quot;Wednesday&quot; | &quot;Thursday&quot; | &quot;Friday&quot; | &quot;Saturday&quot;,
        ///             occurrence: number
        ///           }
        ///         ]
        ///       },
        ///       timeZone: string
        ///     },
        ///     recurrenceInterval: string,
        ///     createdAt: string (ISO 8601 Format),
        ///     lastModifiedAt: string (ISO 8601 Format),
        ///     lastScheduled: string (ISO 8601 Format),
        ///     scanLevel: &quot;Full&quot; | &quot;Incremental&quot;,
        ///     incrementalScanStartTime: string (ISO 8601 Format)
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         message: string,
        ///         target: string,
        ///         details: [ErrorModel]
        ///       }
        ///     ]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response DeleteTrigger(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("PurviewScanClient.DeleteTrigger");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteTriggerRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists the scan history of a scan. </summary>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <example>
        /// This sample shows how to call GetRunsAsync and parse the result.
        /// <code>
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("https://my-account-name.azure.com");
        /// var client = new PurviewScanClient(endpoint, credential);
        /// 
        /// Response response = await client.GetRunsAsync();
        /// JsonElement result = JsonDocument.Parse(GetContentFromResponse(response)).RootElement;
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("parentId").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("resourceId").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("assetsDiscovered").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("assetsClassified").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("diagnostics").GetProperty("notifications").Item[0].GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("diagnostics").GetProperty("notifications").Item[0].GetProperty("code").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("diagnostics").GetProperty("exceptionCountMap").GetProperty("test").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("queuedTime").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pipelineStartTime").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("scanRulesetVersion").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("scanRulesetType").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("scanLevelType").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("errorMessage").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("error").GetProperty("code").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("error").GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("error").GetProperty("target").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("error").GetProperty("details").Item[0].GetProperty("code").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("error").GetProperty("details").Item[0].GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("error").GetProperty("details").Item[0].GetProperty("target").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("runType").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("dataSourceType").ToString());
        /// Console.WriteLine(result.GetProperty("nextLink").ToString());
        /// Console.WriteLine(result.GetProperty("count").ToString());
        /// </code>
        /// </example>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       parentId: string,
        ///       id: string,
        ///       resourceId: string,
        ///       status: string,
        ///       assetsDiscovered: number,
        ///       assetsClassified: number,
        ///       diagnostics: {
        ///         notifications: [
        ///           {
        ///             message: string,
        ///             code: number
        ///           }
        ///         ],
        ///         exceptionCountMap: Dictionary&lt;string, number&gt;
        ///       },
        ///       startTime: string (ISO 8601 Format),
        ///       queuedTime: string (ISO 8601 Format),
        ///       pipelineStartTime: string (ISO 8601 Format),
        ///       endTime: string (ISO 8601 Format),
        ///       scanRulesetVersion: number,
        ///       scanRulesetType: &quot;Custom&quot; | &quot;System&quot;,
        ///       scanLevelType: &quot;Full&quot; | &quot;Incremental&quot;,
        ///       errorMessage: string,
        ///       error: {
        ///         code: string,
        ///         message: string,
        ///         target: string,
        ///         details: [
        ///           {
        ///             code: string,
        ///             message: string,
        ///             target: string,
        ///             details: [ErrorModel]
        ///           }
        ///         ]
        ///       },
        ///       runType: string,
        ///       dataSourceType: &quot;None&quot; | &quot;AzureSubscription&quot; | &quot;AzureResourceGroup&quot; | &quot;AzureSynapseWorkspace&quot; | &quot;AzureSynapse&quot; | &quot;AdlsGen1&quot; | &quot;AdlsGen2&quot; | &quot;AmazonAccount&quot; | &quot;AmazonS3&quot; | &quot;AmazonSql&quot; | &quot;AzureCosmosDb&quot; | &quot;AzureDataExplorer&quot; | &quot;AzureFileService&quot; | &quot;AzureSqlDatabase&quot; | &quot;AmazonPostgreSql&quot; | &quot;AzurePostgreSql&quot; | &quot;SqlServerDatabase&quot; | &quot;AzureSqlDatabaseManagedInstance&quot; | &quot;AzureSqlDataWarehouse&quot; | &quot;AzureMySql&quot; | &quot;AzureStorage&quot; | &quot;Teradata&quot; | &quot;Oracle&quot; | &quot;SapS4Hana&quot; | &quot;SapEcc&quot; | &quot;PowerBI&quot;
        ///     }
        ///   ],
        ///   nextLink: string,
        ///   count: number
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         message: string,
        ///         target: string,
        ///         details: [ErrorModel]
        ///       }
        ///     ]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual AsyncPageable<BinaryData> GetRunsAsync(RequestContext context = null)
        {
            return GetRunsImplementationAsync("PurviewScanClient.GetRuns", context);
        }

        private AsyncPageable<BinaryData> GetRunsImplementationAsync(string diagnosticsScopeName, RequestContext context)
        {
            return PageableHelpers.CreateAsyncPageable(CreateEnumerableAsync, ClientDiagnostics, diagnosticsScopeName);
            async IAsyncEnumerable<Page<BinaryData>> CreateEnumerableAsync(string nextLink, int? pageSizeHint, [EnumeratorCancellation] CancellationToken cancellationToken = default)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetRunsRequest(context)
                        : CreateGetRunsNextPageRequest(nextLink, context);
                    var page = await LowLevelPageableHelpers.ProcessMessageAsync(_pipeline, message, context, "value", "nextLink", cancellationToken).ConfigureAwait(false);
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Lists the scan history of a scan. </summary>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <example>
        /// This sample shows how to call GetRuns and parse the result.
        /// <code>
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("https://my-account-name.azure.com");
        /// var client = new PurviewScanClient(endpoint, credential);
        /// 
        /// Response response = client.GetRuns();
        /// JsonElement result = JsonDocument.Parse(GetContentFromResponse(response)).RootElement;
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("parentId").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("resourceId").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("assetsDiscovered").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("assetsClassified").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("diagnostics").GetProperty("notifications").Item[0].GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("diagnostics").GetProperty("notifications").Item[0].GetProperty("code").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("diagnostics").GetProperty("exceptionCountMap").GetProperty("test").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("queuedTime").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("pipelineStartTime").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("scanRulesetVersion").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("scanRulesetType").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("scanLevelType").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("errorMessage").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("error").GetProperty("code").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("error").GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("error").GetProperty("target").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("error").GetProperty("details").Item[0].GetProperty("code").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("error").GetProperty("details").Item[0].GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("error").GetProperty("details").Item[0].GetProperty("target").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("runType").ToString());
        /// Console.WriteLine(result.GetProperty("value").Item[0].GetProperty("dataSourceType").ToString());
        /// Console.WriteLine(result.GetProperty("nextLink").ToString());
        /// Console.WriteLine(result.GetProperty("count").ToString());
        /// </code>
        /// </example>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       parentId: string,
        ///       id: string,
        ///       resourceId: string,
        ///       status: string,
        ///       assetsDiscovered: number,
        ///       assetsClassified: number,
        ///       diagnostics: {
        ///         notifications: [
        ///           {
        ///             message: string,
        ///             code: number
        ///           }
        ///         ],
        ///         exceptionCountMap: Dictionary&lt;string, number&gt;
        ///       },
        ///       startTime: string (ISO 8601 Format),
        ///       queuedTime: string (ISO 8601 Format),
        ///       pipelineStartTime: string (ISO 8601 Format),
        ///       endTime: string (ISO 8601 Format),
        ///       scanRulesetVersion: number,
        ///       scanRulesetType: &quot;Custom&quot; | &quot;System&quot;,
        ///       scanLevelType: &quot;Full&quot; | &quot;Incremental&quot;,
        ///       errorMessage: string,
        ///       error: {
        ///         code: string,
        ///         message: string,
        ///         target: string,
        ///         details: [
        ///           {
        ///             code: string,
        ///             message: string,
        ///             target: string,
        ///             details: [ErrorModel]
        ///           }
        ///         ]
        ///       },
        ///       runType: string,
        ///       dataSourceType: &quot;None&quot; | &quot;AzureSubscription&quot; | &quot;AzureResourceGroup&quot; | &quot;AzureSynapseWorkspace&quot; | &quot;AzureSynapse&quot; | &quot;AdlsGen1&quot; | &quot;AdlsGen2&quot; | &quot;AmazonAccount&quot; | &quot;AmazonS3&quot; | &quot;AmazonSql&quot; | &quot;AzureCosmosDb&quot; | &quot;AzureDataExplorer&quot; | &quot;AzureFileService&quot; | &quot;AzureSqlDatabase&quot; | &quot;AmazonPostgreSql&quot; | &quot;AzurePostgreSql&quot; | &quot;SqlServerDatabase&quot; | &quot;AzureSqlDatabaseManagedInstance&quot; | &quot;AzureSqlDataWarehouse&quot; | &quot;AzureMySql&quot; | &quot;AzureStorage&quot; | &quot;Teradata&quot; | &quot;Oracle&quot; | &quot;SapS4Hana&quot; | &quot;SapEcc&quot; | &quot;PowerBI&quot;
        ///     }
        ///   ],
        ///   nextLink: string,
        ///   count: number
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         message: string,
        ///         target: string,
        ///         details: [ErrorModel]
        ///       }
        ///     ]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Pageable<BinaryData> GetRuns(RequestContext context = null)
        {
            return GetRunsImplementation("PurviewScanClient.GetRuns", context);
        }

        private Pageable<BinaryData> GetRunsImplementation(string diagnosticsScopeName, RequestContext context)
        {
            return PageableHelpers.CreatePageable(CreateEnumerable, ClientDiagnostics, diagnosticsScopeName);
            IEnumerable<Page<BinaryData>> CreateEnumerable(string nextLink, int? pageSizeHint)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetRunsRequest(context)
                        : CreateGetRunsNextPageRequest(nextLink, context);
                    var page = LowLevelPageableHelpers.ProcessMessage(_pipeline, message, context, "value", "nextLink");
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        internal HttpMessage CreateGetFilterRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/datasources/", false);
            uri.AppendPath(_dataSourceName, true);
            uri.AppendPath("/scans/", false);
            uri.AppendPath(_scanName, true);
            uri.AppendPath("/filters/custom", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateCreateOrUpdateFilterRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200201);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/datasources/", false);
            uri.AppendPath(_dataSourceName, true);
            uri.AppendPath("/scans/", false);
            uri.AppendPath(_scanName, true);
            uri.AppendPath("/filters/custom", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateCreateOrUpdateRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200201);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/datasources/", false);
            uri.AppendPath(_dataSourceName, true);
            uri.AppendPath("/scans/", false);
            uri.AppendPath(_scanName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetPropertiesRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/datasources/", false);
            uri.AppendPath(_dataSourceName, true);
            uri.AppendPath("/scans/", false);
            uri.AppendPath(_scanName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateDeleteRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200204);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/datasources/", false);
            uri.AppendPath(_dataSourceName, true);
            uri.AppendPath("/scans/", false);
            uri.AppendPath(_scanName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateRunScanRequest(string runId, string scanLevel, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier202);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/datasources/", false);
            uri.AppendPath(_dataSourceName, true);
            uri.AppendPath("/scans/", false);
            uri.AppendPath(_scanName, true);
            uri.AppendPath("/runs/", false);
            uri.AppendPath(runId, true);
            if (scanLevel != null)
            {
                uri.AppendQuery("scanLevel", scanLevel, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateCancelScanRequest(string runId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier202);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/datasources/", false);
            uri.AppendPath(_dataSourceName, true);
            uri.AppendPath("/scans/", false);
            uri.AppendPath(_scanName, true);
            uri.AppendPath("/runs/", false);
            uri.AppendPath(runId, true);
            uri.AppendPath("/:cancel", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetRunsRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/datasources/", false);
            uri.AppendPath(_dataSourceName, true);
            uri.AppendPath("/scans/", false);
            uri.AppendPath(_scanName, true);
            uri.AppendPath("/runs", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetTriggerRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/datasources/", false);
            uri.AppendPath(_dataSourceName, true);
            uri.AppendPath("/scans/", false);
            uri.AppendPath(_scanName, true);
            uri.AppendPath("/triggers/default", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateCreateOrUpdateTriggerRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200201);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/datasources/", false);
            uri.AppendPath(_dataSourceName, true);
            uri.AppendPath("/scans/", false);
            uri.AppendPath(_scanName, true);
            uri.AppendPath("/triggers/default", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeleteTriggerRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200204);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/datasources/", false);
            uri.AppendPath(_dataSourceName, true);
            uri.AppendPath("/scans/", false);
            uri.AppendPath(_scanName, true);
            uri.AppendPath("/triggers/default", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetRunsNextPageRequest(string nextLink, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier200201;
        private static ResponseClassifier ResponseClassifier200201 => _responseClassifier200201 ??= new StatusCodeClassifier(stackalloc ushort[] { 200, 201 });
        private static ResponseClassifier _responseClassifier200204;
        private static ResponseClassifier ResponseClassifier200204 => _responseClassifier200204 ??= new StatusCodeClassifier(stackalloc ushort[] { 200, 204 });
        private static ResponseClassifier _responseClassifier202;
        private static ResponseClassifier ResponseClassifier202 => _responseClassifier202 ??= new StatusCodeClassifier(stackalloc ushort[] { 202 });
    }
}
