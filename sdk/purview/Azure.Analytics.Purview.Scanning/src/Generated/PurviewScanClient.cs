// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

#pragma warning disable AZC0007

namespace Azure.Analytics.Purview.Scanning
{
    /// <summary> The PurviewScan service client. </summary>
    public partial class PurviewScanClient
    {
        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline { get; }
        private readonly string[] AuthorizationScopes = { "https://purview.azure.net/.default" };
        private Uri endpoint;
        private string dataSourceName;
        private string scanName;
        private readonly string apiVersion;

        /// <summary> Initializes a new instance of PurviewScanClient for mocking. </summary>
        protected PurviewScanClient()
        {
        }

        /// <summary> Initializes a new instance of PurviewScanClient. </summary>
        /// <param name="endpoint"> The scanning endpoint of your purview account. Example: https://{accountName}.scan.purview.azure.com. </param>
        /// <param name="dataSourceName"> The String to use. </param>
        /// <param name="scanName"> The String to use. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public PurviewScanClient(Uri endpoint, string dataSourceName, string scanName, TokenCredential credential, PurviewScanningServiceClientOptions options = null)
        {
            if (endpoint == null)
            {
                throw new ArgumentNullException(nameof(endpoint));
            }
            if (dataSourceName == null)
            {
                throw new ArgumentNullException(nameof(dataSourceName));
            }
            if (scanName == null)
            {
                throw new ArgumentNullException(nameof(scanName));
            }
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }

            options ??= new PurviewScanningServiceClientOptions();
            Pipeline = HttpPipelineBuilder.Build(options, new BearerTokenAuthenticationPolicy(credential, AuthorizationScopes));
            this.endpoint = endpoint;
            this.dataSourceName = dataSourceName;
            this.scanName = scanName;
            apiVersion = options.Version;
        }

        /// <summary> Get a filter. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetFilterAsync(CancellationToken cancellationToken = default)
        {
            Request req = CreateGetFilterRequest();
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get a filter. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetFilter(CancellationToken cancellationToken = default)
        {
            Request req = CreateGetFilterRequest();
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="GetFilter"/> and <see cref="GetFilterAsync"/> operations. </summary>
        private Request CreateGetFilterRequest()
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/datasources/", false);
            uri.AppendPath(dataSourceName, true);
            uri.AppendPath("/scans/", false);
            uri.AppendPath(scanName, true);
            uri.AppendPath("/filters/custom", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return request;
        }

        /// <summary> Creates or updates a filter. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> CreateOrUpdateFilterAsync(RequestContent requestBody, CancellationToken cancellationToken = default)
        {
            Request req = CreateCreateOrUpdateFilterRequest(requestBody);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Creates or updates a filter. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response CreateOrUpdateFilter(RequestContent requestBody, CancellationToken cancellationToken = default)
        {
            Request req = CreateCreateOrUpdateFilterRequest(requestBody);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="CreateOrUpdateFilter"/> and <see cref="CreateOrUpdateFilterAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        private Request CreateCreateOrUpdateFilterRequest(RequestContent requestBody)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/datasources/", false);
            uri.AppendPath(dataSourceName, true);
            uri.AppendPath("/scans/", false);
            uri.AppendPath(scanName, true);
            uri.AppendPath("/filters/custom", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = requestBody;
            return request;
        }

        /// <summary> Creates an instance of a scan. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> CreateOrUpdateAsync(RequestContent requestBody, CancellationToken cancellationToken = default)
        {
            Request req = CreateCreateOrUpdateRequest(requestBody);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Creates an instance of a scan. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response CreateOrUpdate(RequestContent requestBody, CancellationToken cancellationToken = default)
        {
            Request req = CreateCreateOrUpdateRequest(requestBody);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="CreateOrUpdate"/> and <see cref="CreateOrUpdateAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        private Request CreateCreateOrUpdateRequest(RequestContent requestBody)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/datasources/", false);
            uri.AppendPath(dataSourceName, true);
            uri.AppendPath("/scans/", false);
            uri.AppendPath(scanName, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = requestBody;
            return request;
        }

        /// <summary> Gets a scan information. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetPropertiesAsync(CancellationToken cancellationToken = default)
        {
            Request req = CreateGetPropertiesRequest();
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Gets a scan information. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetProperties(CancellationToken cancellationToken = default)
        {
            Request req = CreateGetPropertiesRequest();
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="GetProperties"/> and <see cref="GetPropertiesAsync"/> operations. </summary>
        private Request CreateGetPropertiesRequest()
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/datasources/", false);
            uri.AppendPath(dataSourceName, true);
            uri.AppendPath("/scans/", false);
            uri.AppendPath(scanName, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return request;
        }

        /// <summary> Deletes the scan associated with the data source. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteAsync(CancellationToken cancellationToken = default)
        {
            Request req = CreateDeleteRequest();
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Deletes the scan associated with the data source. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response Delete(CancellationToken cancellationToken = default)
        {
            Request req = CreateDeleteRequest();
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="Delete"/> and <see cref="DeleteAsync"/> operations. </summary>
        private Request CreateDeleteRequest()
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/datasources/", false);
            uri.AppendPath(dataSourceName, true);
            uri.AppendPath("/scans/", false);
            uri.AppendPath(scanName, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return request;
        }

        /// <summary> Runs the scan. </summary>
        /// <param name="runId"> The String to use. </param>
        /// <param name="scanLevel"> The ScanLevelType to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> RunScanAsync(string runId, string scanLevel = null, CancellationToken cancellationToken = default)
        {
            Request req = CreateRunScanRequest(runId, scanLevel);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Runs the scan. </summary>
        /// <param name="runId"> The String to use. </param>
        /// <param name="scanLevel"> The ScanLevelType to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response RunScan(string runId, string scanLevel = null, CancellationToken cancellationToken = default)
        {
            Request req = CreateRunScanRequest(runId, scanLevel);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="RunScan"/> and <see cref="RunScanAsync"/> operations. </summary>
        /// <param name="runId"> The String to use. </param>
        /// <param name="scanLevel"> The ScanLevelType to use. </param>
        private Request CreateRunScanRequest(string runId, string scanLevel = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/datasources/", false);
            uri.AppendPath(dataSourceName, true);
            uri.AppendPath("/scans/", false);
            uri.AppendPath(scanName, true);
            uri.AppendPath("/runs/", false);
            uri.AppendPath(runId, true);
            if (scanLevel != null)
            {
                uri.AppendQuery("scanLevel", scanLevel, true);
            }
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return request;
        }

        /// <summary> Cancels a scan. </summary>
        /// <param name="runId"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> CancelScanAsync(string runId, CancellationToken cancellationToken = default)
        {
            Request req = CreateCancelScanRequest(runId);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Cancels a scan. </summary>
        /// <param name="runId"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response CancelScan(string runId, CancellationToken cancellationToken = default)
        {
            Request req = CreateCancelScanRequest(runId);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="CancelScan"/> and <see cref="CancelScanAsync"/> operations. </summary>
        /// <param name="runId"> The String to use. </param>
        private Request CreateCancelScanRequest(string runId)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/datasources/", false);
            uri.AppendPath(dataSourceName, true);
            uri.AppendPath("/scans/", false);
            uri.AppendPath(scanName, true);
            uri.AppendPath("/runs/", false);
            uri.AppendPath(runId, true);
            uri.AppendPath("/:cancel", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return request;
        }

        /// <summary> Lists the scan history of a scan. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetRunsAsync(CancellationToken cancellationToken = default)
        {
            Request req = CreateGetRunsRequest();
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Lists the scan history of a scan. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetRuns(CancellationToken cancellationToken = default)
        {
            Request req = CreateGetRunsRequest();
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="GetRuns"/> and <see cref="GetRunsAsync"/> operations. </summary>
        private Request CreateGetRunsRequest()
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/datasources/", false);
            uri.AppendPath(dataSourceName, true);
            uri.AppendPath("/scans/", false);
            uri.AppendPath(scanName, true);
            uri.AppendPath("/runs", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return request;
        }

        /// <summary> Gets trigger information. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetTriggerAsync(CancellationToken cancellationToken = default)
        {
            Request req = CreateGetTriggerRequest();
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Gets trigger information. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetTrigger(CancellationToken cancellationToken = default)
        {
            Request req = CreateGetTriggerRequest();
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="GetTrigger"/> and <see cref="GetTriggerAsync"/> operations. </summary>
        private Request CreateGetTriggerRequest()
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/datasources/", false);
            uri.AppendPath(dataSourceName, true);
            uri.AppendPath("/scans/", false);
            uri.AppendPath(scanName, true);
            uri.AppendPath("/triggers/default", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return request;
        }

        /// <summary> Creates an instance of a trigger. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> CreateOrUpdateTriggerAsync(RequestContent requestBody, CancellationToken cancellationToken = default)
        {
            Request req = CreateCreateOrUpdateTriggerRequest(requestBody);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Creates an instance of a trigger. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response CreateOrUpdateTrigger(RequestContent requestBody, CancellationToken cancellationToken = default)
        {
            Request req = CreateCreateOrUpdateTriggerRequest(requestBody);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="CreateOrUpdateTrigger"/> and <see cref="CreateOrUpdateTriggerAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        private Request CreateCreateOrUpdateTriggerRequest(RequestContent requestBody)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/datasources/", false);
            uri.AppendPath(dataSourceName, true);
            uri.AppendPath("/scans/", false);
            uri.AppendPath(scanName, true);
            uri.AppendPath("/triggers/default", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = requestBody;
            return request;
        }

        /// <summary> Deletes the trigger associated with the scan. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteTriggerAsync(CancellationToken cancellationToken = default)
        {
            Request req = CreateDeleteTriggerRequest();
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Deletes the trigger associated with the scan. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeleteTrigger(CancellationToken cancellationToken = default)
        {
            Request req = CreateDeleteTriggerRequest();
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="DeleteTrigger"/> and <see cref="DeleteTriggerAsync"/> operations. </summary>
        private Request CreateDeleteTriggerRequest()
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/datasources/", false);
            uri.AppendPath(dataSourceName, true);
            uri.AppendPath("/scans/", false);
            uri.AppendPath(scanName, true);
            uri.AppendPath("/triggers/default", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return request;
        }
    }
}
