// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Analytics.Purview.Scanning
{
    /// <summary> The PurviewScan service client. </summary>
    public partial class PurviewScanClient
    {
        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline { get => _pipeline; }
        private HttpPipeline _pipeline;
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly PurviewScanRestClient _restClient;
        private readonly string[] AuthorizationScopes = { "https://purview.azure.net/.default" };
        private readonly TokenCredential _tokenCredential;

        /// <summary> Initializes a new instance of PurviewScanClient for mocking. </summary>
        protected PurviewScanClient()
        {
        }

        /// <summary> Initializes a new instance of PurviewScanClient. </summary>
        /// <param name="endpoint"> The scanning endpoint of your purview account. Example: https://{accountName}.scan.purview.azure.com. </param>
        /// <param name="dataSourceName"> The String to use. </param>
        /// <param name="scanName"> The String to use. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public PurviewScanClient(Uri endpoint, string dataSourceName, string scanName, TokenCredential credential, PurviewScanningServiceClientOptions options = null)
        {
            if (endpoint == null)
            {
                throw new ArgumentNullException(nameof(endpoint));
            }
            if (dataSourceName == null)
            {
                throw new ArgumentNullException(nameof(dataSourceName));
            }
            if (scanName == null)
            {
                throw new ArgumentNullException(nameof(scanName));
            }
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }

            options ??= new PurviewScanningServiceClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            _tokenCredential = credential;
            var authPolicy = new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes);
            _pipeline = HttpPipelineBuilder.Build(options, new HttpPipelinePolicy[] { new LowLevelCallbackPolicy() }, new HttpPipelinePolicy[] { authPolicy }, new ResponseClassifier());
            _restClient = new PurviewScanRestClient(_clientDiagnostics, _pipeline, endpoint, dataSourceName, scanName, options.Version);
        }

        /// <summary> Get a filter. </summary>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   id: string,
        ///   name: string,
        ///   properties: {
        ///     excludeUriPrefixes: [string],
        ///     includeUriPrefixes: [string]
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         message: string,
        ///         target: string,
        ///         details: [ErrorModel]
        ///       }
        ///     ]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual async Task<Response> GetFilterAsync(RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewScanClient.GetFilter");
            scope.Start();
            try
            {
                return await _restClient.GetFilterAsync(options).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a filter. </summary>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   id: string,
        ///   name: string,
        ///   properties: {
        ///     excludeUriPrefixes: [string],
        ///     includeUriPrefixes: [string]
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         message: string,
        ///         target: string,
        ///         details: [ErrorModel]
        ///       }
        ///     ]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Response GetFilter(RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewScanClient.GetFilter");
            scope.Start();
            try
            {
                return _restClient.GetFilter(options);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates or updates a filter. </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   id: string,
        ///   name: string,
        ///   properties: {
        ///     excludeUriPrefixes: [string],
        ///     includeUriPrefixes: [string]
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   id: string,
        ///   name: string,
        ///   properties: {
        ///     excludeUriPrefixes: [string],
        ///     includeUriPrefixes: [string]
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         message: string,
        ///         target: string,
        ///         details: [ErrorModel]
        ///       }
        ///     ]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual async Task<Response> CreateOrUpdateFilterAsync(RequestContent content, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewScanClient.CreateOrUpdateFilter");
            scope.Start();
            try
            {
                return await _restClient.CreateOrUpdateFilterAsync(content, options).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates or updates a filter. </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   id: string,
        ///   name: string,
        ///   properties: {
        ///     excludeUriPrefixes: [string],
        ///     includeUriPrefixes: [string]
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   id: string,
        ///   name: string,
        ///   properties: {
        ///     excludeUriPrefixes: [string],
        ///     includeUriPrefixes: [string]
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         message: string,
        ///         target: string,
        ///         details: [ErrorModel]
        ///       }
        ///     ]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Response CreateOrUpdateFilter(RequestContent content, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewScanClient.CreateOrUpdateFilter");
            scope.Start();
            try
            {
                return _restClient.CreateOrUpdateFilter(content, options);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates an instance of a scan. </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   id: string,
        ///   name: string,
        ///   kind: &quot;AzureSubscriptionCredential&quot; | &quot;AzureSubscriptionMsi&quot; | &quot;AzureResourceGroupCredential&quot; | &quot;AzureResourceGroupMsi&quot; | &quot;AzureSynapseWorkspaceCredential&quot; | &quot;AzureSynapseWorkspaceMsi&quot; | &quot;AzureSynapseCredential&quot; | &quot;AzureSynapseMsi&quot; | &quot;AdlsGen1Credential&quot; | &quot;AdlsGen1Msi&quot; | &quot;AdlsGen2Credential&quot; | &quot;AdlsGen2Msi&quot; | &quot;AmazonAccountCredential&quot; | &quot;AmazonS3Credential&quot; | &quot;AmazonS3RoleARN&quot; | &quot;AmazonSqlCredential&quot; | &quot;AzureCosmosDbCredential&quot; | &quot;AzureDataExplorerCredential&quot; | &quot;AzureDataExplorerMsi&quot; | &quot;AzureFileServiceCredential&quot; | &quot;AzureSqlDatabaseCredential&quot; | &quot;AzureSqlDatabaseMsi&quot; | &quot;AmazonPostgreSqlCredential&quot; | &quot;AzurePostgreSqlCredential&quot; | &quot;SqlServerDatabaseCredential&quot; | &quot;AzureSqlDatabaseManagedInstanceCredential&quot; | &quot;AzureSqlDatabaseManagedInstanceMsi&quot; | &quot;AzureSqlDataWarehouseCredential&quot; | &quot;AzureSqlDataWarehouseMsi&quot; | &quot;AzureMySqlCredential&quot; | &quot;AzureStorageCredential&quot; | &quot;AzureStorageMsi&quot; | &quot;TeradataTeradataCredential&quot; | &quot;TeradataTeradataUserPass&quot; | &quot;TeradataUserPass&quot; | &quot;OracleOracleCredential&quot; | &quot;OracleOracleUserPass&quot; | &quot;SapS4HanaSapS4HanaCredential&quot; | &quot;SapS4HanaSapS4HanaUserPass&quot; | &quot;SapEccSapEccCredential&quot; | &quot;SapEccSapEccUserPass&quot; | &quot;PowerBIDelegated&quot; | &quot;PowerBIMsi&quot; (required),
        ///   scanResults: [
        ///     {
        ///       parentId: string,
        ///       id: string,
        ///       resourceId: string,
        ///       status: string,
        ///       assetsDiscovered: number,
        ///       assetsClassified: number,
        ///       diagnostics: {
        ///         notifications: [
        ///           {
        ///             message: string,
        ///             code: number
        ///           }
        ///         ],
        ///         exceptionCountMap: Dictionary&lt;string, number&gt;
        ///       },
        ///       startTime: string (ISO 8601 Format),
        ///       queuedTime: string (ISO 8601 Format),
        ///       pipelineStartTime: string (ISO 8601 Format),
        ///       endTime: string (ISO 8601 Format),
        ///       scanRulesetVersion: number,
        ///       scanRulesetType: &quot;Custom&quot; | &quot;System&quot;,
        ///       scanLevelType: &quot;Full&quot; | &quot;Incremental&quot;,
        ///       errorMessage: string,
        ///       error: {
        ///         code: string,
        ///         message: string,
        ///         target: string,
        ///         details: [
        ///           {
        ///             code: string,
        ///             message: string,
        ///             target: string,
        ///             details: [ErrorModel]
        ///           }
        ///         ]
        ///       },
        ///       runType: string,
        ///       dataSourceType: &quot;None&quot; | &quot;Collection&quot; | &quot;AzureSubscription&quot; | &quot;AzureResourceGroup&quot; | &quot;AzureSynapseWorkspace&quot; | &quot;AzureSynapse&quot; | &quot;AdlsGen1&quot; | &quot;AdlsGen2&quot; | &quot;AmazonAccount&quot; | &quot;AmazonS3&quot; | &quot;AmazonSql&quot; | &quot;AzureCosmosDb&quot; | &quot;AzureDataExplorer&quot; | &quot;AzureFileService&quot; | &quot;AzureSqlDatabase&quot; | &quot;AmazonPostgreSql&quot; | &quot;AzurePostgreSql&quot; | &quot;SqlServerDatabase&quot; | &quot;AzureSqlDatabaseManagedInstance&quot; | &quot;AzureSqlDataWarehouse&quot; | &quot;AzureMySql&quot; | &quot;AzureStorage&quot; | &quot;Teradata&quot; | &quot;Oracle&quot; | &quot;SapS4Hana&quot; | &quot;SapEcc&quot; | &quot;PowerBI&quot;
        ///     }
        ///   ]
        /// }
        /// </code>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   id: string,
        ///   name: string,
        ///   kind: &quot;AzureSubscriptionCredential&quot; | &quot;AzureSubscriptionMsi&quot; | &quot;AzureResourceGroupCredential&quot; | &quot;AzureResourceGroupMsi&quot; | &quot;AzureSynapseWorkspaceCredential&quot; | &quot;AzureSynapseWorkspaceMsi&quot; | &quot;AzureSynapseCredential&quot; | &quot;AzureSynapseMsi&quot; | &quot;AdlsGen1Credential&quot; | &quot;AdlsGen1Msi&quot; | &quot;AdlsGen2Credential&quot; | &quot;AdlsGen2Msi&quot; | &quot;AmazonAccountCredential&quot; | &quot;AmazonS3Credential&quot; | &quot;AmazonS3RoleARN&quot; | &quot;AmazonSqlCredential&quot; | &quot;AzureCosmosDbCredential&quot; | &quot;AzureDataExplorerCredential&quot; | &quot;AzureDataExplorerMsi&quot; | &quot;AzureFileServiceCredential&quot; | &quot;AzureSqlDatabaseCredential&quot; | &quot;AzureSqlDatabaseMsi&quot; | &quot;AmazonPostgreSqlCredential&quot; | &quot;AzurePostgreSqlCredential&quot; | &quot;SqlServerDatabaseCredential&quot; | &quot;AzureSqlDatabaseManagedInstanceCredential&quot; | &quot;AzureSqlDatabaseManagedInstanceMsi&quot; | &quot;AzureSqlDataWarehouseCredential&quot; | &quot;AzureSqlDataWarehouseMsi&quot; | &quot;AzureMySqlCredential&quot; | &quot;AzureStorageCredential&quot; | &quot;AzureStorageMsi&quot; | &quot;TeradataTeradataCredential&quot; | &quot;TeradataTeradataUserPass&quot; | &quot;TeradataUserPass&quot; | &quot;OracleOracleCredential&quot; | &quot;OracleOracleUserPass&quot; | &quot;SapS4HanaSapS4HanaCredential&quot; | &quot;SapS4HanaSapS4HanaUserPass&quot; | &quot;SapEccSapEccCredential&quot; | &quot;SapEccSapEccUserPass&quot; | &quot;PowerBIDelegated&quot; | &quot;PowerBIMsi&quot;,
        ///   scanResults: [
        ///     {
        ///       parentId: string,
        ///       id: string,
        ///       resourceId: string,
        ///       status: string,
        ///       assetsDiscovered: number,
        ///       assetsClassified: number,
        ///       diagnostics: {
        ///         notifications: [
        ///           {
        ///             message: string,
        ///             code: number
        ///           }
        ///         ],
        ///         exceptionCountMap: Dictionary&lt;string, number&gt;
        ///       },
        ///       startTime: string (ISO 8601 Format),
        ///       queuedTime: string (ISO 8601 Format),
        ///       pipelineStartTime: string (ISO 8601 Format),
        ///       endTime: string (ISO 8601 Format),
        ///       scanRulesetVersion: number,
        ///       scanRulesetType: &quot;Custom&quot; | &quot;System&quot;,
        ///       scanLevelType: &quot;Full&quot; | &quot;Incremental&quot;,
        ///       errorMessage: string,
        ///       error: {
        ///         code: string,
        ///         message: string,
        ///         target: string,
        ///         details: [
        ///           {
        ///             code: string,
        ///             message: string,
        ///             target: string,
        ///             details: [ErrorModel]
        ///           }
        ///         ]
        ///       },
        ///       runType: string,
        ///       dataSourceType: &quot;None&quot; | &quot;Collection&quot; | &quot;AzureSubscription&quot; | &quot;AzureResourceGroup&quot; | &quot;AzureSynapseWorkspace&quot; | &quot;AzureSynapse&quot; | &quot;AdlsGen1&quot; | &quot;AdlsGen2&quot; | &quot;AmazonAccount&quot; | &quot;AmazonS3&quot; | &quot;AmazonSql&quot; | &quot;AzureCosmosDb&quot; | &quot;AzureDataExplorer&quot; | &quot;AzureFileService&quot; | &quot;AzureSqlDatabase&quot; | &quot;AmazonPostgreSql&quot; | &quot;AzurePostgreSql&quot; | &quot;SqlServerDatabase&quot; | &quot;AzureSqlDatabaseManagedInstance&quot; | &quot;AzureSqlDataWarehouse&quot; | &quot;AzureMySql&quot; | &quot;AzureStorage&quot; | &quot;Teradata&quot; | &quot;Oracle&quot; | &quot;SapS4Hana&quot; | &quot;SapEcc&quot; | &quot;PowerBI&quot;
        ///     }
        ///   ]
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         message: string,
        ///         target: string,
        ///         details: [ErrorModel]
        ///       }
        ///     ]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual async Task<Response> CreateOrUpdateAsync(RequestContent content, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewScanClient.CreateOrUpdate");
            scope.Start();
            try
            {
                return await _restClient.CreateOrUpdateAsync(content, options).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates an instance of a scan. </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   id: string,
        ///   name: string,
        ///   kind: &quot;AzureSubscriptionCredential&quot; | &quot;AzureSubscriptionMsi&quot; | &quot;AzureResourceGroupCredential&quot; | &quot;AzureResourceGroupMsi&quot; | &quot;AzureSynapseWorkspaceCredential&quot; | &quot;AzureSynapseWorkspaceMsi&quot; | &quot;AzureSynapseCredential&quot; | &quot;AzureSynapseMsi&quot; | &quot;AdlsGen1Credential&quot; | &quot;AdlsGen1Msi&quot; | &quot;AdlsGen2Credential&quot; | &quot;AdlsGen2Msi&quot; | &quot;AmazonAccountCredential&quot; | &quot;AmazonS3Credential&quot; | &quot;AmazonS3RoleARN&quot; | &quot;AmazonSqlCredential&quot; | &quot;AzureCosmosDbCredential&quot; | &quot;AzureDataExplorerCredential&quot; | &quot;AzureDataExplorerMsi&quot; | &quot;AzureFileServiceCredential&quot; | &quot;AzureSqlDatabaseCredential&quot; | &quot;AzureSqlDatabaseMsi&quot; | &quot;AmazonPostgreSqlCredential&quot; | &quot;AzurePostgreSqlCredential&quot; | &quot;SqlServerDatabaseCredential&quot; | &quot;AzureSqlDatabaseManagedInstanceCredential&quot; | &quot;AzureSqlDatabaseManagedInstanceMsi&quot; | &quot;AzureSqlDataWarehouseCredential&quot; | &quot;AzureSqlDataWarehouseMsi&quot; | &quot;AzureMySqlCredential&quot; | &quot;AzureStorageCredential&quot; | &quot;AzureStorageMsi&quot; | &quot;TeradataTeradataCredential&quot; | &quot;TeradataTeradataUserPass&quot; | &quot;TeradataUserPass&quot; | &quot;OracleOracleCredential&quot; | &quot;OracleOracleUserPass&quot; | &quot;SapS4HanaSapS4HanaCredential&quot; | &quot;SapS4HanaSapS4HanaUserPass&quot; | &quot;SapEccSapEccCredential&quot; | &quot;SapEccSapEccUserPass&quot; | &quot;PowerBIDelegated&quot; | &quot;PowerBIMsi&quot; (required),
        ///   scanResults: [
        ///     {
        ///       parentId: string,
        ///       id: string,
        ///       resourceId: string,
        ///       status: string,
        ///       assetsDiscovered: number,
        ///       assetsClassified: number,
        ///       diagnostics: {
        ///         notifications: [
        ///           {
        ///             message: string,
        ///             code: number
        ///           }
        ///         ],
        ///         exceptionCountMap: Dictionary&lt;string, number&gt;
        ///       },
        ///       startTime: string (ISO 8601 Format),
        ///       queuedTime: string (ISO 8601 Format),
        ///       pipelineStartTime: string (ISO 8601 Format),
        ///       endTime: string (ISO 8601 Format),
        ///       scanRulesetVersion: number,
        ///       scanRulesetType: &quot;Custom&quot; | &quot;System&quot;,
        ///       scanLevelType: &quot;Full&quot; | &quot;Incremental&quot;,
        ///       errorMessage: string,
        ///       error: {
        ///         code: string,
        ///         message: string,
        ///         target: string,
        ///         details: [
        ///           {
        ///             code: string,
        ///             message: string,
        ///             target: string,
        ///             details: [ErrorModel]
        ///           }
        ///         ]
        ///       },
        ///       runType: string,
        ///       dataSourceType: &quot;None&quot; | &quot;Collection&quot; | &quot;AzureSubscription&quot; | &quot;AzureResourceGroup&quot; | &quot;AzureSynapseWorkspace&quot; | &quot;AzureSynapse&quot; | &quot;AdlsGen1&quot; | &quot;AdlsGen2&quot; | &quot;AmazonAccount&quot; | &quot;AmazonS3&quot; | &quot;AmazonSql&quot; | &quot;AzureCosmosDb&quot; | &quot;AzureDataExplorer&quot; | &quot;AzureFileService&quot; | &quot;AzureSqlDatabase&quot; | &quot;AmazonPostgreSql&quot; | &quot;AzurePostgreSql&quot; | &quot;SqlServerDatabase&quot; | &quot;AzureSqlDatabaseManagedInstance&quot; | &quot;AzureSqlDataWarehouse&quot; | &quot;AzureMySql&quot; | &quot;AzureStorage&quot; | &quot;Teradata&quot; | &quot;Oracle&quot; | &quot;SapS4Hana&quot; | &quot;SapEcc&quot; | &quot;PowerBI&quot;
        ///     }
        ///   ]
        /// }
        /// </code>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   id: string,
        ///   name: string,
        ///   kind: &quot;AzureSubscriptionCredential&quot; | &quot;AzureSubscriptionMsi&quot; | &quot;AzureResourceGroupCredential&quot; | &quot;AzureResourceGroupMsi&quot; | &quot;AzureSynapseWorkspaceCredential&quot; | &quot;AzureSynapseWorkspaceMsi&quot; | &quot;AzureSynapseCredential&quot; | &quot;AzureSynapseMsi&quot; | &quot;AdlsGen1Credential&quot; | &quot;AdlsGen1Msi&quot; | &quot;AdlsGen2Credential&quot; | &quot;AdlsGen2Msi&quot; | &quot;AmazonAccountCredential&quot; | &quot;AmazonS3Credential&quot; | &quot;AmazonS3RoleARN&quot; | &quot;AmazonSqlCredential&quot; | &quot;AzureCosmosDbCredential&quot; | &quot;AzureDataExplorerCredential&quot; | &quot;AzureDataExplorerMsi&quot; | &quot;AzureFileServiceCredential&quot; | &quot;AzureSqlDatabaseCredential&quot; | &quot;AzureSqlDatabaseMsi&quot; | &quot;AmazonPostgreSqlCredential&quot; | &quot;AzurePostgreSqlCredential&quot; | &quot;SqlServerDatabaseCredential&quot; | &quot;AzureSqlDatabaseManagedInstanceCredential&quot; | &quot;AzureSqlDatabaseManagedInstanceMsi&quot; | &quot;AzureSqlDataWarehouseCredential&quot; | &quot;AzureSqlDataWarehouseMsi&quot; | &quot;AzureMySqlCredential&quot; | &quot;AzureStorageCredential&quot; | &quot;AzureStorageMsi&quot; | &quot;TeradataTeradataCredential&quot; | &quot;TeradataTeradataUserPass&quot; | &quot;TeradataUserPass&quot; | &quot;OracleOracleCredential&quot; | &quot;OracleOracleUserPass&quot; | &quot;SapS4HanaSapS4HanaCredential&quot; | &quot;SapS4HanaSapS4HanaUserPass&quot; | &quot;SapEccSapEccCredential&quot; | &quot;SapEccSapEccUserPass&quot; | &quot;PowerBIDelegated&quot; | &quot;PowerBIMsi&quot;,
        ///   scanResults: [
        ///     {
        ///       parentId: string,
        ///       id: string,
        ///       resourceId: string,
        ///       status: string,
        ///       assetsDiscovered: number,
        ///       assetsClassified: number,
        ///       diagnostics: {
        ///         notifications: [
        ///           {
        ///             message: string,
        ///             code: number
        ///           }
        ///         ],
        ///         exceptionCountMap: Dictionary&lt;string, number&gt;
        ///       },
        ///       startTime: string (ISO 8601 Format),
        ///       queuedTime: string (ISO 8601 Format),
        ///       pipelineStartTime: string (ISO 8601 Format),
        ///       endTime: string (ISO 8601 Format),
        ///       scanRulesetVersion: number,
        ///       scanRulesetType: &quot;Custom&quot; | &quot;System&quot;,
        ///       scanLevelType: &quot;Full&quot; | &quot;Incremental&quot;,
        ///       errorMessage: string,
        ///       error: {
        ///         code: string,
        ///         message: string,
        ///         target: string,
        ///         details: [
        ///           {
        ///             code: string,
        ///             message: string,
        ///             target: string,
        ///             details: [ErrorModel]
        ///           }
        ///         ]
        ///       },
        ///       runType: string,
        ///       dataSourceType: &quot;None&quot; | &quot;Collection&quot; | &quot;AzureSubscription&quot; | &quot;AzureResourceGroup&quot; | &quot;AzureSynapseWorkspace&quot; | &quot;AzureSynapse&quot; | &quot;AdlsGen1&quot; | &quot;AdlsGen2&quot; | &quot;AmazonAccount&quot; | &quot;AmazonS3&quot; | &quot;AmazonSql&quot; | &quot;AzureCosmosDb&quot; | &quot;AzureDataExplorer&quot; | &quot;AzureFileService&quot; | &quot;AzureSqlDatabase&quot; | &quot;AmazonPostgreSql&quot; | &quot;AzurePostgreSql&quot; | &quot;SqlServerDatabase&quot; | &quot;AzureSqlDatabaseManagedInstance&quot; | &quot;AzureSqlDataWarehouse&quot; | &quot;AzureMySql&quot; | &quot;AzureStorage&quot; | &quot;Teradata&quot; | &quot;Oracle&quot; | &quot;SapS4Hana&quot; | &quot;SapEcc&quot; | &quot;PowerBI&quot;
        ///     }
        ///   ]
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         message: string,
        ///         target: string,
        ///         details: [ErrorModel]
        ///       }
        ///     ]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Response CreateOrUpdate(RequestContent content, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewScanClient.CreateOrUpdate");
            scope.Start();
            try
            {
                return _restClient.CreateOrUpdate(content, options);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a scan information. </summary>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   id: string,
        ///   name: string,
        ///   kind: &quot;AzureSubscriptionCredential&quot; | &quot;AzureSubscriptionMsi&quot; | &quot;AzureResourceGroupCredential&quot; | &quot;AzureResourceGroupMsi&quot; | &quot;AzureSynapseWorkspaceCredential&quot; | &quot;AzureSynapseWorkspaceMsi&quot; | &quot;AzureSynapseCredential&quot; | &quot;AzureSynapseMsi&quot; | &quot;AdlsGen1Credential&quot; | &quot;AdlsGen1Msi&quot; | &quot;AdlsGen2Credential&quot; | &quot;AdlsGen2Msi&quot; | &quot;AmazonAccountCredential&quot; | &quot;AmazonS3Credential&quot; | &quot;AmazonS3RoleARN&quot; | &quot;AmazonSqlCredential&quot; | &quot;AzureCosmosDbCredential&quot; | &quot;AzureDataExplorerCredential&quot; | &quot;AzureDataExplorerMsi&quot; | &quot;AzureFileServiceCredential&quot; | &quot;AzureSqlDatabaseCredential&quot; | &quot;AzureSqlDatabaseMsi&quot; | &quot;AmazonPostgreSqlCredential&quot; | &quot;AzurePostgreSqlCredential&quot; | &quot;SqlServerDatabaseCredential&quot; | &quot;AzureSqlDatabaseManagedInstanceCredential&quot; | &quot;AzureSqlDatabaseManagedInstanceMsi&quot; | &quot;AzureSqlDataWarehouseCredential&quot; | &quot;AzureSqlDataWarehouseMsi&quot; | &quot;AzureMySqlCredential&quot; | &quot;AzureStorageCredential&quot; | &quot;AzureStorageMsi&quot; | &quot;TeradataTeradataCredential&quot; | &quot;TeradataTeradataUserPass&quot; | &quot;TeradataUserPass&quot; | &quot;OracleOracleCredential&quot; | &quot;OracleOracleUserPass&quot; | &quot;SapS4HanaSapS4HanaCredential&quot; | &quot;SapS4HanaSapS4HanaUserPass&quot; | &quot;SapEccSapEccCredential&quot; | &quot;SapEccSapEccUserPass&quot; | &quot;PowerBIDelegated&quot; | &quot;PowerBIMsi&quot;,
        ///   scanResults: [
        ///     {
        ///       parentId: string,
        ///       id: string,
        ///       resourceId: string,
        ///       status: string,
        ///       assetsDiscovered: number,
        ///       assetsClassified: number,
        ///       diagnostics: {
        ///         notifications: [
        ///           {
        ///             message: string,
        ///             code: number
        ///           }
        ///         ],
        ///         exceptionCountMap: Dictionary&lt;string, number&gt;
        ///       },
        ///       startTime: string (ISO 8601 Format),
        ///       queuedTime: string (ISO 8601 Format),
        ///       pipelineStartTime: string (ISO 8601 Format),
        ///       endTime: string (ISO 8601 Format),
        ///       scanRulesetVersion: number,
        ///       scanRulesetType: &quot;Custom&quot; | &quot;System&quot;,
        ///       scanLevelType: &quot;Full&quot; | &quot;Incremental&quot;,
        ///       errorMessage: string,
        ///       error: {
        ///         code: string,
        ///         message: string,
        ///         target: string,
        ///         details: [
        ///           {
        ///             code: string,
        ///             message: string,
        ///             target: string,
        ///             details: [ErrorModel]
        ///           }
        ///         ]
        ///       },
        ///       runType: string,
        ///       dataSourceType: &quot;None&quot; | &quot;Collection&quot; | &quot;AzureSubscription&quot; | &quot;AzureResourceGroup&quot; | &quot;AzureSynapseWorkspace&quot; | &quot;AzureSynapse&quot; | &quot;AdlsGen1&quot; | &quot;AdlsGen2&quot; | &quot;AmazonAccount&quot; | &quot;AmazonS3&quot; | &quot;AmazonSql&quot; | &quot;AzureCosmosDb&quot; | &quot;AzureDataExplorer&quot; | &quot;AzureFileService&quot; | &quot;AzureSqlDatabase&quot; | &quot;AmazonPostgreSql&quot; | &quot;AzurePostgreSql&quot; | &quot;SqlServerDatabase&quot; | &quot;AzureSqlDatabaseManagedInstance&quot; | &quot;AzureSqlDataWarehouse&quot; | &quot;AzureMySql&quot; | &quot;AzureStorage&quot; | &quot;Teradata&quot; | &quot;Oracle&quot; | &quot;SapS4Hana&quot; | &quot;SapEcc&quot; | &quot;PowerBI&quot;
        ///     }
        ///   ]
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         message: string,
        ///         target: string,
        ///         details: [ErrorModel]
        ///       }
        ///     ]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual async Task<Response> GetPropertiesAsync(RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewScanClient.GetProperties");
            scope.Start();
            try
            {
                return await _restClient.GetPropertiesAsync(options).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a scan information. </summary>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   id: string,
        ///   name: string,
        ///   kind: &quot;AzureSubscriptionCredential&quot; | &quot;AzureSubscriptionMsi&quot; | &quot;AzureResourceGroupCredential&quot; | &quot;AzureResourceGroupMsi&quot; | &quot;AzureSynapseWorkspaceCredential&quot; | &quot;AzureSynapseWorkspaceMsi&quot; | &quot;AzureSynapseCredential&quot; | &quot;AzureSynapseMsi&quot; | &quot;AdlsGen1Credential&quot; | &quot;AdlsGen1Msi&quot; | &quot;AdlsGen2Credential&quot; | &quot;AdlsGen2Msi&quot; | &quot;AmazonAccountCredential&quot; | &quot;AmazonS3Credential&quot; | &quot;AmazonS3RoleARN&quot; | &quot;AmazonSqlCredential&quot; | &quot;AzureCosmosDbCredential&quot; | &quot;AzureDataExplorerCredential&quot; | &quot;AzureDataExplorerMsi&quot; | &quot;AzureFileServiceCredential&quot; | &quot;AzureSqlDatabaseCredential&quot; | &quot;AzureSqlDatabaseMsi&quot; | &quot;AmazonPostgreSqlCredential&quot; | &quot;AzurePostgreSqlCredential&quot; | &quot;SqlServerDatabaseCredential&quot; | &quot;AzureSqlDatabaseManagedInstanceCredential&quot; | &quot;AzureSqlDatabaseManagedInstanceMsi&quot; | &quot;AzureSqlDataWarehouseCredential&quot; | &quot;AzureSqlDataWarehouseMsi&quot; | &quot;AzureMySqlCredential&quot; | &quot;AzureStorageCredential&quot; | &quot;AzureStorageMsi&quot; | &quot;TeradataTeradataCredential&quot; | &quot;TeradataTeradataUserPass&quot; | &quot;TeradataUserPass&quot; | &quot;OracleOracleCredential&quot; | &quot;OracleOracleUserPass&quot; | &quot;SapS4HanaSapS4HanaCredential&quot; | &quot;SapS4HanaSapS4HanaUserPass&quot; | &quot;SapEccSapEccCredential&quot; | &quot;SapEccSapEccUserPass&quot; | &quot;PowerBIDelegated&quot; | &quot;PowerBIMsi&quot;,
        ///   scanResults: [
        ///     {
        ///       parentId: string,
        ///       id: string,
        ///       resourceId: string,
        ///       status: string,
        ///       assetsDiscovered: number,
        ///       assetsClassified: number,
        ///       diagnostics: {
        ///         notifications: [
        ///           {
        ///             message: string,
        ///             code: number
        ///           }
        ///         ],
        ///         exceptionCountMap: Dictionary&lt;string, number&gt;
        ///       },
        ///       startTime: string (ISO 8601 Format),
        ///       queuedTime: string (ISO 8601 Format),
        ///       pipelineStartTime: string (ISO 8601 Format),
        ///       endTime: string (ISO 8601 Format),
        ///       scanRulesetVersion: number,
        ///       scanRulesetType: &quot;Custom&quot; | &quot;System&quot;,
        ///       scanLevelType: &quot;Full&quot; | &quot;Incremental&quot;,
        ///       errorMessage: string,
        ///       error: {
        ///         code: string,
        ///         message: string,
        ///         target: string,
        ///         details: [
        ///           {
        ///             code: string,
        ///             message: string,
        ///             target: string,
        ///             details: [ErrorModel]
        ///           }
        ///         ]
        ///       },
        ///       runType: string,
        ///       dataSourceType: &quot;None&quot; | &quot;Collection&quot; | &quot;AzureSubscription&quot; | &quot;AzureResourceGroup&quot; | &quot;AzureSynapseWorkspace&quot; | &quot;AzureSynapse&quot; | &quot;AdlsGen1&quot; | &quot;AdlsGen2&quot; | &quot;AmazonAccount&quot; | &quot;AmazonS3&quot; | &quot;AmazonSql&quot; | &quot;AzureCosmosDb&quot; | &quot;AzureDataExplorer&quot; | &quot;AzureFileService&quot; | &quot;AzureSqlDatabase&quot; | &quot;AmazonPostgreSql&quot; | &quot;AzurePostgreSql&quot; | &quot;SqlServerDatabase&quot; | &quot;AzureSqlDatabaseManagedInstance&quot; | &quot;AzureSqlDataWarehouse&quot; | &quot;AzureMySql&quot; | &quot;AzureStorage&quot; | &quot;Teradata&quot; | &quot;Oracle&quot; | &quot;SapS4Hana&quot; | &quot;SapEcc&quot; | &quot;PowerBI&quot;
        ///     }
        ///   ]
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         message: string,
        ///         target: string,
        ///         details: [ErrorModel]
        ///       }
        ///     ]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Response GetProperties(RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewScanClient.GetProperties");
            scope.Start();
            try
            {
                return _restClient.GetProperties(options);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes the scan associated with the data source. </summary>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   id: string,
        ///   name: string,
        ///   kind: &quot;AzureSubscriptionCredential&quot; | &quot;AzureSubscriptionMsi&quot; | &quot;AzureResourceGroupCredential&quot; | &quot;AzureResourceGroupMsi&quot; | &quot;AzureSynapseWorkspaceCredential&quot; | &quot;AzureSynapseWorkspaceMsi&quot; | &quot;AzureSynapseCredential&quot; | &quot;AzureSynapseMsi&quot; | &quot;AdlsGen1Credential&quot; | &quot;AdlsGen1Msi&quot; | &quot;AdlsGen2Credential&quot; | &quot;AdlsGen2Msi&quot; | &quot;AmazonAccountCredential&quot; | &quot;AmazonS3Credential&quot; | &quot;AmazonS3RoleARN&quot; | &quot;AmazonSqlCredential&quot; | &quot;AzureCosmosDbCredential&quot; | &quot;AzureDataExplorerCredential&quot; | &quot;AzureDataExplorerMsi&quot; | &quot;AzureFileServiceCredential&quot; | &quot;AzureSqlDatabaseCredential&quot; | &quot;AzureSqlDatabaseMsi&quot; | &quot;AmazonPostgreSqlCredential&quot; | &quot;AzurePostgreSqlCredential&quot; | &quot;SqlServerDatabaseCredential&quot; | &quot;AzureSqlDatabaseManagedInstanceCredential&quot; | &quot;AzureSqlDatabaseManagedInstanceMsi&quot; | &quot;AzureSqlDataWarehouseCredential&quot; | &quot;AzureSqlDataWarehouseMsi&quot; | &quot;AzureMySqlCredential&quot; | &quot;AzureStorageCredential&quot; | &quot;AzureStorageMsi&quot; | &quot;TeradataTeradataCredential&quot; | &quot;TeradataTeradataUserPass&quot; | &quot;TeradataUserPass&quot; | &quot;OracleOracleCredential&quot; | &quot;OracleOracleUserPass&quot; | &quot;SapS4HanaSapS4HanaCredential&quot; | &quot;SapS4HanaSapS4HanaUserPass&quot; | &quot;SapEccSapEccCredential&quot; | &quot;SapEccSapEccUserPass&quot; | &quot;PowerBIDelegated&quot; | &quot;PowerBIMsi&quot;,
        ///   scanResults: [
        ///     {
        ///       parentId: string,
        ///       id: string,
        ///       resourceId: string,
        ///       status: string,
        ///       assetsDiscovered: number,
        ///       assetsClassified: number,
        ///       diagnostics: {
        ///         notifications: [
        ///           {
        ///             message: string,
        ///             code: number
        ///           }
        ///         ],
        ///         exceptionCountMap: Dictionary&lt;string, number&gt;
        ///       },
        ///       startTime: string (ISO 8601 Format),
        ///       queuedTime: string (ISO 8601 Format),
        ///       pipelineStartTime: string (ISO 8601 Format),
        ///       endTime: string (ISO 8601 Format),
        ///       scanRulesetVersion: number,
        ///       scanRulesetType: &quot;Custom&quot; | &quot;System&quot;,
        ///       scanLevelType: &quot;Full&quot; | &quot;Incremental&quot;,
        ///       errorMessage: string,
        ///       error: {
        ///         code: string,
        ///         message: string,
        ///         target: string,
        ///         details: [
        ///           {
        ///             code: string,
        ///             message: string,
        ///             target: string,
        ///             details: [ErrorModel]
        ///           }
        ///         ]
        ///       },
        ///       runType: string,
        ///       dataSourceType: &quot;None&quot; | &quot;Collection&quot; | &quot;AzureSubscription&quot; | &quot;AzureResourceGroup&quot; | &quot;AzureSynapseWorkspace&quot; | &quot;AzureSynapse&quot; | &quot;AdlsGen1&quot; | &quot;AdlsGen2&quot; | &quot;AmazonAccount&quot; | &quot;AmazonS3&quot; | &quot;AmazonSql&quot; | &quot;AzureCosmosDb&quot; | &quot;AzureDataExplorer&quot; | &quot;AzureFileService&quot; | &quot;AzureSqlDatabase&quot; | &quot;AmazonPostgreSql&quot; | &quot;AzurePostgreSql&quot; | &quot;SqlServerDatabase&quot; | &quot;AzureSqlDatabaseManagedInstance&quot; | &quot;AzureSqlDataWarehouse&quot; | &quot;AzureMySql&quot; | &quot;AzureStorage&quot; | &quot;Teradata&quot; | &quot;Oracle&quot; | &quot;SapS4Hana&quot; | &quot;SapEcc&quot; | &quot;PowerBI&quot;
        ///     }
        ///   ]
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         message: string,
        ///         target: string,
        ///         details: [ErrorModel]
        ///       }
        ///     ]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual async Task<Response> DeleteAsync(RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewScanClient.Delete");
            scope.Start();
            try
            {
                return await _restClient.DeleteAsync(options).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes the scan associated with the data source. </summary>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   id: string,
        ///   name: string,
        ///   kind: &quot;AzureSubscriptionCredential&quot; | &quot;AzureSubscriptionMsi&quot; | &quot;AzureResourceGroupCredential&quot; | &quot;AzureResourceGroupMsi&quot; | &quot;AzureSynapseWorkspaceCredential&quot; | &quot;AzureSynapseWorkspaceMsi&quot; | &quot;AzureSynapseCredential&quot; | &quot;AzureSynapseMsi&quot; | &quot;AdlsGen1Credential&quot; | &quot;AdlsGen1Msi&quot; | &quot;AdlsGen2Credential&quot; | &quot;AdlsGen2Msi&quot; | &quot;AmazonAccountCredential&quot; | &quot;AmazonS3Credential&quot; | &quot;AmazonS3RoleARN&quot; | &quot;AmazonSqlCredential&quot; | &quot;AzureCosmosDbCredential&quot; | &quot;AzureDataExplorerCredential&quot; | &quot;AzureDataExplorerMsi&quot; | &quot;AzureFileServiceCredential&quot; | &quot;AzureSqlDatabaseCredential&quot; | &quot;AzureSqlDatabaseMsi&quot; | &quot;AmazonPostgreSqlCredential&quot; | &quot;AzurePostgreSqlCredential&quot; | &quot;SqlServerDatabaseCredential&quot; | &quot;AzureSqlDatabaseManagedInstanceCredential&quot; | &quot;AzureSqlDatabaseManagedInstanceMsi&quot; | &quot;AzureSqlDataWarehouseCredential&quot; | &quot;AzureSqlDataWarehouseMsi&quot; | &quot;AzureMySqlCredential&quot; | &quot;AzureStorageCredential&quot; | &quot;AzureStorageMsi&quot; | &quot;TeradataTeradataCredential&quot; | &quot;TeradataTeradataUserPass&quot; | &quot;TeradataUserPass&quot; | &quot;OracleOracleCredential&quot; | &quot;OracleOracleUserPass&quot; | &quot;SapS4HanaSapS4HanaCredential&quot; | &quot;SapS4HanaSapS4HanaUserPass&quot; | &quot;SapEccSapEccCredential&quot; | &quot;SapEccSapEccUserPass&quot; | &quot;PowerBIDelegated&quot; | &quot;PowerBIMsi&quot;,
        ///   scanResults: [
        ///     {
        ///       parentId: string,
        ///       id: string,
        ///       resourceId: string,
        ///       status: string,
        ///       assetsDiscovered: number,
        ///       assetsClassified: number,
        ///       diagnostics: {
        ///         notifications: [
        ///           {
        ///             message: string,
        ///             code: number
        ///           }
        ///         ],
        ///         exceptionCountMap: Dictionary&lt;string, number&gt;
        ///       },
        ///       startTime: string (ISO 8601 Format),
        ///       queuedTime: string (ISO 8601 Format),
        ///       pipelineStartTime: string (ISO 8601 Format),
        ///       endTime: string (ISO 8601 Format),
        ///       scanRulesetVersion: number,
        ///       scanRulesetType: &quot;Custom&quot; | &quot;System&quot;,
        ///       scanLevelType: &quot;Full&quot; | &quot;Incremental&quot;,
        ///       errorMessage: string,
        ///       error: {
        ///         code: string,
        ///         message: string,
        ///         target: string,
        ///         details: [
        ///           {
        ///             code: string,
        ///             message: string,
        ///             target: string,
        ///             details: [ErrorModel]
        ///           }
        ///         ]
        ///       },
        ///       runType: string,
        ///       dataSourceType: &quot;None&quot; | &quot;Collection&quot; | &quot;AzureSubscription&quot; | &quot;AzureResourceGroup&quot; | &quot;AzureSynapseWorkspace&quot; | &quot;AzureSynapse&quot; | &quot;AdlsGen1&quot; | &quot;AdlsGen2&quot; | &quot;AmazonAccount&quot; | &quot;AmazonS3&quot; | &quot;AmazonSql&quot; | &quot;AzureCosmosDb&quot; | &quot;AzureDataExplorer&quot; | &quot;AzureFileService&quot; | &quot;AzureSqlDatabase&quot; | &quot;AmazonPostgreSql&quot; | &quot;AzurePostgreSql&quot; | &quot;SqlServerDatabase&quot; | &quot;AzureSqlDatabaseManagedInstance&quot; | &quot;AzureSqlDataWarehouse&quot; | &quot;AzureMySql&quot; | &quot;AzureStorage&quot; | &quot;Teradata&quot; | &quot;Oracle&quot; | &quot;SapS4Hana&quot; | &quot;SapEcc&quot; | &quot;PowerBI&quot;
        ///     }
        ///   ]
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         message: string,
        ///         target: string,
        ///         details: [ErrorModel]
        ///       }
        ///     ]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Response Delete(RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewScanClient.Delete");
            scope.Start();
            try
            {
                return _restClient.Delete(options);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Runs the scan. </summary>
        /// <param name="runId"> The String to use. </param>
        /// <param name="scanLevel"> The ScanLevelType to use. </param>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   scanResultId: OperationResponseScanResultId,
        ///   startTime: string (ISO 8601 Format),
        ///   endTime: string (ISO 8601 Format),
        ///   status: &quot;Accepted&quot; | &quot;InProgress&quot; | &quot;TransientFailure&quot; | &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;Canceled&quot;,
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         message: string,
        ///         target: string,
        ///         details: [ErrorInfo]
        ///       }
        ///     ]
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         message: string,
        ///         target: string,
        ///         details: [ErrorModel]
        ///       }
        ///     ]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual async Task<Response> RunScanAsync(string runId, string scanLevel = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewScanClient.RunScan");
            scope.Start();
            try
            {
                return await _restClient.RunScanAsync(runId, scanLevel, options).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Runs the scan. </summary>
        /// <param name="runId"> The String to use. </param>
        /// <param name="scanLevel"> The ScanLevelType to use. </param>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   scanResultId: OperationResponseScanResultId,
        ///   startTime: string (ISO 8601 Format),
        ///   endTime: string (ISO 8601 Format),
        ///   status: &quot;Accepted&quot; | &quot;InProgress&quot; | &quot;TransientFailure&quot; | &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;Canceled&quot;,
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         message: string,
        ///         target: string,
        ///         details: [ErrorInfo]
        ///       }
        ///     ]
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         message: string,
        ///         target: string,
        ///         details: [ErrorModel]
        ///       }
        ///     ]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Response RunScan(string runId, string scanLevel = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewScanClient.RunScan");
            scope.Start();
            try
            {
                return _restClient.RunScan(runId, scanLevel, options);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Cancels a scan. </summary>
        /// <param name="runId"> The String to use. </param>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   scanResultId: OperationResponseScanResultId,
        ///   startTime: string (ISO 8601 Format),
        ///   endTime: string (ISO 8601 Format),
        ///   status: &quot;Accepted&quot; | &quot;InProgress&quot; | &quot;TransientFailure&quot; | &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;Canceled&quot;,
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         message: string,
        ///         target: string,
        ///         details: [ErrorInfo]
        ///       }
        ///     ]
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         message: string,
        ///         target: string,
        ///         details: [ErrorModel]
        ///       }
        ///     ]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual async Task<Response> CancelScanAsync(string runId, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewScanClient.CancelScan");
            scope.Start();
            try
            {
                return await _restClient.CancelScanAsync(runId, options).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Cancels a scan. </summary>
        /// <param name="runId"> The String to use. </param>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   scanResultId: OperationResponseScanResultId,
        ///   startTime: string (ISO 8601 Format),
        ///   endTime: string (ISO 8601 Format),
        ///   status: &quot;Accepted&quot; | &quot;InProgress&quot; | &quot;TransientFailure&quot; | &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;Canceled&quot;,
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         message: string,
        ///         target: string,
        ///         details: [ErrorInfo]
        ///       }
        ///     ]
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         message: string,
        ///         target: string,
        ///         details: [ErrorModel]
        ///       }
        ///     ]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Response CancelScan(string runId, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewScanClient.CancelScan");
            scope.Start();
            try
            {
                return _restClient.CancelScan(runId, options);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets trigger information. </summary>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   id: string,
        ///   name: string,
        ///   properties: {
        ///     recurrence: {
        ///       frequency: &quot;Week&quot; | &quot;Month&quot;,
        ///       interval: number,
        ///       startTime: string (ISO 8601 Format),
        ///       endTime: string (ISO 8601 Format),
        ///       schedule: {
        ///         additionalProperties: Dictionary&lt;string, AnyObject&gt;,
        ///         minutes: [number],
        ///         hours: [number],
        ///         weekDays: [&quot;Sunday&quot; | &quot;Monday&quot; | &quot;Tuesday&quot; | &quot;Wednesday&quot; | &quot;Thursday&quot; | &quot;Friday&quot; | &quot;Saturday&quot;],
        ///         monthDays: [number],
        ///         monthlyOccurrences: [
        ///           {
        ///             additionalProperties: Dictionary&lt;string, AnyObject&gt;,
        ///             day: &quot;Sunday&quot; | &quot;Monday&quot; | &quot;Tuesday&quot; | &quot;Wednesday&quot; | &quot;Thursday&quot; | &quot;Friday&quot; | &quot;Saturday&quot;,
        ///             occurrence: number
        ///           }
        ///         ]
        ///       },
        ///       timeZone: string
        ///     },
        ///     recurrenceInterval: string,
        ///     createdAt: string (ISO 8601 Format),
        ///     lastModifiedAt: string (ISO 8601 Format),
        ///     lastScheduled: string (ISO 8601 Format),
        ///     scanLevel: &quot;Full&quot; | &quot;Incremental&quot;,
        ///     incrementalScanStartTime: string (ISO 8601 Format)
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         message: string,
        ///         target: string,
        ///         details: [ErrorModel]
        ///       }
        ///     ]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual async Task<Response> GetTriggerAsync(RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewScanClient.GetTrigger");
            scope.Start();
            try
            {
                return await _restClient.GetTriggerAsync(options).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets trigger information. </summary>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   id: string,
        ///   name: string,
        ///   properties: {
        ///     recurrence: {
        ///       frequency: &quot;Week&quot; | &quot;Month&quot;,
        ///       interval: number,
        ///       startTime: string (ISO 8601 Format),
        ///       endTime: string (ISO 8601 Format),
        ///       schedule: {
        ///         additionalProperties: Dictionary&lt;string, AnyObject&gt;,
        ///         minutes: [number],
        ///         hours: [number],
        ///         weekDays: [&quot;Sunday&quot; | &quot;Monday&quot; | &quot;Tuesday&quot; | &quot;Wednesday&quot; | &quot;Thursday&quot; | &quot;Friday&quot; | &quot;Saturday&quot;],
        ///         monthDays: [number],
        ///         monthlyOccurrences: [
        ///           {
        ///             additionalProperties: Dictionary&lt;string, AnyObject&gt;,
        ///             day: &quot;Sunday&quot; | &quot;Monday&quot; | &quot;Tuesday&quot; | &quot;Wednesday&quot; | &quot;Thursday&quot; | &quot;Friday&quot; | &quot;Saturday&quot;,
        ///             occurrence: number
        ///           }
        ///         ]
        ///       },
        ///       timeZone: string
        ///     },
        ///     recurrenceInterval: string,
        ///     createdAt: string (ISO 8601 Format),
        ///     lastModifiedAt: string (ISO 8601 Format),
        ///     lastScheduled: string (ISO 8601 Format),
        ///     scanLevel: &quot;Full&quot; | &quot;Incremental&quot;,
        ///     incrementalScanStartTime: string (ISO 8601 Format)
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         message: string,
        ///         target: string,
        ///         details: [ErrorModel]
        ///       }
        ///     ]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Response GetTrigger(RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewScanClient.GetTrigger");
            scope.Start();
            try
            {
                return _restClient.GetTrigger(options);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates an instance of a trigger. </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   id: string,
        ///   name: string,
        ///   properties: {
        ///     recurrence: {
        ///       frequency: &quot;Week&quot; | &quot;Month&quot;,
        ///       interval: number,
        ///       startTime: string (ISO 8601 Format),
        ///       endTime: string (ISO 8601 Format),
        ///       schedule: {
        ///         additionalProperties: Dictionary&lt;string, AnyObject&gt;,
        ///         minutes: [number],
        ///         hours: [number],
        ///         weekDays: [&quot;Sunday&quot; | &quot;Monday&quot; | &quot;Tuesday&quot; | &quot;Wednesday&quot; | &quot;Thursday&quot; | &quot;Friday&quot; | &quot;Saturday&quot;],
        ///         monthDays: [number],
        ///         monthlyOccurrences: [
        ///           {
        ///             additionalProperties: Dictionary&lt;string, AnyObject&gt;,
        ///             day: &quot;Sunday&quot; | &quot;Monday&quot; | &quot;Tuesday&quot; | &quot;Wednesday&quot; | &quot;Thursday&quot; | &quot;Friday&quot; | &quot;Saturday&quot;,
        ///             occurrence: number
        ///           }
        ///         ]
        ///       },
        ///       timeZone: string
        ///     },
        ///     recurrenceInterval: string,
        ///     createdAt: string (ISO 8601 Format),
        ///     lastModifiedAt: string (ISO 8601 Format),
        ///     lastScheduled: string (ISO 8601 Format),
        ///     scanLevel: &quot;Full&quot; | &quot;Incremental&quot;,
        ///     incrementalScanStartTime: string (ISO 8601 Format)
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   id: string,
        ///   name: string,
        ///   properties: {
        ///     recurrence: {
        ///       frequency: &quot;Week&quot; | &quot;Month&quot;,
        ///       interval: number,
        ///       startTime: string (ISO 8601 Format),
        ///       endTime: string (ISO 8601 Format),
        ///       schedule: {
        ///         additionalProperties: Dictionary&lt;string, AnyObject&gt;,
        ///         minutes: [number],
        ///         hours: [number],
        ///         weekDays: [&quot;Sunday&quot; | &quot;Monday&quot; | &quot;Tuesday&quot; | &quot;Wednesday&quot; | &quot;Thursday&quot; | &quot;Friday&quot; | &quot;Saturday&quot;],
        ///         monthDays: [number],
        ///         monthlyOccurrences: [
        ///           {
        ///             additionalProperties: Dictionary&lt;string, AnyObject&gt;,
        ///             day: &quot;Sunday&quot; | &quot;Monday&quot; | &quot;Tuesday&quot; | &quot;Wednesday&quot; | &quot;Thursday&quot; | &quot;Friday&quot; | &quot;Saturday&quot;,
        ///             occurrence: number
        ///           }
        ///         ]
        ///       },
        ///       timeZone: string
        ///     },
        ///     recurrenceInterval: string,
        ///     createdAt: string (ISO 8601 Format),
        ///     lastModifiedAt: string (ISO 8601 Format),
        ///     lastScheduled: string (ISO 8601 Format),
        ///     scanLevel: &quot;Full&quot; | &quot;Incremental&quot;,
        ///     incrementalScanStartTime: string (ISO 8601 Format)
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         message: string,
        ///         target: string,
        ///         details: [ErrorModel]
        ///       }
        ///     ]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual async Task<Response> CreateOrUpdateTriggerAsync(RequestContent content, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewScanClient.CreateOrUpdateTrigger");
            scope.Start();
            try
            {
                return await _restClient.CreateOrUpdateTriggerAsync(content, options).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates an instance of a trigger. </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   id: string,
        ///   name: string,
        ///   properties: {
        ///     recurrence: {
        ///       frequency: &quot;Week&quot; | &quot;Month&quot;,
        ///       interval: number,
        ///       startTime: string (ISO 8601 Format),
        ///       endTime: string (ISO 8601 Format),
        ///       schedule: {
        ///         additionalProperties: Dictionary&lt;string, AnyObject&gt;,
        ///         minutes: [number],
        ///         hours: [number],
        ///         weekDays: [&quot;Sunday&quot; | &quot;Monday&quot; | &quot;Tuesday&quot; | &quot;Wednesday&quot; | &quot;Thursday&quot; | &quot;Friday&quot; | &quot;Saturday&quot;],
        ///         monthDays: [number],
        ///         monthlyOccurrences: [
        ///           {
        ///             additionalProperties: Dictionary&lt;string, AnyObject&gt;,
        ///             day: &quot;Sunday&quot; | &quot;Monday&quot; | &quot;Tuesday&quot; | &quot;Wednesday&quot; | &quot;Thursday&quot; | &quot;Friday&quot; | &quot;Saturday&quot;,
        ///             occurrence: number
        ///           }
        ///         ]
        ///       },
        ///       timeZone: string
        ///     },
        ///     recurrenceInterval: string,
        ///     createdAt: string (ISO 8601 Format),
        ///     lastModifiedAt: string (ISO 8601 Format),
        ///     lastScheduled: string (ISO 8601 Format),
        ///     scanLevel: &quot;Full&quot; | &quot;Incremental&quot;,
        ///     incrementalScanStartTime: string (ISO 8601 Format)
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   id: string,
        ///   name: string,
        ///   properties: {
        ///     recurrence: {
        ///       frequency: &quot;Week&quot; | &quot;Month&quot;,
        ///       interval: number,
        ///       startTime: string (ISO 8601 Format),
        ///       endTime: string (ISO 8601 Format),
        ///       schedule: {
        ///         additionalProperties: Dictionary&lt;string, AnyObject&gt;,
        ///         minutes: [number],
        ///         hours: [number],
        ///         weekDays: [&quot;Sunday&quot; | &quot;Monday&quot; | &quot;Tuesday&quot; | &quot;Wednesday&quot; | &quot;Thursday&quot; | &quot;Friday&quot; | &quot;Saturday&quot;],
        ///         monthDays: [number],
        ///         monthlyOccurrences: [
        ///           {
        ///             additionalProperties: Dictionary&lt;string, AnyObject&gt;,
        ///             day: &quot;Sunday&quot; | &quot;Monday&quot; | &quot;Tuesday&quot; | &quot;Wednesday&quot; | &quot;Thursday&quot; | &quot;Friday&quot; | &quot;Saturday&quot;,
        ///             occurrence: number
        ///           }
        ///         ]
        ///       },
        ///       timeZone: string
        ///     },
        ///     recurrenceInterval: string,
        ///     createdAt: string (ISO 8601 Format),
        ///     lastModifiedAt: string (ISO 8601 Format),
        ///     lastScheduled: string (ISO 8601 Format),
        ///     scanLevel: &quot;Full&quot; | &quot;Incremental&quot;,
        ///     incrementalScanStartTime: string (ISO 8601 Format)
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         message: string,
        ///         target: string,
        ///         details: [ErrorModel]
        ///       }
        ///     ]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Response CreateOrUpdateTrigger(RequestContent content, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewScanClient.CreateOrUpdateTrigger");
            scope.Start();
            try
            {
                return _restClient.CreateOrUpdateTrigger(content, options);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes the trigger associated with the scan. </summary>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   id: string,
        ///   name: string,
        ///   properties: {
        ///     recurrence: {
        ///       frequency: &quot;Week&quot; | &quot;Month&quot;,
        ///       interval: number,
        ///       startTime: string (ISO 8601 Format),
        ///       endTime: string (ISO 8601 Format),
        ///       schedule: {
        ///         additionalProperties: Dictionary&lt;string, AnyObject&gt;,
        ///         minutes: [number],
        ///         hours: [number],
        ///         weekDays: [&quot;Sunday&quot; | &quot;Monday&quot; | &quot;Tuesday&quot; | &quot;Wednesday&quot; | &quot;Thursday&quot; | &quot;Friday&quot; | &quot;Saturday&quot;],
        ///         monthDays: [number],
        ///         monthlyOccurrences: [
        ///           {
        ///             additionalProperties: Dictionary&lt;string, AnyObject&gt;,
        ///             day: &quot;Sunday&quot; | &quot;Monday&quot; | &quot;Tuesday&quot; | &quot;Wednesday&quot; | &quot;Thursday&quot; | &quot;Friday&quot; | &quot;Saturday&quot;,
        ///             occurrence: number
        ///           }
        ///         ]
        ///       },
        ///       timeZone: string
        ///     },
        ///     recurrenceInterval: string,
        ///     createdAt: string (ISO 8601 Format),
        ///     lastModifiedAt: string (ISO 8601 Format),
        ///     lastScheduled: string (ISO 8601 Format),
        ///     scanLevel: &quot;Full&quot; | &quot;Incremental&quot;,
        ///     incrementalScanStartTime: string (ISO 8601 Format)
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         message: string,
        ///         target: string,
        ///         details: [ErrorModel]
        ///       }
        ///     ]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual async Task<Response> DeleteTriggerAsync(RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewScanClient.DeleteTrigger");
            scope.Start();
            try
            {
                return await _restClient.DeleteTriggerAsync(options).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes the trigger associated with the scan. </summary>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   id: string,
        ///   name: string,
        ///   properties: {
        ///     recurrence: {
        ///       frequency: &quot;Week&quot; | &quot;Month&quot;,
        ///       interval: number,
        ///       startTime: string (ISO 8601 Format),
        ///       endTime: string (ISO 8601 Format),
        ///       schedule: {
        ///         additionalProperties: Dictionary&lt;string, AnyObject&gt;,
        ///         minutes: [number],
        ///         hours: [number],
        ///         weekDays: [&quot;Sunday&quot; | &quot;Monday&quot; | &quot;Tuesday&quot; | &quot;Wednesday&quot; | &quot;Thursday&quot; | &quot;Friday&quot; | &quot;Saturday&quot;],
        ///         monthDays: [number],
        ///         monthlyOccurrences: [
        ///           {
        ///             additionalProperties: Dictionary&lt;string, AnyObject&gt;,
        ///             day: &quot;Sunday&quot; | &quot;Monday&quot; | &quot;Tuesday&quot; | &quot;Wednesday&quot; | &quot;Thursday&quot; | &quot;Friday&quot; | &quot;Saturday&quot;,
        ///             occurrence: number
        ///           }
        ///         ]
        ///       },
        ///       timeZone: string
        ///     },
        ///     recurrenceInterval: string,
        ///     createdAt: string (ISO 8601 Format),
        ///     lastModifiedAt: string (ISO 8601 Format),
        ///     lastScheduled: string (ISO 8601 Format),
        ///     scanLevel: &quot;Full&quot; | &quot;Incremental&quot;,
        ///     incrementalScanStartTime: string (ISO 8601 Format)
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         message: string,
        ///         target: string,
        ///         details: [ErrorModel]
        ///       }
        ///     ]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Response DeleteTrigger(RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("PurviewScanClient.DeleteTrigger");
            scope.Start();
            try
            {
                return _restClient.DeleteTrigger(options);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists the scan history of a scan. </summary>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       parentId: string,
        ///       id: string,
        ///       resourceId: string,
        ///       status: string,
        ///       assetsDiscovered: number,
        ///       assetsClassified: number,
        ///       diagnostics: {
        ///         notifications: [
        ///           {
        ///             message: string,
        ///             code: number
        ///           }
        ///         ],
        ///         exceptionCountMap: Dictionary&lt;string, number&gt;
        ///       },
        ///       startTime: string (ISO 8601 Format),
        ///       queuedTime: string (ISO 8601 Format),
        ///       pipelineStartTime: string (ISO 8601 Format),
        ///       endTime: string (ISO 8601 Format),
        ///       scanRulesetVersion: number,
        ///       scanRulesetType: &quot;Custom&quot; | &quot;System&quot;,
        ///       scanLevelType: &quot;Full&quot; | &quot;Incremental&quot;,
        ///       errorMessage: string,
        ///       error: {
        ///         code: string,
        ///         message: string,
        ///         target: string,
        ///         details: [
        ///           {
        ///             code: string,
        ///             message: string,
        ///             target: string,
        ///             details: [ErrorModel]
        ///           }
        ///         ]
        ///       },
        ///       runType: string,
        ///       dataSourceType: &quot;None&quot; | &quot;Collection&quot; | &quot;AzureSubscription&quot; | &quot;AzureResourceGroup&quot; | &quot;AzureSynapseWorkspace&quot; | &quot;AzureSynapse&quot; | &quot;AdlsGen1&quot; | &quot;AdlsGen2&quot; | &quot;AmazonAccount&quot; | &quot;AmazonS3&quot; | &quot;AmazonSql&quot; | &quot;AzureCosmosDb&quot; | &quot;AzureDataExplorer&quot; | &quot;AzureFileService&quot; | &quot;AzureSqlDatabase&quot; | &quot;AmazonPostgreSql&quot; | &quot;AzurePostgreSql&quot; | &quot;SqlServerDatabase&quot; | &quot;AzureSqlDatabaseManagedInstance&quot; | &quot;AzureSqlDataWarehouse&quot; | &quot;AzureMySql&quot; | &quot;AzureStorage&quot; | &quot;Teradata&quot; | &quot;Oracle&quot; | &quot;SapS4Hana&quot; | &quot;SapEcc&quot; | &quot;PowerBI&quot;
        ///     }
        ///   ],
        ///   nextLink: string,
        ///   count: number
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         message: string,
        ///         target: string,
        ///         details: [ErrorModel]
        ///       }
        ///     ]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual AsyncPageable<BinaryData> GetRunsAsync(RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            async Task<Page<BinaryData>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PurviewScanClient.GetRuns");
                scope.Start();
                try
                {
                    Response response = await _restClient.GetRunsAsync(options).ConfigureAwait(false);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "value", "nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            async Task<Page<BinaryData>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PurviewScanClient.GetRuns");
                scope.Start();
                try
                {
                    Response response = await _restClient.GetRunsNextPageAsync(nextLink, options).ConfigureAwait(false);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "value", "nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Lists the scan history of a scan. </summary>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       parentId: string,
        ///       id: string,
        ///       resourceId: string,
        ///       status: string,
        ///       assetsDiscovered: number,
        ///       assetsClassified: number,
        ///       diagnostics: {
        ///         notifications: [
        ///           {
        ///             message: string,
        ///             code: number
        ///           }
        ///         ],
        ///         exceptionCountMap: Dictionary&lt;string, number&gt;
        ///       },
        ///       startTime: string (ISO 8601 Format),
        ///       queuedTime: string (ISO 8601 Format),
        ///       pipelineStartTime: string (ISO 8601 Format),
        ///       endTime: string (ISO 8601 Format),
        ///       scanRulesetVersion: number,
        ///       scanRulesetType: &quot;Custom&quot; | &quot;System&quot;,
        ///       scanLevelType: &quot;Full&quot; | &quot;Incremental&quot;,
        ///       errorMessage: string,
        ///       error: {
        ///         code: string,
        ///         message: string,
        ///         target: string,
        ///         details: [
        ///           {
        ///             code: string,
        ///             message: string,
        ///             target: string,
        ///             details: [ErrorModel]
        ///           }
        ///         ]
        ///       },
        ///       runType: string,
        ///       dataSourceType: &quot;None&quot; | &quot;Collection&quot; | &quot;AzureSubscription&quot; | &quot;AzureResourceGroup&quot; | &quot;AzureSynapseWorkspace&quot; | &quot;AzureSynapse&quot; | &quot;AdlsGen1&quot; | &quot;AdlsGen2&quot; | &quot;AmazonAccount&quot; | &quot;AmazonS3&quot; | &quot;AmazonSql&quot; | &quot;AzureCosmosDb&quot; | &quot;AzureDataExplorer&quot; | &quot;AzureFileService&quot; | &quot;AzureSqlDatabase&quot; | &quot;AmazonPostgreSql&quot; | &quot;AzurePostgreSql&quot; | &quot;SqlServerDatabase&quot; | &quot;AzureSqlDatabaseManagedInstance&quot; | &quot;AzureSqlDataWarehouse&quot; | &quot;AzureMySql&quot; | &quot;AzureStorage&quot; | &quot;Teradata&quot; | &quot;Oracle&quot; | &quot;SapS4Hana&quot; | &quot;SapEcc&quot; | &quot;PowerBI&quot;
        ///     }
        ///   ],
        ///   nextLink: string,
        ///   count: number
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [
        ///       {
        ///         code: string,
        ///         message: string,
        ///         target: string,
        ///         details: [ErrorModel]
        ///       }
        ///     ]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Pageable<BinaryData> GetRuns(RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            Page<BinaryData> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PurviewScanClient.GetRuns");
                scope.Start();
                try
                {
                    Response response = _restClient.GetRuns(options);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "value", "nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            Page<BinaryData> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PurviewScanClient.GetRuns");
                scope.Start();
                try
                {
                    Response response = _restClient.GetRunsNextPage(nextLink, options);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "value", "nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }
    }
}
