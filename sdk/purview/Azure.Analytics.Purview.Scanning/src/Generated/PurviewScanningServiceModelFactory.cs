// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.Analytics.Purview.Scanning.Models
{
    /// <summary> Model factory for read-only models. </summary>
    public static partial class PurviewScanningServiceModelFactory
    {
        /// <summary> Initializes a new instance of ProxyResource. </summary>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <returns> A new <see cref="Models.ProxyResource"/> instance for mocking. </returns>
        public static ProxyResource ProxyResource(string id = null, string name = null)
        {
            return new ProxyResource(id, name);
        }

        /// <summary> Initializes a new instance of ErrorModel. </summary>
        /// <param name="code"></param>
        /// <param name="message"></param>
        /// <param name="target"></param>
        /// <param name="details"></param>
        /// <returns> A new <see cref="Models.ErrorModel"/> instance for mocking. </returns>
        public static ErrorModel ErrorModel(string code = null, string message = null, string target = null, IEnumerable<ErrorModel> details = null)
        {
            details ??= new List<ErrorModel>();

            return new ErrorModel(code, message, target, details?.ToList());
        }

        /// <summary> Initializes a new instance of OperationResponse. </summary>
        /// <param name="scanResultId"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="status"></param>
        /// <param name="error"></param>
        /// <returns> A new <see cref="Models.OperationResponse"/> instance for mocking. </returns>
        public static OperationResponse OperationResponse(Guid? scanResultId = null, DateTimeOffset? startTime = null, DateTimeOffset? endTime = null, OperationStatus? status = null, OperationResponseError error = null)
        {
            return new OperationResponse(scanResultId, startTime, endTime, status, error);
        }

        /// <summary> Initializes a new instance of ErrorInfo. </summary>
        /// <param name="code"></param>
        /// <param name="message"></param>
        /// <param name="target"></param>
        /// <param name="details"></param>
        /// <returns> A new <see cref="Models.ErrorInfo"/> instance for mocking. </returns>
        public static ErrorInfo ErrorInfo(string code = null, string message = null, string target = null, IEnumerable<ErrorInfo> details = null)
        {
            details ??= new List<ErrorInfo>();

            return new ErrorInfo(code, message, target, details?.ToList());
        }

        /// <summary> Initializes a new instance of DataSource. </summary>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="kind"></param>
        /// <param name="scans"></param>
        /// <returns> A new <see cref="Models.DataSource"/> instance for mocking. </returns>
        public static DataSource DataSource(string id = null, string name = null, DataSourceType kind = default, IEnumerable<Scan> scans = null)
        {
            scans ??= new List<Scan>();

            return new DataSource(id, name, kind, scans?.ToList());
        }

        /// <summary> Initializes a new instance of Scan. </summary>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="kind"></param>
        /// <param name="scanResults"></param>
        /// <returns> A new <see cref="Models.Scan"/> instance for mocking. </returns>
        public static Scan Scan(string id = null, string name = null, ScanAuthorizationType kind = default, IEnumerable<ScanResult> scanResults = null)
        {
            scanResults ??= new List<ScanResult>();

            return new Scan(id, name, kind, scanResults?.ToList());
        }

        /// <summary> Initializes a new instance of ScanResult. </summary>
        /// <param name="parentId"></param>
        /// <param name="id"></param>
        /// <param name="resourceId"></param>
        /// <param name="status"></param>
        /// <param name="assetsDiscovered"></param>
        /// <param name="assetsClassified"></param>
        /// <param name="diagnostics"></param>
        /// <param name="startTime"></param>
        /// <param name="queuedTime"></param>
        /// <param name="pipelineStartTime"></param>
        /// <param name="endTime"></param>
        /// <param name="scanRulesetVersion"></param>
        /// <param name="scanRulesetType"></param>
        /// <param name="scanLevelType"></param>
        /// <param name="errorMessage"></param>
        /// <param name="error"></param>
        /// <param name="runType"></param>
        /// <param name="dataSourceType"></param>
        /// <returns> A new <see cref="Models.ScanResult"/> instance for mocking. </returns>
        public static ScanResult ScanResult(string parentId = null, string id = null, string resourceId = null, string status = null, long? assetsDiscovered = null, long? assetsClassified = null, ScanResultDiagnostics diagnostics = null, DateTimeOffset? startTime = null, DateTimeOffset? queuedTime = null, DateTimeOffset? pipelineStartTime = null, DateTimeOffset? endTime = null, int? scanRulesetVersion = null, ScanRulesetType? scanRulesetType = null, ScanLevelType? scanLevelType = null, string errorMessage = null, ScanResultError error = null, string runType = null, DataSourceType? dataSourceType = null)
        {
            return new ScanResult(parentId, id, resourceId, status, assetsDiscovered, assetsClassified, diagnostics, startTime, queuedTime, pipelineStartTime, endTime, scanRulesetVersion, scanRulesetType, scanLevelType, errorMessage, error, runType, dataSourceType);
        }

        /// <summary> Initializes a new instance of ScanDiagnostics. </summary>
        /// <param name="notifications"></param>
        /// <param name="exceptionCountMap"> Dictionary of &lt;integer&gt;. </param>
        /// <returns> A new <see cref="Models.ScanDiagnostics"/> instance for mocking. </returns>
        public static ScanDiagnostics ScanDiagnostics(IEnumerable<Notification> notifications = null, IReadOnlyDictionary<string, int> exceptionCountMap = null)
        {
            notifications ??= new List<Notification>();
            exceptionCountMap ??= new Dictionary<string, int>();

            return new ScanDiagnostics(notifications?.ToList(), exceptionCountMap);
        }

        /// <summary> Initializes a new instance of Notification. </summary>
        /// <param name="message"></param>
        /// <param name="code"></param>
        /// <returns> A new <see cref="Models.Notification"/> instance for mocking. </returns>
        public static Notification Notification(string message = null, int? code = null)
        {
            return new Notification(message, code);
        }

        /// <summary> Initializes a new instance of VersionedScanRuleset. </summary>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="scanRulesetType"></param>
        /// <param name="status"></param>
        /// <param name="version"></param>
        /// <returns> A new <see cref="Models.VersionedScanRuleset"/> instance for mocking. </returns>
        public static VersionedScanRuleset VersionedScanRuleset(string id = null, string name = null, ScanRulesetType? scanRulesetType = null, ScanRulesetStatus? status = null, int? version = null)
        {
            return new VersionedScanRuleset(id, name, scanRulesetType, status, version);
        }

        /// <summary> Initializes a new instance of TriggerPropertiesAutoGenerated. </summary>
        /// <param name="recurrence"></param>
        /// <param name="recurrenceInterval"></param>
        /// <param name="createdAt"></param>
        /// <param name="lastModifiedAt"></param>
        /// <param name="lastScheduled"></param>
        /// <param name="scanLevel"></param>
        /// <param name="incrementalScanStartTime"></param>
        /// <returns> A new <see cref="Models.TriggerPropertiesAutoGenerated"/> instance for mocking. </returns>
        public static TriggerPropertiesAutoGenerated TriggerPropertiesAutoGenerated(TriggerPropertiesRecurrence recurrence = null, string recurrenceInterval = null, DateTimeOffset? createdAt = null, DateTimeOffset? lastModifiedAt = null, DateTimeOffset? lastScheduled = null, ScanLevelType? scanLevel = null, DateTimeOffset? incrementalScanStartTime = null)
        {
            return new TriggerPropertiesAutoGenerated(recurrence, recurrenceInterval, createdAt, lastModifiedAt, lastScheduled, scanLevel, incrementalScanStartTime);
        }

        /// <summary> Initializes a new instance of CollectionReference. </summary>
        /// <param name="lastModifiedAt"></param>
        /// <param name="referenceName"></param>
        /// <param name="type"></param>
        /// <returns> A new <see cref="Models.CollectionReference"/> instance for mocking. </returns>
        public static CollectionReference CollectionReference(DateTimeOffset? lastModifiedAt = null, string referenceName = null, string type = null)
        {
            return new CollectionReference(lastModifiedAt, referenceName, type);
        }

        /// <summary> Initializes a new instance of SystemClassificationRuleProperties. </summary>
        /// <param name="description"></param>
        /// <param name="version"></param>
        /// <param name="classificationName"></param>
        /// <param name="ruleStatus"></param>
        /// <param name="createdAt"></param>
        /// <param name="lastModifiedAt"></param>
        /// <returns> A new <see cref="Models.SystemClassificationRuleProperties"/> instance for mocking. </returns>
        public static SystemClassificationRuleProperties SystemClassificationRuleProperties(string description = null, int? version = null, string classificationName = null, ClassificationRuleStatus? ruleStatus = null, DateTimeOffset? createdAt = null, DateTimeOffset? lastModifiedAt = null)
        {
            return new SystemClassificationRuleProperties(description, version, classificationName, ruleStatus, createdAt, lastModifiedAt);
        }

        /// <summary> Initializes a new instance of CustomClassificationRuleProperties. </summary>
        /// <param name="minimumPercentageMatch"></param>
        /// <param name="classificationAction"></param>
        /// <param name="dataPatterns"></param>
        /// <param name="columnPatterns"></param>
        /// <param name="description"></param>
        /// <param name="version"></param>
        /// <param name="classificationName"></param>
        /// <param name="ruleStatus"></param>
        /// <param name="createdAt"></param>
        /// <param name="lastModifiedAt"></param>
        /// <returns> A new <see cref="Models.CustomClassificationRuleProperties"/> instance for mocking. </returns>
        public static CustomClassificationRuleProperties CustomClassificationRuleProperties(double? minimumPercentageMatch = null, ClassificationAction? classificationAction = null, IEnumerable<ClassificationRulePattern> dataPatterns = null, IEnumerable<ClassificationRulePattern> columnPatterns = null, string description = null, int? version = null, string classificationName = null, ClassificationRuleStatus? ruleStatus = null, DateTimeOffset? createdAt = null, DateTimeOffset? lastModifiedAt = null)
        {
            dataPatterns ??= new List<ClassificationRulePattern>();
            columnPatterns ??= new List<ClassificationRulePattern>();

            return new CustomClassificationRuleProperties(minimumPercentageMatch, classificationAction, dataPatterns?.ToList(), columnPatterns?.ToList(), description, version, classificationName, ruleStatus, createdAt, lastModifiedAt);
        }

        /// <summary> Initializes a new instance of DataSourceProperties. </summary>
        /// <param name="createdAt"></param>
        /// <param name="lastModifiedAt"></param>
        /// <param name="collection"></param>
        /// <returns> A new <see cref="Models.DataSourceProperties"/> instance for mocking. </returns>
        public static DataSourceProperties DataSourceProperties(DateTimeOffset? createdAt = null, DateTimeOffset? lastModifiedAt = null, DataSourcePropertiesCollection collection = null)
        {
            return new DataSourceProperties(createdAt, lastModifiedAt, collection);
        }

        /// <summary> Initializes a new instance of ScanRulesetProperties. </summary>
        /// <param name="createdAt"></param>
        /// <param name="description"></param>
        /// <param name="excludedSystemClassifications"></param>
        /// <param name="includedCustomClassificationRuleNames"></param>
        /// <param name="lastModifiedAt"></param>
        /// <returns> A new <see cref="Models.ScanRulesetProperties"/> instance for mocking. </returns>
        public static ScanRulesetProperties ScanRulesetProperties(DateTimeOffset? createdAt = null, string description = null, IEnumerable<string> excludedSystemClassifications = null, IEnumerable<string> includedCustomClassificationRuleNames = null, DateTimeOffset? lastModifiedAt = null)
        {
            excludedSystemClassifications ??= new List<string>();
            includedCustomClassificationRuleNames ??= new List<string>();

            return new ScanRulesetProperties(createdAt, description, excludedSystemClassifications?.ToList(), includedCustomClassificationRuleNames?.ToList(), lastModifiedAt);
        }

        /// <summary> Initializes a new instance of ScanProperties. </summary>
        /// <param name="scanRulesetName"></param>
        /// <param name="scanRulesetType"></param>
        /// <param name="collection"></param>
        /// <param name="workers"></param>
        /// <param name="createdAt"></param>
        /// <param name="lastModifiedAt"></param>
        /// <param name="connectedVia"></param>
        /// <returns> A new <see cref="Models.ScanProperties"/> instance for mocking. </returns>
        public static ScanProperties ScanProperties(string scanRulesetName = null, ScanRulesetType? scanRulesetType = null, ScanPropertiesCollection collection = null, int? workers = null, DateTimeOffset? createdAt = null, DateTimeOffset? lastModifiedAt = null, ScanPropertiesConnectedVia connectedVia = null)
        {
            return new ScanProperties(scanRulesetName, scanRulesetType, collection, workers, createdAt, lastModifiedAt, connectedVia);
        }
    }
}
