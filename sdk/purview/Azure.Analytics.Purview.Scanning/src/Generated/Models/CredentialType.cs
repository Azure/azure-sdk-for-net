// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Analytics.Purview.Scanning.Models
{
    /// <summary> The CredentialType. </summary>
    public readonly partial struct CredentialType : IEquatable<CredentialType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="CredentialType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public CredentialType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AccountKeyValue = "AccountKey";
        private const string ServicePrincipalValue = "ServicePrincipal";
        private const string BasicAuthValue = "BasicAuth";
        private const string SqlAuthValue = "SqlAuth";
        private const string AmazonARNValue = "AmazonARN";

        /// <summary> AccountKey. </summary>
        public static CredentialType AccountKey { get; } = new CredentialType(AccountKeyValue);
        /// <summary> ServicePrincipal. </summary>
        public static CredentialType ServicePrincipal { get; } = new CredentialType(ServicePrincipalValue);
        /// <summary> BasicAuth. </summary>
        public static CredentialType BasicAuth { get; } = new CredentialType(BasicAuthValue);
        /// <summary> SqlAuth. </summary>
        public static CredentialType SqlAuth { get; } = new CredentialType(SqlAuthValue);
        /// <summary> AmazonARN. </summary>
        public static CredentialType AmazonARN { get; } = new CredentialType(AmazonARNValue);
        /// <summary> Determines if two <see cref="CredentialType"/> values are the same. </summary>
        public static bool operator ==(CredentialType left, CredentialType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="CredentialType"/> values are not the same. </summary>
        public static bool operator !=(CredentialType left, CredentialType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="CredentialType"/>. </summary>
        public static implicit operator CredentialType(string value) => new CredentialType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is CredentialType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(CredentialType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
