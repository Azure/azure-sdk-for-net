// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Analytics.Purview.Scanning.Models
{
    /// <summary> The ClassificationRulePatternType. </summary>
    public readonly partial struct ClassificationRulePatternType : IEquatable<ClassificationRulePatternType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ClassificationRulePatternType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ClassificationRulePatternType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string RegexValue = "Regex";

        /// <summary> Regex. </summary>
        public static ClassificationRulePatternType Regex { get; } = new ClassificationRulePatternType(RegexValue);
        /// <summary> Determines if two <see cref="ClassificationRulePatternType"/> values are the same. </summary>
        public static bool operator ==(ClassificationRulePatternType left, ClassificationRulePatternType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ClassificationRulePatternType"/> values are not the same. </summary>
        public static bool operator !=(ClassificationRulePatternType left, ClassificationRulePatternType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ClassificationRulePatternType"/>. </summary>
        public static implicit operator ClassificationRulePatternType(string value) => new ClassificationRulePatternType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ClassificationRulePatternType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ClassificationRulePatternType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
