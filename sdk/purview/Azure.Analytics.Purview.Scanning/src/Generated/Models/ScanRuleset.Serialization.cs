// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.Analytics.Purview.Scanning.Models
{
    public partial class ScanRuleset : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("kind");
            writer.WriteStringValue(Kind.ToString());
            if (Optional.IsDefined(ScanRulesetType))
            {
                writer.WritePropertyName("scanRulesetType");
                writer.WriteStringValue(ScanRulesetType.Value.ToString());
            }
            writer.WriteEndObject();
        }

        internal static ScanRuleset DeserializeScanRuleset(JsonElement element)
        {
            if (element.TryGetProperty("kind", out JsonElement discriminator))
            {
                switch (discriminator.GetString())
                {
                    case "AdlsGen1": return AdlsGen1ScanRuleset.DeserializeAdlsGen1ScanRuleset(element);
                    case "AdlsGen2": return AdlsGen2ScanRuleset.DeserializeAdlsGen2ScanRuleset(element);
                    case "AmazonAccount": return AmazonAccountScanRuleset.DeserializeAmazonAccountScanRuleset(element);
                    case "AmazonPostgreSql": return AmazonPostgreSqlScanRuleset.DeserializeAmazonPostgreSqlScanRuleset(element);
                    case "AmazonS3": return AmazonS3ScanRuleset.DeserializeAmazonS3ScanRuleset(element);
                    case "AmazonSql": return AmazonSqlScanRuleset.DeserializeAmazonSqlScanRuleset(element);
                    case "AzureCosmosDb": return AzureCosmosDbScanRuleset.DeserializeAzureCosmosDbScanRuleset(element);
                    case "AzureDataExplorer": return AzureDataExplorerScanRuleset.DeserializeAzureDataExplorerScanRuleset(element);
                    case "AzureFileService": return AzureFileServiceScanRuleset.DeserializeAzureFileServiceScanRuleset(element);
                    case "AzureMySql": return AzureMySqlScanRuleset.DeserializeAzureMySqlScanRuleset(element);
                    case "AzurePostgreSql": return AzurePostgreSqlScanRuleset.DeserializeAzurePostgreSqlScanRuleset(element);
                    case "AzureResourceGroup": return AzureResourceGroupScanRuleset.DeserializeAzureResourceGroupScanRuleset(element);
                    case "AzureSqlDataWarehouse": return AzureSqlDataWarehouseScanRuleset.DeserializeAzureSqlDataWarehouseScanRuleset(element);
                    case "AzureSqlDatabase": return AzureSqlDatabaseScanRuleset.DeserializeAzureSqlDatabaseScanRuleset(element);
                    case "AzureSqlDatabaseManagedInstance": return AzureSqlDatabaseManagedInstanceScanRuleset.DeserializeAzureSqlDatabaseManagedInstanceScanRuleset(element);
                    case "AzureStorage": return AzureStorageScanRuleset.DeserializeAzureStorageScanRuleset(element);
                    case "AzureSubscription": return AzureSubscriptionScanRuleset.DeserializeAzureSubscriptionScanRuleset(element);
                    case "AzureSynapse": return AzureSynapseScanRuleset.DeserializeAzureSynapseScanRuleset(element);
                    case "AzureSynapseWorkspace": return AzureSynapseWorkspaceScanRuleset.DeserializeAzureSynapseWorkspaceScanRuleset(element);
                    case "Oracle": return OracleScanRuleset.DeserializeOracleScanRuleset(element);
                    case "PowerBI": return PowerBIScanRuleset.DeserializePowerBIScanRuleset(element);
                    case "SapEcc": return SapEccScanRuleset.DeserializeSapEccScanRuleset(element);
                    case "SapS4Hana": return SapS4HanaScanRuleset.DeserializeSapS4HanaScanRuleset(element);
                    case "SqlServerDatabase": return SqlServerDatabaseScanRuleset.DeserializeSqlServerDatabaseScanRuleset(element);
                    case "Teradata": return TeradataScanRuleset.DeserializeTeradataScanRuleset(element);
                }
            }
            DataSourceType kind = default;
            Optional<ScanRulesetType> scanRulesetType = default;
            Optional<ScanRulesetStatus> status = default;
            Optional<int> version = default;
            Optional<string> id = default;
            Optional<string> name = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("kind"))
                {
                    kind = new DataSourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("scanRulesetType"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    scanRulesetType = new ScanRulesetType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("status"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    status = new ScanRulesetStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("version"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    version = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("id"))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
            }
            return new ScanRuleset(id.Value, name.Value, Optional.ToNullable(scanRulesetType), Optional.ToNullable(status), Optional.ToNullable(version), kind);
        }
    }
}
