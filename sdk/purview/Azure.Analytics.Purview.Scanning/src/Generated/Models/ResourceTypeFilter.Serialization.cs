// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.Analytics.Purview.Scanning.Models
{
    public partial class ResourceTypeFilter : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(ScanRulesetName))
            {
                writer.WritePropertyName("scanRulesetName");
                writer.WriteStringValue(ScanRulesetName);
            }
            if (Optional.IsDefined(ScanRulesetType))
            {
                writer.WritePropertyName("scanRulesetType");
                writer.WriteStringValue(ScanRulesetType.Value.ToString());
            }
            if (Optional.IsDefined(ResourceNameFilter))
            {
                writer.WritePropertyName("resourceNameFilter");
                writer.WriteObjectValue(ResourceNameFilter);
            }
            if (Optional.IsDefined(Credential))
            {
                writer.WritePropertyName("credential");
                writer.WriteObjectValue(Credential);
            }
            writer.WriteEndObject();
        }

        internal static ResourceTypeFilter DeserializeResourceTypeFilter(JsonElement element)
        {
            Optional<string> scanRulesetName = default;
            Optional<ScanRulesetType> scanRulesetType = default;
            Optional<ResourceTypeFilterResourceNameFilter> resourceNameFilter = default;
            Optional<ResourceTypeFilterCredential> credential = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("scanRulesetName"))
                {
                    scanRulesetName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("scanRulesetType"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    scanRulesetType = new ScanRulesetType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("resourceNameFilter"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    resourceNameFilter = ResourceTypeFilterResourceNameFilter.DeserializeResourceTypeFilterResourceNameFilter(property.Value);
                    continue;
                }
                if (property.NameEquals("credential"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    credential = ResourceTypeFilterCredential.DeserializeResourceTypeFilterCredential(property.Value);
                    continue;
                }
            }
            return new ResourceTypeFilter(scanRulesetName.Value, Optional.ToNullable(scanRulesetType), resourceNameFilter.Value, credential.Value);
        }
    }
}
