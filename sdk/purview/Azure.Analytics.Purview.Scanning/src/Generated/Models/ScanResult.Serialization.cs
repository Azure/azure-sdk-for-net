// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.Analytics.Purview.Scanning.Models
{
    public partial class ScanResult
    {
        internal static ScanResult DeserializeScanResult(JsonElement element)
        {
            Optional<string> parentId = default;
            Optional<string> id = default;
            Optional<string> resourceId = default;
            Optional<string> status = default;
            Optional<long> assetsDiscovered = default;
            Optional<long> assetsClassified = default;
            Optional<ScanResultDiagnostics> diagnostics = default;
            Optional<DateTimeOffset> startTime = default;
            Optional<DateTimeOffset> queuedTime = default;
            Optional<DateTimeOffset> pipelineStartTime = default;
            Optional<DateTimeOffset> endTime = default;
            Optional<int> scanRulesetVersion = default;
            Optional<ScanRulesetType> scanRulesetType = default;
            Optional<ScanLevelType> scanLevelType = default;
            Optional<string> errorMessage = default;
            Optional<ScanResultError> error = default;
            Optional<string> runType = default;
            Optional<DataSourceType> dataSourceType = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("parentId"))
                {
                    parentId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("id"))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("resourceId"))
                {
                    resourceId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("status"))
                {
                    status = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("assetsDiscovered"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    assetsDiscovered = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("assetsClassified"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    assetsClassified = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("diagnostics"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    diagnostics = ScanResultDiagnostics.DeserializeScanResultDiagnostics(property.Value);
                    continue;
                }
                if (property.NameEquals("startTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    startTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("queuedTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    queuedTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("pipelineStartTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    pipelineStartTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("endTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    endTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("scanRulesetVersion"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    scanRulesetVersion = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("scanRulesetType"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    scanRulesetType = new ScanRulesetType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("scanLevelType"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    scanLevelType = new ScanLevelType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("errorMessage"))
                {
                    errorMessage = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("error"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    error = ScanResultError.DeserializeScanResultError(property.Value);
                    continue;
                }
                if (property.NameEquals("runType"))
                {
                    runType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("dataSourceType"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    dataSourceType = new DataSourceType(property.Value.GetString());
                    continue;
                }
            }
            return new ScanResult(parentId.Value, id.Value, resourceId.Value, status.Value, Optional.ToNullable(assetsDiscovered), Optional.ToNullable(assetsClassified), diagnostics.Value, Optional.ToNullable(startTime), Optional.ToNullable(queuedTime), Optional.ToNullable(pipelineStartTime), Optional.ToNullable(endTime), Optional.ToNullable(scanRulesetVersion), Optional.ToNullable(scanRulesetType), Optional.ToNullable(scanLevelType), errorMessage.Value, error.Value, runType.Value, Optional.ToNullable(dataSourceType));
        }
    }
}
