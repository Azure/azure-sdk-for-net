// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Analytics.Purview.Scanning.Models
{
    /// <summary> The DataSourceType. </summary>
    public readonly partial struct DataSourceType : IEquatable<DataSourceType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DataSourceType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DataSourceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NoneValue = "None";
        private const string AzureSubscriptionValue = "AzureSubscription";
        private const string AzureResourceGroupValue = "AzureResourceGroup";
        private const string AzureSynapseWorkspaceValue = "AzureSynapseWorkspace";
        private const string AzureSynapseValue = "AzureSynapse";
        private const string AdlsGen1Value = "AdlsGen1";
        private const string AdlsGen2Value = "AdlsGen2";
        private const string AmazonAccountValue = "AmazonAccount";
        private const string AmazonS3Value = "AmazonS3";
        private const string AmazonSqlValue = "AmazonSql";
        private const string AzureCosmosDbValue = "AzureCosmosDb";
        private const string AzureDataExplorerValue = "AzureDataExplorer";
        private const string AzureFileServiceValue = "AzureFileService";
        private const string AzureSqlDatabaseValue = "AzureSqlDatabase";
        private const string AmazonPostgreSqlValue = "AmazonPostgreSql";
        private const string AzurePostgreSqlValue = "AzurePostgreSql";
        private const string SqlServerDatabaseValue = "SqlServerDatabase";
        private const string AzureSqlDatabaseManagedInstanceValue = "AzureSqlDatabaseManagedInstance";
        private const string AzureSqlDataWarehouseValue = "AzureSqlDataWarehouse";
        private const string AzureMySqlValue = "AzureMySql";
        private const string AzureStorageValue = "AzureStorage";
        private const string TeradataValue = "Teradata";
        private const string OracleValue = "Oracle";
        private const string SapS4HanaValue = "SapS4Hana";
        private const string SapEccValue = "SapEcc";
        private const string PowerBIValue = "PowerBI";

        /// <summary> None. </summary>
        public static DataSourceType None { get; } = new DataSourceType(NoneValue);
        /// <summary> AzureSubscription. </summary>
        public static DataSourceType AzureSubscription { get; } = new DataSourceType(AzureSubscriptionValue);
        /// <summary> AzureResourceGroup. </summary>
        public static DataSourceType AzureResourceGroup { get; } = new DataSourceType(AzureResourceGroupValue);
        /// <summary> AzureSynapseWorkspace. </summary>
        public static DataSourceType AzureSynapseWorkspace { get; } = new DataSourceType(AzureSynapseWorkspaceValue);
        /// <summary> AzureSynapse. </summary>
        public static DataSourceType AzureSynapse { get; } = new DataSourceType(AzureSynapseValue);
        /// <summary> AdlsGen1. </summary>
        public static DataSourceType AdlsGen1 { get; } = new DataSourceType(AdlsGen1Value);
        /// <summary> AdlsGen2. </summary>
        public static DataSourceType AdlsGen2 { get; } = new DataSourceType(AdlsGen2Value);
        /// <summary> AmazonAccount. </summary>
        public static DataSourceType AmazonAccount { get; } = new DataSourceType(AmazonAccountValue);
        /// <summary> AmazonS3. </summary>
        public static DataSourceType AmazonS3 { get; } = new DataSourceType(AmazonS3Value);
        /// <summary> AmazonSql. </summary>
        public static DataSourceType AmazonSql { get; } = new DataSourceType(AmazonSqlValue);
        /// <summary> AzureCosmosDb. </summary>
        public static DataSourceType AzureCosmosDb { get; } = new DataSourceType(AzureCosmosDbValue);
        /// <summary> AzureDataExplorer. </summary>
        public static DataSourceType AzureDataExplorer { get; } = new DataSourceType(AzureDataExplorerValue);
        /// <summary> AzureFileService. </summary>
        public static DataSourceType AzureFileService { get; } = new DataSourceType(AzureFileServiceValue);
        /// <summary> AzureSqlDatabase. </summary>
        public static DataSourceType AzureSqlDatabase { get; } = new DataSourceType(AzureSqlDatabaseValue);
        /// <summary> AmazonPostgreSql. </summary>
        public static DataSourceType AmazonPostgreSql { get; } = new DataSourceType(AmazonPostgreSqlValue);
        /// <summary> AzurePostgreSql. </summary>
        public static DataSourceType AzurePostgreSql { get; } = new DataSourceType(AzurePostgreSqlValue);
        /// <summary> SqlServerDatabase. </summary>
        public static DataSourceType SqlServerDatabase { get; } = new DataSourceType(SqlServerDatabaseValue);
        /// <summary> AzureSqlDatabaseManagedInstance. </summary>
        public static DataSourceType AzureSqlDatabaseManagedInstance { get; } = new DataSourceType(AzureSqlDatabaseManagedInstanceValue);
        /// <summary> AzureSqlDataWarehouse. </summary>
        public static DataSourceType AzureSqlDataWarehouse { get; } = new DataSourceType(AzureSqlDataWarehouseValue);
        /// <summary> AzureMySql. </summary>
        public static DataSourceType AzureMySql { get; } = new DataSourceType(AzureMySqlValue);
        /// <summary> AzureStorage. </summary>
        public static DataSourceType AzureStorage { get; } = new DataSourceType(AzureStorageValue);
        /// <summary> Teradata. </summary>
        public static DataSourceType Teradata { get; } = new DataSourceType(TeradataValue);
        /// <summary> Oracle. </summary>
        public static DataSourceType Oracle { get; } = new DataSourceType(OracleValue);
        /// <summary> SapS4Hana. </summary>
        public static DataSourceType SapS4Hana { get; } = new DataSourceType(SapS4HanaValue);
        /// <summary> SapEcc. </summary>
        public static DataSourceType SapEcc { get; } = new DataSourceType(SapEccValue);
        /// <summary> PowerBI. </summary>
        public static DataSourceType PowerBI { get; } = new DataSourceType(PowerBIValue);
        /// <summary> Determines if two <see cref="DataSourceType"/> values are the same. </summary>
        public static bool operator ==(DataSourceType left, DataSourceType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DataSourceType"/> values are not the same. </summary>
        public static bool operator !=(DataSourceType left, DataSourceType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="DataSourceType"/>. </summary>
        public static implicit operator DataSourceType(string value) => new DataSourceType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DataSourceType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DataSourceType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
