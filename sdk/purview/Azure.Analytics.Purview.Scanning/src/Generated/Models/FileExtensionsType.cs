// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Analytics.Purview.Scanning.Models
{
    /// <summary> The FileExtensionsType. </summary>
    public readonly partial struct FileExtensionsType : IEquatable<FileExtensionsType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="FileExtensionsType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public FileExtensionsType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AvroValue = "AVRO";
        private const string ORCValue = "ORC";
        private const string ParquetValue = "PARQUET";
        private const string JsonValue = "JSON";
        private const string TXTValue = "TXT";
        private const string XMLValue = "XML";
        private const string DocumentsValue = "Documents";
        private const string CSVValue = "CSV";
        private const string PSVValue = "PSV";
        private const string SSVValue = "SSV";
        private const string TSVValue = "TSV";
        private const string GZValue = "GZ";
        private const string DOCValue = "DOC";
        private const string DocmValue = "DOCM";
        private const string DocxValue = "DOCX";
        private const string DOTValue = "DOT";
        private const string ODPValue = "ODP";
        private const string ODSValue = "ODS";
        private const string ODTValue = "ODT";
        private const string PDFValue = "PDF";
        private const string POTValue = "POT";
        private const string PPSValue = "PPS";
        private const string PpsxValue = "PPSX";
        private const string PPTValue = "PPT";
        private const string PptmValue = "PPTM";
        private const string PptxValue = "PPTX";
        private const string XLCValue = "XLC";
        private const string XLSValue = "XLS";
        private const string XlsbValue = "XLSB";
        private const string XlsmValue = "XLSM";
        private const string XlsxValue = "XLSX";
        private const string XLTValue = "XLT";

        /// <summary> AVRO. </summary>
        public static FileExtensionsType Avro { get; } = new FileExtensionsType(AvroValue);
        /// <summary> ORC. </summary>
        public static FileExtensionsType ORC { get; } = new FileExtensionsType(ORCValue);
        /// <summary> PARQUET. </summary>
        public static FileExtensionsType Parquet { get; } = new FileExtensionsType(ParquetValue);
        /// <summary> JSON. </summary>
        public static FileExtensionsType Json { get; } = new FileExtensionsType(JsonValue);
        /// <summary> TXT. </summary>
        public static FileExtensionsType TXT { get; } = new FileExtensionsType(TXTValue);
        /// <summary> XML. </summary>
        public static FileExtensionsType XML { get; } = new FileExtensionsType(XMLValue);
        /// <summary> Documents. </summary>
        public static FileExtensionsType Documents { get; } = new FileExtensionsType(DocumentsValue);
        /// <summary> CSV. </summary>
        public static FileExtensionsType CSV { get; } = new FileExtensionsType(CSVValue);
        /// <summary> PSV. </summary>
        public static FileExtensionsType PSV { get; } = new FileExtensionsType(PSVValue);
        /// <summary> SSV. </summary>
        public static FileExtensionsType SSV { get; } = new FileExtensionsType(SSVValue);
        /// <summary> TSV. </summary>
        public static FileExtensionsType TSV { get; } = new FileExtensionsType(TSVValue);
        /// <summary> GZ. </summary>
        public static FileExtensionsType GZ { get; } = new FileExtensionsType(GZValue);
        /// <summary> DOC. </summary>
        public static FileExtensionsType DOC { get; } = new FileExtensionsType(DOCValue);
        /// <summary> DOCM. </summary>
        public static FileExtensionsType Docm { get; } = new FileExtensionsType(DocmValue);
        /// <summary> DOCX. </summary>
        public static FileExtensionsType Docx { get; } = new FileExtensionsType(DocxValue);
        /// <summary> DOT. </summary>
        public static FileExtensionsType DOT { get; } = new FileExtensionsType(DOTValue);
        /// <summary> ODP. </summary>
        public static FileExtensionsType ODP { get; } = new FileExtensionsType(ODPValue);
        /// <summary> ODS. </summary>
        public static FileExtensionsType ODS { get; } = new FileExtensionsType(ODSValue);
        /// <summary> ODT. </summary>
        public static FileExtensionsType ODT { get; } = new FileExtensionsType(ODTValue);
        /// <summary> PDF. </summary>
        public static FileExtensionsType PDF { get; } = new FileExtensionsType(PDFValue);
        /// <summary> POT. </summary>
        public static FileExtensionsType POT { get; } = new FileExtensionsType(POTValue);
        /// <summary> PPS. </summary>
        public static FileExtensionsType PPS { get; } = new FileExtensionsType(PPSValue);
        /// <summary> PPSX. </summary>
        public static FileExtensionsType Ppsx { get; } = new FileExtensionsType(PpsxValue);
        /// <summary> PPT. </summary>
        public static FileExtensionsType PPT { get; } = new FileExtensionsType(PPTValue);
        /// <summary> PPTM. </summary>
        public static FileExtensionsType Pptm { get; } = new FileExtensionsType(PptmValue);
        /// <summary> PPTX. </summary>
        public static FileExtensionsType Pptx { get; } = new FileExtensionsType(PptxValue);
        /// <summary> XLC. </summary>
        public static FileExtensionsType XLC { get; } = new FileExtensionsType(XLCValue);
        /// <summary> XLS. </summary>
        public static FileExtensionsType XLS { get; } = new FileExtensionsType(XLSValue);
        /// <summary> XLSB. </summary>
        public static FileExtensionsType Xlsb { get; } = new FileExtensionsType(XlsbValue);
        /// <summary> XLSM. </summary>
        public static FileExtensionsType Xlsm { get; } = new FileExtensionsType(XlsmValue);
        /// <summary> XLSX. </summary>
        public static FileExtensionsType Xlsx { get; } = new FileExtensionsType(XlsxValue);
        /// <summary> XLT. </summary>
        public static FileExtensionsType XLT { get; } = new FileExtensionsType(XLTValue);
        /// <summary> Determines if two <see cref="FileExtensionsType"/> values are the same. </summary>
        public static bool operator ==(FileExtensionsType left, FileExtensionsType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="FileExtensionsType"/> values are not the same. </summary>
        public static bool operator !=(FileExtensionsType left, FileExtensionsType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="FileExtensionsType"/>. </summary>
        public static implicit operator FileExtensionsType(string value) => new FileExtensionsType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is FileExtensionsType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(FileExtensionsType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
