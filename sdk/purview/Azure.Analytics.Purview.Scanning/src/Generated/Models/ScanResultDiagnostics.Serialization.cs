// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Analytics.Purview.Scanning.Models
{
    public partial class ScanResultDiagnostics
    {
        internal static ScanResultDiagnostics DeserializeScanResultDiagnostics(JsonElement element)
        {
            Optional<IReadOnlyList<Notification>> notifications = default;
            Optional<IReadOnlyDictionary<string, int>> exceptionCountMap = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("notifications"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<Notification> array = new List<Notification>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Notification.DeserializeNotification(item));
                    }
                    notifications = array;
                    continue;
                }
                if (property.NameEquals("exceptionCountMap"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, int> dictionary = new Dictionary<string, int>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetInt32());
                    }
                    exceptionCountMap = dictionary;
                    continue;
                }
            }
            return new ScanResultDiagnostics(Optional.ToList(notifications), Optional.ToDictionary(exceptionCountMap));
        }
    }
}
