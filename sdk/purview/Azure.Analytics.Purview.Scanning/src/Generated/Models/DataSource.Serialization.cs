// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Analytics.Purview.Scanning.Models
{
    public partial class DataSource : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("kind");
            writer.WriteStringValue(Kind.ToString());
            writer.WriteEndObject();
        }

        internal static DataSource DeserializeDataSource(JsonElement element)
        {
            if (element.TryGetProperty("kind", out JsonElement discriminator))
            {
                switch (discriminator.GetString())
                {
                    case "AdlsGen1": return AdlsGen1DataSource.DeserializeAdlsGen1DataSource(element);
                    case "AdlsGen2": return AdlsGen2DataSource.DeserializeAdlsGen2DataSource(element);
                    case "AmazonAccount": return AmazonAccountDataSource.DeserializeAmazonAccountDataSource(element);
                    case "AmazonPostgreSql": return AmazonPostgreSqlDataSource.DeserializeAmazonPostgreSqlDataSource(element);
                    case "AmazonS3": return AmazonS3DataSource.DeserializeAmazonS3DataSource(element);
                    case "AmazonSql": return AmazonSqlDataSource.DeserializeAmazonSqlDataSource(element);
                    case "AzureCosmosDb": return AzureCosmosDbDataSource.DeserializeAzureCosmosDbDataSource(element);
                    case "AzureDataExplorer": return AzureDataExplorerDataSource.DeserializeAzureDataExplorerDataSource(element);
                    case "AzureFileService": return AzureFileServiceDataSource.DeserializeAzureFileServiceDataSource(element);
                    case "AzureMySql": return AzureMySqlDataSource.DeserializeAzureMySqlDataSource(element);
                    case "AzurePostgreSql": return AzurePostgreSqlDataSource.DeserializeAzurePostgreSqlDataSource(element);
                    case "AzureResourceGroup": return AzureResourceGroupDataSource.DeserializeAzureResourceGroupDataSource(element);
                    case "AzureSqlDataWarehouse": return AzureSqlDataWarehouseDataSource.DeserializeAzureSqlDataWarehouseDataSource(element);
                    case "AzureSqlDatabase": return AzureSqlDatabaseDataSource.DeserializeAzureSqlDatabaseDataSource(element);
                    case "AzureSqlDatabaseManagedInstance": return AzureSqlDatabaseManagedInstanceDataSource.DeserializeAzureSqlDatabaseManagedInstanceDataSource(element);
                    case "AzureStorage": return AzureStorageDataSource.DeserializeAzureStorageDataSource(element);
                    case "AzureSubscription": return AzureSubscriptionDataSource.DeserializeAzureSubscriptionDataSource(element);
                    case "AzureSynapse": return AzureSynapseDataSource.DeserializeAzureSynapseDataSource(element);
                    case "AzureSynapseWorkspace": return AzureSynapseWorkspaceDataSource.DeserializeAzureSynapseWorkspaceDataSource(element);
                    case "Oracle": return OracleDataSource.DeserializeOracleDataSource(element);
                    case "PowerBI": return PowerBIDataSource.DeserializePowerBIDataSource(element);
                    case "SapEcc": return SapEccDataSource.DeserializeSapEccDataSource(element);
                    case "SapS4Hana": return SapS4HanaDataSource.DeserializeSapS4HanaDataSource(element);
                    case "SqlServerDatabase": return SqlServerDatabaseDataSource.DeserializeSqlServerDatabaseDataSource(element);
                    case "Teradata": return TeradataDataSource.DeserializeTeradataDataSource(element);
                }
            }
            DataSourceType kind = default;
            Optional<IReadOnlyList<Scan>> scans = default;
            Optional<string> id = default;
            Optional<string> name = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("kind"))
                {
                    kind = new DataSourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("scans"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<Scan> array = new List<Scan>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Scan.DeserializeScan(item));
                    }
                    scans = array;
                    continue;
                }
                if (property.NameEquals("id"))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
            }
            return new DataSource(id.Value, name.Value, kind, Optional.ToList(scans));
        }
    }
}
