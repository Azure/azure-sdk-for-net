// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Analytics.Purview.Scanning.Models
{
    /// <summary> The TriggerFrequency. </summary>
    public readonly partial struct TriggerFrequency : IEquatable<TriggerFrequency>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="TriggerFrequency"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public TriggerFrequency(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string WeekValue = "Week";
        private const string MonthValue = "Month";

        /// <summary> Week. </summary>
        public static TriggerFrequency Week { get; } = new TriggerFrequency(WeekValue);
        /// <summary> Month. </summary>
        public static TriggerFrequency Month { get; } = new TriggerFrequency(MonthValue);
        /// <summary> Determines if two <see cref="TriggerFrequency"/> values are the same. </summary>
        public static bool operator ==(TriggerFrequency left, TriggerFrequency right) => left.Equals(right);
        /// <summary> Determines if two <see cref="TriggerFrequency"/> values are not the same. </summary>
        public static bool operator !=(TriggerFrequency left, TriggerFrequency right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="TriggerFrequency"/>. </summary>
        public static implicit operator TriggerFrequency(string value) => new TriggerFrequency(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is TriggerFrequency other && Equals(other);
        /// <inheritdoc />
        public bool Equals(TriggerFrequency other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
