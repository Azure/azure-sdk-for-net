// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Analytics.Purview.Scanning.Models
{
    public partial class Scan : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("kind");
            writer.WriteStringValue(Kind.ToString());
            writer.WriteEndObject();
        }

        internal static Scan DeserializeScan(JsonElement element)
        {
            if (element.TryGetProperty("kind", out JsonElement discriminator))
            {
                switch (discriminator.GetString())
                {
                    case "AdlsGen1Credential": return AdlsGen1CredentialScan.DeserializeAdlsGen1CredentialScan(element);
                    case "AdlsGen1Msi": return AdlsGen1MsiScan.DeserializeAdlsGen1MsiScan(element);
                    case "AdlsGen2Credential": return AdlsGen2CredentialScan.DeserializeAdlsGen2CredentialScan(element);
                    case "AdlsGen2Msi": return AdlsGen2MsiScan.DeserializeAdlsGen2MsiScan(element);
                    case "AmazonAccountCredential": return AmazonAccountCredentialScan.DeserializeAmazonAccountCredentialScan(element);
                    case "AmazonPostgreSqlCredential": return AmazonPostgreSqlCredentialScan.DeserializeAmazonPostgreSqlCredentialScan(element);
                    case "AmazonS3Credential": return AmazonS3CredentialScan.DeserializeAmazonS3CredentialScan(element);
                    case "AmazonS3RoleARN": return AmazonS3RoleARNScan.DeserializeAmazonS3RoleARNScan(element);
                    case "AmazonSqlCredential": return AmazonSqlCredentialScan.DeserializeAmazonSqlCredentialScan(element);
                    case "AzureCosmosDbCredential": return AzureCosmosDbCredentialScan.DeserializeAzureCosmosDbCredentialScan(element);
                    case "AzureDataExplorerCredential": return AzureDataExplorerCredentialScan.DeserializeAzureDataExplorerCredentialScan(element);
                    case "AzureDataExplorerMsi": return AzureDataExplorerMsiScan.DeserializeAzureDataExplorerMsiScan(element);
                    case "AzureFileServiceCredential": return AzureFileServiceCredentialScan.DeserializeAzureFileServiceCredentialScan(element);
                    case "AzureMySqlCredential": return AzureMySqlCredentialScan.DeserializeAzureMySqlCredentialScan(element);
                    case "AzurePostgreSqlCredential": return AzurePostgreSqlCredentialScan.DeserializeAzurePostgreSqlCredentialScan(element);
                    case "AzureResourceGroupCredential": return AzureResourceGroupCredentialScan.DeserializeAzureResourceGroupCredentialScan(element);
                    case "AzureResourceGroupMsi": return AzureResourceGroupMsiScan.DeserializeAzureResourceGroupMsiScan(element);
                    case "AzureSqlDataWarehouseCredential": return AzureSqlDataWarehouseCredentialScan.DeserializeAzureSqlDataWarehouseCredentialScan(element);
                    case "AzureSqlDataWarehouseMsi": return AzureSqlDataWarehouseMsiScan.DeserializeAzureSqlDataWarehouseMsiScan(element);
                    case "AzureSqlDatabaseCredential": return AzureSqlDatabaseCredentialScan.DeserializeAzureSqlDatabaseCredentialScan(element);
                    case "AzureSqlDatabaseManagedInstanceCredential": return AzureSqlDatabaseManagedInstanceCredentialScan.DeserializeAzureSqlDatabaseManagedInstanceCredentialScan(element);
                    case "AzureSqlDatabaseManagedInstanceMsi": return AzureSqlDatabaseManagedInstanceMsiScan.DeserializeAzureSqlDatabaseManagedInstanceMsiScan(element);
                    case "AzureSqlDatabaseMsi": return AzureSqlDatabaseMsiScan.DeserializeAzureSqlDatabaseMsiScan(element);
                    case "AzureStorageCredential": return AzureStorageCredentialScan.DeserializeAzureStorageCredentialScan(element);
                    case "AzureStorageMsi": return AzureStorageMsiScan.DeserializeAzureStorageMsiScan(element);
                    case "AzureSubscriptionCredential": return AzureSubscriptionCredentialScan.DeserializeAzureSubscriptionCredentialScan(element);
                    case "AzureSubscriptionMsi": return AzureSubscriptionMsiScan.DeserializeAzureSubscriptionMsiScan(element);
                    case "AzureSynapseCredential": return AzureSynapseCredentialScan.DeserializeAzureSynapseCredentialScan(element);
                    case "AzureSynapseMsi": return AzureSynapseMsiScan.DeserializeAzureSynapseMsiScan(element);
                    case "AzureSynapseWorkspaceCredential": return AzureSynapseWorkspaceCredentialScan.DeserializeAzureSynapseWorkspaceCredentialScan(element);
                    case "AzureSynapseWorkspaceMsi": return AzureSynapseWorkspaceMsiScan.DeserializeAzureSynapseWorkspaceMsiScan(element);
                    case "OracleOracleCredential": return OracleCredentialScan.DeserializeOracleCredentialScan(element);
                    case "OracleOracleUserPass": return OracleUserPassScan.DeserializeOracleUserPassScan(element);
                    case "PowerBIDelegated": return PowerBIDelegatedScan.DeserializePowerBIDelegatedScan(element);
                    case "PowerBIMsi": return PowerBIMsiScan.DeserializePowerBIMsiScan(element);
                    case "SapEccSapEccCredential": return SapEccCredentialScan.DeserializeSapEccCredentialScan(element);
                    case "SapEccSapEccUserPass": return SapEccUserPassScan.DeserializeSapEccUserPassScan(element);
                    case "SapS4HanaSapS4HanaCredential": return SapS4HanaSapS4HanaCredentialScan.DeserializeSapS4HanaSapS4HanaCredentialScan(element);
                    case "SapS4HanaSapS4HanaUserPass": return SapS4HanaSapS4HanaUserPassScan.DeserializeSapS4HanaSapS4HanaUserPassScan(element);
                    case "SqlServerDatabaseCredential": return SqlServerDatabaseCredentialScan.DeserializeSqlServerDatabaseCredentialScan(element);
                    case "TeradataTeradataCredential": return TeradataCredentialScan.DeserializeTeradataCredentialScan(element);
                    case "TeradataTeradataUserPass": return TeradataTeradataUserPassScan.DeserializeTeradataTeradataUserPassScan(element);
                    case "TeradataUserPass": return TeradataUserPassScan.DeserializeTeradataUserPassScan(element);
                }
            }
            ScanAuthorizationType kind = default;
            Optional<IReadOnlyList<ScanResult>> scanResults = default;
            Optional<string> id = default;
            Optional<string> name = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("kind"))
                {
                    kind = new ScanAuthorizationType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("scanResults"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<ScanResult> array = new List<ScanResult>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ScanResult.DeserializeScanResult(item));
                    }
                    scanResults = array;
                    continue;
                }
                if (property.NameEquals("id"))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
            }
            return new Scan(id.Value, name.Value, kind, Optional.ToList(scanResults));
        }
    }
}
