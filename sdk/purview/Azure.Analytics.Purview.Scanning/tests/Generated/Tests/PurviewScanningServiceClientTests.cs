// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Analytics.Purview.Scanning.Tests
{
    public partial class PurviewScanningServiceClientTests : AnalyticsPurviewScanningTestBase
    {
        public PurviewScanningServiceClientTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetKeyVaultReference_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewScanningServiceClient client = CreatePurviewScanningServiceClient(endpoint, credential);

            Response response = await client.GetKeyVaultReferenceAsync("<keyVaultName>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetKeyVaultReference_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewScanningServiceClient client = CreatePurviewScanningServiceClient(endpoint, credential);

            Response response = await client.GetKeyVaultReferenceAsync("<keyVaultName>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task CreateOrUpdateKeyVaultReference_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewScanningServiceClient client = CreatePurviewScanningServiceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.CreateOrUpdateKeyVaultReferenceAsync("<keyVaultName>", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task CreateOrUpdateKeyVaultReference_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewScanningServiceClient client = CreatePurviewScanningServiceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    baseUrl = "<baseUrl>",
                    description = "<description>",
                },
            });
            Response response = await client.CreateOrUpdateKeyVaultReferenceAsync("<keyVaultName>", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DeleteKeyVaultReference_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewScanningServiceClient client = CreatePurviewScanningServiceClient(endpoint, credential);

            Response response = await client.DeleteKeyVaultReferenceAsync("<keyVaultName>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DeleteKeyVaultReference_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewScanningServiceClient client = CreatePurviewScanningServiceClient(endpoint, credential);

            Response response = await client.DeleteKeyVaultReferenceAsync("<keyVaultName>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetScanRuleset_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewScanningServiceClient client = CreatePurviewScanningServiceClient(endpoint, credential);

            Response response = await client.GetScanRulesetAsync("<scanRulesetName>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetScanRuleset_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewScanningServiceClient client = CreatePurviewScanningServiceClient(endpoint, credential);

            Response response = await client.GetScanRulesetAsync("<scanRulesetName>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task CreateOrUpdateScanRuleset_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewScanningServiceClient client = CreatePurviewScanningServiceClient(endpoint, credential);

            using RequestContent content = null;
            Response response = await client.CreateOrUpdateScanRulesetAsync("<scanRulesetName>", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task CreateOrUpdateScanRuleset_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewScanningServiceClient client = CreatePurviewScanningServiceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    description = "<description>",
                    excludedSystemClassifications = new object[]
            {
"<excludedSystemClassifications>"
            },
                    includedCustomClassificationRuleNames = new object[]
            {
"<includedCustomClassificationRuleNames>"
            },
                },
                kind = "AzureSubscription",
                scanRulesetType = "Custom",
            });
            Response response = await client.CreateOrUpdateScanRulesetAsync("<scanRulesetName>", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DeleteScanRuleset_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewScanningServiceClient client = CreatePurviewScanningServiceClient(endpoint, credential);

            Response response = await client.DeleteScanRulesetAsync("<scanRulesetName>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DeleteScanRuleset_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewScanningServiceClient client = CreatePurviewScanningServiceClient(endpoint, credential);

            Response response = await client.DeleteScanRulesetAsync("<scanRulesetName>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetSystemRulesetsForDataSource_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewScanningServiceClient client = CreatePurviewScanningServiceClient(endpoint, credential);

            Response response = await client.GetSystemRulesetsForDataSourceAsync("None", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetSystemRulesetsForDataSource_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewScanningServiceClient client = CreatePurviewScanningServiceClient(endpoint, credential);

            Response response = await client.GetSystemRulesetsForDataSourceAsync("None", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetSystemRulesetsForVersion_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewScanningServiceClient client = CreatePurviewScanningServiceClient(endpoint, credential);

            Response response = await client.GetSystemRulesetsForVersionAsync(1234, null, null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetSystemRulesetsForVersion_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewScanningServiceClient client = CreatePurviewScanningServiceClient(endpoint, credential);

            Response response = await client.GetSystemRulesetsForVersionAsync(1234, "None", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetLatestSystemRulesets_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewScanningServiceClient client = CreatePurviewScanningServiceClient(endpoint, credential);

            Response response = await client.GetLatestSystemRulesetsAsync(null, null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetLatestSystemRulesets_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewScanningServiceClient client = CreatePurviewScanningServiceClient(endpoint, credential);

            Response response = await client.GetLatestSystemRulesetsAsync("None", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetKeyVaultReferences_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewScanningServiceClient client = CreatePurviewScanningServiceClient(endpoint, credential);

            await foreach (BinaryData item in client.GetKeyVaultReferencesAsync(null))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetKeyVaultReferences_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewScanningServiceClient client = CreatePurviewScanningServiceClient(endpoint, credential);

            await foreach (BinaryData item in client.GetKeyVaultReferencesAsync(null))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetClassificationRules_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewScanningServiceClient client = CreatePurviewScanningServiceClient(endpoint, credential);

            await foreach (BinaryData item in client.GetClassificationRulesAsync(null))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetClassificationRules_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewScanningServiceClient client = CreatePurviewScanningServiceClient(endpoint, credential);

            await foreach (BinaryData item in client.GetClassificationRulesAsync(null))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetDataSources_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewScanningServiceClient client = CreatePurviewScanningServiceClient(endpoint, credential);

            await foreach (BinaryData item in client.GetDataSourcesAsync(null))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetDataSources_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewScanningServiceClient client = CreatePurviewScanningServiceClient(endpoint, credential);

            await foreach (BinaryData item in client.GetDataSourcesAsync(null))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetScanRulesets_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewScanningServiceClient client = CreatePurviewScanningServiceClient(endpoint, credential);

            await foreach (BinaryData item in client.GetScanRulesetsAsync(null))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetScanRulesets_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewScanningServiceClient client = CreatePurviewScanningServiceClient(endpoint, credential);

            await foreach (BinaryData item in client.GetScanRulesetsAsync(null))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetSystemRulesets_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewScanningServiceClient client = CreatePurviewScanningServiceClient(endpoint, credential);

            await foreach (BinaryData item in client.GetSystemRulesetsAsync(null))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetSystemRulesets_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewScanningServiceClient client = CreatePurviewScanningServiceClient(endpoint, credential);

            await foreach (BinaryData item in client.GetSystemRulesetsAsync(null))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetSystemRulesetsVersions_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewScanningServiceClient client = CreatePurviewScanningServiceClient(endpoint, credential);

            await foreach (BinaryData item in client.GetSystemRulesetsVersionsAsync(null, null))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetSystemRulesetsVersions_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewScanningServiceClient client = CreatePurviewScanningServiceClient(endpoint, credential);

            await foreach (BinaryData item in client.GetSystemRulesetsVersionsAsync("None", null))
            {
            }
        }
    }
}
