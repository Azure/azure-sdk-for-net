// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Analytics.Purview.Scanning.Tests
{
    public partial class PurviewScanClientTests : AnalyticsPurviewScanningTestBase
    {
        public PurviewScanClientTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetFilter_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewScanClient client = CreatePurviewScanClient(endpoint, "<DataSourceName>", "<ScanName>", credential);

            Response response = await client.GetFilterAsync(null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetFilter_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewScanClient client = CreatePurviewScanClient(endpoint, "<DataSourceName>", "<ScanName>", credential);

            Response response = await client.GetFilterAsync(null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task CreateOrUpdateFilter_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewScanClient client = CreatePurviewScanClient(endpoint, "<DataSourceName>", "<ScanName>", credential);

            using RequestContent content = null;
            Response response = await client.CreateOrUpdateFilterAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task CreateOrUpdateFilter_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewScanClient client = CreatePurviewScanClient(endpoint, "<DataSourceName>", "<ScanName>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    excludeUriPrefixes = new object[]
            {
"<excludeUriPrefixes>"
            },
                    includeUriPrefixes = new object[]
            {
"<includeUriPrefixes>"
            },
                },
            });
            Response response = await client.CreateOrUpdateFilterAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task CreateOrUpdate_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewScanClient client = CreatePurviewScanClient(endpoint, "<DataSourceName>", "<ScanName>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                kind = "AzureSubscriptionCredential",
            });
            Response response = await client.CreateOrUpdateAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task CreateOrUpdate_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewScanClient client = CreatePurviewScanClient(endpoint, "<DataSourceName>", "<ScanName>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    resourceTypes = new
                    {
                        None = new
                        {
                            scanRulesetName = "<scanRulesetName>",
                            scanRulesetType = "Custom",
                            resourceNameFilter = new
                            {
                                excludePrefixes = new object[]
            {
"<excludePrefixes>"
            },
                                includePrefixes = new object[]
            {
"<includePrefixes>"
            },
                                resources = new object[]
            {
"<resources>"
            },
                            },
                            credential = new
                            {
                                referenceName = "<referenceName>",
                                credentialType = "AccountKey",
                            },
                        },
                    },
                    credential = new
                    {
                        referenceName = "<referenceName>",
                        credentialType = "AccountKey",
                    },
                    scanRulesetName = "<scanRulesetName>",
                    scanRulesetType = "Custom",
                    collection = new
                    {
                        referenceName = "<referenceName>",
                    },
                    workers = 1234,
                    connectedVia = new
                    {
                        referenceName = "<referenceName>",
                    },
                },
                kind = "AzureSubscriptionCredential",
            });
            Response response = await client.CreateOrUpdateAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetProperties_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewScanClient client = CreatePurviewScanClient(endpoint, "<DataSourceName>", "<ScanName>", credential);

            Response response = await client.GetPropertiesAsync(null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetProperties_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewScanClient client = CreatePurviewScanClient(endpoint, "<DataSourceName>", "<ScanName>", credential);

            Response response = await client.GetPropertiesAsync(null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Delete_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewScanClient client = CreatePurviewScanClient(endpoint, "<DataSourceName>", "<ScanName>", credential);

            Response response = await client.DeleteAsync(null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Delete_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewScanClient client = CreatePurviewScanClient(endpoint, "<DataSourceName>", "<ScanName>", credential);

            Response response = await client.DeleteAsync(null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task RunScan_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewScanClient client = CreatePurviewScanClient(endpoint, "<DataSourceName>", "<ScanName>", credential);

            Response response = await client.RunScanAsync("<runId>", null, null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task RunScan_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewScanClient client = CreatePurviewScanClient(endpoint, "<DataSourceName>", "<ScanName>", credential);

            Response response = await client.RunScanAsync("<runId>", "Full", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task CancelScan_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewScanClient client = CreatePurviewScanClient(endpoint, "<DataSourceName>", "<ScanName>", credential);

            Response response = await client.CancelScanAsync("<runId>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task CancelScan_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewScanClient client = CreatePurviewScanClient(endpoint, "<DataSourceName>", "<ScanName>", credential);

            Response response = await client.CancelScanAsync("<runId>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetTrigger_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewScanClient client = CreatePurviewScanClient(endpoint, "<DataSourceName>", "<ScanName>", credential);

            Response response = await client.GetTriggerAsync(null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetTrigger_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewScanClient client = CreatePurviewScanClient(endpoint, "<DataSourceName>", "<ScanName>", credential);

            Response response = await client.GetTriggerAsync(null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task CreateOrUpdateTrigger_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewScanClient client = CreatePurviewScanClient(endpoint, "<DataSourceName>", "<ScanName>", credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.CreateOrUpdateTriggerAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task CreateOrUpdateTrigger_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewScanClient client = CreatePurviewScanClient(endpoint, "<DataSourceName>", "<ScanName>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    recurrence = new
                    {
                        frequency = "Week",
                        interval = 1234,
                        startTime = "2022-05-10T18:57:31.2311892Z",
                        endTime = "2022-05-10T18:57:31.2311892Z",
                        schedule = new
                        {
                            additionalProperties = new
                            {
                                key = new object(),
                            },
                            minutes = new object[]
            {
1234
            },
                            hours = new object[]
            {
1234
            },
                            weekDays = new object[]
            {
"Sunday"
            },
                            monthDays = new object[]
            {
1234
            },
                            monthlyOccurrences = new object[]
            {
new
{
additionalProperties = new
{
key = new object(),
},
day = "Sunday",
occurrence = 1234,
}
            },
                        },
                        timeZone = "<timeZone>",
                    },
                    recurrenceInterval = "<recurrenceInterval>",
                    scanLevel = "Full",
                    incrementalScanStartTime = "2022-05-10T18:57:31.2311892Z",
                },
            });
            Response response = await client.CreateOrUpdateTriggerAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DeleteTrigger_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewScanClient client = CreatePurviewScanClient(endpoint, "<DataSourceName>", "<ScanName>", credential);

            Response response = await client.DeleteTriggerAsync(null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DeleteTrigger_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewScanClient client = CreatePurviewScanClient(endpoint, "<DataSourceName>", "<ScanName>", credential);

            Response response = await client.DeleteTriggerAsync(null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetRuns_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewScanClient client = CreatePurviewScanClient(endpoint, "<DataSourceName>", "<ScanName>", credential);

            await foreach (BinaryData item in client.GetRunsAsync(null))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetRuns_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewScanClient client = CreatePurviewScanClient(endpoint, "<DataSourceName>", "<ScanName>", credential);

            await foreach (BinaryData item in client.GetRunsAsync(null))
            {
            }
        }
    }
}
