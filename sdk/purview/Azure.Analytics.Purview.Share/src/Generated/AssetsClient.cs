// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Analytics.Purview.Share
{
    // Data plane generated client. The Assets service client.
    /// <summary> The Assets service client. </summary>
    public partial class AssetsClient
    {
        private static readonly string[] AuthorizationScopes = new string[] { "https://purview.azure.net/.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly string _endpoint;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of AssetsClient for mocking. </summary>
        protected AssetsClient()
        {
        }

        /// <summary> Initializes a new instance of AssetsClient. </summary>
        /// <param name="endpoint"> The scanning endpoint of your purview account. Example: https://{accountName}.purview.azure.com/share. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public AssetsClient(string endpoint, TokenCredential credential) : this(endpoint, credential, new PurviewShareClientOptions())
        {
        }

        /// <summary> Initializes a new instance of AssetsClient. </summary>
        /// <param name="endpoint"> The scanning endpoint of your purview account. Example: https://{accountName}.purview.azure.com/share. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public AssetsClient(string endpoint, TokenCredential credential, PurviewShareClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            Argument.AssertNotNull(credential, nameof(credential));
            options ??= new PurviewShareClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes) }, new ResponseClassifier());
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        /// <summary> Get asset in a sentShare. </summary>
        /// <param name="sentShareName"> The name of the sent share. </param>
        /// <param name="assetName"> The name of the asset. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sentShareName"/> or <paramref name="assetName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="sentShareName"/> or <paramref name="assetName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetAssetAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new AssetsClient("<https://my-service.azure.com>", credential);
        /// 
        /// Response response = await client.GetAssetAsync("<sentShareName>", "<assetName>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("kind").ToString());
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("type").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Get an asset on a sent share
        /// 
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// This method takes one of the JSON objects below as a payload. Please select a JSON object to view the schema for this.
        /// <details><summary>AdlsGen2AccountAsset</summary>Schema for <c>AdlsGen2AccountAsset</c>:
        /// <code>{
        ///   properties: {
        ///     location: string, # Optional. Location of the adls gen2 storage account.
        ///     paths: [
        ///       {
        ///         containerName: string, # Required. Gets or sets the container name.
        ///         receiverPath: string, # Optional. Gets or sets the path on the receiver side where the asset is to be mapped.
        ///         senderPath: string, # Optional. Gets or sets the path to file/folder within the container to be shared.
        ///       }
        ///     ], # Required. A list of adls gen2 storage account paths to be shared.
        ///     provisioningState: &quot;Unknown&quot; | &quot;Succeeded&quot; | &quot;Creating&quot; | &quot;Deleting&quot; | &quot;Moving&quot; | &quot;Failed&quot; | &quot;SoftDeleting&quot; | &quot;SoftDeleted&quot; | &quot;SourceMoved&quot; | &quot;SourceDeleted&quot; | &quot;TargetMoved&quot; | &quot;TargetDeleted&quot;, # Optional. Provisioning status of the resource
        ///     receiverAssetName: string, # Required. Name of the asset for the receiver.
        ///     storageAccountResourceId: string, # Required. Resource id of the adls gen2 storage account.
        ///   }, # Required. Adls gen 2 account asset properties
        ///   kind: AdlsGen2Account, # Required. The types of asset.
        ///   id: string, # Optional. The resource id of the resource.
        ///   name: string, # Optional. Name of the resource.
        ///   type: string, # Optional. Type of the resource.
        /// }
        /// </code>
        /// </details>
        /// <details><summary>~+ 1 more JSON objects</summary><details><summary>BlobAccountAsset</summary>Schema for <c>BlobAccountAsset</c>:
        /// <code>{
        ///   properties: {
        ///     location: string, # Optional. Location of the blob storage account.
        ///     paths: [
        ///       {
        ///         containerName: string, # Required. Gets or sets the container name.
        ///         receiverPath: string, # Optional. Gets or sets the path on the receiver side where the asset is to be mapped.
        ///         senderPath: string, # Optional. Gets or sets the path to file/folder within the container to be shared.
        ///       }
        ///     ], # Required. A list of blob storage account paths to be shared.
        ///     provisioningState: &quot;Unknown&quot; | &quot;Succeeded&quot; | &quot;Creating&quot; | &quot;Deleting&quot; | &quot;Moving&quot; | &quot;Failed&quot; | &quot;SoftDeleting&quot; | &quot;SoftDeleted&quot; | &quot;SourceMoved&quot; | &quot;SourceDeleted&quot; | &quot;TargetMoved&quot; | &quot;TargetDeleted&quot;, # Optional. Provisioning status of the resource
        ///     receiverAssetName: string, # Required. Name of the asset for the receiver.
        ///     storageAccountResourceId: string, # Required. Resource id of the blob storage account.
        ///   }, # Required. Blob storage account asset properties
        ///   kind: BlobAccount, # Required. The types of asset.
        ///   id: string, # Optional. The resource id of the resource.
        ///   name: string, # Optional. Name of the resource.
        ///   type: string, # Optional. Type of the resource.
        /// }
        /// </code>
        /// </details>
        /// </details>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetAssetAsync(string sentShareName, string assetName, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(sentShareName, nameof(sentShareName));
            Argument.AssertNotNullOrEmpty(assetName, nameof(assetName));

            using var scope = ClientDiagnostics.CreateScope("AssetsClient.GetAsset");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetAssetRequest(sentShareName, assetName, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get asset in a sentShare. </summary>
        /// <param name="sentShareName"> The name of the sent share. </param>
        /// <param name="assetName"> The name of the asset. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sentShareName"/> or <paramref name="assetName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="sentShareName"/> or <paramref name="assetName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetAsset with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new AssetsClient("<https://my-service.azure.com>", credential);
        /// 
        /// Response response = client.GetAsset("<sentShareName>", "<assetName>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("kind").ToString());
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("type").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Get an asset on a sent share
        /// 
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// This method takes one of the JSON objects below as a payload. Please select a JSON object to view the schema for this.
        /// <details><summary>AdlsGen2AccountAsset</summary>Schema for <c>AdlsGen2AccountAsset</c>:
        /// <code>{
        ///   properties: {
        ///     location: string, # Optional. Location of the adls gen2 storage account.
        ///     paths: [
        ///       {
        ///         containerName: string, # Required. Gets or sets the container name.
        ///         receiverPath: string, # Optional. Gets or sets the path on the receiver side where the asset is to be mapped.
        ///         senderPath: string, # Optional. Gets or sets the path to file/folder within the container to be shared.
        ///       }
        ///     ], # Required. A list of adls gen2 storage account paths to be shared.
        ///     provisioningState: &quot;Unknown&quot; | &quot;Succeeded&quot; | &quot;Creating&quot; | &quot;Deleting&quot; | &quot;Moving&quot; | &quot;Failed&quot; | &quot;SoftDeleting&quot; | &quot;SoftDeleted&quot; | &quot;SourceMoved&quot; | &quot;SourceDeleted&quot; | &quot;TargetMoved&quot; | &quot;TargetDeleted&quot;, # Optional. Provisioning status of the resource
        ///     receiverAssetName: string, # Required. Name of the asset for the receiver.
        ///     storageAccountResourceId: string, # Required. Resource id of the adls gen2 storage account.
        ///   }, # Required. Adls gen 2 account asset properties
        ///   kind: AdlsGen2Account, # Required. The types of asset.
        ///   id: string, # Optional. The resource id of the resource.
        ///   name: string, # Optional. Name of the resource.
        ///   type: string, # Optional. Type of the resource.
        /// }
        /// </code>
        /// </details>
        /// <details><summary>~+ 1 more JSON objects</summary><details><summary>BlobAccountAsset</summary>Schema for <c>BlobAccountAsset</c>:
        /// <code>{
        ///   properties: {
        ///     location: string, # Optional. Location of the blob storage account.
        ///     paths: [
        ///       {
        ///         containerName: string, # Required. Gets or sets the container name.
        ///         receiverPath: string, # Optional. Gets or sets the path on the receiver side where the asset is to be mapped.
        ///         senderPath: string, # Optional. Gets or sets the path to file/folder within the container to be shared.
        ///       }
        ///     ], # Required. A list of blob storage account paths to be shared.
        ///     provisioningState: &quot;Unknown&quot; | &quot;Succeeded&quot; | &quot;Creating&quot; | &quot;Deleting&quot; | &quot;Moving&quot; | &quot;Failed&quot; | &quot;SoftDeleting&quot; | &quot;SoftDeleted&quot; | &quot;SourceMoved&quot; | &quot;SourceDeleted&quot; | &quot;TargetMoved&quot; | &quot;TargetDeleted&quot;, # Optional. Provisioning status of the resource
        ///     receiverAssetName: string, # Required. Name of the asset for the receiver.
        ///     storageAccountResourceId: string, # Required. Resource id of the blob storage account.
        ///   }, # Required. Blob storage account asset properties
        ///   kind: BlobAccount, # Required. The types of asset.
        ///   id: string, # Optional. The resource id of the resource.
        ///   name: string, # Optional. Name of the resource.
        ///   type: string, # Optional. Type of the resource.
        /// }
        /// </code>
        /// </details>
        /// </details>
        /// 
        /// </remarks>
        public virtual Response GetAsset(string sentShareName, string assetName, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(sentShareName, nameof(sentShareName));
            Argument.AssertNotNullOrEmpty(assetName, nameof(assetName));

            using var scope = ClientDiagnostics.CreateScope("AssetsClient.GetAsset");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetAssetRequest(sentShareName, assetName, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List Assets in a share. </summary>
        /// <param name="sentShareName"> The name of the sent share. </param>
        /// <param name="skipToken"> The continuation token to list the next page. </param>
        /// <param name="filter"> Filters the results using OData syntax. </param>
        /// <param name="orderby"> Sorts the results using OData syntax. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sentShareName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="sentShareName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="AsyncPageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetAssetsAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new AssetsClient("<https://my-service.azure.com>", credential);
        /// 
        /// await foreach (var data in client.GetAssetsAsync("<sentShareName>"))
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.GetProperty("kind").ToString());
        ///     Console.WriteLine(result.ToString());
        /// }
        /// ]]></code>
        /// This sample shows how to call GetAssetsAsync with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new AssetsClient("<https://my-service.azure.com>", credential);
        /// 
        /// await foreach (var data in client.GetAssetsAsync("<sentShareName>", "<skipToken>", "<filter>", "<orderby>"))
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.GetProperty("kind").ToString());
        ///     Console.WriteLine(result.GetProperty("id").ToString());
        ///     Console.WriteLine(result.GetProperty("name").ToString());
        ///     Console.WriteLine(result.GetProperty("type").ToString());
        /// }
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// List assets on a sent share
        /// 
        /// Below is the JSON schema for one item in the pageable response.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>AssetListValue</c>:
        /// <code>{
        ///   kind: &quot;AdlsGen2Account&quot; | &quot;BlobAccount&quot;, # Required. The types of asset.
        ///   id: string, # Optional. The resource id of the resource.
        ///   name: string, # Optional. Name of the resource.
        ///   type: string, # Optional. Type of the resource.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual AsyncPageable<BinaryData> GetAssetsAsync(string sentShareName, string skipToken = null, string filter = null, string orderby = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(sentShareName, nameof(sentShareName));

            return GetAssetsImplementationAsync("AssetsClient.GetAssets", sentShareName, skipToken, filter, orderby, context);
        }

        private AsyncPageable<BinaryData> GetAssetsImplementationAsync(string diagnosticsScopeName, string sentShareName, string skipToken, string filter, string orderby, RequestContext context)
        {
            return PageableHelpers.CreateAsyncPageable(CreateEnumerableAsync, ClientDiagnostics, diagnosticsScopeName);
            async IAsyncEnumerable<Page<BinaryData>> CreateEnumerableAsync(string nextLink, int? pageSizeHint, [EnumeratorCancellation] CancellationToken cancellationToken = default)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetAssetsRequest(sentShareName, skipToken, filter, orderby, context)
                        : CreateGetAssetsNextPageRequest(nextLink, sentShareName, skipToken, filter, orderby, context);
                    var page = await LowLevelPageableHelpers.ProcessMessageAsync(_pipeline, message, context, "value", "nextLink", cancellationToken).ConfigureAwait(false);
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> List Assets in a share. </summary>
        /// <param name="sentShareName"> The name of the sent share. </param>
        /// <param name="skipToken"> The continuation token to list the next page. </param>
        /// <param name="filter"> Filters the results using OData syntax. </param>
        /// <param name="orderby"> Sorts the results using OData syntax. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sentShareName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="sentShareName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Pageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetAssets with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new AssetsClient("<https://my-service.azure.com>", credential);
        /// 
        /// foreach (var data in client.GetAssets("<sentShareName>"))
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.GetProperty("kind").ToString());
        ///     Console.WriteLine(result.ToString());
        /// }
        /// ]]></code>
        /// This sample shows how to call GetAssets with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new AssetsClient("<https://my-service.azure.com>", credential);
        /// 
        /// foreach (var data in client.GetAssets("<sentShareName>", "<skipToken>", "<filter>", "<orderby>"))
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.GetProperty("kind").ToString());
        ///     Console.WriteLine(result.GetProperty("id").ToString());
        ///     Console.WriteLine(result.GetProperty("name").ToString());
        ///     Console.WriteLine(result.GetProperty("type").ToString());
        /// }
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// List assets on a sent share
        /// 
        /// Below is the JSON schema for one item in the pageable response.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>AssetListValue</c>:
        /// <code>{
        ///   kind: &quot;AdlsGen2Account&quot; | &quot;BlobAccount&quot;, # Required. The types of asset.
        ///   id: string, # Optional. The resource id of the resource.
        ///   name: string, # Optional. Name of the resource.
        ///   type: string, # Optional. Type of the resource.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Pageable<BinaryData> GetAssets(string sentShareName, string skipToken = null, string filter = null, string orderby = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(sentShareName, nameof(sentShareName));

            return GetAssetsImplementation("AssetsClient.GetAssets", sentShareName, skipToken, filter, orderby, context);
        }

        private Pageable<BinaryData> GetAssetsImplementation(string diagnosticsScopeName, string sentShareName, string skipToken, string filter, string orderby, RequestContext context)
        {
            return PageableHelpers.CreatePageable(CreateEnumerable, ClientDiagnostics, diagnosticsScopeName);
            IEnumerable<Page<BinaryData>> CreateEnumerable(string nextLink, int? pageSizeHint)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetAssetsRequest(sentShareName, skipToken, filter, orderby, context)
                        : CreateGetAssetsNextPageRequest(nextLink, sentShareName, skipToken, filter, orderby, context);
                    var page = LowLevelPageableHelpers.ProcessMessage(_pipeline, message, context, "value", "nextLink");
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Adds a new asset to an existing share. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="sentShareName"> The name of the sent share. </param>
        /// <param name="assetName"> The name of the asset. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sentShareName"/>, <paramref name="assetName"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="sentShareName"/> or <paramref name="assetName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Operation{T}"/> from the service that will contain a <see cref="BinaryData"/> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call CreateAsync with required parameters and request content and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new AssetsClient("<https://my-service.azure.com>", credential);
        /// 
        /// var data = new {
        ///     properties = new {
        ///         paths = new[] {
        ///             new {
        ///                 containerName = "<containerName>",
        ///                 receiverPath = "<receiverPath>",
        ///                 senderPath = "<senderPath>",
        ///             }
        ///         },
        ///         receiverAssetName = "<receiverAssetName>",
        ///         storageAccountResourceId = "<storageAccountResourceId>",
        ///     },
        ///     kind = "AdlsGen2Account",
        /// };
        /// 
        /// var operation = await client.CreateAsync(WaitUntil.Completed, "<sentShareName>", "<assetName>", RequestContent.Create(data));
        /// 
        /// BinaryData data = await operation.WaitForCompletionAsync();
        /// JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        /// Console.WriteLine(result.GetProperty("kind").ToString());
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("type").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Create an asset on a sent share
        /// 
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// This method takes one of the JSON objects below as a payload. Please select a JSON object to view the schema for this.
        /// <details><summary>AdlsGen2AccountAsset</summary>Schema for <c>AdlsGen2AccountAsset</c>:
        /// <code>{
        ///   properties: {
        ///     location: string, # Optional. Location of the adls gen2 storage account.
        ///     paths: [
        ///       {
        ///         containerName: string, # Required. Gets or sets the container name.
        ///         receiverPath: string, # Optional. Gets or sets the path on the receiver side where the asset is to be mapped.
        ///         senderPath: string, # Optional. Gets or sets the path to file/folder within the container to be shared.
        ///       }
        ///     ], # Required. A list of adls gen2 storage account paths to be shared.
        ///     provisioningState: &quot;Unknown&quot; | &quot;Succeeded&quot; | &quot;Creating&quot; | &quot;Deleting&quot; | &quot;Moving&quot; | &quot;Failed&quot; | &quot;SoftDeleting&quot; | &quot;SoftDeleted&quot; | &quot;SourceMoved&quot; | &quot;SourceDeleted&quot; | &quot;TargetMoved&quot; | &quot;TargetDeleted&quot;, # Optional. Provisioning status of the resource
        ///     receiverAssetName: string, # Required. Name of the asset for the receiver.
        ///     storageAccountResourceId: string, # Required. Resource id of the adls gen2 storage account.
        ///   }, # Required. Adls gen 2 account asset properties
        ///   kind: AdlsGen2Account, # Required. The types of asset.
        ///   id: string, # Optional. The resource id of the resource.
        ///   name: string, # Optional. Name of the resource.
        ///   type: string, # Optional. Type of the resource.
        /// }
        /// </code>
        /// </details>
        /// <details><summary>~+ 1 more JSON objects</summary><details><summary>BlobAccountAsset</summary>Schema for <c>BlobAccountAsset</c>:
        /// <code>{
        ///   properties: {
        ///     location: string, # Optional. Location of the blob storage account.
        ///     paths: [
        ///       {
        ///         containerName: string, # Required. Gets or sets the container name.
        ///         receiverPath: string, # Optional. Gets or sets the path on the receiver side where the asset is to be mapped.
        ///         senderPath: string, # Optional. Gets or sets the path to file/folder within the container to be shared.
        ///       }
        ///     ], # Required. A list of blob storage account paths to be shared.
        ///     provisioningState: &quot;Unknown&quot; | &quot;Succeeded&quot; | &quot;Creating&quot; | &quot;Deleting&quot; | &quot;Moving&quot; | &quot;Failed&quot; | &quot;SoftDeleting&quot; | &quot;SoftDeleted&quot; | &quot;SourceMoved&quot; | &quot;SourceDeleted&quot; | &quot;TargetMoved&quot; | &quot;TargetDeleted&quot;, # Optional. Provisioning status of the resource
        ///     receiverAssetName: string, # Required. Name of the asset for the receiver.
        ///     storageAccountResourceId: string, # Required. Resource id of the blob storage account.
        ///   }, # Required. Blob storage account asset properties
        ///   kind: BlobAccount, # Required. The types of asset.
        ///   id: string, # Optional. The resource id of the resource.
        ///   name: string, # Optional. Name of the resource.
        ///   type: string, # Optional. Type of the resource.
        /// }
        /// </code>
        /// </details>
        /// </details>
        /// 
        /// Response Body:
        /// 
        /// This method takes one of the JSON objects below as a payload. Please select a JSON object to view the schema for this.
        /// <details><summary>AdlsGen2AccountAsset</summary>Schema for <c>AdlsGen2AccountAsset</c>:
        /// <code>{
        ///   properties: {
        ///     location: string, # Optional. Location of the adls gen2 storage account.
        ///     paths: [
        ///       {
        ///         containerName: string, # Required. Gets or sets the container name.
        ///         receiverPath: string, # Optional. Gets or sets the path on the receiver side where the asset is to be mapped.
        ///         senderPath: string, # Optional. Gets or sets the path to file/folder within the container to be shared.
        ///       }
        ///     ], # Required. A list of adls gen2 storage account paths to be shared.
        ///     provisioningState: &quot;Unknown&quot; | &quot;Succeeded&quot; | &quot;Creating&quot; | &quot;Deleting&quot; | &quot;Moving&quot; | &quot;Failed&quot; | &quot;SoftDeleting&quot; | &quot;SoftDeleted&quot; | &quot;SourceMoved&quot; | &quot;SourceDeleted&quot; | &quot;TargetMoved&quot; | &quot;TargetDeleted&quot;, # Optional. Provisioning status of the resource
        ///     receiverAssetName: string, # Required. Name of the asset for the receiver.
        ///     storageAccountResourceId: string, # Required. Resource id of the adls gen2 storage account.
        ///   }, # Required. Adls gen 2 account asset properties
        ///   kind: AdlsGen2Account, # Required. The types of asset.
        ///   id: string, # Optional. The resource id of the resource.
        ///   name: string, # Optional. Name of the resource.
        ///   type: string, # Optional. Type of the resource.
        /// }
        /// </code>
        /// </details>
        /// <details><summary>~+ 1 more JSON objects</summary><details><summary>BlobAccountAsset</summary>Schema for <c>BlobAccountAsset</c>:
        /// <code>{
        ///   properties: {
        ///     location: string, # Optional. Location of the blob storage account.
        ///     paths: [
        ///       {
        ///         containerName: string, # Required. Gets or sets the container name.
        ///         receiverPath: string, # Optional. Gets or sets the path on the receiver side where the asset is to be mapped.
        ///         senderPath: string, # Optional. Gets or sets the path to file/folder within the container to be shared.
        ///       }
        ///     ], # Required. A list of blob storage account paths to be shared.
        ///     provisioningState: &quot;Unknown&quot; | &quot;Succeeded&quot; | &quot;Creating&quot; | &quot;Deleting&quot; | &quot;Moving&quot; | &quot;Failed&quot; | &quot;SoftDeleting&quot; | &quot;SoftDeleted&quot; | &quot;SourceMoved&quot; | &quot;SourceDeleted&quot; | &quot;TargetMoved&quot; | &quot;TargetDeleted&quot;, # Optional. Provisioning status of the resource
        ///     receiverAssetName: string, # Required. Name of the asset for the receiver.
        ///     storageAccountResourceId: string, # Required. Resource id of the blob storage account.
        ///   }, # Required. Blob storage account asset properties
        ///   kind: BlobAccount, # Required. The types of asset.
        ///   id: string, # Optional. The resource id of the resource.
        ///   name: string, # Optional. Name of the resource.
        ///   type: string, # Optional. Type of the resource.
        /// }
        /// </code>
        /// </details>
        /// </details>
        /// 
        /// </remarks>
        public virtual async Task<Operation<BinaryData>> CreateAsync(WaitUntil waitUntil, string sentShareName, string assetName, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(sentShareName, nameof(sentShareName));
            Argument.AssertNotNullOrEmpty(assetName, nameof(assetName));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("AssetsClient.Create");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateRequest(sentShareName, assetName, content, context);
                return await ProtocolOperationHelpers.ProcessMessageAsync(_pipeline, message, ClientDiagnostics, "AssetsClient.Create", OperationFinalStateVia.Location, context, waitUntil).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Adds a new asset to an existing share. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="sentShareName"> The name of the sent share. </param>
        /// <param name="assetName"> The name of the asset. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sentShareName"/>, <paramref name="assetName"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="sentShareName"/> or <paramref name="assetName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Operation{T}"/> from the service that will contain a <see cref="BinaryData"/> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call Create with required parameters and request content and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new AssetsClient("<https://my-service.azure.com>", credential);
        /// 
        /// var data = new {
        ///     properties = new {
        ///         paths = new[] {
        ///             new {
        ///                 containerName = "<containerName>",
        ///                 receiverPath = "<receiverPath>",
        ///                 senderPath = "<senderPath>",
        ///             }
        ///         },
        ///         receiverAssetName = "<receiverAssetName>",
        ///         storageAccountResourceId = "<storageAccountResourceId>",
        ///     },
        ///     kind = "AdlsGen2Account",
        /// };
        /// 
        /// var operation = client.Create(WaitUntil.Completed, "<sentShareName>", "<assetName>", RequestContent.Create(data));
        /// 
        /// BinaryData data = operation.WaitForCompletion();
        /// JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        /// Console.WriteLine(result.GetProperty("kind").ToString());
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("type").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Create an asset on a sent share
        /// 
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// This method takes one of the JSON objects below as a payload. Please select a JSON object to view the schema for this.
        /// <details><summary>AdlsGen2AccountAsset</summary>Schema for <c>AdlsGen2AccountAsset</c>:
        /// <code>{
        ///   properties: {
        ///     location: string, # Optional. Location of the adls gen2 storage account.
        ///     paths: [
        ///       {
        ///         containerName: string, # Required. Gets or sets the container name.
        ///         receiverPath: string, # Optional. Gets or sets the path on the receiver side where the asset is to be mapped.
        ///         senderPath: string, # Optional. Gets or sets the path to file/folder within the container to be shared.
        ///       }
        ///     ], # Required. A list of adls gen2 storage account paths to be shared.
        ///     provisioningState: &quot;Unknown&quot; | &quot;Succeeded&quot; | &quot;Creating&quot; | &quot;Deleting&quot; | &quot;Moving&quot; | &quot;Failed&quot; | &quot;SoftDeleting&quot; | &quot;SoftDeleted&quot; | &quot;SourceMoved&quot; | &quot;SourceDeleted&quot; | &quot;TargetMoved&quot; | &quot;TargetDeleted&quot;, # Optional. Provisioning status of the resource
        ///     receiverAssetName: string, # Required. Name of the asset for the receiver.
        ///     storageAccountResourceId: string, # Required. Resource id of the adls gen2 storage account.
        ///   }, # Required. Adls gen 2 account asset properties
        ///   kind: AdlsGen2Account, # Required. The types of asset.
        ///   id: string, # Optional. The resource id of the resource.
        ///   name: string, # Optional. Name of the resource.
        ///   type: string, # Optional. Type of the resource.
        /// }
        /// </code>
        /// </details>
        /// <details><summary>~+ 1 more JSON objects</summary><details><summary>BlobAccountAsset</summary>Schema for <c>BlobAccountAsset</c>:
        /// <code>{
        ///   properties: {
        ///     location: string, # Optional. Location of the blob storage account.
        ///     paths: [
        ///       {
        ///         containerName: string, # Required. Gets or sets the container name.
        ///         receiverPath: string, # Optional. Gets or sets the path on the receiver side where the asset is to be mapped.
        ///         senderPath: string, # Optional. Gets or sets the path to file/folder within the container to be shared.
        ///       }
        ///     ], # Required. A list of blob storage account paths to be shared.
        ///     provisioningState: &quot;Unknown&quot; | &quot;Succeeded&quot; | &quot;Creating&quot; | &quot;Deleting&quot; | &quot;Moving&quot; | &quot;Failed&quot; | &quot;SoftDeleting&quot; | &quot;SoftDeleted&quot; | &quot;SourceMoved&quot; | &quot;SourceDeleted&quot; | &quot;TargetMoved&quot; | &quot;TargetDeleted&quot;, # Optional. Provisioning status of the resource
        ///     receiverAssetName: string, # Required. Name of the asset for the receiver.
        ///     storageAccountResourceId: string, # Required. Resource id of the blob storage account.
        ///   }, # Required. Blob storage account asset properties
        ///   kind: BlobAccount, # Required. The types of asset.
        ///   id: string, # Optional. The resource id of the resource.
        ///   name: string, # Optional. Name of the resource.
        ///   type: string, # Optional. Type of the resource.
        /// }
        /// </code>
        /// </details>
        /// </details>
        /// 
        /// Response Body:
        /// 
        /// This method takes one of the JSON objects below as a payload. Please select a JSON object to view the schema for this.
        /// <details><summary>AdlsGen2AccountAsset</summary>Schema for <c>AdlsGen2AccountAsset</c>:
        /// <code>{
        ///   properties: {
        ///     location: string, # Optional. Location of the adls gen2 storage account.
        ///     paths: [
        ///       {
        ///         containerName: string, # Required. Gets or sets the container name.
        ///         receiverPath: string, # Optional. Gets or sets the path on the receiver side where the asset is to be mapped.
        ///         senderPath: string, # Optional. Gets or sets the path to file/folder within the container to be shared.
        ///       }
        ///     ], # Required. A list of adls gen2 storage account paths to be shared.
        ///     provisioningState: &quot;Unknown&quot; | &quot;Succeeded&quot; | &quot;Creating&quot; | &quot;Deleting&quot; | &quot;Moving&quot; | &quot;Failed&quot; | &quot;SoftDeleting&quot; | &quot;SoftDeleted&quot; | &quot;SourceMoved&quot; | &quot;SourceDeleted&quot; | &quot;TargetMoved&quot; | &quot;TargetDeleted&quot;, # Optional. Provisioning status of the resource
        ///     receiverAssetName: string, # Required. Name of the asset for the receiver.
        ///     storageAccountResourceId: string, # Required. Resource id of the adls gen2 storage account.
        ///   }, # Required. Adls gen 2 account asset properties
        ///   kind: AdlsGen2Account, # Required. The types of asset.
        ///   id: string, # Optional. The resource id of the resource.
        ///   name: string, # Optional. Name of the resource.
        ///   type: string, # Optional. Type of the resource.
        /// }
        /// </code>
        /// </details>
        /// <details><summary>~+ 1 more JSON objects</summary><details><summary>BlobAccountAsset</summary>Schema for <c>BlobAccountAsset</c>:
        /// <code>{
        ///   properties: {
        ///     location: string, # Optional. Location of the blob storage account.
        ///     paths: [
        ///       {
        ///         containerName: string, # Required. Gets or sets the container name.
        ///         receiverPath: string, # Optional. Gets or sets the path on the receiver side where the asset is to be mapped.
        ///         senderPath: string, # Optional. Gets or sets the path to file/folder within the container to be shared.
        ///       }
        ///     ], # Required. A list of blob storage account paths to be shared.
        ///     provisioningState: &quot;Unknown&quot; | &quot;Succeeded&quot; | &quot;Creating&quot; | &quot;Deleting&quot; | &quot;Moving&quot; | &quot;Failed&quot; | &quot;SoftDeleting&quot; | &quot;SoftDeleted&quot; | &quot;SourceMoved&quot; | &quot;SourceDeleted&quot; | &quot;TargetMoved&quot; | &quot;TargetDeleted&quot;, # Optional. Provisioning status of the resource
        ///     receiverAssetName: string, # Required. Name of the asset for the receiver.
        ///     storageAccountResourceId: string, # Required. Resource id of the blob storage account.
        ///   }, # Required. Blob storage account asset properties
        ///   kind: BlobAccount, # Required. The types of asset.
        ///   id: string, # Optional. The resource id of the resource.
        ///   name: string, # Optional. Name of the resource.
        ///   type: string, # Optional. Type of the resource.
        /// }
        /// </code>
        /// </details>
        /// </details>
        /// 
        /// </remarks>
        public virtual Operation<BinaryData> Create(WaitUntil waitUntil, string sentShareName, string assetName, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(sentShareName, nameof(sentShareName));
            Argument.AssertNotNullOrEmpty(assetName, nameof(assetName));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("AssetsClient.Create");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateRequest(sentShareName, assetName, content, context);
                return ProtocolOperationHelpers.ProcessMessage(_pipeline, message, ClientDiagnostics, "AssetsClient.Create", OperationFinalStateVia.Location, context, waitUntil);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete asset in a sentShare. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="sentShareName"> The name of the sent share. </param>
        /// <param name="assetName"> The name of the asset. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sentShareName"/> or <paramref name="assetName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="sentShareName"/> or <paramref name="assetName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Operation"/> representing an asynchronous operation on the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteAsync with required parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new AssetsClient("<https://my-service.azure.com>", credential);
        /// 
        /// var operation = await client.DeleteAsync(WaitUntil.Completed, "<sentShareName>", "<assetName>");
        /// 
        /// var response = await operation.WaitForCompletionResponseAsync();
        /// Console.WriteLine(response.Status)
        /// ]]></code>
        /// </example>
        /// <remarks> Delete an asset on a sent share. </remarks>
        public virtual async Task<Operation> DeleteAsync(WaitUntil waitUntil, string sentShareName, string assetName, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(sentShareName, nameof(sentShareName));
            Argument.AssertNotNullOrEmpty(assetName, nameof(assetName));

            using var scope = ClientDiagnostics.CreateScope("AssetsClient.Delete");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteRequest(sentShareName, assetName, context);
                return await ProtocolOperationHelpers.ProcessMessageWithoutResponseValueAsync(_pipeline, message, ClientDiagnostics, "AssetsClient.Delete", OperationFinalStateVia.Location, context, waitUntil).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete asset in a sentShare. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="sentShareName"> The name of the sent share. </param>
        /// <param name="assetName"> The name of the asset. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sentShareName"/> or <paramref name="assetName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="sentShareName"/> or <paramref name="assetName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Operation"/> representing an asynchronous operation on the service. </returns>
        /// <example>
        /// This sample shows how to call Delete with required parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new AssetsClient("<https://my-service.azure.com>", credential);
        /// 
        /// var operation = client.Delete(WaitUntil.Completed, "<sentShareName>", "<assetName>");
        /// 
        /// var response = operation.WaitForCompletionResponse();
        /// Console.WriteLine(response.Status)
        /// ]]></code>
        /// </example>
        /// <remarks> Delete an asset on a sent share. </remarks>
        public virtual Operation Delete(WaitUntil waitUntil, string sentShareName, string assetName, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(sentShareName, nameof(sentShareName));
            Argument.AssertNotNullOrEmpty(assetName, nameof(assetName));

            using var scope = ClientDiagnostics.CreateScope("AssetsClient.Delete");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteRequest(sentShareName, assetName, context);
                return ProtocolOperationHelpers.ProcessMessageWithoutResponseValue(_pipeline, message, ClientDiagnostics, "AssetsClient.Delete", OperationFinalStateVia.Location, context, waitUntil);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateGetAssetsRequest(string sentShareName, string skipToken, string filter, string orderby, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/sentShares/", false);
            uri.AppendPath(sentShareName, true);
            uri.AppendPath("/assets", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (skipToken != null)
            {
                uri.AppendQuery("skipToken", skipToken, true);
            }
            if (filter != null)
            {
                uri.AppendQuery("$filter", filter, true);
            }
            if (orderby != null)
            {
                uri.AppendQuery("$orderby", orderby, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetAssetRequest(string sentShareName, string assetName, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/sentShares/", false);
            uri.AppendPath(sentShareName, true);
            uri.AppendPath("/assets/", false);
            uri.AppendPath(assetName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateCreateRequest(string sentShareName, string assetName, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier202);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/sentShares/", false);
            uri.AppendPath(sentShareName, true);
            uri.AppendPath("/assets/", false);
            uri.AppendPath(assetName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeleteRequest(string sentShareName, string assetName, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier202);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/sentShares/", false);
            uri.AppendPath(sentShareName, true);
            uri.AppendPath("/assets/", false);
            uri.AppendPath(assetName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetAssetsNextPageRequest(string nextLink, string sentShareName, string skipToken, string filter, string orderby, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_endpoint, false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier202;
        private static ResponseClassifier ResponseClassifier202 => _responseClassifier202 ??= new StatusCodeClassifier(stackalloc ushort[] { 202 });
    }
}
