// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Analytics.Purview.Share
{
    // Data plane generated client. The ReceivedInvitations service client.
    /// <summary> The ReceivedInvitations service client. </summary>
    public partial class ReceivedInvitationsClient
    {
        private static readonly string[] AuthorizationScopes = new string[] { "https://purview.azure.net/.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly string _endpoint;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of ReceivedInvitationsClient for mocking. </summary>
        protected ReceivedInvitationsClient()
        {
        }

        /// <summary> Initializes a new instance of ReceivedInvitationsClient. </summary>
        /// <param name="endpoint"> The scanning endpoint of your purview account. Example: https://{accountName}.purview.azure.com/share. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public ReceivedInvitationsClient(string endpoint, TokenCredential credential) : this(endpoint, credential, new PurviewShareClientOptions())
        {
        }

        /// <summary> Initializes a new instance of ReceivedInvitationsClient. </summary>
        /// <param name="endpoint"> The scanning endpoint of your purview account. Example: https://{accountName}.purview.azure.com/share. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public ReceivedInvitationsClient(string endpoint, TokenCredential credential, PurviewShareClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            Argument.AssertNotNull(credential, nameof(credential));
            options ??= new PurviewShareClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes) }, new ResponseClassifier());
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        /// <summary> Gets the received invitation identified by name. </summary>
        /// <param name="receivedInvitationName"> Name of the received invitation. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="receivedInvitationName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="receivedInvitationName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetReceivedInvitationAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ReceivedInvitationsClient("<https://my-service.azure.com>", credential);
        /// 
        /// Response response = await client.GetReceivedInvitationAsync("<receivedInvitationName>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("invitationKind").ToString());
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("type").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Get a received invitation
        /// 
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// This method takes one of the JSON objects below as a payload. Please select a JSON object to view the schema for this.
        /// <details><summary>ApplicationReceivedInvitation</summary>Schema for <c>ApplicationReceivedInvitation</c>:
        /// <code>{
        ///   properties: {
        ///     description: string, # Optional. Description shared when the invitation was created
        ///     expirationDate: string (ISO 8601 Format), # Optional. The expiration date for the received share created by accepting the invitation.
        ///     invitationStatus: &quot;Pending&quot; | &quot;Accepted&quot; | &quot;Rejected&quot;, # Optional. Status of the invitation.
        ///     location: string, # Optional. Location of the invitation.
        ///     receiverEmail: string, # Optional. Email of the user/receiver who received the sent share invitation
        ///     receiverName: string, # Optional. Name of the user/receiver who received the sent share invitation
        ///     receiverTenantName: string, # Optional. Tenant name of the user/receiver who received the sent share invitation
        ///     respondedAt: string (ISO 8601 Format), # Optional. The time the recipient responded to the invitation.
        ///     senderEmail: string, # Optional. Email of the sender who created the sent share invitation
        ///     senderName: string, # Optional. Name of the sender who created the sent share invitation
        ///     senderTenantName: string, # Optional. Tenant name of the sender who created the sent share invitation
        ///     sentAt: string (ISO 8601 Format), # Optional. Gets the time at which the invitation was sent.
        ///     sentShareName: string, # Optional. Gets the source share Name.
        ///     shareKind: &quot;InPlace&quot;, # Optional. Defines the supported types for share.
        ///     targetActiveDirectoryId: string, # Required. The target azure active directory id the invitation is sent to.
        ///     targetObjectId: string, # Required. The target object id in the azure active directory the invitation is sent to.
        ///   }, # Required. Properties for a received invitation of kind application.
        ///   invitationKind: Application, # Required. The types of invitations.
        ///   id: string, # Optional. The resource id of the resource.
        ///   name: string, # Optional. Name of the resource.
        ///   type: string, # Optional. Type of the resource.
        /// }
        /// </code>
        /// </details>
        /// <details><summary>~+ 1 more JSON objects</summary><details><summary>UserReceivedInvitation</summary>Schema for <c>UserReceivedInvitation</c>:
        /// <code>{
        ///   properties: {
        ///     description: string, # Optional. Description shared when the invitation was created
        ///     expirationDate: string (ISO 8601 Format), # Optional. The expiration date for the received share created by accepting the invitation.
        ///     invitationStatus: &quot;Pending&quot; | &quot;Accepted&quot; | &quot;Rejected&quot;, # Optional. Status of the invitation.
        ///     location: string, # Optional. Location of the invitation.
        ///     receiverEmail: string, # Optional. Email of the user/receiver who received the sent share invitation
        ///     receiverName: string, # Optional. Name of the user/receiver who received the sent share invitation
        ///     receiverTenantName: string, # Optional. Tenant name of the user/receiver who received the sent share invitation
        ///     respondedAt: string (ISO 8601 Format), # Optional. The time the recipient responded to the invitation.
        ///     senderEmail: string, # Optional. Email of the sender who created the sent share invitation
        ///     senderName: string, # Optional. Name of the sender who created the sent share invitation
        ///     senderTenantName: string, # Optional. Tenant name of the sender who created the sent share invitation
        ///     sentAt: string (ISO 8601 Format), # Optional. Gets the time at which the invitation was sent.
        ///     sentShareName: string, # Optional. Gets the source share Name.
        ///     shareKind: &quot;InPlace&quot;, # Optional. Defines the supported types for share.
        ///     targetEmail: string, # Required. The receiver email for the invitation is being sent.
        ///   }, # Required. Properties for a received invitation of kind user.
        ///   invitationKind: User, # Required. The types of invitations.
        ///   id: string, # Optional. The resource id of the resource.
        ///   name: string, # Optional. Name of the resource.
        ///   type: string, # Optional. Type of the resource.
        /// }
        /// </code>
        /// </details>
        /// </details>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetReceivedInvitationAsync(string receivedInvitationName, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(receivedInvitationName, nameof(receivedInvitationName));

            using var scope = ClientDiagnostics.CreateScope("ReceivedInvitationsClient.GetReceivedInvitation");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetReceivedInvitationRequest(receivedInvitationName, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the received invitation identified by name. </summary>
        /// <param name="receivedInvitationName"> Name of the received invitation. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="receivedInvitationName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="receivedInvitationName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetReceivedInvitation with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ReceivedInvitationsClient("<https://my-service.azure.com>", credential);
        /// 
        /// Response response = client.GetReceivedInvitation("<receivedInvitationName>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("invitationKind").ToString());
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("type").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Get a received invitation
        /// 
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// This method takes one of the JSON objects below as a payload. Please select a JSON object to view the schema for this.
        /// <details><summary>ApplicationReceivedInvitation</summary>Schema for <c>ApplicationReceivedInvitation</c>:
        /// <code>{
        ///   properties: {
        ///     description: string, # Optional. Description shared when the invitation was created
        ///     expirationDate: string (ISO 8601 Format), # Optional. The expiration date for the received share created by accepting the invitation.
        ///     invitationStatus: &quot;Pending&quot; | &quot;Accepted&quot; | &quot;Rejected&quot;, # Optional. Status of the invitation.
        ///     location: string, # Optional. Location of the invitation.
        ///     receiverEmail: string, # Optional. Email of the user/receiver who received the sent share invitation
        ///     receiverName: string, # Optional. Name of the user/receiver who received the sent share invitation
        ///     receiverTenantName: string, # Optional. Tenant name of the user/receiver who received the sent share invitation
        ///     respondedAt: string (ISO 8601 Format), # Optional. The time the recipient responded to the invitation.
        ///     senderEmail: string, # Optional. Email of the sender who created the sent share invitation
        ///     senderName: string, # Optional. Name of the sender who created the sent share invitation
        ///     senderTenantName: string, # Optional. Tenant name of the sender who created the sent share invitation
        ///     sentAt: string (ISO 8601 Format), # Optional. Gets the time at which the invitation was sent.
        ///     sentShareName: string, # Optional. Gets the source share Name.
        ///     shareKind: &quot;InPlace&quot;, # Optional. Defines the supported types for share.
        ///     targetActiveDirectoryId: string, # Required. The target azure active directory id the invitation is sent to.
        ///     targetObjectId: string, # Required. The target object id in the azure active directory the invitation is sent to.
        ///   }, # Required. Properties for a received invitation of kind application.
        ///   invitationKind: Application, # Required. The types of invitations.
        ///   id: string, # Optional. The resource id of the resource.
        ///   name: string, # Optional. Name of the resource.
        ///   type: string, # Optional. Type of the resource.
        /// }
        /// </code>
        /// </details>
        /// <details><summary>~+ 1 more JSON objects</summary><details><summary>UserReceivedInvitation</summary>Schema for <c>UserReceivedInvitation</c>:
        /// <code>{
        ///   properties: {
        ///     description: string, # Optional. Description shared when the invitation was created
        ///     expirationDate: string (ISO 8601 Format), # Optional. The expiration date for the received share created by accepting the invitation.
        ///     invitationStatus: &quot;Pending&quot; | &quot;Accepted&quot; | &quot;Rejected&quot;, # Optional. Status of the invitation.
        ///     location: string, # Optional. Location of the invitation.
        ///     receiverEmail: string, # Optional. Email of the user/receiver who received the sent share invitation
        ///     receiverName: string, # Optional. Name of the user/receiver who received the sent share invitation
        ///     receiverTenantName: string, # Optional. Tenant name of the user/receiver who received the sent share invitation
        ///     respondedAt: string (ISO 8601 Format), # Optional. The time the recipient responded to the invitation.
        ///     senderEmail: string, # Optional. Email of the sender who created the sent share invitation
        ///     senderName: string, # Optional. Name of the sender who created the sent share invitation
        ///     senderTenantName: string, # Optional. Tenant name of the sender who created the sent share invitation
        ///     sentAt: string (ISO 8601 Format), # Optional. Gets the time at which the invitation was sent.
        ///     sentShareName: string, # Optional. Gets the source share Name.
        ///     shareKind: &quot;InPlace&quot;, # Optional. Defines the supported types for share.
        ///     targetEmail: string, # Required. The receiver email for the invitation is being sent.
        ///   }, # Required. Properties for a received invitation of kind user.
        ///   invitationKind: User, # Required. The types of invitations.
        ///   id: string, # Optional. The resource id of the resource.
        ///   name: string, # Optional. Name of the resource.
        ///   type: string, # Optional. Type of the resource.
        /// }
        /// </code>
        /// </details>
        /// </details>
        /// 
        /// </remarks>
        public virtual Response GetReceivedInvitation(string receivedInvitationName, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(receivedInvitationName, nameof(receivedInvitationName));

            using var scope = ClientDiagnostics.CreateScope("ReceivedInvitationsClient.GetReceivedInvitation");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetReceivedInvitationRequest(receivedInvitationName, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Rejects the received invitation identified by name. </summary>
        /// <param name="receivedInvitationName"> Name of the received invitation. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="repeatabilityRequestId"> If specified, the client directs that the request is repeatable; that is, that the client can make the request multiple times with the same Repeatability-Request-Id and get back an appropriate response without the server executing the request multiple times. The value of the Repeatability-Request-Id is an opaque string representing a client-generated, globally unique for all time, identifier for the request. It is recommended to use version 4 (random) UUIDs. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="receivedInvitationName"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="receivedInvitationName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call RejectAsync with required parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ReceivedInvitationsClient("<https://my-service.azure.com>", credential);
        /// 
        /// var data = new {
        ///     properties = new {
        ///         targetActiveDirectoryId = "<targetActiveDirectoryId>",
        ///         targetObjectId = "<targetObjectId>",
        ///     },
        ///     invitationKind = "Application",
        /// };
        /// 
        /// Response response = await client.RejectAsync("<receivedInvitationName>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("invitationKind").ToString());
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call RejectAsync with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ReceivedInvitationsClient("<https://my-service.azure.com>", credential);
        /// 
        /// var data = new {
        ///     properties = new {
        ///         shareKind = "InPlace",
        ///         targetActiveDirectoryId = "<targetActiveDirectoryId>",
        ///         targetObjectId = "<targetObjectId>",
        ///     },
        ///     invitationKind = "Application",
        /// };
        /// 
        /// Response response = await client.RejectAsync("<receivedInvitationName>", RequestContent.Create(data), "<repeatabilityRequestId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("invitationKind").ToString());
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("type").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Reject a received invitation
        /// 
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// This method takes one of the JSON objects below as a payload. Please select a JSON object to view the schema for this.
        /// <details><summary>ApplicationReceivedInvitation</summary>Schema for <c>ApplicationReceivedInvitation</c>:
        /// <code>{
        ///   properties: {
        ///     description: string, # Optional. Description shared when the invitation was created
        ///     expirationDate: string (ISO 8601 Format), # Optional. The expiration date for the received share created by accepting the invitation.
        ///     invitationStatus: &quot;Pending&quot; | &quot;Accepted&quot; | &quot;Rejected&quot;, # Optional. Status of the invitation.
        ///     location: string, # Optional. Location of the invitation.
        ///     receiverEmail: string, # Optional. Email of the user/receiver who received the sent share invitation
        ///     receiverName: string, # Optional. Name of the user/receiver who received the sent share invitation
        ///     receiverTenantName: string, # Optional. Tenant name of the user/receiver who received the sent share invitation
        ///     respondedAt: string (ISO 8601 Format), # Optional. The time the recipient responded to the invitation.
        ///     senderEmail: string, # Optional. Email of the sender who created the sent share invitation
        ///     senderName: string, # Optional. Name of the sender who created the sent share invitation
        ///     senderTenantName: string, # Optional. Tenant name of the sender who created the sent share invitation
        ///     sentAt: string (ISO 8601 Format), # Optional. Gets the time at which the invitation was sent.
        ///     sentShareName: string, # Optional. Gets the source share Name.
        ///     shareKind: &quot;InPlace&quot;, # Optional. Defines the supported types for share.
        ///     targetActiveDirectoryId: string, # Required. The target azure active directory id the invitation is sent to.
        ///     targetObjectId: string, # Required. The target object id in the azure active directory the invitation is sent to.
        ///   }, # Required. Properties for a received invitation of kind application.
        ///   invitationKind: Application, # Required. The types of invitations.
        ///   id: string, # Optional. The resource id of the resource.
        ///   name: string, # Optional. Name of the resource.
        ///   type: string, # Optional. Type of the resource.
        /// }
        /// </code>
        /// </details>
        /// <details><summary>~+ 1 more JSON objects</summary><details><summary>UserReceivedInvitation</summary>Schema for <c>UserReceivedInvitation</c>:
        /// <code>{
        ///   properties: {
        ///     description: string, # Optional. Description shared when the invitation was created
        ///     expirationDate: string (ISO 8601 Format), # Optional. The expiration date for the received share created by accepting the invitation.
        ///     invitationStatus: &quot;Pending&quot; | &quot;Accepted&quot; | &quot;Rejected&quot;, # Optional. Status of the invitation.
        ///     location: string, # Optional. Location of the invitation.
        ///     receiverEmail: string, # Optional. Email of the user/receiver who received the sent share invitation
        ///     receiverName: string, # Optional. Name of the user/receiver who received the sent share invitation
        ///     receiverTenantName: string, # Optional. Tenant name of the user/receiver who received the sent share invitation
        ///     respondedAt: string (ISO 8601 Format), # Optional. The time the recipient responded to the invitation.
        ///     senderEmail: string, # Optional. Email of the sender who created the sent share invitation
        ///     senderName: string, # Optional. Name of the sender who created the sent share invitation
        ///     senderTenantName: string, # Optional. Tenant name of the sender who created the sent share invitation
        ///     sentAt: string (ISO 8601 Format), # Optional. Gets the time at which the invitation was sent.
        ///     sentShareName: string, # Optional. Gets the source share Name.
        ///     shareKind: &quot;InPlace&quot;, # Optional. Defines the supported types for share.
        ///     targetEmail: string, # Required. The receiver email for the invitation is being sent.
        ///   }, # Required. Properties for a received invitation of kind user.
        ///   invitationKind: User, # Required. The types of invitations.
        ///   id: string, # Optional. The resource id of the resource.
        ///   name: string, # Optional. Name of the resource.
        ///   type: string, # Optional. Type of the resource.
        /// }
        /// </code>
        /// </details>
        /// </details>
        /// 
        /// Response Body:
        /// 
        /// This method takes one of the JSON objects below as a payload. Please select a JSON object to view the schema for this.
        /// <details><summary>ApplicationReceivedInvitation</summary>Schema for <c>ApplicationReceivedInvitation</c>:
        /// <code>{
        ///   properties: {
        ///     description: string, # Optional. Description shared when the invitation was created
        ///     expirationDate: string (ISO 8601 Format), # Optional. The expiration date for the received share created by accepting the invitation.
        ///     invitationStatus: &quot;Pending&quot; | &quot;Accepted&quot; | &quot;Rejected&quot;, # Optional. Status of the invitation.
        ///     location: string, # Optional. Location of the invitation.
        ///     receiverEmail: string, # Optional. Email of the user/receiver who received the sent share invitation
        ///     receiverName: string, # Optional. Name of the user/receiver who received the sent share invitation
        ///     receiverTenantName: string, # Optional. Tenant name of the user/receiver who received the sent share invitation
        ///     respondedAt: string (ISO 8601 Format), # Optional. The time the recipient responded to the invitation.
        ///     senderEmail: string, # Optional. Email of the sender who created the sent share invitation
        ///     senderName: string, # Optional. Name of the sender who created the sent share invitation
        ///     senderTenantName: string, # Optional. Tenant name of the sender who created the sent share invitation
        ///     sentAt: string (ISO 8601 Format), # Optional. Gets the time at which the invitation was sent.
        ///     sentShareName: string, # Optional. Gets the source share Name.
        ///     shareKind: &quot;InPlace&quot;, # Optional. Defines the supported types for share.
        ///     targetActiveDirectoryId: string, # Required. The target azure active directory id the invitation is sent to.
        ///     targetObjectId: string, # Required. The target object id in the azure active directory the invitation is sent to.
        ///   }, # Required. Properties for a received invitation of kind application.
        ///   invitationKind: Application, # Required. The types of invitations.
        ///   id: string, # Optional. The resource id of the resource.
        ///   name: string, # Optional. Name of the resource.
        ///   type: string, # Optional. Type of the resource.
        /// }
        /// </code>
        /// </details>
        /// <details><summary>~+ 1 more JSON objects</summary><details><summary>UserReceivedInvitation</summary>Schema for <c>UserReceivedInvitation</c>:
        /// <code>{
        ///   properties: {
        ///     description: string, # Optional. Description shared when the invitation was created
        ///     expirationDate: string (ISO 8601 Format), # Optional. The expiration date for the received share created by accepting the invitation.
        ///     invitationStatus: &quot;Pending&quot; | &quot;Accepted&quot; | &quot;Rejected&quot;, # Optional. Status of the invitation.
        ///     location: string, # Optional. Location of the invitation.
        ///     receiverEmail: string, # Optional. Email of the user/receiver who received the sent share invitation
        ///     receiverName: string, # Optional. Name of the user/receiver who received the sent share invitation
        ///     receiverTenantName: string, # Optional. Tenant name of the user/receiver who received the sent share invitation
        ///     respondedAt: string (ISO 8601 Format), # Optional. The time the recipient responded to the invitation.
        ///     senderEmail: string, # Optional. Email of the sender who created the sent share invitation
        ///     senderName: string, # Optional. Name of the sender who created the sent share invitation
        ///     senderTenantName: string, # Optional. Tenant name of the sender who created the sent share invitation
        ///     sentAt: string (ISO 8601 Format), # Optional. Gets the time at which the invitation was sent.
        ///     sentShareName: string, # Optional. Gets the source share Name.
        ///     shareKind: &quot;InPlace&quot;, # Optional. Defines the supported types for share.
        ///     targetEmail: string, # Required. The receiver email for the invitation is being sent.
        ///   }, # Required. Properties for a received invitation of kind user.
        ///   invitationKind: User, # Required. The types of invitations.
        ///   id: string, # Optional. The resource id of the resource.
        ///   name: string, # Optional. Name of the resource.
        ///   type: string, # Optional. Type of the resource.
        /// }
        /// </code>
        /// </details>
        /// </details>
        /// 
        /// </remarks>
        public virtual async Task<Response> RejectAsync(string receivedInvitationName, RequestContent content, string repeatabilityRequestId = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(receivedInvitationName, nameof(receivedInvitationName));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("ReceivedInvitationsClient.Reject");
            scope.Start();
            try
            {
                using HttpMessage message = CreateRejectRequest(receivedInvitationName, content, repeatabilityRequestId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Rejects the received invitation identified by name. </summary>
        /// <param name="receivedInvitationName"> Name of the received invitation. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="repeatabilityRequestId"> If specified, the client directs that the request is repeatable; that is, that the client can make the request multiple times with the same Repeatability-Request-Id and get back an appropriate response without the server executing the request multiple times. The value of the Repeatability-Request-Id is an opaque string representing a client-generated, globally unique for all time, identifier for the request. It is recommended to use version 4 (random) UUIDs. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="receivedInvitationName"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="receivedInvitationName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call Reject with required parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ReceivedInvitationsClient("<https://my-service.azure.com>", credential);
        /// 
        /// var data = new {
        ///     properties = new {
        ///         targetActiveDirectoryId = "<targetActiveDirectoryId>",
        ///         targetObjectId = "<targetObjectId>",
        ///     },
        ///     invitationKind = "Application",
        /// };
        /// 
        /// Response response = client.Reject("<receivedInvitationName>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("invitationKind").ToString());
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call Reject with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ReceivedInvitationsClient("<https://my-service.azure.com>", credential);
        /// 
        /// var data = new {
        ///     properties = new {
        ///         shareKind = "InPlace",
        ///         targetActiveDirectoryId = "<targetActiveDirectoryId>",
        ///         targetObjectId = "<targetObjectId>",
        ///     },
        ///     invitationKind = "Application",
        /// };
        /// 
        /// Response response = client.Reject("<receivedInvitationName>", RequestContent.Create(data), "<repeatabilityRequestId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("invitationKind").ToString());
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("type").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Reject a received invitation
        /// 
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// This method takes one of the JSON objects below as a payload. Please select a JSON object to view the schema for this.
        /// <details><summary>ApplicationReceivedInvitation</summary>Schema for <c>ApplicationReceivedInvitation</c>:
        /// <code>{
        ///   properties: {
        ///     description: string, # Optional. Description shared when the invitation was created
        ///     expirationDate: string (ISO 8601 Format), # Optional. The expiration date for the received share created by accepting the invitation.
        ///     invitationStatus: &quot;Pending&quot; | &quot;Accepted&quot; | &quot;Rejected&quot;, # Optional. Status of the invitation.
        ///     location: string, # Optional. Location of the invitation.
        ///     receiverEmail: string, # Optional. Email of the user/receiver who received the sent share invitation
        ///     receiverName: string, # Optional. Name of the user/receiver who received the sent share invitation
        ///     receiverTenantName: string, # Optional. Tenant name of the user/receiver who received the sent share invitation
        ///     respondedAt: string (ISO 8601 Format), # Optional. The time the recipient responded to the invitation.
        ///     senderEmail: string, # Optional. Email of the sender who created the sent share invitation
        ///     senderName: string, # Optional. Name of the sender who created the sent share invitation
        ///     senderTenantName: string, # Optional. Tenant name of the sender who created the sent share invitation
        ///     sentAt: string (ISO 8601 Format), # Optional. Gets the time at which the invitation was sent.
        ///     sentShareName: string, # Optional. Gets the source share Name.
        ///     shareKind: &quot;InPlace&quot;, # Optional. Defines the supported types for share.
        ///     targetActiveDirectoryId: string, # Required. The target azure active directory id the invitation is sent to.
        ///     targetObjectId: string, # Required. The target object id in the azure active directory the invitation is sent to.
        ///   }, # Required. Properties for a received invitation of kind application.
        ///   invitationKind: Application, # Required. The types of invitations.
        ///   id: string, # Optional. The resource id of the resource.
        ///   name: string, # Optional. Name of the resource.
        ///   type: string, # Optional. Type of the resource.
        /// }
        /// </code>
        /// </details>
        /// <details><summary>~+ 1 more JSON objects</summary><details><summary>UserReceivedInvitation</summary>Schema for <c>UserReceivedInvitation</c>:
        /// <code>{
        ///   properties: {
        ///     description: string, # Optional. Description shared when the invitation was created
        ///     expirationDate: string (ISO 8601 Format), # Optional. The expiration date for the received share created by accepting the invitation.
        ///     invitationStatus: &quot;Pending&quot; | &quot;Accepted&quot; | &quot;Rejected&quot;, # Optional. Status of the invitation.
        ///     location: string, # Optional. Location of the invitation.
        ///     receiverEmail: string, # Optional. Email of the user/receiver who received the sent share invitation
        ///     receiverName: string, # Optional. Name of the user/receiver who received the sent share invitation
        ///     receiverTenantName: string, # Optional. Tenant name of the user/receiver who received the sent share invitation
        ///     respondedAt: string (ISO 8601 Format), # Optional. The time the recipient responded to the invitation.
        ///     senderEmail: string, # Optional. Email of the sender who created the sent share invitation
        ///     senderName: string, # Optional. Name of the sender who created the sent share invitation
        ///     senderTenantName: string, # Optional. Tenant name of the sender who created the sent share invitation
        ///     sentAt: string (ISO 8601 Format), # Optional. Gets the time at which the invitation was sent.
        ///     sentShareName: string, # Optional. Gets the source share Name.
        ///     shareKind: &quot;InPlace&quot;, # Optional. Defines the supported types for share.
        ///     targetEmail: string, # Required. The receiver email for the invitation is being sent.
        ///   }, # Required. Properties for a received invitation of kind user.
        ///   invitationKind: User, # Required. The types of invitations.
        ///   id: string, # Optional. The resource id of the resource.
        ///   name: string, # Optional. Name of the resource.
        ///   type: string, # Optional. Type of the resource.
        /// }
        /// </code>
        /// </details>
        /// </details>
        /// 
        /// Response Body:
        /// 
        /// This method takes one of the JSON objects below as a payload. Please select a JSON object to view the schema for this.
        /// <details><summary>ApplicationReceivedInvitation</summary>Schema for <c>ApplicationReceivedInvitation</c>:
        /// <code>{
        ///   properties: {
        ///     description: string, # Optional. Description shared when the invitation was created
        ///     expirationDate: string (ISO 8601 Format), # Optional. The expiration date for the received share created by accepting the invitation.
        ///     invitationStatus: &quot;Pending&quot; | &quot;Accepted&quot; | &quot;Rejected&quot;, # Optional. Status of the invitation.
        ///     location: string, # Optional. Location of the invitation.
        ///     receiverEmail: string, # Optional. Email of the user/receiver who received the sent share invitation
        ///     receiverName: string, # Optional. Name of the user/receiver who received the sent share invitation
        ///     receiverTenantName: string, # Optional. Tenant name of the user/receiver who received the sent share invitation
        ///     respondedAt: string (ISO 8601 Format), # Optional. The time the recipient responded to the invitation.
        ///     senderEmail: string, # Optional. Email of the sender who created the sent share invitation
        ///     senderName: string, # Optional. Name of the sender who created the sent share invitation
        ///     senderTenantName: string, # Optional. Tenant name of the sender who created the sent share invitation
        ///     sentAt: string (ISO 8601 Format), # Optional. Gets the time at which the invitation was sent.
        ///     sentShareName: string, # Optional. Gets the source share Name.
        ///     shareKind: &quot;InPlace&quot;, # Optional. Defines the supported types for share.
        ///     targetActiveDirectoryId: string, # Required. The target azure active directory id the invitation is sent to.
        ///     targetObjectId: string, # Required. The target object id in the azure active directory the invitation is sent to.
        ///   }, # Required. Properties for a received invitation of kind application.
        ///   invitationKind: Application, # Required. The types of invitations.
        ///   id: string, # Optional. The resource id of the resource.
        ///   name: string, # Optional. Name of the resource.
        ///   type: string, # Optional. Type of the resource.
        /// }
        /// </code>
        /// </details>
        /// <details><summary>~+ 1 more JSON objects</summary><details><summary>UserReceivedInvitation</summary>Schema for <c>UserReceivedInvitation</c>:
        /// <code>{
        ///   properties: {
        ///     description: string, # Optional. Description shared when the invitation was created
        ///     expirationDate: string (ISO 8601 Format), # Optional. The expiration date for the received share created by accepting the invitation.
        ///     invitationStatus: &quot;Pending&quot; | &quot;Accepted&quot; | &quot;Rejected&quot;, # Optional. Status of the invitation.
        ///     location: string, # Optional. Location of the invitation.
        ///     receiverEmail: string, # Optional. Email of the user/receiver who received the sent share invitation
        ///     receiverName: string, # Optional. Name of the user/receiver who received the sent share invitation
        ///     receiverTenantName: string, # Optional. Tenant name of the user/receiver who received the sent share invitation
        ///     respondedAt: string (ISO 8601 Format), # Optional. The time the recipient responded to the invitation.
        ///     senderEmail: string, # Optional. Email of the sender who created the sent share invitation
        ///     senderName: string, # Optional. Name of the sender who created the sent share invitation
        ///     senderTenantName: string, # Optional. Tenant name of the sender who created the sent share invitation
        ///     sentAt: string (ISO 8601 Format), # Optional. Gets the time at which the invitation was sent.
        ///     sentShareName: string, # Optional. Gets the source share Name.
        ///     shareKind: &quot;InPlace&quot;, # Optional. Defines the supported types for share.
        ///     targetEmail: string, # Required. The receiver email for the invitation is being sent.
        ///   }, # Required. Properties for a received invitation of kind user.
        ///   invitationKind: User, # Required. The types of invitations.
        ///   id: string, # Optional. The resource id of the resource.
        ///   name: string, # Optional. Name of the resource.
        ///   type: string, # Optional. Type of the resource.
        /// }
        /// </code>
        /// </details>
        /// </details>
        /// 
        /// </remarks>
        public virtual Response Reject(string receivedInvitationName, RequestContent content, string repeatabilityRequestId = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(receivedInvitationName, nameof(receivedInvitationName));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("ReceivedInvitationsClient.Reject");
            scope.Start();
            try
            {
                using HttpMessage message = CreateRejectRequest(receivedInvitationName, content, repeatabilityRequestId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists the received invitations. </summary>
        /// <param name="skipToken"> The continuation token to list the next page. </param>
        /// <param name="filter"> Filters the results using OData syntax. </param>
        /// <param name="orderby"> Sorts the results using OData syntax. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="AsyncPageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetReceivedInvitationsAsync and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ReceivedInvitationsClient("<https://my-service.azure.com>", credential);
        /// 
        /// await foreach (var data in client.GetReceivedInvitationsAsync())
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.GetProperty("invitationKind").ToString());
        ///     Console.WriteLine(result.ToString());
        /// }
        /// ]]></code>
        /// This sample shows how to call GetReceivedInvitationsAsync with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ReceivedInvitationsClient("<https://my-service.azure.com>", credential);
        /// 
        /// await foreach (var data in client.GetReceivedInvitationsAsync("<skipToken>", "<filter>", "<orderby>"))
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.GetProperty("invitationKind").ToString());
        ///     Console.WriteLine(result.GetProperty("id").ToString());
        ///     Console.WriteLine(result.GetProperty("name").ToString());
        ///     Console.WriteLine(result.GetProperty("type").ToString());
        /// }
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// List received invitations
        /// 
        /// Below is the JSON schema for one item in the pageable response.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ReceivedInvitationListValue</c>:
        /// <code>{
        ///   invitationKind: &quot;User&quot; | &quot;Application&quot;, # Required. The types of invitations.
        ///   id: string, # Optional. The resource id of the resource.
        ///   name: string, # Optional. Name of the resource.
        ///   type: string, # Optional. Type of the resource.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual AsyncPageable<BinaryData> GetReceivedInvitationsAsync(string skipToken = null, string filter = null, string orderby = null, RequestContext context = null)
        {
            return GetReceivedInvitationsImplementationAsync("ReceivedInvitationsClient.GetReceivedInvitations", skipToken, filter, orderby, context);
        }

        private AsyncPageable<BinaryData> GetReceivedInvitationsImplementationAsync(string diagnosticsScopeName, string skipToken, string filter, string orderby, RequestContext context)
        {
            return PageableHelpers.CreateAsyncPageable(CreateEnumerableAsync, ClientDiagnostics, diagnosticsScopeName);
            async IAsyncEnumerable<Page<BinaryData>> CreateEnumerableAsync(string nextLink, int? pageSizeHint, [EnumeratorCancellation] CancellationToken cancellationToken = default)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetReceivedInvitationsRequest(skipToken, filter, orderby, context)
                        : CreateGetReceivedInvitationsNextPageRequest(nextLink, skipToken, filter, orderby, context);
                    var page = await LowLevelPageableHelpers.ProcessMessageAsync(_pipeline, message, context, "value", "nextLink", cancellationToken).ConfigureAwait(false);
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Lists the received invitations. </summary>
        /// <param name="skipToken"> The continuation token to list the next page. </param>
        /// <param name="filter"> Filters the results using OData syntax. </param>
        /// <param name="orderby"> Sorts the results using OData syntax. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Pageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetReceivedInvitations and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ReceivedInvitationsClient("<https://my-service.azure.com>", credential);
        /// 
        /// foreach (var data in client.GetReceivedInvitations())
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.GetProperty("invitationKind").ToString());
        ///     Console.WriteLine(result.ToString());
        /// }
        /// ]]></code>
        /// This sample shows how to call GetReceivedInvitations with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ReceivedInvitationsClient("<https://my-service.azure.com>", credential);
        /// 
        /// foreach (var data in client.GetReceivedInvitations("<skipToken>", "<filter>", "<orderby>"))
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.GetProperty("invitationKind").ToString());
        ///     Console.WriteLine(result.GetProperty("id").ToString());
        ///     Console.WriteLine(result.GetProperty("name").ToString());
        ///     Console.WriteLine(result.GetProperty("type").ToString());
        /// }
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// List received invitations
        /// 
        /// Below is the JSON schema for one item in the pageable response.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ReceivedInvitationListValue</c>:
        /// <code>{
        ///   invitationKind: &quot;User&quot; | &quot;Application&quot;, # Required. The types of invitations.
        ///   id: string, # Optional. The resource id of the resource.
        ///   name: string, # Optional. Name of the resource.
        ///   type: string, # Optional. Type of the resource.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Pageable<BinaryData> GetReceivedInvitations(string skipToken = null, string filter = null, string orderby = null, RequestContext context = null)
        {
            return GetReceivedInvitationsImplementation("ReceivedInvitationsClient.GetReceivedInvitations", skipToken, filter, orderby, context);
        }

        private Pageable<BinaryData> GetReceivedInvitationsImplementation(string diagnosticsScopeName, string skipToken, string filter, string orderby, RequestContext context)
        {
            return PageableHelpers.CreatePageable(CreateEnumerable, ClientDiagnostics, diagnosticsScopeName);
            IEnumerable<Page<BinaryData>> CreateEnumerable(string nextLink, int? pageSizeHint)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetReceivedInvitationsRequest(skipToken, filter, orderby, context)
                        : CreateGetReceivedInvitationsNextPageRequest(nextLink, skipToken, filter, orderby, context);
                    var page = LowLevelPageableHelpers.ProcessMessage(_pipeline, message, context, "value", "nextLink");
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        internal HttpMessage CreateGetReceivedInvitationsRequest(string skipToken, string filter, string orderby, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/receivedInvitations", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (skipToken != null)
            {
                uri.AppendQuery("skipToken", skipToken, true);
            }
            if (filter != null)
            {
                uri.AppendQuery("$filter", filter, true);
            }
            if (orderby != null)
            {
                uri.AppendQuery("$orderby", orderby, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetReceivedInvitationRequest(string receivedInvitationName, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/receivedInvitations/", false);
            uri.AppendPath(receivedInvitationName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateRejectRequest(string receivedInvitationName, RequestContent content, string repeatabilityRequestId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/receivedInvitations/", false);
            uri.AppendPath(receivedInvitationName, true);
            uri.AppendPath(":reject", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (repeatabilityRequestId != null)
            {
                request.Headers.Add("repeatability-request-id", repeatabilityRequestId);
            }
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetReceivedInvitationsNextPageRequest(string nextLink, string skipToken, string filter, string orderby, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_endpoint, false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
    }
}
