// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Analytics.Purview.Share
{
    // Data plane generated client. The Triggers service client.
    /// <summary> The Triggers service client. </summary>
    public partial class TriggersClient
    {
        private static readonly string[] AuthorizationScopes = new string[] { "https://purview.azure.net/.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly string _endpoint;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of TriggersClient for mocking. </summary>
        protected TriggersClient()
        {
        }

        /// <summary> Initializes a new instance of TriggersClient. </summary>
        /// <param name="endpoint"> The catalog endpoint of your Purview account. Example: https://{accountName}.purview.azure.com. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public TriggersClient(string endpoint, TokenCredential credential) : this(endpoint, credential, new PurviewShareClientOptions())
        {
        }

        /// <summary> Initializes a new instance of TriggersClient. </summary>
        /// <param name="endpoint"> The catalog endpoint of your Purview account. Example: https://{accountName}.purview.azure.com. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public TriggersClient(string endpoint, TokenCredential credential, PurviewShareClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            Argument.AssertNotNull(credential, nameof(credential));
            options ??= new PurviewShareClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes) }, new ResponseClassifier());
            _endpoint = endpoint;
        }

        /// <summary> Gets trigger information. </summary>
        /// <param name="dataSourceName"> The String to use. </param>
        /// <param name="scanName"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dataSourceName"/> or <paramref name="scanName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="dataSourceName"/> or <paramref name="scanName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetTriggerAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new TriggersClient("<https://my-service.azure.com>", credential);
        /// 
        /// Response response = await client.GetTriggerAsync("<dataSourceName>", "<scanName>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("frequency").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("interval").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("additionalProperties").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("minutes")[0].ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("hours")[0].ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("weekDays")[0].ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("monthDays")[0].ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("monthlyOccurrences")[0].GetProperty("additionalProperties").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("monthlyOccurrences")[0].GetProperty("day").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("monthlyOccurrences")[0].GetProperty("occurrence").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrenceInterval").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("createdAt").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("lastModifiedAt").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("lastScheduled").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("scanLevel").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("incrementalScanStartTime").ToString());
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Trigger</c>:
        /// <code>{
        ///   properties: {
        ///     recurrence: {
        ///       frequency: &quot;Week&quot; | &quot;Month&quot;, # Optional.
        ///       interval: number, # Optional.
        ///       startTime: string (ISO 8601 Format), # Optional.
        ///       endTime: string (ISO 8601 Format), # Optional.
        ///       schedule: {
        ///         additionalProperties: Dictionary&lt;string, AnyObject&gt;, # Optional. Dictionary of &lt;AnyObject&gt;
        ///         minutes: [number], # Optional.
        ///         hours: [number], # Optional.
        ///         weekDays: [&quot;Sunday&quot; | &quot;Monday&quot; | &quot;Tuesday&quot; | &quot;Wednesday&quot; | &quot;Thursday&quot; | &quot;Friday&quot; | &quot;Saturday&quot;], # Optional.
        ///         monthDays: [number], # Optional.
        ///         monthlyOccurrences: [
        ///           {
        ///             additionalProperties: Dictionary&lt;string, AnyObject&gt;, # Optional. Dictionary of &lt;AnyObject&gt;
        ///             day: &quot;Sunday&quot; | &quot;Monday&quot; | &quot;Tuesday&quot; | &quot;Wednesday&quot; | &quot;Thursday&quot; | &quot;Friday&quot; | &quot;Saturday&quot;, # Optional.
        ///             occurrence: number, # Optional.
        ///           }
        ///         ], # Optional.
        ///       }, # Optional.
        ///       timeZone: string, # Optional.
        ///     }, # Optional.
        ///     recurrenceInterval: string, # Optional.
        ///     createdAt: string (ISO 8601 Format), # Optional.
        ///     lastModifiedAt: string (ISO 8601 Format), # Optional.
        ///     lastScheduled: string (ISO 8601 Format), # Optional.
        ///     scanLevel: &quot;Full&quot; | &quot;Incremental&quot;, # Optional.
        ///     incrementalScanStartTime: string (ISO 8601 Format), # Optional.
        ///   }, # Optional.
        ///   id: string, # Optional.
        ///   name: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetTriggerAsync(string dataSourceName, string scanName, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(dataSourceName, nameof(dataSourceName));
            Argument.AssertNotNullOrEmpty(scanName, nameof(scanName));

            using var scope = ClientDiagnostics.CreateScope("TriggersClient.GetTrigger");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetTriggerRequest(dataSourceName, scanName, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets trigger information. </summary>
        /// <param name="dataSourceName"> The String to use. </param>
        /// <param name="scanName"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dataSourceName"/> or <paramref name="scanName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="dataSourceName"/> or <paramref name="scanName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetTrigger with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new TriggersClient("<https://my-service.azure.com>", credential);
        /// 
        /// Response response = client.GetTrigger("<dataSourceName>", "<scanName>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("frequency").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("interval").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("additionalProperties").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("minutes")[0].ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("hours")[0].ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("weekDays")[0].ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("monthDays")[0].ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("monthlyOccurrences")[0].GetProperty("additionalProperties").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("monthlyOccurrences")[0].GetProperty("day").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("monthlyOccurrences")[0].GetProperty("occurrence").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrenceInterval").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("createdAt").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("lastModifiedAt").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("lastScheduled").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("scanLevel").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("incrementalScanStartTime").ToString());
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Trigger</c>:
        /// <code>{
        ///   properties: {
        ///     recurrence: {
        ///       frequency: &quot;Week&quot; | &quot;Month&quot;, # Optional.
        ///       interval: number, # Optional.
        ///       startTime: string (ISO 8601 Format), # Optional.
        ///       endTime: string (ISO 8601 Format), # Optional.
        ///       schedule: {
        ///         additionalProperties: Dictionary&lt;string, AnyObject&gt;, # Optional. Dictionary of &lt;AnyObject&gt;
        ///         minutes: [number], # Optional.
        ///         hours: [number], # Optional.
        ///         weekDays: [&quot;Sunday&quot; | &quot;Monday&quot; | &quot;Tuesday&quot; | &quot;Wednesday&quot; | &quot;Thursday&quot; | &quot;Friday&quot; | &quot;Saturday&quot;], # Optional.
        ///         monthDays: [number], # Optional.
        ///         monthlyOccurrences: [
        ///           {
        ///             additionalProperties: Dictionary&lt;string, AnyObject&gt;, # Optional. Dictionary of &lt;AnyObject&gt;
        ///             day: &quot;Sunday&quot; | &quot;Monday&quot; | &quot;Tuesday&quot; | &quot;Wednesday&quot; | &quot;Thursday&quot; | &quot;Friday&quot; | &quot;Saturday&quot;, # Optional.
        ///             occurrence: number, # Optional.
        ///           }
        ///         ], # Optional.
        ///       }, # Optional.
        ///       timeZone: string, # Optional.
        ///     }, # Optional.
        ///     recurrenceInterval: string, # Optional.
        ///     createdAt: string (ISO 8601 Format), # Optional.
        ///     lastModifiedAt: string (ISO 8601 Format), # Optional.
        ///     lastScheduled: string (ISO 8601 Format), # Optional.
        ///     scanLevel: &quot;Full&quot; | &quot;Incremental&quot;, # Optional.
        ///     incrementalScanStartTime: string (ISO 8601 Format), # Optional.
        ///   }, # Optional.
        ///   id: string, # Optional.
        ///   name: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetTrigger(string dataSourceName, string scanName, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(dataSourceName, nameof(dataSourceName));
            Argument.AssertNotNullOrEmpty(scanName, nameof(scanName));

            using var scope = ClientDiagnostics.CreateScope("TriggersClient.GetTrigger");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetTriggerRequest(dataSourceName, scanName, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates an instance of a trigger. </summary>
        /// <param name="dataSourceName"> The String to use. </param>
        /// <param name="scanName"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dataSourceName"/>, <paramref name="scanName"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="dataSourceName"/> or <paramref name="scanName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call CreateTriggerAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new TriggersClient("<https://my-service.azure.com>", credential);
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.CreateTriggerAsync("<dataSourceName>", "<scanName>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call CreateTriggerAsync with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new TriggersClient("<https://my-service.azure.com>", credential);
        /// 
        /// var data = new {
        ///     properties = new {
        ///         recurrence = new {
        ///             frequency = "Week",
        ///             interval = 1234,
        ///             startTime = "2022-05-10T18:57:31.2311892Z",
        ///             endTime = "2022-05-10T18:57:31.2311892Z",
        ///             schedule = new {
        ///                 additionalProperties = new {
        ///                     key = new {},
        ///                 },
        ///                 minutes = new[] {
        ///                     1234
        ///                 },
        ///                 hours = new[] {
        ///                     1234
        ///                 },
        ///                 weekDays = new[] {
        ///                     "Sunday"
        ///                 },
        ///                 monthDays = new[] {
        ///                     1234
        ///                 },
        ///                 monthlyOccurrences = new[] {
        ///                     new {
        ///                         additionalProperties = new {
        ///                             key = new {},
        ///                         },
        ///                         day = "Sunday",
        ///                         occurrence = 1234,
        ///                     }
        ///                 },
        ///             },
        ///             timeZone = "<timeZone>",
        ///         },
        ///         recurrenceInterval = "<recurrenceInterval>",
        ///         scanLevel = "Full",
        ///         incrementalScanStartTime = "2022-05-10T18:57:31.2311892Z",
        ///     },
        /// };
        /// 
        /// Response response = await client.CreateTriggerAsync("<dataSourceName>", "<scanName>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("frequency").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("interval").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("additionalProperties").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("minutes")[0].ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("hours")[0].ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("weekDays")[0].ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("monthDays")[0].ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("monthlyOccurrences")[0].GetProperty("additionalProperties").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("monthlyOccurrences")[0].GetProperty("day").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("monthlyOccurrences")[0].GetProperty("occurrence").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrenceInterval").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("createdAt").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("lastModifiedAt").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("lastScheduled").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("scanLevel").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("incrementalScanStartTime").ToString());
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>Trigger</c>:
        /// <code>{
        ///   properties: {
        ///     recurrence: {
        ///       frequency: &quot;Week&quot; | &quot;Month&quot;, # Optional.
        ///       interval: number, # Optional.
        ///       startTime: string (ISO 8601 Format), # Optional.
        ///       endTime: string (ISO 8601 Format), # Optional.
        ///       schedule: {
        ///         additionalProperties: Dictionary&lt;string, AnyObject&gt;, # Optional. Dictionary of &lt;AnyObject&gt;
        ///         minutes: [number], # Optional.
        ///         hours: [number], # Optional.
        ///         weekDays: [&quot;Sunday&quot; | &quot;Monday&quot; | &quot;Tuesday&quot; | &quot;Wednesday&quot; | &quot;Thursday&quot; | &quot;Friday&quot; | &quot;Saturday&quot;], # Optional.
        ///         monthDays: [number], # Optional.
        ///         monthlyOccurrences: [
        ///           {
        ///             additionalProperties: Dictionary&lt;string, AnyObject&gt;, # Optional. Dictionary of &lt;AnyObject&gt;
        ///             day: &quot;Sunday&quot; | &quot;Monday&quot; | &quot;Tuesday&quot; | &quot;Wednesday&quot; | &quot;Thursday&quot; | &quot;Friday&quot; | &quot;Saturday&quot;, # Optional.
        ///             occurrence: number, # Optional.
        ///           }
        ///         ], # Optional.
        ///       }, # Optional.
        ///       timeZone: string, # Optional.
        ///     }, # Optional.
        ///     recurrenceInterval: string, # Optional.
        ///     createdAt: string (ISO 8601 Format), # Optional.
        ///     lastModifiedAt: string (ISO 8601 Format), # Optional.
        ///     lastScheduled: string (ISO 8601 Format), # Optional.
        ///     scanLevel: &quot;Full&quot; | &quot;Incremental&quot;, # Optional.
        ///     incrementalScanStartTime: string (ISO 8601 Format), # Optional.
        ///   }, # Optional.
        ///   id: string, # Optional.
        ///   name: string, # Optional.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Trigger</c>:
        /// <code>{
        ///   properties: {
        ///     recurrence: {
        ///       frequency: &quot;Week&quot; | &quot;Month&quot;, # Optional.
        ///       interval: number, # Optional.
        ///       startTime: string (ISO 8601 Format), # Optional.
        ///       endTime: string (ISO 8601 Format), # Optional.
        ///       schedule: {
        ///         additionalProperties: Dictionary&lt;string, AnyObject&gt;, # Optional. Dictionary of &lt;AnyObject&gt;
        ///         minutes: [number], # Optional.
        ///         hours: [number], # Optional.
        ///         weekDays: [&quot;Sunday&quot; | &quot;Monday&quot; | &quot;Tuesday&quot; | &quot;Wednesday&quot; | &quot;Thursday&quot; | &quot;Friday&quot; | &quot;Saturday&quot;], # Optional.
        ///         monthDays: [number], # Optional.
        ///         monthlyOccurrences: [
        ///           {
        ///             additionalProperties: Dictionary&lt;string, AnyObject&gt;, # Optional. Dictionary of &lt;AnyObject&gt;
        ///             day: &quot;Sunday&quot; | &quot;Monday&quot; | &quot;Tuesday&quot; | &quot;Wednesday&quot; | &quot;Thursday&quot; | &quot;Friday&quot; | &quot;Saturday&quot;, # Optional.
        ///             occurrence: number, # Optional.
        ///           }
        ///         ], # Optional.
        ///       }, # Optional.
        ///       timeZone: string, # Optional.
        ///     }, # Optional.
        ///     recurrenceInterval: string, # Optional.
        ///     createdAt: string (ISO 8601 Format), # Optional.
        ///     lastModifiedAt: string (ISO 8601 Format), # Optional.
        ///     lastScheduled: string (ISO 8601 Format), # Optional.
        ///     scanLevel: &quot;Full&quot; | &quot;Incremental&quot;, # Optional.
        ///     incrementalScanStartTime: string (ISO 8601 Format), # Optional.
        ///   }, # Optional.
        ///   id: string, # Optional.
        ///   name: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> CreateTriggerAsync(string dataSourceName, string scanName, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(dataSourceName, nameof(dataSourceName));
            Argument.AssertNotNullOrEmpty(scanName, nameof(scanName));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("TriggersClient.CreateTrigger");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateTriggerRequest(dataSourceName, scanName, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates an instance of a trigger. </summary>
        /// <param name="dataSourceName"> The String to use. </param>
        /// <param name="scanName"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dataSourceName"/>, <paramref name="scanName"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="dataSourceName"/> or <paramref name="scanName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call CreateTrigger with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new TriggersClient("<https://my-service.azure.com>", credential);
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.CreateTrigger("<dataSourceName>", "<scanName>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call CreateTrigger with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new TriggersClient("<https://my-service.azure.com>", credential);
        /// 
        /// var data = new {
        ///     properties = new {
        ///         recurrence = new {
        ///             frequency = "Week",
        ///             interval = 1234,
        ///             startTime = "2022-05-10T18:57:31.2311892Z",
        ///             endTime = "2022-05-10T18:57:31.2311892Z",
        ///             schedule = new {
        ///                 additionalProperties = new {
        ///                     key = new {},
        ///                 },
        ///                 minutes = new[] {
        ///                     1234
        ///                 },
        ///                 hours = new[] {
        ///                     1234
        ///                 },
        ///                 weekDays = new[] {
        ///                     "Sunday"
        ///                 },
        ///                 monthDays = new[] {
        ///                     1234
        ///                 },
        ///                 monthlyOccurrences = new[] {
        ///                     new {
        ///                         additionalProperties = new {
        ///                             key = new {},
        ///                         },
        ///                         day = "Sunday",
        ///                         occurrence = 1234,
        ///                     }
        ///                 },
        ///             },
        ///             timeZone = "<timeZone>",
        ///         },
        ///         recurrenceInterval = "<recurrenceInterval>",
        ///         scanLevel = "Full",
        ///         incrementalScanStartTime = "2022-05-10T18:57:31.2311892Z",
        ///     },
        /// };
        /// 
        /// Response response = client.CreateTrigger("<dataSourceName>", "<scanName>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("frequency").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("interval").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("additionalProperties").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("minutes")[0].ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("hours")[0].ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("weekDays")[0].ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("monthDays")[0].ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("monthlyOccurrences")[0].GetProperty("additionalProperties").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("monthlyOccurrences")[0].GetProperty("day").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("monthlyOccurrences")[0].GetProperty("occurrence").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrenceInterval").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("createdAt").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("lastModifiedAt").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("lastScheduled").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("scanLevel").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("incrementalScanStartTime").ToString());
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>Trigger</c>:
        /// <code>{
        ///   properties: {
        ///     recurrence: {
        ///       frequency: &quot;Week&quot; | &quot;Month&quot;, # Optional.
        ///       interval: number, # Optional.
        ///       startTime: string (ISO 8601 Format), # Optional.
        ///       endTime: string (ISO 8601 Format), # Optional.
        ///       schedule: {
        ///         additionalProperties: Dictionary&lt;string, AnyObject&gt;, # Optional. Dictionary of &lt;AnyObject&gt;
        ///         minutes: [number], # Optional.
        ///         hours: [number], # Optional.
        ///         weekDays: [&quot;Sunday&quot; | &quot;Monday&quot; | &quot;Tuesday&quot; | &quot;Wednesday&quot; | &quot;Thursday&quot; | &quot;Friday&quot; | &quot;Saturday&quot;], # Optional.
        ///         monthDays: [number], # Optional.
        ///         monthlyOccurrences: [
        ///           {
        ///             additionalProperties: Dictionary&lt;string, AnyObject&gt;, # Optional. Dictionary of &lt;AnyObject&gt;
        ///             day: &quot;Sunday&quot; | &quot;Monday&quot; | &quot;Tuesday&quot; | &quot;Wednesday&quot; | &quot;Thursday&quot; | &quot;Friday&quot; | &quot;Saturday&quot;, # Optional.
        ///             occurrence: number, # Optional.
        ///           }
        ///         ], # Optional.
        ///       }, # Optional.
        ///       timeZone: string, # Optional.
        ///     }, # Optional.
        ///     recurrenceInterval: string, # Optional.
        ///     createdAt: string (ISO 8601 Format), # Optional.
        ///     lastModifiedAt: string (ISO 8601 Format), # Optional.
        ///     lastScheduled: string (ISO 8601 Format), # Optional.
        ///     scanLevel: &quot;Full&quot; | &quot;Incremental&quot;, # Optional.
        ///     incrementalScanStartTime: string (ISO 8601 Format), # Optional.
        ///   }, # Optional.
        ///   id: string, # Optional.
        ///   name: string, # Optional.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Trigger</c>:
        /// <code>{
        ///   properties: {
        ///     recurrence: {
        ///       frequency: &quot;Week&quot; | &quot;Month&quot;, # Optional.
        ///       interval: number, # Optional.
        ///       startTime: string (ISO 8601 Format), # Optional.
        ///       endTime: string (ISO 8601 Format), # Optional.
        ///       schedule: {
        ///         additionalProperties: Dictionary&lt;string, AnyObject&gt;, # Optional. Dictionary of &lt;AnyObject&gt;
        ///         minutes: [number], # Optional.
        ///         hours: [number], # Optional.
        ///         weekDays: [&quot;Sunday&quot; | &quot;Monday&quot; | &quot;Tuesday&quot; | &quot;Wednesday&quot; | &quot;Thursday&quot; | &quot;Friday&quot; | &quot;Saturday&quot;], # Optional.
        ///         monthDays: [number], # Optional.
        ///         monthlyOccurrences: [
        ///           {
        ///             additionalProperties: Dictionary&lt;string, AnyObject&gt;, # Optional. Dictionary of &lt;AnyObject&gt;
        ///             day: &quot;Sunday&quot; | &quot;Monday&quot; | &quot;Tuesday&quot; | &quot;Wednesday&quot; | &quot;Thursday&quot; | &quot;Friday&quot; | &quot;Saturday&quot;, # Optional.
        ///             occurrence: number, # Optional.
        ///           }
        ///         ], # Optional.
        ///       }, # Optional.
        ///       timeZone: string, # Optional.
        ///     }, # Optional.
        ///     recurrenceInterval: string, # Optional.
        ///     createdAt: string (ISO 8601 Format), # Optional.
        ///     lastModifiedAt: string (ISO 8601 Format), # Optional.
        ///     lastScheduled: string (ISO 8601 Format), # Optional.
        ///     scanLevel: &quot;Full&quot; | &quot;Incremental&quot;, # Optional.
        ///     incrementalScanStartTime: string (ISO 8601 Format), # Optional.
        ///   }, # Optional.
        ///   id: string, # Optional.
        ///   name: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response CreateTrigger(string dataSourceName, string scanName, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(dataSourceName, nameof(dataSourceName));
            Argument.AssertNotNullOrEmpty(scanName, nameof(scanName));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("TriggersClient.CreateTrigger");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateTriggerRequest(dataSourceName, scanName, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes the trigger associated with the scan. </summary>
        /// <param name="dataSourceName"> The String to use. </param>
        /// <param name="scanName"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dataSourceName"/> or <paramref name="scanName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="dataSourceName"/> or <paramref name="scanName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call DeleteTriggerAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new TriggersClient("<https://my-service.azure.com>", credential);
        /// 
        /// Response response = await client.DeleteTriggerAsync("<dataSourceName>", "<scanName>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("frequency").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("interval").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("additionalProperties").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("minutes")[0].ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("hours")[0].ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("weekDays")[0].ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("monthDays")[0].ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("monthlyOccurrences")[0].GetProperty("additionalProperties").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("monthlyOccurrences")[0].GetProperty("day").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("monthlyOccurrences")[0].GetProperty("occurrence").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrenceInterval").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("createdAt").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("lastModifiedAt").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("lastScheduled").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("scanLevel").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("incrementalScanStartTime").ToString());
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Trigger</c>:
        /// <code>{
        ///   properties: {
        ///     recurrence: {
        ///       frequency: &quot;Week&quot; | &quot;Month&quot;, # Optional.
        ///       interval: number, # Optional.
        ///       startTime: string (ISO 8601 Format), # Optional.
        ///       endTime: string (ISO 8601 Format), # Optional.
        ///       schedule: {
        ///         additionalProperties: Dictionary&lt;string, AnyObject&gt;, # Optional. Dictionary of &lt;AnyObject&gt;
        ///         minutes: [number], # Optional.
        ///         hours: [number], # Optional.
        ///         weekDays: [&quot;Sunday&quot; | &quot;Monday&quot; | &quot;Tuesday&quot; | &quot;Wednesday&quot; | &quot;Thursday&quot; | &quot;Friday&quot; | &quot;Saturday&quot;], # Optional.
        ///         monthDays: [number], # Optional.
        ///         monthlyOccurrences: [
        ///           {
        ///             additionalProperties: Dictionary&lt;string, AnyObject&gt;, # Optional. Dictionary of &lt;AnyObject&gt;
        ///             day: &quot;Sunday&quot; | &quot;Monday&quot; | &quot;Tuesday&quot; | &quot;Wednesday&quot; | &quot;Thursday&quot; | &quot;Friday&quot; | &quot;Saturday&quot;, # Optional.
        ///             occurrence: number, # Optional.
        ///           }
        ///         ], # Optional.
        ///       }, # Optional.
        ///       timeZone: string, # Optional.
        ///     }, # Optional.
        ///     recurrenceInterval: string, # Optional.
        ///     createdAt: string (ISO 8601 Format), # Optional.
        ///     lastModifiedAt: string (ISO 8601 Format), # Optional.
        ///     lastScheduled: string (ISO 8601 Format), # Optional.
        ///     scanLevel: &quot;Full&quot; | &quot;Incremental&quot;, # Optional.
        ///     incrementalScanStartTime: string (ISO 8601 Format), # Optional.
        ///   }, # Optional.
        ///   id: string, # Optional.
        ///   name: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> DeleteTriggerAsync(string dataSourceName, string scanName, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(dataSourceName, nameof(dataSourceName));
            Argument.AssertNotNullOrEmpty(scanName, nameof(scanName));

            using var scope = ClientDiagnostics.CreateScope("TriggersClient.DeleteTrigger");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteTriggerRequest(dataSourceName, scanName, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes the trigger associated with the scan. </summary>
        /// <param name="dataSourceName"> The String to use. </param>
        /// <param name="scanName"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dataSourceName"/> or <paramref name="scanName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="dataSourceName"/> or <paramref name="scanName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call DeleteTrigger with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new TriggersClient("<https://my-service.azure.com>", credential);
        /// 
        /// Response response = client.DeleteTrigger("<dataSourceName>", "<scanName>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("frequency").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("interval").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("additionalProperties").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("minutes")[0].ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("hours")[0].ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("weekDays")[0].ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("monthDays")[0].ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("monthlyOccurrences")[0].GetProperty("additionalProperties").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("monthlyOccurrences")[0].GetProperty("day").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("schedule").GetProperty("monthlyOccurrences")[0].GetProperty("occurrence").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrence").GetProperty("timeZone").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("recurrenceInterval").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("createdAt").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("lastModifiedAt").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("lastScheduled").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("scanLevel").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("incrementalScanStartTime").ToString());
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Trigger</c>:
        /// <code>{
        ///   properties: {
        ///     recurrence: {
        ///       frequency: &quot;Week&quot; | &quot;Month&quot;, # Optional.
        ///       interval: number, # Optional.
        ///       startTime: string (ISO 8601 Format), # Optional.
        ///       endTime: string (ISO 8601 Format), # Optional.
        ///       schedule: {
        ///         additionalProperties: Dictionary&lt;string, AnyObject&gt;, # Optional. Dictionary of &lt;AnyObject&gt;
        ///         minutes: [number], # Optional.
        ///         hours: [number], # Optional.
        ///         weekDays: [&quot;Sunday&quot; | &quot;Monday&quot; | &quot;Tuesday&quot; | &quot;Wednesday&quot; | &quot;Thursday&quot; | &quot;Friday&quot; | &quot;Saturday&quot;], # Optional.
        ///         monthDays: [number], # Optional.
        ///         monthlyOccurrences: [
        ///           {
        ///             additionalProperties: Dictionary&lt;string, AnyObject&gt;, # Optional. Dictionary of &lt;AnyObject&gt;
        ///             day: &quot;Sunday&quot; | &quot;Monday&quot; | &quot;Tuesday&quot; | &quot;Wednesday&quot; | &quot;Thursday&quot; | &quot;Friday&quot; | &quot;Saturday&quot;, # Optional.
        ///             occurrence: number, # Optional.
        ///           }
        ///         ], # Optional.
        ///       }, # Optional.
        ///       timeZone: string, # Optional.
        ///     }, # Optional.
        ///     recurrenceInterval: string, # Optional.
        ///     createdAt: string (ISO 8601 Format), # Optional.
        ///     lastModifiedAt: string (ISO 8601 Format), # Optional.
        ///     lastScheduled: string (ISO 8601 Format), # Optional.
        ///     scanLevel: &quot;Full&quot; | &quot;Incremental&quot;, # Optional.
        ///     incrementalScanStartTime: string (ISO 8601 Format), # Optional.
        ///   }, # Optional.
        ///   id: string, # Optional.
        ///   name: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response DeleteTrigger(string dataSourceName, string scanName, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(dataSourceName, nameof(dataSourceName));
            Argument.AssertNotNullOrEmpty(scanName, nameof(scanName));

            using var scope = ClientDiagnostics.CreateScope("TriggersClient.DeleteTrigger");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteTriggerRequest(dataSourceName, scanName, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateGetTriggerRequest(string dataSourceName, string scanName, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/datasources/", false);
            uri.AppendPath(dataSourceName, true);
            uri.AppendPath("/scans/", false);
            uri.AppendPath(scanName, true);
            uri.AppendPath("/triggers/default", false);
            uri.AppendQuery("api-version", "2018-12-01-preview", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateCreateTriggerRequest(string dataSourceName, string scanName, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200201);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/datasources/", false);
            uri.AppendPath(dataSourceName, true);
            uri.AppendPath("/scans/", false);
            uri.AppendPath(scanName, true);
            uri.AppendPath("/triggers/default", false);
            uri.AppendQuery("api-version", "2018-12-01-preview", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeleteTriggerRequest(string dataSourceName, string scanName, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200204);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/datasources/", false);
            uri.AppendPath(dataSourceName, true);
            uri.AppendPath("/scans/", false);
            uri.AppendPath(scanName, true);
            uri.AppendPath("/triggers/default", false);
            uri.AppendQuery("api-version", "2018-12-01-preview", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier200201;
        private static ResponseClassifier ResponseClassifier200201 => _responseClassifier200201 ??= new StatusCodeClassifier(stackalloc ushort[] { 200, 201 });
        private static ResponseClassifier _responseClassifier200204;
        private static ResponseClassifier ResponseClassifier200204 => _responseClassifier200204 ??= new StatusCodeClassifier(stackalloc ushort[] { 200, 204 });
    }
}
