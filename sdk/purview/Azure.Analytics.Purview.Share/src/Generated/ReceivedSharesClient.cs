// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Analytics.Purview.Share
{
    // Data plane generated client. The ReceivedShares service client.
    /// <summary> The ReceivedShares service client. </summary>
    public partial class ReceivedSharesClient
    {
        private static readonly string[] AuthorizationScopes = new string[] { "https://purview.azure.net/.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly string _endpoint;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of ReceivedSharesClient for mocking. </summary>
        protected ReceivedSharesClient()
        {
        }

        /// <summary> Initializes a new instance of ReceivedSharesClient. </summary>
        /// <param name="endpoint"> The scanning endpoint of your purview account. Example: https://{accountName}.purview.azure.com/share. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public ReceivedSharesClient(string endpoint, TokenCredential credential) : this(endpoint, credential, new PurviewShareClientOptions())
        {
        }

        /// <summary> Initializes a new instance of ReceivedSharesClient. </summary>
        /// <param name="endpoint"> The scanning endpoint of your purview account. Example: https://{accountName}.purview.azure.com/share. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public ReceivedSharesClient(string endpoint, TokenCredential credential, PurviewShareClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            Argument.AssertNotNull(credential, nameof(credential));
            options ??= new PurviewShareClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes) }, new ResponseClassifier());
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        /// <summary> Get a received share by name. </summary>
        /// <param name="receivedShareName"> The name of the received share. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="receivedShareName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="receivedShareName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetReceivedShareAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ReceivedSharesClient("<https://my-service.azure.com>", credential);
        /// 
        /// Response response = await client.GetReceivedShareAsync("<receivedShareName>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("shareKind").ToString());
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("type").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Get a received share
        /// 
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// <details><summary>InPlaceReceivedShare</summary>Schema for <c>InPlaceReceivedShare</c>:
        /// <code>{
        ///   properties: {
        ///     collection: {
        ///       referenceName: string, # Required. Gets or sets the reference name.
        ///       type: string, # Required. Gets or sets the reference type property.
        ///     }, # Required. Reference to a Collection.
        ///     createdAt: string (ISO 8601 Format), # Optional. Time at which the received share was created.
        ///     expirationDate: string (ISO 8601 Format), # Optional. The expiration date of the received share.
        ///     invitationId: string, # Required. The invitation id.
        ///     provisioningState: &quot;Unknown&quot; | &quot;Succeeded&quot; | &quot;Creating&quot; | &quot;Deleting&quot; | &quot;Moving&quot; | &quot;Failed&quot; | &quot;SoftDeleting&quot; | &quot;SoftDeleted&quot; | &quot;SourceMoved&quot; | &quot;SourceDeleted&quot; | &quot;TargetMoved&quot; | &quot;TargetDeleted&quot;, # Optional. Provisioning status of the resource
        ///     receivedShareStatus: &quot;Active&quot; | &quot;Reinstating&quot; | &quot;Revoked&quot; | &quot;Revoking&quot; | &quot;RevokeFailed&quot; | &quot;ReinstateFailed&quot; | &quot;SourceDeleted&quot;, # Optional. received share status
        ///     receiverEmail: string, # Optional. Email of the user/receiver who received the sent share invitation
        ///     receiverName: string, # Optional. Name of the user/receiver who received the sent share invitation
        ///     receiverTenantName: string, # Optional. Tenant name of the user/receiver who received the sent share invitation
        ///     senderEmail: string, # Optional. Email of the sender who created the sent share invitation
        ///     senderName: string, # Optional. Name of the sender who created the sent share invitation
        ///     senderTenantName: string, # Optional. Tenant name of the sender who created the sent share invitation
        ///     sentShareDescription: string, # Optional. Share description.
        ///     sentShareLocation: string, # Required. Sent share location.
        ///     sharedAt: string (ISO 8601 Format), # Optional. Time at which the sent share was shared.
        ///     shareName: string, # Optional. Name of the share
        ///   }, # Required. Properties of in place received share.
        ///   shareKind: InPlace, # Required. Defines the supported types for share.
        ///   id: string, # Optional. The resource id of the resource.
        ///   name: string, # Optional. Name of the resource.
        ///   type: string, # Optional. Type of the resource.
        /// }
        /// </code>
        /// </details>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetReceivedShareAsync(string receivedShareName, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(receivedShareName, nameof(receivedShareName));

            using var scope = ClientDiagnostics.CreateScope("ReceivedSharesClient.GetReceivedShare");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetReceivedShareRequest(receivedShareName, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a received share by name. </summary>
        /// <param name="receivedShareName"> The name of the received share. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="receivedShareName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="receivedShareName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetReceivedShare with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ReceivedSharesClient("<https://my-service.azure.com>", credential);
        /// 
        /// Response response = client.GetReceivedShare("<receivedShareName>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("shareKind").ToString());
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("type").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Get a received share
        /// 
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// <details><summary>InPlaceReceivedShare</summary>Schema for <c>InPlaceReceivedShare</c>:
        /// <code>{
        ///   properties: {
        ///     collection: {
        ///       referenceName: string, # Required. Gets or sets the reference name.
        ///       type: string, # Required. Gets or sets the reference type property.
        ///     }, # Required. Reference to a Collection.
        ///     createdAt: string (ISO 8601 Format), # Optional. Time at which the received share was created.
        ///     expirationDate: string (ISO 8601 Format), # Optional. The expiration date of the received share.
        ///     invitationId: string, # Required. The invitation id.
        ///     provisioningState: &quot;Unknown&quot; | &quot;Succeeded&quot; | &quot;Creating&quot; | &quot;Deleting&quot; | &quot;Moving&quot; | &quot;Failed&quot; | &quot;SoftDeleting&quot; | &quot;SoftDeleted&quot; | &quot;SourceMoved&quot; | &quot;SourceDeleted&quot; | &quot;TargetMoved&quot; | &quot;TargetDeleted&quot;, # Optional. Provisioning status of the resource
        ///     receivedShareStatus: &quot;Active&quot; | &quot;Reinstating&quot; | &quot;Revoked&quot; | &quot;Revoking&quot; | &quot;RevokeFailed&quot; | &quot;ReinstateFailed&quot; | &quot;SourceDeleted&quot;, # Optional. received share status
        ///     receiverEmail: string, # Optional. Email of the user/receiver who received the sent share invitation
        ///     receiverName: string, # Optional. Name of the user/receiver who received the sent share invitation
        ///     receiverTenantName: string, # Optional. Tenant name of the user/receiver who received the sent share invitation
        ///     senderEmail: string, # Optional. Email of the sender who created the sent share invitation
        ///     senderName: string, # Optional. Name of the sender who created the sent share invitation
        ///     senderTenantName: string, # Optional. Tenant name of the sender who created the sent share invitation
        ///     sentShareDescription: string, # Optional. Share description.
        ///     sentShareLocation: string, # Required. Sent share location.
        ///     sharedAt: string (ISO 8601 Format), # Optional. Time at which the sent share was shared.
        ///     shareName: string, # Optional. Name of the share
        ///   }, # Required. Properties of in place received share.
        ///   shareKind: InPlace, # Required. Defines the supported types for share.
        ///   id: string, # Optional. The resource id of the resource.
        ///   name: string, # Optional. Name of the resource.
        ///   type: string, # Optional. Type of the resource.
        /// }
        /// </code>
        /// </details>
        /// 
        /// </remarks>
        public virtual Response GetReceivedShare(string receivedShareName, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(receivedShareName, nameof(receivedShareName));

            using var scope = ClientDiagnostics.CreateScope("ReceivedSharesClient.GetReceivedShare");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetReceivedShareRequest(receivedShareName, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a received share in the given account. </summary>
        /// <param name="receivedShareName"> The name of the received share. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="receivedShareName"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="receivedShareName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call CreateAsync with required parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ReceivedSharesClient("<https://my-service.azure.com>", credential);
        /// 
        /// var data = new {
        ///     properties = new {
        ///         collection = new {
        ///             referenceName = "<referenceName>",
        ///             type = "<type>",
        ///         },
        ///         invitationId = "<invitationId>",
        ///         sentShareLocation = "<sentShareLocation>",
        ///     },
        ///     shareKind = "InPlace",
        /// };
        /// 
        /// Response response = await client.CreateAsync("<receivedShareName>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("shareKind").ToString());
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call CreateAsync with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ReceivedSharesClient("<https://my-service.azure.com>", credential);
        /// 
        /// var data = new {
        ///     properties = new {
        ///         collection = new {
        ///             referenceName = "<referenceName>",
        ///             type = "<type>",
        ///         },
        ///         expirationDate = "2022-05-10T18:57:31.2311892Z",
        ///         invitationId = "<invitationId>",
        ///         sentShareDescription = "<sentShareDescription>",
        ///         sentShareLocation = "<sentShareLocation>",
        ///     },
        ///     shareKind = "InPlace",
        /// };
        /// 
        /// Response response = await client.CreateAsync("<receivedShareName>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("shareKind").ToString());
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("type").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Create a received share
        /// 
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// <details><summary>InPlaceReceivedShare</summary>Schema for <c>InPlaceReceivedShare</c>:
        /// <code>{
        ///   properties: {
        ///     collection: {
        ///       referenceName: string, # Required. Gets or sets the reference name.
        ///       type: string, # Required. Gets or sets the reference type property.
        ///     }, # Required. Reference to a Collection.
        ///     createdAt: string (ISO 8601 Format), # Optional. Time at which the received share was created.
        ///     expirationDate: string (ISO 8601 Format), # Optional. The expiration date of the received share.
        ///     invitationId: string, # Required. The invitation id.
        ///     provisioningState: &quot;Unknown&quot; | &quot;Succeeded&quot; | &quot;Creating&quot; | &quot;Deleting&quot; | &quot;Moving&quot; | &quot;Failed&quot; | &quot;SoftDeleting&quot; | &quot;SoftDeleted&quot; | &quot;SourceMoved&quot; | &quot;SourceDeleted&quot; | &quot;TargetMoved&quot; | &quot;TargetDeleted&quot;, # Optional. Provisioning status of the resource
        ///     receivedShareStatus: &quot;Active&quot; | &quot;Reinstating&quot; | &quot;Revoked&quot; | &quot;Revoking&quot; | &quot;RevokeFailed&quot; | &quot;ReinstateFailed&quot; | &quot;SourceDeleted&quot;, # Optional. received share status
        ///     receiverEmail: string, # Optional. Email of the user/receiver who received the sent share invitation
        ///     receiverName: string, # Optional. Name of the user/receiver who received the sent share invitation
        ///     receiverTenantName: string, # Optional. Tenant name of the user/receiver who received the sent share invitation
        ///     senderEmail: string, # Optional. Email of the sender who created the sent share invitation
        ///     senderName: string, # Optional. Name of the sender who created the sent share invitation
        ///     senderTenantName: string, # Optional. Tenant name of the sender who created the sent share invitation
        ///     sentShareDescription: string, # Optional. Share description.
        ///     sentShareLocation: string, # Required. Sent share location.
        ///     sharedAt: string (ISO 8601 Format), # Optional. Time at which the sent share was shared.
        ///     shareName: string, # Optional. Name of the share
        ///   }, # Required. Properties of in place received share.
        ///   shareKind: InPlace, # Required. Defines the supported types for share.
        ///   id: string, # Optional. The resource id of the resource.
        ///   name: string, # Optional. Name of the resource.
        ///   type: string, # Optional. Type of the resource.
        /// }
        /// </code>
        /// </details>
        /// 
        /// Response Body:
        /// 
        /// <details><summary>InPlaceReceivedShare</summary>Schema for <c>InPlaceReceivedShare</c>:
        /// <code>{
        ///   properties: {
        ///     collection: {
        ///       referenceName: string, # Required. Gets or sets the reference name.
        ///       type: string, # Required. Gets or sets the reference type property.
        ///     }, # Required. Reference to a Collection.
        ///     createdAt: string (ISO 8601 Format), # Optional. Time at which the received share was created.
        ///     expirationDate: string (ISO 8601 Format), # Optional. The expiration date of the received share.
        ///     invitationId: string, # Required. The invitation id.
        ///     provisioningState: &quot;Unknown&quot; | &quot;Succeeded&quot; | &quot;Creating&quot; | &quot;Deleting&quot; | &quot;Moving&quot; | &quot;Failed&quot; | &quot;SoftDeleting&quot; | &quot;SoftDeleted&quot; | &quot;SourceMoved&quot; | &quot;SourceDeleted&quot; | &quot;TargetMoved&quot; | &quot;TargetDeleted&quot;, # Optional. Provisioning status of the resource
        ///     receivedShareStatus: &quot;Active&quot; | &quot;Reinstating&quot; | &quot;Revoked&quot; | &quot;Revoking&quot; | &quot;RevokeFailed&quot; | &quot;ReinstateFailed&quot; | &quot;SourceDeleted&quot;, # Optional. received share status
        ///     receiverEmail: string, # Optional. Email of the user/receiver who received the sent share invitation
        ///     receiverName: string, # Optional. Name of the user/receiver who received the sent share invitation
        ///     receiverTenantName: string, # Optional. Tenant name of the user/receiver who received the sent share invitation
        ///     senderEmail: string, # Optional. Email of the sender who created the sent share invitation
        ///     senderName: string, # Optional. Name of the sender who created the sent share invitation
        ///     senderTenantName: string, # Optional. Tenant name of the sender who created the sent share invitation
        ///     sentShareDescription: string, # Optional. Share description.
        ///     sentShareLocation: string, # Required. Sent share location.
        ///     sharedAt: string (ISO 8601 Format), # Optional. Time at which the sent share was shared.
        ///     shareName: string, # Optional. Name of the share
        ///   }, # Required. Properties of in place received share.
        ///   shareKind: InPlace, # Required. Defines the supported types for share.
        ///   id: string, # Optional. The resource id of the resource.
        ///   name: string, # Optional. Name of the resource.
        ///   type: string, # Optional. Type of the resource.
        /// }
        /// </code>
        /// </details>
        /// 
        /// </remarks>
        public virtual async Task<Response> CreateAsync(string receivedShareName, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(receivedShareName, nameof(receivedShareName));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("ReceivedSharesClient.Create");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateRequest(receivedShareName, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a received share in the given account. </summary>
        /// <param name="receivedShareName"> The name of the received share. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="receivedShareName"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="receivedShareName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call Create with required parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ReceivedSharesClient("<https://my-service.azure.com>", credential);
        /// 
        /// var data = new {
        ///     properties = new {
        ///         collection = new {
        ///             referenceName = "<referenceName>",
        ///             type = "<type>",
        ///         },
        ///         invitationId = "<invitationId>",
        ///         sentShareLocation = "<sentShareLocation>",
        ///     },
        ///     shareKind = "InPlace",
        /// };
        /// 
        /// Response response = client.Create("<receivedShareName>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("shareKind").ToString());
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call Create with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ReceivedSharesClient("<https://my-service.azure.com>", credential);
        /// 
        /// var data = new {
        ///     properties = new {
        ///         collection = new {
        ///             referenceName = "<referenceName>",
        ///             type = "<type>",
        ///         },
        ///         expirationDate = "2022-05-10T18:57:31.2311892Z",
        ///         invitationId = "<invitationId>",
        ///         sentShareDescription = "<sentShareDescription>",
        ///         sentShareLocation = "<sentShareLocation>",
        ///     },
        ///     shareKind = "InPlace",
        /// };
        /// 
        /// Response response = client.Create("<receivedShareName>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("shareKind").ToString());
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("type").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Create a received share
        /// 
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// <details><summary>InPlaceReceivedShare</summary>Schema for <c>InPlaceReceivedShare</c>:
        /// <code>{
        ///   properties: {
        ///     collection: {
        ///       referenceName: string, # Required. Gets or sets the reference name.
        ///       type: string, # Required. Gets or sets the reference type property.
        ///     }, # Required. Reference to a Collection.
        ///     createdAt: string (ISO 8601 Format), # Optional. Time at which the received share was created.
        ///     expirationDate: string (ISO 8601 Format), # Optional. The expiration date of the received share.
        ///     invitationId: string, # Required. The invitation id.
        ///     provisioningState: &quot;Unknown&quot; | &quot;Succeeded&quot; | &quot;Creating&quot; | &quot;Deleting&quot; | &quot;Moving&quot; | &quot;Failed&quot; | &quot;SoftDeleting&quot; | &quot;SoftDeleted&quot; | &quot;SourceMoved&quot; | &quot;SourceDeleted&quot; | &quot;TargetMoved&quot; | &quot;TargetDeleted&quot;, # Optional. Provisioning status of the resource
        ///     receivedShareStatus: &quot;Active&quot; | &quot;Reinstating&quot; | &quot;Revoked&quot; | &quot;Revoking&quot; | &quot;RevokeFailed&quot; | &quot;ReinstateFailed&quot; | &quot;SourceDeleted&quot;, # Optional. received share status
        ///     receiverEmail: string, # Optional. Email of the user/receiver who received the sent share invitation
        ///     receiverName: string, # Optional. Name of the user/receiver who received the sent share invitation
        ///     receiverTenantName: string, # Optional. Tenant name of the user/receiver who received the sent share invitation
        ///     senderEmail: string, # Optional. Email of the sender who created the sent share invitation
        ///     senderName: string, # Optional. Name of the sender who created the sent share invitation
        ///     senderTenantName: string, # Optional. Tenant name of the sender who created the sent share invitation
        ///     sentShareDescription: string, # Optional. Share description.
        ///     sentShareLocation: string, # Required. Sent share location.
        ///     sharedAt: string (ISO 8601 Format), # Optional. Time at which the sent share was shared.
        ///     shareName: string, # Optional. Name of the share
        ///   }, # Required. Properties of in place received share.
        ///   shareKind: InPlace, # Required. Defines the supported types for share.
        ///   id: string, # Optional. The resource id of the resource.
        ///   name: string, # Optional. Name of the resource.
        ///   type: string, # Optional. Type of the resource.
        /// }
        /// </code>
        /// </details>
        /// 
        /// Response Body:
        /// 
        /// <details><summary>InPlaceReceivedShare</summary>Schema for <c>InPlaceReceivedShare</c>:
        /// <code>{
        ///   properties: {
        ///     collection: {
        ///       referenceName: string, # Required. Gets or sets the reference name.
        ///       type: string, # Required. Gets or sets the reference type property.
        ///     }, # Required. Reference to a Collection.
        ///     createdAt: string (ISO 8601 Format), # Optional. Time at which the received share was created.
        ///     expirationDate: string (ISO 8601 Format), # Optional. The expiration date of the received share.
        ///     invitationId: string, # Required. The invitation id.
        ///     provisioningState: &quot;Unknown&quot; | &quot;Succeeded&quot; | &quot;Creating&quot; | &quot;Deleting&quot; | &quot;Moving&quot; | &quot;Failed&quot; | &quot;SoftDeleting&quot; | &quot;SoftDeleted&quot; | &quot;SourceMoved&quot; | &quot;SourceDeleted&quot; | &quot;TargetMoved&quot; | &quot;TargetDeleted&quot;, # Optional. Provisioning status of the resource
        ///     receivedShareStatus: &quot;Active&quot; | &quot;Reinstating&quot; | &quot;Revoked&quot; | &quot;Revoking&quot; | &quot;RevokeFailed&quot; | &quot;ReinstateFailed&quot; | &quot;SourceDeleted&quot;, # Optional. received share status
        ///     receiverEmail: string, # Optional. Email of the user/receiver who received the sent share invitation
        ///     receiverName: string, # Optional. Name of the user/receiver who received the sent share invitation
        ///     receiverTenantName: string, # Optional. Tenant name of the user/receiver who received the sent share invitation
        ///     senderEmail: string, # Optional. Email of the sender who created the sent share invitation
        ///     senderName: string, # Optional. Name of the sender who created the sent share invitation
        ///     senderTenantName: string, # Optional. Tenant name of the sender who created the sent share invitation
        ///     sentShareDescription: string, # Optional. Share description.
        ///     sentShareLocation: string, # Required. Sent share location.
        ///     sharedAt: string (ISO 8601 Format), # Optional. Time at which the sent share was shared.
        ///     shareName: string, # Optional. Name of the share
        ///   }, # Required. Properties of in place received share.
        ///   shareKind: InPlace, # Required. Defines the supported types for share.
        ///   id: string, # Optional. The resource id of the resource.
        ///   name: string, # Optional. Name of the resource.
        ///   type: string, # Optional. Type of the resource.
        /// }
        /// </code>
        /// </details>
        /// 
        /// </remarks>
        public virtual Response Create(string receivedShareName, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(receivedShareName, nameof(receivedShareName));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("ReceivedSharesClient.Create");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateRequest(receivedShareName, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a list of received shares. </summary>
        /// <param name="skipToken"> The continuation token to list the next page. </param>
        /// <param name="filter"> Filters the results using OData syntax. </param>
        /// <param name="orderby"> Sorts the results using OData syntax. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="AsyncPageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetReceivedSharesAsync and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ReceivedSharesClient("<https://my-service.azure.com>", credential);
        /// 
        /// await foreach (var data in client.GetReceivedSharesAsync())
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.GetProperty("shareKind").ToString());
        ///     Console.WriteLine(result.ToString());
        /// }
        /// ]]></code>
        /// This sample shows how to call GetReceivedSharesAsync with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ReceivedSharesClient("<https://my-service.azure.com>", credential);
        /// 
        /// await foreach (var data in client.GetReceivedSharesAsync("<skipToken>", "<filter>", "<orderby>"))
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.GetProperty("shareKind").ToString());
        ///     Console.WriteLine(result.GetProperty("id").ToString());
        ///     Console.WriteLine(result.GetProperty("name").ToString());
        ///     Console.WriteLine(result.GetProperty("type").ToString());
        /// }
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// List received shares
        /// 
        /// Below is the JSON schema for one item in the pageable response.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ReceivedShareListValue</c>:
        /// <code>{
        ///   shareKind: &quot;InPlace&quot;, # Required. Defines the supported types for share.
        ///   id: string, # Optional. The resource id of the resource.
        ///   name: string, # Optional. Name of the resource.
        ///   type: string, # Optional. Type of the resource.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual AsyncPageable<BinaryData> GetReceivedSharesAsync(string skipToken = null, string filter = null, string orderby = null, RequestContext context = null)
        {
            return GetReceivedSharesImplementationAsync("ReceivedSharesClient.GetReceivedShares", skipToken, filter, orderby, context);
        }

        private AsyncPageable<BinaryData> GetReceivedSharesImplementationAsync(string diagnosticsScopeName, string skipToken, string filter, string orderby, RequestContext context)
        {
            return PageableHelpers.CreateAsyncPageable(CreateEnumerableAsync, ClientDiagnostics, diagnosticsScopeName);
            async IAsyncEnumerable<Page<BinaryData>> CreateEnumerableAsync(string nextLink, int? pageSizeHint, [EnumeratorCancellation] CancellationToken cancellationToken = default)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetReceivedSharesRequest(skipToken, filter, orderby, context)
                        : CreateGetReceivedSharesNextPageRequest(nextLink, skipToken, filter, orderby, context);
                    var page = await LowLevelPageableHelpers.ProcessMessageAsync(_pipeline, message, context, "value", "nextLink", cancellationToken).ConfigureAwait(false);
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Get a list of received shares. </summary>
        /// <param name="skipToken"> The continuation token to list the next page. </param>
        /// <param name="filter"> Filters the results using OData syntax. </param>
        /// <param name="orderby"> Sorts the results using OData syntax. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Pageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetReceivedShares and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ReceivedSharesClient("<https://my-service.azure.com>", credential);
        /// 
        /// foreach (var data in client.GetReceivedShares())
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.GetProperty("shareKind").ToString());
        ///     Console.WriteLine(result.ToString());
        /// }
        /// ]]></code>
        /// This sample shows how to call GetReceivedShares with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ReceivedSharesClient("<https://my-service.azure.com>", credential);
        /// 
        /// foreach (var data in client.GetReceivedShares("<skipToken>", "<filter>", "<orderby>"))
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.GetProperty("shareKind").ToString());
        ///     Console.WriteLine(result.GetProperty("id").ToString());
        ///     Console.WriteLine(result.GetProperty("name").ToString());
        ///     Console.WriteLine(result.GetProperty("type").ToString());
        /// }
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// List received shares
        /// 
        /// Below is the JSON schema for one item in the pageable response.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ReceivedShareListValue</c>:
        /// <code>{
        ///   shareKind: &quot;InPlace&quot;, # Required. Defines the supported types for share.
        ///   id: string, # Optional. The resource id of the resource.
        ///   name: string, # Optional. Name of the resource.
        ///   type: string, # Optional. Type of the resource.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Pageable<BinaryData> GetReceivedShares(string skipToken = null, string filter = null, string orderby = null, RequestContext context = null)
        {
            return GetReceivedSharesImplementation("ReceivedSharesClient.GetReceivedShares", skipToken, filter, orderby, context);
        }

        private Pageable<BinaryData> GetReceivedSharesImplementation(string diagnosticsScopeName, string skipToken, string filter, string orderby, RequestContext context)
        {
            return PageableHelpers.CreatePageable(CreateEnumerable, ClientDiagnostics, diagnosticsScopeName);
            IEnumerable<Page<BinaryData>> CreateEnumerable(string nextLink, int? pageSizeHint)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetReceivedSharesRequest(skipToken, filter, orderby, context)
                        : CreateGetReceivedSharesNextPageRequest(nextLink, skipToken, filter, orderby, context);
                    var page = LowLevelPageableHelpers.ProcessMessage(_pipeline, message, context, "value", "nextLink");
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Deletes a received share. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="receivedShareName"> The name of the received share. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="receivedShareName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="receivedShareName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Operation"/> representing an asynchronous operation on the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteAsync with required parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ReceivedSharesClient("<https://my-service.azure.com>", credential);
        /// 
        /// var operation = await client.DeleteAsync(WaitUntil.Completed, "<receivedShareName>");
        /// 
        /// var response = await operation.WaitForCompletionResponseAsync();
        /// Console.WriteLine(response.Status)
        /// ]]></code>
        /// </example>
        /// <remarks> Delete a received share. </remarks>
        public virtual async Task<Operation> DeleteAsync(WaitUntil waitUntil, string receivedShareName, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(receivedShareName, nameof(receivedShareName));

            using var scope = ClientDiagnostics.CreateScope("ReceivedSharesClient.Delete");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteRequest(receivedShareName, context);
                return await ProtocolOperationHelpers.ProcessMessageWithoutResponseValueAsync(_pipeline, message, ClientDiagnostics, "ReceivedSharesClient.Delete", OperationFinalStateVia.Location, context, waitUntil).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a received share. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="receivedShareName"> The name of the received share. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="receivedShareName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="receivedShareName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Operation"/> representing an asynchronous operation on the service. </returns>
        /// <example>
        /// This sample shows how to call Delete with required parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ReceivedSharesClient("<https://my-service.azure.com>", credential);
        /// 
        /// var operation = client.Delete(WaitUntil.Completed, "<receivedShareName>");
        /// 
        /// var response = operation.WaitForCompletionResponse();
        /// Console.WriteLine(response.Status)
        /// ]]></code>
        /// </example>
        /// <remarks> Delete a received share. </remarks>
        public virtual Operation Delete(WaitUntil waitUntil, string receivedShareName, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(receivedShareName, nameof(receivedShareName));

            using var scope = ClientDiagnostics.CreateScope("ReceivedSharesClient.Delete");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteRequest(receivedShareName, context);
                return ProtocolOperationHelpers.ProcessMessageWithoutResponseValue(_pipeline, message, ClientDiagnostics, "ReceivedSharesClient.Delete", OperationFinalStateVia.Location, context, waitUntil);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateGetReceivedSharesRequest(string skipToken, string filter, string orderby, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/receivedShares", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (skipToken != null)
            {
                uri.AppendQuery("skipToken", skipToken, true);
            }
            if (filter != null)
            {
                uri.AppendQuery("$filter", filter, true);
            }
            if (orderby != null)
            {
                uri.AppendQuery("$orderby", orderby, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetReceivedShareRequest(string receivedShareName, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/receivedShares/", false);
            uri.AppendPath(receivedShareName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateCreateRequest(string receivedShareName, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier201);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/receivedShares/", false);
            uri.AppendPath(receivedShareName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeleteRequest(string receivedShareName, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier202);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/receivedShares/", false);
            uri.AppendPath(receivedShareName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetReceivedSharesNextPageRequest(string nextLink, string skipToken, string filter, string orderby, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_endpoint, false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier201;
        private static ResponseClassifier ResponseClassifier201 => _responseClassifier201 ??= new StatusCodeClassifier(stackalloc ushort[] { 201 });
        private static ResponseClassifier _responseClassifier202;
        private static ResponseClassifier ResponseClassifier202 => _responseClassifier202 ??= new StatusCodeClassifier(stackalloc ushort[] { 202 });
    }
}
