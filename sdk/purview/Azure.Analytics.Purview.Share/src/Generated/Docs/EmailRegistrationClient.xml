<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="ActivateAsync(RequestContent,String,RequestContext)">
<example>
This sample shows how to call ActivateAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new EmailRegistrationClient("<https://my-service.azure.com>", credential);

var data = new {};

Response response = await client.ActivateAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call ActivateAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new EmailRegistrationClient("<https://my-service.azure.com>", credential);

var data = new {
    properties = new {
        activationCode = "<activationCode>",
    },
};

Response response = await client.ActivateAsync(RequestContent.Create(data), "<repeatabilityRequestId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("properties").GetProperty("activationCode").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("activationExpiration").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("email").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("registrationStatus").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("tenantId").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
]]></code>
</example>
<remarks>
Activates the email registration for current tenant

Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>TenantEmailRegistration</c>:
<code>{
  properties: {
    activationCode: string, # Required. Activation code for the registration.
    activationExpiration: string (ISO 8601 Format), # Optional. Date of the activation expiration.
    email: string, # Optional. The email to register.
    registrationStatus: &quot;ActivationPending&quot; | &quot;Activated&quot; | &quot;ActivationAttemptsExhausted&quot;, # Optional. Defines the supported types for registration.
    tenantId: string, # Optional. The tenant id to register.
  }, # Optional. Tenant email registration property bag.
  id: string, # Optional. The resource id of the resource.
  name: string, # Optional. Name of the resource.
  type: string, # Optional. Type of the resource.
}
</code>

Response Body:

Schema for <c>TenantEmailRegistration</c>:
<code>{
  properties: {
    activationCode: string, # Required. Activation code for the registration.
    activationExpiration: string (ISO 8601 Format), # Optional. Date of the activation expiration.
    email: string, # Optional. The email to register.
    registrationStatus: &quot;ActivationPending&quot; | &quot;Activated&quot; | &quot;ActivationAttemptsExhausted&quot;, # Optional. Defines the supported types for registration.
    tenantId: string, # Optional. The tenant id to register.
  }, # Optional. Tenant email registration property bag.
  id: string, # Optional. The resource id of the resource.
  name: string, # Optional. Name of the resource.
  type: string, # Optional. Type of the resource.
}
</code>

</remarks>
    </member>
    <member name="Activate(RequestContent,String,RequestContext)">
<example>
This sample shows how to call Activate with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new EmailRegistrationClient("<https://my-service.azure.com>", credential);

var data = new {};

Response response = client.Activate(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call Activate with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new EmailRegistrationClient("<https://my-service.azure.com>", credential);

var data = new {
    properties = new {
        activationCode = "<activationCode>",
    },
};

Response response = client.Activate(RequestContent.Create(data), "<repeatabilityRequestId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("properties").GetProperty("activationCode").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("activationExpiration").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("email").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("registrationStatus").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("tenantId").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
]]></code>
</example>
<remarks>
Activates the email registration for current tenant

Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>TenantEmailRegistration</c>:
<code>{
  properties: {
    activationCode: string, # Required. Activation code for the registration.
    activationExpiration: string (ISO 8601 Format), # Optional. Date of the activation expiration.
    email: string, # Optional. The email to register.
    registrationStatus: &quot;ActivationPending&quot; | &quot;Activated&quot; | &quot;ActivationAttemptsExhausted&quot;, # Optional. Defines the supported types for registration.
    tenantId: string, # Optional. The tenant id to register.
  }, # Optional. Tenant email registration property bag.
  id: string, # Optional. The resource id of the resource.
  name: string, # Optional. Name of the resource.
  type: string, # Optional. Type of the resource.
}
</code>

Response Body:

Schema for <c>TenantEmailRegistration</c>:
<code>{
  properties: {
    activationCode: string, # Required. Activation code for the registration.
    activationExpiration: string (ISO 8601 Format), # Optional. Date of the activation expiration.
    email: string, # Optional. The email to register.
    registrationStatus: &quot;ActivationPending&quot; | &quot;Activated&quot; | &quot;ActivationAttemptsExhausted&quot;, # Optional. Defines the supported types for registration.
    tenantId: string, # Optional. The tenant id to register.
  }, # Optional. Tenant email registration property bag.
  id: string, # Optional. The resource id of the resource.
  name: string, # Optional. Name of the resource.
  type: string, # Optional. Type of the resource.
}
</code>

</remarks>
    </member>
    <member name="RegisterAsync(String,RequestContext)">
<example>
This sample shows how to call RegisterAsync and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new EmailRegistrationClient("<https://my-service.azure.com>", credential);

Response response = await client.RegisterAsync();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call RegisterAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new EmailRegistrationClient("<https://my-service.azure.com>", credential);

Response response = await client.RegisterAsync("<repeatabilityRequestId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("properties").GetProperty("activationCode").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("activationExpiration").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("email").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("registrationStatus").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("tenantId").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
]]></code>
</example>
<remarks>
Register an email for the current tenant

Below is the JSON schema for the response payload.

Response Body:

Schema for <c>TenantEmailRegistration</c>:
<code>{
  properties: {
    activationCode: string, # Required. Activation code for the registration.
    activationExpiration: string (ISO 8601 Format), # Optional. Date of the activation expiration.
    email: string, # Optional. The email to register.
    registrationStatus: &quot;ActivationPending&quot; | &quot;Activated&quot; | &quot;ActivationAttemptsExhausted&quot;, # Optional. Defines the supported types for registration.
    tenantId: string, # Optional. The tenant id to register.
  }, # Optional. Tenant email registration property bag.
  id: string, # Optional. The resource id of the resource.
  name: string, # Optional. Name of the resource.
  type: string, # Optional. Type of the resource.
}
</code>

</remarks>
    </member>
    <member name="Register(String,RequestContext)">
<example>
This sample shows how to call Register and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new EmailRegistrationClient("<https://my-service.azure.com>", credential);

Response response = client.Register();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call Register with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new EmailRegistrationClient("<https://my-service.azure.com>", credential);

Response response = client.Register("<repeatabilityRequestId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("properties").GetProperty("activationCode").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("activationExpiration").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("email").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("registrationStatus").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("tenantId").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
]]></code>
</example>
<remarks>
Register an email for the current tenant

Below is the JSON schema for the response payload.

Response Body:

Schema for <c>TenantEmailRegistration</c>:
<code>{
  properties: {
    activationCode: string, # Required. Activation code for the registration.
    activationExpiration: string (ISO 8601 Format), # Optional. Date of the activation expiration.
    email: string, # Optional. The email to register.
    registrationStatus: &quot;ActivationPending&quot; | &quot;Activated&quot; | &quot;ActivationAttemptsExhausted&quot;, # Optional. Defines the supported types for registration.
    tenantId: string, # Optional. The tenant id to register.
  }, # Optional. Tenant email registration property bag.
  id: string, # Optional. The resource id of the resource.
  name: string, # Optional. Name of the resource.
  type: string, # Optional. Type of the resource.
}
</code>

</remarks>
    </member>
  </members>
</doc>