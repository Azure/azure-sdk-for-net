<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="GetReceivedShareAsync(String,RequestContext)">
<example>
This sample shows how to call GetReceivedShareAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new ReceivedSharesClient("<https://my-service.azure.com>", credential);

Response response = await client.GetReceivedShareAsync("<receivedShareName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("shareKind").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
]]></code>
</example>
<remarks>
Get a received share

Below is the JSON schema for the response payload.

Response Body:

<details><summary>InPlaceReceivedShare</summary>Schema for <c>InPlaceReceivedShare</c>:
<code>{
  properties: {
    collection: {
      referenceName: string, # Required. Gets or sets the reference name.
      type: string, # Required. Gets or sets the reference type property.
    }, # Required. Reference to a Collection.
    createdAt: string (ISO 8601 Format), # Optional. Time at which the received share was created.
    expirationDate: string (ISO 8601 Format), # Optional. The expiration date of the received share.
    invitationId: string, # Required. The invitation id.
    provisioningState: &quot;Unknown&quot; | &quot;Succeeded&quot; | &quot;Creating&quot; | &quot;Deleting&quot; | &quot;Moving&quot; | &quot;Failed&quot; | &quot;SoftDeleting&quot; | &quot;SoftDeleted&quot; | &quot;SourceMoved&quot; | &quot;SourceDeleted&quot; | &quot;TargetMoved&quot; | &quot;TargetDeleted&quot;, # Optional. Provisioning status of the resource
    receivedShareStatus: &quot;Active&quot; | &quot;Reinstating&quot; | &quot;Revoked&quot; | &quot;Revoking&quot; | &quot;RevokeFailed&quot; | &quot;ReinstateFailed&quot; | &quot;SourceDeleted&quot;, # Optional. received share status
    receiverEmail: string, # Optional. Email of the user/receiver who received the sent share invitation
    receiverName: string, # Optional. Name of the user/receiver who received the sent share invitation
    receiverTenantName: string, # Optional. Tenant name of the user/receiver who received the sent share invitation
    senderEmail: string, # Optional. Email of the sender who created the sent share invitation
    senderName: string, # Optional. Name of the sender who created the sent share invitation
    senderTenantName: string, # Optional. Tenant name of the sender who created the sent share invitation
    sentShareDescription: string, # Optional. Share description.
    sentShareLocation: string, # Required. Sent share location.
    sharedAt: string (ISO 8601 Format), # Optional. Time at which the sent share was shared.
    shareName: string, # Optional. Name of the share
  }, # Required. Properties of in place received share.
  shareKind: InPlace, # Required. Defines the supported types for share.
  id: string, # Optional. The resource id of the resource.
  name: string, # Optional. Name of the resource.
  type: string, # Optional. Type of the resource.
}
</code>
</details>

</remarks>
    </member>
    <member name="GetReceivedShare(String,RequestContext)">
<example>
This sample shows how to call GetReceivedShare with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new ReceivedSharesClient("<https://my-service.azure.com>", credential);

Response response = client.GetReceivedShare("<receivedShareName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("shareKind").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
]]></code>
</example>
<remarks>
Get a received share

Below is the JSON schema for the response payload.

Response Body:

<details><summary>InPlaceReceivedShare</summary>Schema for <c>InPlaceReceivedShare</c>:
<code>{
  properties: {
    collection: {
      referenceName: string, # Required. Gets or sets the reference name.
      type: string, # Required. Gets or sets the reference type property.
    }, # Required. Reference to a Collection.
    createdAt: string (ISO 8601 Format), # Optional. Time at which the received share was created.
    expirationDate: string (ISO 8601 Format), # Optional. The expiration date of the received share.
    invitationId: string, # Required. The invitation id.
    provisioningState: &quot;Unknown&quot; | &quot;Succeeded&quot; | &quot;Creating&quot; | &quot;Deleting&quot; | &quot;Moving&quot; | &quot;Failed&quot; | &quot;SoftDeleting&quot; | &quot;SoftDeleted&quot; | &quot;SourceMoved&quot; | &quot;SourceDeleted&quot; | &quot;TargetMoved&quot; | &quot;TargetDeleted&quot;, # Optional. Provisioning status of the resource
    receivedShareStatus: &quot;Active&quot; | &quot;Reinstating&quot; | &quot;Revoked&quot; | &quot;Revoking&quot; | &quot;RevokeFailed&quot; | &quot;ReinstateFailed&quot; | &quot;SourceDeleted&quot;, # Optional. received share status
    receiverEmail: string, # Optional. Email of the user/receiver who received the sent share invitation
    receiverName: string, # Optional. Name of the user/receiver who received the sent share invitation
    receiverTenantName: string, # Optional. Tenant name of the user/receiver who received the sent share invitation
    senderEmail: string, # Optional. Email of the sender who created the sent share invitation
    senderName: string, # Optional. Name of the sender who created the sent share invitation
    senderTenantName: string, # Optional. Tenant name of the sender who created the sent share invitation
    sentShareDescription: string, # Optional. Share description.
    sentShareLocation: string, # Required. Sent share location.
    sharedAt: string (ISO 8601 Format), # Optional. Time at which the sent share was shared.
    shareName: string, # Optional. Name of the share
  }, # Required. Properties of in place received share.
  shareKind: InPlace, # Required. Defines the supported types for share.
  id: string, # Optional. The resource id of the resource.
  name: string, # Optional. Name of the resource.
  type: string, # Optional. Type of the resource.
}
</code>
</details>

</remarks>
    </member>
    <member name="CreateAsync(String,RequestContent,RequestContext)">
<example>
This sample shows how to call CreateAsync with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new ReceivedSharesClient("<https://my-service.azure.com>", credential);

var data = new {
    properties = new {
        collection = new {
            referenceName = "<referenceName>",
            type = "<type>",
        },
        invitationId = "<invitationId>",
        sentShareLocation = "<sentShareLocation>",
    },
    shareKind = "InPlace",
};

Response response = await client.CreateAsync("<receivedShareName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("shareKind").ToString());
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new ReceivedSharesClient("<https://my-service.azure.com>", credential);

var data = new {
    properties = new {
        collection = new {
            referenceName = "<referenceName>",
            type = "<type>",
        },
        expirationDate = "2022-05-10T18:57:31.2311892Z",
        invitationId = "<invitationId>",
        sentShareDescription = "<sentShareDescription>",
        sentShareLocation = "<sentShareLocation>",
    },
    shareKind = "InPlace",
};

Response response = await client.CreateAsync("<receivedShareName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("shareKind").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
]]></code>
</example>
<remarks>
Create a received share

Below is the JSON schema for the request and response payloads.

Request Body:

<details><summary>InPlaceReceivedShare</summary>Schema for <c>InPlaceReceivedShare</c>:
<code>{
  properties: {
    collection: {
      referenceName: string, # Required. Gets or sets the reference name.
      type: string, # Required. Gets or sets the reference type property.
    }, # Required. Reference to a Collection.
    createdAt: string (ISO 8601 Format), # Optional. Time at which the received share was created.
    expirationDate: string (ISO 8601 Format), # Optional. The expiration date of the received share.
    invitationId: string, # Required. The invitation id.
    provisioningState: &quot;Unknown&quot; | &quot;Succeeded&quot; | &quot;Creating&quot; | &quot;Deleting&quot; | &quot;Moving&quot; | &quot;Failed&quot; | &quot;SoftDeleting&quot; | &quot;SoftDeleted&quot; | &quot;SourceMoved&quot; | &quot;SourceDeleted&quot; | &quot;TargetMoved&quot; | &quot;TargetDeleted&quot;, # Optional. Provisioning status of the resource
    receivedShareStatus: &quot;Active&quot; | &quot;Reinstating&quot; | &quot;Revoked&quot; | &quot;Revoking&quot; | &quot;RevokeFailed&quot; | &quot;ReinstateFailed&quot; | &quot;SourceDeleted&quot;, # Optional. received share status
    receiverEmail: string, # Optional. Email of the user/receiver who received the sent share invitation
    receiverName: string, # Optional. Name of the user/receiver who received the sent share invitation
    receiverTenantName: string, # Optional. Tenant name of the user/receiver who received the sent share invitation
    senderEmail: string, # Optional. Email of the sender who created the sent share invitation
    senderName: string, # Optional. Name of the sender who created the sent share invitation
    senderTenantName: string, # Optional. Tenant name of the sender who created the sent share invitation
    sentShareDescription: string, # Optional. Share description.
    sentShareLocation: string, # Required. Sent share location.
    sharedAt: string (ISO 8601 Format), # Optional. Time at which the sent share was shared.
    shareName: string, # Optional. Name of the share
  }, # Required. Properties of in place received share.
  shareKind: InPlace, # Required. Defines the supported types for share.
  id: string, # Optional. The resource id of the resource.
  name: string, # Optional. Name of the resource.
  type: string, # Optional. Type of the resource.
}
</code>
</details>

Response Body:

<details><summary>InPlaceReceivedShare</summary>Schema for <c>InPlaceReceivedShare</c>:
<code>{
  properties: {
    collection: {
      referenceName: string, # Required. Gets or sets the reference name.
      type: string, # Required. Gets or sets the reference type property.
    }, # Required. Reference to a Collection.
    createdAt: string (ISO 8601 Format), # Optional. Time at which the received share was created.
    expirationDate: string (ISO 8601 Format), # Optional. The expiration date of the received share.
    invitationId: string, # Required. The invitation id.
    provisioningState: &quot;Unknown&quot; | &quot;Succeeded&quot; | &quot;Creating&quot; | &quot;Deleting&quot; | &quot;Moving&quot; | &quot;Failed&quot; | &quot;SoftDeleting&quot; | &quot;SoftDeleted&quot; | &quot;SourceMoved&quot; | &quot;SourceDeleted&quot; | &quot;TargetMoved&quot; | &quot;TargetDeleted&quot;, # Optional. Provisioning status of the resource
    receivedShareStatus: &quot;Active&quot; | &quot;Reinstating&quot; | &quot;Revoked&quot; | &quot;Revoking&quot; | &quot;RevokeFailed&quot; | &quot;ReinstateFailed&quot; | &quot;SourceDeleted&quot;, # Optional. received share status
    receiverEmail: string, # Optional. Email of the user/receiver who received the sent share invitation
    receiverName: string, # Optional. Name of the user/receiver who received the sent share invitation
    receiverTenantName: string, # Optional. Tenant name of the user/receiver who received the sent share invitation
    senderEmail: string, # Optional. Email of the sender who created the sent share invitation
    senderName: string, # Optional. Name of the sender who created the sent share invitation
    senderTenantName: string, # Optional. Tenant name of the sender who created the sent share invitation
    sentShareDescription: string, # Optional. Share description.
    sentShareLocation: string, # Required. Sent share location.
    sharedAt: string (ISO 8601 Format), # Optional. Time at which the sent share was shared.
    shareName: string, # Optional. Name of the share
  }, # Required. Properties of in place received share.
  shareKind: InPlace, # Required. Defines the supported types for share.
  id: string, # Optional. The resource id of the resource.
  name: string, # Optional. Name of the resource.
  type: string, # Optional. Type of the resource.
}
</code>
</details>

</remarks>
    </member>
    <member name="Create(String,RequestContent,RequestContext)">
<example>
This sample shows how to call Create with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new ReceivedSharesClient("<https://my-service.azure.com>", credential);

var data = new {
    properties = new {
        collection = new {
            referenceName = "<referenceName>",
            type = "<type>",
        },
        invitationId = "<invitationId>",
        sentShareLocation = "<sentShareLocation>",
    },
    shareKind = "InPlace",
};

Response response = client.Create("<receivedShareName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("shareKind").ToString());
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call Create with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new ReceivedSharesClient("<https://my-service.azure.com>", credential);

var data = new {
    properties = new {
        collection = new {
            referenceName = "<referenceName>",
            type = "<type>",
        },
        expirationDate = "2022-05-10T18:57:31.2311892Z",
        invitationId = "<invitationId>",
        sentShareDescription = "<sentShareDescription>",
        sentShareLocation = "<sentShareLocation>",
    },
    shareKind = "InPlace",
};

Response response = client.Create("<receivedShareName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("shareKind").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
]]></code>
</example>
<remarks>
Create a received share

Below is the JSON schema for the request and response payloads.

Request Body:

<details><summary>InPlaceReceivedShare</summary>Schema for <c>InPlaceReceivedShare</c>:
<code>{
  properties: {
    collection: {
      referenceName: string, # Required. Gets or sets the reference name.
      type: string, # Required. Gets or sets the reference type property.
    }, # Required. Reference to a Collection.
    createdAt: string (ISO 8601 Format), # Optional. Time at which the received share was created.
    expirationDate: string (ISO 8601 Format), # Optional. The expiration date of the received share.
    invitationId: string, # Required. The invitation id.
    provisioningState: &quot;Unknown&quot; | &quot;Succeeded&quot; | &quot;Creating&quot; | &quot;Deleting&quot; | &quot;Moving&quot; | &quot;Failed&quot; | &quot;SoftDeleting&quot; | &quot;SoftDeleted&quot; | &quot;SourceMoved&quot; | &quot;SourceDeleted&quot; | &quot;TargetMoved&quot; | &quot;TargetDeleted&quot;, # Optional. Provisioning status of the resource
    receivedShareStatus: &quot;Active&quot; | &quot;Reinstating&quot; | &quot;Revoked&quot; | &quot;Revoking&quot; | &quot;RevokeFailed&quot; | &quot;ReinstateFailed&quot; | &quot;SourceDeleted&quot;, # Optional. received share status
    receiverEmail: string, # Optional. Email of the user/receiver who received the sent share invitation
    receiverName: string, # Optional. Name of the user/receiver who received the sent share invitation
    receiverTenantName: string, # Optional. Tenant name of the user/receiver who received the sent share invitation
    senderEmail: string, # Optional. Email of the sender who created the sent share invitation
    senderName: string, # Optional. Name of the sender who created the sent share invitation
    senderTenantName: string, # Optional. Tenant name of the sender who created the sent share invitation
    sentShareDescription: string, # Optional. Share description.
    sentShareLocation: string, # Required. Sent share location.
    sharedAt: string (ISO 8601 Format), # Optional. Time at which the sent share was shared.
    shareName: string, # Optional. Name of the share
  }, # Required. Properties of in place received share.
  shareKind: InPlace, # Required. Defines the supported types for share.
  id: string, # Optional. The resource id of the resource.
  name: string, # Optional. Name of the resource.
  type: string, # Optional. Type of the resource.
}
</code>
</details>

Response Body:

<details><summary>InPlaceReceivedShare</summary>Schema for <c>InPlaceReceivedShare</c>:
<code>{
  properties: {
    collection: {
      referenceName: string, # Required. Gets or sets the reference name.
      type: string, # Required. Gets or sets the reference type property.
    }, # Required. Reference to a Collection.
    createdAt: string (ISO 8601 Format), # Optional. Time at which the received share was created.
    expirationDate: string (ISO 8601 Format), # Optional. The expiration date of the received share.
    invitationId: string, # Required. The invitation id.
    provisioningState: &quot;Unknown&quot; | &quot;Succeeded&quot; | &quot;Creating&quot; | &quot;Deleting&quot; | &quot;Moving&quot; | &quot;Failed&quot; | &quot;SoftDeleting&quot; | &quot;SoftDeleted&quot; | &quot;SourceMoved&quot; | &quot;SourceDeleted&quot; | &quot;TargetMoved&quot; | &quot;TargetDeleted&quot;, # Optional. Provisioning status of the resource
    receivedShareStatus: &quot;Active&quot; | &quot;Reinstating&quot; | &quot;Revoked&quot; | &quot;Revoking&quot; | &quot;RevokeFailed&quot; | &quot;ReinstateFailed&quot; | &quot;SourceDeleted&quot;, # Optional. received share status
    receiverEmail: string, # Optional. Email of the user/receiver who received the sent share invitation
    receiverName: string, # Optional. Name of the user/receiver who received the sent share invitation
    receiverTenantName: string, # Optional. Tenant name of the user/receiver who received the sent share invitation
    senderEmail: string, # Optional. Email of the sender who created the sent share invitation
    senderName: string, # Optional. Name of the sender who created the sent share invitation
    senderTenantName: string, # Optional. Tenant name of the sender who created the sent share invitation
    sentShareDescription: string, # Optional. Share description.
    sentShareLocation: string, # Required. Sent share location.
    sharedAt: string (ISO 8601 Format), # Optional. Time at which the sent share was shared.
    shareName: string, # Optional. Name of the share
  }, # Required. Properties of in place received share.
  shareKind: InPlace, # Required. Defines the supported types for share.
  id: string, # Optional. The resource id of the resource.
  name: string, # Optional. Name of the resource.
  type: string, # Optional. Type of the resource.
}
</code>
</details>

</remarks>
    </member>
    <member name="GetReceivedSharesAsync(String,String,String,RequestContext)">
<example>
This sample shows how to call GetReceivedSharesAsync and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new ReceivedSharesClient("<https://my-service.azure.com>", credential);

await foreach (var data in client.GetReceivedSharesAsync())
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("shareKind").ToString());
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetReceivedSharesAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new ReceivedSharesClient("<https://my-service.azure.com>", credential);

await foreach (var data in client.GetReceivedSharesAsync("<skipToken>", "<filter>", "<orderby>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("shareKind").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("type").ToString());
}
]]></code>
</example>
<remarks>
List received shares

Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>ReceivedShareListValue</c>:
<code>{
  shareKind: &quot;InPlace&quot;, # Required. Defines the supported types for share.
  id: string, # Optional. The resource id of the resource.
  name: string, # Optional. Name of the resource.
  type: string, # Optional. Type of the resource.
}
</code>

</remarks>
    </member>
    <member name="GetReceivedShares(String,String,String,RequestContext)">
<example>
This sample shows how to call GetReceivedShares and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new ReceivedSharesClient("<https://my-service.azure.com>", credential);

foreach (var data in client.GetReceivedShares())
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("shareKind").ToString());
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetReceivedShares with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new ReceivedSharesClient("<https://my-service.azure.com>", credential);

foreach (var data in client.GetReceivedShares("<skipToken>", "<filter>", "<orderby>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("shareKind").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("type").ToString());
}
]]></code>
</example>
<remarks>
List received shares

Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>ReceivedShareListValue</c>:
<code>{
  shareKind: &quot;InPlace&quot;, # Required. Defines the supported types for share.
  id: string, # Optional. The resource id of the resource.
  name: string, # Optional. Name of the resource.
  type: string, # Optional. Type of the resource.
}
</code>

</remarks>
    </member>
    <member name="DeleteAsync(WaitUntil,String,RequestContext)">
<example>
This sample shows how to call DeleteAsync with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new ReceivedSharesClient("<https://my-service.azure.com>", credential);

var operation = await client.DeleteAsync(WaitUntil.Completed, "<receivedShareName>");

var response = await operation.WaitForCompletionResponseAsync();
Console.WriteLine(response.Status)
]]></code>
</example>
<remarks>
Delete a received share
</remarks>
    </member>
    <member name="Delete(WaitUntil,String,RequestContext)">
<example>
This sample shows how to call Delete with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new ReceivedSharesClient("<https://my-service.azure.com>", credential);

var operation = client.Delete(WaitUntil.Completed, "<receivedShareName>");

var response = operation.WaitForCompletionResponse();
Console.WriteLine(response.Status)
]]></code>
</example>
<remarks>
Delete a received share
</remarks>
    </member>
  </members>
</doc>