<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="GetAssetAsync(String,String,RequestContext)">
<example>
This sample shows how to call GetAssetAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new AssetsClient("<https://my-service.azure.com>", credential);

Response response = await client.GetAssetAsync("<sentShareName>", "<assetName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("kind").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
]]></code>
</example>
<remarks>
Get an asset on a sent share

Below is the JSON schema for the response payload.

Response Body:

This method takes one of the JSON objects below as a payload. Please select a JSON object to view the schema for this.
<details><summary>AdlsGen2AccountAsset</summary>Schema for <c>AdlsGen2AccountAsset</c>:
<code>{
  properties: {
    location: string, # Optional. Location of the adls gen2 storage account.
    paths: [
      {
        containerName: string, # Required. Gets or sets the container name.
        receiverPath: string, # Optional. Gets or sets the path on the receiver side where the asset is to be mapped.
        senderPath: string, # Optional. Gets or sets the path to file/folder within the container to be shared.
      }
    ], # Required. A list of adls gen2 storage account paths to be shared.
    provisioningState: &quot;Unknown&quot; | &quot;Succeeded&quot; | &quot;Creating&quot; | &quot;Deleting&quot; | &quot;Moving&quot; | &quot;Failed&quot; | &quot;SoftDeleting&quot; | &quot;SoftDeleted&quot; | &quot;SourceMoved&quot; | &quot;SourceDeleted&quot; | &quot;TargetMoved&quot; | &quot;TargetDeleted&quot;, # Optional. Provisioning status of the resource
    receiverAssetName: string, # Required. Name of the asset for the receiver.
    storageAccountResourceId: string, # Required. Resource id of the adls gen2 storage account.
  }, # Required. Adls gen 2 account asset properties
  kind: AdlsGen2Account, # Required. The types of asset.
  id: string, # Optional. The resource id of the resource.
  name: string, # Optional. Name of the resource.
  type: string, # Optional. Type of the resource.
}
</code>
</details>
<details><summary>~+ 1 more JSON objects</summary><details><summary>BlobAccountAsset</summary>Schema for <c>BlobAccountAsset</c>:
<code>{
  properties: {
    location: string, # Optional. Location of the blob storage account.
    paths: [
      {
        containerName: string, # Required. Gets or sets the container name.
        receiverPath: string, # Optional. Gets or sets the path on the receiver side where the asset is to be mapped.
        senderPath: string, # Optional. Gets or sets the path to file/folder within the container to be shared.
      }
    ], # Required. A list of blob storage account paths to be shared.
    provisioningState: &quot;Unknown&quot; | &quot;Succeeded&quot; | &quot;Creating&quot; | &quot;Deleting&quot; | &quot;Moving&quot; | &quot;Failed&quot; | &quot;SoftDeleting&quot; | &quot;SoftDeleted&quot; | &quot;SourceMoved&quot; | &quot;SourceDeleted&quot; | &quot;TargetMoved&quot; | &quot;TargetDeleted&quot;, # Optional. Provisioning status of the resource
    receiverAssetName: string, # Required. Name of the asset for the receiver.
    storageAccountResourceId: string, # Required. Resource id of the blob storage account.
  }, # Required. Blob storage account asset properties
  kind: BlobAccount, # Required. The types of asset.
  id: string, # Optional. The resource id of the resource.
  name: string, # Optional. Name of the resource.
  type: string, # Optional. Type of the resource.
}
</code>
</details>
</details>

</remarks>
    </member>
    <member name="GetAsset(String,String,RequestContext)">
<example>
This sample shows how to call GetAsset with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new AssetsClient("<https://my-service.azure.com>", credential);

Response response = client.GetAsset("<sentShareName>", "<assetName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("kind").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
]]></code>
</example>
<remarks>
Get an asset on a sent share

Below is the JSON schema for the response payload.

Response Body:

This method takes one of the JSON objects below as a payload. Please select a JSON object to view the schema for this.
<details><summary>AdlsGen2AccountAsset</summary>Schema for <c>AdlsGen2AccountAsset</c>:
<code>{
  properties: {
    location: string, # Optional. Location of the adls gen2 storage account.
    paths: [
      {
        containerName: string, # Required. Gets or sets the container name.
        receiverPath: string, # Optional. Gets or sets the path on the receiver side where the asset is to be mapped.
        senderPath: string, # Optional. Gets or sets the path to file/folder within the container to be shared.
      }
    ], # Required. A list of adls gen2 storage account paths to be shared.
    provisioningState: &quot;Unknown&quot; | &quot;Succeeded&quot; | &quot;Creating&quot; | &quot;Deleting&quot; | &quot;Moving&quot; | &quot;Failed&quot; | &quot;SoftDeleting&quot; | &quot;SoftDeleted&quot; | &quot;SourceMoved&quot; | &quot;SourceDeleted&quot; | &quot;TargetMoved&quot; | &quot;TargetDeleted&quot;, # Optional. Provisioning status of the resource
    receiverAssetName: string, # Required. Name of the asset for the receiver.
    storageAccountResourceId: string, # Required. Resource id of the adls gen2 storage account.
  }, # Required. Adls gen 2 account asset properties
  kind: AdlsGen2Account, # Required. The types of asset.
  id: string, # Optional. The resource id of the resource.
  name: string, # Optional. Name of the resource.
  type: string, # Optional. Type of the resource.
}
</code>
</details>
<details><summary>~+ 1 more JSON objects</summary><details><summary>BlobAccountAsset</summary>Schema for <c>BlobAccountAsset</c>:
<code>{
  properties: {
    location: string, # Optional. Location of the blob storage account.
    paths: [
      {
        containerName: string, # Required. Gets or sets the container name.
        receiverPath: string, # Optional. Gets or sets the path on the receiver side where the asset is to be mapped.
        senderPath: string, # Optional. Gets or sets the path to file/folder within the container to be shared.
      }
    ], # Required. A list of blob storage account paths to be shared.
    provisioningState: &quot;Unknown&quot; | &quot;Succeeded&quot; | &quot;Creating&quot; | &quot;Deleting&quot; | &quot;Moving&quot; | &quot;Failed&quot; | &quot;SoftDeleting&quot; | &quot;SoftDeleted&quot; | &quot;SourceMoved&quot; | &quot;SourceDeleted&quot; | &quot;TargetMoved&quot; | &quot;TargetDeleted&quot;, # Optional. Provisioning status of the resource
    receiverAssetName: string, # Required. Name of the asset for the receiver.
    storageAccountResourceId: string, # Required. Resource id of the blob storage account.
  }, # Required. Blob storage account asset properties
  kind: BlobAccount, # Required. The types of asset.
  id: string, # Optional. The resource id of the resource.
  name: string, # Optional. Name of the resource.
  type: string, # Optional. Type of the resource.
}
</code>
</details>
</details>

</remarks>
    </member>
    <member name="GetAssetsAsync(String,String,String,String,RequestContext)">
<example>
This sample shows how to call GetAssetsAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new AssetsClient("<https://my-service.azure.com>", credential);

await foreach (var data in client.GetAssetsAsync("<sentShareName>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("kind").ToString());
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetAssetsAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new AssetsClient("<https://my-service.azure.com>", credential);

await foreach (var data in client.GetAssetsAsync("<sentShareName>", "<skipToken>", "<filter>", "<orderby>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("kind").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("type").ToString());
}
]]></code>
</example>
<remarks>
List assets on a sent share

Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>AssetListValue</c>:
<code>{
  kind: &quot;AdlsGen2Account&quot; | &quot;BlobAccount&quot;, # Required. The types of asset.
  id: string, # Optional. The resource id of the resource.
  name: string, # Optional. Name of the resource.
  type: string, # Optional. Type of the resource.
}
</code>

</remarks>
    </member>
    <member name="GetAssets(String,String,String,String,RequestContext)">
<example>
This sample shows how to call GetAssets with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new AssetsClient("<https://my-service.azure.com>", credential);

foreach (var data in client.GetAssets("<sentShareName>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("kind").ToString());
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetAssets with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new AssetsClient("<https://my-service.azure.com>", credential);

foreach (var data in client.GetAssets("<sentShareName>", "<skipToken>", "<filter>", "<orderby>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("kind").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("type").ToString());
}
]]></code>
</example>
<remarks>
List assets on a sent share

Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>AssetListValue</c>:
<code>{
  kind: &quot;AdlsGen2Account&quot; | &quot;BlobAccount&quot;, # Required. The types of asset.
  id: string, # Optional. The resource id of the resource.
  name: string, # Optional. Name of the resource.
  type: string, # Optional. Type of the resource.
}
</code>

</remarks>
    </member>
    <member name="CreateAsync(WaitUntil,String,String,RequestContent,RequestContext)">
<example>
This sample shows how to call CreateAsync with required parameters and request content and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new AssetsClient("<https://my-service.azure.com>", credential);

var data = new {
    properties = new {
        paths = new[] {
            new {
                containerName = "<containerName>",
                receiverPath = "<receiverPath>",
                senderPath = "<senderPath>",
            }
        },
        receiverAssetName = "<receiverAssetName>",
        storageAccountResourceId = "<storageAccountResourceId>",
    },
    kind = "AdlsGen2Account",
};

var operation = await client.CreateAsync(WaitUntil.Completed, "<sentShareName>", "<assetName>", RequestContent.Create(data));

BinaryData data = await operation.WaitForCompletionAsync();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("kind").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
]]></code>
</example>
<remarks>
Create an asset on a sent share

Below is the JSON schema for the request and response payloads.

Request Body:

This method takes one of the JSON objects below as a payload. Please select a JSON object to view the schema for this.
<details><summary>AdlsGen2AccountAsset</summary>Schema for <c>AdlsGen2AccountAsset</c>:
<code>{
  properties: {
    location: string, # Optional. Location of the adls gen2 storage account.
    paths: [
      {
        containerName: string, # Required. Gets or sets the container name.
        receiverPath: string, # Optional. Gets or sets the path on the receiver side where the asset is to be mapped.
        senderPath: string, # Optional. Gets or sets the path to file/folder within the container to be shared.
      }
    ], # Required. A list of adls gen2 storage account paths to be shared.
    provisioningState: &quot;Unknown&quot; | &quot;Succeeded&quot; | &quot;Creating&quot; | &quot;Deleting&quot; | &quot;Moving&quot; | &quot;Failed&quot; | &quot;SoftDeleting&quot; | &quot;SoftDeleted&quot; | &quot;SourceMoved&quot; | &quot;SourceDeleted&quot; | &quot;TargetMoved&quot; | &quot;TargetDeleted&quot;, # Optional. Provisioning status of the resource
    receiverAssetName: string, # Required. Name of the asset for the receiver.
    storageAccountResourceId: string, # Required. Resource id of the adls gen2 storage account.
  }, # Required. Adls gen 2 account asset properties
  kind: AdlsGen2Account, # Required. The types of asset.
  id: string, # Optional. The resource id of the resource.
  name: string, # Optional. Name of the resource.
  type: string, # Optional. Type of the resource.
}
</code>
</details>
<details><summary>~+ 1 more JSON objects</summary><details><summary>BlobAccountAsset</summary>Schema for <c>BlobAccountAsset</c>:
<code>{
  properties: {
    location: string, # Optional. Location of the blob storage account.
    paths: [
      {
        containerName: string, # Required. Gets or sets the container name.
        receiverPath: string, # Optional. Gets or sets the path on the receiver side where the asset is to be mapped.
        senderPath: string, # Optional. Gets or sets the path to file/folder within the container to be shared.
      }
    ], # Required. A list of blob storage account paths to be shared.
    provisioningState: &quot;Unknown&quot; | &quot;Succeeded&quot; | &quot;Creating&quot; | &quot;Deleting&quot; | &quot;Moving&quot; | &quot;Failed&quot; | &quot;SoftDeleting&quot; | &quot;SoftDeleted&quot; | &quot;SourceMoved&quot; | &quot;SourceDeleted&quot; | &quot;TargetMoved&quot; | &quot;TargetDeleted&quot;, # Optional. Provisioning status of the resource
    receiverAssetName: string, # Required. Name of the asset for the receiver.
    storageAccountResourceId: string, # Required. Resource id of the blob storage account.
  }, # Required. Blob storage account asset properties
  kind: BlobAccount, # Required. The types of asset.
  id: string, # Optional. The resource id of the resource.
  name: string, # Optional. Name of the resource.
  type: string, # Optional. Type of the resource.
}
</code>
</details>
</details>

Response Body:

This method takes one of the JSON objects below as a payload. Please select a JSON object to view the schema for this.
<details><summary>AdlsGen2AccountAsset</summary>Schema for <c>AdlsGen2AccountAsset</c>:
<code>{
  properties: {
    location: string, # Optional. Location of the adls gen2 storage account.
    paths: [
      {
        containerName: string, # Required. Gets or sets the container name.
        receiverPath: string, # Optional. Gets or sets the path on the receiver side where the asset is to be mapped.
        senderPath: string, # Optional. Gets or sets the path to file/folder within the container to be shared.
      }
    ], # Required. A list of adls gen2 storage account paths to be shared.
    provisioningState: &quot;Unknown&quot; | &quot;Succeeded&quot; | &quot;Creating&quot; | &quot;Deleting&quot; | &quot;Moving&quot; | &quot;Failed&quot; | &quot;SoftDeleting&quot; | &quot;SoftDeleted&quot; | &quot;SourceMoved&quot; | &quot;SourceDeleted&quot; | &quot;TargetMoved&quot; | &quot;TargetDeleted&quot;, # Optional. Provisioning status of the resource
    receiverAssetName: string, # Required. Name of the asset for the receiver.
    storageAccountResourceId: string, # Required. Resource id of the adls gen2 storage account.
  }, # Required. Adls gen 2 account asset properties
  kind: AdlsGen2Account, # Required. The types of asset.
  id: string, # Optional. The resource id of the resource.
  name: string, # Optional. Name of the resource.
  type: string, # Optional. Type of the resource.
}
</code>
</details>
<details><summary>~+ 1 more JSON objects</summary><details><summary>BlobAccountAsset</summary>Schema for <c>BlobAccountAsset</c>:
<code>{
  properties: {
    location: string, # Optional. Location of the blob storage account.
    paths: [
      {
        containerName: string, # Required. Gets or sets the container name.
        receiverPath: string, # Optional. Gets or sets the path on the receiver side where the asset is to be mapped.
        senderPath: string, # Optional. Gets or sets the path to file/folder within the container to be shared.
      }
    ], # Required. A list of blob storage account paths to be shared.
    provisioningState: &quot;Unknown&quot; | &quot;Succeeded&quot; | &quot;Creating&quot; | &quot;Deleting&quot; | &quot;Moving&quot; | &quot;Failed&quot; | &quot;SoftDeleting&quot; | &quot;SoftDeleted&quot; | &quot;SourceMoved&quot; | &quot;SourceDeleted&quot; | &quot;TargetMoved&quot; | &quot;TargetDeleted&quot;, # Optional. Provisioning status of the resource
    receiverAssetName: string, # Required. Name of the asset for the receiver.
    storageAccountResourceId: string, # Required. Resource id of the blob storage account.
  }, # Required. Blob storage account asset properties
  kind: BlobAccount, # Required. The types of asset.
  id: string, # Optional. The resource id of the resource.
  name: string, # Optional. Name of the resource.
  type: string, # Optional. Type of the resource.
}
</code>
</details>
</details>

</remarks>
    </member>
    <member name="Create(WaitUntil,String,String,RequestContent,RequestContext)">
<example>
This sample shows how to call Create with required parameters and request content and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new AssetsClient("<https://my-service.azure.com>", credential);

var data = new {
    properties = new {
        paths = new[] {
            new {
                containerName = "<containerName>",
                receiverPath = "<receiverPath>",
                senderPath = "<senderPath>",
            }
        },
        receiverAssetName = "<receiverAssetName>",
        storageAccountResourceId = "<storageAccountResourceId>",
    },
    kind = "AdlsGen2Account",
};

var operation = client.Create(WaitUntil.Completed, "<sentShareName>", "<assetName>", RequestContent.Create(data));

BinaryData data = operation.WaitForCompletion();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("kind").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
]]></code>
</example>
<remarks>
Create an asset on a sent share

Below is the JSON schema for the request and response payloads.

Request Body:

This method takes one of the JSON objects below as a payload. Please select a JSON object to view the schema for this.
<details><summary>AdlsGen2AccountAsset</summary>Schema for <c>AdlsGen2AccountAsset</c>:
<code>{
  properties: {
    location: string, # Optional. Location of the adls gen2 storage account.
    paths: [
      {
        containerName: string, # Required. Gets or sets the container name.
        receiverPath: string, # Optional. Gets or sets the path on the receiver side where the asset is to be mapped.
        senderPath: string, # Optional. Gets or sets the path to file/folder within the container to be shared.
      }
    ], # Required. A list of adls gen2 storage account paths to be shared.
    provisioningState: &quot;Unknown&quot; | &quot;Succeeded&quot; | &quot;Creating&quot; | &quot;Deleting&quot; | &quot;Moving&quot; | &quot;Failed&quot; | &quot;SoftDeleting&quot; | &quot;SoftDeleted&quot; | &quot;SourceMoved&quot; | &quot;SourceDeleted&quot; | &quot;TargetMoved&quot; | &quot;TargetDeleted&quot;, # Optional. Provisioning status of the resource
    receiverAssetName: string, # Required. Name of the asset for the receiver.
    storageAccountResourceId: string, # Required. Resource id of the adls gen2 storage account.
  }, # Required. Adls gen 2 account asset properties
  kind: AdlsGen2Account, # Required. The types of asset.
  id: string, # Optional. The resource id of the resource.
  name: string, # Optional. Name of the resource.
  type: string, # Optional. Type of the resource.
}
</code>
</details>
<details><summary>~+ 1 more JSON objects</summary><details><summary>BlobAccountAsset</summary>Schema for <c>BlobAccountAsset</c>:
<code>{
  properties: {
    location: string, # Optional. Location of the blob storage account.
    paths: [
      {
        containerName: string, # Required. Gets or sets the container name.
        receiverPath: string, # Optional. Gets or sets the path on the receiver side where the asset is to be mapped.
        senderPath: string, # Optional. Gets or sets the path to file/folder within the container to be shared.
      }
    ], # Required. A list of blob storage account paths to be shared.
    provisioningState: &quot;Unknown&quot; | &quot;Succeeded&quot; | &quot;Creating&quot; | &quot;Deleting&quot; | &quot;Moving&quot; | &quot;Failed&quot; | &quot;SoftDeleting&quot; | &quot;SoftDeleted&quot; | &quot;SourceMoved&quot; | &quot;SourceDeleted&quot; | &quot;TargetMoved&quot; | &quot;TargetDeleted&quot;, # Optional. Provisioning status of the resource
    receiverAssetName: string, # Required. Name of the asset for the receiver.
    storageAccountResourceId: string, # Required. Resource id of the blob storage account.
  }, # Required. Blob storage account asset properties
  kind: BlobAccount, # Required. The types of asset.
  id: string, # Optional. The resource id of the resource.
  name: string, # Optional. Name of the resource.
  type: string, # Optional. Type of the resource.
}
</code>
</details>
</details>

Response Body:

This method takes one of the JSON objects below as a payload. Please select a JSON object to view the schema for this.
<details><summary>AdlsGen2AccountAsset</summary>Schema for <c>AdlsGen2AccountAsset</c>:
<code>{
  properties: {
    location: string, # Optional. Location of the adls gen2 storage account.
    paths: [
      {
        containerName: string, # Required. Gets or sets the container name.
        receiverPath: string, # Optional. Gets or sets the path on the receiver side where the asset is to be mapped.
        senderPath: string, # Optional. Gets or sets the path to file/folder within the container to be shared.
      }
    ], # Required. A list of adls gen2 storage account paths to be shared.
    provisioningState: &quot;Unknown&quot; | &quot;Succeeded&quot; | &quot;Creating&quot; | &quot;Deleting&quot; | &quot;Moving&quot; | &quot;Failed&quot; | &quot;SoftDeleting&quot; | &quot;SoftDeleted&quot; | &quot;SourceMoved&quot; | &quot;SourceDeleted&quot; | &quot;TargetMoved&quot; | &quot;TargetDeleted&quot;, # Optional. Provisioning status of the resource
    receiverAssetName: string, # Required. Name of the asset for the receiver.
    storageAccountResourceId: string, # Required. Resource id of the adls gen2 storage account.
  }, # Required. Adls gen 2 account asset properties
  kind: AdlsGen2Account, # Required. The types of asset.
  id: string, # Optional. The resource id of the resource.
  name: string, # Optional. Name of the resource.
  type: string, # Optional. Type of the resource.
}
</code>
</details>
<details><summary>~+ 1 more JSON objects</summary><details><summary>BlobAccountAsset</summary>Schema for <c>BlobAccountAsset</c>:
<code>{
  properties: {
    location: string, # Optional. Location of the blob storage account.
    paths: [
      {
        containerName: string, # Required. Gets or sets the container name.
        receiverPath: string, # Optional. Gets or sets the path on the receiver side where the asset is to be mapped.
        senderPath: string, # Optional. Gets or sets the path to file/folder within the container to be shared.
      }
    ], # Required. A list of blob storage account paths to be shared.
    provisioningState: &quot;Unknown&quot; | &quot;Succeeded&quot; | &quot;Creating&quot; | &quot;Deleting&quot; | &quot;Moving&quot; | &quot;Failed&quot; | &quot;SoftDeleting&quot; | &quot;SoftDeleted&quot; | &quot;SourceMoved&quot; | &quot;SourceDeleted&quot; | &quot;TargetMoved&quot; | &quot;TargetDeleted&quot;, # Optional. Provisioning status of the resource
    receiverAssetName: string, # Required. Name of the asset for the receiver.
    storageAccountResourceId: string, # Required. Resource id of the blob storage account.
  }, # Required. Blob storage account asset properties
  kind: BlobAccount, # Required. The types of asset.
  id: string, # Optional. The resource id of the resource.
  name: string, # Optional. Name of the resource.
  type: string, # Optional. Type of the resource.
}
</code>
</details>
</details>

</remarks>
    </member>
    <member name="DeleteAsync(WaitUntil,String,String,RequestContext)">
<example>
This sample shows how to call DeleteAsync with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new AssetsClient("<https://my-service.azure.com>", credential);

var operation = await client.DeleteAsync(WaitUntil.Completed, "<sentShareName>", "<assetName>");

var response = await operation.WaitForCompletionResponseAsync();
Console.WriteLine(response.Status)
]]></code>
</example>
<remarks>
Delete an asset on a sent share
</remarks>
    </member>
    <member name="Delete(WaitUntil,String,String,RequestContext)">
<example>
This sample shows how to call Delete with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new AssetsClient("<https://my-service.azure.com>", credential);

var operation = client.Delete(WaitUntil.Completed, "<sentShareName>", "<assetName>");

var response = operation.WaitForCompletionResponse();
Console.WriteLine(response.Status)
]]></code>
</example>
<remarks>
Delete an asset on a sent share
</remarks>
    </member>
  </members>
</doc>