<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="GetAcceptedSentShareAsync(String,String,RequestContext)">
<example>
This sample shows how to call GetAcceptedSentShareAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new AcceptedSentSharesClient("<https://my-service.azure.com>", credential);

Response response = await client.GetAcceptedSentShareAsync("<sentShareName>", "<acceptedSentShareName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("shareKind").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
]]></code>
</example>
<remarks>
Get an accepted sent share

Below is the JSON schema for the response payload.

Response Body:

<details><summary>InPlaceAcceptedSentShare</summary>Schema for <c>InPlaceAcceptedSentShare</c>:
<code>{
  properties: {
    createdAt: string (ISO 8601 Format), # Optional. created at
    expirationDate: string (ISO 8601 Format), # Optional. Expiration date of the received share in UTC format
    receivedShareStatus: &quot;Active&quot; | &quot;Reinstating&quot; | &quot;Revoked&quot; | &quot;Revoking&quot; | &quot;RevokeFailed&quot; | &quot;ReinstateFailed&quot; | &quot;SourceDeleted&quot;, # Optional. received share status
    receiverEmail: string, # Optional. Email of the user/receiver who received the sent share invitation and created the received share
    receiverName: string, # Optional. Name of the user/receiver who received the sent share invitation and created the received share
    receiverTargetObjectId: string, # Optional. Receiver&apos;s target object id
    receiverTenantName: string, # Optional. Tenant name of the user/receiver who received the sent share invitation and created the received share
    senderEmail: string, # Optional. Email of the sender who created the sent share invitation
    senderName: string, # Optional. Name of the sender who created the sent share invitation
    senderTenantName: string, # Optional. Tenant name of the sender who created the sent share invitation
    sharedAt: string (ISO 8601 Format), # Optional. Shared at
  }, # Required. Properties of in place accepted sent share.
  shareKind: InPlace, # Required. Defines the supported types for share.
  id: string, # Optional. The resource id of the resource.
  name: string, # Optional. Name of the resource.
  type: string, # Optional. Type of the resource.
}
</code>
</details>

</remarks>
    </member>
    <member name="GetAcceptedSentShare(String,String,RequestContext)">
<example>
This sample shows how to call GetAcceptedSentShare with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new AcceptedSentSharesClient("<https://my-service.azure.com>", credential);

Response response = client.GetAcceptedSentShare("<sentShareName>", "<acceptedSentShareName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("shareKind").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
]]></code>
</example>
<remarks>
Get an accepted sent share

Below is the JSON schema for the response payload.

Response Body:

<details><summary>InPlaceAcceptedSentShare</summary>Schema for <c>InPlaceAcceptedSentShare</c>:
<code>{
  properties: {
    createdAt: string (ISO 8601 Format), # Optional. created at
    expirationDate: string (ISO 8601 Format), # Optional. Expiration date of the received share in UTC format
    receivedShareStatus: &quot;Active&quot; | &quot;Reinstating&quot; | &quot;Revoked&quot; | &quot;Revoking&quot; | &quot;RevokeFailed&quot; | &quot;ReinstateFailed&quot; | &quot;SourceDeleted&quot;, # Optional. received share status
    receiverEmail: string, # Optional. Email of the user/receiver who received the sent share invitation and created the received share
    receiverName: string, # Optional. Name of the user/receiver who received the sent share invitation and created the received share
    receiverTargetObjectId: string, # Optional. Receiver&apos;s target object id
    receiverTenantName: string, # Optional. Tenant name of the user/receiver who received the sent share invitation and created the received share
    senderEmail: string, # Optional. Email of the sender who created the sent share invitation
    senderName: string, # Optional. Name of the sender who created the sent share invitation
    senderTenantName: string, # Optional. Tenant name of the sender who created the sent share invitation
    sharedAt: string (ISO 8601 Format), # Optional. Shared at
  }, # Required. Properties of in place accepted sent share.
  shareKind: InPlace, # Required. Defines the supported types for share.
  id: string, # Optional. The resource id of the resource.
  name: string, # Optional. Name of the resource.
  type: string, # Optional. Type of the resource.
}
</code>
</details>

</remarks>
    </member>
    <member name="GetAcceptedSentSharesAsync(String,String,RequestContext)">
<example>
This sample shows how to call GetAcceptedSentSharesAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new AcceptedSentSharesClient("<https://my-service.azure.com>", credential);

await foreach (var data in client.GetAcceptedSentSharesAsync("<sentShareName>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("shareKind").ToString());
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetAcceptedSentSharesAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new AcceptedSentSharesClient("<https://my-service.azure.com>", credential);

await foreach (var data in client.GetAcceptedSentSharesAsync("<sentShareName>", "<skipToken>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("shareKind").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("type").ToString());
}
]]></code>
</example>
<remarks>
Get list of accepted sent shares

Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>AcceptedSentShareListValue</c>:
<code>{
  shareKind: &quot;InPlace&quot;, # Required. Defines the supported types for share.
  id: string, # Optional. The resource id of the resource.
  name: string, # Optional. Name of the resource.
  type: string, # Optional. Type of the resource.
}
</code>

</remarks>
    </member>
    <member name="GetAcceptedSentShares(String,String,RequestContext)">
<example>
This sample shows how to call GetAcceptedSentShares with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new AcceptedSentSharesClient("<https://my-service.azure.com>", credential);

foreach (var data in client.GetAcceptedSentShares("<sentShareName>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("shareKind").ToString());
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetAcceptedSentShares with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new AcceptedSentSharesClient("<https://my-service.azure.com>", credential);

foreach (var data in client.GetAcceptedSentShares("<sentShareName>", "<skipToken>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("shareKind").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("type").ToString());
}
]]></code>
</example>
<remarks>
Get list of accepted sent shares

Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>AcceptedSentShareListValue</c>:
<code>{
  shareKind: &quot;InPlace&quot;, # Required. Defines the supported types for share.
  id: string, # Optional. The resource id of the resource.
  name: string, # Optional. Name of the resource.
  type: string, # Optional. Type of the resource.
}
</code>

</remarks>
    </member>
    <member name="ReinstateAsync(WaitUntil,String,String,RequestContent,String,RequestContext)">
<example>
This sample shows how to call ReinstateAsync with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new AcceptedSentSharesClient("<https://my-service.azure.com>", credential);

var data = new {
    properties = new {},
    shareKind = "InPlace",
};

var operation = await client.ReinstateAsync(WaitUntil.Completed, "<sentShareName>", "<acceptedSentShareName>", RequestContent.Create(data));

BinaryData data = await operation.WaitForCompletionAsync();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("shareKind").ToString());
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call ReinstateAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new AcceptedSentSharesClient("<https://my-service.azure.com>", credential);

var data = new {
    properties = new {
        expirationDate = "2022-05-10T18:57:31.2311892Z",
    },
    shareKind = "InPlace",
};

var operation = await client.ReinstateAsync(WaitUntil.Completed, "<sentShareName>", "<acceptedSentShareName>", RequestContent.Create(data), "<repeatabilityRequestId>");

BinaryData data = await operation.WaitForCompletionAsync();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("shareKind").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
]]></code>
</example>
<remarks>
Reinstate a revoked accepted sent share

Below is the JSON schema for the request and response payloads.

Request Body:

<details><summary>InPlaceAcceptedSentShare</summary>Schema for <c>InPlaceAcceptedSentShare</c>:
<code>{
  properties: {
    createdAt: string (ISO 8601 Format), # Optional. created at
    expirationDate: string (ISO 8601 Format), # Optional. Expiration date of the received share in UTC format
    receivedShareStatus: &quot;Active&quot; | &quot;Reinstating&quot; | &quot;Revoked&quot; | &quot;Revoking&quot; | &quot;RevokeFailed&quot; | &quot;ReinstateFailed&quot; | &quot;SourceDeleted&quot;, # Optional. received share status
    receiverEmail: string, # Optional. Email of the user/receiver who received the sent share invitation and created the received share
    receiverName: string, # Optional. Name of the user/receiver who received the sent share invitation and created the received share
    receiverTargetObjectId: string, # Optional. Receiver&apos;s target object id
    receiverTenantName: string, # Optional. Tenant name of the user/receiver who received the sent share invitation and created the received share
    senderEmail: string, # Optional. Email of the sender who created the sent share invitation
    senderName: string, # Optional. Name of the sender who created the sent share invitation
    senderTenantName: string, # Optional. Tenant name of the sender who created the sent share invitation
    sharedAt: string (ISO 8601 Format), # Optional. Shared at
  }, # Required. Properties of in place accepted sent share.
  shareKind: InPlace, # Required. Defines the supported types for share.
  id: string, # Optional. The resource id of the resource.
  name: string, # Optional. Name of the resource.
  type: string, # Optional. Type of the resource.
}
</code>
</details>

Response Body:

<details><summary>InPlaceAcceptedSentShare</summary>Schema for <c>InPlaceAcceptedSentShare</c>:
<code>{
  properties: {
    createdAt: string (ISO 8601 Format), # Optional. created at
    expirationDate: string (ISO 8601 Format), # Optional. Expiration date of the received share in UTC format
    receivedShareStatus: &quot;Active&quot; | &quot;Reinstating&quot; | &quot;Revoked&quot; | &quot;Revoking&quot; | &quot;RevokeFailed&quot; | &quot;ReinstateFailed&quot; | &quot;SourceDeleted&quot;, # Optional. received share status
    receiverEmail: string, # Optional. Email of the user/receiver who received the sent share invitation and created the received share
    receiverName: string, # Optional. Name of the user/receiver who received the sent share invitation and created the received share
    receiverTargetObjectId: string, # Optional. Receiver&apos;s target object id
    receiverTenantName: string, # Optional. Tenant name of the user/receiver who received the sent share invitation and created the received share
    senderEmail: string, # Optional. Email of the sender who created the sent share invitation
    senderName: string, # Optional. Name of the sender who created the sent share invitation
    senderTenantName: string, # Optional. Tenant name of the sender who created the sent share invitation
    sharedAt: string (ISO 8601 Format), # Optional. Shared at
  }, # Required. Properties of in place accepted sent share.
  shareKind: InPlace, # Required. Defines the supported types for share.
  id: string, # Optional. The resource id of the resource.
  name: string, # Optional. Name of the resource.
  type: string, # Optional. Type of the resource.
}
</code>
</details>

</remarks>
    </member>
    <member name="Reinstate(WaitUntil,String,String,RequestContent,String,RequestContext)">
<example>
This sample shows how to call Reinstate with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new AcceptedSentSharesClient("<https://my-service.azure.com>", credential);

var data = new {
    properties = new {},
    shareKind = "InPlace",
};

var operation = client.Reinstate(WaitUntil.Completed, "<sentShareName>", "<acceptedSentShareName>", RequestContent.Create(data));

BinaryData data = operation.WaitForCompletion();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("shareKind").ToString());
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call Reinstate with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new AcceptedSentSharesClient("<https://my-service.azure.com>", credential);

var data = new {
    properties = new {
        expirationDate = "2022-05-10T18:57:31.2311892Z",
    },
    shareKind = "InPlace",
};

var operation = client.Reinstate(WaitUntil.Completed, "<sentShareName>", "<acceptedSentShareName>", RequestContent.Create(data), "<repeatabilityRequestId>");

BinaryData data = operation.WaitForCompletion();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("shareKind").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
]]></code>
</example>
<remarks>
Reinstate a revoked accepted sent share

Below is the JSON schema for the request and response payloads.

Request Body:

<details><summary>InPlaceAcceptedSentShare</summary>Schema for <c>InPlaceAcceptedSentShare</c>:
<code>{
  properties: {
    createdAt: string (ISO 8601 Format), # Optional. created at
    expirationDate: string (ISO 8601 Format), # Optional. Expiration date of the received share in UTC format
    receivedShareStatus: &quot;Active&quot; | &quot;Reinstating&quot; | &quot;Revoked&quot; | &quot;Revoking&quot; | &quot;RevokeFailed&quot; | &quot;ReinstateFailed&quot; | &quot;SourceDeleted&quot;, # Optional. received share status
    receiverEmail: string, # Optional. Email of the user/receiver who received the sent share invitation and created the received share
    receiverName: string, # Optional. Name of the user/receiver who received the sent share invitation and created the received share
    receiverTargetObjectId: string, # Optional. Receiver&apos;s target object id
    receiverTenantName: string, # Optional. Tenant name of the user/receiver who received the sent share invitation and created the received share
    senderEmail: string, # Optional. Email of the sender who created the sent share invitation
    senderName: string, # Optional. Name of the sender who created the sent share invitation
    senderTenantName: string, # Optional. Tenant name of the sender who created the sent share invitation
    sharedAt: string (ISO 8601 Format), # Optional. Shared at
  }, # Required. Properties of in place accepted sent share.
  shareKind: InPlace, # Required. Defines the supported types for share.
  id: string, # Optional. The resource id of the resource.
  name: string, # Optional. Name of the resource.
  type: string, # Optional. Type of the resource.
}
</code>
</details>

Response Body:

<details><summary>InPlaceAcceptedSentShare</summary>Schema for <c>InPlaceAcceptedSentShare</c>:
<code>{
  properties: {
    createdAt: string (ISO 8601 Format), # Optional. created at
    expirationDate: string (ISO 8601 Format), # Optional. Expiration date of the received share in UTC format
    receivedShareStatus: &quot;Active&quot; | &quot;Reinstating&quot; | &quot;Revoked&quot; | &quot;Revoking&quot; | &quot;RevokeFailed&quot; | &quot;ReinstateFailed&quot; | &quot;SourceDeleted&quot;, # Optional. received share status
    receiverEmail: string, # Optional. Email of the user/receiver who received the sent share invitation and created the received share
    receiverName: string, # Optional. Name of the user/receiver who received the sent share invitation and created the received share
    receiverTargetObjectId: string, # Optional. Receiver&apos;s target object id
    receiverTenantName: string, # Optional. Tenant name of the user/receiver who received the sent share invitation and created the received share
    senderEmail: string, # Optional. Email of the sender who created the sent share invitation
    senderName: string, # Optional. Name of the sender who created the sent share invitation
    senderTenantName: string, # Optional. Tenant name of the sender who created the sent share invitation
    sharedAt: string (ISO 8601 Format), # Optional. Shared at
  }, # Required. Properties of in place accepted sent share.
  shareKind: InPlace, # Required. Defines the supported types for share.
  id: string, # Optional. The resource id of the resource.
  name: string, # Optional. Name of the resource.
  type: string, # Optional. Type of the resource.
}
</code>
</details>

</remarks>
    </member>
    <member name="RevokeAsync(WaitUntil,String,String,String,RequestContext)">
<example>
This sample shows how to call RevokeAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new AcceptedSentSharesClient("<https://my-service.azure.com>", credential);

var operation = await client.RevokeAsync(WaitUntil.Completed, "<sentShareName>", "<acceptedSentShareName>");

BinaryData data = await operation.WaitForCompletionAsync();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("shareKind").ToString());
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call RevokeAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new AcceptedSentSharesClient("<https://my-service.azure.com>", credential);

var operation = await client.RevokeAsync(WaitUntil.Completed, "<sentShareName>", "<acceptedSentShareName>", "<repeatabilityRequestId>");

BinaryData data = await operation.WaitForCompletionAsync();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("shareKind").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
]]></code>
</example>
<remarks>
Revoke an accepted sent share

Below is the JSON schema for the response payload.

Response Body:

<details><summary>InPlaceAcceptedSentShare</summary>Schema for <c>InPlaceAcceptedSentShare</c>:
<code>{
  properties: {
    createdAt: string (ISO 8601 Format), # Optional. created at
    expirationDate: string (ISO 8601 Format), # Optional. Expiration date of the received share in UTC format
    receivedShareStatus: &quot;Active&quot; | &quot;Reinstating&quot; | &quot;Revoked&quot; | &quot;Revoking&quot; | &quot;RevokeFailed&quot; | &quot;ReinstateFailed&quot; | &quot;SourceDeleted&quot;, # Optional. received share status
    receiverEmail: string, # Optional. Email of the user/receiver who received the sent share invitation and created the received share
    receiverName: string, # Optional. Name of the user/receiver who received the sent share invitation and created the received share
    receiverTargetObjectId: string, # Optional. Receiver&apos;s target object id
    receiverTenantName: string, # Optional. Tenant name of the user/receiver who received the sent share invitation and created the received share
    senderEmail: string, # Optional. Email of the sender who created the sent share invitation
    senderName: string, # Optional. Name of the sender who created the sent share invitation
    senderTenantName: string, # Optional. Tenant name of the sender who created the sent share invitation
    sharedAt: string (ISO 8601 Format), # Optional. Shared at
  }, # Required. Properties of in place accepted sent share.
  shareKind: InPlace, # Required. Defines the supported types for share.
  id: string, # Optional. The resource id of the resource.
  name: string, # Optional. Name of the resource.
  type: string, # Optional. Type of the resource.
}
</code>
</details>

</remarks>
    </member>
    <member name="Revoke(WaitUntil,String,String,String,RequestContext)">
<example>
This sample shows how to call Revoke with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new AcceptedSentSharesClient("<https://my-service.azure.com>", credential);

var operation = client.Revoke(WaitUntil.Completed, "<sentShareName>", "<acceptedSentShareName>");

BinaryData data = operation.WaitForCompletion();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("shareKind").ToString());
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call Revoke with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new AcceptedSentSharesClient("<https://my-service.azure.com>", credential);

var operation = client.Revoke(WaitUntil.Completed, "<sentShareName>", "<acceptedSentShareName>", "<repeatabilityRequestId>");

BinaryData data = operation.WaitForCompletion();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("shareKind").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
]]></code>
</example>
<remarks>
Revoke an accepted sent share

Below is the JSON schema for the response payload.

Response Body:

<details><summary>InPlaceAcceptedSentShare</summary>Schema for <c>InPlaceAcceptedSentShare</c>:
<code>{
  properties: {
    createdAt: string (ISO 8601 Format), # Optional. created at
    expirationDate: string (ISO 8601 Format), # Optional. Expiration date of the received share in UTC format
    receivedShareStatus: &quot;Active&quot; | &quot;Reinstating&quot; | &quot;Revoked&quot; | &quot;Revoking&quot; | &quot;RevokeFailed&quot; | &quot;ReinstateFailed&quot; | &quot;SourceDeleted&quot;, # Optional. received share status
    receiverEmail: string, # Optional. Email of the user/receiver who received the sent share invitation and created the received share
    receiverName: string, # Optional. Name of the user/receiver who received the sent share invitation and created the received share
    receiverTargetObjectId: string, # Optional. Receiver&apos;s target object id
    receiverTenantName: string, # Optional. Tenant name of the user/receiver who received the sent share invitation and created the received share
    senderEmail: string, # Optional. Email of the sender who created the sent share invitation
    senderName: string, # Optional. Name of the sender who created the sent share invitation
    senderTenantName: string, # Optional. Tenant name of the sender who created the sent share invitation
    sharedAt: string (ISO 8601 Format), # Optional. Shared at
  }, # Required. Properties of in place accepted sent share.
  shareKind: InPlace, # Required. Defines the supported types for share.
  id: string, # Optional. The resource id of the resource.
  name: string, # Optional. Name of the resource.
  type: string, # Optional. Type of the resource.
}
</code>
</details>

</remarks>
    </member>
    <member name="UpdateExpirationAsync(WaitUntil,String,String,RequestContent,String,RequestContext)">
<example>
This sample shows how to call UpdateExpirationAsync with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new AcceptedSentSharesClient("<https://my-service.azure.com>", credential);

var data = new {
    properties = new {},
    shareKind = "InPlace",
};

var operation = await client.UpdateExpirationAsync(WaitUntil.Completed, "<sentShareName>", "<acceptedSentShareName>", RequestContent.Create(data));

BinaryData data = await operation.WaitForCompletionAsync();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("shareKind").ToString());
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call UpdateExpirationAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new AcceptedSentSharesClient("<https://my-service.azure.com>", credential);

var data = new {
    properties = new {
        expirationDate = "2022-05-10T18:57:31.2311892Z",
    },
    shareKind = "InPlace",
};

var operation = await client.UpdateExpirationAsync(WaitUntil.Completed, "<sentShareName>", "<acceptedSentShareName>", RequestContent.Create(data), "<repeatabilityRequestId>");

BinaryData data = await operation.WaitForCompletionAsync();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("shareKind").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
]]></code>
</example>
<remarks>
Update the expiration date of an accepted sent share

Below is the JSON schema for the request and response payloads.

Request Body:

<details><summary>InPlaceAcceptedSentShare</summary>Schema for <c>InPlaceAcceptedSentShare</c>:
<code>{
  properties: {
    createdAt: string (ISO 8601 Format), # Optional. created at
    expirationDate: string (ISO 8601 Format), # Optional. Expiration date of the received share in UTC format
    receivedShareStatus: &quot;Active&quot; | &quot;Reinstating&quot; | &quot;Revoked&quot; | &quot;Revoking&quot; | &quot;RevokeFailed&quot; | &quot;ReinstateFailed&quot; | &quot;SourceDeleted&quot;, # Optional. received share status
    receiverEmail: string, # Optional. Email of the user/receiver who received the sent share invitation and created the received share
    receiverName: string, # Optional. Name of the user/receiver who received the sent share invitation and created the received share
    receiverTargetObjectId: string, # Optional. Receiver&apos;s target object id
    receiverTenantName: string, # Optional. Tenant name of the user/receiver who received the sent share invitation and created the received share
    senderEmail: string, # Optional. Email of the sender who created the sent share invitation
    senderName: string, # Optional. Name of the sender who created the sent share invitation
    senderTenantName: string, # Optional. Tenant name of the sender who created the sent share invitation
    sharedAt: string (ISO 8601 Format), # Optional. Shared at
  }, # Required. Properties of in place accepted sent share.
  shareKind: InPlace, # Required. Defines the supported types for share.
  id: string, # Optional. The resource id of the resource.
  name: string, # Optional. Name of the resource.
  type: string, # Optional. Type of the resource.
}
</code>
</details>

Response Body:

<details><summary>InPlaceAcceptedSentShare</summary>Schema for <c>InPlaceAcceptedSentShare</c>:
<code>{
  properties: {
    createdAt: string (ISO 8601 Format), # Optional. created at
    expirationDate: string (ISO 8601 Format), # Optional. Expiration date of the received share in UTC format
    receivedShareStatus: &quot;Active&quot; | &quot;Reinstating&quot; | &quot;Revoked&quot; | &quot;Revoking&quot; | &quot;RevokeFailed&quot; | &quot;ReinstateFailed&quot; | &quot;SourceDeleted&quot;, # Optional. received share status
    receiverEmail: string, # Optional. Email of the user/receiver who received the sent share invitation and created the received share
    receiverName: string, # Optional. Name of the user/receiver who received the sent share invitation and created the received share
    receiverTargetObjectId: string, # Optional. Receiver&apos;s target object id
    receiverTenantName: string, # Optional. Tenant name of the user/receiver who received the sent share invitation and created the received share
    senderEmail: string, # Optional. Email of the sender who created the sent share invitation
    senderName: string, # Optional. Name of the sender who created the sent share invitation
    senderTenantName: string, # Optional. Tenant name of the sender who created the sent share invitation
    sharedAt: string (ISO 8601 Format), # Optional. Shared at
  }, # Required. Properties of in place accepted sent share.
  shareKind: InPlace, # Required. Defines the supported types for share.
  id: string, # Optional. The resource id of the resource.
  name: string, # Optional. Name of the resource.
  type: string, # Optional. Type of the resource.
}
</code>
</details>

</remarks>
    </member>
    <member name="UpdateExpiration(WaitUntil,String,String,RequestContent,String,RequestContext)">
<example>
This sample shows how to call UpdateExpiration with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new AcceptedSentSharesClient("<https://my-service.azure.com>", credential);

var data = new {
    properties = new {},
    shareKind = "InPlace",
};

var operation = client.UpdateExpiration(WaitUntil.Completed, "<sentShareName>", "<acceptedSentShareName>", RequestContent.Create(data));

BinaryData data = operation.WaitForCompletion();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("shareKind").ToString());
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call UpdateExpiration with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new AcceptedSentSharesClient("<https://my-service.azure.com>", credential);

var data = new {
    properties = new {
        expirationDate = "2022-05-10T18:57:31.2311892Z",
    },
    shareKind = "InPlace",
};

var operation = client.UpdateExpiration(WaitUntil.Completed, "<sentShareName>", "<acceptedSentShareName>", RequestContent.Create(data), "<repeatabilityRequestId>");

BinaryData data = operation.WaitForCompletion();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("shareKind").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
]]></code>
</example>
<remarks>
Update the expiration date of an accepted sent share

Below is the JSON schema for the request and response payloads.

Request Body:

<details><summary>InPlaceAcceptedSentShare</summary>Schema for <c>InPlaceAcceptedSentShare</c>:
<code>{
  properties: {
    createdAt: string (ISO 8601 Format), # Optional. created at
    expirationDate: string (ISO 8601 Format), # Optional. Expiration date of the received share in UTC format
    receivedShareStatus: &quot;Active&quot; | &quot;Reinstating&quot; | &quot;Revoked&quot; | &quot;Revoking&quot; | &quot;RevokeFailed&quot; | &quot;ReinstateFailed&quot; | &quot;SourceDeleted&quot;, # Optional. received share status
    receiverEmail: string, # Optional. Email of the user/receiver who received the sent share invitation and created the received share
    receiverName: string, # Optional. Name of the user/receiver who received the sent share invitation and created the received share
    receiverTargetObjectId: string, # Optional. Receiver&apos;s target object id
    receiverTenantName: string, # Optional. Tenant name of the user/receiver who received the sent share invitation and created the received share
    senderEmail: string, # Optional. Email of the sender who created the sent share invitation
    senderName: string, # Optional. Name of the sender who created the sent share invitation
    senderTenantName: string, # Optional. Tenant name of the sender who created the sent share invitation
    sharedAt: string (ISO 8601 Format), # Optional. Shared at
  }, # Required. Properties of in place accepted sent share.
  shareKind: InPlace, # Required. Defines the supported types for share.
  id: string, # Optional. The resource id of the resource.
  name: string, # Optional. Name of the resource.
  type: string, # Optional. Type of the resource.
}
</code>
</details>

Response Body:

<details><summary>InPlaceAcceptedSentShare</summary>Schema for <c>InPlaceAcceptedSentShare</c>:
<code>{
  properties: {
    createdAt: string (ISO 8601 Format), # Optional. created at
    expirationDate: string (ISO 8601 Format), # Optional. Expiration date of the received share in UTC format
    receivedShareStatus: &quot;Active&quot; | &quot;Reinstating&quot; | &quot;Revoked&quot; | &quot;Revoking&quot; | &quot;RevokeFailed&quot; | &quot;ReinstateFailed&quot; | &quot;SourceDeleted&quot;, # Optional. received share status
    receiverEmail: string, # Optional. Email of the user/receiver who received the sent share invitation and created the received share
    receiverName: string, # Optional. Name of the user/receiver who received the sent share invitation and created the received share
    receiverTargetObjectId: string, # Optional. Receiver&apos;s target object id
    receiverTenantName: string, # Optional. Tenant name of the user/receiver who received the sent share invitation and created the received share
    senderEmail: string, # Optional. Email of the sender who created the sent share invitation
    senderName: string, # Optional. Name of the sender who created the sent share invitation
    senderTenantName: string, # Optional. Tenant name of the sender who created the sent share invitation
    sharedAt: string (ISO 8601 Format), # Optional. Shared at
  }, # Required. Properties of in place accepted sent share.
  shareKind: InPlace, # Required. Defines the supported types for share.
  id: string, # Optional. The resource id of the resource.
  name: string, # Optional. Name of the resource.
  type: string, # Optional. Type of the resource.
}
</code>
</details>

</remarks>
    </member>
  </members>
</doc>