// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Analytics.Purview.Share
{
    // Data plane generated client. The KeyVaultConnections service client.
    /// <summary> The KeyVaultConnections service client. </summary>
    public partial class KeyVaultConnectionsClient
    {
        private static readonly string[] AuthorizationScopes = new string[] { "https://purview.azure.net/.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly string _endpoint;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of KeyVaultConnectionsClient for mocking. </summary>
        protected KeyVaultConnectionsClient()
        {
        }

        /// <summary> Initializes a new instance of KeyVaultConnectionsClient. </summary>
        /// <param name="endpoint"> The catalog endpoint of your Purview account. Example: https://{accountName}.purview.azure.com. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public KeyVaultConnectionsClient(string endpoint, TokenCredential credential) : this(endpoint, credential, new PurviewShareClientOptions())
        {
        }

        /// <summary> Initializes a new instance of KeyVaultConnectionsClient. </summary>
        /// <param name="endpoint"> The catalog endpoint of your Purview account. Example: https://{accountName}.purview.azure.com. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public KeyVaultConnectionsClient(string endpoint, TokenCredential credential, PurviewShareClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            Argument.AssertNotNull(credential, nameof(credential));
            options ??= new PurviewShareClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes) }, new ResponseClassifier());
            _endpoint = endpoint;
        }

        /// <summary> Gets key vault information. </summary>
        /// <param name="keyVaultName"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="keyVaultName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="keyVaultName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetKeyVaultConnectionAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new KeyVaultConnectionsClient("<https://my-service.azure.com>", credential);
        /// 
        /// Response response = await client.GetKeyVaultConnectionAsync("<keyVaultName>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("baseUrl").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>AzureKeyVault</c>:
        /// <code>{
        ///   properties: {
        ///     baseUrl: string, # Optional.
        ///     description: string, # Optional.
        ///   }, # Optional.
        ///   id: string, # Optional.
        ///   name: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetKeyVaultConnectionAsync(string keyVaultName, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(keyVaultName, nameof(keyVaultName));

            using var scope = ClientDiagnostics.CreateScope("KeyVaultConnectionsClient.GetKeyVaultConnection");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetKeyVaultConnectionRequest(keyVaultName, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets key vault information. </summary>
        /// <param name="keyVaultName"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="keyVaultName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="keyVaultName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetKeyVaultConnection with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new KeyVaultConnectionsClient("<https://my-service.azure.com>", credential);
        /// 
        /// Response response = client.GetKeyVaultConnection("<keyVaultName>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("baseUrl").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>AzureKeyVault</c>:
        /// <code>{
        ///   properties: {
        ///     baseUrl: string, # Optional.
        ///     description: string, # Optional.
        ///   }, # Optional.
        ///   id: string, # Optional.
        ///   name: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetKeyVaultConnection(string keyVaultName, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(keyVaultName, nameof(keyVaultName));

            using var scope = ClientDiagnostics.CreateScope("KeyVaultConnectionsClient.GetKeyVaultConnection");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetKeyVaultConnectionRequest(keyVaultName, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates an instance of a key vault connection. </summary>
        /// <param name="keyVaultName"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="keyVaultName"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="keyVaultName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call CreateAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new KeyVaultConnectionsClient("<https://my-service.azure.com>", credential);
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.CreateAsync("<keyVaultName>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call CreateAsync with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new KeyVaultConnectionsClient("<https://my-service.azure.com>", credential);
        /// 
        /// var data = new {
        ///     properties = new {
        ///         baseUrl = "<baseUrl>",
        ///         description = "<description>",
        ///     },
        /// };
        /// 
        /// Response response = await client.CreateAsync("<keyVaultName>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("baseUrl").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>AzureKeyVault</c>:
        /// <code>{
        ///   properties: {
        ///     baseUrl: string, # Optional.
        ///     description: string, # Optional.
        ///   }, # Optional.
        ///   id: string, # Optional.
        ///   name: string, # Optional.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>AzureKeyVault</c>:
        /// <code>{
        ///   properties: {
        ///     baseUrl: string, # Optional.
        ///     description: string, # Optional.
        ///   }, # Optional.
        ///   id: string, # Optional.
        ///   name: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> CreateAsync(string keyVaultName, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(keyVaultName, nameof(keyVaultName));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("KeyVaultConnectionsClient.Create");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateRequest(keyVaultName, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates an instance of a key vault connection. </summary>
        /// <param name="keyVaultName"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="keyVaultName"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="keyVaultName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call Create with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new KeyVaultConnectionsClient("<https://my-service.azure.com>", credential);
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.Create("<keyVaultName>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call Create with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new KeyVaultConnectionsClient("<https://my-service.azure.com>", credential);
        /// 
        /// var data = new {
        ///     properties = new {
        ///         baseUrl = "<baseUrl>",
        ///         description = "<description>",
        ///     },
        /// };
        /// 
        /// Response response = client.Create("<keyVaultName>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("baseUrl").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>AzureKeyVault</c>:
        /// <code>{
        ///   properties: {
        ///     baseUrl: string, # Optional.
        ///     description: string, # Optional.
        ///   }, # Optional.
        ///   id: string, # Optional.
        ///   name: string, # Optional.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>AzureKeyVault</c>:
        /// <code>{
        ///   properties: {
        ///     baseUrl: string, # Optional.
        ///     description: string, # Optional.
        ///   }, # Optional.
        ///   id: string, # Optional.
        ///   name: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response Create(string keyVaultName, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(keyVaultName, nameof(keyVaultName));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("KeyVaultConnectionsClient.Create");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateRequest(keyVaultName, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes the key vault connection associated with the account. </summary>
        /// <param name="keyVaultName"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="keyVaultName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="keyVaultName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call DeleteAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new KeyVaultConnectionsClient("<https://my-service.azure.com>", credential);
        /// 
        /// Response response = await client.DeleteAsync("<keyVaultName>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("baseUrl").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>AzureKeyVault</c>:
        /// <code>{
        ///   properties: {
        ///     baseUrl: string, # Optional.
        ///     description: string, # Optional.
        ///   }, # Optional.
        ///   id: string, # Optional.
        ///   name: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> DeleteAsync(string keyVaultName, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(keyVaultName, nameof(keyVaultName));

            using var scope = ClientDiagnostics.CreateScope("KeyVaultConnectionsClient.Delete");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteRequest(keyVaultName, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes the key vault connection associated with the account. </summary>
        /// <param name="keyVaultName"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="keyVaultName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="keyVaultName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call Delete with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new KeyVaultConnectionsClient("<https://my-service.azure.com>", credential);
        /// 
        /// Response response = client.Delete("<keyVaultName>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("baseUrl").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>AzureKeyVault</c>:
        /// <code>{
        ///   properties: {
        ///     baseUrl: string, # Optional.
        ///     description: string, # Optional.
        ///   }, # Optional.
        ///   id: string, # Optional.
        ///   name: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response Delete(string keyVaultName, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(keyVaultName, nameof(keyVaultName));

            using var scope = ClientDiagnostics.CreateScope("KeyVaultConnectionsClient.Delete");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteRequest(keyVaultName, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List key vault connections in account. </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="AsyncPageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetKeyVaultConnectionsAsync and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new KeyVaultConnectionsClient("<https://my-service.azure.com>", credential);
        /// 
        /// await foreach (var data in client.GetKeyVaultConnectionsAsync())
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.GetProperty("properties").GetProperty("baseUrl").ToString());
        ///     Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
        ///     Console.WriteLine(result.GetProperty("id").ToString());
        ///     Console.WriteLine(result.GetProperty("name").ToString());
        /// }
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for one item in the pageable response.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>AzureKeyVaultListValue</c>:
        /// <code>{
        ///   properties: {
        ///     baseUrl: string, # Optional.
        ///     description: string, # Optional.
        ///   }, # Optional.
        ///   id: string, # Optional.
        ///   name: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual AsyncPageable<BinaryData> GetKeyVaultConnectionsAsync(RequestContext context = null)
        {
            return GetKeyVaultConnectionsImplementationAsync("KeyVaultConnectionsClient.GetKeyVaultConnections", context);
        }

        private AsyncPageable<BinaryData> GetKeyVaultConnectionsImplementationAsync(string diagnosticsScopeName, RequestContext context)
        {
            return PageableHelpers.CreateAsyncPageable(CreateEnumerableAsync, ClientDiagnostics, diagnosticsScopeName);
            async IAsyncEnumerable<Page<BinaryData>> CreateEnumerableAsync(string nextLink, int? pageSizeHint, [EnumeratorCancellation] CancellationToken cancellationToken = default)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetKeyVaultConnectionsRequest(context)
                        : CreateGetKeyVaultConnectionsNextPageRequest(nextLink, context);
                    var page = await LowLevelPageableHelpers.ProcessMessageAsync(_pipeline, message, context, "value", "nextLink", cancellationToken).ConfigureAwait(false);
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> List key vault connections in account. </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Pageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetKeyVaultConnections and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new KeyVaultConnectionsClient("<https://my-service.azure.com>", credential);
        /// 
        /// foreach (var data in client.GetKeyVaultConnections())
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.GetProperty("properties").GetProperty("baseUrl").ToString());
        ///     Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
        ///     Console.WriteLine(result.GetProperty("id").ToString());
        ///     Console.WriteLine(result.GetProperty("name").ToString());
        /// }
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for one item in the pageable response.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>AzureKeyVaultListValue</c>:
        /// <code>{
        ///   properties: {
        ///     baseUrl: string, # Optional.
        ///     description: string, # Optional.
        ///   }, # Optional.
        ///   id: string, # Optional.
        ///   name: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Pageable<BinaryData> GetKeyVaultConnections(RequestContext context = null)
        {
            return GetKeyVaultConnectionsImplementation("KeyVaultConnectionsClient.GetKeyVaultConnections", context);
        }

        private Pageable<BinaryData> GetKeyVaultConnectionsImplementation(string diagnosticsScopeName, RequestContext context)
        {
            return PageableHelpers.CreatePageable(CreateEnumerable, ClientDiagnostics, diagnosticsScopeName);
            IEnumerable<Page<BinaryData>> CreateEnumerable(string nextLink, int? pageSizeHint)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetKeyVaultConnectionsRequest(context)
                        : CreateGetKeyVaultConnectionsNextPageRequest(nextLink, context);
                    var page = LowLevelPageableHelpers.ProcessMessage(_pipeline, message, context, "value", "nextLink");
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        internal HttpMessage CreateGetKeyVaultConnectionRequest(string keyVaultName, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/azureKeyVaults/", false);
            uri.AppendPath(keyVaultName, true);
            uri.AppendQuery("api-version", "2018-12-01-preview", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateCreateRequest(string keyVaultName, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/azureKeyVaults/", false);
            uri.AppendPath(keyVaultName, true);
            uri.AppendQuery("api-version", "2018-12-01-preview", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeleteRequest(string keyVaultName, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200204);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/azureKeyVaults/", false);
            uri.AppendPath(keyVaultName, true);
            uri.AppendQuery("api-version", "2018-12-01-preview", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetKeyVaultConnectionsRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/azureKeyVaults", false);
            uri.AppendQuery("api-version", "2018-12-01-preview", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetKeyVaultConnectionsNextPageRequest(string nextLink, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_endpoint, false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier200204;
        private static ResponseClassifier ResponseClassifier200204 => _responseClassifier200204 ??= new StatusCodeClassifier(stackalloc ushort[] { 200, 204 });
    }
}
