// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Analytics.Share
{
    /// <summary> The EmailRegistration service client. </summary>
    public partial class EmailRegistrationClient
    {
        private static readonly string[] AuthorizationScopes = new string[] { "https://purview.azure.net/.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly string _endpoint;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of EmailRegistrationClient for mocking. </summary>
        protected EmailRegistrationClient()
        {
        }

        /// <summary> Initializes a new instance of EmailRegistrationClient. </summary>
        /// <param name="endpoint"> The scanning endpoint of your purview account. Example: https://{accountName}.purview.azure.com/share. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public EmailRegistrationClient(string endpoint, TokenCredential credential) : this(endpoint, credential, new PurviewShareClientOptions())
        {
        }

        /// <summary> Initializes a new instance of EmailRegistrationClient. </summary>
        /// <param name="endpoint"> The scanning endpoint of your purview account. Example: https://{accountName}.purview.azure.com/share. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public EmailRegistrationClient(string endpoint, TokenCredential credential, PurviewShareClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            Argument.AssertNotNull(credential, nameof(credential));
            options ??= new PurviewShareClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes) }, new ResponseClassifier());
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        /// <summary> Activates the email registration for current tenant. </summary>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="repeatabilityRequestId"> If specified, the client directs that the request is repeatable; that is, that the client can make the request multiple times with the same Repeatability-Request-Id and get back an appropriate response without the server executing the request multiple times. The value of the Repeatability-Request-Id is an opaque string representing a client-generated, globally unique for all time, identifier for the request. It is recommended to use version 4 (random) UUIDs. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>TenantEmailRegistration</c>:
        /// <code>{
        ///   id: string, # Optional. The resource id of the resource.
        ///   name: string, # Optional. Name of the resource.
        ///   type: string, # Optional. Type of the resource.
        ///   properties: {
        ///     activationCode: string, # Required. Activation code for the registration.
        ///     activationExpiration: string (ISO 8601 Format), # Optional. Date of the activation expiration.
        ///     email: string, # Optional. The email to register.
        ///     registrationStatus: &quot;ActivationPending&quot; | &quot;Activated&quot; | &quot;ActivationAttemptsExhausted&quot;, # Optional. Defines the supported types for registration.
        ///     tenantId: string, # Optional. The tenant id to register.
        ///   }, # Optional. Tenant email registration property bag.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>TenantEmailRegistration</c>:
        /// <code>{
        ///   id: string, # Optional. The resource id of the resource.
        ///   name: string, # Optional. Name of the resource.
        ///   type: string, # Optional. Type of the resource.
        ///   properties: {
        ///     activationCode: string, # Required. Activation code for the registration.
        ///     activationExpiration: string (ISO 8601 Format), # Optional. Date of the activation expiration.
        ///     email: string, # Optional. The email to register.
        ///     registrationStatus: &quot;ActivationPending&quot; | &quot;Activated&quot; | &quot;ActivationAttemptsExhausted&quot;, # Optional. Defines the supported types for registration.
        ///     tenantId: string, # Optional. The tenant id to register.
        ///   }, # Optional. Tenant email registration property bag.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> ActivateAsync(RequestContent content, string repeatabilityRequestId = null, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("EmailRegistrationClient.Activate");
            scope.Start();
            try
            {
                using HttpMessage message = CreateActivateRequest(content, repeatabilityRequestId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Activates the email registration for current tenant. </summary>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="repeatabilityRequestId"> If specified, the client directs that the request is repeatable; that is, that the client can make the request multiple times with the same Repeatability-Request-Id and get back an appropriate response without the server executing the request multiple times. The value of the Repeatability-Request-Id is an opaque string representing a client-generated, globally unique for all time, identifier for the request. It is recommended to use version 4 (random) UUIDs. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>TenantEmailRegistration</c>:
        /// <code>{
        ///   id: string, # Optional. The resource id of the resource.
        ///   name: string, # Optional. Name of the resource.
        ///   type: string, # Optional. Type of the resource.
        ///   properties: {
        ///     activationCode: string, # Required. Activation code for the registration.
        ///     activationExpiration: string (ISO 8601 Format), # Optional. Date of the activation expiration.
        ///     email: string, # Optional. The email to register.
        ///     registrationStatus: &quot;ActivationPending&quot; | &quot;Activated&quot; | &quot;ActivationAttemptsExhausted&quot;, # Optional. Defines the supported types for registration.
        ///     tenantId: string, # Optional. The tenant id to register.
        ///   }, # Optional. Tenant email registration property bag.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>TenantEmailRegistration</c>:
        /// <code>{
        ///   id: string, # Optional. The resource id of the resource.
        ///   name: string, # Optional. Name of the resource.
        ///   type: string, # Optional. Type of the resource.
        ///   properties: {
        ///     activationCode: string, # Required. Activation code for the registration.
        ///     activationExpiration: string (ISO 8601 Format), # Optional. Date of the activation expiration.
        ///     email: string, # Optional. The email to register.
        ///     registrationStatus: &quot;ActivationPending&quot; | &quot;Activated&quot; | &quot;ActivationAttemptsExhausted&quot;, # Optional. Defines the supported types for registration.
        ///     tenantId: string, # Optional. The tenant id to register.
        ///   }, # Optional. Tenant email registration property bag.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response Activate(RequestContent content, string repeatabilityRequestId = null, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("EmailRegistrationClient.Activate");
            scope.Start();
            try
            {
                using HttpMessage message = CreateActivateRequest(content, repeatabilityRequestId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Register an email for the current tenant. </summary>
        /// <param name="repeatabilityRequestId"> If specified, the client directs that the request is repeatable; that is, that the client can make the request multiple times with the same Repeatability-Request-Id and get back an appropriate response without the server executing the request multiple times. The value of the Repeatability-Request-Id is an opaque string representing a client-generated, globally unique for all time, identifier for the request. It is recommended to use version 4 (random) UUIDs. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>TenantEmailRegistration</c>:
        /// <code>{
        ///   id: string, # Optional. The resource id of the resource.
        ///   name: string, # Optional. Name of the resource.
        ///   type: string, # Optional. Type of the resource.
        ///   properties: {
        ///     activationCode: string, # Required. Activation code for the registration.
        ///     activationExpiration: string (ISO 8601 Format), # Optional. Date of the activation expiration.
        ///     email: string, # Optional. The email to register.
        ///     registrationStatus: &quot;ActivationPending&quot; | &quot;Activated&quot; | &quot;ActivationAttemptsExhausted&quot;, # Optional. Defines the supported types for registration.
        ///     tenantId: string, # Optional. The tenant id to register.
        ///   }, # Optional. Tenant email registration property bag.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> RegisterAsync(string repeatabilityRequestId = null, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("EmailRegistrationClient.Register");
            scope.Start();
            try
            {
                using HttpMessage message = CreateRegisterRequest(repeatabilityRequestId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Register an email for the current tenant. </summary>
        /// <param name="repeatabilityRequestId"> If specified, the client directs that the request is repeatable; that is, that the client can make the request multiple times with the same Repeatability-Request-Id and get back an appropriate response without the server executing the request multiple times. The value of the Repeatability-Request-Id is an opaque string representing a client-generated, globally unique for all time, identifier for the request. It is recommended to use version 4 (random) UUIDs. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>TenantEmailRegistration</c>:
        /// <code>{
        ///   id: string, # Optional. The resource id of the resource.
        ///   name: string, # Optional. Name of the resource.
        ///   type: string, # Optional. Type of the resource.
        ///   properties: {
        ///     activationCode: string, # Required. Activation code for the registration.
        ///     activationExpiration: string (ISO 8601 Format), # Optional. Date of the activation expiration.
        ///     email: string, # Optional. The email to register.
        ///     registrationStatus: &quot;ActivationPending&quot; | &quot;Activated&quot; | &quot;ActivationAttemptsExhausted&quot;, # Optional. Defines the supported types for registration.
        ///     tenantId: string, # Optional. The tenant id to register.
        ///   }, # Optional. Tenant email registration property bag.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response Register(string repeatabilityRequestId = null, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("EmailRegistrationClient.Register");
            scope.Start();
            try
            {
                using HttpMessage message = CreateRegisterRequest(repeatabilityRequestId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateActivateRequest(RequestContent content, string repeatabilityRequestId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/activateEmail", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (repeatabilityRequestId != null)
            {
                request.Headers.Add("repeatability-request-id", repeatabilityRequestId);
            }
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateRegisterRequest(string repeatabilityRequestId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/registerEmail", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (repeatabilityRequestId != null)
            {
                request.Headers.Add("repeatability-request-id", repeatabilityRequestId);
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
    }
}
