// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Analytics.Purview.Share.Samples
{
    public class Samples_AssetMappingsClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAssetMapping()
        {
            var credential = new DefaultAzureCredential();
            var client = new AssetMappingsClient("<https://my-service.azure.com>", credential);

            Response response = client.GetAssetMapping("<receivedShareName>", "<assetMappingName>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAssetMapping_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new AssetMappingsClient("<https://my-service.azure.com>", credential);

            Response response = client.GetAssetMapping("<receivedShareName>", "<assetMappingName>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAssetMapping_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new AssetMappingsClient("<https://my-service.azure.com>", credential);

            Response response = await client.GetAssetMappingAsync("<receivedShareName>", "<assetMappingName>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAssetMapping_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new AssetMappingsClient("<https://my-service.azure.com>", credential);

            Response response = await client.GetAssetMappingAsync("<receivedShareName>", "<assetMappingName>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAssetMappings()
        {
            var credential = new DefaultAzureCredential();
            var client = new AssetMappingsClient("<https://my-service.azure.com>", credential);

            foreach (var item in client.GetAssetMappings("<receivedShareName>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("kind").ToString());
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAssetMappings_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new AssetMappingsClient("<https://my-service.azure.com>", credential);

            foreach (var item in client.GetAssetMappings("<receivedShareName>", "<skipToken>", "<filter>", "<orderby>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAssetMappings_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new AssetMappingsClient("<https://my-service.azure.com>", credential);

            await foreach (var item in client.GetAssetMappingsAsync("<receivedShareName>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("kind").ToString());
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAssetMappings_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new AssetMappingsClient("<https://my-service.azure.com>", credential);

            await foreach (var item in client.GetAssetMappingsAsync("<receivedShareName>", "<skipToken>", "<filter>", "<orderby>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Create()
        {
            var credential = new DefaultAzureCredential();
            var client = new AssetMappingsClient("<https://my-service.azure.com>", credential);

            var data = new
            {
                properties = new
                {
                    assetId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
                    containerName = "<containerName>",
                    folder = "<folder>",
                    storageAccountResourceId = "<storageAccountResourceId>",
                },
                kind = "AdlsGen2Account",
            };

            var operation = client.Create(WaitUntil.Completed, "<receivedShareName>", "<assetMappingName>", RequestContent.Create(data));

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Create_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new AssetMappingsClient("<https://my-service.azure.com>", credential);

            var data = new
            {
                properties = new
                {
                    assetId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
                    containerName = "<containerName>",
                    folder = "<folder>",
                    mountPath = "<mountPath>",
                    storageAccountResourceId = "<storageAccountResourceId>",
                },
                kind = "AdlsGen2Account",
            };

            var operation = client.Create(WaitUntil.Completed, "<receivedShareName>", "<assetMappingName>", RequestContent.Create(data));

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Create_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new AssetMappingsClient("<https://my-service.azure.com>", credential);

            var data = new
            {
                properties = new
                {
                    assetId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
                    containerName = "<containerName>",
                    folder = "<folder>",
                    storageAccountResourceId = "<storageAccountResourceId>",
                },
                kind = "AdlsGen2Account",
            };

            var operation = await client.CreateAsync(WaitUntil.Completed, "<receivedShareName>", "<assetMappingName>", RequestContent.Create(data));

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Create_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new AssetMappingsClient("<https://my-service.azure.com>", credential);

            var data = new
            {
                properties = new
                {
                    assetId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
                    containerName = "<containerName>",
                    folder = "<folder>",
                    mountPath = "<mountPath>",
                    storageAccountResourceId = "<storageAccountResourceId>",
                },
                kind = "AdlsGen2Account",
            };

            var operation = await client.CreateAsync(WaitUntil.Completed, "<receivedShareName>", "<assetMappingName>", RequestContent.Create(data));

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Delete()
        {
            var credential = new DefaultAzureCredential();
            var client = new AssetMappingsClient("<https://my-service.azure.com>", credential);

            var operation = client.Delete(WaitUntil.Completed, "<receivedShareName>", "<assetMappingName>");

            Console.WriteLine(operation.GetRawResponse().Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Delete_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new AssetMappingsClient("<https://my-service.azure.com>", credential);

            var operation = client.Delete(WaitUntil.Completed, "<receivedShareName>", "<assetMappingName>");

            Console.WriteLine(operation.GetRawResponse().Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Delete_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new AssetMappingsClient("<https://my-service.azure.com>", credential);

            var operation = await client.DeleteAsync(WaitUntil.Completed, "<receivedShareName>", "<assetMappingName>");

            Console.WriteLine(operation.GetRawResponse().Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Delete_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new AssetMappingsClient("<https://my-service.azure.com>", credential);

            var operation = await client.DeleteAsync(WaitUntil.Completed, "<receivedShareName>", "<assetMappingName>");

            Console.WriteLine(operation.GetRawResponse().Status);
        }
    }
}
