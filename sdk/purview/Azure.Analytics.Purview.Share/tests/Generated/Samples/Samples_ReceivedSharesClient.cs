// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Analytics.Purview.Share.Samples
{
    public class Samples_ReceivedSharesClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetReceivedShare()
        {
            var credential = new DefaultAzureCredential();
            var client = new ReceivedSharesClient("<https://my-service.azure.com>", credential);

            Response response = client.GetReceivedShare("<receivedShareName>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("shareKind").ToString());
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetReceivedShare_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new ReceivedSharesClient("<https://my-service.azure.com>", credential);

            Response response = client.GetReceivedShare("<receivedShareName>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("shareKind").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetReceivedShare_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new ReceivedSharesClient("<https://my-service.azure.com>", credential);

            Response response = await client.GetReceivedShareAsync("<receivedShareName>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("shareKind").ToString());
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetReceivedShare_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new ReceivedSharesClient("<https://my-service.azure.com>", credential);

            Response response = await client.GetReceivedShareAsync("<receivedShareName>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("shareKind").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Create()
        {
            var credential = new DefaultAzureCredential();
            var client = new ReceivedSharesClient("<https://my-service.azure.com>", credential);

            var data = new
            {
                properties = new
                {
                    collection = new
                    {
                        referenceName = "<referenceName>",
                        type = "<type>",
                    },
                    invitationId = "<invitationId>",
                    sentShareLocation = "<sentShareLocation>",
                },
                shareKind = "InPlace",
            };

            Response response = client.Create("<receivedShareName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("shareKind").ToString());
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Create_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new ReceivedSharesClient("<https://my-service.azure.com>", credential);

            var data = new
            {
                properties = new
                {
                    collection = new
                    {
                        referenceName = "<referenceName>",
                        type = "<type>",
                    },
                    expirationDate = "2022-05-10T18:57:31.2311892Z",
                    invitationId = "<invitationId>",
                    sentShareDescription = "<sentShareDescription>",
                    sentShareLocation = "<sentShareLocation>",
                },
                shareKind = "InPlace",
            };

            Response response = client.Create("<receivedShareName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("shareKind").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Create_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new ReceivedSharesClient("<https://my-service.azure.com>", credential);

            var data = new
            {
                properties = new
                {
                    collection = new
                    {
                        referenceName = "<referenceName>",
                        type = "<type>",
                    },
                    invitationId = "<invitationId>",
                    sentShareLocation = "<sentShareLocation>",
                },
                shareKind = "InPlace",
            };

            Response response = await client.CreateAsync("<receivedShareName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("shareKind").ToString());
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Create_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new ReceivedSharesClient("<https://my-service.azure.com>", credential);

            var data = new
            {
                properties = new
                {
                    collection = new
                    {
                        referenceName = "<referenceName>",
                        type = "<type>",
                    },
                    expirationDate = "2022-05-10T18:57:31.2311892Z",
                    invitationId = "<invitationId>",
                    sentShareDescription = "<sentShareDescription>",
                    sentShareLocation = "<sentShareLocation>",
                },
                shareKind = "InPlace",
            };

            Response response = await client.CreateAsync("<receivedShareName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("shareKind").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetReceivedShares()
        {
            var credential = new DefaultAzureCredential();
            var client = new ReceivedSharesClient("<https://my-service.azure.com>", credential);

            foreach (var item in client.GetReceivedShares())
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("shareKind").ToString());
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetReceivedShares_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new ReceivedSharesClient("<https://my-service.azure.com>", credential);

            foreach (var item in client.GetReceivedShares("<skipToken>", "<filter>", "<orderby>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("shareKind").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetReceivedShares_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new ReceivedSharesClient("<https://my-service.azure.com>", credential);

            await foreach (var item in client.GetReceivedSharesAsync())
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("shareKind").ToString());
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetReceivedShares_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new ReceivedSharesClient("<https://my-service.azure.com>", credential);

            await foreach (var item in client.GetReceivedSharesAsync("<skipToken>", "<filter>", "<orderby>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("shareKind").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Delete()
        {
            var credential = new DefaultAzureCredential();
            var client = new ReceivedSharesClient("<https://my-service.azure.com>", credential);

            var operation = client.Delete(WaitUntil.Completed, "<receivedShareName>");

            Console.WriteLine(operation.GetRawResponse().Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Delete_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new ReceivedSharesClient("<https://my-service.azure.com>", credential);

            var operation = client.Delete(WaitUntil.Completed, "<receivedShareName>");

            Console.WriteLine(operation.GetRawResponse().Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Delete_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new ReceivedSharesClient("<https://my-service.azure.com>", credential);

            var operation = await client.DeleteAsync(WaitUntil.Completed, "<receivedShareName>");

            Console.WriteLine(operation.GetRawResponse().Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Delete_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new ReceivedSharesClient("<https://my-service.azure.com>", credential);

            var operation = await client.DeleteAsync(WaitUntil.Completed, "<receivedShareName>");

            Console.WriteLine(operation.GetRawResponse().Status);
        }
    }
}
