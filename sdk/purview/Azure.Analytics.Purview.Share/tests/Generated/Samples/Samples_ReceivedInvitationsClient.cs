// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Analytics.Purview.Share.Samples
{
    public class Samples_ReceivedInvitationsClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetReceivedInvitation()
        {
            var credential = new DefaultAzureCredential();
            var client = new ReceivedInvitationsClient("<https://my-service.azure.com>", credential);

            Response response = client.GetReceivedInvitation("<receivedInvitationName>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("invitationKind").ToString());
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetReceivedInvitation_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new ReceivedInvitationsClient("<https://my-service.azure.com>", credential);

            Response response = client.GetReceivedInvitation("<receivedInvitationName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("invitationKind").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetReceivedInvitation_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new ReceivedInvitationsClient("<https://my-service.azure.com>", credential);

            Response response = await client.GetReceivedInvitationAsync("<receivedInvitationName>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("invitationKind").ToString());
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetReceivedInvitation_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new ReceivedInvitationsClient("<https://my-service.azure.com>", credential);

            Response response = await client.GetReceivedInvitationAsync("<receivedInvitationName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("invitationKind").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Reject()
        {
            var credential = new DefaultAzureCredential();
            var client = new ReceivedInvitationsClient("<https://my-service.azure.com>", credential);

            var data = new
            {
                properties = new
                {
                    targetActiveDirectoryId = "<targetActiveDirectoryId>",
                    targetObjectId = "<targetObjectId>",
                },
                invitationKind = "Application",
            };

            Response response = client.Reject("<receivedInvitationName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("invitationKind").ToString());
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Reject_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new ReceivedInvitationsClient("<https://my-service.azure.com>", credential);

            var data = new
            {
                properties = new
                {
                    shareKind = "InPlace",
                    targetActiveDirectoryId = "<targetActiveDirectoryId>",
                    targetObjectId = "<targetObjectId>",
                },
                invitationKind = "Application",
            };

            Response response = client.Reject("<receivedInvitationName>", RequestContent.Create(data), "<repeatabilityRequestId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("invitationKind").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Reject_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new ReceivedInvitationsClient("<https://my-service.azure.com>", credential);

            var data = new
            {
                properties = new
                {
                    targetActiveDirectoryId = "<targetActiveDirectoryId>",
                    targetObjectId = "<targetObjectId>",
                },
                invitationKind = "Application",
            };

            Response response = await client.RejectAsync("<receivedInvitationName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("invitationKind").ToString());
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Reject_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new ReceivedInvitationsClient("<https://my-service.azure.com>", credential);

            var data = new
            {
                properties = new
                {
                    shareKind = "InPlace",
                    targetActiveDirectoryId = "<targetActiveDirectoryId>",
                    targetObjectId = "<targetObjectId>",
                },
                invitationKind = "Application",
            };

            Response response = await client.RejectAsync("<receivedInvitationName>", RequestContent.Create(data), "<repeatabilityRequestId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("invitationKind").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetReceivedInvitations()
        {
            var credential = new DefaultAzureCredential();
            var client = new ReceivedInvitationsClient("<https://my-service.azure.com>", credential);

            foreach (var item in client.GetReceivedInvitations())
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("invitationKind").ToString());
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetReceivedInvitations_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new ReceivedInvitationsClient("<https://my-service.azure.com>", credential);

            foreach (var item in client.GetReceivedInvitations("<skipToken>", "<filter>", "<orderby>", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("invitationKind").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetReceivedInvitations_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new ReceivedInvitationsClient("<https://my-service.azure.com>", credential);

            await foreach (var item in client.GetReceivedInvitationsAsync())
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("invitationKind").ToString());
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetReceivedInvitations_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new ReceivedInvitationsClient("<https://my-service.azure.com>", credential);

            await foreach (var item in client.GetReceivedInvitationsAsync("<skipToken>", "<filter>", "<orderby>", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("invitationKind").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
            }
        }
    }
}
