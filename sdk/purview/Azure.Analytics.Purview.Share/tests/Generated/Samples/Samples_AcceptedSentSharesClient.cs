// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Analytics.Purview.Share.Samples
{
    public class Samples_AcceptedSentSharesClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAcceptedSentShare()
        {
            var credential = new DefaultAzureCredential();
            var client = new AcceptedSentSharesClient("<https://my-service.azure.com>", credential);

            Response response = client.GetAcceptedSentShare("<sentShareName>", "<acceptedSentShareName>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("shareKind").ToString());
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAcceptedSentShare_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new AcceptedSentSharesClient("<https://my-service.azure.com>", credential);

            Response response = client.GetAcceptedSentShare("<sentShareName>", "<acceptedSentShareName>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("shareKind").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAcceptedSentShare_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new AcceptedSentSharesClient("<https://my-service.azure.com>", credential);

            Response response = await client.GetAcceptedSentShareAsync("<sentShareName>", "<acceptedSentShareName>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("shareKind").ToString());
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAcceptedSentShare_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new AcceptedSentSharesClient("<https://my-service.azure.com>", credential);

            Response response = await client.GetAcceptedSentShareAsync("<sentShareName>", "<acceptedSentShareName>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("shareKind").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAcceptedSentShares()
        {
            var credential = new DefaultAzureCredential();
            var client = new AcceptedSentSharesClient("<https://my-service.azure.com>", credential);

            foreach (var item in client.GetAcceptedSentShares("<sentShareName>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("shareKind").ToString());
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAcceptedSentShares_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new AcceptedSentSharesClient("<https://my-service.azure.com>", credential);

            foreach (var item in client.GetAcceptedSentShares("<sentShareName>", "<skipToken>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("shareKind").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAcceptedSentShares_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new AcceptedSentSharesClient("<https://my-service.azure.com>", credential);

            await foreach (var item in client.GetAcceptedSentSharesAsync("<sentShareName>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("shareKind").ToString());
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAcceptedSentShares_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new AcceptedSentSharesClient("<https://my-service.azure.com>", credential);

            await foreach (var item in client.GetAcceptedSentSharesAsync("<sentShareName>", "<skipToken>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("shareKind").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Reinstate()
        {
            var credential = new DefaultAzureCredential();
            var client = new AcceptedSentSharesClient("<https://my-service.azure.com>", credential);

            var data = new
            {
                properties = new { },
                shareKind = "InPlace",
            };

            var operation = client.Reinstate(WaitUntil.Completed, "<sentShareName>", "<acceptedSentShareName>", RequestContent.Create(data));

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("shareKind").ToString());
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Reinstate_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new AcceptedSentSharesClient("<https://my-service.azure.com>", credential);

            var data = new
            {
                properties = new
                {
                    expirationDate = "2022-05-10T18:57:31.2311892Z",
                },
                shareKind = "InPlace",
            };

            var operation = client.Reinstate(WaitUntil.Completed, "<sentShareName>", "<acceptedSentShareName>", RequestContent.Create(data), "<repeatabilityRequestId>");

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("shareKind").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Reinstate_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new AcceptedSentSharesClient("<https://my-service.azure.com>", credential);

            var data = new
            {
                properties = new { },
                shareKind = "InPlace",
            };

            var operation = await client.ReinstateAsync(WaitUntil.Completed, "<sentShareName>", "<acceptedSentShareName>", RequestContent.Create(data));

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("shareKind").ToString());
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Reinstate_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new AcceptedSentSharesClient("<https://my-service.azure.com>", credential);

            var data = new
            {
                properties = new
                {
                    expirationDate = "2022-05-10T18:57:31.2311892Z",
                },
                shareKind = "InPlace",
            };

            var operation = await client.ReinstateAsync(WaitUntil.Completed, "<sentShareName>", "<acceptedSentShareName>", RequestContent.Create(data), "<repeatabilityRequestId>");

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("shareKind").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Revoke()
        {
            var credential = new DefaultAzureCredential();
            var client = new AcceptedSentSharesClient("<https://my-service.azure.com>", credential);

            var operation = client.Revoke(WaitUntil.Completed, "<sentShareName>", "<acceptedSentShareName>");

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("shareKind").ToString());
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Revoke_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new AcceptedSentSharesClient("<https://my-service.azure.com>", credential);

            var operation = client.Revoke(WaitUntil.Completed, "<sentShareName>", "<acceptedSentShareName>", "<repeatabilityRequestId>");

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("shareKind").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Revoke_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new AcceptedSentSharesClient("<https://my-service.azure.com>", credential);

            var operation = await client.RevokeAsync(WaitUntil.Completed, "<sentShareName>", "<acceptedSentShareName>");

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("shareKind").ToString());
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Revoke_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new AcceptedSentSharesClient("<https://my-service.azure.com>", credential);

            var operation = await client.RevokeAsync(WaitUntil.Completed, "<sentShareName>", "<acceptedSentShareName>", "<repeatabilityRequestId>");

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("shareKind").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UpdateExpiration()
        {
            var credential = new DefaultAzureCredential();
            var client = new AcceptedSentSharesClient("<https://my-service.azure.com>", credential);

            var data = new
            {
                properties = new { },
                shareKind = "InPlace",
            };

            var operation = client.UpdateExpiration(WaitUntil.Completed, "<sentShareName>", "<acceptedSentShareName>", RequestContent.Create(data));

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("shareKind").ToString());
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UpdateExpiration_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new AcceptedSentSharesClient("<https://my-service.azure.com>", credential);

            var data = new
            {
                properties = new
                {
                    expirationDate = "2022-05-10T18:57:31.2311892Z",
                },
                shareKind = "InPlace",
            };

            var operation = client.UpdateExpiration(WaitUntil.Completed, "<sentShareName>", "<acceptedSentShareName>", RequestContent.Create(data), "<repeatabilityRequestId>");

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("shareKind").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UpdateExpiration_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new AcceptedSentSharesClient("<https://my-service.azure.com>", credential);

            var data = new
            {
                properties = new { },
                shareKind = "InPlace",
            };

            var operation = await client.UpdateExpirationAsync(WaitUntil.Completed, "<sentShareName>", "<acceptedSentShareName>", RequestContent.Create(data));

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("shareKind").ToString());
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UpdateExpiration_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new AcceptedSentSharesClient("<https://my-service.azure.com>", credential);

            var data = new
            {
                properties = new
                {
                    expirationDate = "2022-05-10T18:57:31.2311892Z",
                },
                shareKind = "InPlace",
            };

            var operation = await client.UpdateExpirationAsync(WaitUntil.Completed, "<sentShareName>", "<acceptedSentShareName>", RequestContent.Create(data), "<repeatabilityRequestId>");

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("shareKind").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }
    }
}
