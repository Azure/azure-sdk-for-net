// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Analytics.Purview.Sharing.Tests
{
    public partial class ReceivedSharesClientTests : AnalyticsPurviewSharingTestBase
    {
        public ReceivedSharesClientTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetReceivedShare_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ReceivedSharesClient client = CreateReceivedSharesClient(endpoint, credential);

            Response response = await client.GetReceivedShareAsync("<receivedShareId>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetReceivedShare_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ReceivedSharesClient client = CreateReceivedSharesClient(endpoint, credential);

            Response response = await client.GetReceivedShareAsync("<receivedShareId>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task ActivateTenantEmailRegistration_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ReceivedSharesClient client = CreateReceivedSharesClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.ActivateTenantEmailRegistrationAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task ActivateTenantEmailRegistration_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ReceivedSharesClient client = CreateReceivedSharesClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    activationCode = "<activationCode>",
                },
            });
            Response response = await client.ActivateTenantEmailRegistrationAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task RegisterTenantEmailRegistration_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ReceivedSharesClient client = CreateReceivedSharesClient(endpoint, credential);

            Response response = await client.RegisterTenantEmailRegistrationAsync(null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task RegisterTenantEmailRegistration_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ReceivedSharesClient client = CreateReceivedSharesClient(endpoint, credential);

            Response response = await client.RegisterTenantEmailRegistrationAsync(null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetAllAttachedReceivedShares_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ReceivedSharesClient client = CreateReceivedSharesClient(endpoint, credential);

            await foreach (BinaryData item in client.GetAllAttachedReceivedSharesAsync("<referenceName>", null, null, null))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetAllAttachedReceivedShares_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ReceivedSharesClient client = CreateReceivedSharesClient(endpoint, credential);

            await foreach (BinaryData item in client.GetAllAttachedReceivedSharesAsync("<referenceName>", "<filter>", "<orderby>", null))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetAllDetachedReceivedShares_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ReceivedSharesClient client = CreateReceivedSharesClient(endpoint, credential);

            await foreach (BinaryData item in client.GetAllDetachedReceivedSharesAsync(null, null, null))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetAllDetachedReceivedShares_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ReceivedSharesClient client = CreateReceivedSharesClient(endpoint, credential);

            await foreach (BinaryData item in client.GetAllDetachedReceivedSharesAsync("<filter>", "<orderby>", null))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task CreateOrReplaceReceivedShare_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ReceivedSharesClient client = CreateReceivedSharesClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                properties = new object(),
                shareKind = "InPlace",
            });
            Operation<BinaryData> operation = await client.CreateOrReplaceReceivedShareAsync(WaitUntil.Completed, "<receivedShareId>", content);
            BinaryData responseData = operation.Value;
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task CreateOrReplaceReceivedShare_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ReceivedSharesClient client = CreateReceivedSharesClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    assetStoreKind = "AdlsGen2Account",
                    displayName = "<displayName>",
                    shareStatus = "Detached",
                    sink = new
                    {
                        properties = new
                        {
                            containerName = "<containerName>",
                            folder = "<folder>",
                            mountPath = "<mountPath>",
                        },
                        storeKind = "AdlsGen2Account",
                        storeReference = new
                        {
                            referenceName = "<referenceName>",
                            type = "ArmResourceReference",
                        },
                    },
                },
                shareKind = "InPlace",
            });
            Operation<BinaryData> operation = await client.CreateOrReplaceReceivedShareAsync(WaitUntil.Completed, "<receivedShareId>", content);
            BinaryData responseData = operation.Value;
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DeleteReceivedShare_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ReceivedSharesClient client = CreateReceivedSharesClient(endpoint, credential);

            Operation<BinaryData> operation = await client.DeleteReceivedShareAsync(WaitUntil.Completed, "<receivedShareId>", null);
            BinaryData responseData = operation.Value;
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DeleteReceivedShare_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ReceivedSharesClient client = CreateReceivedSharesClient(endpoint, credential);

            Operation<BinaryData> operation = await client.DeleteReceivedShareAsync(WaitUntil.Completed, "<receivedShareId>", null);
            BinaryData responseData = operation.Value;
        }
    }
}
