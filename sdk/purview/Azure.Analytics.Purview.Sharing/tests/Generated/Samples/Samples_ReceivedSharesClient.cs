// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Analytics.Purview.Sharing.Samples
{
    public class Samples_ReceivedSharesClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetReceivedShare()
        {
            var credential = new DefaultAzureCredential();
            var client = new ReceivedSharesClient("<https://my-service.azure.com>", credential);

            Response response = client.GetReceivedShare("<receivedShareId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("shareKind").ToString());
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetReceivedShare_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new ReceivedSharesClient("<https://my-service.azure.com>", credential);

            Response response = client.GetReceivedShare("<receivedShareId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("shareKind").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetReceivedShare_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new ReceivedSharesClient("<https://my-service.azure.com>", credential);

            Response response = await client.GetReceivedShareAsync("<receivedShareId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("shareKind").ToString());
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetReceivedShare_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new ReceivedSharesClient("<https://my-service.azure.com>", credential);

            Response response = await client.GetReceivedShareAsync("<receivedShareId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("shareKind").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ActivateTenantEmailRegistration()
        {
            var credential = new DefaultAzureCredential();
            var client = new ReceivedSharesClient("<https://my-service.azure.com>", credential);

            var data = new { };

            Response response = client.ActivateTenantEmailRegistration(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ActivateTenantEmailRegistration_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new ReceivedSharesClient("<https://my-service.azure.com>", credential);

            var data = new
            {
                properties = new
                {
                    activationCode = "<activationCode>",
                },
            };

            Response response = client.ActivateTenantEmailRegistration(RequestContent.Create(data), "<repeatabilityRequestId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("activationCode").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("activationExpiration").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("email").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("registrationStatus").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("tenantId").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ActivateTenantEmailRegistration_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new ReceivedSharesClient("<https://my-service.azure.com>", credential);

            var data = new { };

            Response response = await client.ActivateTenantEmailRegistrationAsync(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ActivateTenantEmailRegistration_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new ReceivedSharesClient("<https://my-service.azure.com>", credential);

            var data = new
            {
                properties = new
                {
                    activationCode = "<activationCode>",
                },
            };

            Response response = await client.ActivateTenantEmailRegistrationAsync(RequestContent.Create(data), "<repeatabilityRequestId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("activationCode").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("activationExpiration").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("email").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("registrationStatus").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("tenantId").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RegisterTenantEmailRegistration()
        {
            var credential = new DefaultAzureCredential();
            var client = new ReceivedSharesClient("<https://my-service.azure.com>", credential);

            Response response = client.RegisterTenantEmailRegistration();

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RegisterTenantEmailRegistration_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new ReceivedSharesClient("<https://my-service.azure.com>", credential);

            Response response = client.RegisterTenantEmailRegistration("<repeatabilityRequestId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("activationCode").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("activationExpiration").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("email").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("registrationStatus").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("tenantId").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RegisterTenantEmailRegistration_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new ReceivedSharesClient("<https://my-service.azure.com>", credential);

            Response response = await client.RegisterTenantEmailRegistrationAsync();

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RegisterTenantEmailRegistration_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new ReceivedSharesClient("<https://my-service.azure.com>", credential);

            Response response = await client.RegisterTenantEmailRegistrationAsync("<repeatabilityRequestId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("activationCode").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("activationExpiration").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("email").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("registrationStatus").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("tenantId").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAllAttachedReceivedShares()
        {
            var credential = new DefaultAzureCredential();
            var client = new ReceivedSharesClient("<https://my-service.azure.com>", credential);

            foreach (var item in client.GetAllAttachedReceivedShares("<referenceName>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("shareKind").ToString());
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAllAttachedReceivedShares_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new ReceivedSharesClient("<https://my-service.azure.com>", credential);

            foreach (var item in client.GetAllAttachedReceivedShares("<referenceName>", "<skipToken>", "<filter>", "<orderby>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("shareKind").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAllAttachedReceivedShares_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new ReceivedSharesClient("<https://my-service.azure.com>", credential);

            await foreach (var item in client.GetAllAttachedReceivedSharesAsync("<referenceName>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("shareKind").ToString());
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAllAttachedReceivedShares_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new ReceivedSharesClient("<https://my-service.azure.com>", credential);

            await foreach (var item in client.GetAllAttachedReceivedSharesAsync("<referenceName>", "<skipToken>", "<filter>", "<orderby>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("shareKind").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAllDetachedReceivedShares()
        {
            var credential = new DefaultAzureCredential();
            var client = new ReceivedSharesClient("<https://my-service.azure.com>", credential);

            foreach (var item in client.GetAllDetachedReceivedShares())
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("shareKind").ToString());
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAllDetachedReceivedShares_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new ReceivedSharesClient("<https://my-service.azure.com>", credential);

            foreach (var item in client.GetAllDetachedReceivedShares("<skipToken>", "<filter>", "<orderby>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("shareKind").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAllDetachedReceivedShares_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new ReceivedSharesClient("<https://my-service.azure.com>", credential);

            await foreach (var item in client.GetAllDetachedReceivedSharesAsync())
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("shareKind").ToString());
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAllDetachedReceivedShares_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new ReceivedSharesClient("<https://my-service.azure.com>", credential);

            await foreach (var item in client.GetAllDetachedReceivedSharesAsync("<skipToken>", "<filter>", "<orderby>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("shareKind").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateOrReplaceReceivedShare()
        {
            var credential = new DefaultAzureCredential();
            var client = new ReceivedSharesClient("<https://my-service.azure.com>", credential);

            var data = new
            {
                properties = new { },
                shareKind = "InPlace",
            };

            var operation = client.CreateOrReplaceReceivedShare(WaitUntil.Completed, "<receivedShareId>", RequestContent.Create(data));

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("shareKind").ToString());
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateOrReplaceReceivedShare_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new ReceivedSharesClient("<https://my-service.azure.com>", credential);

            var data = new
            {
                properties = new
                {
                    assetStoreKind = "AdlsGen2Account",
                    displayName = "<displayName>",
                    shareStatus = "Detached",
                    sink = new
                    {
                        properties = new
                        {
                            containerName = "<containerName>",
                            folder = "<folder>",
                            mountPath = "<mountPath>",
                        },
                        storeKind = "AdlsGen2Account",
                        storeReference = new
                        {
                            referenceName = "<referenceName>",
                            type = "ArmResourceReference",
                        },
                    },
                },
                shareKind = "InPlace",
            };

            var operation = client.CreateOrReplaceReceivedShare(WaitUntil.Completed, "<receivedShareId>", RequestContent.Create(data));

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("shareKind").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateOrReplaceReceivedShare_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new ReceivedSharesClient("<https://my-service.azure.com>", credential);

            var data = new
            {
                properties = new { },
                shareKind = "InPlace",
            };

            var operation = await client.CreateOrReplaceReceivedShareAsync(WaitUntil.Completed, "<receivedShareId>", RequestContent.Create(data));

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("shareKind").ToString());
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateOrReplaceReceivedShare_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new ReceivedSharesClient("<https://my-service.azure.com>", credential);

            var data = new
            {
                properties = new
                {
                    assetStoreKind = "AdlsGen2Account",
                    displayName = "<displayName>",
                    shareStatus = "Detached",
                    sink = new
                    {
                        properties = new
                        {
                            containerName = "<containerName>",
                            folder = "<folder>",
                            mountPath = "<mountPath>",
                        },
                        storeKind = "AdlsGen2Account",
                        storeReference = new
                        {
                            referenceName = "<referenceName>",
                            type = "ArmResourceReference",
                        },
                    },
                },
                shareKind = "InPlace",
            };

            var operation = await client.CreateOrReplaceReceivedShareAsync(WaitUntil.Completed, "<receivedShareId>", RequestContent.Create(data));

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("shareKind").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteReceivedShare()
        {
            var credential = new DefaultAzureCredential();
            var client = new ReceivedSharesClient("<https://my-service.azure.com>", credential);

            var operation = client.DeleteReceivedShare(WaitUntil.Completed, "<receivedShareId>");

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteReceivedShare_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new ReceivedSharesClient("<https://my-service.azure.com>", credential);

            var operation = client.DeleteReceivedShare(WaitUntil.Completed, "<receivedShareId>");

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteReceivedShare_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new ReceivedSharesClient("<https://my-service.azure.com>", credential);

            var operation = await client.DeleteReceivedShareAsync(WaitUntil.Completed, "<receivedShareId>");

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteReceivedShare_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new ReceivedSharesClient("<https://my-service.azure.com>", credential);

            var operation = await client.DeleteReceivedShareAsync(WaitUntil.Completed, "<receivedShareId>");

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
        }
    }
}
