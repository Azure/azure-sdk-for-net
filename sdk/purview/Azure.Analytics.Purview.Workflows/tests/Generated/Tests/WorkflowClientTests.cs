// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Analytics.Purview.Workflows.Tests
{
    public partial class WorkflowClientTests : AnalyticsPurviewWorkflowsTestBase
    {
        public WorkflowClientTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetWorkflow_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            WorkflowClient client = CreateWorkflowClient(endpoint, credential);

            Response response = await client.GetWorkflowAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetWorkflow_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            WorkflowClient client = CreateWorkflowClient(endpoint, credential);

            Response response = await client.GetWorkflowAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task CreateOrReplace_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            WorkflowClient client = CreateWorkflowClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                triggers = new object[]
            {
new
{
type = "when_term_creation_is_requested",
}
            },
                name = "<name>",
                isEnabled = true,
                description = "<description>",
            });
            Response response = await client.CreateOrReplaceAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task CreateOrReplace_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            WorkflowClient client = CreateWorkflowClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                triggers = new object[]
            {
new
{
type = "when_term_creation_is_requested",
underGlossaryHierarchy = "<underGlossaryHierarchy>",
underCollection = "<underCollection>",
underGlossary = "<underGlossary>",
}
            },
                name = "<name>",
                isEnabled = true,
                description = "<description>",
                actionDag = new object(),
            });
            Response response = await client.CreateOrReplaceAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Delete_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            WorkflowClient client = CreateWorkflowClient(endpoint, credential);

            Response response = await client.DeleteAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Delete_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            WorkflowClient client = CreateWorkflowClient(endpoint, credential);

            Response response = await client.DeleteAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Validate_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            WorkflowClient client = CreateWorkflowClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                triggers = new object[]
            {
new
{
type = "when_term_creation_is_requested",
}
            },
                name = "<name>",
                isEnabled = true,
                description = "<description>",
            });
            Response response = await client.ValidateAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Validate_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            WorkflowClient client = CreateWorkflowClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                triggers = new object[]
            {
new
{
type = "when_term_creation_is_requested",
underGlossaryHierarchy = "<underGlossaryHierarchy>",
underCollection = "<underCollection>",
underGlossary = "<underGlossary>",
}
            },
                name = "<name>",
                isEnabled = true,
                description = "<description>",
                actionDag = new object(),
            });
            Response response = await client.ValidateAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);
        }
    }
}
