// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Analytics.Purview.Workflows.Samples
{
    public class Samples_PurviewWorkflowServiceClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetWorkflow()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewWorkflowServiceClient(endpoint, credential);

            Response response = client.GetWorkflow(Guid.NewGuid());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("actionDag").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("isEnabled").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetWorkflow_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewWorkflowServiceClient(endpoint, credential);

            Response response = client.GetWorkflow(Guid.NewGuid());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("actionDag").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("underGlossaryHierarchy").ToString());
            Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("underCollection").ToString());
            Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("underGlossary").ToString());
            Console.WriteLine(result.GetProperty("createdTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("isEnabled").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetWorkflow_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewWorkflowServiceClient(endpoint, credential);

            Response response = await client.GetWorkflowAsync(Guid.NewGuid());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("actionDag").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("isEnabled").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetWorkflow_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewWorkflowServiceClient(endpoint, credential);

            Response response = await client.GetWorkflowAsync(Guid.NewGuid());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("actionDag").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("underGlossaryHierarchy").ToString());
            Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("underCollection").ToString());
            Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("underGlossary").ToString());
            Console.WriteLine(result.GetProperty("createdTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("isEnabled").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateOrReplaceWorkflow()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewWorkflowServiceClient(endpoint, credential);

            var data = new
            {
                triggers = new[] {
        new {
            type = "when_term_creation_is_requested",
        }
    },
                name = "<name>",
                isEnabled = true,
                description = "<description>",
            };

            Response response = client.CreateOrReplaceWorkflow(Guid.NewGuid(), RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("actionDag").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("isEnabled").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateOrReplaceWorkflow_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewWorkflowServiceClient(endpoint, credential);

            var data = new
            {
                triggers = new[] {
        new {
            type = "when_term_creation_is_requested",
            underGlossaryHierarchy = "<underGlossaryHierarchy>",
            underCollection = "<underCollection>",
            underGlossary = "<underGlossary>",
        }
    },
                name = "<name>",
                isEnabled = true,
                description = "<description>",
                actionDag = new { },
            };

            Response response = client.CreateOrReplaceWorkflow(Guid.NewGuid(), RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("actionDag").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("underGlossaryHierarchy").ToString());
            Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("underCollection").ToString());
            Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("underGlossary").ToString());
            Console.WriteLine(result.GetProperty("createdTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("isEnabled").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateOrReplaceWorkflow_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewWorkflowServiceClient(endpoint, credential);

            var data = new
            {
                triggers = new[] {
        new {
            type = "when_term_creation_is_requested",
        }
    },
                name = "<name>",
                isEnabled = true,
                description = "<description>",
            };

            Response response = await client.CreateOrReplaceWorkflowAsync(Guid.NewGuid(), RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("actionDag").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("isEnabled").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateOrReplaceWorkflow_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewWorkflowServiceClient(endpoint, credential);

            var data = new
            {
                triggers = new[] {
        new {
            type = "when_term_creation_is_requested",
            underGlossaryHierarchy = "<underGlossaryHierarchy>",
            underCollection = "<underCollection>",
            underGlossary = "<underGlossary>",
        }
    },
                name = "<name>",
                isEnabled = true,
                description = "<description>",
                actionDag = new { },
            };

            Response response = await client.CreateOrReplaceWorkflowAsync(Guid.NewGuid(), RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("actionDag").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("underGlossaryHierarchy").ToString());
            Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("underCollection").ToString());
            Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("underGlossary").ToString());
            Console.WriteLine(result.GetProperty("createdTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
            Console.WriteLine(result.GetProperty("updatedBy").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("isEnabled").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteWorkflow()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewWorkflowServiceClient(endpoint, credential);

            Response response = client.DeleteWorkflow(Guid.NewGuid());
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteWorkflow_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewWorkflowServiceClient(endpoint, credential);

            Response response = client.DeleteWorkflow(Guid.NewGuid());
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteWorkflow_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewWorkflowServiceClient(endpoint, credential);

            Response response = await client.DeleteWorkflowAsync(Guid.NewGuid());
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteWorkflow_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewWorkflowServiceClient(endpoint, credential);

            Response response = await client.DeleteWorkflowAsync(Guid.NewGuid());
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SubmitUserRequests()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewWorkflowServiceClient(endpoint, credential);

            var data = new
            {
                operations = new[] {
        new {
            type = "CreateTerm",
            payload = new {},
        }
    },
            };

            Response response = client.SubmitUserRequests(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("requestId").ToString());
            Console.WriteLine(result.GetProperty("requestor").ToString());
            Console.WriteLine(result.GetProperty("operations")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("operations")[0].GetProperty("payload").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SubmitUserRequests_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewWorkflowServiceClient(endpoint, credential);

            var data = new
            {
                operations = new[] {
        new {
            type = "CreateTerm",
            payload = new {},
        }
    },
                comment = "<comment>",
            };

            Response response = client.SubmitUserRequests(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("requestId").ToString());
            Console.WriteLine(result.GetProperty("requestor").ToString());
            Console.WriteLine(result.GetProperty("operations")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("operations")[0].GetProperty("payload").ToString());
            Console.WriteLine(result.GetProperty("operations")[0].GetProperty("workflowRunIds")[0].ToString());
            Console.WriteLine(result.GetProperty("comment").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SubmitUserRequests_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewWorkflowServiceClient(endpoint, credential);

            var data = new
            {
                operations = new[] {
        new {
            type = "CreateTerm",
            payload = new {},
        }
    },
            };

            Response response = await client.SubmitUserRequestsAsync(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("requestId").ToString());
            Console.WriteLine(result.GetProperty("requestor").ToString());
            Console.WriteLine(result.GetProperty("operations")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("operations")[0].GetProperty("payload").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SubmitUserRequests_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewWorkflowServiceClient(endpoint, credential);

            var data = new
            {
                operations = new[] {
        new {
            type = "CreateTerm",
            payload = new {},
        }
    },
                comment = "<comment>",
            };

            Response response = await client.SubmitUserRequestsAsync(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("requestId").ToString());
            Console.WriteLine(result.GetProperty("requestor").ToString());
            Console.WriteLine(result.GetProperty("operations")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("operations")[0].GetProperty("payload").ToString());
            Console.WriteLine(result.GetProperty("operations")[0].GetProperty("workflowRunIds")[0].ToString());
            Console.WriteLine(result.GetProperty("comment").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetWorkflowRun()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewWorkflowServiceClient(endpoint, credential);

            Response response = client.GetWorkflowRun(Guid.NewGuid());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("actionDag").ToString());
            Console.WriteLine(result.GetProperty("detail").GetProperty("runInput").ToString());
            Console.WriteLine(result.GetProperty("detail").GetProperty("actions").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetWorkflowRun_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewWorkflowServiceClient(endpoint, credential);

            Response response = client.GetWorkflowRun(Guid.NewGuid());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("workflowId").ToString());
            Console.WriteLine(result.GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("requestor").ToString());
            Console.WriteLine(result.GetProperty("userRequestId").ToString());
            Console.WriteLine(result.GetProperty("runPayload").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("runPayload").GetProperty("targetValue").ToString());
            Console.WriteLine(result.GetProperty("runPayload").GetProperty("payload").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("cancelTime").ToString());
            Console.WriteLine(result.GetProperty("cancelComment").ToString());
            Console.WriteLine(result.GetProperty("actionDag").ToString());
            Console.WriteLine(result.GetProperty("detail").GetProperty("runInput").ToString());
            Console.WriteLine(result.GetProperty("detail").GetProperty("actions").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetWorkflowRun_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewWorkflowServiceClient(endpoint, credential);

            Response response = await client.GetWorkflowRunAsync(Guid.NewGuid());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("actionDag").ToString());
            Console.WriteLine(result.GetProperty("detail").GetProperty("runInput").ToString());
            Console.WriteLine(result.GetProperty("detail").GetProperty("actions").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetWorkflowRun_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewWorkflowServiceClient(endpoint, credential);

            Response response = await client.GetWorkflowRunAsync(Guid.NewGuid());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("workflowId").ToString());
            Console.WriteLine(result.GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("requestor").ToString());
            Console.WriteLine(result.GetProperty("userRequestId").ToString());
            Console.WriteLine(result.GetProperty("runPayload").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("runPayload").GetProperty("targetValue").ToString());
            Console.WriteLine(result.GetProperty("runPayload").GetProperty("payload").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("cancelTime").ToString());
            Console.WriteLine(result.GetProperty("cancelComment").ToString());
            Console.WriteLine(result.GetProperty("actionDag").ToString());
            Console.WriteLine(result.GetProperty("detail").GetProperty("runInput").ToString());
            Console.WriteLine(result.GetProperty("detail").GetProperty("actions").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CancelWorkflowRun()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewWorkflowServiceClient(endpoint, credential);

            var data = new { };

            Response response = client.CancelWorkflowRun(Guid.NewGuid(), RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CancelWorkflowRun_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewWorkflowServiceClient(endpoint, credential);

            var data = new
            {
                comment = "<comment>",
            };

            Response response = client.CancelWorkflowRun(Guid.NewGuid(), RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CancelWorkflowRun_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewWorkflowServiceClient(endpoint, credential);

            var data = new { };

            Response response = await client.CancelWorkflowRunAsync(Guid.NewGuid(), RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CancelWorkflowRun_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewWorkflowServiceClient(endpoint, credential);

            var data = new
            {
                comment = "<comment>",
            };

            Response response = await client.CancelWorkflowRunAsync(Guid.NewGuid(), RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetWorkflowTask()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewWorkflowServiceClient(endpoint, credential);

            Response response = client.GetWorkflowTask(Guid.NewGuid());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("workflowRunId").ToString());
            Console.WriteLine(result.GetProperty("workflowId").ToString());
            Console.WriteLine(result.GetProperty("requestor").ToString());
            Console.WriteLine(result.GetProperty("createdTime").ToString());
            Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
            Console.WriteLine(result.GetProperty("payload").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("payload").GetProperty("targetValue").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetWorkflowTask_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewWorkflowServiceClient(endpoint, credential);

            Response response = client.GetWorkflowTask(Guid.NewGuid());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("title").ToString());
            Console.WriteLine(result.GetProperty("workflowRunId").ToString());
            Console.WriteLine(result.GetProperty("workflowId").ToString());
            Console.WriteLine(result.GetProperty("requestor").ToString());
            Console.WriteLine(result.GetProperty("createdTime").ToString());
            Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
            Console.WriteLine(result.GetProperty("payload").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("payload").GetProperty("targetValue").ToString());
            Console.WriteLine(result.GetProperty("payload").GetProperty("payload").ToString());
            Console.WriteLine(result.GetProperty("reminderInfo").GetProperty("lastRemindTime").ToString());
            Console.WriteLine(result.GetProperty("reminderInfo").GetProperty("nextRemindTime").ToString());
            Console.WriteLine(result.GetProperty("reminderInfo").GetProperty("reminderSettings").ToString());
            Console.WriteLine(result.GetProperty("expiryInfo").GetProperty("lastExpiryNotificationTime").ToString());
            Console.WriteLine(result.GetProperty("expiryInfo").GetProperty("nextExpiryNotificationTime").ToString());
            Console.WriteLine(result.GetProperty("expiryInfo").GetProperty("expiryTime").ToString());
            Console.WriteLine(result.GetProperty("expiryInfo").GetProperty("expirySettings").GetProperty("expireAfter").ToString());
            Console.WriteLine(result.GetProperty("expiryInfo").GetProperty("expirySettings").GetProperty("notifyOnExpiration")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetWorkflowTask_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewWorkflowServiceClient(endpoint, credential);

            Response response = await client.GetWorkflowTaskAsync(Guid.NewGuid());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("workflowRunId").ToString());
            Console.WriteLine(result.GetProperty("workflowId").ToString());
            Console.WriteLine(result.GetProperty("requestor").ToString());
            Console.WriteLine(result.GetProperty("createdTime").ToString());
            Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
            Console.WriteLine(result.GetProperty("payload").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("payload").GetProperty("targetValue").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetWorkflowTask_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewWorkflowServiceClient(endpoint, credential);

            Response response = await client.GetWorkflowTaskAsync(Guid.NewGuid());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("title").ToString());
            Console.WriteLine(result.GetProperty("workflowRunId").ToString());
            Console.WriteLine(result.GetProperty("workflowId").ToString());
            Console.WriteLine(result.GetProperty("requestor").ToString());
            Console.WriteLine(result.GetProperty("createdTime").ToString());
            Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
            Console.WriteLine(result.GetProperty("payload").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("payload").GetProperty("targetValue").ToString());
            Console.WriteLine(result.GetProperty("payload").GetProperty("payload").ToString());
            Console.WriteLine(result.GetProperty("reminderInfo").GetProperty("lastRemindTime").ToString());
            Console.WriteLine(result.GetProperty("reminderInfo").GetProperty("nextRemindTime").ToString());
            Console.WriteLine(result.GetProperty("reminderInfo").GetProperty("reminderSettings").ToString());
            Console.WriteLine(result.GetProperty("expiryInfo").GetProperty("lastExpiryNotificationTime").ToString());
            Console.WriteLine(result.GetProperty("expiryInfo").GetProperty("nextExpiryNotificationTime").ToString());
            Console.WriteLine(result.GetProperty("expiryInfo").GetProperty("expiryTime").ToString());
            Console.WriteLine(result.GetProperty("expiryInfo").GetProperty("expirySettings").GetProperty("expireAfter").ToString());
            Console.WriteLine(result.GetProperty("expiryInfo").GetProperty("expirySettings").GetProperty("notifyOnExpiration")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ApproveApprovalTask()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewWorkflowServiceClient(endpoint, credential);

            var data = new { };

            Response response = client.ApproveApprovalTask(Guid.NewGuid(), RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ApproveApprovalTask_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewWorkflowServiceClient(endpoint, credential);

            var data = new
            {
                comment = "<comment>",
            };

            Response response = client.ApproveApprovalTask(Guid.NewGuid(), RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ApproveApprovalTask_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewWorkflowServiceClient(endpoint, credential);

            var data = new { };

            Response response = await client.ApproveApprovalTaskAsync(Guid.NewGuid(), RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ApproveApprovalTask_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewWorkflowServiceClient(endpoint, credential);

            var data = new
            {
                comment = "<comment>",
            };

            Response response = await client.ApproveApprovalTaskAsync(Guid.NewGuid(), RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RejectApprovalTask()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewWorkflowServiceClient(endpoint, credential);

            var data = new { };

            Response response = client.RejectApprovalTask(Guid.NewGuid(), RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RejectApprovalTask_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewWorkflowServiceClient(endpoint, credential);

            var data = new
            {
                comment = "<comment>",
            };

            Response response = client.RejectApprovalTask(Guid.NewGuid(), RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RejectApprovalTask_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewWorkflowServiceClient(endpoint, credential);

            var data = new { };

            Response response = await client.RejectApprovalTaskAsync(Guid.NewGuid(), RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RejectApprovalTask_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewWorkflowServiceClient(endpoint, credential);

            var data = new
            {
                comment = "<comment>",
            };

            Response response = await client.RejectApprovalTaskAsync(Guid.NewGuid(), RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ReassignWorkflowTask()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewWorkflowServiceClient(endpoint, credential);

            var data = new { };

            Response response = client.ReassignWorkflowTask(Guid.NewGuid(), RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ReassignWorkflowTask_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewWorkflowServiceClient(endpoint, credential);

            var data = new
            {
                reassignments = new[] {
        new {
            reassignFrom = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
            reassignTo = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
        }
    },
            };

            Response response = client.ReassignWorkflowTask(Guid.NewGuid(), RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ReassignWorkflowTask_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewWorkflowServiceClient(endpoint, credential);

            var data = new { };

            Response response = await client.ReassignWorkflowTaskAsync(Guid.NewGuid(), RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ReassignWorkflowTask_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewWorkflowServiceClient(endpoint, credential);

            var data = new
            {
                reassignments = new[] {
        new {
            reassignFrom = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
            reassignTo = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
        }
    },
            };

            Response response = await client.ReassignWorkflowTaskAsync(Guid.NewGuid(), RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UpdateTaskStatus()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewWorkflowServiceClient(endpoint, credential);

            var data = new
            {
                newStatus = "NotStarted",
            };

            Response response = client.UpdateTaskStatus(Guid.NewGuid(), RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UpdateTaskStatus_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewWorkflowServiceClient(endpoint, credential);

            var data = new
            {
                newStatus = "NotStarted",
                comment = "<comment>",
            };

            Response response = client.UpdateTaskStatus(Guid.NewGuid(), RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UpdateTaskStatus_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewWorkflowServiceClient(endpoint, credential);

            var data = new
            {
                newStatus = "NotStarted",
            };

            Response response = await client.UpdateTaskStatusAsync(Guid.NewGuid(), RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UpdateTaskStatus_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewWorkflowServiceClient(endpoint, credential);

            var data = new
            {
                newStatus = "NotStarted",
                comment = "<comment>",
            };

            Response response = await client.UpdateTaskStatusAsync(Guid.NewGuid(), RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetWorkflows()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewWorkflowServiceClient(endpoint, credential);

            foreach (var item in client.GetWorkflows())
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("isEnabled").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetWorkflows_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewWorkflowServiceClient(endpoint, credential);

            foreach (var item in client.GetWorkflows())
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("underGlossaryHierarchy").ToString());
                Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("underCollection").ToString());
                Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("underGlossary").ToString());
                Console.WriteLine(result.GetProperty("createdTime").ToString());
                Console.WriteLine(result.GetProperty("createdBy").ToString());
                Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
                Console.WriteLine(result.GetProperty("updatedBy").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("isEnabled").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetWorkflows_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewWorkflowServiceClient(endpoint, credential);

            await foreach (var item in client.GetWorkflowsAsync())
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("isEnabled").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetWorkflows_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewWorkflowServiceClient(endpoint, credential);

            await foreach (var item in client.GetWorkflowsAsync())
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("underGlossaryHierarchy").ToString());
                Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("underCollection").ToString());
                Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("underGlossary").ToString());
                Console.WriteLine(result.GetProperty("createdTime").ToString());
                Console.WriteLine(result.GetProperty("createdBy").ToString());
                Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
                Console.WriteLine(result.GetProperty("updatedBy").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("isEnabled").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetWorkflowRuns()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewWorkflowServiceClient(endpoint, credential);

            foreach (var item in client.GetWorkflowRuns())
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("workflowId").ToString());
                Console.WriteLine(result.GetProperty("startTime").ToString());
                Console.WriteLine(result.GetProperty("requestor").ToString());
                Console.WriteLine(result.GetProperty("runPayload").GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("runPayload").GetProperty("targetValue").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetWorkflowRuns_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewWorkflowServiceClient(endpoint, credential);

            foreach (var item in client.GetWorkflowRuns("<timeWindow>", "<orderby>", new string[] { "<runStatuses>" }, new string[] { "<workflowIds>" }, 1234))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("workflowId").ToString());
                Console.WriteLine(result.GetProperty("startTime").ToString());
                Console.WriteLine(result.GetProperty("requestor").ToString());
                Console.WriteLine(result.GetProperty("userRequestId").ToString());
                Console.WriteLine(result.GetProperty("runPayload").GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("runPayload").GetProperty("targetValue").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("endTime").ToString());
                Console.WriteLine(result.GetProperty("cancelTime").ToString());
                Console.WriteLine(result.GetProperty("cancelComment").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetWorkflowRuns_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewWorkflowServiceClient(endpoint, credential);

            await foreach (var item in client.GetWorkflowRunsAsync())
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("workflowId").ToString());
                Console.WriteLine(result.GetProperty("startTime").ToString());
                Console.WriteLine(result.GetProperty("requestor").ToString());
                Console.WriteLine(result.GetProperty("runPayload").GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("runPayload").GetProperty("targetValue").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetWorkflowRuns_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewWorkflowServiceClient(endpoint, credential);

            await foreach (var item in client.GetWorkflowRunsAsync("<timeWindow>", "<orderby>", new string[] { "<runStatuses>" }, new string[] { "<workflowIds>" }, 1234))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("workflowId").ToString());
                Console.WriteLine(result.GetProperty("startTime").ToString());
                Console.WriteLine(result.GetProperty("requestor").ToString());
                Console.WriteLine(result.GetProperty("userRequestId").ToString());
                Console.WriteLine(result.GetProperty("runPayload").GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("runPayload").GetProperty("targetValue").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("endTime").ToString());
                Console.WriteLine(result.GetProperty("cancelTime").ToString());
                Console.WriteLine(result.GetProperty("cancelComment").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetWorkflowTasks()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewWorkflowServiceClient(endpoint, credential);

            foreach (var item in client.GetWorkflowTasks())
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("workflowRunId").ToString());
                Console.WriteLine(result.GetProperty("workflowId").ToString());
                Console.WriteLine(result.GetProperty("requestor").ToString());
                Console.WriteLine(result.GetProperty("createdTime").ToString());
                Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
                Console.WriteLine(result.GetProperty("payload").GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("payload").GetProperty("targetValue").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetWorkflowTasks_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewWorkflowServiceClient(endpoint, credential);

            foreach (var item in client.GetWorkflowTasks("<viewMode>", new string[] { "<workflowIds>" }, "<timeWindow>", 1234, "<orderby>", new string[] { "<taskTypes>" }, new string[] { "<taskStatuses>" }, "<workflowNameKeyword>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("title").ToString());
                Console.WriteLine(result.GetProperty("workflowRunId").ToString());
                Console.WriteLine(result.GetProperty("workflowId").ToString());
                Console.WriteLine(result.GetProperty("requestor").ToString());
                Console.WriteLine(result.GetProperty("createdTime").ToString());
                Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
                Console.WriteLine(result.GetProperty("payload").GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("payload").GetProperty("targetValue").ToString());
                Console.WriteLine(result.GetProperty("payload").GetProperty("payload").ToString());
                Console.WriteLine(result.GetProperty("reminderInfo").GetProperty("lastRemindTime").ToString());
                Console.WriteLine(result.GetProperty("reminderInfo").GetProperty("nextRemindTime").ToString());
                Console.WriteLine(result.GetProperty("reminderInfo").GetProperty("reminderSettings").ToString());
                Console.WriteLine(result.GetProperty("expiryInfo").GetProperty("lastExpiryNotificationTime").ToString());
                Console.WriteLine(result.GetProperty("expiryInfo").GetProperty("nextExpiryNotificationTime").ToString());
                Console.WriteLine(result.GetProperty("expiryInfo").GetProperty("expiryTime").ToString());
                Console.WriteLine(result.GetProperty("expiryInfo").GetProperty("expirySettings").GetProperty("expireAfter").ToString());
                Console.WriteLine(result.GetProperty("expiryInfo").GetProperty("expirySettings").GetProperty("notifyOnExpiration")[0].ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetWorkflowTasks_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewWorkflowServiceClient(endpoint, credential);

            await foreach (var item in client.GetWorkflowTasksAsync())
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("workflowRunId").ToString());
                Console.WriteLine(result.GetProperty("workflowId").ToString());
                Console.WriteLine(result.GetProperty("requestor").ToString());
                Console.WriteLine(result.GetProperty("createdTime").ToString());
                Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
                Console.WriteLine(result.GetProperty("payload").GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("payload").GetProperty("targetValue").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetWorkflowTasks_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewWorkflowServiceClient(endpoint, credential);

            await foreach (var item in client.GetWorkflowTasksAsync("<viewMode>", new string[] { "<workflowIds>" }, "<timeWindow>", 1234, "<orderby>", new string[] { "<taskTypes>" }, new string[] { "<taskStatuses>" }, "<workflowNameKeyword>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("title").ToString());
                Console.WriteLine(result.GetProperty("workflowRunId").ToString());
                Console.WriteLine(result.GetProperty("workflowId").ToString());
                Console.WriteLine(result.GetProperty("requestor").ToString());
                Console.WriteLine(result.GetProperty("createdTime").ToString());
                Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
                Console.WriteLine(result.GetProperty("payload").GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("payload").GetProperty("targetValue").ToString());
                Console.WriteLine(result.GetProperty("payload").GetProperty("payload").ToString());
                Console.WriteLine(result.GetProperty("reminderInfo").GetProperty("lastRemindTime").ToString());
                Console.WriteLine(result.GetProperty("reminderInfo").GetProperty("nextRemindTime").ToString());
                Console.WriteLine(result.GetProperty("reminderInfo").GetProperty("reminderSettings").ToString());
                Console.WriteLine(result.GetProperty("expiryInfo").GetProperty("lastExpiryNotificationTime").ToString());
                Console.WriteLine(result.GetProperty("expiryInfo").GetProperty("nextExpiryNotificationTime").ToString());
                Console.WriteLine(result.GetProperty("expiryInfo").GetProperty("expiryTime").ToString());
                Console.WriteLine(result.GetProperty("expiryInfo").GetProperty("expirySettings").GetProperty("expireAfter").ToString());
                Console.WriteLine(result.GetProperty("expiryInfo").GetProperty("expirySettings").GetProperty("notifyOnExpiration")[0].ToString());
            }
        }
    }
}
