<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="GetWorkflowAsync(Guid,RequestContext)">
<example>
This sample shows how to call GetWorkflowAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

Response response = await client.GetWorkflowAsync(Guid.NewGuid());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("actionDag").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("underGlossaryHierarchy").ToString());
Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("underCollection").ToString());
Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("underGlossary").ToString());
Console.WriteLine(result.GetProperty("createdTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
Console.WriteLine(result.GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("isEnabled").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
]]></code>
</example>
    </member>
    <member name="GetWorkflow(Guid,RequestContext)">
<example>
This sample shows how to call GetWorkflow with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

Response response = client.GetWorkflow(Guid.NewGuid());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("actionDag").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("underGlossaryHierarchy").ToString());
Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("underCollection").ToString());
Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("underGlossary").ToString());
Console.WriteLine(result.GetProperty("createdTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
Console.WriteLine(result.GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("isEnabled").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
]]></code>
</example>
    </member>
    <member name="CreateOrReplaceWorkflowAsync(Guid,RequestContent,RequestContext)">
<example>
This sample shows how to call CreateOrReplaceWorkflowAsync with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

var data = new {
    triggers = new[] {
        new {
            type = "when_term_creation_is_requested",
        }
    },
    name = "<name>",
    isEnabled = true,
    description = "<description>",
};

Response response = await client.CreateOrReplaceWorkflowAsync(Guid.NewGuid(), RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("actionDag").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("isEnabled").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
]]></code>
This sample shows how to call CreateOrReplaceWorkflowAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

var data = new {
    triggers = new[] {
        new {
            type = "when_term_creation_is_requested",
            underGlossaryHierarchy = "<underGlossaryHierarchy>",
            underCollection = "<underCollection>",
            underGlossary = "<underGlossary>",
        }
    },
    name = "<name>",
    isEnabled = true,
    description = "<description>",
    actionDag = new {},
};

Response response = await client.CreateOrReplaceWorkflowAsync(Guid.NewGuid(), RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("actionDag").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("underGlossaryHierarchy").ToString());
Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("underCollection").ToString());
Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("underGlossary").ToString());
Console.WriteLine(result.GetProperty("createdTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
Console.WriteLine(result.GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("isEnabled").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
]]></code>
</example>
    </member>
    <member name="CreateOrReplaceWorkflow(Guid,RequestContent,RequestContext)">
<example>
This sample shows how to call CreateOrReplaceWorkflow with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

var data = new {
    triggers = new[] {
        new {
            type = "when_term_creation_is_requested",
        }
    },
    name = "<name>",
    isEnabled = true,
    description = "<description>",
};

Response response = client.CreateOrReplaceWorkflow(Guid.NewGuid(), RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("actionDag").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("isEnabled").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
]]></code>
This sample shows how to call CreateOrReplaceWorkflow with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

var data = new {
    triggers = new[] {
        new {
            type = "when_term_creation_is_requested",
            underGlossaryHierarchy = "<underGlossaryHierarchy>",
            underCollection = "<underCollection>",
            underGlossary = "<underGlossary>",
        }
    },
    name = "<name>",
    isEnabled = true,
    description = "<description>",
    actionDag = new {},
};

Response response = client.CreateOrReplaceWorkflow(Guid.NewGuid(), RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("actionDag").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("underGlossaryHierarchy").ToString());
Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("underCollection").ToString());
Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("underGlossary").ToString());
Console.WriteLine(result.GetProperty("createdTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
Console.WriteLine(result.GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("isEnabled").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
]]></code>
</example>
    </member>
    <member name="DeleteWorkflowAsync(Guid,RequestContext)">
<example>
This sample shows how to call DeleteWorkflowAsync with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

Response response = await client.DeleteWorkflowAsync(Guid.NewGuid());
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="DeleteWorkflow(Guid,RequestContext)">
<example>
This sample shows how to call DeleteWorkflow with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

Response response = client.DeleteWorkflow(Guid.NewGuid());
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="SubmitUserRequestsAsync(RequestContent,RequestContext)">
<example>
This sample shows how to call SubmitUserRequestsAsync with required request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

var data = new {
    operations = new[] {
        new {
            type = "CreateTerm",
            payload = new {},
        }
    },
};

Response response = await client.SubmitUserRequestsAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("requestId").ToString());
Console.WriteLine(result.GetProperty("requestor").ToString());
Console.WriteLine(result.GetProperty("operations")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("operations")[0].GetProperty("payload").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
This sample shows how to call SubmitUserRequestsAsync with all request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

var data = new {
    operations = new[] {
        new {
            type = "CreateTerm",
            payload = new {},
        }
    },
    comment = "<comment>",
};

Response response = await client.SubmitUserRequestsAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("requestId").ToString());
Console.WriteLine(result.GetProperty("requestor").ToString());
Console.WriteLine(result.GetProperty("operations")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("operations")[0].GetProperty("payload").ToString());
Console.WriteLine(result.GetProperty("operations")[0].GetProperty("workflowRunIds")[0].ToString());
Console.WriteLine(result.GetProperty("comment").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
</example>
    </member>
    <member name="SubmitUserRequests(RequestContent,RequestContext)">
<example>
This sample shows how to call SubmitUserRequests with required request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

var data = new {
    operations = new[] {
        new {
            type = "CreateTerm",
            payload = new {},
        }
    },
};

Response response = client.SubmitUserRequests(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("requestId").ToString());
Console.WriteLine(result.GetProperty("requestor").ToString());
Console.WriteLine(result.GetProperty("operations")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("operations")[0].GetProperty("payload").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
This sample shows how to call SubmitUserRequests with all request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

var data = new {
    operations = new[] {
        new {
            type = "CreateTerm",
            payload = new {},
        }
    },
    comment = "<comment>",
};

Response response = client.SubmitUserRequests(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("requestId").ToString());
Console.WriteLine(result.GetProperty("requestor").ToString());
Console.WriteLine(result.GetProperty("operations")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("operations")[0].GetProperty("payload").ToString());
Console.WriteLine(result.GetProperty("operations")[0].GetProperty("workflowRunIds")[0].ToString());
Console.WriteLine(result.GetProperty("comment").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
</example>
    </member>
    <member name="GetWorkflowRunAsync(Guid,RequestContext)">
<example>
This sample shows how to call GetWorkflowRunAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

Response response = await client.GetWorkflowRunAsync(Guid.NewGuid());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("workflowId").ToString());
Console.WriteLine(result.GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("requestor").ToString());
Console.WriteLine(result.GetProperty("userRequestId").ToString());
Console.WriteLine(result.GetProperty("runPayload").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("runPayload").GetProperty("targetValue").ToString());
Console.WriteLine(result.GetProperty("runPayload").GetProperty("payload").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("cancelTime").ToString());
Console.WriteLine(result.GetProperty("cancelComment").ToString());
Console.WriteLine(result.GetProperty("actionDag").ToString());
Console.WriteLine(result.GetProperty("detail").GetProperty("runInput").ToString());
Console.WriteLine(result.GetProperty("detail").GetProperty("actions").ToString());
]]></code>
</example>
    </member>
    <member name="GetWorkflowRun(Guid,RequestContext)">
<example>
This sample shows how to call GetWorkflowRun with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

Response response = client.GetWorkflowRun(Guid.NewGuid());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("workflowId").ToString());
Console.WriteLine(result.GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("requestor").ToString());
Console.WriteLine(result.GetProperty("userRequestId").ToString());
Console.WriteLine(result.GetProperty("runPayload").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("runPayload").GetProperty("targetValue").ToString());
Console.WriteLine(result.GetProperty("runPayload").GetProperty("payload").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("cancelTime").ToString());
Console.WriteLine(result.GetProperty("cancelComment").ToString());
Console.WriteLine(result.GetProperty("actionDag").ToString());
Console.WriteLine(result.GetProperty("detail").GetProperty("runInput").ToString());
Console.WriteLine(result.GetProperty("detail").GetProperty("actions").ToString());
]]></code>
</example>
    </member>
    <member name="CancelWorkflowRunAsync(Guid,RequestContent,RequestContext)">
<example>
This sample shows how to call CancelWorkflowRunAsync with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

var data = new {};

Response response = await client.CancelWorkflowRunAsync(Guid.NewGuid(), RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call CancelWorkflowRunAsync with all parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

var data = new {
    comment = "<comment>",
};

Response response = await client.CancelWorkflowRunAsync(Guid.NewGuid(), RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="CancelWorkflowRun(Guid,RequestContent,RequestContext)">
<example>
This sample shows how to call CancelWorkflowRun with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

var data = new {};

Response response = client.CancelWorkflowRun(Guid.NewGuid(), RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call CancelWorkflowRun with all parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

var data = new {
    comment = "<comment>",
};

Response response = client.CancelWorkflowRun(Guid.NewGuid(), RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="GetWorkflowTaskAsync(Guid,RequestContext)">
<example>
This sample shows how to call GetWorkflowTaskAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

Response response = await client.GetWorkflowTaskAsync(Guid.NewGuid());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("title").ToString());
Console.WriteLine(result.GetProperty("workflowRunId").ToString());
Console.WriteLine(result.GetProperty("workflowId").ToString());
Console.WriteLine(result.GetProperty("requestor").ToString());
Console.WriteLine(result.GetProperty("createdTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
Console.WriteLine(result.GetProperty("payload").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("payload").GetProperty("targetValue").ToString());
Console.WriteLine(result.GetProperty("payload").GetProperty("payload").ToString());
Console.WriteLine(result.GetProperty("reminderInfo").GetProperty("lastRemindTime").ToString());
Console.WriteLine(result.GetProperty("reminderInfo").GetProperty("nextRemindTime").ToString());
Console.WriteLine(result.GetProperty("reminderInfo").GetProperty("reminderSettings").ToString());
Console.WriteLine(result.GetProperty("expiryInfo").GetProperty("lastExpiryNotificationTime").ToString());
Console.WriteLine(result.GetProperty("expiryInfo").GetProperty("nextExpiryNotificationTime").ToString());
Console.WriteLine(result.GetProperty("expiryInfo").GetProperty("expiryTime").ToString());
Console.WriteLine(result.GetProperty("expiryInfo").GetProperty("expirySettings").GetProperty("expireAfter").ToString());
Console.WriteLine(result.GetProperty("expiryInfo").GetProperty("expirySettings").GetProperty("notifyOnExpiration")[0].ToString());
]]></code>
</example>
    </member>
    <member name="GetWorkflowTask(Guid,RequestContext)">
<example>
This sample shows how to call GetWorkflowTask with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

Response response = client.GetWorkflowTask(Guid.NewGuid());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("title").ToString());
Console.WriteLine(result.GetProperty("workflowRunId").ToString());
Console.WriteLine(result.GetProperty("workflowId").ToString());
Console.WriteLine(result.GetProperty("requestor").ToString());
Console.WriteLine(result.GetProperty("createdTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
Console.WriteLine(result.GetProperty("payload").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("payload").GetProperty("targetValue").ToString());
Console.WriteLine(result.GetProperty("payload").GetProperty("payload").ToString());
Console.WriteLine(result.GetProperty("reminderInfo").GetProperty("lastRemindTime").ToString());
Console.WriteLine(result.GetProperty("reminderInfo").GetProperty("nextRemindTime").ToString());
Console.WriteLine(result.GetProperty("reminderInfo").GetProperty("reminderSettings").ToString());
Console.WriteLine(result.GetProperty("expiryInfo").GetProperty("lastExpiryNotificationTime").ToString());
Console.WriteLine(result.GetProperty("expiryInfo").GetProperty("nextExpiryNotificationTime").ToString());
Console.WriteLine(result.GetProperty("expiryInfo").GetProperty("expiryTime").ToString());
Console.WriteLine(result.GetProperty("expiryInfo").GetProperty("expirySettings").GetProperty("expireAfter").ToString());
Console.WriteLine(result.GetProperty("expiryInfo").GetProperty("expirySettings").GetProperty("notifyOnExpiration")[0].ToString());
]]></code>
</example>
    </member>
    <member name="ApproveApprovalTaskAsync(Guid,RequestContent,RequestContext)">
<example>
This sample shows how to call ApproveApprovalTaskAsync with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

var data = new {};

Response response = await client.ApproveApprovalTaskAsync(Guid.NewGuid(), RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call ApproveApprovalTaskAsync with all parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

var data = new {
    comment = "<comment>",
};

Response response = await client.ApproveApprovalTaskAsync(Guid.NewGuid(), RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="ApproveApprovalTask(Guid,RequestContent,RequestContext)">
<example>
This sample shows how to call ApproveApprovalTask with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

var data = new {};

Response response = client.ApproveApprovalTask(Guid.NewGuid(), RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call ApproveApprovalTask with all parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

var data = new {
    comment = "<comment>",
};

Response response = client.ApproveApprovalTask(Guid.NewGuid(), RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="RejectApprovalTaskAsync(Guid,RequestContent,RequestContext)">
<example>
This sample shows how to call RejectApprovalTaskAsync with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

var data = new {};

Response response = await client.RejectApprovalTaskAsync(Guid.NewGuid(), RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call RejectApprovalTaskAsync with all parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

var data = new {
    comment = "<comment>",
};

Response response = await client.RejectApprovalTaskAsync(Guid.NewGuid(), RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="RejectApprovalTask(Guid,RequestContent,RequestContext)">
<example>
This sample shows how to call RejectApprovalTask with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

var data = new {};

Response response = client.RejectApprovalTask(Guid.NewGuid(), RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call RejectApprovalTask with all parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

var data = new {
    comment = "<comment>",
};

Response response = client.RejectApprovalTask(Guid.NewGuid(), RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="ReassignWorkflowTaskAsync(Guid,RequestContent,RequestContext)">
<example>
This sample shows how to call ReassignWorkflowTaskAsync with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

var data = new {};

Response response = await client.ReassignWorkflowTaskAsync(Guid.NewGuid(), RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call ReassignWorkflowTaskAsync with all parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

var data = new {
    reassignments = new[] {
        new {
            reassignFrom = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
            reassignTo = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
        }
    },
};

Response response = await client.ReassignWorkflowTaskAsync(Guid.NewGuid(), RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="ReassignWorkflowTask(Guid,RequestContent,RequestContext)">
<example>
This sample shows how to call ReassignWorkflowTask with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

var data = new {};

Response response = client.ReassignWorkflowTask(Guid.NewGuid(), RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call ReassignWorkflowTask with all parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

var data = new {
    reassignments = new[] {
        new {
            reassignFrom = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
            reassignTo = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
        }
    },
};

Response response = client.ReassignWorkflowTask(Guid.NewGuid(), RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="UpdateTaskStatusAsync(Guid,RequestContent,RequestContext)">
<example>
This sample shows how to call UpdateTaskStatusAsync with required parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

var data = new {
    newStatus = "NotStarted",
};

Response response = await client.UpdateTaskStatusAsync(Guid.NewGuid(), RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call UpdateTaskStatusAsync with all parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

var data = new {
    newStatus = "NotStarted",
    comment = "<comment>",
};

Response response = await client.UpdateTaskStatusAsync(Guid.NewGuid(), RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="UpdateTaskStatus(Guid,RequestContent,RequestContext)">
<example>
This sample shows how to call UpdateTaskStatus with required parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

var data = new {
    newStatus = "NotStarted",
};

Response response = client.UpdateTaskStatus(Guid.NewGuid(), RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call UpdateTaskStatus with all parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

var data = new {
    newStatus = "NotStarted",
    comment = "<comment>",
};

Response response = client.UpdateTaskStatus(Guid.NewGuid(), RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="GetWorkflowsAsync(RequestContext)">
<example>
This sample shows how to call GetWorkflowsAsync and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

await foreach (var item in client.GetWorkflowsAsync())
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("underGlossaryHierarchy").ToString());
    Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("underCollection").ToString());
    Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("underGlossary").ToString());
    Console.WriteLine(result.GetProperty("createdTime").ToString());
    Console.WriteLine(result.GetProperty("createdBy").ToString());
    Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
    Console.WriteLine(result.GetProperty("updatedBy").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("isEnabled").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
}
]]></code>
</example>
    </member>
    <member name="GetWorkflows(RequestContext)">
<example>
This sample shows how to call GetWorkflows and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

foreach (var item in client.GetWorkflows())
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("underGlossaryHierarchy").ToString());
    Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("underCollection").ToString());
    Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("underGlossary").ToString());
    Console.WriteLine(result.GetProperty("createdTime").ToString());
    Console.WriteLine(result.GetProperty("createdBy").ToString());
    Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
    Console.WriteLine(result.GetProperty("updatedBy").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("isEnabled").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
}
]]></code>
</example>
    </member>
    <member name="GetWorkflowRunsAsync(string,string,IEnumerable{string},IEnumerable{string},int?,RequestContext)">
<example>
This sample shows how to call GetWorkflowRunsAsync and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

await foreach (var item in client.GetWorkflowRunsAsync())
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("workflowId").ToString());
    Console.WriteLine(result.GetProperty("startTime").ToString());
    Console.WriteLine(result.GetProperty("requestor").ToString());
    Console.WriteLine(result.GetProperty("runPayload").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("runPayload").GetProperty("targetValue").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
}
]]></code>
This sample shows how to call GetWorkflowRunsAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

await foreach (var item in client.GetWorkflowRunsAsync("<timeWindow>", "<orderby>", new String[]{"<runStatuses>"}, new String[]{"<workflowIds>"}, 1234))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("workflowId").ToString());
    Console.WriteLine(result.GetProperty("startTime").ToString());
    Console.WriteLine(result.GetProperty("requestor").ToString());
    Console.WriteLine(result.GetProperty("userRequestId").ToString());
    Console.WriteLine(result.GetProperty("runPayload").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("runPayload").GetProperty("targetValue").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("endTime").ToString());
    Console.WriteLine(result.GetProperty("cancelTime").ToString());
    Console.WriteLine(result.GetProperty("cancelComment").ToString());
}
]]></code>
</example>
    </member>
    <member name="GetWorkflowRuns(string,string,IEnumerable{string},IEnumerable{string},int?,RequestContext)">
<example>
This sample shows how to call GetWorkflowRuns and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

foreach (var item in client.GetWorkflowRuns())
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("workflowId").ToString());
    Console.WriteLine(result.GetProperty("startTime").ToString());
    Console.WriteLine(result.GetProperty("requestor").ToString());
    Console.WriteLine(result.GetProperty("runPayload").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("runPayload").GetProperty("targetValue").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
}
]]></code>
This sample shows how to call GetWorkflowRuns with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

foreach (var item in client.GetWorkflowRuns("<timeWindow>", "<orderby>", new String[]{"<runStatuses>"}, new String[]{"<workflowIds>"}, 1234))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("workflowId").ToString());
    Console.WriteLine(result.GetProperty("startTime").ToString());
    Console.WriteLine(result.GetProperty("requestor").ToString());
    Console.WriteLine(result.GetProperty("userRequestId").ToString());
    Console.WriteLine(result.GetProperty("runPayload").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("runPayload").GetProperty("targetValue").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("endTime").ToString());
    Console.WriteLine(result.GetProperty("cancelTime").ToString());
    Console.WriteLine(result.GetProperty("cancelComment").ToString());
}
]]></code>
</example>
    </member>
    <member name="GetWorkflowTasksAsync(string,IEnumerable{string},string,int?,string,IEnumerable{string},IEnumerable{string},string,RequestContext)">
<example>
This sample shows how to call GetWorkflowTasksAsync and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

await foreach (var item in client.GetWorkflowTasksAsync())
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("workflowRunId").ToString());
    Console.WriteLine(result.GetProperty("workflowId").ToString());
    Console.WriteLine(result.GetProperty("requestor").ToString());
    Console.WriteLine(result.GetProperty("createdTime").ToString());
    Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
    Console.WriteLine(result.GetProperty("payload").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("payload").GetProperty("targetValue").ToString());
}
]]></code>
This sample shows how to call GetWorkflowTasksAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

await foreach (var item in client.GetWorkflowTasksAsync("<viewMode>", new String[]{"<workflowIds>"}, "<timeWindow>", 1234, "<orderby>", new String[]{"<taskTypes>"}, new String[]{"<taskStatuses>"}, "<workflowNameKeyword>"))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("title").ToString());
    Console.WriteLine(result.GetProperty("workflowRunId").ToString());
    Console.WriteLine(result.GetProperty("workflowId").ToString());
    Console.WriteLine(result.GetProperty("requestor").ToString());
    Console.WriteLine(result.GetProperty("createdTime").ToString());
    Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
    Console.WriteLine(result.GetProperty("payload").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("payload").GetProperty("targetValue").ToString());
    Console.WriteLine(result.GetProperty("payload").GetProperty("payload").ToString());
    Console.WriteLine(result.GetProperty("reminderInfo").GetProperty("lastRemindTime").ToString());
    Console.WriteLine(result.GetProperty("reminderInfo").GetProperty("nextRemindTime").ToString());
    Console.WriteLine(result.GetProperty("reminderInfo").GetProperty("reminderSettings").ToString());
    Console.WriteLine(result.GetProperty("expiryInfo").GetProperty("lastExpiryNotificationTime").ToString());
    Console.WriteLine(result.GetProperty("expiryInfo").GetProperty("nextExpiryNotificationTime").ToString());
    Console.WriteLine(result.GetProperty("expiryInfo").GetProperty("expiryTime").ToString());
    Console.WriteLine(result.GetProperty("expiryInfo").GetProperty("expirySettings").GetProperty("expireAfter").ToString());
    Console.WriteLine(result.GetProperty("expiryInfo").GetProperty("expirySettings").GetProperty("notifyOnExpiration")[0].ToString());
}
]]></code>
</example>
    </member>
    <member name="GetWorkflowTasks(string,IEnumerable{string},string,int?,string,IEnumerable{string},IEnumerable{string},string,RequestContext)">
<example>
This sample shows how to call GetWorkflowTasks and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

foreach (var item in client.GetWorkflowTasks())
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("workflowRunId").ToString());
    Console.WriteLine(result.GetProperty("workflowId").ToString());
    Console.WriteLine(result.GetProperty("requestor").ToString());
    Console.WriteLine(result.GetProperty("createdTime").ToString());
    Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
    Console.WriteLine(result.GetProperty("payload").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("payload").GetProperty("targetValue").ToString());
}
]]></code>
This sample shows how to call GetWorkflowTasks with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

foreach (var item in client.GetWorkflowTasks("<viewMode>", new String[]{"<workflowIds>"}, "<timeWindow>", 1234, "<orderby>", new String[]{"<taskTypes>"}, new String[]{"<taskStatuses>"}, "<workflowNameKeyword>"))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("title").ToString());
    Console.WriteLine(result.GetProperty("workflowRunId").ToString());
    Console.WriteLine(result.GetProperty("workflowId").ToString());
    Console.WriteLine(result.GetProperty("requestor").ToString());
    Console.WriteLine(result.GetProperty("createdTime").ToString());
    Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
    Console.WriteLine(result.GetProperty("payload").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("payload").GetProperty("targetValue").ToString());
    Console.WriteLine(result.GetProperty("payload").GetProperty("payload").ToString());
    Console.WriteLine(result.GetProperty("reminderInfo").GetProperty("lastRemindTime").ToString());
    Console.WriteLine(result.GetProperty("reminderInfo").GetProperty("nextRemindTime").ToString());
    Console.WriteLine(result.GetProperty("reminderInfo").GetProperty("reminderSettings").ToString());
    Console.WriteLine(result.GetProperty("expiryInfo").GetProperty("lastExpiryNotificationTime").ToString());
    Console.WriteLine(result.GetProperty("expiryInfo").GetProperty("nextExpiryNotificationTime").ToString());
    Console.WriteLine(result.GetProperty("expiryInfo").GetProperty("expiryTime").ToString());
    Console.WriteLine(result.GetProperty("expiryInfo").GetProperty("expirySettings").GetProperty("expireAfter").ToString());
    Console.WriteLine(result.GetProperty("expiryInfo").GetProperty("expirySettings").GetProperty("notifyOnExpiration")[0].ToString());
}
]]></code>
</example>
    </member>
  </members>
</doc>