<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="GetWorkflowAsync(Guid,RequestContext)">
      <example>
This sample shows how to call GetWorkflowAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
WorkflowClient client = new WorkflowClient(endpoint, credential);

Response response = await client.GetWorkflowAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("actionDag").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("isEnabled").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
]]></code>
This sample shows how to call GetWorkflowAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
WorkflowClient client = new WorkflowClient(endpoint, credential);

Response response = await client.GetWorkflowAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("actionDag").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("underGlossaryHierarchy").ToString());
Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("underCollection").ToString());
Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("underGlossary").ToString());
Console.WriteLine(result.GetProperty("createdTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
Console.WriteLine(result.GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("isEnabled").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
]]></code></example>
    </member>
    <member name="GetWorkflow(Guid,RequestContext)">
      <example>
This sample shows how to call GetWorkflow and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
WorkflowClient client = new WorkflowClient(endpoint, credential);

Response response = client.GetWorkflow(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("actionDag").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("isEnabled").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
]]></code>
This sample shows how to call GetWorkflow with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
WorkflowClient client = new WorkflowClient(endpoint, credential);

Response response = client.GetWorkflow(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("actionDag").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("underGlossaryHierarchy").ToString());
Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("underCollection").ToString());
Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("underGlossary").ToString());
Console.WriteLine(result.GetProperty("createdTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
Console.WriteLine(result.GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("isEnabled").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
]]></code></example>
    </member>
    <member name="CreateOrReplaceAsync(Guid,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateOrReplaceAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
WorkflowClient client = new WorkflowClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    triggers = new object[]
    {
        new
        {
            type = "when_term_creation_is_requested",
        }
    },
    name = "<name>",
    isEnabled = true,
    description = "<description>",
});
Response response = await client.CreateOrReplaceAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("actionDag").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("isEnabled").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
]]></code>
This sample shows how to call CreateOrReplaceAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
WorkflowClient client = new WorkflowClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    triggers = new object[]
    {
        new
        {
            type = "when_term_creation_is_requested",
            underGlossaryHierarchy = "<underGlossaryHierarchy>",
            underCollection = "<underCollection>",
            underGlossary = "<underGlossary>",
        }
    },
    name = "<name>",
    isEnabled = true,
    description = "<description>",
    actionDag = new object(),
});
Response response = await client.CreateOrReplaceAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("actionDag").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("underGlossaryHierarchy").ToString());
Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("underCollection").ToString());
Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("underGlossary").ToString());
Console.WriteLine(result.GetProperty("createdTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
Console.WriteLine(result.GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("isEnabled").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
]]></code></example>
    </member>
    <member name="CreateOrReplace(Guid,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateOrReplace and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
WorkflowClient client = new WorkflowClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    triggers = new object[]
    {
        new
        {
            type = "when_term_creation_is_requested",
        }
    },
    name = "<name>",
    isEnabled = true,
    description = "<description>",
});
Response response = client.CreateOrReplace(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("actionDag").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("isEnabled").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
]]></code>
This sample shows how to call CreateOrReplace with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
WorkflowClient client = new WorkflowClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    triggers = new object[]
    {
        new
        {
            type = "when_term_creation_is_requested",
            underGlossaryHierarchy = "<underGlossaryHierarchy>",
            underCollection = "<underCollection>",
            underGlossary = "<underGlossary>",
        }
    },
    name = "<name>",
    isEnabled = true,
    description = "<description>",
    actionDag = new object(),
});
Response response = client.CreateOrReplace(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("actionDag").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("underGlossaryHierarchy").ToString());
Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("underCollection").ToString());
Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("underGlossary").ToString());
Console.WriteLine(result.GetProperty("createdTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
Console.WriteLine(result.GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("isEnabled").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
]]></code></example>
    </member>
    <member name="DeleteAsync(Guid,RequestContext)">
      <example>
This sample shows how to call DeleteAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
WorkflowClient client = new WorkflowClient(endpoint, credential);

Response response = await client.DeleteAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
WorkflowClient client = new WorkflowClient(endpoint, credential);

Response response = await client.DeleteAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="Delete(Guid,RequestContext)">
      <example>
This sample shows how to call Delete.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
WorkflowClient client = new WorkflowClient(endpoint, credential);

Response response = client.Delete(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call Delete with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
WorkflowClient client = new WorkflowClient(endpoint, credential);

Response response = client.Delete(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="ValidateAsync(Guid,RequestContent,RequestContext)">
      <example>
This sample shows how to call ValidateAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
WorkflowClient client = new WorkflowClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    triggers = new object[]
    {
        new
        {
            type = "when_term_creation_is_requested",
        }
    },
    name = "<name>",
    isEnabled = true,
    description = "<description>",
});
Response response = await client.ValidateAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("severity").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("location").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("message").ToString());
]]></code>
This sample shows how to call ValidateAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
WorkflowClient client = new WorkflowClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    triggers = new object[]
    {
        new
        {
            type = "when_term_creation_is_requested",
            underGlossaryHierarchy = "<underGlossaryHierarchy>",
            underCollection = "<underCollection>",
            underGlossary = "<underGlossary>",
        }
    },
    name = "<name>",
    isEnabled = true,
    description = "<description>",
    actionDag = new object(),
});
Response response = await client.ValidateAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("severity").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("location").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("location").GetProperty("actionName").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("location").GetProperty("parameterKey").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("message").ToString());
]]></code></example>
    </member>
    <member name="Validate(Guid,RequestContent,RequestContext)">
      <example>
This sample shows how to call Validate and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
WorkflowClient client = new WorkflowClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    triggers = new object[]
    {
        new
        {
            type = "when_term_creation_is_requested",
        }
    },
    name = "<name>",
    isEnabled = true,
    description = "<description>",
});
Response response = client.Validate(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("severity").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("location").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("message").ToString());
]]></code>
This sample shows how to call Validate with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
WorkflowClient client = new WorkflowClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    triggers = new object[]
    {
        new
        {
            type = "when_term_creation_is_requested",
            underGlossaryHierarchy = "<underGlossaryHierarchy>",
            underCollection = "<underCollection>",
            underGlossary = "<underGlossary>",
        }
    },
    name = "<name>",
    isEnabled = true,
    description = "<description>",
    actionDag = new object(),
});
Response response = client.Validate(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("severity").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("location").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("location").GetProperty("actionName").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("location").GetProperty("parameterKey").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("message").ToString());
]]></code></example>
    </member>
  </members>
</doc>