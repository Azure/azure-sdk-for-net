// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Purview.Models;

namespace Azure.ResourceManager.Purview
{
    public partial class KafkaConfigurationData : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(ConsumerGroup))
            {
                writer.WritePropertyName("consumerGroup"u8);
                writer.WriteStringValue(ConsumerGroup);
            }
            if (Optional.IsDefined(Credentials))
            {
                writer.WritePropertyName("credentials"u8);
                writer.WriteObjectValue(Credentials);
            }
            if (Optional.IsDefined(EventHubPartitionId))
            {
                writer.WritePropertyName("eventHubPartitionId"u8);
                writer.WriteStringValue(EventHubPartitionId);
            }
            if (Optional.IsDefined(EventHubResourceId))
            {
                writer.WritePropertyName("eventHubResourceId"u8);
                writer.WriteStringValue(EventHubResourceId);
            }
            if (Optional.IsDefined(EventHubType))
            {
                writer.WritePropertyName("eventHubType"u8);
                writer.WriteStringValue(EventHubType.Value.ToString());
            }
            if (Optional.IsDefined(EventStreamingState))
            {
                writer.WritePropertyName("eventStreamingState"u8);
                writer.WriteStringValue(EventStreamingState.Value.ToString());
            }
            if (Optional.IsDefined(EventStreamingType))
            {
                writer.WritePropertyName("eventStreamingType"u8);
                writer.WriteStringValue(EventStreamingType.Value.ToString());
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static KafkaConfigurationData DeserializeKafkaConfigurationData(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<SystemData> systemData = default;
            Optional<string> consumerGroup = default;
            Optional<Credentials> credentials = default;
            Optional<string> eventHubPartitionId = default;
            Optional<ResourceIdentifier> eventHubResourceId = default;
            Optional<EventHubType> eventHubType = default;
            Optional<EventStreamingState> eventStreamingState = default;
            Optional<EventStreamingType> eventStreamingType = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("consumerGroup"u8))
                        {
                            consumerGroup = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("credentials"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            credentials = Credentials.DeserializeCredentials(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("eventHubPartitionId"u8))
                        {
                            eventHubPartitionId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("eventHubResourceId"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            eventHubResourceId = new ResourceIdentifier(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("eventHubType"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            eventHubType = new EventHubType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("eventStreamingState"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            eventStreamingState = new EventStreamingState(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("eventStreamingType"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            eventStreamingType = new EventStreamingType(property0.Value.GetString());
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new KafkaConfigurationData(id, name, type, systemData.Value, consumerGroup.Value, credentials.Value, eventHubPartitionId.Value, eventHubResourceId.Value, Optional.ToNullable(eventHubType), Optional.ToNullable(eventStreamingState), Optional.ToNullable(eventStreamingType));
        }
    }
}
