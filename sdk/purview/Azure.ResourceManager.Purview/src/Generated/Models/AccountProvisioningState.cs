// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Purview.Models
{
    /// <summary> Gets the account status code. </summary>
    public readonly partial struct AccountProvisioningState : IEquatable<AccountProvisioningState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AccountProvisioningState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AccountProvisioningState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UnknownValue = "Unknown";
        private const string CreatingValue = "Creating";
        private const string UpdatingValue = "Updating";
        private const string MovingValue = "Moving";
        private const string DeletingValue = "Deleting";
        private const string SoftDeletingValue = "SoftDeleting";
        private const string SoftDeletedValue = "SoftDeleted";
        private const string FailedValue = "Failed";
        private const string SucceededValue = "Succeeded";
        private const string CanceledValue = "Canceled";

        /// <summary> Unknown. </summary>
        public static AccountProvisioningState Unknown { get; } = new AccountProvisioningState(UnknownValue);
        /// <summary> Creating. </summary>
        public static AccountProvisioningState Creating { get; } = new AccountProvisioningState(CreatingValue);
        /// <summary> Updating. </summary>
        public static AccountProvisioningState Updating { get; } = new AccountProvisioningState(UpdatingValue);
        /// <summary> Moving. </summary>
        public static AccountProvisioningState Moving { get; } = new AccountProvisioningState(MovingValue);
        /// <summary> Deleting. </summary>
        public static AccountProvisioningState Deleting { get; } = new AccountProvisioningState(DeletingValue);
        /// <summary> SoftDeleting. </summary>
        public static AccountProvisioningState SoftDeleting { get; } = new AccountProvisioningState(SoftDeletingValue);
        /// <summary> SoftDeleted. </summary>
        public static AccountProvisioningState SoftDeleted { get; } = new AccountProvisioningState(SoftDeletedValue);
        /// <summary> Failed. </summary>
        public static AccountProvisioningState Failed { get; } = new AccountProvisioningState(FailedValue);
        /// <summary> Succeeded. </summary>
        public static AccountProvisioningState Succeeded { get; } = new AccountProvisioningState(SucceededValue);
        /// <summary> Canceled. </summary>
        public static AccountProvisioningState Canceled { get; } = new AccountProvisioningState(CanceledValue);
        /// <summary> Determines if two <see cref="AccountProvisioningState"/> values are the same. </summary>
        public static bool operator ==(AccountProvisioningState left, AccountProvisioningState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AccountProvisioningState"/> values are not the same. </summary>
        public static bool operator !=(AccountProvisioningState left, AccountProvisioningState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="AccountProvisioningState"/>. </summary>
        public static implicit operator AccountProvisioningState(string value) => new AccountProvisioningState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AccountProvisioningState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AccountProvisioningState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
