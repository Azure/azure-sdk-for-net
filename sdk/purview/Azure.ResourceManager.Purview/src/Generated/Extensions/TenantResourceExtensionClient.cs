// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Purview.Models;

namespace Azure.ResourceManager.Purview
{
    /// <summary> A class to add extension methods to TenantResource. </summary>
    internal partial class TenantResourceExtensionClient : ArmResource
    {
        private ClientDiagnostics _defaultAccountsClientDiagnostics;
        private DefaultAccountsRestOperations _defaultAccountsRestClient;

        /// <summary> Initializes a new instance of the <see cref="TenantResourceExtensionClient"/> class for mocking. </summary>
        protected TenantResourceExtensionClient()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="TenantResourceExtensionClient"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal TenantResourceExtensionClient(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics DefaultAccountsClientDiagnostics => _defaultAccountsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Purview", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private DefaultAccountsRestOperations DefaultAccountsRestClient => _defaultAccountsRestClient ??= new DefaultAccountsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary>
        /// Get the default account for the scope.
        /// Request Path: /providers/Microsoft.Purview/getDefaultAccount
        /// Operation Id: DefaultAccounts_Get
        /// </summary>
        /// <param name="options"> A property bag which contains all the parameters of this method except the LRO qualifier and request context parameter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<DefaultPurviewAccountPayload>> GetDefaultAccountAsync(PurviewExtensionsGetDefaultAccountOptions options, CancellationToken cancellationToken = default)
        {
            using var scope = DefaultAccountsClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetDefaultAccount");
            scope.Start();
            try
            {
                var response = await DefaultAccountsRestClient.GetAsync(options.ScopeTenantId, options.ScopeType, options.Scope, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get the default account for the scope.
        /// Request Path: /providers/Microsoft.Purview/getDefaultAccount
        /// Operation Id: DefaultAccounts_Get
        /// </summary>
        /// <param name="options"> A property bag which contains all the parameters of this method except the LRO qualifier and request context parameter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<DefaultPurviewAccountPayload> GetDefaultAccount(PurviewExtensionsGetDefaultAccountOptions options, CancellationToken cancellationToken = default)
        {
            using var scope = DefaultAccountsClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetDefaultAccount");
            scope.Start();
            try
            {
                var response = DefaultAccountsRestClient.Get(options.ScopeTenantId, options.ScopeType, options.Scope, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Sets the default account for the scope.
        /// Request Path: /providers/Microsoft.Purview/setDefaultAccount
        /// Operation Id: DefaultAccounts_Set
        /// </summary>
        /// <param name="defaultAccountPayload"> The payload containing the default account information and the scope. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<DefaultPurviewAccountPayload>> SetDefaultAccountAsync(DefaultPurviewAccountPayload defaultAccountPayload, CancellationToken cancellationToken = default)
        {
            using var scope = DefaultAccountsClientDiagnostics.CreateScope("TenantResourceExtensionClient.SetDefaultAccount");
            scope.Start();
            try
            {
                var response = await DefaultAccountsRestClient.SetAsync(defaultAccountPayload, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Sets the default account for the scope.
        /// Request Path: /providers/Microsoft.Purview/setDefaultAccount
        /// Operation Id: DefaultAccounts_Set
        /// </summary>
        /// <param name="defaultAccountPayload"> The payload containing the default account information and the scope. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<DefaultPurviewAccountPayload> SetDefaultAccount(DefaultPurviewAccountPayload defaultAccountPayload, CancellationToken cancellationToken = default)
        {
            using var scope = DefaultAccountsClientDiagnostics.CreateScope("TenantResourceExtensionClient.SetDefaultAccount");
            scope.Start();
            try
            {
                var response = DefaultAccountsRestClient.Set(defaultAccountPayload, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Removes the default account from the scope.
        /// Request Path: /providers/Microsoft.Purview/removeDefaultAccount
        /// Operation Id: DefaultAccounts_Remove
        /// </summary>
        /// <param name="options"> A property bag which contains all the parameters of this method except the LRO qualifier and request context parameter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> RemoveDefaultAccountAsync(PurviewExtensionsRemoveDefaultAccountOptions options, CancellationToken cancellationToken = default)
        {
            using var scope = DefaultAccountsClientDiagnostics.CreateScope("TenantResourceExtensionClient.RemoveDefaultAccount");
            scope.Start();
            try
            {
                var response = await DefaultAccountsRestClient.RemoveAsync(options.ScopeTenantId, options.ScopeType, options.Scope, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Removes the default account from the scope.
        /// Request Path: /providers/Microsoft.Purview/removeDefaultAccount
        /// Operation Id: DefaultAccounts_Remove
        /// </summary>
        /// <param name="options"> A property bag which contains all the parameters of this method except the LRO qualifier and request context parameter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response RemoveDefaultAccount(PurviewExtensionsRemoveDefaultAccountOptions options, CancellationToken cancellationToken = default)
        {
            using var scope = DefaultAccountsClientDiagnostics.CreateScope("TenantResourceExtensionClient.RemoveDefaultAccount");
            scope.Start();
            try
            {
                var response = DefaultAccountsRestClient.Remove(options.ScopeTenantId, options.ScopeType, options.Scope, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
