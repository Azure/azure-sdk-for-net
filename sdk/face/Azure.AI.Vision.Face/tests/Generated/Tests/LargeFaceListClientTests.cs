// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.Vision.Face.Tests
{
    public partial class LargeFaceListClientTests : AIVisionFaceTestBase
    {
        public LargeFaceListClientTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task LargeFaceList_Create_CreateLargeFaceList()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = CreateFaceAdministrationClient(endpoint, credential).GetLargeFaceListClient("your_large_face_list_id");

            using RequestContent content = RequestContent.Create(new
            {
                name = "your_large_face_list_name",
                userData = "your_user_data",
                recognitionModel = "recognition_01",
            });
            Response response = await client.CreateAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task LargeFaceList_Create_CreateLargeFaceList_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = CreateFaceAdministrationClient(endpoint, credential).GetLargeFaceListClient("your_large_face_list_id");

            Response response = await client.CreateAsync("your_large_face_list_name");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task LargeFaceList_Delete_DeleteLargeFaceList()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = CreateFaceAdministrationClient(endpoint, credential).GetLargeFaceListClient("your_large_face_list_id");

            Response response = await client.DeleteAsync();
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task LargeFaceList_GetLargeFaceList_GetLargeFaceList()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = CreateFaceAdministrationClient(endpoint, credential).GetLargeFaceListClient("your_large_face_list_id");

            Response response = await client.GetLargeFaceListAsync(true, null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task LargeFaceList_GetLargeFaceList_GetLargeFaceList_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = CreateFaceAdministrationClient(endpoint, credential).GetLargeFaceListClient("your_large_face_list_id");

            Response<LargeFaceList> response = await client.GetLargeFaceListAsync();
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task LargeFaceList_Update_UpdateLargeFaceList()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = CreateFaceAdministrationClient(endpoint, credential).GetLargeFaceListClient("your_large_face_list_id");

            using RequestContent content = RequestContent.Create(new
            {
                name = "your_large_face_list_name",
                userData = "your_user_data",
            });
            Response response = await client.UpdateAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task LargeFaceList_GetLargeFaceLists_GetLargeFaceLists()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = CreateFaceAdministrationClient(endpoint, credential).GetLargeFaceListClient(null);

            Response response = await client.GetLargeFaceListsAsync("my_list_id", 20, true, null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task LargeFaceList_GetLargeFaceLists_GetLargeFaceLists_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = CreateFaceAdministrationClient(endpoint, credential).GetLargeFaceListClient(null);

            Response<IReadOnlyList<LargeFaceList>> response = await client.GetLargeFaceListsAsync();
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task LargeFaceList_GetTrainingStatus_GetTrainingStatusOfLargeFaceList()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = CreateFaceAdministrationClient(endpoint, credential).GetLargeFaceListClient("your_large_face_list_id");

            Response response = await client.GetTrainingStatusAsync(null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task LargeFaceList_GetTrainingStatus_GetTrainingStatusOfLargeFaceList_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = CreateFaceAdministrationClient(endpoint, credential).GetLargeFaceListClient("your_large_face_list_id");

            Response<FaceTrainingResult> response = await client.GetTrainingStatusAsync();
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task LargeFaceListFace_DeleteFace_DeleteFaceFromLargeFaceList()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = CreateFaceAdministrationClient(endpoint, credential).GetLargeFaceListClient("your_large_face_list_id");

            Response response = await client.DeleteFaceAsync(Guid.Parse("43897a75-8d6f-42cf-885e-74832febb055"));
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task LargeFaceListFace_GetFace_GetFaceFromLargeFaceList()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = CreateFaceAdministrationClient(endpoint, credential).GetLargeFaceListClient("your_large_face_list_id");

            Response response = await client.GetFaceAsync(Guid.Parse("43897a75-8d6f-42cf-885e-74832febb055"), null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task LargeFaceListFace_GetFace_GetFaceFromLargeFaceList_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = CreateFaceAdministrationClient(endpoint, credential).GetLargeFaceListClient("your_large_face_list_id");

            Response<LargeFaceListFace> response = await client.GetFaceAsync(Guid.Parse("43897a75-8d6f-42cf-885e-74832febb055"));
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task LargeFaceListFace_UpdateFace_UpdateFaceInLargeFaceList()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = CreateFaceAdministrationClient(endpoint, credential).GetLargeFaceListClient("your_large_face_list_id");

            using RequestContent content = RequestContent.Create(new
            {
                userData = "your_user_data",
            });
            Response response = await client.UpdateFaceAsync(Guid.Parse("43897a75-8d6f-42cf-885e-74832febb055"), content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task LargeFaceListFace_GetFaces_GetFacesFromLargeFaceList()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = CreateFaceAdministrationClient(endpoint, credential).GetLargeFaceListClient("your_large_face_list_id");

            Response response = await client.GetFacesAsync("00000000-0000-0000-0000-000000000000", 20, null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task LargeFaceListFace_GetFaces_GetFacesFromLargeFaceList_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = CreateFaceAdministrationClient(endpoint, credential).GetLargeFaceListClient("your_large_face_list_id");

            Response<IReadOnlyList<LargeFaceListFace>> response = await client.GetFacesAsync();
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task LargeFaceList_Train_TrainLargeFaceList()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = CreateFaceAdministrationClient(endpoint, credential).GetLargeFaceListClient("your_large_face_list_id");

            Operation operation = await client.TrainAsync(WaitUntil.Completed);
        }
    }
}
