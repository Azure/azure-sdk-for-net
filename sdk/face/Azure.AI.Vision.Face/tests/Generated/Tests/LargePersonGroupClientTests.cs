// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.Vision.Face.Tests
{
    public partial class LargePersonGroupClientTests : AIVisionFaceTestBase
    {
        public LargePersonGroupClientTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task LargePersonGroup_Create_CreateLargePersonGroup()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = CreateFaceAdministrationClient(endpoint, credential).GetLargePersonGroupClient("your_large_person_group_id");

            using RequestContent content = RequestContent.Create(new
            {
                name = "your_large_person_group_name",
                userData = "your_user_data",
                recognitionModel = "recognition_01",
            });
            Response response = await client.CreateAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task LargePersonGroup_Create_CreateLargePersonGroup_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = CreateFaceAdministrationClient(endpoint, credential).GetLargePersonGroupClient("your_large_person_group_id");

            Response response = await client.CreateAsync("your_large_person_group_name");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task LargePersonGroup_Delete_DeleteLargePersonGroup()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = CreateFaceAdministrationClient(endpoint, credential).GetLargePersonGroupClient("your_large_person_group_id");

            Response response = await client.DeleteAsync();
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task LargePersonGroup_GetLargePersonGroup_GetLargePersonGroup()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = CreateFaceAdministrationClient(endpoint, credential).GetLargePersonGroupClient("your_large_person_group_id");

            Response response = await client.GetLargePersonGroupAsync(true, null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task LargePersonGroup_GetLargePersonGroup_GetLargePersonGroup_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = CreateFaceAdministrationClient(endpoint, credential).GetLargePersonGroupClient("your_large_person_group_id");

            Response<LargePersonGroup> response = await client.GetLargePersonGroupAsync();
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task LargePersonGroup_Update_UpdateLargePersonGroup()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = CreateFaceAdministrationClient(endpoint, credential).GetLargePersonGroupClient("your_large_person_group_id");

            using RequestContent content = RequestContent.Create(new
            {
                name = "your_large_person_group_name",
                userData = "your_user_data",
            });
            Response response = await client.UpdateAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task LargePersonGroup_GetLargePersonGroups_GetLargePersonGroups()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = CreateFaceAdministrationClient(endpoint, credential).GetLargePersonGroupClient(null);

            Response response = await client.GetLargePersonGroupsAsync("00000000-0000-0000-0000-000000000000", 20, true, null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task LargePersonGroup_GetLargePersonGroups_GetLargePersonGroups_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = CreateFaceAdministrationClient(endpoint, credential).GetLargePersonGroupClient(null);

            Response<IReadOnlyList<LargePersonGroup>> response = await client.GetLargePersonGroupsAsync();
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task LargePersonGroup_GetTrainingStatus_GetTrainingStatusOfLargePersonGroup()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = CreateFaceAdministrationClient(endpoint, credential).GetLargePersonGroupClient("your_large_person_group_id");

            Response response = await client.GetTrainingStatusAsync(null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task LargePersonGroup_GetTrainingStatus_GetTrainingStatusOfLargePersonGroup_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = CreateFaceAdministrationClient(endpoint, credential).GetLargePersonGroupClient("your_large_person_group_id");

            Response<FaceTrainingResult> response = await client.GetTrainingStatusAsync();
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task LargePersonGroupPerson_CreatePerson_CreatePersonInLargePersonGroup()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = CreateFaceAdministrationClient(endpoint, credential).GetLargePersonGroupClient("your_large_person_group_id");

            using RequestContent content = RequestContent.Create(new
            {
                name = "your_large_person_group_person_name",
                userData = "your_user_data",
            });
            Response response = await client.CreatePersonAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task LargePersonGroupPerson_CreatePerson_CreatePersonInLargePersonGroup_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = CreateFaceAdministrationClient(endpoint, credential).GetLargePersonGroupClient("your_large_person_group_id");

            Response<CreatePersonResult> response = await client.CreatePersonAsync("your_large_person_group_person_name");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task LargePersonGroupPerson_DeletePerson_DeletePersonFromLargePersonGroup()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = CreateFaceAdministrationClient(endpoint, credential).GetLargePersonGroupClient("your_large_person_group_id");

            Response response = await client.DeletePersonAsync(Guid.Parse("25985303-c537-4467-b41d-bdb45cd95ca1"));
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task LargePersonGroupPerson_GetPerson_GetPersonFromLargePersonGroup()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = CreateFaceAdministrationClient(endpoint, credential).GetLargePersonGroupClient("your_large_person_group_id");

            Response response = await client.GetPersonAsync(Guid.Parse("25985303-c537-4467-b41d-bdb45cd95ca1"), null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task LargePersonGroupPerson_GetPerson_GetPersonFromLargePersonGroup_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = CreateFaceAdministrationClient(endpoint, credential).GetLargePersonGroupClient("your_large_person_group_id");

            Response<LargePersonGroupPerson> response = await client.GetPersonAsync(Guid.Parse("25985303-c537-4467-b41d-bdb45cd95ca1"));
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task LargePersonGroupPerson_UpdatePerson_UpdatePersonInLargePersonGroup()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = CreateFaceAdministrationClient(endpoint, credential).GetLargePersonGroupClient("your_large_person_group_id");

            using RequestContent content = RequestContent.Create(new
            {
                name = "your_large_person_group_person_name",
                userData = "your_user_data",
            });
            Response response = await client.UpdatePersonAsync(Guid.Parse("25985303-c537-4467-b41d-bdb45cd95ca1"), content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task LargePersonGroupPerson_GetPersons_GetPersonsFromLargePersonGroup()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = CreateFaceAdministrationClient(endpoint, credential).GetLargePersonGroupClient("your_large_person_group_id");

            Response response = await client.GetPersonsAsync("00000000-0000-0000-0000-000000000000", 20, null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task LargePersonGroupPerson_GetPersons_GetPersonsFromLargePersonGroup_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = CreateFaceAdministrationClient(endpoint, credential).GetLargePersonGroupClient("your_large_person_group_id");

            Response<IReadOnlyList<LargePersonGroupPerson>> response = await client.GetPersonsAsync();
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task LargePersonGroupPersonFace_DeleteFace_DeleteFaceFromLargePersonGroupPerson()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = CreateFaceAdministrationClient(endpoint, credential).GetLargePersonGroupClient("your_large_person_group_id");

            Response response = await client.DeleteFaceAsync(Guid.Parse("25985303-c537-4467-b41d-bdb45cd95ca1"), Guid.Parse("43897a75-8d6f-42cf-885e-74832febb055"));
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task LargePersonGroupPersonFace_GetFace_GetFaceFromLargePersonGroupPerson()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = CreateFaceAdministrationClient(endpoint, credential).GetLargePersonGroupClient("your_large_person_group_id");

            Response response = await client.GetFaceAsync(Guid.Parse("25985303-c537-4467-b41d-bdb45cd95ca1"), Guid.Parse("43897a75-8d6f-42cf-885e-74832febb055"), null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task LargePersonGroupPersonFace_GetFace_GetFaceFromLargePersonGroupPerson_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = CreateFaceAdministrationClient(endpoint, credential).GetLargePersonGroupClient("your_large_person_group_id");

            Response<LargePersonGroupPersonFace> response = await client.GetFaceAsync(Guid.Parse("25985303-c537-4467-b41d-bdb45cd95ca1"), Guid.Parse("43897a75-8d6f-42cf-885e-74832febb055"));
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task LargePersonGroupPersonFace_UpdateFace_UpdateFaceInLargePersonGroupPerson()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = CreateFaceAdministrationClient(endpoint, credential).GetLargePersonGroupClient("your_large_person_group_id");

            using RequestContent content = RequestContent.Create(new
            {
                userData = "your_user_data",
            });
            Response response = await client.UpdateFaceAsync(Guid.Parse("25985303-c537-4467-b41d-bdb45cd95ca1"), Guid.Parse("43897a75-8d6f-42cf-885e-74832febb055"), content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task LargePersonGroup_Train_TrainLargePersonGroup()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = CreateFaceAdministrationClient(endpoint, credential).GetLargePersonGroupClient("your_large_person_group_id");

            Operation operation = await client.TrainAsync(WaitUntil.Completed);
        }
    }
}
