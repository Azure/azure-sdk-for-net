// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.Vision.Face.Samples
{
    public partial class Samples_PersonDirectory
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryPerson_GetPerson_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Response response = client.GetPerson(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryPerson_GetPerson_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Response response = await client.GetPersonAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryPerson_GetPerson_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Response<PersonDirectoryPerson> response = client.GetPerson(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryPerson_GetPerson_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Response<PersonDirectoryPerson> response = await client.GetPersonAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryPerson_GetPerson_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Response response = client.GetPerson(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryPerson_GetPerson_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Response response = await client.GetPersonAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryPerson_GetPerson_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Response<PersonDirectoryPerson> response = client.GetPerson(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryPerson_GetPerson_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Response<PersonDirectoryPerson> response = await client.GetPersonAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryPerson_UpdatePerson_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.UpdatePerson(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryPerson_UpdatePerson_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.UpdatePersonAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryPerson_UpdatePerson_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
            });
            Response response = client.UpdatePerson(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryPerson_UpdatePerson_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
            });
            Response response = await client.UpdatePersonAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryPerson_GetPersons_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Response response = client.GetPersons(null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryPerson_GetPersons_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Response response = await client.GetPersonsAsync(null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryPerson_GetPersons_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Response<IReadOnlyList<PersonDirectoryPerson>> response = client.GetPersons();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryPerson_GetPersons_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Response<IReadOnlyList<PersonDirectoryPerson>> response = await client.GetPersonsAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryPerson_GetPersons_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Response response = client.GetPersons("<start>", 1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("userData").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryPerson_GetPersons_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Response response = await client.GetPersonsAsync("<start>", 1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("userData").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryPerson_GetPersons_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Response<IReadOnlyList<PersonDirectoryPerson>> response = client.GetPersons(start: "<start>", top: 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryPerson_GetPersons_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Response<IReadOnlyList<PersonDirectoryPerson>> response = await client.GetPersonsAsync(start: "<start>", top: 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectory_GetDynamicPersonGroupReferences_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Response response = client.GetDynamicPersonGroupReferences(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("dynamicPersonGroupIds")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectory_GetDynamicPersonGroupReferences_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Response response = await client.GetDynamicPersonGroupReferencesAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("dynamicPersonGroupIds")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectory_GetDynamicPersonGroupReferences_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Response<ListGroupReferenceResult> response = client.GetDynamicPersonGroupReferences(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectory_GetDynamicPersonGroupReferences_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Response<ListGroupReferenceResult> response = await client.GetDynamicPersonGroupReferencesAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectory_GetDynamicPersonGroupReferences_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Response response = client.GetDynamicPersonGroupReferences(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "<start>", 1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("dynamicPersonGroupIds")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectory_GetDynamicPersonGroupReferences_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Response response = await client.GetDynamicPersonGroupReferencesAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "<start>", 1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("dynamicPersonGroupIds")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectory_GetDynamicPersonGroupReferences_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Response<ListGroupReferenceResult> response = client.GetDynamicPersonGroupReferences(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), start: "<start>", top: 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectory_GetDynamicPersonGroupReferences_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Response<ListGroupReferenceResult> response = await client.GetDynamicPersonGroupReferencesAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), start: "<start>", top: 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryFace_GetFace_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Response response = client.GetFace(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "recognition_01", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryFace_GetFace_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Response response = await client.GetFaceAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "recognition_01", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryFace_GetFace_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Response<PersonDirectoryFace> response = client.GetFace(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), FaceRecognitionModel.Recognition01, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryFace_GetFace_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Response<PersonDirectoryFace> response = await client.GetFaceAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), FaceRecognitionModel.Recognition01, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryFace_GetFace_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Response response = client.GetFace(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "recognition_01", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryFace_GetFace_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Response response = await client.GetFaceAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "recognition_01", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryFace_GetFace_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Response<PersonDirectoryFace> response = client.GetFace(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), FaceRecognitionModel.Recognition01, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryFace_GetFace_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Response<PersonDirectoryFace> response = await client.GetFaceAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), FaceRecognitionModel.Recognition01, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryFace_UpdateFace_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.UpdateFace(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "recognition_01", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryFace_UpdateFace_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.UpdateFaceAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "recognition_01", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryFace_UpdateFace_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            using RequestContent content = RequestContent.Create(new
            {
                userData = "<userData>",
            });
            Response response = client.UpdateFace(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "recognition_01", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryFace_UpdateFace_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            using RequestContent content = RequestContent.Create(new
            {
                userData = "<userData>",
            });
            Response response = await client.UpdateFaceAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "recognition_01", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryFace_GetFaces_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Response response = client.GetFaces(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "recognition_01");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
            Console.WriteLine(result.GetProperty("persistedFaceIds")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryFace_GetFaces_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Response response = await client.GetFacesAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "recognition_01");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
            Console.WriteLine(result.GetProperty("persistedFaceIds")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryFace_GetFaces_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Response<ListFaceResult> response = client.GetFaces(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), FaceRecognitionModel.Recognition01);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryFace_GetFaces_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Response<ListFaceResult> response = await client.GetFacesAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), FaceRecognitionModel.Recognition01);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryFace_GetFaces_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Response response = client.GetFaces(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "recognition_01");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
            Console.WriteLine(result.GetProperty("persistedFaceIds")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryFace_GetFaces_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Response response = await client.GetFacesAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "recognition_01");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
            Console.WriteLine(result.GetProperty("persistedFaceIds")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryFace_GetFaces_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Response<ListFaceResult> response = client.GetFaces(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), FaceRecognitionModel.Recognition01);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryFace_GetFaces_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Response<ListFaceResult> response = await client.GetFacesAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), FaceRecognitionModel.Recognition01);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DynamicPersonGroup_CreateDynamicPersonGroup_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = client.CreateDynamicPersonGroup("<dynamicPersonGroupId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DynamicPersonGroup_CreateDynamicPersonGroup_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = await client.CreateDynamicPersonGroupAsync("<dynamicPersonGroupId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DynamicPersonGroup_CreateDynamicPersonGroup_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            UserDefinedFields userDefinedFields = new UserDefinedFields("<name>");
            Response response = client.CreateDynamicPersonGroup("<dynamicPersonGroupId>", userDefinedFields);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DynamicPersonGroup_CreateDynamicPersonGroup_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            UserDefinedFields userDefinedFields = new UserDefinedFields("<name>");
            Response response = await client.CreateDynamicPersonGroupAsync("<dynamicPersonGroupId>", userDefinedFields);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DynamicPersonGroup_CreateDynamicPersonGroup_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
            });
            Response response = client.CreateDynamicPersonGroup("<dynamicPersonGroupId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DynamicPersonGroup_CreateDynamicPersonGroup_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
            });
            Response response = await client.CreateDynamicPersonGroupAsync("<dynamicPersonGroupId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DynamicPersonGroup_CreateDynamicPersonGroup_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            UserDefinedFields userDefinedFields = new UserDefinedFields("<name>")
            {
                UserData = "<userData>",
            };
            Response response = client.CreateDynamicPersonGroup("<dynamicPersonGroupId>", userDefinedFields);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DynamicPersonGroup_CreateDynamicPersonGroup_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            UserDefinedFields userDefinedFields = new UserDefinedFields("<name>")
            {
                UserData = "<userData>",
            };
            Response response = await client.CreateDynamicPersonGroupAsync("<dynamicPersonGroupId>", userDefinedFields);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DynamicPersonGroup_GetDynamicPersonGroup_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Response response = client.GetDynamicPersonGroup("<dynamicPersonGroupId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("dynamicPersonGroupId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DynamicPersonGroup_GetDynamicPersonGroup_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Response response = await client.GetDynamicPersonGroupAsync("<dynamicPersonGroupId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("dynamicPersonGroupId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DynamicPersonGroup_GetDynamicPersonGroup_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Response<DynamicPersonGroup> response = client.GetDynamicPersonGroup("<dynamicPersonGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DynamicPersonGroup_GetDynamicPersonGroup_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Response<DynamicPersonGroup> response = await client.GetDynamicPersonGroupAsync("<dynamicPersonGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DynamicPersonGroup_GetDynamicPersonGroup_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Response response = client.GetDynamicPersonGroup("<dynamicPersonGroupId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("dynamicPersonGroupId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DynamicPersonGroup_GetDynamicPersonGroup_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Response response = await client.GetDynamicPersonGroupAsync("<dynamicPersonGroupId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("dynamicPersonGroupId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DynamicPersonGroup_GetDynamicPersonGroup_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Response<DynamicPersonGroup> response = client.GetDynamicPersonGroup("<dynamicPersonGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DynamicPersonGroup_GetDynamicPersonGroup_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Response<DynamicPersonGroup> response = await client.GetDynamicPersonGroupAsync("<dynamicPersonGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DynamicPersonGroup_UpdateDynamicPersonGroup_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.UpdateDynamicPersonGroup("<dynamicPersonGroupId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DynamicPersonGroup_UpdateDynamicPersonGroup_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.UpdateDynamicPersonGroupAsync("<dynamicPersonGroupId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DynamicPersonGroup_UpdateDynamicPersonGroup_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
            });
            Response response = client.UpdateDynamicPersonGroup("<dynamicPersonGroupId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DynamicPersonGroup_UpdateDynamicPersonGroup_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
            });
            Response response = await client.UpdateDynamicPersonGroupAsync("<dynamicPersonGroupId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DynamicPersonGroup_GetDynamicPersonGroups_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Response response = client.GetDynamicPersonGroups(null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("dynamicPersonGroupId").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DynamicPersonGroup_GetDynamicPersonGroups_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Response response = await client.GetDynamicPersonGroupsAsync(null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("dynamicPersonGroupId").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DynamicPersonGroup_GetDynamicPersonGroups_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Response<IReadOnlyList<DynamicPersonGroup>> response = client.GetDynamicPersonGroups();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DynamicPersonGroup_GetDynamicPersonGroups_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Response<IReadOnlyList<DynamicPersonGroup>> response = await client.GetDynamicPersonGroupsAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DynamicPersonGroup_GetDynamicPersonGroups_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Response response = client.GetDynamicPersonGroups("<start>", 1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("dynamicPersonGroupId").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("userData").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DynamicPersonGroup_GetDynamicPersonGroups_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Response response = await client.GetDynamicPersonGroupsAsync("<start>", 1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("dynamicPersonGroupId").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("userData").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DynamicPersonGroup_GetDynamicPersonGroups_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Response<IReadOnlyList<DynamicPersonGroup>> response = client.GetDynamicPersonGroups(start: "<start>", top: 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DynamicPersonGroup_GetDynamicPersonGroups_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Response<IReadOnlyList<DynamicPersonGroup>> response = await client.GetDynamicPersonGroupsAsync(start: "<start>", top: 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectory_GetDynamicPersonGroupPersons_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Response response = client.GetDynamicPersonGroupPersons("<dynamicPersonGroupId>", null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personIds")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectory_GetDynamicPersonGroupPersons_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Response response = await client.GetDynamicPersonGroupPersonsAsync("<dynamicPersonGroupId>", null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personIds")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectory_GetDynamicPersonGroupPersons_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Response<ListPersonResult> response = client.GetDynamicPersonGroupPersons("<dynamicPersonGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectory_GetDynamicPersonGroupPersons_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Response<ListPersonResult> response = await client.GetDynamicPersonGroupPersonsAsync("<dynamicPersonGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectory_GetDynamicPersonGroupPersons_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Response response = client.GetDynamicPersonGroupPersons("<dynamicPersonGroupId>", "<start>", 1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personIds")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectory_GetDynamicPersonGroupPersons_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Response response = await client.GetDynamicPersonGroupPersonsAsync("<dynamicPersonGroupId>", "<start>", 1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personIds")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectory_GetDynamicPersonGroupPersons_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Response<ListPersonResult> response = client.GetDynamicPersonGroupPersons("<dynamicPersonGroupId>", start: "<start>", top: 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectory_GetDynamicPersonGroupPersons_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Response<ListPersonResult> response = await client.GetDynamicPersonGroupPersonsAsync("<dynamicPersonGroupId>", start: "<start>", top: 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryPerson_CreatePerson_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Operation<BinaryData> operation = client.CreatePerson(WaitUntil.Completed, content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryPerson_CreatePerson_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Operation<BinaryData> operation = await client.CreatePersonAsync(WaitUntil.Completed, content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryPerson_CreatePerson_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            UserDefinedFields userDefinedFields = new UserDefinedFields("<name>");
            Operation<PersonDirectoryPerson> operation = client.CreatePerson(WaitUntil.Completed, userDefinedFields);
            PersonDirectoryPerson responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryPerson_CreatePerson_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            UserDefinedFields userDefinedFields = new UserDefinedFields("<name>");
            Operation<PersonDirectoryPerson> operation = await client.CreatePersonAsync(WaitUntil.Completed, userDefinedFields);
            PersonDirectoryPerson responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryPerson_CreatePerson_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
            });
            Operation<BinaryData> operation = client.CreatePerson(WaitUntil.Completed, content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryPerson_CreatePerson_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
            });
            Operation<BinaryData> operation = await client.CreatePersonAsync(WaitUntil.Completed, content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryPerson_CreatePerson_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            UserDefinedFields userDefinedFields = new UserDefinedFields("<name>")
            {
                UserData = "<userData>",
            };
            Operation<PersonDirectoryPerson> operation = client.CreatePerson(WaitUntil.Completed, userDefinedFields);
            PersonDirectoryPerson responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryPerson_CreatePerson_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            UserDefinedFields userDefinedFields = new UserDefinedFields("<name>")
            {
                UserData = "<userData>",
            };
            Operation<PersonDirectoryPerson> operation = await client.CreatePersonAsync(WaitUntil.Completed, userDefinedFields);
            PersonDirectoryPerson responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryPerson_DeletePerson_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Operation operation = client.DeletePerson(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryPerson_DeletePerson_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Operation operation = await client.DeletePersonAsync(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryPerson_DeletePerson_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Operation operation = client.DeletePerson(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryPerson_DeletePerson_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Operation operation = await client.DeletePersonAsync(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryFace_AddFaceFromUrl_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            using RequestContent content = RequestContent.Create(new
            {
                url = "http://localhost:3000",
            });
            Operation<BinaryData> operation = client.AddFaceFromUrl(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "recognition_01", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryFace_AddFaceFromUrl_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            using RequestContent content = RequestContent.Create(new
            {
                url = "http://localhost:3000",
            });
            Operation<BinaryData> operation = await client.AddFaceFromUrlAsync(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "recognition_01", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryFace_AddFaceFromUrl_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Operation<PersonDirectoryFace> operation = client.AddFaceFromUrl(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), FaceRecognitionModel.Recognition01, new Uri("http://localhost:3000"));
            PersonDirectoryFace responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryFace_AddFaceFromUrl_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Operation<PersonDirectoryFace> operation = await client.AddFaceFromUrlAsync(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), FaceRecognitionModel.Recognition01, new Uri("http://localhost:3000"));
            PersonDirectoryFace responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryFace_AddFaceFromUrl_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            using RequestContent content = RequestContent.Create(new
            {
                url = "http://localhost:3000",
            });
            Operation<BinaryData> operation = client.AddFaceFromUrl(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "recognition_01", content, targetFace: new int[] { 1234 }, detectionModel: "detection_01", userData: "<userData>");
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryFace_AddFaceFromUrl_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            using RequestContent content = RequestContent.Create(new
            {
                url = "http://localhost:3000",
            });
            Operation<BinaryData> operation = await client.AddFaceFromUrlAsync(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "recognition_01", content, targetFace: new int[] { 1234 }, detectionModel: "detection_01", userData: "<userData>");
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryFace_AddFaceFromUrl_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Operation<PersonDirectoryFace> operation = client.AddFaceFromUrl(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), FaceRecognitionModel.Recognition01, new Uri("http://localhost:3000"), targetFace: new int[] { 1234 }, detectionModel: FaceDetectionModel.Detection01, userData: "<userData>");
            PersonDirectoryFace responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryFace_AddFaceFromUrl_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Operation<PersonDirectoryFace> operation = await client.AddFaceFromUrlAsync(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), FaceRecognitionModel.Recognition01, new Uri("http://localhost:3000"), targetFace: new int[] { 1234 }, detectionModel: FaceDetectionModel.Detection01, userData: "<userData>");
            PersonDirectoryFace responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryFace_AddFace_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            using RequestContent content = RequestContent.Create(new object());
            Operation<BinaryData> operation = client.AddFace(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "recognition_01", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryFace_AddFace_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            using RequestContent content = RequestContent.Create(new object());
            Operation<BinaryData> operation = await client.AddFaceAsync(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "recognition_01", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryFace_AddFace_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Operation<PersonDirectoryFace> operation = client.AddFace(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), FaceRecognitionModel.Recognition01, BinaryData.FromObjectAsJson(new object()));
            PersonDirectoryFace responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryFace_AddFace_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Operation<PersonDirectoryFace> operation = await client.AddFaceAsync(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), FaceRecognitionModel.Recognition01, BinaryData.FromObjectAsJson(new object()));
            PersonDirectoryFace responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryFace_AddFace_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            using RequestContent content = RequestContent.Create(new object());
            Operation<BinaryData> operation = client.AddFace(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "recognition_01", content, targetFace: new int[] { 1234 }, detectionModel: "detection_01", userData: "<userData>");
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryFace_AddFace_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            using RequestContent content = RequestContent.Create(new object());
            Operation<BinaryData> operation = await client.AddFaceAsync(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "recognition_01", content, targetFace: new int[] { 1234 }, detectionModel: "detection_01", userData: "<userData>");
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryFace_AddFace_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Operation<PersonDirectoryFace> operation = client.AddFace(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), FaceRecognitionModel.Recognition01, BinaryData.FromObjectAsJson(new object()), targetFace: new int[] { 1234 }, detectionModel: FaceDetectionModel.Detection01, userData: "<userData>");
            PersonDirectoryFace responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryFace_AddFace_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Operation<PersonDirectoryFace> operation = await client.AddFaceAsync(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), FaceRecognitionModel.Recognition01, BinaryData.FromObjectAsJson(new object()), targetFace: new int[] { 1234 }, detectionModel: FaceDetectionModel.Detection01, userData: "<userData>");
            PersonDirectoryFace responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryFace_DeleteFace_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Operation operation = client.DeleteFace(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "recognition_01", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryFace_DeleteFace_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Operation operation = await client.DeleteFaceAsync(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "recognition_01", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryFace_DeleteFace_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Operation operation = client.DeleteFace(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), FaceRecognitionModel.Recognition01, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryFace_DeleteFace_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Operation operation = await client.DeleteFaceAsync(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), FaceRecognitionModel.Recognition01, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryFace_DeleteFace_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Operation operation = client.DeleteFace(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "recognition_01", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryFace_DeleteFace_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Operation operation = await client.DeleteFaceAsync(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "recognition_01", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryFace_DeleteFace_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Operation operation = client.DeleteFace(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), FaceRecognitionModel.Recognition01, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryFace_DeleteFace_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Operation operation = await client.DeleteFaceAsync(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), FaceRecognitionModel.Recognition01, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DynamicPersonGroup_CreateDynamicPersonGroupWithPerson_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                addPersonIds = new object[]
            {
"73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"
            },
            });
            Operation<BinaryData> operation = client.CreateDynamicPersonGroupWithPerson(WaitUntil.Completed, "<dynamicPersonGroupId>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("dynamicPersonGroupId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DynamicPersonGroup_CreateDynamicPersonGroupWithPerson_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                addPersonIds = new object[]
            {
"73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"
            },
            });
            Operation<BinaryData> operation = await client.CreateDynamicPersonGroupWithPersonAsync(WaitUntil.Completed, "<dynamicPersonGroupId>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("dynamicPersonGroupId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DynamicPersonGroup_CreateDynamicPersonGroupWithPerson_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Operation<DynamicPersonGroup> operation = client.CreateDynamicPersonGroupWithPerson(WaitUntil.Completed, "<dynamicPersonGroupId>", "<name>", new Guid[] { Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a") });
            DynamicPersonGroup responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DynamicPersonGroup_CreateDynamicPersonGroupWithPerson_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Operation<DynamicPersonGroup> operation = await client.CreateDynamicPersonGroupWithPersonAsync(WaitUntil.Completed, "<dynamicPersonGroupId>", "<name>", new Guid[] { Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a") });
            DynamicPersonGroup responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DynamicPersonGroup_CreateDynamicPersonGroupWithPerson_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
                addPersonIds = new object[]
            {
"73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"
            },
            });
            Operation<BinaryData> operation = client.CreateDynamicPersonGroupWithPerson(WaitUntil.Completed, "<dynamicPersonGroupId>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("dynamicPersonGroupId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DynamicPersonGroup_CreateDynamicPersonGroupWithPerson_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
                addPersonIds = new object[]
            {
"73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"
            },
            });
            Operation<BinaryData> operation = await client.CreateDynamicPersonGroupWithPersonAsync(WaitUntil.Completed, "<dynamicPersonGroupId>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("dynamicPersonGroupId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DynamicPersonGroup_CreateDynamicPersonGroupWithPerson_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Operation<DynamicPersonGroup> operation = client.CreateDynamicPersonGroupWithPerson(WaitUntil.Completed, "<dynamicPersonGroupId>", "<name>", new Guid[] { Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a") }, userData: "<userData>");
            DynamicPersonGroup responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DynamicPersonGroup_CreateDynamicPersonGroupWithPerson_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Operation<DynamicPersonGroup> operation = await client.CreateDynamicPersonGroupWithPersonAsync(WaitUntil.Completed, "<dynamicPersonGroupId>", "<name>", new Guid[] { Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a") }, userData: "<userData>");
            DynamicPersonGroup responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DynamicPersonGroup_DeleteDynamicPersonGroup_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Operation operation = client.DeleteDynamicPersonGroup(WaitUntil.Completed, "<dynamicPersonGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DynamicPersonGroup_DeleteDynamicPersonGroup_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Operation operation = await client.DeleteDynamicPersonGroupAsync(WaitUntil.Completed, "<dynamicPersonGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DynamicPersonGroup_DeleteDynamicPersonGroup_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Operation operation = client.DeleteDynamicPersonGroup(WaitUntil.Completed, "<dynamicPersonGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DynamicPersonGroup_DeleteDynamicPersonGroup_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            Operation operation = await client.DeleteDynamicPersonGroupAsync(WaitUntil.Completed, "<dynamicPersonGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectory_UpdateDynamicPersonGroupWithPersonChanges_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            using RequestContent content = RequestContent.Create(new object());
            Operation operation = client.UpdateDynamicPersonGroupWithPersonChanges(WaitUntil.Completed, "<dynamicPersonGroupId>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectory_UpdateDynamicPersonGroupWithPersonChanges_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            using RequestContent content = RequestContent.Create(new object());
            Operation operation = await client.UpdateDynamicPersonGroupWithPersonChangesAsync(WaitUntil.Completed, "<dynamicPersonGroupId>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectory_UpdateDynamicPersonGroupWithPersonChanges_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
                addPersonIds = new object[]
            {
"73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"
            },
                removePersonIds = new object[]
            {
"73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"
            },
            });
            Operation operation = client.UpdateDynamicPersonGroupWithPersonChanges(WaitUntil.Completed, "<dynamicPersonGroupId>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectory_UpdateDynamicPersonGroupWithPersonChanges_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectory client = new FaceServiceClient(endpoint, credential).GetPersonDirectoryClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
                addPersonIds = new object[]
            {
"73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"
            },
                removePersonIds = new object[]
            {
"73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"
            },
            });
            Operation operation = await client.UpdateDynamicPersonGroupWithPersonChangesAsync(WaitUntil.Completed, "<dynamicPersonGroupId>", content);
        }
    }
}
