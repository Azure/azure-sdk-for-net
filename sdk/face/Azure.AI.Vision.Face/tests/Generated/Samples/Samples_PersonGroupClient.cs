// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.Vision.Face.Samples
{
    public partial class Samples_PersonGroupClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroup_Create_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = client.Create("<personGroupId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroup_Create_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = await client.CreateAsync("<personGroupId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroup_Create_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response response = client.Create("<personGroupId>", "<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroup_Create_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response response = await client.CreateAsync("<personGroupId>", "<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroup_Create_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
                recognitionModel = "recognition_01",
            });
            Response response = client.Create("<personGroupId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroup_Create_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
                recognitionModel = "recognition_01",
            });
            Response response = await client.CreateAsync("<personGroupId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroup_Create_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response response = client.Create("<personGroupId>", "<name>", userData: "<userData>", recognitionModel: FaceRecognitionModel.Recognition01);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroup_Create_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response response = await client.CreateAsync("<personGroupId>", "<name>", userData: "<userData>", recognitionModel: FaceRecognitionModel.Recognition01);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroup_Delete_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response response = client.Delete("<personGroupId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroup_Delete_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response response = await client.DeleteAsync("<personGroupId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroup_Delete_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response response = client.Delete("<personGroupId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroup_Delete_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response response = await client.DeleteAsync("<personGroupId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroup_GetPersonGroup_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response response = client.GetPersonGroup("<personGroupId>", null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("personGroupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroup_GetPersonGroup_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response response = await client.GetPersonGroupAsync("<personGroupId>", null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("personGroupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroup_GetPersonGroup_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response<PersonGroup> response = client.GetPersonGroup("<personGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroup_GetPersonGroup_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response<PersonGroup> response = await client.GetPersonGroupAsync("<personGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroup_GetPersonGroup_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response response = client.GetPersonGroup("<personGroupId>", true, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
            Console.WriteLine(result.GetProperty("recognitionModel").ToString());
            Console.WriteLine(result.GetProperty("personGroupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroup_GetPersonGroup_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response response = await client.GetPersonGroupAsync("<personGroupId>", true, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
            Console.WriteLine(result.GetProperty("recognitionModel").ToString());
            Console.WriteLine(result.GetProperty("personGroupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroup_GetPersonGroup_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response<PersonGroup> response = client.GetPersonGroup("<personGroupId>", returnRecognitionModel: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroup_GetPersonGroup_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response<PersonGroup> response = await client.GetPersonGroupAsync("<personGroupId>", returnRecognitionModel: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroup_Update_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.Update("<personGroupId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroup_Update_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.UpdateAsync("<personGroupId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroup_Update_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
            });
            Response response = client.Update("<personGroupId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroup_Update_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
            });
            Response response = await client.UpdateAsync("<personGroupId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroup_GetPersonGroups_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response response = client.GetPersonGroups(null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("personGroupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroup_GetPersonGroups_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response response = await client.GetPersonGroupsAsync(null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("personGroupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroup_GetPersonGroups_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response<IReadOnlyList<PersonGroup>> response = client.GetPersonGroups();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroup_GetPersonGroups_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response<IReadOnlyList<PersonGroup>> response = await client.GetPersonGroupsAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroup_GetPersonGroups_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response response = client.GetPersonGroups("<start>", 1234, true, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("userData").ToString());
            Console.WriteLine(result[0].GetProperty("recognitionModel").ToString());
            Console.WriteLine(result[0].GetProperty("personGroupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroup_GetPersonGroups_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response response = await client.GetPersonGroupsAsync("<start>", 1234, true, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("userData").ToString());
            Console.WriteLine(result[0].GetProperty("recognitionModel").ToString());
            Console.WriteLine(result[0].GetProperty("personGroupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroup_GetPersonGroups_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response<IReadOnlyList<PersonGroup>> response = client.GetPersonGroups(start: "<start>", top: 1234, returnRecognitionModel: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroup_GetPersonGroups_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response<IReadOnlyList<PersonGroup>> response = await client.GetPersonGroupsAsync(start: "<start>", top: 1234, returnRecognitionModel: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroup_GetTrainingStatus_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response response = client.GetTrainingStatus("<personGroupId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastSuccessfulTrainingDateTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroup_GetTrainingStatus_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response response = await client.GetTrainingStatusAsync("<personGroupId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastSuccessfulTrainingDateTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroup_GetTrainingStatus_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response<TrainingResult> response = client.GetTrainingStatus("<personGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroup_GetTrainingStatus_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response<TrainingResult> response = await client.GetTrainingStatusAsync("<personGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroup_GetTrainingStatus_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response response = client.GetTrainingStatus("<personGroupId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastSuccessfulTrainingDateTime").ToString());
            Console.WriteLine(result.GetProperty("message").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroup_GetTrainingStatus_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response response = await client.GetTrainingStatusAsync("<personGroupId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastSuccessfulTrainingDateTime").ToString());
            Console.WriteLine(result.GetProperty("message").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroup_GetTrainingStatus_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response<TrainingResult> response = client.GetTrainingStatus("<personGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroup_GetTrainingStatus_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response<TrainingResult> response = await client.GetTrainingStatusAsync("<personGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPerson_CreatePerson_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = client.CreatePerson("<personGroupId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPerson_CreatePerson_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = await client.CreatePersonAsync("<personGroupId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPerson_CreatePerson_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response<CreatePersonResult> response = client.CreatePerson("<personGroupId>", "<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPerson_CreatePerson_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response<CreatePersonResult> response = await client.CreatePersonAsync("<personGroupId>", "<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPerson_CreatePerson_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
            });
            Response response = client.CreatePerson("<personGroupId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPerson_CreatePerson_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
            });
            Response response = await client.CreatePersonAsync("<personGroupId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPerson_CreatePerson_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response<CreatePersonResult> response = client.CreatePerson("<personGroupId>", "<name>", userData: "<userData>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPerson_CreatePerson_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response<CreatePersonResult> response = await client.CreatePersonAsync("<personGroupId>", "<name>", userData: "<userData>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPerson_DeletePerson_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response response = client.DeletePerson("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPerson_DeletePerson_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response response = await client.DeletePersonAsync("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPerson_DeletePerson_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response response = client.DeletePerson("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPerson_DeletePerson_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response response = await client.DeletePersonAsync("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPerson_GetPerson_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response response = client.GetPerson("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPerson_GetPerson_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response response = await client.GetPersonAsync("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPerson_GetPerson_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response<PersonGroupPerson> response = client.GetPerson("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPerson_GetPerson_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response<PersonGroupPerson> response = await client.GetPersonAsync("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPerson_GetPerson_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response response = client.GetPerson("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
            Console.WriteLine(result.GetProperty("persistedFaceIds")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPerson_GetPerson_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response response = await client.GetPersonAsync("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
            Console.WriteLine(result.GetProperty("persistedFaceIds")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPerson_GetPerson_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response<PersonGroupPerson> response = client.GetPerson("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPerson_GetPerson_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response<PersonGroupPerson> response = await client.GetPersonAsync("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPerson_UpdatePerson_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.UpdatePerson("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPerson_UpdatePerson_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.UpdatePersonAsync("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPerson_UpdatePerson_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
            });
            Response response = client.UpdatePerson("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPerson_UpdatePerson_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
            });
            Response response = await client.UpdatePersonAsync("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPerson_GetPersons_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response response = client.GetPersons("<personGroupId>", null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPerson_GetPersons_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response response = await client.GetPersonsAsync("<personGroupId>", null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPerson_GetPersons_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response<IReadOnlyList<PersonGroupPerson>> response = client.GetPersons("<personGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPerson_GetPersons_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response<IReadOnlyList<PersonGroupPerson>> response = await client.GetPersonsAsync("<personGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPerson_GetPersons_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response response = client.GetPersons("<personGroupId>", "<start>", 1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("userData").ToString());
            Console.WriteLine(result[0].GetProperty("persistedFaceIds")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPerson_GetPersons_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response response = await client.GetPersonsAsync("<personGroupId>", "<start>", 1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("userData").ToString());
            Console.WriteLine(result[0].GetProperty("persistedFaceIds")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPerson_GetPersons_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response<IReadOnlyList<PersonGroupPerson>> response = client.GetPersons("<personGroupId>", start: "<start>", top: 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPerson_GetPersons_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response<IReadOnlyList<PersonGroupPerson>> response = await client.GetPersonsAsync("<personGroupId>", start: "<start>", top: 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPersonFace_AddFaceFromUrl_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            using RequestContent content = RequestContent.Create(new
            {
                url = "http://localhost:3000",
            });
            Response response = client.AddFaceFromUrl("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPersonFace_AddFaceFromUrl_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            using RequestContent content = RequestContent.Create(new
            {
                url = "http://localhost:3000",
            });
            Response response = await client.AddFaceFromUrlAsync("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPersonFace_AddFaceFromUrl_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response<AddFaceResult> response = client.AddFaceFromUrl("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), new Uri("http://localhost:3000"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPersonFace_AddFaceFromUrl_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response<AddFaceResult> response = await client.AddFaceFromUrlAsync("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), new Uri("http://localhost:3000"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPersonFace_AddFaceFromUrl_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            using RequestContent content = RequestContent.Create(new
            {
                url = "http://localhost:3000",
            });
            Response response = client.AddFaceFromUrl("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content, targetFace: new int[] { 1234 }, detectionModel: "detection_01", userData: "<userData>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPersonFace_AddFaceFromUrl_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            using RequestContent content = RequestContent.Create(new
            {
                url = "http://localhost:3000",
            });
            Response response = await client.AddFaceFromUrlAsync("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content, targetFace: new int[] { 1234 }, detectionModel: "detection_01", userData: "<userData>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPersonFace_AddFaceFromUrl_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response<AddFaceResult> response = client.AddFaceFromUrl("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), new Uri("http://localhost:3000"), targetFace: new int[] { 1234 }, detectionModel: FaceDetectionModel.Detection01, userData: "<userData>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPersonFace_AddFaceFromUrl_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response<AddFaceResult> response = await client.AddFaceFromUrlAsync("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), new Uri("http://localhost:3000"), targetFace: new int[] { 1234 }, detectionModel: FaceDetectionModel.Detection01, userData: "<userData>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPersonFace_AddFace_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.AddFace("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPersonFace_AddFace_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.AddFaceAsync("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPersonFace_AddFace_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response<AddFaceResult> response = client.AddFace("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), BinaryData.FromObjectAsJson(new object()));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPersonFace_AddFace_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response<AddFaceResult> response = await client.AddFaceAsync("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), BinaryData.FromObjectAsJson(new object()));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPersonFace_AddFace_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.AddFace("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content, targetFace: new int[] { 1234 }, detectionModel: "detection_01", userData: "<userData>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPersonFace_AddFace_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.AddFaceAsync("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content, targetFace: new int[] { 1234 }, detectionModel: "detection_01", userData: "<userData>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPersonFace_AddFace_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response<AddFaceResult> response = client.AddFace("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), BinaryData.FromObjectAsJson(new object()), targetFace: new int[] { 1234 }, detectionModel: FaceDetectionModel.Detection01, userData: "<userData>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPersonFace_AddFace_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response<AddFaceResult> response = await client.AddFaceAsync("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), BinaryData.FromObjectAsJson(new object()), targetFace: new int[] { 1234 }, detectionModel: FaceDetectionModel.Detection01, userData: "<userData>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPersonFace_DeleteFace_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response response = client.DeleteFace("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPersonFace_DeleteFace_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response response = await client.DeleteFaceAsync("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPersonFace_DeleteFace_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response response = client.DeleteFace("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPersonFace_DeleteFace_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response response = await client.DeleteFaceAsync("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPersonFace_GetFace_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response response = client.GetFace("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPersonFace_GetFace_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response response = await client.GetFaceAsync("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPersonFace_GetFace_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response<PersonGroupPersonFace> response = client.GetFace("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPersonFace_GetFace_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response<PersonGroupPersonFace> response = await client.GetFaceAsync("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPersonFace_GetFace_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response response = client.GetFace("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPersonFace_GetFace_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response response = await client.GetFaceAsync("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPersonFace_GetFace_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response<PersonGroupPersonFace> response = client.GetFace("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPersonFace_GetFace_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Response<PersonGroupPersonFace> response = await client.GetFaceAsync("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPersonFace_UpdateFace_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.UpdateFace("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPersonFace_UpdateFace_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.UpdateFaceAsync("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPersonFace_UpdateFace_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            using RequestContent content = RequestContent.Create(new
            {
                userData = "<userData>",
            });
            Response response = client.UpdateFace("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPersonFace_UpdateFace_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            using RequestContent content = RequestContent.Create(new
            {
                userData = "<userData>",
            });
            Response response = await client.UpdateFaceAsync("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroup_Train_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Operation operation = client.Train(WaitUntil.Completed, "<personGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroup_Train_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Operation operation = await client.TrainAsync(WaitUntil.Completed, "<personGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroup_Train_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Operation operation = client.Train(WaitUntil.Completed, "<personGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroup_Train_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceServiceClient(endpoint, credential).GetPersonGroupClientClient();

            Operation operation = await client.TrainAsync(WaitUntil.Completed, "<personGroupId>");
        }
    }
}
