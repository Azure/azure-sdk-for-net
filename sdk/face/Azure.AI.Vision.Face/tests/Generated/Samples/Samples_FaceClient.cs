// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.Vision.Face.Samples
{
    public partial class Samples_FaceClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_FindSimilar_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
                faceIds = new object[]
            {
"73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"
            },
            });
            Response response = client.FindSimilar(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_FindSimilar_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
                faceIds = new object[]
            {
"73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"
            },
            });
            Response response = await client.FindSimilarAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_FindSimilar_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<IReadOnlyList<FaceFindSimilarResult>> response = client.FindSimilar(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), new Guid[] { Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a") });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_FindSimilar_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<IReadOnlyList<FaceFindSimilarResult>> response = await client.FindSimilarAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), new Guid[] { Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a") });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_FindSimilar_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
                maxNumOfCandidatesReturned = 1234,
                mode = "matchPerson",
                faceIds = new object[]
            {
"73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"
            },
            });
            Response response = client.FindSimilar(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("confidence").ToString());
            Console.WriteLine(result[0].GetProperty("faceId").ToString());
            Console.WriteLine(result[0].GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_FindSimilar_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
                maxNumOfCandidatesReturned = 1234,
                mode = "matchPerson",
                faceIds = new object[]
            {
"73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"
            },
            });
            Response response = await client.FindSimilarAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("confidence").ToString());
            Console.WriteLine(result[0].GetProperty("faceId").ToString());
            Console.WriteLine(result[0].GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_FindSimilar_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<IReadOnlyList<FaceFindSimilarResult>> response = client.FindSimilar(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), new Guid[] { Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a") }, maxNumOfCandidatesReturned: 1234, mode: FindSimilarMatchMode.MatchPerson);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_FindSimilar_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<IReadOnlyList<FaceFindSimilarResult>> response = await client.FindSimilarAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), new Guid[] { Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a") }, maxNumOfCandidatesReturned: 1234, mode: FindSimilarMatchMode.MatchPerson);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_FindSimilarFromFaceList_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
                faceListId = "<faceListId>",
            });
            Response response = client.FindSimilarFromFaceList(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_FindSimilarFromFaceList_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
                faceListId = "<faceListId>",
            });
            Response response = await client.FindSimilarFromFaceListAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_FindSimilarFromFaceList_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<IReadOnlyList<FaceFindSimilarResult>> response = client.FindSimilarFromFaceList(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "<faceListId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_FindSimilarFromFaceList_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<IReadOnlyList<FaceFindSimilarResult>> response = await client.FindSimilarFromFaceListAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "<faceListId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_FindSimilarFromFaceList_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
                maxNumOfCandidatesReturned = 1234,
                mode = "matchPerson",
                faceListId = "<faceListId>",
            });
            Response response = client.FindSimilarFromFaceList(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("confidence").ToString());
            Console.WriteLine(result[0].GetProperty("faceId").ToString());
            Console.WriteLine(result[0].GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_FindSimilarFromFaceList_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
                maxNumOfCandidatesReturned = 1234,
                mode = "matchPerson",
                faceListId = "<faceListId>",
            });
            Response response = await client.FindSimilarFromFaceListAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("confidence").ToString());
            Console.WriteLine(result[0].GetProperty("faceId").ToString());
            Console.WriteLine(result[0].GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_FindSimilarFromFaceList_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<IReadOnlyList<FaceFindSimilarResult>> response = client.FindSimilarFromFaceList(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "<faceListId>", maxNumOfCandidatesReturned: 1234, mode: FindSimilarMatchMode.MatchPerson);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_FindSimilarFromFaceList_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<IReadOnlyList<FaceFindSimilarResult>> response = await client.FindSimilarFromFaceListAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "<faceListId>", maxNumOfCandidatesReturned: 1234, mode: FindSimilarMatchMode.MatchPerson);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_FindSimilarFromLargeFaceList_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
                largeFaceListId = "<largeFaceListId>",
            });
            Response response = client.FindSimilarFromLargeFaceList(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_FindSimilarFromLargeFaceList_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
                largeFaceListId = "<largeFaceListId>",
            });
            Response response = await client.FindSimilarFromLargeFaceListAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_FindSimilarFromLargeFaceList_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<IReadOnlyList<FaceFindSimilarResult>> response = client.FindSimilarFromLargeFaceList(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "<largeFaceListId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_FindSimilarFromLargeFaceList_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<IReadOnlyList<FaceFindSimilarResult>> response = await client.FindSimilarFromLargeFaceListAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "<largeFaceListId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_FindSimilarFromLargeFaceList_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
                maxNumOfCandidatesReturned = 1234,
                mode = "matchPerson",
                largeFaceListId = "<largeFaceListId>",
            });
            Response response = client.FindSimilarFromLargeFaceList(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("confidence").ToString());
            Console.WriteLine(result[0].GetProperty("faceId").ToString());
            Console.WriteLine(result[0].GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_FindSimilarFromLargeFaceList_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
                maxNumOfCandidatesReturned = 1234,
                mode = "matchPerson",
                largeFaceListId = "<largeFaceListId>",
            });
            Response response = await client.FindSimilarFromLargeFaceListAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("confidence").ToString());
            Console.WriteLine(result[0].GetProperty("faceId").ToString());
            Console.WriteLine(result[0].GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_FindSimilarFromLargeFaceList_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<IReadOnlyList<FaceFindSimilarResult>> response = client.FindSimilarFromLargeFaceList(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "<largeFaceListId>", maxNumOfCandidatesReturned: 1234, mode: FindSimilarMatchMode.MatchPerson);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_FindSimilarFromLargeFaceList_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<IReadOnlyList<FaceFindSimilarResult>> response = await client.FindSimilarFromLargeFaceListAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "<largeFaceListId>", maxNumOfCandidatesReturned: 1234, mode: FindSimilarMatchMode.MatchPerson);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_IdentifyFromPersonGroup_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceIds = new object[]
            {
"73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"
            },
                personGroupId = "<personGroupId>",
            });
            Response response = client.IdentifyFromPersonGroup(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("faceId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_IdentifyFromPersonGroup_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceIds = new object[]
            {
"73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"
            },
                personGroupId = "<personGroupId>",
            });
            Response response = await client.IdentifyFromPersonGroupAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("faceId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_IdentifyFromPersonGroup_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<IReadOnlyList<FaceIdentificationResult>> response = client.IdentifyFromPersonGroup(new Guid[] { Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a") }, "<personGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_IdentifyFromPersonGroup_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<IReadOnlyList<FaceIdentificationResult>> response = await client.IdentifyFromPersonGroupAsync(new Guid[] { Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a") }, "<personGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_IdentifyFromPersonGroup_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceIds = new object[]
            {
"73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"
            },
                personGroupId = "<personGroupId>",
                maxNumOfCandidatesReturned = 1234,
                confidenceThreshold = 123.45F,
            });
            Response response = client.IdentifyFromPersonGroup(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("faceId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_IdentifyFromPersonGroup_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceIds = new object[]
            {
"73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"
            },
                personGroupId = "<personGroupId>",
                maxNumOfCandidatesReturned = 1234,
                confidenceThreshold = 123.45F,
            });
            Response response = await client.IdentifyFromPersonGroupAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("faceId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_IdentifyFromPersonGroup_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<IReadOnlyList<FaceIdentificationResult>> response = client.IdentifyFromPersonGroup(new Guid[] { Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a") }, "<personGroupId>", maxNumOfCandidatesReturned: 1234, confidenceThreshold: 123.45F);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_IdentifyFromPersonGroup_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<IReadOnlyList<FaceIdentificationResult>> response = await client.IdentifyFromPersonGroupAsync(new Guid[] { Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a") }, "<personGroupId>", maxNumOfCandidatesReturned: 1234, confidenceThreshold: 123.45F);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_IdentifyFromLargePersonGroup_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceIds = new object[]
            {
"73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"
            },
                largePersonGroupId = "<largePersonGroupId>",
            });
            Response response = client.IdentifyFromLargePersonGroup(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("faceId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_IdentifyFromLargePersonGroup_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceIds = new object[]
            {
"73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"
            },
                largePersonGroupId = "<largePersonGroupId>",
            });
            Response response = await client.IdentifyFromLargePersonGroupAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("faceId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_IdentifyFromLargePersonGroup_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<IReadOnlyList<FaceIdentificationResult>> response = client.IdentifyFromLargePersonGroup(new Guid[] { Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a") }, "<largePersonGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_IdentifyFromLargePersonGroup_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<IReadOnlyList<FaceIdentificationResult>> response = await client.IdentifyFromLargePersonGroupAsync(new Guid[] { Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a") }, "<largePersonGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_IdentifyFromLargePersonGroup_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceIds = new object[]
            {
"73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"
            },
                largePersonGroupId = "<largePersonGroupId>",
                maxNumOfCandidatesReturned = 1234,
                confidenceThreshold = 123.45F,
            });
            Response response = client.IdentifyFromLargePersonGroup(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("faceId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_IdentifyFromLargePersonGroup_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceIds = new object[]
            {
"73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"
            },
                largePersonGroupId = "<largePersonGroupId>",
                maxNumOfCandidatesReturned = 1234,
                confidenceThreshold = 123.45F,
            });
            Response response = await client.IdentifyFromLargePersonGroupAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("faceId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_IdentifyFromLargePersonGroup_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<IReadOnlyList<FaceIdentificationResult>> response = client.IdentifyFromLargePersonGroup(new Guid[] { Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a") }, "<largePersonGroupId>", maxNumOfCandidatesReturned: 1234, confidenceThreshold: 123.45F);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_IdentifyFromLargePersonGroup_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<IReadOnlyList<FaceIdentificationResult>> response = await client.IdentifyFromLargePersonGroupAsync(new Guid[] { Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a") }, "<largePersonGroupId>", maxNumOfCandidatesReturned: 1234, confidenceThreshold: 123.45F);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_IdentifyFromPersonDirectory_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceIds = new object[]
            {
"73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"
            },
                personIds = new object[]
            {
"73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"
            },
            });
            Response response = client.IdentifyFromPersonDirectory(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("faceId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_IdentifyFromPersonDirectory_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceIds = new object[]
            {
"73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"
            },
                personIds = new object[]
            {
"73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"
            },
            });
            Response response = await client.IdentifyFromPersonDirectoryAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("faceId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_IdentifyFromPersonDirectory_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<IReadOnlyList<FaceIdentificationResult>> response = client.IdentifyFromPersonDirectory(new Guid[] { Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a") }, new Guid[] { Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a") });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_IdentifyFromPersonDirectory_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<IReadOnlyList<FaceIdentificationResult>> response = await client.IdentifyFromPersonDirectoryAsync(new Guid[] { Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a") }, new Guid[] { Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a") });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_IdentifyFromPersonDirectory_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceIds = new object[]
            {
"73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"
            },
                personIds = new object[]
            {
"73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"
            },
                maxNumOfCandidatesReturned = 1234,
                confidenceThreshold = 123.45F,
            });
            Response response = client.IdentifyFromPersonDirectory(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("faceId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_IdentifyFromPersonDirectory_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceIds = new object[]
            {
"73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"
            },
                personIds = new object[]
            {
"73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"
            },
                maxNumOfCandidatesReturned = 1234,
                confidenceThreshold = 123.45F,
            });
            Response response = await client.IdentifyFromPersonDirectoryAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("faceId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_IdentifyFromPersonDirectory_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<IReadOnlyList<FaceIdentificationResult>> response = client.IdentifyFromPersonDirectory(new Guid[] { Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a") }, new Guid[] { Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a") }, maxNumOfCandidatesReturned: 1234, confidenceThreshold: 123.45F);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_IdentifyFromPersonDirectory_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<IReadOnlyList<FaceIdentificationResult>> response = await client.IdentifyFromPersonDirectoryAsync(new Guid[] { Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a") }, new Guid[] { Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a") }, maxNumOfCandidatesReturned: 1234, confidenceThreshold: 123.45F);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_IdentifyFromDynamicPersonGroup_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceIds = new object[]
            {
"73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"
            },
                dynamicPersonGroupId = "<dynamicPersonGroupId>",
            });
            Response response = client.IdentifyFromDynamicPersonGroup(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("faceId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_IdentifyFromDynamicPersonGroup_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceIds = new object[]
            {
"73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"
            },
                dynamicPersonGroupId = "<dynamicPersonGroupId>",
            });
            Response response = await client.IdentifyFromDynamicPersonGroupAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("faceId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_IdentifyFromDynamicPersonGroup_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<IReadOnlyList<FaceIdentificationResult>> response = client.IdentifyFromDynamicPersonGroup(new Guid[] { Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a") }, "<dynamicPersonGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_IdentifyFromDynamicPersonGroup_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<IReadOnlyList<FaceIdentificationResult>> response = await client.IdentifyFromDynamicPersonGroupAsync(new Guid[] { Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a") }, "<dynamicPersonGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_IdentifyFromDynamicPersonGroup_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceIds = new object[]
            {
"73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"
            },
                dynamicPersonGroupId = "<dynamicPersonGroupId>",
                maxNumOfCandidatesReturned = 1234,
                confidenceThreshold = 123.45F,
            });
            Response response = client.IdentifyFromDynamicPersonGroup(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("faceId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_IdentifyFromDynamicPersonGroup_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceIds = new object[]
            {
"73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"
            },
                dynamicPersonGroupId = "<dynamicPersonGroupId>",
                maxNumOfCandidatesReturned = 1234,
                confidenceThreshold = 123.45F,
            });
            Response response = await client.IdentifyFromDynamicPersonGroupAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("faceId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_IdentifyFromDynamicPersonGroup_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<IReadOnlyList<FaceIdentificationResult>> response = client.IdentifyFromDynamicPersonGroup(new Guid[] { Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a") }, "<dynamicPersonGroupId>", maxNumOfCandidatesReturned: 1234, confidenceThreshold: 123.45F);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_IdentifyFromDynamicPersonGroup_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<IReadOnlyList<FaceIdentificationResult>> response = await client.IdentifyFromDynamicPersonGroupAsync(new Guid[] { Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a") }, "<dynamicPersonGroupId>", maxNumOfCandidatesReturned: 1234, confidenceThreshold: 123.45F);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_VerifyFaceToFace_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceId1 = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
                faceId2 = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
            });
            Response response = client.VerifyFaceToFace(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("isIdentical").ToString());
            Console.WriteLine(result.GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_VerifyFaceToFace_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceId1 = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
                faceId2 = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
            });
            Response response = await client.VerifyFaceToFaceAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("isIdentical").ToString());
            Console.WriteLine(result.GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_VerifyFaceToFace_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<FaceVerificationResult> response = client.VerifyFaceToFace(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_VerifyFaceToFace_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<FaceVerificationResult> response = await client.VerifyFaceToFaceAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_VerifyFaceToFace_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceId1 = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
                faceId2 = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
            });
            Response response = client.VerifyFaceToFace(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("isIdentical").ToString());
            Console.WriteLine(result.GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_VerifyFaceToFace_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceId1 = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
                faceId2 = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
            });
            Response response = await client.VerifyFaceToFaceAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("isIdentical").ToString());
            Console.WriteLine(result.GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_VerifyFaceToFace_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<FaceVerificationResult> response = client.VerifyFaceToFace(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_VerifyFaceToFace_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<FaceVerificationResult> response = await client.VerifyFaceToFaceAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_VerifyFromPersonGroup_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
                personGroupId = "<personGroupId>",
                personId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
            });
            Response response = client.VerifyFromPersonGroup(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("isIdentical").ToString());
            Console.WriteLine(result.GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_VerifyFromPersonGroup_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
                personGroupId = "<personGroupId>",
                personId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
            });
            Response response = await client.VerifyFromPersonGroupAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("isIdentical").ToString());
            Console.WriteLine(result.GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_VerifyFromPersonGroup_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<FaceVerificationResult> response = client.VerifyFromPersonGroup(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_VerifyFromPersonGroup_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<FaceVerificationResult> response = await client.VerifyFromPersonGroupAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_VerifyFromPersonGroup_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
                personGroupId = "<personGroupId>",
                personId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
            });
            Response response = client.VerifyFromPersonGroup(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("isIdentical").ToString());
            Console.WriteLine(result.GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_VerifyFromPersonGroup_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
                personGroupId = "<personGroupId>",
                personId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
            });
            Response response = await client.VerifyFromPersonGroupAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("isIdentical").ToString());
            Console.WriteLine(result.GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_VerifyFromPersonGroup_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<FaceVerificationResult> response = client.VerifyFromPersonGroup(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_VerifyFromPersonGroup_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<FaceVerificationResult> response = await client.VerifyFromPersonGroupAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_VerifyFromLargePersonGroup_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
                largePersonGroupId = "<largePersonGroupId>",
                personId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
            });
            Response response = client.VerifyFromLargePersonGroup(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("isIdentical").ToString());
            Console.WriteLine(result.GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_VerifyFromLargePersonGroup_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
                largePersonGroupId = "<largePersonGroupId>",
                personId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
            });
            Response response = await client.VerifyFromLargePersonGroupAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("isIdentical").ToString());
            Console.WriteLine(result.GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_VerifyFromLargePersonGroup_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<FaceVerificationResult> response = client.VerifyFromLargePersonGroup(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_VerifyFromLargePersonGroup_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<FaceVerificationResult> response = await client.VerifyFromLargePersonGroupAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_VerifyFromLargePersonGroup_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
                largePersonGroupId = "<largePersonGroupId>",
                personId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
            });
            Response response = client.VerifyFromLargePersonGroup(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("isIdentical").ToString());
            Console.WriteLine(result.GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_VerifyFromLargePersonGroup_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
                largePersonGroupId = "<largePersonGroupId>",
                personId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
            });
            Response response = await client.VerifyFromLargePersonGroupAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("isIdentical").ToString());
            Console.WriteLine(result.GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_VerifyFromLargePersonGroup_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<FaceVerificationResult> response = client.VerifyFromLargePersonGroup(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_VerifyFromLargePersonGroup_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<FaceVerificationResult> response = await client.VerifyFromLargePersonGroupAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_VerifyFromPersonDirectory_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
                personId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
            });
            Response response = client.VerifyFromPersonDirectory(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("isIdentical").ToString());
            Console.WriteLine(result.GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_VerifyFromPersonDirectory_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
                personId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
            });
            Response response = await client.VerifyFromPersonDirectoryAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("isIdentical").ToString());
            Console.WriteLine(result.GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_VerifyFromPersonDirectory_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<FaceVerificationResult> response = client.VerifyFromPersonDirectory(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_VerifyFromPersonDirectory_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<FaceVerificationResult> response = await client.VerifyFromPersonDirectoryAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_VerifyFromPersonDirectory_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
                personId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
            });
            Response response = client.VerifyFromPersonDirectory(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("isIdentical").ToString());
            Console.WriteLine(result.GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_VerifyFromPersonDirectory_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
                personId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
            });
            Response response = await client.VerifyFromPersonDirectoryAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("isIdentical").ToString());
            Console.WriteLine(result.GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_VerifyFromPersonDirectory_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<FaceVerificationResult> response = client.VerifyFromPersonDirectory(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_VerifyFromPersonDirectory_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<FaceVerificationResult> response = await client.VerifyFromPersonDirectoryAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_Group_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceIds = new object[]
            {
"73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"
            },
            });
            Response response = client.Group(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("groups")[0][0].ToString());
            Console.WriteLine(result.GetProperty("messyGroup")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_Group_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceIds = new object[]
            {
"73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"
            },
            });
            Response response = await client.GroupAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("groups")[0][0].ToString());
            Console.WriteLine(result.GetProperty("messyGroup")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_Group_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<FaceGroupingResult> response = client.Group(new Guid[] { Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a") });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_Group_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<FaceGroupingResult> response = await client.GroupAsync(new Guid[] { Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a") });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_Group_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceIds = new object[]
            {
"73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"
            },
            });
            Response response = client.Group(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("groups")[0][0].ToString());
            Console.WriteLine(result.GetProperty("messyGroup")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_Group_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceIds = new object[]
            {
"73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"
            },
            });
            Response response = await client.GroupAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("groups")[0][0].ToString());
            Console.WriteLine(result.GetProperty("messyGroup")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_Group_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<FaceGroupingResult> response = client.Group(new Guid[] { Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a") });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_Group_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<FaceGroupingResult> response = await client.GroupAsync(new Guid[] { Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a") });
        }
    }
}
