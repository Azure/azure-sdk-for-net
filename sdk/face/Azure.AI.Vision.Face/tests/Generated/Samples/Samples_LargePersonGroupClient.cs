// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.Vision.Face.Samples
{
    public partial class Samples_LargePersonGroupClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroup_Create_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = client.Create("<largePersonGroupId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroup_Create_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = await client.CreateAsync("<largePersonGroupId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroup_Create_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            Response response = client.Create("<largePersonGroupId>", "<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroup_Create_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            Response response = await client.CreateAsync("<largePersonGroupId>", "<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroup_Create_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
                recognitionModel = "recognition_01",
            });
            Response response = client.Create("<largePersonGroupId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroup_Create_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
                recognitionModel = "recognition_01",
            });
            Response response = await client.CreateAsync("<largePersonGroupId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroup_Create_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            Response response = client.Create("<largePersonGroupId>", "<name>", userData: "<userData>", recognitionModel: FaceRecognitionModel.Recognition01);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroup_Create_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            Response response = await client.CreateAsync("<largePersonGroupId>", "<name>", userData: "<userData>", recognitionModel: FaceRecognitionModel.Recognition01);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroup_Delete_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            Response response = client.Delete("<largePersonGroupId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroup_Delete_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            Response response = await client.DeleteAsync("<largePersonGroupId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroup_Delete_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            Response response = client.Delete("<largePersonGroupId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroup_Delete_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            Response response = await client.DeleteAsync("<largePersonGroupId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroup_GetLargePersonGroup_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            Response response = client.GetLargePersonGroup("<largePersonGroupId>", null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("largePersonGroupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroup_GetLargePersonGroup_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            Response response = await client.GetLargePersonGroupAsync("<largePersonGroupId>", null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("largePersonGroupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroup_GetLargePersonGroup_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            Response<LargePersonGroup> response = client.GetLargePersonGroup("<largePersonGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroup_GetLargePersonGroup_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            Response<LargePersonGroup> response = await client.GetLargePersonGroupAsync("<largePersonGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroup_GetLargePersonGroup_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            Response response = client.GetLargePersonGroup("<largePersonGroupId>", true, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
            Console.WriteLine(result.GetProperty("recognitionModel").ToString());
            Console.WriteLine(result.GetProperty("largePersonGroupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroup_GetLargePersonGroup_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            Response response = await client.GetLargePersonGroupAsync("<largePersonGroupId>", true, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
            Console.WriteLine(result.GetProperty("recognitionModel").ToString());
            Console.WriteLine(result.GetProperty("largePersonGroupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroup_GetLargePersonGroup_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            Response<LargePersonGroup> response = client.GetLargePersonGroup("<largePersonGroupId>", returnRecognitionModel: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroup_GetLargePersonGroup_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            Response<LargePersonGroup> response = await client.GetLargePersonGroupAsync("<largePersonGroupId>", returnRecognitionModel: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroup_Update_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.Update("<largePersonGroupId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroup_Update_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.UpdateAsync("<largePersonGroupId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroup_Update_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
            });
            Response response = client.Update("<largePersonGroupId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroup_Update_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
            });
            Response response = await client.UpdateAsync("<largePersonGroupId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroup_GetLargePersonGroups_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            Response response = client.GetLargePersonGroups(null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("largePersonGroupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroup_GetLargePersonGroups_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            Response response = await client.GetLargePersonGroupsAsync(null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("largePersonGroupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroup_GetLargePersonGroups_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            Response<IReadOnlyList<LargePersonGroup>> response = client.GetLargePersonGroups();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroup_GetLargePersonGroups_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            Response<IReadOnlyList<LargePersonGroup>> response = await client.GetLargePersonGroupsAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroup_GetLargePersonGroups_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            Response response = client.GetLargePersonGroups("<start>", 1234, true, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("userData").ToString());
            Console.WriteLine(result[0].GetProperty("recognitionModel").ToString());
            Console.WriteLine(result[0].GetProperty("largePersonGroupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroup_GetLargePersonGroups_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            Response response = await client.GetLargePersonGroupsAsync("<start>", 1234, true, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("userData").ToString());
            Console.WriteLine(result[0].GetProperty("recognitionModel").ToString());
            Console.WriteLine(result[0].GetProperty("largePersonGroupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroup_GetLargePersonGroups_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            Response<IReadOnlyList<LargePersonGroup>> response = client.GetLargePersonGroups(start: "<start>", top: 1234, returnRecognitionModel: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroup_GetLargePersonGroups_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            Response<IReadOnlyList<LargePersonGroup>> response = await client.GetLargePersonGroupsAsync(start: "<start>", top: 1234, returnRecognitionModel: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroup_GetTrainingStatus_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            Response response = client.GetTrainingStatus("<largePersonGroupId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastSuccessfulTrainingDateTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroup_GetTrainingStatus_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            Response response = await client.GetTrainingStatusAsync("<largePersonGroupId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastSuccessfulTrainingDateTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroup_GetTrainingStatus_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            Response<TrainingResult> response = client.GetTrainingStatus("<largePersonGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroup_GetTrainingStatus_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            Response<TrainingResult> response = await client.GetTrainingStatusAsync("<largePersonGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroup_GetTrainingStatus_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            Response response = client.GetTrainingStatus("<largePersonGroupId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastSuccessfulTrainingDateTime").ToString());
            Console.WriteLine(result.GetProperty("message").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroup_GetTrainingStatus_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            Response response = await client.GetTrainingStatusAsync("<largePersonGroupId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastSuccessfulTrainingDateTime").ToString());
            Console.WriteLine(result.GetProperty("message").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroup_GetTrainingStatus_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            Response<TrainingResult> response = client.GetTrainingStatus("<largePersonGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroup_GetTrainingStatus_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            Response<TrainingResult> response = await client.GetTrainingStatusAsync("<largePersonGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPerson_CreatePerson_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = client.CreatePerson("<largePersonGroupId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPerson_CreatePerson_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = await client.CreatePersonAsync("<largePersonGroupId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPerson_CreatePerson_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            Response<CreatePersonResult> response = client.CreatePerson("<largePersonGroupId>", "<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPerson_CreatePerson_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            Response<CreatePersonResult> response = await client.CreatePersonAsync("<largePersonGroupId>", "<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPerson_CreatePerson_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
            });
            Response response = client.CreatePerson("<largePersonGroupId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPerson_CreatePerson_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
            });
            Response response = await client.CreatePersonAsync("<largePersonGroupId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPerson_CreatePerson_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            Response<CreatePersonResult> response = client.CreatePerson("<largePersonGroupId>", "<name>", userData: "<userData>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPerson_CreatePerson_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            Response<CreatePersonResult> response = await client.CreatePersonAsync("<largePersonGroupId>", "<name>", userData: "<userData>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPerson_DeletePerson_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            Response response = client.DeletePerson("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPerson_DeletePerson_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            Response response = await client.DeletePersonAsync("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPerson_DeletePerson_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            Response response = client.DeletePerson("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPerson_DeletePerson_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            Response response = await client.DeletePersonAsync("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPerson_GetPerson_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            Response response = client.GetPerson("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPerson_GetPerson_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            Response response = await client.GetPersonAsync("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPerson_GetPerson_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            Response<LargePersonGroupPerson> response = client.GetPerson("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPerson_GetPerson_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            Response<LargePersonGroupPerson> response = await client.GetPersonAsync("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPerson_GetPerson_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            Response response = client.GetPerson("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
            Console.WriteLine(result.GetProperty("persistedFaceIds")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPerson_GetPerson_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            Response response = await client.GetPersonAsync("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
            Console.WriteLine(result.GetProperty("persistedFaceIds")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPerson_GetPerson_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            Response<LargePersonGroupPerson> response = client.GetPerson("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPerson_GetPerson_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            Response<LargePersonGroupPerson> response = await client.GetPersonAsync("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPerson_UpdatePerson_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.UpdatePerson("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPerson_UpdatePerson_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.UpdatePersonAsync("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPerson_UpdatePerson_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
            });
            Response response = client.UpdatePerson("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPerson_UpdatePerson_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
            });
            Response response = await client.UpdatePersonAsync("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPerson_GetPersons_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            Response response = client.GetPersons("<largePersonGroupId>", null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPerson_GetPersons_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            Response response = await client.GetPersonsAsync("<largePersonGroupId>", null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPerson_GetPersons_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            Response<IReadOnlyList<LargePersonGroupPerson>> response = client.GetPersons("<largePersonGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPerson_GetPersons_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            Response<IReadOnlyList<LargePersonGroupPerson>> response = await client.GetPersonsAsync("<largePersonGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPerson_GetPersons_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            Response response = client.GetPersons("<largePersonGroupId>", "<start>", 1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("userData").ToString());
            Console.WriteLine(result[0].GetProperty("persistedFaceIds")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPerson_GetPersons_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            Response response = await client.GetPersonsAsync("<largePersonGroupId>", "<start>", 1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("userData").ToString());
            Console.WriteLine(result[0].GetProperty("persistedFaceIds")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPerson_GetPersons_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            Response<IReadOnlyList<LargePersonGroupPerson>> response = client.GetPersons("<largePersonGroupId>", start: "<start>", top: 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPerson_GetPersons_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            Response<IReadOnlyList<LargePersonGroupPerson>> response = await client.GetPersonsAsync("<largePersonGroupId>", start: "<start>", top: 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPersonFace_DeleteFace_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            Response response = client.DeleteFace("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPersonFace_DeleteFace_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            Response response = await client.DeleteFaceAsync("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPersonFace_DeleteFace_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            Response response = client.DeleteFace("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPersonFace_DeleteFace_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            Response response = await client.DeleteFaceAsync("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPersonFace_GetFace_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            Response response = client.GetFace("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPersonFace_GetFace_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            Response response = await client.GetFaceAsync("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPersonFace_GetFace_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            Response<LargePersonGroupPersonFace> response = client.GetFace("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPersonFace_GetFace_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            Response<LargePersonGroupPersonFace> response = await client.GetFaceAsync("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPersonFace_GetFace_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            Response response = client.GetFace("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPersonFace_GetFace_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            Response response = await client.GetFaceAsync("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPersonFace_GetFace_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            Response<LargePersonGroupPersonFace> response = client.GetFace("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPersonFace_GetFace_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            Response<LargePersonGroupPersonFace> response = await client.GetFaceAsync("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPersonFace_UpdateFace_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.UpdateFace("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPersonFace_UpdateFace_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.UpdateFaceAsync("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPersonFace_UpdateFace_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            using RequestContent content = RequestContent.Create(new
            {
                userData = "<userData>",
            });
            Response response = client.UpdateFace("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPersonFace_UpdateFace_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            using RequestContent content = RequestContent.Create(new
            {
                userData = "<userData>",
            });
            Response response = await client.UpdateFaceAsync("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroup_Train_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            Operation operation = client.Train(WaitUntil.Completed, "<largePersonGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroup_Train_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            Operation operation = await client.TrainAsync(WaitUntil.Completed, "<largePersonGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroup_Train_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            Operation operation = client.Train(WaitUntil.Completed, "<largePersonGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroup_Train_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroupClient client = new FaceServiceClient(endpoint, credential).GetLargePersonGroupClientClient();

            Operation operation = await client.TrainAsync(WaitUntil.Completed, "<largePersonGroupId>");
        }
    }
}
