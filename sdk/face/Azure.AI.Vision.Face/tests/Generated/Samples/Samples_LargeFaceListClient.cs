// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.Vision.Face.Samples
{
    public partial class Samples_LargeFaceListClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceList_Create_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = new FaceServiceClient(endpoint, credential).GetLargeFaceListClientClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = client.Create("<largeFaceListId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceList_Create_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = new FaceServiceClient(endpoint, credential).GetLargeFaceListClientClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = await client.CreateAsync("<largeFaceListId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceList_Create_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = new FaceServiceClient(endpoint, credential).GetLargeFaceListClientClient();

            Response response = client.Create("<largeFaceListId>", "<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceList_Create_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = new FaceServiceClient(endpoint, credential).GetLargeFaceListClientClient();

            Response response = await client.CreateAsync("<largeFaceListId>", "<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceList_Create_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = new FaceServiceClient(endpoint, credential).GetLargeFaceListClientClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
                recognitionModel = "recognition_01",
            });
            Response response = client.Create("<largeFaceListId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceList_Create_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = new FaceServiceClient(endpoint, credential).GetLargeFaceListClientClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
                recognitionModel = "recognition_01",
            });
            Response response = await client.CreateAsync("<largeFaceListId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceList_Create_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = new FaceServiceClient(endpoint, credential).GetLargeFaceListClientClient();

            Response response = client.Create("<largeFaceListId>", "<name>", userData: "<userData>", recognitionModel: FaceRecognitionModel.Recognition01);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceList_Create_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = new FaceServiceClient(endpoint, credential).GetLargeFaceListClientClient();

            Response response = await client.CreateAsync("<largeFaceListId>", "<name>", userData: "<userData>", recognitionModel: FaceRecognitionModel.Recognition01);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceList_Delete_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = new FaceServiceClient(endpoint, credential).GetLargeFaceListClientClient();

            Response response = client.Delete("<largeFaceListId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceList_Delete_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = new FaceServiceClient(endpoint, credential).GetLargeFaceListClientClient();

            Response response = await client.DeleteAsync("<largeFaceListId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceList_Delete_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = new FaceServiceClient(endpoint, credential).GetLargeFaceListClientClient();

            Response response = client.Delete("<largeFaceListId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceList_Delete_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = new FaceServiceClient(endpoint, credential).GetLargeFaceListClientClient();

            Response response = await client.DeleteAsync("<largeFaceListId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceList_GetLargeFaceList_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = new FaceServiceClient(endpoint, credential).GetLargeFaceListClientClient();

            Response response = client.GetLargeFaceList("<largeFaceListId>", null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("largeFaceListId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceList_GetLargeFaceList_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = new FaceServiceClient(endpoint, credential).GetLargeFaceListClientClient();

            Response response = await client.GetLargeFaceListAsync("<largeFaceListId>", null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("largeFaceListId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceList_GetLargeFaceList_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = new FaceServiceClient(endpoint, credential).GetLargeFaceListClientClient();

            Response<LargeFaceList> response = client.GetLargeFaceList("<largeFaceListId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceList_GetLargeFaceList_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = new FaceServiceClient(endpoint, credential).GetLargeFaceListClientClient();

            Response<LargeFaceList> response = await client.GetLargeFaceListAsync("<largeFaceListId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceList_GetLargeFaceList_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = new FaceServiceClient(endpoint, credential).GetLargeFaceListClientClient();

            Response response = client.GetLargeFaceList("<largeFaceListId>", true, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
            Console.WriteLine(result.GetProperty("recognitionModel").ToString());
            Console.WriteLine(result.GetProperty("largeFaceListId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceList_GetLargeFaceList_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = new FaceServiceClient(endpoint, credential).GetLargeFaceListClientClient();

            Response response = await client.GetLargeFaceListAsync("<largeFaceListId>", true, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
            Console.WriteLine(result.GetProperty("recognitionModel").ToString());
            Console.WriteLine(result.GetProperty("largeFaceListId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceList_GetLargeFaceList_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = new FaceServiceClient(endpoint, credential).GetLargeFaceListClientClient();

            Response<LargeFaceList> response = client.GetLargeFaceList("<largeFaceListId>", returnRecognitionModel: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceList_GetLargeFaceList_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = new FaceServiceClient(endpoint, credential).GetLargeFaceListClientClient();

            Response<LargeFaceList> response = await client.GetLargeFaceListAsync("<largeFaceListId>", returnRecognitionModel: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceList_Update_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = new FaceServiceClient(endpoint, credential).GetLargeFaceListClientClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.Update("<largeFaceListId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceList_Update_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = new FaceServiceClient(endpoint, credential).GetLargeFaceListClientClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.UpdateAsync("<largeFaceListId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceList_Update_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = new FaceServiceClient(endpoint, credential).GetLargeFaceListClientClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
            });
            Response response = client.Update("<largeFaceListId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceList_Update_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = new FaceServiceClient(endpoint, credential).GetLargeFaceListClientClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
            });
            Response response = await client.UpdateAsync("<largeFaceListId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceList_GetLargeFaceLists_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = new FaceServiceClient(endpoint, credential).GetLargeFaceListClientClient();

            Response response = client.GetLargeFaceLists(null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("largeFaceListId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceList_GetLargeFaceLists_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = new FaceServiceClient(endpoint, credential).GetLargeFaceListClientClient();

            Response response = await client.GetLargeFaceListsAsync(null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("largeFaceListId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceList_GetLargeFaceLists_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = new FaceServiceClient(endpoint, credential).GetLargeFaceListClientClient();

            Response<IReadOnlyList<LargeFaceList>> response = client.GetLargeFaceLists();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceList_GetLargeFaceLists_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = new FaceServiceClient(endpoint, credential).GetLargeFaceListClientClient();

            Response<IReadOnlyList<LargeFaceList>> response = await client.GetLargeFaceListsAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceList_GetLargeFaceLists_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = new FaceServiceClient(endpoint, credential).GetLargeFaceListClientClient();

            Response response = client.GetLargeFaceLists("<start>", 1234, true, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("userData").ToString());
            Console.WriteLine(result[0].GetProperty("recognitionModel").ToString());
            Console.WriteLine(result[0].GetProperty("largeFaceListId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceList_GetLargeFaceLists_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = new FaceServiceClient(endpoint, credential).GetLargeFaceListClientClient();

            Response response = await client.GetLargeFaceListsAsync("<start>", 1234, true, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("userData").ToString());
            Console.WriteLine(result[0].GetProperty("recognitionModel").ToString());
            Console.WriteLine(result[0].GetProperty("largeFaceListId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceList_GetLargeFaceLists_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = new FaceServiceClient(endpoint, credential).GetLargeFaceListClientClient();

            Response<IReadOnlyList<LargeFaceList>> response = client.GetLargeFaceLists(start: "<start>", top: 1234, returnRecognitionModel: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceList_GetLargeFaceLists_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = new FaceServiceClient(endpoint, credential).GetLargeFaceListClientClient();

            Response<IReadOnlyList<LargeFaceList>> response = await client.GetLargeFaceListsAsync(start: "<start>", top: 1234, returnRecognitionModel: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceList_GetTrainingStatus_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = new FaceServiceClient(endpoint, credential).GetLargeFaceListClientClient();

            Response response = client.GetTrainingStatus("<largeFaceListId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastSuccessfulTrainingDateTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceList_GetTrainingStatus_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = new FaceServiceClient(endpoint, credential).GetLargeFaceListClientClient();

            Response response = await client.GetTrainingStatusAsync("<largeFaceListId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastSuccessfulTrainingDateTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceList_GetTrainingStatus_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = new FaceServiceClient(endpoint, credential).GetLargeFaceListClientClient();

            Response<TrainingResult> response = client.GetTrainingStatus("<largeFaceListId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceList_GetTrainingStatus_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = new FaceServiceClient(endpoint, credential).GetLargeFaceListClientClient();

            Response<TrainingResult> response = await client.GetTrainingStatusAsync("<largeFaceListId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceList_GetTrainingStatus_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = new FaceServiceClient(endpoint, credential).GetLargeFaceListClientClient();

            Response response = client.GetTrainingStatus("<largeFaceListId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastSuccessfulTrainingDateTime").ToString());
            Console.WriteLine(result.GetProperty("message").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceList_GetTrainingStatus_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = new FaceServiceClient(endpoint, credential).GetLargeFaceListClientClient();

            Response response = await client.GetTrainingStatusAsync("<largeFaceListId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastSuccessfulTrainingDateTime").ToString());
            Console.WriteLine(result.GetProperty("message").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceList_GetTrainingStatus_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = new FaceServiceClient(endpoint, credential).GetLargeFaceListClientClient();

            Response<TrainingResult> response = client.GetTrainingStatus("<largeFaceListId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceList_GetTrainingStatus_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = new FaceServiceClient(endpoint, credential).GetLargeFaceListClientClient();

            Response<TrainingResult> response = await client.GetTrainingStatusAsync("<largeFaceListId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceListFace_DeleteFace_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = new FaceServiceClient(endpoint, credential).GetLargeFaceListClientClient();

            Response response = client.DeleteFace("<largeFaceListId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceListFace_DeleteFace_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = new FaceServiceClient(endpoint, credential).GetLargeFaceListClientClient();

            Response response = await client.DeleteFaceAsync("<largeFaceListId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceListFace_DeleteFace_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = new FaceServiceClient(endpoint, credential).GetLargeFaceListClientClient();

            Response response = client.DeleteFace("<largeFaceListId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceListFace_DeleteFace_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = new FaceServiceClient(endpoint, credential).GetLargeFaceListClientClient();

            Response response = await client.DeleteFaceAsync("<largeFaceListId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceListFace_GetFace_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = new FaceServiceClient(endpoint, credential).GetLargeFaceListClientClient();

            Response response = client.GetFace("<largeFaceListId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceListFace_GetFace_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = new FaceServiceClient(endpoint, credential).GetLargeFaceListClientClient();

            Response response = await client.GetFaceAsync("<largeFaceListId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceListFace_GetFace_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = new FaceServiceClient(endpoint, credential).GetLargeFaceListClientClient();

            Response<LargeFaceListFace> response = client.GetFace("<largeFaceListId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceListFace_GetFace_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = new FaceServiceClient(endpoint, credential).GetLargeFaceListClientClient();

            Response<LargeFaceListFace> response = await client.GetFaceAsync("<largeFaceListId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceListFace_GetFace_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = new FaceServiceClient(endpoint, credential).GetLargeFaceListClientClient();

            Response response = client.GetFace("<largeFaceListId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceListFace_GetFace_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = new FaceServiceClient(endpoint, credential).GetLargeFaceListClientClient();

            Response response = await client.GetFaceAsync("<largeFaceListId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceListFace_GetFace_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = new FaceServiceClient(endpoint, credential).GetLargeFaceListClientClient();

            Response<LargeFaceListFace> response = client.GetFace("<largeFaceListId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceListFace_GetFace_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = new FaceServiceClient(endpoint, credential).GetLargeFaceListClientClient();

            Response<LargeFaceListFace> response = await client.GetFaceAsync("<largeFaceListId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceListFace_UpdateFace_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = new FaceServiceClient(endpoint, credential).GetLargeFaceListClientClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.UpdateFace("<largeFaceListId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceListFace_UpdateFace_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = new FaceServiceClient(endpoint, credential).GetLargeFaceListClientClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.UpdateFaceAsync("<largeFaceListId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceListFace_UpdateFace_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = new FaceServiceClient(endpoint, credential).GetLargeFaceListClientClient();

            using RequestContent content = RequestContent.Create(new
            {
                userData = "<userData>",
            });
            Response response = client.UpdateFace("<largeFaceListId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceListFace_UpdateFace_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = new FaceServiceClient(endpoint, credential).GetLargeFaceListClientClient();

            using RequestContent content = RequestContent.Create(new
            {
                userData = "<userData>",
            });
            Response response = await client.UpdateFaceAsync("<largeFaceListId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceListFace_GetFaces_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = new FaceServiceClient(endpoint, credential).GetLargeFaceListClientClient();

            Response response = client.GetFaces("<largeFaceListId>", null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceListFace_GetFaces_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = new FaceServiceClient(endpoint, credential).GetLargeFaceListClientClient();

            Response response = await client.GetFacesAsync("<largeFaceListId>", null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceListFace_GetFaces_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = new FaceServiceClient(endpoint, credential).GetLargeFaceListClientClient();

            Response<IReadOnlyList<LargeFaceListFace>> response = client.GetFaces("<largeFaceListId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceListFace_GetFaces_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = new FaceServiceClient(endpoint, credential).GetLargeFaceListClientClient();

            Response<IReadOnlyList<LargeFaceListFace>> response = await client.GetFacesAsync("<largeFaceListId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceListFace_GetFaces_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = new FaceServiceClient(endpoint, credential).GetLargeFaceListClientClient();

            Response response = client.GetFaces("<largeFaceListId>", "<start>", 1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("persistedFaceId").ToString());
            Console.WriteLine(result[0].GetProperty("userData").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceListFace_GetFaces_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = new FaceServiceClient(endpoint, credential).GetLargeFaceListClientClient();

            Response response = await client.GetFacesAsync("<largeFaceListId>", "<start>", 1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("persistedFaceId").ToString());
            Console.WriteLine(result[0].GetProperty("userData").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceListFace_GetFaces_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = new FaceServiceClient(endpoint, credential).GetLargeFaceListClientClient();

            Response<IReadOnlyList<LargeFaceListFace>> response = client.GetFaces("<largeFaceListId>", start: "<start>", top: 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceListFace_GetFaces_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = new FaceServiceClient(endpoint, credential).GetLargeFaceListClientClient();

            Response<IReadOnlyList<LargeFaceListFace>> response = await client.GetFacesAsync("<largeFaceListId>", start: "<start>", top: 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceList_Train_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = new FaceServiceClient(endpoint, credential).GetLargeFaceListClientClient();

            Operation operation = client.Train(WaitUntil.Completed, "<largeFaceListId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceList_Train_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = new FaceServiceClient(endpoint, credential).GetLargeFaceListClientClient();

            Operation operation = await client.TrainAsync(WaitUntil.Completed, "<largeFaceListId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceList_Train_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = new FaceServiceClient(endpoint, credential).GetLargeFaceListClientClient();

            Operation operation = client.Train(WaitUntil.Completed, "<largeFaceListId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceList_Train_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceListClient client = new FaceServiceClient(endpoint, credential).GetLargeFaceListClientClient();

            Operation operation = await client.TrainAsync(WaitUntil.Completed, "<largeFaceListId>");
        }
    }
}
