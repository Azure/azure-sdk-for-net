// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.AI.Vision.Face
{
    /// <summary></summary>
    public partial class FaceAdministrationClient
    {
        private readonly Uri _endpoint;
        /// <summary> A credential used to authenticate to the service. </summary>
        private readonly AzureKeyCredential _keyCredential;
        private const string AuthorizationHeader = "Ocp-Apim-Subscription-Key";
        /// <summary> A credential used to authenticate to the service. </summary>
        private readonly TokenCredential _tokenCredential;
        private static readonly string[] AuthorizationScopes = new string[] { "https://cognitiveservices.azure.com/.default" };
        private readonly string _apiVersion;
        private readonly string _largeFaceListId;
        private readonly string _largePersonGroupId;
        private LargeFaceListClientImpl _cachedLargeFaceListClientImpl;
        private LargePersonGroupClientImpl _cachedLargePersonGroupClientImpl;

        /// <summary> Initializes a new instance of FaceAdministrationClient for mocking. </summary>
        protected FaceAdministrationClient()
        {
        }

        /// <summary> Initializes a new instance of FaceAdministrationClient. </summary>
        /// <param name="endpoint"> Service endpoint. </param>
        /// <param name="largeFaceListId"> Valid character is letter in lower case or digit or '-' or '_', maximum length is 64. </param>
        /// <param name="largePersonGroupId"> ID of the container. </param>
        /// <param name="credential"> A credential used to authenticate to the service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/>, <paramref name="largeFaceListId"/>, <paramref name="largePersonGroupId"/> or <paramref name="credential"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="largeFaceListId"/> or <paramref name="largePersonGroupId"/> is an empty string, and was expected to be non-empty. </exception>
        public FaceAdministrationClient(Uri endpoint, string largeFaceListId, string largePersonGroupId, AzureKeyCredential credential) : this(endpoint, largeFaceListId, largePersonGroupId, credential, new FaceAdministrationClientOptions())
        {
        }

        /// <summary> Initializes a new instance of FaceAdministrationClient. </summary>
        /// <param name="endpoint"> Service endpoint. </param>
        /// <param name="largeFaceListId"> Valid character is letter in lower case or digit or '-' or '_', maximum length is 64. </param>
        /// <param name="largePersonGroupId"> ID of the container. </param>
        /// <param name="credential"> A credential used to authenticate to the service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/>, <paramref name="largeFaceListId"/>, <paramref name="largePersonGroupId"/> or <paramref name="credential"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="largeFaceListId"/> or <paramref name="largePersonGroupId"/> is an empty string, and was expected to be non-empty. </exception>
        public FaceAdministrationClient(Uri endpoint, string largeFaceListId, string largePersonGroupId, TokenCredential credential) : this(endpoint, largeFaceListId, largePersonGroupId, credential, new FaceAdministrationClientOptions())
        {
        }

        /// <summary> Initializes a new instance of FaceAdministrationClient. </summary>
        /// <param name="endpoint"> Service endpoint. </param>
        /// <param name="largeFaceListId"> Valid character is letter in lower case or digit or '-' or '_', maximum length is 64. </param>
        /// <param name="largePersonGroupId"> ID of the container. </param>
        /// <param name="credential"> A credential used to authenticate to the service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/>, <paramref name="largeFaceListId"/>, <paramref name="largePersonGroupId"/> or <paramref name="credential"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="largeFaceListId"/> or <paramref name="largePersonGroupId"/> is an empty string, and was expected to be non-empty. </exception>
        public FaceAdministrationClient(Uri endpoint, string largeFaceListId, string largePersonGroupId, AzureKeyCredential credential, FaceAdministrationClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            Argument.AssertNotNullOrEmpty(largeFaceListId, nameof(largeFaceListId));
            Argument.AssertNotNullOrEmpty(largePersonGroupId, nameof(largePersonGroupId));
            Argument.AssertNotNull(credential, nameof(credential));

            options ??= new FaceAdministrationClientOptions();

            _endpoint = endpoint;
            _largeFaceListId = largeFaceListId;
            _largePersonGroupId = largePersonGroupId;
            _keyCredential = credential;
            Pipeline = HttpPipelineBuilder.Build(options, new HttpPipelinePolicy[] { new AzureKeyCredentialPolicy(_keyCredential, AuthorizationHeader) });
            _apiVersion = options.Version;
            ClientDiagnostics = new ClientDiagnostics(options, true);
        }

        /// <summary> Initializes a new instance of FaceAdministrationClient. </summary>
        /// <param name="endpoint"> Service endpoint. </param>
        /// <param name="largeFaceListId"> Valid character is letter in lower case or digit or '-' or '_', maximum length is 64. </param>
        /// <param name="largePersonGroupId"> ID of the container. </param>
        /// <param name="credential"> A credential used to authenticate to the service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/>, <paramref name="largeFaceListId"/>, <paramref name="largePersonGroupId"/> or <paramref name="credential"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="largeFaceListId"/> or <paramref name="largePersonGroupId"/> is an empty string, and was expected to be non-empty. </exception>
        public FaceAdministrationClient(Uri endpoint, string largeFaceListId, string largePersonGroupId, TokenCredential credential, FaceAdministrationClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            Argument.AssertNotNullOrEmpty(largeFaceListId, nameof(largeFaceListId));
            Argument.AssertNotNullOrEmpty(largePersonGroupId, nameof(largePersonGroupId));
            Argument.AssertNotNull(credential, nameof(credential));

            options ??= new FaceAdministrationClientOptions();

            _endpoint = endpoint;
            _largeFaceListId = largeFaceListId;
            _largePersonGroupId = largePersonGroupId;
            _tokenCredential = credential;
            Pipeline = HttpPipelineBuilder.Build(options, new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes) });
            _apiVersion = options.Version;
            ClientDiagnostics = new ClientDiagnostics(options, true);
        }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline { get; }

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> Initializes a new instance of LargeFaceListClientImpl. </summary>
        public virtual LargeFaceListClientImpl GetLargeFaceListClientImplClient()
        {
            return Volatile.Read(ref _cachedLargeFaceListClientImpl) ?? Interlocked.CompareExchange(ref _cachedLargeFaceListClientImpl, new LargeFaceListClientImpl(ClientDiagnostics, Pipeline, _endpoint, _apiVersion, _largeFaceListId), null) ?? _cachedLargeFaceListClientImpl;
        }

        /// <summary> Initializes a new instance of LargePersonGroupClientImpl. </summary>
        public virtual LargePersonGroupClientImpl GetLargePersonGroupClientImplClient()
        {
            return Volatile.Read(ref _cachedLargePersonGroupClientImpl) ?? Interlocked.CompareExchange(ref _cachedLargePersonGroupClientImpl, new LargePersonGroupClientImpl(ClientDiagnostics, Pipeline, _endpoint, _apiVersion, _largePersonGroupId), null) ?? _cachedLargePersonGroupClientImpl;
        }
    }
}
