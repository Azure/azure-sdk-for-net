// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.Vision.Face
{
    /// <summary> Session result of detect liveness with verify. </summary>
    public partial class LivenessWithVerifySession
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="LivenessWithVerifySession"/>. </summary>
        /// <param name="authToken"> Bearer token to provide authentication for the Vision SDK running on a client application. This Bearer token has limited permissions to perform only the required action and expires after the TTL time. It is also auditable. </param>
        /// <param name="status"> The current status of the session. </param>
        /// <param name="results"> The results of the liveness with verify session. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="authToken"/> or <paramref name="results"/> is null. </exception>
        internal LivenessWithVerifySession(string authToken, OperationState status, LivenessWithVerifySessionResults results)
        {
            Argument.AssertNotNull(authToken, nameof(authToken));
            Argument.AssertNotNull(results, nameof(results));

            AuthToken = authToken;
            Status = status;
            Results = results;
        }

        /// <summary> Initializes a new instance of <see cref="LivenessWithVerifySession"/>. </summary>
        /// <param name="sessionId"> The unique ID to reference this session. </param>
        /// <param name="authToken"> Bearer token to provide authentication for the Vision SDK running on a client application. This Bearer token has limited permissions to perform only the required action and expires after the TTL time. It is also auditable. </param>
        /// <param name="status"> The current status of the session. </param>
        /// <param name="modelVersion"> The model version used for liveness classification. This is an optional parameter, and if this is not specified, then the latest supported model version will be chosen. </param>
        /// <param name="isAbuseMonitoringEnabled"> Denotes if the abuse monitoring feature was enabled during this session. </param>
        /// <param name="expectedClientIpAddress"> The expected IP address or CIDR block of the client that runs the liveness check. </param>
        /// <param name="results"> The results of the liveness with verify session. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal LivenessWithVerifySession(string sessionId, string authToken, OperationState status, LivenessModel? modelVersion, HttpPart1 isAbuseMonitoringEnabled, string expectedClientIpAddress, LivenessWithVerifySessionResults results, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            SessionId = sessionId;
            AuthToken = authToken;
            Status = status;
            ModelVersion = modelVersion;
            IsAbuseMonitoringEnabled = isAbuseMonitoringEnabled;
            ExpectedClientIpAddress = expectedClientIpAddress;
            Results = results;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="LivenessWithVerifySession"/> for deserialization. </summary>
        internal LivenessWithVerifySession()
        {
        }

        /// <summary> The unique ID to reference this session. </summary>
        public string SessionId { get; }
        /// <summary> Bearer token to provide authentication for the Vision SDK running on a client application. This Bearer token has limited permissions to perform only the required action and expires after the TTL time. It is also auditable. </summary>
        public string AuthToken { get; }
        /// <summary> The current status of the session. </summary>
        public OperationState Status { get; }
        /// <summary> The model version used for liveness classification. This is an optional parameter, and if this is not specified, then the latest supported model version will be chosen. </summary>
        public LivenessModel? ModelVersion { get; }
        /// <summary> Denotes if the abuse monitoring feature was enabled during this session. </summary>
        public HttpPart1 IsAbuseMonitoringEnabled { get; }
        /// <summary> The expected IP address or CIDR block of the client that runs the liveness check. </summary>
        public string ExpectedClientIpAddress { get; }
        /// <summary> The results of the liveness with verify session. </summary>
        public LivenessWithVerifySessionResults Results { get; }
    }
}
