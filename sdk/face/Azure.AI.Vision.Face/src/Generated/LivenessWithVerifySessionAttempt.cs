// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.Vision.Face
{
    /// <summary> The liveness with verify session attempt. </summary>
    public partial class LivenessWithVerifySessionAttempt
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="LivenessWithVerifySessionAttempt"/>. </summary>
        /// <param name="attemptId"> The attempt ID, start from 1. </param>
        /// <param name="attemptStatus"> The status of the attempt. </param>
        internal LivenessWithVerifySessionAttempt(int attemptId, OperationState attemptStatus)
        {
            AttemptId = attemptId;
            AttemptStatus = attemptStatus;
            ClientInformation = new ChangeTrackingList<ClientInformation>();
        }

        /// <summary> Initializes a new instance of <see cref="LivenessWithVerifySessionAttempt"/>. </summary>
        /// <param name="attemptId"> The attempt ID, start from 1. </param>
        /// <param name="attemptStatus"> The status of the attempt. </param>
        /// <param name="result"> The result of the liveness with verify call, will be null if there is error. </param>
        /// <param name="error"> The error of the liveness with verify call, will be null if there is result. </param>
        /// <param name="clientInformation"> The client information gathered during the liveness attempt. </param>
        /// <param name="abuseMonitoringResult"> The abuse monitoring result for the liveness attempt. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal LivenessWithVerifySessionAttempt(int attemptId, OperationState attemptStatus, LivenessWithVerifyResult result, LivenessError error, IReadOnlyList<ClientInformation> clientInformation, AbuseMonitoringResult abuseMonitoringResult, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            AttemptId = attemptId;
            AttemptStatus = attemptStatus;
            Result = result;
            Error = error;
            ClientInformation = clientInformation;
            AbuseMonitoringResult = abuseMonitoringResult;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="LivenessWithVerifySessionAttempt"/> for deserialization. </summary>
        internal LivenessWithVerifySessionAttempt()
        {
        }

        /// <summary> The attempt ID, start from 1. </summary>
        public int AttemptId { get; }
        /// <summary> The status of the attempt. </summary>
        public OperationState AttemptStatus { get; }
        /// <summary> The result of the liveness with verify call, will be null if there is error. </summary>
        public LivenessWithVerifyResult Result { get; }
        /// <summary> The error of the liveness with verify call, will be null if there is result. </summary>
        public LivenessError Error { get; }
        /// <summary> The client information gathered during the liveness attempt. </summary>
        public IReadOnlyList<ClientInformation> ClientInformation { get; }
        /// <summary> The abuse monitoring result for the liveness attempt. </summary>
        public AbuseMonitoringResult AbuseMonitoringResult { get; }
    }
}
