// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.Vision.Face
{
    /// <summary> The results of the liveness with verify call. </summary>
    public partial class LivenessWithVerifyResult
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="LivenessWithVerifyResult"/>. </summary>
        /// <param name="targets"> Targets used for liveness classification. </param>
        /// <param name="digest"> The server calculated digest for this request. If the client reported digest differs from the server calculated digest, then the message integrity between the client and service has been compromised and the result should not be trusted. For more information, see how to guides on how to leverage this value to secure your end-to-end solution. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="targets"/> or <paramref name="digest"/> is null. </exception>
        internal LivenessWithVerifyResult(LivenessDecisionTargets targets, string digest)
        {
            Argument.AssertNotNull(targets, nameof(targets));
            Argument.AssertNotNull(digest, nameof(digest));

            Targets = targets;
            Digest = digest;
        }

        /// <summary> Initializes a new instance of <see cref="LivenessWithVerifyResult"/>. </summary>
        /// <param name="livenessDecision"> The liveness classification for the target face. </param>
        /// <param name="targets"> Targets used for liveness classification. </param>
        /// <param name="digest"> The server calculated digest for this request. If the client reported digest differs from the server calculated digest, then the message integrity between the client and service has been compromised and the result should not be trusted. For more information, see how to guides on how to leverage this value to secure your end-to-end solution. </param>
        /// <param name="sessionImageId"> The image ID of the session request. </param>
        /// <param name="verifyResult"> The face verification output. Only available when the request is liveness with verify. </param>
        /// <param name="verifyImageHash"> The sha256 hash of the verify-image in the request. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal LivenessWithVerifyResult(FaceLivenessDecision? livenessDecision, LivenessDecisionTargets targets, string digest, string sessionImageId, LivenessWithVerifyOutputs verifyResult, string verifyImageHash, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            LivenessDecision = livenessDecision;
            Targets = targets;
            Digest = digest;
            SessionImageId = sessionImageId;
            VerifyResult = verifyResult;
            VerifyImageHash = verifyImageHash;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="LivenessWithVerifyResult"/> for deserialization. </summary>
        internal LivenessWithVerifyResult()
        {
        }

        /// <summary> The liveness classification for the target face. </summary>
        public FaceLivenessDecision? LivenessDecision { get; }
        /// <summary> Targets used for liveness classification. </summary>
        public LivenessDecisionTargets Targets { get; }
        /// <summary> The server calculated digest for this request. If the client reported digest differs from the server calculated digest, then the message integrity between the client and service has been compromised and the result should not be trusted. For more information, see how to guides on how to leverage this value to secure your end-to-end solution. </summary>
        public string Digest { get; }
        /// <summary> The image ID of the session request. </summary>
        public string SessionImageId { get; }
        /// <summary> The face verification output. Only available when the request is liveness with verify. </summary>
        public LivenessWithVerifyOutputs VerifyResult { get; }
        /// <summary> The sha256 hash of the verify-image in the request. </summary>
        public string VerifyImageHash { get; }
    }
}
