<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="CreateAsync(string,string,string,FaceRecognitionModel?,CancellationToken)">
      <example>
This sample shows how to call CreateAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceListClient client = new FaceServiceClient(endpoint, credential).GetFaceListClientClient();

Response response = await client.CreateAsync("<faceListId>", "<name>");
]]></code>
This sample shows how to call CreateAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceListClient client = new FaceServiceClient(endpoint, credential).GetFaceListClientClient();

Response response = await client.CreateAsync("<faceListId>", "<name>", userData: "<userData>", recognitionModel: FaceRecognitionModel.Recognition01);
]]></code></example>
    </member>
    <member name="Create(string,string,string,FaceRecognitionModel?,CancellationToken)">
      <example>
This sample shows how to call Create.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceListClient client = new FaceServiceClient(endpoint, credential).GetFaceListClientClient();

Response response = client.Create("<faceListId>", "<name>");
]]></code>
This sample shows how to call Create with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceListClient client = new FaceServiceClient(endpoint, credential).GetFaceListClientClient();

Response response = client.Create("<faceListId>", "<name>", userData: "<userData>", recognitionModel: FaceRecognitionModel.Recognition01);
]]></code></example>
    </member>
    <member name="CreateAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceListClient client = new FaceServiceClient(endpoint, credential).GetFaceListClientClient();

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
});
Response response = await client.CreateAsync("<faceListId>", content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call CreateAsync with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceListClient client = new FaceServiceClient(endpoint, credential).GetFaceListClientClient();

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    userData = "<userData>",
    recognitionModel = "recognition_01",
});
Response response = await client.CreateAsync("<faceListId>", content);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="Create(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call Create.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceListClient client = new FaceServiceClient(endpoint, credential).GetFaceListClientClient();

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
});
Response response = client.Create("<faceListId>", content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call Create with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceListClient client = new FaceServiceClient(endpoint, credential).GetFaceListClientClient();

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    userData = "<userData>",
    recognitionModel = "recognition_01",
});
Response response = client.Create("<faceListId>", content);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="DeleteAsync(string,RequestContext)">
      <example>
This sample shows how to call DeleteAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceListClient client = new FaceServiceClient(endpoint, credential).GetFaceListClientClient();

Response response = await client.DeleteAsync("<faceListId>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceListClient client = new FaceServiceClient(endpoint, credential).GetFaceListClientClient();

Response response = await client.DeleteAsync("<faceListId>");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="Delete(string,RequestContext)">
      <example>
This sample shows how to call Delete.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceListClient client = new FaceServiceClient(endpoint, credential).GetFaceListClientClient();

Response response = client.Delete("<faceListId>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call Delete with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceListClient client = new FaceServiceClient(endpoint, credential).GetFaceListClientClient();

Response response = client.Delete("<faceListId>");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="GetFaceListAsync(string,bool?,CancellationToken)">
      <example>
This sample shows how to call GetFaceListAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceListClient client = new FaceServiceClient(endpoint, credential).GetFaceListClientClient();

Response<FaceList> response = await client.GetFaceListAsync("<faceListId>");
]]></code>
This sample shows how to call GetFaceListAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceListClient client = new FaceServiceClient(endpoint, credential).GetFaceListClientClient();

Response<FaceList> response = await client.GetFaceListAsync("<faceListId>", returnRecognitionModel: true);
]]></code></example>
    </member>
    <member name="GetFaceList(string,bool?,CancellationToken)">
      <example>
This sample shows how to call GetFaceList.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceListClient client = new FaceServiceClient(endpoint, credential).GetFaceListClientClient();

Response<FaceList> response = client.GetFaceList("<faceListId>");
]]></code>
This sample shows how to call GetFaceList with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceListClient client = new FaceServiceClient(endpoint, credential).GetFaceListClientClient();

Response<FaceList> response = client.GetFaceList("<faceListId>", returnRecognitionModel: true);
]]></code></example>
    </member>
    <member name="GetFaceListAsync(string,bool?,RequestContext)">
      <example>
This sample shows how to call GetFaceListAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceListClient client = new FaceServiceClient(endpoint, credential).GetFaceListClientClient();

Response response = await client.GetFaceListAsync("<faceListId>", null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("faceListId").ToString());
]]></code>
This sample shows how to call GetFaceListAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceListClient client = new FaceServiceClient(endpoint, credential).GetFaceListClientClient();

Response response = await client.GetFaceListAsync("<faceListId>", true, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("userData").ToString());
Console.WriteLine(result.GetProperty("recognitionModel").ToString());
Console.WriteLine(result.GetProperty("faceListId").ToString());
Console.WriteLine(result.GetProperty("persistedFaces")[0].GetProperty("persistedFaceId").ToString());
Console.WriteLine(result.GetProperty("persistedFaces")[0].GetProperty("userData").ToString());
]]></code></example>
    </member>
    <member name="GetFaceList(string,bool?,RequestContext)">
      <example>
This sample shows how to call GetFaceList and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceListClient client = new FaceServiceClient(endpoint, credential).GetFaceListClientClient();

Response response = client.GetFaceList("<faceListId>", null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("faceListId").ToString());
]]></code>
This sample shows how to call GetFaceList with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceListClient client = new FaceServiceClient(endpoint, credential).GetFaceListClientClient();

Response response = client.GetFaceList("<faceListId>", true, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("userData").ToString());
Console.WriteLine(result.GetProperty("recognitionModel").ToString());
Console.WriteLine(result.GetProperty("faceListId").ToString());
Console.WriteLine(result.GetProperty("persistedFaces")[0].GetProperty("persistedFaceId").ToString());
Console.WriteLine(result.GetProperty("persistedFaces")[0].GetProperty("userData").ToString());
]]></code></example>
    </member>
    <member name="UpdateAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call UpdateAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceListClient client = new FaceServiceClient(endpoint, credential).GetFaceListClientClient();

using RequestContent content = RequestContent.Create(new object());
Response response = await client.UpdateAsync("<faceListId>", content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call UpdateAsync with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceListClient client = new FaceServiceClient(endpoint, credential).GetFaceListClientClient();

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    userData = "<userData>",
});
Response response = await client.UpdateAsync("<faceListId>", content);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="Update(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call Update.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceListClient client = new FaceServiceClient(endpoint, credential).GetFaceListClientClient();

using RequestContent content = RequestContent.Create(new object());
Response response = client.Update("<faceListId>", content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call Update with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceListClient client = new FaceServiceClient(endpoint, credential).GetFaceListClientClient();

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    userData = "<userData>",
});
Response response = client.Update("<faceListId>", content);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="GetFaceListsAsync(bool?,CancellationToken)">
      <example>
This sample shows how to call GetFaceListsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceListClient client = new FaceServiceClient(endpoint, credential).GetFaceListClientClient();

Response<IReadOnlyList<FaceListItem>> response = await client.GetFaceListsAsync();
]]></code>
This sample shows how to call GetFaceListsAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceListClient client = new FaceServiceClient(endpoint, credential).GetFaceListClientClient();

Response<IReadOnlyList<FaceListItem>> response = await client.GetFaceListsAsync(returnRecognitionModel: true);
]]></code></example>
    </member>
    <member name="GetFaceLists(bool?,CancellationToken)">
      <example>
This sample shows how to call GetFaceLists.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceListClient client = new FaceServiceClient(endpoint, credential).GetFaceListClientClient();

Response<IReadOnlyList<FaceListItem>> response = client.GetFaceLists();
]]></code>
This sample shows how to call GetFaceLists with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceListClient client = new FaceServiceClient(endpoint, credential).GetFaceListClientClient();

Response<IReadOnlyList<FaceListItem>> response = client.GetFaceLists(returnRecognitionModel: true);
]]></code></example>
    </member>
    <member name="GetFaceListsAsync(bool?,RequestContext)">
      <example>
This sample shows how to call GetFaceListsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceListClient client = new FaceServiceClient(endpoint, credential).GetFaceListClientClient();

Response response = await client.GetFaceListsAsync(null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("faceListId").ToString());
]]></code>
This sample shows how to call GetFaceListsAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceListClient client = new FaceServiceClient(endpoint, credential).GetFaceListClientClient();

Response response = await client.GetFaceListsAsync(true, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("userData").ToString());
Console.WriteLine(result[0].GetProperty("recognitionModel").ToString());
Console.WriteLine(result[0].GetProperty("faceListId").ToString());
]]></code></example>
    </member>
    <member name="GetFaceLists(bool?,RequestContext)">
      <example>
This sample shows how to call GetFaceLists and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceListClient client = new FaceServiceClient(endpoint, credential).GetFaceListClientClient();

Response response = client.GetFaceLists(null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("faceListId").ToString());
]]></code>
This sample shows how to call GetFaceLists with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceListClient client = new FaceServiceClient(endpoint, credential).GetFaceListClientClient();

Response response = client.GetFaceLists(true, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("userData").ToString());
Console.WriteLine(result[0].GetProperty("recognitionModel").ToString());
Console.WriteLine(result[0].GetProperty("faceListId").ToString());
]]></code></example>
    </member>
    <member name="AddFaceFromUrlAsync(string,Uri,IEnumerable{int},FaceDetectionModel?,string,CancellationToken)">
      <example>
This sample shows how to call AddFaceFromUrlAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceListClient client = new FaceServiceClient(endpoint, credential).GetFaceListClientClient();

Response<AddFaceResult> response = await client.AddFaceFromUrlAsync("<faceListId>", new Uri("http://localhost:3000"));
]]></code>
This sample shows how to call AddFaceFromUrlAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceListClient client = new FaceServiceClient(endpoint, credential).GetFaceListClientClient();

Response<AddFaceResult> response = await client.AddFaceFromUrlAsync("<faceListId>", new Uri("http://localhost:3000"), targetFace: new int[] { 1234 }, detectionModel: FaceDetectionModel.Detection01, userData: "<userData>");
]]></code></example>
    </member>
    <member name="AddFaceFromUrl(string,Uri,IEnumerable{int},FaceDetectionModel?,string,CancellationToken)">
      <example>
This sample shows how to call AddFaceFromUrl.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceListClient client = new FaceServiceClient(endpoint, credential).GetFaceListClientClient();

Response<AddFaceResult> response = client.AddFaceFromUrl("<faceListId>", new Uri("http://localhost:3000"));
]]></code>
This sample shows how to call AddFaceFromUrl with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceListClient client = new FaceServiceClient(endpoint, credential).GetFaceListClientClient();

Response<AddFaceResult> response = client.AddFaceFromUrl("<faceListId>", new Uri("http://localhost:3000"), targetFace: new int[] { 1234 }, detectionModel: FaceDetectionModel.Detection01, userData: "<userData>");
]]></code></example>
    </member>
    <member name="AddFaceFromUrlAsync(string,RequestContent,IEnumerable{int},string,string,RequestContext)">
      <example>
This sample shows how to call AddFaceFromUrlAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceListClient client = new FaceServiceClient(endpoint, credential).GetFaceListClientClient();

using RequestContent content = RequestContent.Create(new
{
    url = "http://localhost:3000",
});
Response response = await client.AddFaceFromUrlAsync("<faceListId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
]]></code>
This sample shows how to call AddFaceFromUrlAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceListClient client = new FaceServiceClient(endpoint, credential).GetFaceListClientClient();

using RequestContent content = RequestContent.Create(new
{
    url = "http://localhost:3000",
});
Response response = await client.AddFaceFromUrlAsync("<faceListId>", content, targetFace: new int[] { 1234 }, detectionModel: "detection_01", userData: "<userData>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
]]></code></example>
    </member>
    <member name="AddFaceFromUrl(string,RequestContent,IEnumerable{int},string,string,RequestContext)">
      <example>
This sample shows how to call AddFaceFromUrl and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceListClient client = new FaceServiceClient(endpoint, credential).GetFaceListClientClient();

using RequestContent content = RequestContent.Create(new
{
    url = "http://localhost:3000",
});
Response response = client.AddFaceFromUrl("<faceListId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
]]></code>
This sample shows how to call AddFaceFromUrl with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceListClient client = new FaceServiceClient(endpoint, credential).GetFaceListClientClient();

using RequestContent content = RequestContent.Create(new
{
    url = "http://localhost:3000",
});
Response response = client.AddFaceFromUrl("<faceListId>", content, targetFace: new int[] { 1234 }, detectionModel: "detection_01", userData: "<userData>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
]]></code></example>
    </member>
    <member name="AddFaceAsync(string,BinaryData,IEnumerable{int},FaceDetectionModel?,string,CancellationToken)">
      <example>
This sample shows how to call AddFaceAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceListClient client = new FaceServiceClient(endpoint, credential).GetFaceListClientClient();

Response<AddFaceResult> response = await client.AddFaceAsync("<faceListId>", BinaryData.FromObjectAsJson(new object()));
]]></code>
This sample shows how to call AddFaceAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceListClient client = new FaceServiceClient(endpoint, credential).GetFaceListClientClient();

Response<AddFaceResult> response = await client.AddFaceAsync("<faceListId>", BinaryData.FromObjectAsJson(new object()), targetFace: new int[] { 1234 }, detectionModel: FaceDetectionModel.Detection01, userData: "<userData>");
]]></code></example>
    </member>
    <member name="AddFace(string,BinaryData,IEnumerable{int},FaceDetectionModel?,string,CancellationToken)">
      <example>
This sample shows how to call AddFace.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceListClient client = new FaceServiceClient(endpoint, credential).GetFaceListClientClient();

Response<AddFaceResult> response = client.AddFace("<faceListId>", BinaryData.FromObjectAsJson(new object()));
]]></code>
This sample shows how to call AddFace with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceListClient client = new FaceServiceClient(endpoint, credential).GetFaceListClientClient();

Response<AddFaceResult> response = client.AddFace("<faceListId>", BinaryData.FromObjectAsJson(new object()), targetFace: new int[] { 1234 }, detectionModel: FaceDetectionModel.Detection01, userData: "<userData>");
]]></code></example>
    </member>
    <member name="AddFaceAsync(string,RequestContent,IEnumerable{int},string,string,RequestContext)">
      <example>
This sample shows how to call AddFaceAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceListClient client = new FaceServiceClient(endpoint, credential).GetFaceListClientClient();

using RequestContent content = RequestContent.Create(new object());
Response response = await client.AddFaceAsync("<faceListId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
]]></code>
This sample shows how to call AddFaceAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceListClient client = new FaceServiceClient(endpoint, credential).GetFaceListClientClient();

using RequestContent content = RequestContent.Create(new object());
Response response = await client.AddFaceAsync("<faceListId>", content, targetFace: new int[] { 1234 }, detectionModel: "detection_01", userData: "<userData>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
]]></code></example>
    </member>
    <member name="AddFace(string,RequestContent,IEnumerable{int},string,string,RequestContext)">
      <example>
This sample shows how to call AddFace and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceListClient client = new FaceServiceClient(endpoint, credential).GetFaceListClientClient();

using RequestContent content = RequestContent.Create(new object());
Response response = client.AddFace("<faceListId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
]]></code>
This sample shows how to call AddFace with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceListClient client = new FaceServiceClient(endpoint, credential).GetFaceListClientClient();

using RequestContent content = RequestContent.Create(new object());
Response response = client.AddFace("<faceListId>", content, targetFace: new int[] { 1234 }, detectionModel: "detection_01", userData: "<userData>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
]]></code></example>
    </member>
    <member name="DeleteFaceAsync(string,Guid,RequestContext)">
      <example>
This sample shows how to call DeleteFaceAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceListClient client = new FaceServiceClient(endpoint, credential).GetFaceListClientClient();

Response response = await client.DeleteFaceAsync("<faceListId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteFaceAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceListClient client = new FaceServiceClient(endpoint, credential).GetFaceListClientClient();

Response response = await client.DeleteFaceAsync("<faceListId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="DeleteFace(string,Guid,RequestContext)">
      <example>
This sample shows how to call DeleteFace.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceListClient client = new FaceServiceClient(endpoint, credential).GetFaceListClientClient();

Response response = client.DeleteFace("<faceListId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteFace with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceListClient client = new FaceServiceClient(endpoint, credential).GetFaceListClientClient();

Response response = client.DeleteFace("<faceListId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));

Console.WriteLine(response.Status);
]]></code></example>
    </member>
  </members>
</doc>