<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="CreateFaceListAsync(string,string,string,FaceRecognitionModel?,CancellationToken)">
      <example>
This sample shows how to call CreateFaceListAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.CreateFaceListAsync("<faceListId>", "<name>");
]]></code>
This sample shows how to call CreateFaceListAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.CreateFaceListAsync("<faceListId>", "<name>", userData: "<userData>", recognitionModel: FaceRecognitionModel.Recognition01);
]]></code></example>
    </member>
    <member name="CreateFaceList(string,string,string,FaceRecognitionModel?,CancellationToken)">
      <example>
This sample shows how to call CreateFaceList.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.CreateFaceList("<faceListId>", "<name>");
]]></code>
This sample shows how to call CreateFaceList with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.CreateFaceList("<faceListId>", "<name>", userData: "<userData>", recognitionModel: FaceRecognitionModel.Recognition01);
]]></code></example>
    </member>
    <member name="CreateFaceListAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateFaceListAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
});
Response response = await client.CreateFaceListAsync("<faceListId>", content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call CreateFaceListAsync with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    userData = "<userData>",
    recognitionModel = "recognition_01",
});
Response response = await client.CreateFaceListAsync("<faceListId>", content);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="CreateFaceList(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateFaceList.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
});
Response response = client.CreateFaceList("<faceListId>", content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call CreateFaceList with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    userData = "<userData>",
    recognitionModel = "recognition_01",
});
Response response = client.CreateFaceList("<faceListId>", content);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="DeleteFaceListAsync(string,RequestContext)">
      <example>
This sample shows how to call DeleteFaceListAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.DeleteFaceListAsync("<faceListId>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteFaceListAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.DeleteFaceListAsync("<faceListId>");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="DeleteFaceList(string,RequestContext)">
      <example>
This sample shows how to call DeleteFaceList.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.DeleteFaceList("<faceListId>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteFaceList with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.DeleteFaceList("<faceListId>");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="GetFaceListAsync(string,bool?,CancellationToken)">
      <example>
This sample shows how to call GetFaceListAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<FaceList> response = await client.GetFaceListAsync("<faceListId>");
]]></code>
This sample shows how to call GetFaceListAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<FaceList> response = await client.GetFaceListAsync("<faceListId>", returnRecognitionModel: true);
]]></code></example>
    </member>
    <member name="GetFaceList(string,bool?,CancellationToken)">
      <example>
This sample shows how to call GetFaceList.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<FaceList> response = client.GetFaceList("<faceListId>");
]]></code>
This sample shows how to call GetFaceList with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<FaceList> response = client.GetFaceList("<faceListId>", returnRecognitionModel: true);
]]></code></example>
    </member>
    <member name="GetFaceListAsync(string,bool?,RequestContext)">
      <example>
This sample shows how to call GetFaceListAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.GetFaceListAsync("<faceListId>", null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("faceListId").ToString());
]]></code>
This sample shows how to call GetFaceListAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.GetFaceListAsync("<faceListId>", true, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("userData").ToString());
Console.WriteLine(result.GetProperty("recognitionModel").ToString());
Console.WriteLine(result.GetProperty("faceListId").ToString());
Console.WriteLine(result.GetProperty("persistedFaces")[0].GetProperty("persistedFaceId").ToString());
Console.WriteLine(result.GetProperty("persistedFaces")[0].GetProperty("userData").ToString());
]]></code></example>
    </member>
    <member name="GetFaceList(string,bool?,RequestContext)">
      <example>
This sample shows how to call GetFaceList and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.GetFaceList("<faceListId>", null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("faceListId").ToString());
]]></code>
This sample shows how to call GetFaceList with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.GetFaceList("<faceListId>", true, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("userData").ToString());
Console.WriteLine(result.GetProperty("recognitionModel").ToString());
Console.WriteLine(result.GetProperty("faceListId").ToString());
Console.WriteLine(result.GetProperty("persistedFaces")[0].GetProperty("persistedFaceId").ToString());
Console.WriteLine(result.GetProperty("persistedFaces")[0].GetProperty("userData").ToString());
]]></code></example>
    </member>
    <member name="UpdateFaceListAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call UpdateFaceListAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object());
Response response = await client.UpdateFaceListAsync("<faceListId>", content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call UpdateFaceListAsync with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    userData = "<userData>",
});
Response response = await client.UpdateFaceListAsync("<faceListId>", content);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="UpdateFaceList(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call UpdateFaceList.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object());
Response response = client.UpdateFaceList("<faceListId>", content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call UpdateFaceList with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    userData = "<userData>",
});
Response response = client.UpdateFaceList("<faceListId>", content);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="GetFaceListsAsync(bool?,CancellationToken)">
      <example>
This sample shows how to call GetFaceListsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<IReadOnlyList<FaceListItem>> response = await client.GetFaceListsAsync();
]]></code>
This sample shows how to call GetFaceListsAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<IReadOnlyList<FaceListItem>> response = await client.GetFaceListsAsync(returnRecognitionModel: true);
]]></code></example>
    </member>
    <member name="GetFaceLists(bool?,CancellationToken)">
      <example>
This sample shows how to call GetFaceLists.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<IReadOnlyList<FaceListItem>> response = client.GetFaceLists();
]]></code>
This sample shows how to call GetFaceLists with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<IReadOnlyList<FaceListItem>> response = client.GetFaceLists(returnRecognitionModel: true);
]]></code></example>
    </member>
    <member name="GetFaceListsAsync(bool?,RequestContext)">
      <example>
This sample shows how to call GetFaceListsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.GetFaceListsAsync(null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("faceListId").ToString());
]]></code>
This sample shows how to call GetFaceListsAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.GetFaceListsAsync(true, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("userData").ToString());
Console.WriteLine(result[0].GetProperty("recognitionModel").ToString());
Console.WriteLine(result[0].GetProperty("faceListId").ToString());
]]></code></example>
    </member>
    <member name="GetFaceLists(bool?,RequestContext)">
      <example>
This sample shows how to call GetFaceLists and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.GetFaceLists(null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("faceListId").ToString());
]]></code>
This sample shows how to call GetFaceLists with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.GetFaceLists(true, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("userData").ToString());
Console.WriteLine(result[0].GetProperty("recognitionModel").ToString());
Console.WriteLine(result[0].GetProperty("faceListId").ToString());
]]></code></example>
    </member>
    <member name="AddFaceListFaceFromUrlAsync(string,Uri,IEnumerable{int},FaceDetectionModel?,string,CancellationToken)">
      <example>
This sample shows how to call AddFaceListFaceFromUrlAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<AddFaceResult> response = await client.AddFaceListFaceFromUrlAsync("<faceListId>", new Uri("http://localhost:3000"));
]]></code>
This sample shows how to call AddFaceListFaceFromUrlAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<AddFaceResult> response = await client.AddFaceListFaceFromUrlAsync("<faceListId>", new Uri("http://localhost:3000"), targetFace: new int[] { 1234 }, detectionModel: FaceDetectionModel.Detection01, userData: "<userData>");
]]></code></example>
    </member>
    <member name="AddFaceListFaceFromUrl(string,Uri,IEnumerable{int},FaceDetectionModel?,string,CancellationToken)">
      <example>
This sample shows how to call AddFaceListFaceFromUrl.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<AddFaceResult> response = client.AddFaceListFaceFromUrl("<faceListId>", new Uri("http://localhost:3000"));
]]></code>
This sample shows how to call AddFaceListFaceFromUrl with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<AddFaceResult> response = client.AddFaceListFaceFromUrl("<faceListId>", new Uri("http://localhost:3000"), targetFace: new int[] { 1234 }, detectionModel: FaceDetectionModel.Detection01, userData: "<userData>");
]]></code></example>
    </member>
    <member name="AddFaceListFaceFromUrlAsync(string,RequestContent,IEnumerable{int},string,string,RequestContext)">
      <example>
This sample shows how to call AddFaceListFaceFromUrlAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    url = "http://localhost:3000",
});
Response response = await client.AddFaceListFaceFromUrlAsync("<faceListId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
]]></code>
This sample shows how to call AddFaceListFaceFromUrlAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    url = "http://localhost:3000",
});
Response response = await client.AddFaceListFaceFromUrlAsync("<faceListId>", content, targetFace: new int[] { 1234 }, detectionModel: "detection_01", userData: "<userData>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
]]></code></example>
    </member>
    <member name="AddFaceListFaceFromUrl(string,RequestContent,IEnumerable{int},string,string,RequestContext)">
      <example>
This sample shows how to call AddFaceListFaceFromUrl and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    url = "http://localhost:3000",
});
Response response = client.AddFaceListFaceFromUrl("<faceListId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
]]></code>
This sample shows how to call AddFaceListFaceFromUrl with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    url = "http://localhost:3000",
});
Response response = client.AddFaceListFaceFromUrl("<faceListId>", content, targetFace: new int[] { 1234 }, detectionModel: "detection_01", userData: "<userData>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
]]></code></example>
    </member>
    <member name="AddFaceListFaceAsync(string,BinaryData,IEnumerable{int},FaceDetectionModel?,string,CancellationToken)">
      <example>
This sample shows how to call AddFaceListFaceAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<AddFaceResult> response = await client.AddFaceListFaceAsync("<faceListId>", BinaryData.FromObjectAsJson(new object()));
]]></code>
This sample shows how to call AddFaceListFaceAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<AddFaceResult> response = await client.AddFaceListFaceAsync("<faceListId>", BinaryData.FromObjectAsJson(new object()), targetFace: new int[] { 1234 }, detectionModel: FaceDetectionModel.Detection01, userData: "<userData>");
]]></code></example>
    </member>
    <member name="AddFaceListFace(string,BinaryData,IEnumerable{int},FaceDetectionModel?,string,CancellationToken)">
      <example>
This sample shows how to call AddFaceListFace.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<AddFaceResult> response = client.AddFaceListFace("<faceListId>", BinaryData.FromObjectAsJson(new object()));
]]></code>
This sample shows how to call AddFaceListFace with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<AddFaceResult> response = client.AddFaceListFace("<faceListId>", BinaryData.FromObjectAsJson(new object()), targetFace: new int[] { 1234 }, detectionModel: FaceDetectionModel.Detection01, userData: "<userData>");
]]></code></example>
    </member>
    <member name="AddFaceListFaceAsync(string,RequestContent,IEnumerable{int},string,string,RequestContext)">
      <example>
This sample shows how to call AddFaceListFaceAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object());
Response response = await client.AddFaceListFaceAsync("<faceListId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
]]></code>
This sample shows how to call AddFaceListFaceAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object());
Response response = await client.AddFaceListFaceAsync("<faceListId>", content, targetFace: new int[] { 1234 }, detectionModel: "detection_01", userData: "<userData>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
]]></code></example>
    </member>
    <member name="AddFaceListFace(string,RequestContent,IEnumerable{int},string,string,RequestContext)">
      <example>
This sample shows how to call AddFaceListFace and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object());
Response response = client.AddFaceListFace("<faceListId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
]]></code>
This sample shows how to call AddFaceListFace with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object());
Response response = client.AddFaceListFace("<faceListId>", content, targetFace: new int[] { 1234 }, detectionModel: "detection_01", userData: "<userData>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
]]></code></example>
    </member>
    <member name="DeleteFaceListFaceAsync(string,Guid,RequestContext)">
      <example>
This sample shows how to call DeleteFaceListFaceAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.DeleteFaceListFaceAsync("<faceListId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteFaceListFaceAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.DeleteFaceListFaceAsync("<faceListId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="DeleteFaceListFace(string,Guid,RequestContext)">
      <example>
This sample shows how to call DeleteFaceListFace.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.DeleteFaceListFace("<faceListId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteFaceListFace with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.DeleteFaceListFace("<faceListId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="CreateLargeFaceListAsync(string,string,string,FaceRecognitionModel?,CancellationToken)">
      <example>
This sample shows how to call CreateLargeFaceListAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.CreateLargeFaceListAsync("<largeFaceListId>", "<name>");
]]></code>
This sample shows how to call CreateLargeFaceListAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.CreateLargeFaceListAsync("<largeFaceListId>", "<name>", userData: "<userData>", recognitionModel: FaceRecognitionModel.Recognition01);
]]></code></example>
    </member>
    <member name="CreateLargeFaceList(string,string,string,FaceRecognitionModel?,CancellationToken)">
      <example>
This sample shows how to call CreateLargeFaceList.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.CreateLargeFaceList("<largeFaceListId>", "<name>");
]]></code>
This sample shows how to call CreateLargeFaceList with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.CreateLargeFaceList("<largeFaceListId>", "<name>", userData: "<userData>", recognitionModel: FaceRecognitionModel.Recognition01);
]]></code></example>
    </member>
    <member name="CreateLargeFaceListAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateLargeFaceListAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
});
Response response = await client.CreateLargeFaceListAsync("<largeFaceListId>", content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call CreateLargeFaceListAsync with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    userData = "<userData>",
    recognitionModel = "recognition_01",
});
Response response = await client.CreateLargeFaceListAsync("<largeFaceListId>", content);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="CreateLargeFaceList(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateLargeFaceList.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
});
Response response = client.CreateLargeFaceList("<largeFaceListId>", content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call CreateLargeFaceList with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    userData = "<userData>",
    recognitionModel = "recognition_01",
});
Response response = client.CreateLargeFaceList("<largeFaceListId>", content);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="DeleteLargeFaceListAsync(string,RequestContext)">
      <example>
This sample shows how to call DeleteLargeFaceListAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.DeleteLargeFaceListAsync("<largeFaceListId>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteLargeFaceListAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.DeleteLargeFaceListAsync("<largeFaceListId>");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="DeleteLargeFaceList(string,RequestContext)">
      <example>
This sample shows how to call DeleteLargeFaceList.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.DeleteLargeFaceList("<largeFaceListId>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteLargeFaceList with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.DeleteLargeFaceList("<largeFaceListId>");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="GetLargeFaceListAsync(string,bool?,CancellationToken)">
      <example>
This sample shows how to call GetLargeFaceListAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<LargeFaceList> response = await client.GetLargeFaceListAsync("<largeFaceListId>");
]]></code>
This sample shows how to call GetLargeFaceListAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<LargeFaceList> response = await client.GetLargeFaceListAsync("<largeFaceListId>", returnRecognitionModel: true);
]]></code></example>
    </member>
    <member name="GetLargeFaceList(string,bool?,CancellationToken)">
      <example>
This sample shows how to call GetLargeFaceList.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<LargeFaceList> response = client.GetLargeFaceList("<largeFaceListId>");
]]></code>
This sample shows how to call GetLargeFaceList with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<LargeFaceList> response = client.GetLargeFaceList("<largeFaceListId>", returnRecognitionModel: true);
]]></code></example>
    </member>
    <member name="GetLargeFaceListAsync(string,bool?,RequestContext)">
      <example>
This sample shows how to call GetLargeFaceListAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.GetLargeFaceListAsync("<largeFaceListId>", null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("largeFaceListId").ToString());
]]></code>
This sample shows how to call GetLargeFaceListAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.GetLargeFaceListAsync("<largeFaceListId>", true, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("userData").ToString());
Console.WriteLine(result.GetProperty("recognitionModel").ToString());
Console.WriteLine(result.GetProperty("largeFaceListId").ToString());
]]></code></example>
    </member>
    <member name="GetLargeFaceList(string,bool?,RequestContext)">
      <example>
This sample shows how to call GetLargeFaceList and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.GetLargeFaceList("<largeFaceListId>", null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("largeFaceListId").ToString());
]]></code>
This sample shows how to call GetLargeFaceList with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.GetLargeFaceList("<largeFaceListId>", true, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("userData").ToString());
Console.WriteLine(result.GetProperty("recognitionModel").ToString());
Console.WriteLine(result.GetProperty("largeFaceListId").ToString());
]]></code></example>
    </member>
    <member name="UpdateLargeFaceListAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call UpdateLargeFaceListAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object());
Response response = await client.UpdateLargeFaceListAsync("<largeFaceListId>", content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call UpdateLargeFaceListAsync with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    userData = "<userData>",
});
Response response = await client.UpdateLargeFaceListAsync("<largeFaceListId>", content);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="UpdateLargeFaceList(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call UpdateLargeFaceList.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object());
Response response = client.UpdateLargeFaceList("<largeFaceListId>", content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call UpdateLargeFaceList with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    userData = "<userData>",
});
Response response = client.UpdateLargeFaceList("<largeFaceListId>", content);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="GetLargeFaceListsAsync(string,int?,bool?,CancellationToken)">
      <example>
This sample shows how to call GetLargeFaceListsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<IReadOnlyList<LargeFaceList>> response = await client.GetLargeFaceListsAsync();
]]></code>
This sample shows how to call GetLargeFaceListsAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<IReadOnlyList<LargeFaceList>> response = await client.GetLargeFaceListsAsync(start: "<start>", top: 1234, returnRecognitionModel: true);
]]></code></example>
    </member>
    <member name="GetLargeFaceLists(string,int?,bool?,CancellationToken)">
      <example>
This sample shows how to call GetLargeFaceLists.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<IReadOnlyList<LargeFaceList>> response = client.GetLargeFaceLists();
]]></code>
This sample shows how to call GetLargeFaceLists with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<IReadOnlyList<LargeFaceList>> response = client.GetLargeFaceLists(start: "<start>", top: 1234, returnRecognitionModel: true);
]]></code></example>
    </member>
    <member name="GetLargeFaceListsAsync(string,int?,bool?,RequestContext)">
      <example>
This sample shows how to call GetLargeFaceListsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.GetLargeFaceListsAsync(null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("largeFaceListId").ToString());
]]></code>
This sample shows how to call GetLargeFaceListsAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.GetLargeFaceListsAsync("<start>", 1234, true, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("userData").ToString());
Console.WriteLine(result[0].GetProperty("recognitionModel").ToString());
Console.WriteLine(result[0].GetProperty("largeFaceListId").ToString());
]]></code></example>
    </member>
    <member name="GetLargeFaceLists(string,int?,bool?,RequestContext)">
      <example>
This sample shows how to call GetLargeFaceLists and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.GetLargeFaceLists(null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("largeFaceListId").ToString());
]]></code>
This sample shows how to call GetLargeFaceLists with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.GetLargeFaceLists("<start>", 1234, true, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("userData").ToString());
Console.WriteLine(result[0].GetProperty("recognitionModel").ToString());
Console.WriteLine(result[0].GetProperty("largeFaceListId").ToString());
]]></code></example>
    </member>
    <member name="GetLargeFaceListTrainingStatusAsync(string,CancellationToken)">
      <example>
This sample shows how to call GetLargeFaceListTrainingStatusAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<FaceCollectionTrainingResult> response = await client.GetLargeFaceListTrainingStatusAsync("<largeFaceListId>");
]]></code>
This sample shows how to call GetLargeFaceListTrainingStatusAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<FaceCollectionTrainingResult> response = await client.GetLargeFaceListTrainingStatusAsync("<largeFaceListId>");
]]></code></example>
    </member>
    <member name="GetLargeFaceListTrainingStatus(string,CancellationToken)">
      <example>
This sample shows how to call GetLargeFaceListTrainingStatus.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<FaceCollectionTrainingResult> response = client.GetLargeFaceListTrainingStatus("<largeFaceListId>");
]]></code>
This sample shows how to call GetLargeFaceListTrainingStatus with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<FaceCollectionTrainingResult> response = client.GetLargeFaceListTrainingStatus("<largeFaceListId>");
]]></code></example>
    </member>
    <member name="GetLargeFaceListTrainingStatusAsync(string,RequestContext)">
      <example>
This sample shows how to call GetLargeFaceListTrainingStatusAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.GetLargeFaceListTrainingStatusAsync("<largeFaceListId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("lastSuccessfulTrainingDateTime").ToString());
]]></code>
This sample shows how to call GetLargeFaceListTrainingStatusAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.GetLargeFaceListTrainingStatusAsync("<largeFaceListId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("lastSuccessfulTrainingDateTime").ToString());
Console.WriteLine(result.GetProperty("message").ToString());
]]></code></example>
    </member>
    <member name="GetLargeFaceListTrainingStatus(string,RequestContext)">
      <example>
This sample shows how to call GetLargeFaceListTrainingStatus and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.GetLargeFaceListTrainingStatus("<largeFaceListId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("lastSuccessfulTrainingDateTime").ToString());
]]></code>
This sample shows how to call GetLargeFaceListTrainingStatus with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.GetLargeFaceListTrainingStatus("<largeFaceListId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("lastSuccessfulTrainingDateTime").ToString());
Console.WriteLine(result.GetProperty("message").ToString());
]]></code></example>
    </member>
    <member name="AddLargeFaceListFaceFromUrlAsync(string,Uri,IEnumerable{int},FaceDetectionModel?,string,CancellationToken)">
      <example>
This sample shows how to call AddLargeFaceListFaceFromUrlAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<AddFaceResult> response = await client.AddLargeFaceListFaceFromUrlAsync("<largeFaceListId>", new Uri("http://localhost:3000"));
]]></code>
This sample shows how to call AddLargeFaceListFaceFromUrlAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<AddFaceResult> response = await client.AddLargeFaceListFaceFromUrlAsync("<largeFaceListId>", new Uri("http://localhost:3000"), targetFace: new int[] { 1234 }, detectionModel: FaceDetectionModel.Detection01, userData: "<userData>");
]]></code></example>
    </member>
    <member name="AddLargeFaceListFaceFromUrl(string,Uri,IEnumerable{int},FaceDetectionModel?,string,CancellationToken)">
      <example>
This sample shows how to call AddLargeFaceListFaceFromUrl.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<AddFaceResult> response = client.AddLargeFaceListFaceFromUrl("<largeFaceListId>", new Uri("http://localhost:3000"));
]]></code>
This sample shows how to call AddLargeFaceListFaceFromUrl with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<AddFaceResult> response = client.AddLargeFaceListFaceFromUrl("<largeFaceListId>", new Uri("http://localhost:3000"), targetFace: new int[] { 1234 }, detectionModel: FaceDetectionModel.Detection01, userData: "<userData>");
]]></code></example>
    </member>
    <member name="AddLargeFaceListFaceFromUrlAsync(string,RequestContent,IEnumerable{int},string,string,RequestContext)">
      <example>
This sample shows how to call AddLargeFaceListFaceFromUrlAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    url = "http://localhost:3000",
});
Response response = await client.AddLargeFaceListFaceFromUrlAsync("<largeFaceListId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
]]></code>
This sample shows how to call AddLargeFaceListFaceFromUrlAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    url = "http://localhost:3000",
});
Response response = await client.AddLargeFaceListFaceFromUrlAsync("<largeFaceListId>", content, targetFace: new int[] { 1234 }, detectionModel: "detection_01", userData: "<userData>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
]]></code></example>
    </member>
    <member name="AddLargeFaceListFaceFromUrl(string,RequestContent,IEnumerable{int},string,string,RequestContext)">
      <example>
This sample shows how to call AddLargeFaceListFaceFromUrl and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    url = "http://localhost:3000",
});
Response response = client.AddLargeFaceListFaceFromUrl("<largeFaceListId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
]]></code>
This sample shows how to call AddLargeFaceListFaceFromUrl with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    url = "http://localhost:3000",
});
Response response = client.AddLargeFaceListFaceFromUrl("<largeFaceListId>", content, targetFace: new int[] { 1234 }, detectionModel: "detection_01", userData: "<userData>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
]]></code></example>
    </member>
    <member name="AddLargeFaceListFaceAsync(string,BinaryData,IEnumerable{int},FaceDetectionModel?,string,CancellationToken)">
      <example>
This sample shows how to call AddLargeFaceListFaceAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<AddFaceResult> response = await client.AddLargeFaceListFaceAsync("<largeFaceListId>", BinaryData.FromObjectAsJson(new object()));
]]></code>
This sample shows how to call AddLargeFaceListFaceAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<AddFaceResult> response = await client.AddLargeFaceListFaceAsync("<largeFaceListId>", BinaryData.FromObjectAsJson(new object()), targetFace: new int[] { 1234 }, detectionModel: FaceDetectionModel.Detection01, userData: "<userData>");
]]></code></example>
    </member>
    <member name="AddLargeFaceListFace(string,BinaryData,IEnumerable{int},FaceDetectionModel?,string,CancellationToken)">
      <example>
This sample shows how to call AddLargeFaceListFace.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<AddFaceResult> response = client.AddLargeFaceListFace("<largeFaceListId>", BinaryData.FromObjectAsJson(new object()));
]]></code>
This sample shows how to call AddLargeFaceListFace with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<AddFaceResult> response = client.AddLargeFaceListFace("<largeFaceListId>", BinaryData.FromObjectAsJson(new object()), targetFace: new int[] { 1234 }, detectionModel: FaceDetectionModel.Detection01, userData: "<userData>");
]]></code></example>
    </member>
    <member name="AddLargeFaceListFaceAsync(string,RequestContent,IEnumerable{int},string,string,RequestContext)">
      <example>
This sample shows how to call AddLargeFaceListFaceAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object());
Response response = await client.AddLargeFaceListFaceAsync("<largeFaceListId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
]]></code>
This sample shows how to call AddLargeFaceListFaceAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object());
Response response = await client.AddLargeFaceListFaceAsync("<largeFaceListId>", content, targetFace: new int[] { 1234 }, detectionModel: "detection_01", userData: "<userData>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
]]></code></example>
    </member>
    <member name="AddLargeFaceListFace(string,RequestContent,IEnumerable{int},string,string,RequestContext)">
      <example>
This sample shows how to call AddLargeFaceListFace and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object());
Response response = client.AddLargeFaceListFace("<largeFaceListId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
]]></code>
This sample shows how to call AddLargeFaceListFace with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object());
Response response = client.AddLargeFaceListFace("<largeFaceListId>", content, targetFace: new int[] { 1234 }, detectionModel: "detection_01", userData: "<userData>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
]]></code></example>
    </member>
    <member name="DeleteLargeFaceListFaceAsync(string,Guid,RequestContext)">
      <example>
This sample shows how to call DeleteLargeFaceListFaceAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.DeleteLargeFaceListFaceAsync("<largeFaceListId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteLargeFaceListFaceAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.DeleteLargeFaceListFaceAsync("<largeFaceListId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="DeleteLargeFaceListFace(string,Guid,RequestContext)">
      <example>
This sample shows how to call DeleteLargeFaceListFace.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.DeleteLargeFaceListFace("<largeFaceListId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteLargeFaceListFace with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.DeleteLargeFaceListFace("<largeFaceListId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="GetLargeFaceListFaceAsync(string,Guid,CancellationToken)">
      <example>
This sample shows how to call GetLargeFaceListFaceAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<LargeFaceListFace> response = await client.GetLargeFaceListFaceAsync("<largeFaceListId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
]]></code>
This sample shows how to call GetLargeFaceListFaceAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<LargeFaceListFace> response = await client.GetLargeFaceListFaceAsync("<largeFaceListId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
]]></code></example>
    </member>
    <member name="GetLargeFaceListFace(string,Guid,CancellationToken)">
      <example>
This sample shows how to call GetLargeFaceListFace.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<LargeFaceListFace> response = client.GetLargeFaceListFace("<largeFaceListId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
]]></code>
This sample shows how to call GetLargeFaceListFace with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<LargeFaceListFace> response = client.GetLargeFaceListFace("<largeFaceListId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
]]></code></example>
    </member>
    <member name="GetLargeFaceListFaceAsync(string,Guid,RequestContext)">
      <example>
This sample shows how to call GetLargeFaceListFaceAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.GetLargeFaceListFaceAsync("<largeFaceListId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
]]></code>
This sample shows how to call GetLargeFaceListFaceAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.GetLargeFaceListFaceAsync("<largeFaceListId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
Console.WriteLine(result.GetProperty("userData").ToString());
]]></code></example>
    </member>
    <member name="GetLargeFaceListFace(string,Guid,RequestContext)">
      <example>
This sample shows how to call GetLargeFaceListFace and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.GetLargeFaceListFace("<largeFaceListId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
]]></code>
This sample shows how to call GetLargeFaceListFace with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.GetLargeFaceListFace("<largeFaceListId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
Console.WriteLine(result.GetProperty("userData").ToString());
]]></code></example>
    </member>
    <member name="UpdateLargeFaceListFaceAsync(string,Guid,RequestContent,RequestContext)">
      <example>
This sample shows how to call UpdateLargeFaceListFaceAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object());
Response response = await client.UpdateLargeFaceListFaceAsync("<largeFaceListId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call UpdateLargeFaceListFaceAsync with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    userData = "<userData>",
});
Response response = await client.UpdateLargeFaceListFaceAsync("<largeFaceListId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="UpdateLargeFaceListFace(string,Guid,RequestContent,RequestContext)">
      <example>
This sample shows how to call UpdateLargeFaceListFace.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object());
Response response = client.UpdateLargeFaceListFace("<largeFaceListId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call UpdateLargeFaceListFace with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    userData = "<userData>",
});
Response response = client.UpdateLargeFaceListFace("<largeFaceListId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="GetLargeFaceListFacesAsync(string,string,int?,CancellationToken)">
      <example>
This sample shows how to call GetLargeFaceListFacesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<IReadOnlyList<LargeFaceListFace>> response = await client.GetLargeFaceListFacesAsync("<largeFaceListId>");
]]></code>
This sample shows how to call GetLargeFaceListFacesAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<IReadOnlyList<LargeFaceListFace>> response = await client.GetLargeFaceListFacesAsync("<largeFaceListId>", start: "<start>", top: 1234);
]]></code></example>
    </member>
    <member name="GetLargeFaceListFaces(string,string,int?,CancellationToken)">
      <example>
This sample shows how to call GetLargeFaceListFaces.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<IReadOnlyList<LargeFaceListFace>> response = client.GetLargeFaceListFaces("<largeFaceListId>");
]]></code>
This sample shows how to call GetLargeFaceListFaces with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<IReadOnlyList<LargeFaceListFace>> response = client.GetLargeFaceListFaces("<largeFaceListId>", start: "<start>", top: 1234);
]]></code></example>
    </member>
    <member name="GetLargeFaceListFacesAsync(string,string,int?,RequestContext)">
      <example>
This sample shows how to call GetLargeFaceListFacesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.GetLargeFaceListFacesAsync("<largeFaceListId>", null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("persistedFaceId").ToString());
]]></code>
This sample shows how to call GetLargeFaceListFacesAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.GetLargeFaceListFacesAsync("<largeFaceListId>", "<start>", 1234, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("persistedFaceId").ToString());
Console.WriteLine(result[0].GetProperty("userData").ToString());
]]></code></example>
    </member>
    <member name="GetLargeFaceListFaces(string,string,int?,RequestContext)">
      <example>
This sample shows how to call GetLargeFaceListFaces and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.GetLargeFaceListFaces("<largeFaceListId>", null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("persistedFaceId").ToString());
]]></code>
This sample shows how to call GetLargeFaceListFaces with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.GetLargeFaceListFaces("<largeFaceListId>", "<start>", 1234, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("persistedFaceId").ToString());
Console.WriteLine(result[0].GetProperty("userData").ToString());
]]></code></example>
    </member>
    <member name="CreatePersonGroupAsync(string,string,string,FaceRecognitionModel?,CancellationToken)">
      <example>
This sample shows how to call CreatePersonGroupAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.CreatePersonGroupAsync("<personGroupId>", "<name>");
]]></code>
This sample shows how to call CreatePersonGroupAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.CreatePersonGroupAsync("<personGroupId>", "<name>", userData: "<userData>", recognitionModel: FaceRecognitionModel.Recognition01);
]]></code></example>
    </member>
    <member name="CreatePersonGroup(string,string,string,FaceRecognitionModel?,CancellationToken)">
      <example>
This sample shows how to call CreatePersonGroup.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.CreatePersonGroup("<personGroupId>", "<name>");
]]></code>
This sample shows how to call CreatePersonGroup with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.CreatePersonGroup("<personGroupId>", "<name>", userData: "<userData>", recognitionModel: FaceRecognitionModel.Recognition01);
]]></code></example>
    </member>
    <member name="CreatePersonGroupAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreatePersonGroupAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
});
Response response = await client.CreatePersonGroupAsync("<personGroupId>", content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call CreatePersonGroupAsync with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    userData = "<userData>",
    recognitionModel = "recognition_01",
});
Response response = await client.CreatePersonGroupAsync("<personGroupId>", content);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="CreatePersonGroup(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreatePersonGroup.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
});
Response response = client.CreatePersonGroup("<personGroupId>", content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call CreatePersonGroup with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    userData = "<userData>",
    recognitionModel = "recognition_01",
});
Response response = client.CreatePersonGroup("<personGroupId>", content);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="DeletePersonGroupAsync(string,RequestContext)">
      <example>
This sample shows how to call DeletePersonGroupAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.DeletePersonGroupAsync("<personGroupId>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeletePersonGroupAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.DeletePersonGroupAsync("<personGroupId>");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="DeletePersonGroup(string,RequestContext)">
      <example>
This sample shows how to call DeletePersonGroup.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.DeletePersonGroup("<personGroupId>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeletePersonGroup with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.DeletePersonGroup("<personGroupId>");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="GetPersonGroupAsync(string,bool?,CancellationToken)">
      <example>
This sample shows how to call GetPersonGroupAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<PersonGroup> response = await client.GetPersonGroupAsync("<personGroupId>");
]]></code>
This sample shows how to call GetPersonGroupAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<PersonGroup> response = await client.GetPersonGroupAsync("<personGroupId>", returnRecognitionModel: true);
]]></code></example>
    </member>
    <member name="GetPersonGroup(string,bool?,CancellationToken)">
      <example>
This sample shows how to call GetPersonGroup.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<PersonGroup> response = client.GetPersonGroup("<personGroupId>");
]]></code>
This sample shows how to call GetPersonGroup with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<PersonGroup> response = client.GetPersonGroup("<personGroupId>", returnRecognitionModel: true);
]]></code></example>
    </member>
    <member name="GetPersonGroupAsync(string,bool?,RequestContext)">
      <example>
This sample shows how to call GetPersonGroupAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.GetPersonGroupAsync("<personGroupId>", null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("personGroupId").ToString());
]]></code>
This sample shows how to call GetPersonGroupAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.GetPersonGroupAsync("<personGroupId>", true, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("userData").ToString());
Console.WriteLine(result.GetProperty("recognitionModel").ToString());
Console.WriteLine(result.GetProperty("personGroupId").ToString());
]]></code></example>
    </member>
    <member name="GetPersonGroup(string,bool?,RequestContext)">
      <example>
This sample shows how to call GetPersonGroup and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.GetPersonGroup("<personGroupId>", null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("personGroupId").ToString());
]]></code>
This sample shows how to call GetPersonGroup with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.GetPersonGroup("<personGroupId>", true, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("userData").ToString());
Console.WriteLine(result.GetProperty("recognitionModel").ToString());
Console.WriteLine(result.GetProperty("personGroupId").ToString());
]]></code></example>
    </member>
    <member name="UpdatePersonGroupAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call UpdatePersonGroupAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object());
Response response = await client.UpdatePersonGroupAsync("<personGroupId>", content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call UpdatePersonGroupAsync with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    userData = "<userData>",
});
Response response = await client.UpdatePersonGroupAsync("<personGroupId>", content);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="UpdatePersonGroup(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call UpdatePersonGroup.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object());
Response response = client.UpdatePersonGroup("<personGroupId>", content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call UpdatePersonGroup with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    userData = "<userData>",
});
Response response = client.UpdatePersonGroup("<personGroupId>", content);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="GetPersonGroupsAsync(string,int?,bool?,CancellationToken)">
      <example>
This sample shows how to call GetPersonGroupsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<IReadOnlyList<PersonGroup>> response = await client.GetPersonGroupsAsync();
]]></code>
This sample shows how to call GetPersonGroupsAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<IReadOnlyList<PersonGroup>> response = await client.GetPersonGroupsAsync(start: "<start>", top: 1234, returnRecognitionModel: true);
]]></code></example>
    </member>
    <member name="GetPersonGroups(string,int?,bool?,CancellationToken)">
      <example>
This sample shows how to call GetPersonGroups.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<IReadOnlyList<PersonGroup>> response = client.GetPersonGroups();
]]></code>
This sample shows how to call GetPersonGroups with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<IReadOnlyList<PersonGroup>> response = client.GetPersonGroups(start: "<start>", top: 1234, returnRecognitionModel: true);
]]></code></example>
    </member>
    <member name="GetPersonGroupsAsync(string,int?,bool?,RequestContext)">
      <example>
This sample shows how to call GetPersonGroupsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.GetPersonGroupsAsync(null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("personGroupId").ToString());
]]></code>
This sample shows how to call GetPersonGroupsAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.GetPersonGroupsAsync("<start>", 1234, true, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("userData").ToString());
Console.WriteLine(result[0].GetProperty("recognitionModel").ToString());
Console.WriteLine(result[0].GetProperty("personGroupId").ToString());
]]></code></example>
    </member>
    <member name="GetPersonGroups(string,int?,bool?,RequestContext)">
      <example>
This sample shows how to call GetPersonGroups and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.GetPersonGroups(null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("personGroupId").ToString());
]]></code>
This sample shows how to call GetPersonGroups with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.GetPersonGroups("<start>", 1234, true, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("userData").ToString());
Console.WriteLine(result[0].GetProperty("recognitionModel").ToString());
Console.WriteLine(result[0].GetProperty("personGroupId").ToString());
]]></code></example>
    </member>
    <member name="GetPersonGroupTrainingStatusAsync(string,CancellationToken)">
      <example>
This sample shows how to call GetPersonGroupTrainingStatusAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<FaceCollectionTrainingResult> response = await client.GetPersonGroupTrainingStatusAsync("<personGroupId>");
]]></code>
This sample shows how to call GetPersonGroupTrainingStatusAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<FaceCollectionTrainingResult> response = await client.GetPersonGroupTrainingStatusAsync("<personGroupId>");
]]></code></example>
    </member>
    <member name="GetPersonGroupTrainingStatus(string,CancellationToken)">
      <example>
This sample shows how to call GetPersonGroupTrainingStatus.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<FaceCollectionTrainingResult> response = client.GetPersonGroupTrainingStatus("<personGroupId>");
]]></code>
This sample shows how to call GetPersonGroupTrainingStatus with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<FaceCollectionTrainingResult> response = client.GetPersonGroupTrainingStatus("<personGroupId>");
]]></code></example>
    </member>
    <member name="GetPersonGroupTrainingStatusAsync(string,RequestContext)">
      <example>
This sample shows how to call GetPersonGroupTrainingStatusAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.GetPersonGroupTrainingStatusAsync("<personGroupId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("lastSuccessfulTrainingDateTime").ToString());
]]></code>
This sample shows how to call GetPersonGroupTrainingStatusAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.GetPersonGroupTrainingStatusAsync("<personGroupId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("lastSuccessfulTrainingDateTime").ToString());
Console.WriteLine(result.GetProperty("message").ToString());
]]></code></example>
    </member>
    <member name="GetPersonGroupTrainingStatus(string,RequestContext)">
      <example>
This sample shows how to call GetPersonGroupTrainingStatus and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.GetPersonGroupTrainingStatus("<personGroupId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("lastSuccessfulTrainingDateTime").ToString());
]]></code>
This sample shows how to call GetPersonGroupTrainingStatus with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.GetPersonGroupTrainingStatus("<personGroupId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("lastSuccessfulTrainingDateTime").ToString());
Console.WriteLine(result.GetProperty("message").ToString());
]]></code></example>
    </member>
    <member name="CreatePersonGroupPersonAsync(string,string,string,CancellationToken)">
      <example>
This sample shows how to call CreatePersonGroupPersonAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<CreatePersonResult> response = await client.CreatePersonGroupPersonAsync("<personGroupId>", "<name>");
]]></code>
This sample shows how to call CreatePersonGroupPersonAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<CreatePersonResult> response = await client.CreatePersonGroupPersonAsync("<personGroupId>", "<name>", userData: "<userData>");
]]></code></example>
    </member>
    <member name="CreatePersonGroupPerson(string,string,string,CancellationToken)">
      <example>
This sample shows how to call CreatePersonGroupPerson.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<CreatePersonResult> response = client.CreatePersonGroupPerson("<personGroupId>", "<name>");
]]></code>
This sample shows how to call CreatePersonGroupPerson with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<CreatePersonResult> response = client.CreatePersonGroupPerson("<personGroupId>", "<name>", userData: "<userData>");
]]></code></example>
    </member>
    <member name="CreatePersonGroupPersonAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreatePersonGroupPersonAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
});
Response response = await client.CreatePersonGroupPersonAsync("<personGroupId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("personId").ToString());
]]></code>
This sample shows how to call CreatePersonGroupPersonAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    userData = "<userData>",
});
Response response = await client.CreatePersonGroupPersonAsync("<personGroupId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("personId").ToString());
]]></code></example>
    </member>
    <member name="CreatePersonGroupPerson(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreatePersonGroupPerson and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
});
Response response = client.CreatePersonGroupPerson("<personGroupId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("personId").ToString());
]]></code>
This sample shows how to call CreatePersonGroupPerson with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    userData = "<userData>",
});
Response response = client.CreatePersonGroupPerson("<personGroupId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("personId").ToString());
]]></code></example>
    </member>
    <member name="DeletePersonGroupPersonAsync(string,Guid,RequestContext)">
      <example>
This sample shows how to call DeletePersonGroupPersonAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.DeletePersonGroupPersonAsync("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeletePersonGroupPersonAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.DeletePersonGroupPersonAsync("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="DeletePersonGroupPerson(string,Guid,RequestContext)">
      <example>
This sample shows how to call DeletePersonGroupPerson.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.DeletePersonGroupPerson("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeletePersonGroupPerson with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.DeletePersonGroupPerson("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="GetPersonGroupPersonAsync(string,Guid,CancellationToken)">
      <example>
This sample shows how to call GetPersonGroupPersonAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<PersonGroupPerson> response = await client.GetPersonGroupPersonAsync("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
]]></code>
This sample shows how to call GetPersonGroupPersonAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<PersonGroupPerson> response = await client.GetPersonGroupPersonAsync("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
]]></code></example>
    </member>
    <member name="GetPersonGroupPerson(string,Guid,CancellationToken)">
      <example>
This sample shows how to call GetPersonGroupPerson.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<PersonGroupPerson> response = client.GetPersonGroupPerson("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
]]></code>
This sample shows how to call GetPersonGroupPerson with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<PersonGroupPerson> response = client.GetPersonGroupPerson("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
]]></code></example>
    </member>
    <member name="GetPersonGroupPersonAsync(string,Guid,RequestContext)">
      <example>
This sample shows how to call GetPersonGroupPersonAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.GetPersonGroupPersonAsync("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("personId").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
]]></code>
This sample shows how to call GetPersonGroupPersonAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.GetPersonGroupPersonAsync("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("personId").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("userData").ToString());
Console.WriteLine(result.GetProperty("persistedFaceIds")[0].ToString());
]]></code></example>
    </member>
    <member name="GetPersonGroupPerson(string,Guid,RequestContext)">
      <example>
This sample shows how to call GetPersonGroupPerson and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.GetPersonGroupPerson("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("personId").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
]]></code>
This sample shows how to call GetPersonGroupPerson with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.GetPersonGroupPerson("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("personId").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("userData").ToString());
Console.WriteLine(result.GetProperty("persistedFaceIds")[0].ToString());
]]></code></example>
    </member>
    <member name="UpdatePersonGroupPersonAsync(string,Guid,RequestContent,RequestContext)">
      <example>
This sample shows how to call UpdatePersonGroupPersonAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object());
Response response = await client.UpdatePersonGroupPersonAsync("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call UpdatePersonGroupPersonAsync with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    userData = "<userData>",
});
Response response = await client.UpdatePersonGroupPersonAsync("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="UpdatePersonGroupPerson(string,Guid,RequestContent,RequestContext)">
      <example>
This sample shows how to call UpdatePersonGroupPerson.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object());
Response response = client.UpdatePersonGroupPerson("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call UpdatePersonGroupPerson with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    userData = "<userData>",
});
Response response = client.UpdatePersonGroupPerson("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="GetPersonGroupPersonsAsync(string,string,int?,CancellationToken)">
      <example>
This sample shows how to call GetPersonGroupPersonsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<IReadOnlyList<PersonGroupPerson>> response = await client.GetPersonGroupPersonsAsync("<personGroupId>");
]]></code>
This sample shows how to call GetPersonGroupPersonsAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<IReadOnlyList<PersonGroupPerson>> response = await client.GetPersonGroupPersonsAsync("<personGroupId>", start: "<start>", top: 1234);
]]></code></example>
    </member>
    <member name="GetPersonGroupPersons(string,string,int?,CancellationToken)">
      <example>
This sample shows how to call GetPersonGroupPersons.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<IReadOnlyList<PersonGroupPerson>> response = client.GetPersonGroupPersons("<personGroupId>");
]]></code>
This sample shows how to call GetPersonGroupPersons with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<IReadOnlyList<PersonGroupPerson>> response = client.GetPersonGroupPersons("<personGroupId>", start: "<start>", top: 1234);
]]></code></example>
    </member>
    <member name="GetPersonGroupPersonsAsync(string,string,int?,RequestContext)">
      <example>
This sample shows how to call GetPersonGroupPersonsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.GetPersonGroupPersonsAsync("<personGroupId>", null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("personId").ToString());
Console.WriteLine(result[0].GetProperty("name").ToString());
]]></code>
This sample shows how to call GetPersonGroupPersonsAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.GetPersonGroupPersonsAsync("<personGroupId>", "<start>", 1234, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("personId").ToString());
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("userData").ToString());
Console.WriteLine(result[0].GetProperty("persistedFaceIds")[0].ToString());
]]></code></example>
    </member>
    <member name="GetPersonGroupPersons(string,string,int?,RequestContext)">
      <example>
This sample shows how to call GetPersonGroupPersons and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.GetPersonGroupPersons("<personGroupId>", null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("personId").ToString());
Console.WriteLine(result[0].GetProperty("name").ToString());
]]></code>
This sample shows how to call GetPersonGroupPersons with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.GetPersonGroupPersons("<personGroupId>", "<start>", 1234, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("personId").ToString());
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("userData").ToString());
Console.WriteLine(result[0].GetProperty("persistedFaceIds")[0].ToString());
]]></code></example>
    </member>
    <member name="AddPersonGroupPersonFaceFromUrlAsync(string,Guid,Uri,IEnumerable{int},FaceDetectionModel?,string,CancellationToken)">
      <example>
This sample shows how to call AddPersonGroupPersonFaceFromUrlAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<AddFaceResult> response = await client.AddPersonGroupPersonFaceFromUrlAsync("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), new Uri("http://localhost:3000"));
]]></code>
This sample shows how to call AddPersonGroupPersonFaceFromUrlAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<AddFaceResult> response = await client.AddPersonGroupPersonFaceFromUrlAsync("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), new Uri("http://localhost:3000"), targetFace: new int[] { 1234 }, detectionModel: FaceDetectionModel.Detection01, userData: "<userData>");
]]></code></example>
    </member>
    <member name="AddPersonGroupPersonFaceFromUrl(string,Guid,Uri,IEnumerable{int},FaceDetectionModel?,string,CancellationToken)">
      <example>
This sample shows how to call AddPersonGroupPersonFaceFromUrl.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<AddFaceResult> response = client.AddPersonGroupPersonFaceFromUrl("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), new Uri("http://localhost:3000"));
]]></code>
This sample shows how to call AddPersonGroupPersonFaceFromUrl with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<AddFaceResult> response = client.AddPersonGroupPersonFaceFromUrl("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), new Uri("http://localhost:3000"), targetFace: new int[] { 1234 }, detectionModel: FaceDetectionModel.Detection01, userData: "<userData>");
]]></code></example>
    </member>
    <member name="AddPersonGroupPersonFaceFromUrlAsync(string,Guid,RequestContent,IEnumerable{int},string,string,RequestContext)">
      <example>
This sample shows how to call AddPersonGroupPersonFaceFromUrlAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    url = "http://localhost:3000",
});
Response response = await client.AddPersonGroupPersonFaceFromUrlAsync("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
]]></code>
This sample shows how to call AddPersonGroupPersonFaceFromUrlAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    url = "http://localhost:3000",
});
Response response = await client.AddPersonGroupPersonFaceFromUrlAsync("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content, targetFace: new int[] { 1234 }, detectionModel: "detection_01", userData: "<userData>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
]]></code></example>
    </member>
    <member name="AddPersonGroupPersonFaceFromUrl(string,Guid,RequestContent,IEnumerable{int},string,string,RequestContext)">
      <example>
This sample shows how to call AddPersonGroupPersonFaceFromUrl and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    url = "http://localhost:3000",
});
Response response = client.AddPersonGroupPersonFaceFromUrl("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
]]></code>
This sample shows how to call AddPersonGroupPersonFaceFromUrl with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    url = "http://localhost:3000",
});
Response response = client.AddPersonGroupPersonFaceFromUrl("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content, targetFace: new int[] { 1234 }, detectionModel: "detection_01", userData: "<userData>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
]]></code></example>
    </member>
    <member name="AddPersonGroupPersonFaceAsync(string,Guid,BinaryData,IEnumerable{int},FaceDetectionModel?,string,CancellationToken)">
      <example>
This sample shows how to call AddPersonGroupPersonFaceAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<AddFaceResult> response = await client.AddPersonGroupPersonFaceAsync("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), BinaryData.FromObjectAsJson(new object()));
]]></code>
This sample shows how to call AddPersonGroupPersonFaceAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<AddFaceResult> response = await client.AddPersonGroupPersonFaceAsync("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), BinaryData.FromObjectAsJson(new object()), targetFace: new int[] { 1234 }, detectionModel: FaceDetectionModel.Detection01, userData: "<userData>");
]]></code></example>
    </member>
    <member name="AddPersonGroupPersonFace(string,Guid,BinaryData,IEnumerable{int},FaceDetectionModel?,string,CancellationToken)">
      <example>
This sample shows how to call AddPersonGroupPersonFace.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<AddFaceResult> response = client.AddPersonGroupPersonFace("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), BinaryData.FromObjectAsJson(new object()));
]]></code>
This sample shows how to call AddPersonGroupPersonFace with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<AddFaceResult> response = client.AddPersonGroupPersonFace("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), BinaryData.FromObjectAsJson(new object()), targetFace: new int[] { 1234 }, detectionModel: FaceDetectionModel.Detection01, userData: "<userData>");
]]></code></example>
    </member>
    <member name="AddPersonGroupPersonFaceAsync(string,Guid,RequestContent,IEnumerable{int},string,string,RequestContext)">
      <example>
This sample shows how to call AddPersonGroupPersonFaceAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object());
Response response = await client.AddPersonGroupPersonFaceAsync("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
]]></code>
This sample shows how to call AddPersonGroupPersonFaceAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object());
Response response = await client.AddPersonGroupPersonFaceAsync("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content, targetFace: new int[] { 1234 }, detectionModel: "detection_01", userData: "<userData>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
]]></code></example>
    </member>
    <member name="AddPersonGroupPersonFace(string,Guid,RequestContent,IEnumerable{int},string,string,RequestContext)">
      <example>
This sample shows how to call AddPersonGroupPersonFace and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object());
Response response = client.AddPersonGroupPersonFace("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
]]></code>
This sample shows how to call AddPersonGroupPersonFace with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object());
Response response = client.AddPersonGroupPersonFace("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content, targetFace: new int[] { 1234 }, detectionModel: "detection_01", userData: "<userData>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
]]></code></example>
    </member>
    <member name="DeletePersonGroupPersonFaceAsync(string,Guid,Guid,RequestContext)">
      <example>
This sample shows how to call DeletePersonGroupPersonFaceAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.DeletePersonGroupPersonFaceAsync("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeletePersonGroupPersonFaceAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.DeletePersonGroupPersonFaceAsync("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="DeletePersonGroupPersonFace(string,Guid,Guid,RequestContext)">
      <example>
This sample shows how to call DeletePersonGroupPersonFace.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.DeletePersonGroupPersonFace("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeletePersonGroupPersonFace with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.DeletePersonGroupPersonFace("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="GetPersonGroupPersonFaceAsync(string,Guid,Guid,CancellationToken)">
      <example>
This sample shows how to call GetPersonGroupPersonFaceAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<PersonGroupPersonFace> response = await client.GetPersonGroupPersonFaceAsync("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
]]></code>
This sample shows how to call GetPersonGroupPersonFaceAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<PersonGroupPersonFace> response = await client.GetPersonGroupPersonFaceAsync("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
]]></code></example>
    </member>
    <member name="GetPersonGroupPersonFace(string,Guid,Guid,CancellationToken)">
      <example>
This sample shows how to call GetPersonGroupPersonFace.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<PersonGroupPersonFace> response = client.GetPersonGroupPersonFace("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
]]></code>
This sample shows how to call GetPersonGroupPersonFace with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<PersonGroupPersonFace> response = client.GetPersonGroupPersonFace("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
]]></code></example>
    </member>
    <member name="GetPersonGroupPersonFaceAsync(string,Guid,Guid,RequestContext)">
      <example>
This sample shows how to call GetPersonGroupPersonFaceAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.GetPersonGroupPersonFaceAsync("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
]]></code>
This sample shows how to call GetPersonGroupPersonFaceAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.GetPersonGroupPersonFaceAsync("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
Console.WriteLine(result.GetProperty("userData").ToString());
]]></code></example>
    </member>
    <member name="GetPersonGroupPersonFace(string,Guid,Guid,RequestContext)">
      <example>
This sample shows how to call GetPersonGroupPersonFace and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.GetPersonGroupPersonFace("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
]]></code>
This sample shows how to call GetPersonGroupPersonFace with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.GetPersonGroupPersonFace("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
Console.WriteLine(result.GetProperty("userData").ToString());
]]></code></example>
    </member>
    <member name="UpdatePersonGroupPersonFaceAsync(string,Guid,Guid,RequestContent,RequestContext)">
      <example>
This sample shows how to call UpdatePersonGroupPersonFaceAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object());
Response response = await client.UpdatePersonGroupPersonFaceAsync("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call UpdatePersonGroupPersonFaceAsync with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    userData = "<userData>",
});
Response response = await client.UpdatePersonGroupPersonFaceAsync("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="UpdatePersonGroupPersonFace(string,Guid,Guid,RequestContent,RequestContext)">
      <example>
This sample shows how to call UpdatePersonGroupPersonFace.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object());
Response response = client.UpdatePersonGroupPersonFace("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call UpdatePersonGroupPersonFace with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    userData = "<userData>",
});
Response response = client.UpdatePersonGroupPersonFace("<personGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="CreateLargePersonGroupAsync(string,string,string,FaceRecognitionModel?,CancellationToken)">
      <example>
This sample shows how to call CreateLargePersonGroupAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.CreateLargePersonGroupAsync("<largePersonGroupId>", "<name>");
]]></code>
This sample shows how to call CreateLargePersonGroupAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.CreateLargePersonGroupAsync("<largePersonGroupId>", "<name>", userData: "<userData>", recognitionModel: FaceRecognitionModel.Recognition01);
]]></code></example>
    </member>
    <member name="CreateLargePersonGroup(string,string,string,FaceRecognitionModel?,CancellationToken)">
      <example>
This sample shows how to call CreateLargePersonGroup.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.CreateLargePersonGroup("<largePersonGroupId>", "<name>");
]]></code>
This sample shows how to call CreateLargePersonGroup with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.CreateLargePersonGroup("<largePersonGroupId>", "<name>", userData: "<userData>", recognitionModel: FaceRecognitionModel.Recognition01);
]]></code></example>
    </member>
    <member name="CreateLargePersonGroupAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateLargePersonGroupAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
});
Response response = await client.CreateLargePersonGroupAsync("<largePersonGroupId>", content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call CreateLargePersonGroupAsync with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    userData = "<userData>",
    recognitionModel = "recognition_01",
});
Response response = await client.CreateLargePersonGroupAsync("<largePersonGroupId>", content);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="CreateLargePersonGroup(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateLargePersonGroup.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
});
Response response = client.CreateLargePersonGroup("<largePersonGroupId>", content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call CreateLargePersonGroup with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    userData = "<userData>",
    recognitionModel = "recognition_01",
});
Response response = client.CreateLargePersonGroup("<largePersonGroupId>", content);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="DeleteLargePersonGroupAsync(string,RequestContext)">
      <example>
This sample shows how to call DeleteLargePersonGroupAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.DeleteLargePersonGroupAsync("<largePersonGroupId>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteLargePersonGroupAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.DeleteLargePersonGroupAsync("<largePersonGroupId>");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="DeleteLargePersonGroup(string,RequestContext)">
      <example>
This sample shows how to call DeleteLargePersonGroup.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.DeleteLargePersonGroup("<largePersonGroupId>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteLargePersonGroup with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.DeleteLargePersonGroup("<largePersonGroupId>");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="GetLargePersonGroupAsync(string,bool?,CancellationToken)">
      <example>
This sample shows how to call GetLargePersonGroupAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<LargePersonGroup> response = await client.GetLargePersonGroupAsync("<largePersonGroupId>");
]]></code>
This sample shows how to call GetLargePersonGroupAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<LargePersonGroup> response = await client.GetLargePersonGroupAsync("<largePersonGroupId>", returnRecognitionModel: true);
]]></code></example>
    </member>
    <member name="GetLargePersonGroup(string,bool?,CancellationToken)">
      <example>
This sample shows how to call GetLargePersonGroup.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<LargePersonGroup> response = client.GetLargePersonGroup("<largePersonGroupId>");
]]></code>
This sample shows how to call GetLargePersonGroup with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<LargePersonGroup> response = client.GetLargePersonGroup("<largePersonGroupId>", returnRecognitionModel: true);
]]></code></example>
    </member>
    <member name="GetLargePersonGroupAsync(string,bool?,RequestContext)">
      <example>
This sample shows how to call GetLargePersonGroupAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.GetLargePersonGroupAsync("<largePersonGroupId>", null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("largePersonGroupId").ToString());
]]></code>
This sample shows how to call GetLargePersonGroupAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.GetLargePersonGroupAsync("<largePersonGroupId>", true, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("userData").ToString());
Console.WriteLine(result.GetProperty("recognitionModel").ToString());
Console.WriteLine(result.GetProperty("largePersonGroupId").ToString());
]]></code></example>
    </member>
    <member name="GetLargePersonGroup(string,bool?,RequestContext)">
      <example>
This sample shows how to call GetLargePersonGroup and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.GetLargePersonGroup("<largePersonGroupId>", null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("largePersonGroupId").ToString());
]]></code>
This sample shows how to call GetLargePersonGroup with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.GetLargePersonGroup("<largePersonGroupId>", true, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("userData").ToString());
Console.WriteLine(result.GetProperty("recognitionModel").ToString());
Console.WriteLine(result.GetProperty("largePersonGroupId").ToString());
]]></code></example>
    </member>
    <member name="UpdateLargePersonGroupAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call UpdateLargePersonGroupAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object());
Response response = await client.UpdateLargePersonGroupAsync("<largePersonGroupId>", content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call UpdateLargePersonGroupAsync with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    userData = "<userData>",
});
Response response = await client.UpdateLargePersonGroupAsync("<largePersonGroupId>", content);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="UpdateLargePersonGroup(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call UpdateLargePersonGroup.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object());
Response response = client.UpdateLargePersonGroup("<largePersonGroupId>", content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call UpdateLargePersonGroup with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    userData = "<userData>",
});
Response response = client.UpdateLargePersonGroup("<largePersonGroupId>", content);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="GetLargePersonGroupsAsync(string,int?,bool?,CancellationToken)">
      <example>
This sample shows how to call GetLargePersonGroupsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<IReadOnlyList<LargePersonGroup>> response = await client.GetLargePersonGroupsAsync();
]]></code>
This sample shows how to call GetLargePersonGroupsAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<IReadOnlyList<LargePersonGroup>> response = await client.GetLargePersonGroupsAsync(start: "<start>", top: 1234, returnRecognitionModel: true);
]]></code></example>
    </member>
    <member name="GetLargePersonGroups(string,int?,bool?,CancellationToken)">
      <example>
This sample shows how to call GetLargePersonGroups.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<IReadOnlyList<LargePersonGroup>> response = client.GetLargePersonGroups();
]]></code>
This sample shows how to call GetLargePersonGroups with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<IReadOnlyList<LargePersonGroup>> response = client.GetLargePersonGroups(start: "<start>", top: 1234, returnRecognitionModel: true);
]]></code></example>
    </member>
    <member name="GetLargePersonGroupsAsync(string,int?,bool?,RequestContext)">
      <example>
This sample shows how to call GetLargePersonGroupsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.GetLargePersonGroupsAsync(null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("largePersonGroupId").ToString());
]]></code>
This sample shows how to call GetLargePersonGroupsAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.GetLargePersonGroupsAsync("<start>", 1234, true, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("userData").ToString());
Console.WriteLine(result[0].GetProperty("recognitionModel").ToString());
Console.WriteLine(result[0].GetProperty("largePersonGroupId").ToString());
]]></code></example>
    </member>
    <member name="GetLargePersonGroups(string,int?,bool?,RequestContext)">
      <example>
This sample shows how to call GetLargePersonGroups and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.GetLargePersonGroups(null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("largePersonGroupId").ToString());
]]></code>
This sample shows how to call GetLargePersonGroups with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.GetLargePersonGroups("<start>", 1234, true, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("userData").ToString());
Console.WriteLine(result[0].GetProperty("recognitionModel").ToString());
Console.WriteLine(result[0].GetProperty("largePersonGroupId").ToString());
]]></code></example>
    </member>
    <member name="GetLargePersonGroupTrainingStatusAsync(string,CancellationToken)">
      <example>
This sample shows how to call GetLargePersonGroupTrainingStatusAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<FaceCollectionTrainingResult> response = await client.GetLargePersonGroupTrainingStatusAsync("<largePersonGroupId>");
]]></code>
This sample shows how to call GetLargePersonGroupTrainingStatusAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<FaceCollectionTrainingResult> response = await client.GetLargePersonGroupTrainingStatusAsync("<largePersonGroupId>");
]]></code></example>
    </member>
    <member name="GetLargePersonGroupTrainingStatus(string,CancellationToken)">
      <example>
This sample shows how to call GetLargePersonGroupTrainingStatus.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<FaceCollectionTrainingResult> response = client.GetLargePersonGroupTrainingStatus("<largePersonGroupId>");
]]></code>
This sample shows how to call GetLargePersonGroupTrainingStatus with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<FaceCollectionTrainingResult> response = client.GetLargePersonGroupTrainingStatus("<largePersonGroupId>");
]]></code></example>
    </member>
    <member name="GetLargePersonGroupTrainingStatusAsync(string,RequestContext)">
      <example>
This sample shows how to call GetLargePersonGroupTrainingStatusAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.GetLargePersonGroupTrainingStatusAsync("<largePersonGroupId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("lastSuccessfulTrainingDateTime").ToString());
]]></code>
This sample shows how to call GetLargePersonGroupTrainingStatusAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.GetLargePersonGroupTrainingStatusAsync("<largePersonGroupId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("lastSuccessfulTrainingDateTime").ToString());
Console.WriteLine(result.GetProperty("message").ToString());
]]></code></example>
    </member>
    <member name="GetLargePersonGroupTrainingStatus(string,RequestContext)">
      <example>
This sample shows how to call GetLargePersonGroupTrainingStatus and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.GetLargePersonGroupTrainingStatus("<largePersonGroupId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("lastSuccessfulTrainingDateTime").ToString());
]]></code>
This sample shows how to call GetLargePersonGroupTrainingStatus with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.GetLargePersonGroupTrainingStatus("<largePersonGroupId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("lastSuccessfulTrainingDateTime").ToString());
Console.WriteLine(result.GetProperty("message").ToString());
]]></code></example>
    </member>
    <member name="CreateLargePersonGroupPersonAsync(string,string,string,CancellationToken)">
      <example>
This sample shows how to call CreateLargePersonGroupPersonAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<CreatePersonResult> response = await client.CreateLargePersonGroupPersonAsync("<largePersonGroupId>", "<name>");
]]></code>
This sample shows how to call CreateLargePersonGroupPersonAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<CreatePersonResult> response = await client.CreateLargePersonGroupPersonAsync("<largePersonGroupId>", "<name>", userData: "<userData>");
]]></code></example>
    </member>
    <member name="CreateLargePersonGroupPerson(string,string,string,CancellationToken)">
      <example>
This sample shows how to call CreateLargePersonGroupPerson.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<CreatePersonResult> response = client.CreateLargePersonGroupPerson("<largePersonGroupId>", "<name>");
]]></code>
This sample shows how to call CreateLargePersonGroupPerson with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<CreatePersonResult> response = client.CreateLargePersonGroupPerson("<largePersonGroupId>", "<name>", userData: "<userData>");
]]></code></example>
    </member>
    <member name="CreateLargePersonGroupPersonAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateLargePersonGroupPersonAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
});
Response response = await client.CreateLargePersonGroupPersonAsync("<largePersonGroupId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("personId").ToString());
]]></code>
This sample shows how to call CreateLargePersonGroupPersonAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    userData = "<userData>",
});
Response response = await client.CreateLargePersonGroupPersonAsync("<largePersonGroupId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("personId").ToString());
]]></code></example>
    </member>
    <member name="CreateLargePersonGroupPerson(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateLargePersonGroupPerson and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
});
Response response = client.CreateLargePersonGroupPerson("<largePersonGroupId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("personId").ToString());
]]></code>
This sample shows how to call CreateLargePersonGroupPerson with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    userData = "<userData>",
});
Response response = client.CreateLargePersonGroupPerson("<largePersonGroupId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("personId").ToString());
]]></code></example>
    </member>
    <member name="DeleteLargePersonGroupPersonAsync(string,Guid,RequestContext)">
      <example>
This sample shows how to call DeleteLargePersonGroupPersonAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.DeleteLargePersonGroupPersonAsync("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteLargePersonGroupPersonAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.DeleteLargePersonGroupPersonAsync("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="DeleteLargePersonGroupPerson(string,Guid,RequestContext)">
      <example>
This sample shows how to call DeleteLargePersonGroupPerson.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.DeleteLargePersonGroupPerson("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteLargePersonGroupPerson with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.DeleteLargePersonGroupPerson("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="GetLargePersonGroupPersonAsync(string,Guid,CancellationToken)">
      <example>
This sample shows how to call GetLargePersonGroupPersonAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<LargePersonGroupPerson> response = await client.GetLargePersonGroupPersonAsync("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
]]></code>
This sample shows how to call GetLargePersonGroupPersonAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<LargePersonGroupPerson> response = await client.GetLargePersonGroupPersonAsync("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
]]></code></example>
    </member>
    <member name="GetLargePersonGroupPerson(string,Guid,CancellationToken)">
      <example>
This sample shows how to call GetLargePersonGroupPerson.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<LargePersonGroupPerson> response = client.GetLargePersonGroupPerson("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
]]></code>
This sample shows how to call GetLargePersonGroupPerson with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<LargePersonGroupPerson> response = client.GetLargePersonGroupPerson("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
]]></code></example>
    </member>
    <member name="GetLargePersonGroupPersonAsync(string,Guid,RequestContext)">
      <example>
This sample shows how to call GetLargePersonGroupPersonAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.GetLargePersonGroupPersonAsync("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("personId").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
]]></code>
This sample shows how to call GetLargePersonGroupPersonAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.GetLargePersonGroupPersonAsync("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("personId").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("userData").ToString());
Console.WriteLine(result.GetProperty("persistedFaceIds")[0].ToString());
]]></code></example>
    </member>
    <member name="GetLargePersonGroupPerson(string,Guid,RequestContext)">
      <example>
This sample shows how to call GetLargePersonGroupPerson and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.GetLargePersonGroupPerson("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("personId").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
]]></code>
This sample shows how to call GetLargePersonGroupPerson with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.GetLargePersonGroupPerson("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("personId").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("userData").ToString());
Console.WriteLine(result.GetProperty("persistedFaceIds")[0].ToString());
]]></code></example>
    </member>
    <member name="UpdateLargePersonGroupPersonAsync(string,Guid,RequestContent,RequestContext)">
      <example>
This sample shows how to call UpdateLargePersonGroupPersonAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object());
Response response = await client.UpdateLargePersonGroupPersonAsync("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call UpdateLargePersonGroupPersonAsync with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    userData = "<userData>",
});
Response response = await client.UpdateLargePersonGroupPersonAsync("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="UpdateLargePersonGroupPerson(string,Guid,RequestContent,RequestContext)">
      <example>
This sample shows how to call UpdateLargePersonGroupPerson.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object());
Response response = client.UpdateLargePersonGroupPerson("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call UpdateLargePersonGroupPerson with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    userData = "<userData>",
});
Response response = client.UpdateLargePersonGroupPerson("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="GetLargePersonGroupPersonsAsync(string,string,int?,CancellationToken)">
      <example>
This sample shows how to call GetLargePersonGroupPersonsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<IReadOnlyList<LargePersonGroupPerson>> response = await client.GetLargePersonGroupPersonsAsync("<largePersonGroupId>");
]]></code>
This sample shows how to call GetLargePersonGroupPersonsAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<IReadOnlyList<LargePersonGroupPerson>> response = await client.GetLargePersonGroupPersonsAsync("<largePersonGroupId>", start: "<start>", top: 1234);
]]></code></example>
    </member>
    <member name="GetLargePersonGroupPersons(string,string,int?,CancellationToken)">
      <example>
This sample shows how to call GetLargePersonGroupPersons.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<IReadOnlyList<LargePersonGroupPerson>> response = client.GetLargePersonGroupPersons("<largePersonGroupId>");
]]></code>
This sample shows how to call GetLargePersonGroupPersons with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<IReadOnlyList<LargePersonGroupPerson>> response = client.GetLargePersonGroupPersons("<largePersonGroupId>", start: "<start>", top: 1234);
]]></code></example>
    </member>
    <member name="GetLargePersonGroupPersonsAsync(string,string,int?,RequestContext)">
      <example>
This sample shows how to call GetLargePersonGroupPersonsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.GetLargePersonGroupPersonsAsync("<largePersonGroupId>", null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("personId").ToString());
Console.WriteLine(result[0].GetProperty("name").ToString());
]]></code>
This sample shows how to call GetLargePersonGroupPersonsAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.GetLargePersonGroupPersonsAsync("<largePersonGroupId>", "<start>", 1234, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("personId").ToString());
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("userData").ToString());
Console.WriteLine(result[0].GetProperty("persistedFaceIds")[0].ToString());
]]></code></example>
    </member>
    <member name="GetLargePersonGroupPersons(string,string,int?,RequestContext)">
      <example>
This sample shows how to call GetLargePersonGroupPersons and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.GetLargePersonGroupPersons("<largePersonGroupId>", null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("personId").ToString());
Console.WriteLine(result[0].GetProperty("name").ToString());
]]></code>
This sample shows how to call GetLargePersonGroupPersons with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.GetLargePersonGroupPersons("<largePersonGroupId>", "<start>", 1234, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("personId").ToString());
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("userData").ToString());
Console.WriteLine(result[0].GetProperty("persistedFaceIds")[0].ToString());
]]></code></example>
    </member>
    <member name="AddLargePersonGroupPersonFaceFromUrlAsync(string,Guid,Uri,IEnumerable{int},FaceDetectionModel?,string,CancellationToken)">
      <example>
This sample shows how to call AddLargePersonGroupPersonFaceFromUrlAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<AddFaceResult> response = await client.AddLargePersonGroupPersonFaceFromUrlAsync("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), new Uri("http://localhost:3000"));
]]></code>
This sample shows how to call AddLargePersonGroupPersonFaceFromUrlAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<AddFaceResult> response = await client.AddLargePersonGroupPersonFaceFromUrlAsync("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), new Uri("http://localhost:3000"), targetFace: new int[] { 1234 }, detectionModel: FaceDetectionModel.Detection01, userData: "<userData>");
]]></code></example>
    </member>
    <member name="AddLargePersonGroupPersonFaceFromUrl(string,Guid,Uri,IEnumerable{int},FaceDetectionModel?,string,CancellationToken)">
      <example>
This sample shows how to call AddLargePersonGroupPersonFaceFromUrl.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<AddFaceResult> response = client.AddLargePersonGroupPersonFaceFromUrl("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), new Uri("http://localhost:3000"));
]]></code>
This sample shows how to call AddLargePersonGroupPersonFaceFromUrl with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<AddFaceResult> response = client.AddLargePersonGroupPersonFaceFromUrl("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), new Uri("http://localhost:3000"), targetFace: new int[] { 1234 }, detectionModel: FaceDetectionModel.Detection01, userData: "<userData>");
]]></code></example>
    </member>
    <member name="AddLargePersonGroupPersonFaceFromUrlAsync(string,Guid,RequestContent,IEnumerable{int},string,string,RequestContext)">
      <example>
This sample shows how to call AddLargePersonGroupPersonFaceFromUrlAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    url = "http://localhost:3000",
});
Response response = await client.AddLargePersonGroupPersonFaceFromUrlAsync("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
]]></code>
This sample shows how to call AddLargePersonGroupPersonFaceFromUrlAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    url = "http://localhost:3000",
});
Response response = await client.AddLargePersonGroupPersonFaceFromUrlAsync("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content, targetFace: new int[] { 1234 }, detectionModel: "detection_01", userData: "<userData>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
]]></code></example>
    </member>
    <member name="AddLargePersonGroupPersonFaceFromUrl(string,Guid,RequestContent,IEnumerable{int},string,string,RequestContext)">
      <example>
This sample shows how to call AddLargePersonGroupPersonFaceFromUrl and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    url = "http://localhost:3000",
});
Response response = client.AddLargePersonGroupPersonFaceFromUrl("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
]]></code>
This sample shows how to call AddLargePersonGroupPersonFaceFromUrl with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    url = "http://localhost:3000",
});
Response response = client.AddLargePersonGroupPersonFaceFromUrl("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content, targetFace: new int[] { 1234 }, detectionModel: "detection_01", userData: "<userData>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
]]></code></example>
    </member>
    <member name="AddLargePersonGroupPersonFaceAsync(string,Guid,BinaryData,IEnumerable{int},FaceDetectionModel?,string,CancellationToken)">
      <example>
This sample shows how to call AddLargePersonGroupPersonFaceAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<AddFaceResult> response = await client.AddLargePersonGroupPersonFaceAsync("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), BinaryData.FromObjectAsJson(new object()));
]]></code>
This sample shows how to call AddLargePersonGroupPersonFaceAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<AddFaceResult> response = await client.AddLargePersonGroupPersonFaceAsync("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), BinaryData.FromObjectAsJson(new object()), targetFace: new int[] { 1234 }, detectionModel: FaceDetectionModel.Detection01, userData: "<userData>");
]]></code></example>
    </member>
    <member name="AddLargePersonGroupPersonFace(string,Guid,BinaryData,IEnumerable{int},FaceDetectionModel?,string,CancellationToken)">
      <example>
This sample shows how to call AddLargePersonGroupPersonFace.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<AddFaceResult> response = client.AddLargePersonGroupPersonFace("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), BinaryData.FromObjectAsJson(new object()));
]]></code>
This sample shows how to call AddLargePersonGroupPersonFace with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<AddFaceResult> response = client.AddLargePersonGroupPersonFace("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), BinaryData.FromObjectAsJson(new object()), targetFace: new int[] { 1234 }, detectionModel: FaceDetectionModel.Detection01, userData: "<userData>");
]]></code></example>
    </member>
    <member name="AddLargePersonGroupPersonFaceAsync(string,Guid,RequestContent,IEnumerable{int},string,string,RequestContext)">
      <example>
This sample shows how to call AddLargePersonGroupPersonFaceAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object());
Response response = await client.AddLargePersonGroupPersonFaceAsync("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
]]></code>
This sample shows how to call AddLargePersonGroupPersonFaceAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object());
Response response = await client.AddLargePersonGroupPersonFaceAsync("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content, targetFace: new int[] { 1234 }, detectionModel: "detection_01", userData: "<userData>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
]]></code></example>
    </member>
    <member name="AddLargePersonGroupPersonFace(string,Guid,RequestContent,IEnumerable{int},string,string,RequestContext)">
      <example>
This sample shows how to call AddLargePersonGroupPersonFace and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object());
Response response = client.AddLargePersonGroupPersonFace("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
]]></code>
This sample shows how to call AddLargePersonGroupPersonFace with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object());
Response response = client.AddLargePersonGroupPersonFace("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content, targetFace: new int[] { 1234 }, detectionModel: "detection_01", userData: "<userData>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
]]></code></example>
    </member>
    <member name="DeleteLargePersonGroupPersonFaceAsync(string,Guid,Guid,RequestContext)">
      <example>
This sample shows how to call DeleteLargePersonGroupPersonFaceAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.DeleteLargePersonGroupPersonFaceAsync("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteLargePersonGroupPersonFaceAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.DeleteLargePersonGroupPersonFaceAsync("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="DeleteLargePersonGroupPersonFace(string,Guid,Guid,RequestContext)">
      <example>
This sample shows how to call DeleteLargePersonGroupPersonFace.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.DeleteLargePersonGroupPersonFace("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteLargePersonGroupPersonFace with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.DeleteLargePersonGroupPersonFace("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="GetLargePersonGroupPersonFaceAsync(string,Guid,Guid,CancellationToken)">
      <example>
This sample shows how to call GetLargePersonGroupPersonFaceAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<LargePersonGroupPersonFace> response = await client.GetLargePersonGroupPersonFaceAsync("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
]]></code>
This sample shows how to call GetLargePersonGroupPersonFaceAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<LargePersonGroupPersonFace> response = await client.GetLargePersonGroupPersonFaceAsync("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
]]></code></example>
    </member>
    <member name="GetLargePersonGroupPersonFace(string,Guid,Guid,CancellationToken)">
      <example>
This sample shows how to call GetLargePersonGroupPersonFace.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<LargePersonGroupPersonFace> response = client.GetLargePersonGroupPersonFace("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
]]></code>
This sample shows how to call GetLargePersonGroupPersonFace with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<LargePersonGroupPersonFace> response = client.GetLargePersonGroupPersonFace("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
]]></code></example>
    </member>
    <member name="GetLargePersonGroupPersonFaceAsync(string,Guid,Guid,RequestContext)">
      <example>
This sample shows how to call GetLargePersonGroupPersonFaceAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.GetLargePersonGroupPersonFaceAsync("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
]]></code>
This sample shows how to call GetLargePersonGroupPersonFaceAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.GetLargePersonGroupPersonFaceAsync("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
Console.WriteLine(result.GetProperty("userData").ToString());
]]></code></example>
    </member>
    <member name="GetLargePersonGroupPersonFace(string,Guid,Guid,RequestContext)">
      <example>
This sample shows how to call GetLargePersonGroupPersonFace and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.GetLargePersonGroupPersonFace("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
]]></code>
This sample shows how to call GetLargePersonGroupPersonFace with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.GetLargePersonGroupPersonFace("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
Console.WriteLine(result.GetProperty("userData").ToString());
]]></code></example>
    </member>
    <member name="UpdateLargePersonGroupPersonFaceAsync(string,Guid,Guid,RequestContent,RequestContext)">
      <example>
This sample shows how to call UpdateLargePersonGroupPersonFaceAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object());
Response response = await client.UpdateLargePersonGroupPersonFaceAsync("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call UpdateLargePersonGroupPersonFaceAsync with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    userData = "<userData>",
});
Response response = await client.UpdateLargePersonGroupPersonFaceAsync("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="UpdateLargePersonGroupPersonFace(string,Guid,Guid,RequestContent,RequestContext)">
      <example>
This sample shows how to call UpdateLargePersonGroupPersonFace.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object());
Response response = client.UpdateLargePersonGroupPersonFace("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call UpdateLargePersonGroupPersonFace with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    userData = "<userData>",
});
Response response = client.UpdateLargePersonGroupPersonFace("<largePersonGroupId>", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="GetPersonAsync(Guid,CancellationToken)">
      <example>
This sample shows how to call GetPersonAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<PersonDirectoryPerson> response = await client.GetPersonAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
]]></code>
This sample shows how to call GetPersonAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<PersonDirectoryPerson> response = await client.GetPersonAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
]]></code></example>
    </member>
    <member name="GetPerson(Guid,CancellationToken)">
      <example>
This sample shows how to call GetPerson.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<PersonDirectoryPerson> response = client.GetPerson(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
]]></code>
This sample shows how to call GetPerson with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<PersonDirectoryPerson> response = client.GetPerson(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
]]></code></example>
    </member>
    <member name="GetPersonAsync(Guid,RequestContext)">
      <example>
This sample shows how to call GetPersonAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.GetPersonAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("personId").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
]]></code>
This sample shows how to call GetPersonAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.GetPersonAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("personId").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("userData").ToString());
]]></code></example>
    </member>
    <member name="GetPerson(Guid,RequestContext)">
      <example>
This sample shows how to call GetPerson and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.GetPerson(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("personId").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
]]></code>
This sample shows how to call GetPerson with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.GetPerson(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("personId").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("userData").ToString());
]]></code></example>
    </member>
    <member name="UpdatePersonAsync(Guid,RequestContent,RequestContext)">
      <example>
This sample shows how to call UpdatePersonAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object());
Response response = await client.UpdatePersonAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call UpdatePersonAsync with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    userData = "<userData>",
});
Response response = await client.UpdatePersonAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="UpdatePerson(Guid,RequestContent,RequestContext)">
      <example>
This sample shows how to call UpdatePerson.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object());
Response response = client.UpdatePerson(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call UpdatePerson with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    userData = "<userData>",
});
Response response = client.UpdatePerson(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="GetPersonsAsync(string,int?,CancellationToken)">
      <example>
This sample shows how to call GetPersonsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<IReadOnlyList<PersonDirectoryPerson>> response = await client.GetPersonsAsync();
]]></code>
This sample shows how to call GetPersonsAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<IReadOnlyList<PersonDirectoryPerson>> response = await client.GetPersonsAsync(start: "<start>", top: 1234);
]]></code></example>
    </member>
    <member name="GetPersons(string,int?,CancellationToken)">
      <example>
This sample shows how to call GetPersons.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<IReadOnlyList<PersonDirectoryPerson>> response = client.GetPersons();
]]></code>
This sample shows how to call GetPersons with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<IReadOnlyList<PersonDirectoryPerson>> response = client.GetPersons(start: "<start>", top: 1234);
]]></code></example>
    </member>
    <member name="GetPersonsAsync(string,int?,RequestContext)">
      <example>
This sample shows how to call GetPersonsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.GetPersonsAsync(null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("personId").ToString());
Console.WriteLine(result[0].GetProperty("name").ToString());
]]></code>
This sample shows how to call GetPersonsAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.GetPersonsAsync("<start>", 1234, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("personId").ToString());
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("userData").ToString());
]]></code></example>
    </member>
    <member name="GetPersons(string,int?,RequestContext)">
      <example>
This sample shows how to call GetPersons and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.GetPersons(null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("personId").ToString());
Console.WriteLine(result[0].GetProperty("name").ToString());
]]></code>
This sample shows how to call GetPersons with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.GetPersons("<start>", 1234, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("personId").ToString());
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("userData").ToString());
]]></code></example>
    </member>
    <member name="GetDynamicPersonGroupReferencesAsync(Guid,string,int?,CancellationToken)">
      <example>
This sample shows how to call GetDynamicPersonGroupReferencesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<ListGroupReferenceResult> response = await client.GetDynamicPersonGroupReferencesAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
]]></code>
This sample shows how to call GetDynamicPersonGroupReferencesAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<ListGroupReferenceResult> response = await client.GetDynamicPersonGroupReferencesAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), start: "<start>", top: 1234);
]]></code></example>
    </member>
    <member name="GetDynamicPersonGroupReferences(Guid,string,int?,CancellationToken)">
      <example>
This sample shows how to call GetDynamicPersonGroupReferences.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<ListGroupReferenceResult> response = client.GetDynamicPersonGroupReferences(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
]]></code>
This sample shows how to call GetDynamicPersonGroupReferences with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<ListGroupReferenceResult> response = client.GetDynamicPersonGroupReferences(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), start: "<start>", top: 1234);
]]></code></example>
    </member>
    <member name="GetDynamicPersonGroupReferencesAsync(Guid,string,int?,RequestContext)">
      <example>
This sample shows how to call GetDynamicPersonGroupReferencesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.GetDynamicPersonGroupReferencesAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("dynamicPersonGroupIds")[0].ToString());
]]></code>
This sample shows how to call GetDynamicPersonGroupReferencesAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.GetDynamicPersonGroupReferencesAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "<start>", 1234, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("dynamicPersonGroupIds")[0].ToString());
]]></code></example>
    </member>
    <member name="GetDynamicPersonGroupReferences(Guid,string,int?,RequestContext)">
      <example>
This sample shows how to call GetDynamicPersonGroupReferences and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.GetDynamicPersonGroupReferences(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("dynamicPersonGroupIds")[0].ToString());
]]></code>
This sample shows how to call GetDynamicPersonGroupReferences with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.GetDynamicPersonGroupReferences(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "<start>", 1234, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("dynamicPersonGroupIds")[0].ToString());
]]></code></example>
    </member>
    <member name="GetPersonFaceAsync(Guid,FaceRecognitionModel,Guid,CancellationToken)">
      <example>
This sample shows how to call GetPersonFaceAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<PersonDirectoryFace> response = await client.GetPersonFaceAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), FaceRecognitionModel.Recognition01, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
]]></code>
This sample shows how to call GetPersonFaceAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<PersonDirectoryFace> response = await client.GetPersonFaceAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), FaceRecognitionModel.Recognition01, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
]]></code></example>
    </member>
    <member name="GetPersonFace(Guid,FaceRecognitionModel,Guid,CancellationToken)">
      <example>
This sample shows how to call GetPersonFace.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<PersonDirectoryFace> response = client.GetPersonFace(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), FaceRecognitionModel.Recognition01, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
]]></code>
This sample shows how to call GetPersonFace with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<PersonDirectoryFace> response = client.GetPersonFace(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), FaceRecognitionModel.Recognition01, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
]]></code></example>
    </member>
    <member name="GetPersonFaceAsync(Guid,string,Guid,RequestContext)">
      <example>
This sample shows how to call GetPersonFaceAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.GetPersonFaceAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "recognition_01", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
]]></code>
This sample shows how to call GetPersonFaceAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.GetPersonFaceAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "recognition_01", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
Console.WriteLine(result.GetProperty("userData").ToString());
]]></code></example>
    </member>
    <member name="GetPersonFace(Guid,string,Guid,RequestContext)">
      <example>
This sample shows how to call GetPersonFace and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.GetPersonFace(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "recognition_01", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
]]></code>
This sample shows how to call GetPersonFace with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.GetPersonFace(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "recognition_01", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
Console.WriteLine(result.GetProperty("userData").ToString());
]]></code></example>
    </member>
    <member name="UpdatePersonFaceAsync(Guid,string,Guid,RequestContent,RequestContext)">
      <example>
This sample shows how to call UpdatePersonFaceAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object());
Response response = await client.UpdatePersonFaceAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "recognition_01", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call UpdatePersonFaceAsync with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    userData = "<userData>",
});
Response response = await client.UpdatePersonFaceAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "recognition_01", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="UpdatePersonFace(Guid,string,Guid,RequestContent,RequestContext)">
      <example>
This sample shows how to call UpdatePersonFace.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object());
Response response = client.UpdatePersonFace(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "recognition_01", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call UpdatePersonFace with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    userData = "<userData>",
});
Response response = client.UpdatePersonFace(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "recognition_01", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="GetPersonFacesAsync(Guid,FaceRecognitionModel,CancellationToken)">
      <example>
This sample shows how to call GetPersonFacesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<ListFaceResult> response = await client.GetPersonFacesAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), FaceRecognitionModel.Recognition01);
]]></code>
This sample shows how to call GetPersonFacesAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<ListFaceResult> response = await client.GetPersonFacesAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), FaceRecognitionModel.Recognition01);
]]></code></example>
    </member>
    <member name="GetPersonFaces(Guid,FaceRecognitionModel,CancellationToken)">
      <example>
This sample shows how to call GetPersonFaces.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<ListFaceResult> response = client.GetPersonFaces(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), FaceRecognitionModel.Recognition01);
]]></code>
This sample shows how to call GetPersonFaces with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<ListFaceResult> response = client.GetPersonFaces(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), FaceRecognitionModel.Recognition01);
]]></code></example>
    </member>
    <member name="GetPersonFacesAsync(Guid,string,RequestContext)">
      <example>
This sample shows how to call GetPersonFacesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.GetPersonFacesAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "recognition_01");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("personId").ToString());
Console.WriteLine(result.GetProperty("persistedFaceIds")[0].ToString());
]]></code>
This sample shows how to call GetPersonFacesAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.GetPersonFacesAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "recognition_01");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("personId").ToString());
Console.WriteLine(result.GetProperty("persistedFaceIds")[0].ToString());
]]></code></example>
    </member>
    <member name="GetPersonFaces(Guid,string,RequestContext)">
      <example>
This sample shows how to call GetPersonFaces and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.GetPersonFaces(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "recognition_01");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("personId").ToString());
Console.WriteLine(result.GetProperty("persistedFaceIds")[0].ToString());
]]></code>
This sample shows how to call GetPersonFaces with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.GetPersonFaces(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "recognition_01");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("personId").ToString());
Console.WriteLine(result.GetProperty("persistedFaceIds")[0].ToString());
]]></code></example>
    </member>
    <member name="CreateDynamicPersonGroupAsync(string,string,string,CancellationToken)">
      <example>
This sample shows how to call CreateDynamicPersonGroupAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.CreateDynamicPersonGroupAsync("<dynamicPersonGroupId>", "<name>");
]]></code>
This sample shows how to call CreateDynamicPersonGroupAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.CreateDynamicPersonGroupAsync("<dynamicPersonGroupId>", "<name>", userData: "<userData>");
]]></code></example>
    </member>
    <member name="CreateDynamicPersonGroup(string,string,string,CancellationToken)">
      <example>
This sample shows how to call CreateDynamicPersonGroup.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.CreateDynamicPersonGroup("<dynamicPersonGroupId>", "<name>");
]]></code>
This sample shows how to call CreateDynamicPersonGroup with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.CreateDynamicPersonGroup("<dynamicPersonGroupId>", "<name>", userData: "<userData>");
]]></code></example>
    </member>
    <member name="CreateDynamicPersonGroupAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateDynamicPersonGroupAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
});
Response response = await client.CreateDynamicPersonGroupAsync("<dynamicPersonGroupId>", content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call CreateDynamicPersonGroupAsync with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    userData = "<userData>",
});
Response response = await client.CreateDynamicPersonGroupAsync("<dynamicPersonGroupId>", content);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="CreateDynamicPersonGroup(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateDynamicPersonGroup.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
});
Response response = client.CreateDynamicPersonGroup("<dynamicPersonGroupId>", content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call CreateDynamicPersonGroup with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    userData = "<userData>",
});
Response response = client.CreateDynamicPersonGroup("<dynamicPersonGroupId>", content);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="GetDynamicPersonGroupAsync(string,CancellationToken)">
      <example>
This sample shows how to call GetDynamicPersonGroupAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<DynamicPersonGroup> response = await client.GetDynamicPersonGroupAsync("<dynamicPersonGroupId>");
]]></code>
This sample shows how to call GetDynamicPersonGroupAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<DynamicPersonGroup> response = await client.GetDynamicPersonGroupAsync("<dynamicPersonGroupId>");
]]></code></example>
    </member>
    <member name="GetDynamicPersonGroup(string,CancellationToken)">
      <example>
This sample shows how to call GetDynamicPersonGroup.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<DynamicPersonGroup> response = client.GetDynamicPersonGroup("<dynamicPersonGroupId>");
]]></code>
This sample shows how to call GetDynamicPersonGroup with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<DynamicPersonGroup> response = client.GetDynamicPersonGroup("<dynamicPersonGroupId>");
]]></code></example>
    </member>
    <member name="GetDynamicPersonGroupAsync(string,RequestContext)">
      <example>
This sample shows how to call GetDynamicPersonGroupAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.GetDynamicPersonGroupAsync("<dynamicPersonGroupId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("dynamicPersonGroupId").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
]]></code>
This sample shows how to call GetDynamicPersonGroupAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.GetDynamicPersonGroupAsync("<dynamicPersonGroupId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("dynamicPersonGroupId").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("userData").ToString());
]]></code></example>
    </member>
    <member name="GetDynamicPersonGroup(string,RequestContext)">
      <example>
This sample shows how to call GetDynamicPersonGroup and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.GetDynamicPersonGroup("<dynamicPersonGroupId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("dynamicPersonGroupId").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
]]></code>
This sample shows how to call GetDynamicPersonGroup with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.GetDynamicPersonGroup("<dynamicPersonGroupId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("dynamicPersonGroupId").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("userData").ToString());
]]></code></example>
    </member>
    <member name="UpdateDynamicPersonGroupAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call UpdateDynamicPersonGroupAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object());
Response response = await client.UpdateDynamicPersonGroupAsync("<dynamicPersonGroupId>", content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call UpdateDynamicPersonGroupAsync with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    userData = "<userData>",
});
Response response = await client.UpdateDynamicPersonGroupAsync("<dynamicPersonGroupId>", content);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="UpdateDynamicPersonGroup(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call UpdateDynamicPersonGroup.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object());
Response response = client.UpdateDynamicPersonGroup("<dynamicPersonGroupId>", content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call UpdateDynamicPersonGroup with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    userData = "<userData>",
});
Response response = client.UpdateDynamicPersonGroup("<dynamicPersonGroupId>", content);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="GetDynamicPersonGroupsAsync(string,int?,CancellationToken)">
      <example>
This sample shows how to call GetDynamicPersonGroupsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<IReadOnlyList<DynamicPersonGroup>> response = await client.GetDynamicPersonGroupsAsync();
]]></code>
This sample shows how to call GetDynamicPersonGroupsAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<IReadOnlyList<DynamicPersonGroup>> response = await client.GetDynamicPersonGroupsAsync(start: "<start>", top: 1234);
]]></code></example>
    </member>
    <member name="GetDynamicPersonGroups(string,int?,CancellationToken)">
      <example>
This sample shows how to call GetDynamicPersonGroups.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<IReadOnlyList<DynamicPersonGroup>> response = client.GetDynamicPersonGroups();
]]></code>
This sample shows how to call GetDynamicPersonGroups with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<IReadOnlyList<DynamicPersonGroup>> response = client.GetDynamicPersonGroups(start: "<start>", top: 1234);
]]></code></example>
    </member>
    <member name="GetDynamicPersonGroupsAsync(string,int?,RequestContext)">
      <example>
This sample shows how to call GetDynamicPersonGroupsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.GetDynamicPersonGroupsAsync(null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("dynamicPersonGroupId").ToString());
Console.WriteLine(result[0].GetProperty("name").ToString());
]]></code>
This sample shows how to call GetDynamicPersonGroupsAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.GetDynamicPersonGroupsAsync("<start>", 1234, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("dynamicPersonGroupId").ToString());
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("userData").ToString());
]]></code></example>
    </member>
    <member name="GetDynamicPersonGroups(string,int?,RequestContext)">
      <example>
This sample shows how to call GetDynamicPersonGroups and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.GetDynamicPersonGroups(null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("dynamicPersonGroupId").ToString());
Console.WriteLine(result[0].GetProperty("name").ToString());
]]></code>
This sample shows how to call GetDynamicPersonGroups with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.GetDynamicPersonGroups("<start>", 1234, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("dynamicPersonGroupId").ToString());
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("userData").ToString());
]]></code></example>
    </member>
    <member name="GetDynamicPersonGroupPersonsAsync(string,string,int?,CancellationToken)">
      <example>
This sample shows how to call GetDynamicPersonGroupPersonsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<ListPersonResult> response = await client.GetDynamicPersonGroupPersonsAsync("<dynamicPersonGroupId>");
]]></code>
This sample shows how to call GetDynamicPersonGroupPersonsAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<ListPersonResult> response = await client.GetDynamicPersonGroupPersonsAsync("<dynamicPersonGroupId>", start: "<start>", top: 1234);
]]></code></example>
    </member>
    <member name="GetDynamicPersonGroupPersons(string,string,int?,CancellationToken)">
      <example>
This sample shows how to call GetDynamicPersonGroupPersons.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<ListPersonResult> response = client.GetDynamicPersonGroupPersons("<dynamicPersonGroupId>");
]]></code>
This sample shows how to call GetDynamicPersonGroupPersons with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response<ListPersonResult> response = client.GetDynamicPersonGroupPersons("<dynamicPersonGroupId>", start: "<start>", top: 1234);
]]></code></example>
    </member>
    <member name="GetDynamicPersonGroupPersonsAsync(string,string,int?,RequestContext)">
      <example>
This sample shows how to call GetDynamicPersonGroupPersonsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.GetDynamicPersonGroupPersonsAsync("<dynamicPersonGroupId>", null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("personIds")[0].ToString());
]]></code>
This sample shows how to call GetDynamicPersonGroupPersonsAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = await client.GetDynamicPersonGroupPersonsAsync("<dynamicPersonGroupId>", "<start>", 1234, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("personIds")[0].ToString());
]]></code></example>
    </member>
    <member name="GetDynamicPersonGroupPersons(string,string,int?,RequestContext)">
      <example>
This sample shows how to call GetDynamicPersonGroupPersons and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.GetDynamicPersonGroupPersons("<dynamicPersonGroupId>", null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("personIds")[0].ToString());
]]></code>
This sample shows how to call GetDynamicPersonGroupPersons with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Response response = client.GetDynamicPersonGroupPersons("<dynamicPersonGroupId>", "<start>", 1234, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("personIds")[0].ToString());
]]></code></example>
    </member>
    <member name="TrainLargeFaceListAsync(WaitUntil,string,RequestContext)">
      <example>
This sample shows how to call TrainLargeFaceListAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Operation operation = await client.TrainLargeFaceListAsync(WaitUntil.Completed, "<largeFaceListId>");
]]></code>
This sample shows how to call TrainLargeFaceListAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Operation operation = await client.TrainLargeFaceListAsync(WaitUntil.Completed, "<largeFaceListId>");
]]></code></example>
    </member>
    <member name="TrainLargeFaceList(WaitUntil,string,RequestContext)">
      <example>
This sample shows how to call TrainLargeFaceList.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Operation operation = client.TrainLargeFaceList(WaitUntil.Completed, "<largeFaceListId>");
]]></code>
This sample shows how to call TrainLargeFaceList with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Operation operation = client.TrainLargeFaceList(WaitUntil.Completed, "<largeFaceListId>");
]]></code></example>
    </member>
    <member name="TrainPersonGroupAsync(WaitUntil,string,RequestContext)">
      <example>
This sample shows how to call TrainPersonGroupAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Operation operation = await client.TrainPersonGroupAsync(WaitUntil.Completed, "<personGroupId>");
]]></code>
This sample shows how to call TrainPersonGroupAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Operation operation = await client.TrainPersonGroupAsync(WaitUntil.Completed, "<personGroupId>");
]]></code></example>
    </member>
    <member name="TrainPersonGroup(WaitUntil,string,RequestContext)">
      <example>
This sample shows how to call TrainPersonGroup.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Operation operation = client.TrainPersonGroup(WaitUntil.Completed, "<personGroupId>");
]]></code>
This sample shows how to call TrainPersonGroup with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Operation operation = client.TrainPersonGroup(WaitUntil.Completed, "<personGroupId>");
]]></code></example>
    </member>
    <member name="TrainLargePersonGroupAsync(WaitUntil,string,RequestContext)">
      <example>
This sample shows how to call TrainLargePersonGroupAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Operation operation = await client.TrainLargePersonGroupAsync(WaitUntil.Completed, "<largePersonGroupId>");
]]></code>
This sample shows how to call TrainLargePersonGroupAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Operation operation = await client.TrainLargePersonGroupAsync(WaitUntil.Completed, "<largePersonGroupId>");
]]></code></example>
    </member>
    <member name="TrainLargePersonGroup(WaitUntil,string,RequestContext)">
      <example>
This sample shows how to call TrainLargePersonGroup.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Operation operation = client.TrainLargePersonGroup(WaitUntil.Completed, "<largePersonGroupId>");
]]></code>
This sample shows how to call TrainLargePersonGroup with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Operation operation = client.TrainLargePersonGroup(WaitUntil.Completed, "<largePersonGroupId>");
]]></code></example>
    </member>
    <member name="CreatePersonAsync(WaitUntil,string,string,CancellationToken)">
      <example>
This sample shows how to call CreatePersonAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Operation<PersonDirectoryPerson> operation = await client.CreatePersonAsync(WaitUntil.Completed, "<name>");
PersonDirectoryPerson responseData = operation.Value;
]]></code>
This sample shows how to call CreatePersonAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Operation<PersonDirectoryPerson> operation = await client.CreatePersonAsync(WaitUntil.Completed, "<name>", userData: "<userData>");
PersonDirectoryPerson responseData = operation.Value;
]]></code></example>
    </member>
    <member name="CreatePerson(WaitUntil,string,string,CancellationToken)">
      <example>
This sample shows how to call CreatePerson.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Operation<PersonDirectoryPerson> operation = client.CreatePerson(WaitUntil.Completed, "<name>");
PersonDirectoryPerson responseData = operation.Value;
]]></code>
This sample shows how to call CreatePerson with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Operation<PersonDirectoryPerson> operation = client.CreatePerson(WaitUntil.Completed, "<name>", userData: "<userData>");
PersonDirectoryPerson responseData = operation.Value;
]]></code></example>
    </member>
    <member name="CreatePersonAsync(WaitUntil,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreatePersonAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
});
Operation<BinaryData> operation = await client.CreatePersonAsync(WaitUntil.Completed, content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("personId").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
]]></code>
This sample shows how to call CreatePersonAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    userData = "<userData>",
});
Operation<BinaryData> operation = await client.CreatePersonAsync(WaitUntil.Completed, content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("personId").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("userData").ToString());
]]></code></example>
    </member>
    <member name="CreatePerson(WaitUntil,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreatePerson and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
});
Operation<BinaryData> operation = client.CreatePerson(WaitUntil.Completed, content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("personId").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
]]></code>
This sample shows how to call CreatePerson with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    userData = "<userData>",
});
Operation<BinaryData> operation = client.CreatePerson(WaitUntil.Completed, content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("personId").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("userData").ToString());
]]></code></example>
    </member>
    <member name="DeletePersonAsync(WaitUntil,Guid,RequestContext)">
      <example>
This sample shows how to call DeletePersonAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Operation operation = await client.DeletePersonAsync(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
]]></code>
This sample shows how to call DeletePersonAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Operation operation = await client.DeletePersonAsync(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
]]></code></example>
    </member>
    <member name="DeletePerson(WaitUntil,Guid,RequestContext)">
      <example>
This sample shows how to call DeletePerson.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Operation operation = client.DeletePerson(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
]]></code>
This sample shows how to call DeletePerson with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Operation operation = client.DeletePerson(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
]]></code></example>
    </member>
    <member name="AddPersonFaceFromUrlAsync(WaitUntil,Guid,FaceRecognitionModel,Uri,IEnumerable{int},FaceDetectionModel?,string,CancellationToken)">
      <example>
This sample shows how to call AddPersonFaceFromUrlAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Operation<PersonDirectoryFace> operation = await client.AddPersonFaceFromUrlAsync(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), FaceRecognitionModel.Recognition01, new Uri("http://localhost:3000"));
PersonDirectoryFace responseData = operation.Value;
]]></code>
This sample shows how to call AddPersonFaceFromUrlAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Operation<PersonDirectoryFace> operation = await client.AddPersonFaceFromUrlAsync(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), FaceRecognitionModel.Recognition01, new Uri("http://localhost:3000"), targetFace: new int[] { 1234 }, detectionModel: FaceDetectionModel.Detection01, userData: "<userData>");
PersonDirectoryFace responseData = operation.Value;
]]></code></example>
    </member>
    <member name="AddPersonFaceFromUrl(WaitUntil,Guid,FaceRecognitionModel,Uri,IEnumerable{int},FaceDetectionModel?,string,CancellationToken)">
      <example>
This sample shows how to call AddPersonFaceFromUrl.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Operation<PersonDirectoryFace> operation = client.AddPersonFaceFromUrl(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), FaceRecognitionModel.Recognition01, new Uri("http://localhost:3000"));
PersonDirectoryFace responseData = operation.Value;
]]></code>
This sample shows how to call AddPersonFaceFromUrl with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Operation<PersonDirectoryFace> operation = client.AddPersonFaceFromUrl(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), FaceRecognitionModel.Recognition01, new Uri("http://localhost:3000"), targetFace: new int[] { 1234 }, detectionModel: FaceDetectionModel.Detection01, userData: "<userData>");
PersonDirectoryFace responseData = operation.Value;
]]></code></example>
    </member>
    <member name="AddPersonFaceFromUrlAsync(WaitUntil,Guid,string,RequestContent,IEnumerable{int},string,string,RequestContext)">
      <example>
This sample shows how to call AddPersonFaceFromUrlAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    url = "http://localhost:3000",
});
Operation<BinaryData> operation = await client.AddPersonFaceFromUrlAsync(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "recognition_01", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
]]></code>
This sample shows how to call AddPersonFaceFromUrlAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    url = "http://localhost:3000",
});
Operation<BinaryData> operation = await client.AddPersonFaceFromUrlAsync(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "recognition_01", content, targetFace: new int[] { 1234 }, detectionModel: "detection_01", userData: "<userData>");
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
Console.WriteLine(result.GetProperty("userData").ToString());
]]></code></example>
    </member>
    <member name="AddPersonFaceFromUrl(WaitUntil,Guid,string,RequestContent,IEnumerable{int},string,string,RequestContext)">
      <example>
This sample shows how to call AddPersonFaceFromUrl and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    url = "http://localhost:3000",
});
Operation<BinaryData> operation = client.AddPersonFaceFromUrl(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "recognition_01", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
]]></code>
This sample shows how to call AddPersonFaceFromUrl with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    url = "http://localhost:3000",
});
Operation<BinaryData> operation = client.AddPersonFaceFromUrl(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "recognition_01", content, targetFace: new int[] { 1234 }, detectionModel: "detection_01", userData: "<userData>");
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
Console.WriteLine(result.GetProperty("userData").ToString());
]]></code></example>
    </member>
    <member name="AddPersonFaceAsync(WaitUntil,Guid,FaceRecognitionModel,BinaryData,IEnumerable{int},FaceDetectionModel?,string,CancellationToken)">
      <example>
This sample shows how to call AddPersonFaceAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Operation<PersonDirectoryFace> operation = await client.AddPersonFaceAsync(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), FaceRecognitionModel.Recognition01, BinaryData.FromObjectAsJson(new object()));
PersonDirectoryFace responseData = operation.Value;
]]></code>
This sample shows how to call AddPersonFaceAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Operation<PersonDirectoryFace> operation = await client.AddPersonFaceAsync(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), FaceRecognitionModel.Recognition01, BinaryData.FromObjectAsJson(new object()), targetFace: new int[] { 1234 }, detectionModel: FaceDetectionModel.Detection01, userData: "<userData>");
PersonDirectoryFace responseData = operation.Value;
]]></code></example>
    </member>
    <member name="AddPersonFace(WaitUntil,Guid,FaceRecognitionModel,BinaryData,IEnumerable{int},FaceDetectionModel?,string,CancellationToken)">
      <example>
This sample shows how to call AddPersonFace.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Operation<PersonDirectoryFace> operation = client.AddPersonFace(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), FaceRecognitionModel.Recognition01, BinaryData.FromObjectAsJson(new object()));
PersonDirectoryFace responseData = operation.Value;
]]></code>
This sample shows how to call AddPersonFace with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Operation<PersonDirectoryFace> operation = client.AddPersonFace(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), FaceRecognitionModel.Recognition01, BinaryData.FromObjectAsJson(new object()), targetFace: new int[] { 1234 }, detectionModel: FaceDetectionModel.Detection01, userData: "<userData>");
PersonDirectoryFace responseData = operation.Value;
]]></code></example>
    </member>
    <member name="AddPersonFaceAsync(WaitUntil,Guid,string,RequestContent,IEnumerable{int},string,string,RequestContext)">
      <example>
This sample shows how to call AddPersonFaceAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object());
Operation<BinaryData> operation = await client.AddPersonFaceAsync(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "recognition_01", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
]]></code>
This sample shows how to call AddPersonFaceAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object());
Operation<BinaryData> operation = await client.AddPersonFaceAsync(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "recognition_01", content, targetFace: new int[] { 1234 }, detectionModel: "detection_01", userData: "<userData>");
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
Console.WriteLine(result.GetProperty("userData").ToString());
]]></code></example>
    </member>
    <member name="AddPersonFace(WaitUntil,Guid,string,RequestContent,IEnumerable{int},string,string,RequestContext)">
      <example>
This sample shows how to call AddPersonFace and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object());
Operation<BinaryData> operation = client.AddPersonFace(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "recognition_01", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
]]></code>
This sample shows how to call AddPersonFace with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object());
Operation<BinaryData> operation = client.AddPersonFace(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "recognition_01", content, targetFace: new int[] { 1234 }, detectionModel: "detection_01", userData: "<userData>");
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
Console.WriteLine(result.GetProperty("userData").ToString());
]]></code></example>
    </member>
    <member name="DeletePersonFaceAsync(WaitUntil,Guid,FaceRecognitionModel,Guid,CancellationToken)">
      <example>
This sample shows how to call DeletePersonFaceAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Operation operation = await client.DeletePersonFaceAsync(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), FaceRecognitionModel.Recognition01, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
]]></code>
This sample shows how to call DeletePersonFaceAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Operation operation = await client.DeletePersonFaceAsync(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), FaceRecognitionModel.Recognition01, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
]]></code></example>
    </member>
    <member name="DeletePersonFace(WaitUntil,Guid,FaceRecognitionModel,Guid,CancellationToken)">
      <example>
This sample shows how to call DeletePersonFace.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Operation operation = client.DeletePersonFace(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), FaceRecognitionModel.Recognition01, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
]]></code>
This sample shows how to call DeletePersonFace with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Operation operation = client.DeletePersonFace(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), FaceRecognitionModel.Recognition01, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
]]></code></example>
    </member>
    <member name="DeletePersonFaceAsync(WaitUntil,Guid,string,Guid,RequestContext)">
      <example>
This sample shows how to call DeletePersonFaceAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Operation operation = await client.DeletePersonFaceAsync(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "recognition_01", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
]]></code>
This sample shows how to call DeletePersonFaceAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Operation operation = await client.DeletePersonFaceAsync(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "recognition_01", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
]]></code></example>
    </member>
    <member name="DeletePersonFace(WaitUntil,Guid,string,Guid,RequestContext)">
      <example>
This sample shows how to call DeletePersonFace.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Operation operation = client.DeletePersonFace(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "recognition_01", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
]]></code>
This sample shows how to call DeletePersonFace with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Operation operation = client.DeletePersonFace(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "recognition_01", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
]]></code></example>
    </member>
    <member name="CreateDynamicPersonGroupWithPersonAsync(WaitUntil,string,string,IEnumerable{Guid},string,CancellationToken)">
      <example>
This sample shows how to call CreateDynamicPersonGroupWithPersonAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Operation<DynamicPersonGroup> operation = await client.CreateDynamicPersonGroupWithPersonAsync(WaitUntil.Completed, "<dynamicPersonGroupId>", "<name>", new Guid[] { Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a") });
DynamicPersonGroup responseData = operation.Value;
]]></code>
This sample shows how to call CreateDynamicPersonGroupWithPersonAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Operation<DynamicPersonGroup> operation = await client.CreateDynamicPersonGroupWithPersonAsync(WaitUntil.Completed, "<dynamicPersonGroupId>", "<name>", new Guid[] { Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a") }, userData: "<userData>");
DynamicPersonGroup responseData = operation.Value;
]]></code></example>
    </member>
    <member name="CreateDynamicPersonGroupWithPerson(WaitUntil,string,string,IEnumerable{Guid},string,CancellationToken)">
      <example>
This sample shows how to call CreateDynamicPersonGroupWithPerson.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Operation<DynamicPersonGroup> operation = client.CreateDynamicPersonGroupWithPerson(WaitUntil.Completed, "<dynamicPersonGroupId>", "<name>", new Guid[] { Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a") });
DynamicPersonGroup responseData = operation.Value;
]]></code>
This sample shows how to call CreateDynamicPersonGroupWithPerson with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Operation<DynamicPersonGroup> operation = client.CreateDynamicPersonGroupWithPerson(WaitUntil.Completed, "<dynamicPersonGroupId>", "<name>", new Guid[] { Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a") }, userData: "<userData>");
DynamicPersonGroup responseData = operation.Value;
]]></code></example>
    </member>
    <member name="CreateDynamicPersonGroupWithPersonAsync(WaitUntil,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateDynamicPersonGroupWithPersonAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    addPersonIds = new object[]
    {
        "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"
    },
});
Operation<BinaryData> operation = await client.CreateDynamicPersonGroupWithPersonAsync(WaitUntil.Completed, "<dynamicPersonGroupId>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("dynamicPersonGroupId").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
]]></code>
This sample shows how to call CreateDynamicPersonGroupWithPersonAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    userData = "<userData>",
    addPersonIds = new object[]
    {
        "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"
    },
});
Operation<BinaryData> operation = await client.CreateDynamicPersonGroupWithPersonAsync(WaitUntil.Completed, "<dynamicPersonGroupId>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("dynamicPersonGroupId").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("userData").ToString());
]]></code></example>
    </member>
    <member name="CreateDynamicPersonGroupWithPerson(WaitUntil,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateDynamicPersonGroupWithPerson and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    addPersonIds = new object[]
    {
        "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"
    },
});
Operation<BinaryData> operation = client.CreateDynamicPersonGroupWithPerson(WaitUntil.Completed, "<dynamicPersonGroupId>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("dynamicPersonGroupId").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
]]></code>
This sample shows how to call CreateDynamicPersonGroupWithPerson with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    userData = "<userData>",
    addPersonIds = new object[]
    {
        "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"
    },
});
Operation<BinaryData> operation = client.CreateDynamicPersonGroupWithPerson(WaitUntil.Completed, "<dynamicPersonGroupId>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("dynamicPersonGroupId").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("userData").ToString());
]]></code></example>
    </member>
    <member name="DeleteDynamicPersonGroupAsync(WaitUntil,string,RequestContext)">
      <example>
This sample shows how to call DeleteDynamicPersonGroupAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Operation operation = await client.DeleteDynamicPersonGroupAsync(WaitUntil.Completed, "<dynamicPersonGroupId>");
]]></code>
This sample shows how to call DeleteDynamicPersonGroupAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Operation operation = await client.DeleteDynamicPersonGroupAsync(WaitUntil.Completed, "<dynamicPersonGroupId>");
]]></code></example>
    </member>
    <member name="DeleteDynamicPersonGroup(WaitUntil,string,RequestContext)">
      <example>
This sample shows how to call DeleteDynamicPersonGroup.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Operation operation = client.DeleteDynamicPersonGroup(WaitUntil.Completed, "<dynamicPersonGroupId>");
]]></code>
This sample shows how to call DeleteDynamicPersonGroup with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

Operation operation = client.DeleteDynamicPersonGroup(WaitUntil.Completed, "<dynamicPersonGroupId>");
]]></code></example>
    </member>
    <member name="UpdateDynamicPersonGroupWithPersonChangesAsync(WaitUntil,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call UpdateDynamicPersonGroupWithPersonChangesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object());
Operation operation = await client.UpdateDynamicPersonGroupWithPersonChangesAsync(WaitUntil.Completed, "<dynamicPersonGroupId>", content);
]]></code>
This sample shows how to call UpdateDynamicPersonGroupWithPersonChangesAsync with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    userData = "<userData>",
    addPersonIds = new object[]
    {
        "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"
    },
    removePersonIds = new object[]
    {
        "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"
    },
});
Operation operation = await client.UpdateDynamicPersonGroupWithPersonChangesAsync(WaitUntil.Completed, "<dynamicPersonGroupId>", content);
]]></code></example>
    </member>
    <member name="UpdateDynamicPersonGroupWithPersonChanges(WaitUntil,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call UpdateDynamicPersonGroupWithPersonChanges.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object());
Operation operation = client.UpdateDynamicPersonGroupWithPersonChanges(WaitUntil.Completed, "<dynamicPersonGroupId>", content);
]]></code>
This sample shows how to call UpdateDynamicPersonGroupWithPersonChanges with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    userData = "<userData>",
    addPersonIds = new object[]
    {
        "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"
    },
    removePersonIds = new object[]
    {
        "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"
    },
});
Operation operation = client.UpdateDynamicPersonGroupWithPersonChanges(WaitUntil.Completed, "<dynamicPersonGroupId>", content);
]]></code></example>
    </member>
  </members>
</doc>