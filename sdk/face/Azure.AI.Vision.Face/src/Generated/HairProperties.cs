// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.AI.Vision.Face
{
    /// <summary> Properties describing hair attributes. </summary>
    public partial class HairProperties
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="HairProperties"/>. </summary>
        /// <param name="bald"> A number describing confidence level of whether the person is bald. </param>
        /// <param name="invisible"> A boolean value describing whether the hair is visible in the image. </param>
        /// <param name="hairColor"> An array of candidate colors and confidence level in the presence of each. </param>
        internal HairProperties(float bald, bool invisible, IEnumerable<HairColor> hairColor)
        {
            Bald = bald;
            Invisible = invisible;
            HairColor = hairColor.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="HairProperties"/>. </summary>
        /// <param name="bald"> A number describing confidence level of whether the person is bald. </param>
        /// <param name="invisible"> A boolean value describing whether the hair is visible in the image. </param>
        /// <param name="hairColor"> An array of candidate colors and confidence level in the presence of each. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal HairProperties(float bald, bool invisible, IList<HairColor> hairColor, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            Bald = bald;
            Invisible = invisible;
            HairColor = hairColor;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> A number describing confidence level of whether the person is bald. </summary>
        public float Bald { get; }

        /// <summary> A boolean value describing whether the hair is visible in the image. </summary>
        public bool Invisible { get; }

        /// <summary> An array of candidate colors and confidence level in the presence of each. </summary>
        public IList<HairColor> HairColor { get; }
    }
}
