// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.AI.Vision.Face
{
    /// <summary> Identify result. </summary>
    public partial class FaceIdentificationResult
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="FaceIdentificationResult"/>. </summary>
        /// <param name="faceId"> faceId of the query face. </param>
        /// <param name="candidates"> Identified person candidates for that face (ranked by confidence). Array size should be no larger than input maxNumOfCandidatesReturned. If no person is identified, will return an empty array. </param>
        internal FaceIdentificationResult(Guid faceId, IEnumerable<FaceIdentificationCandidate> candidates)
        {
            FaceId = faceId;
            Candidates = candidates.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="FaceIdentificationResult"/>. </summary>
        /// <param name="faceId"> faceId of the query face. </param>
        /// <param name="candidates"> Identified person candidates for that face (ranked by confidence). Array size should be no larger than input maxNumOfCandidatesReturned. If no person is identified, will return an empty array. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal FaceIdentificationResult(Guid faceId, IList<FaceIdentificationCandidate> candidates, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            FaceId = faceId;
            Candidates = candidates;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> faceId of the query face. </summary>
        public Guid FaceId { get; }

        /// <summary> Identified person candidates for that face (ranked by confidence). Array size should be no larger than input maxNumOfCandidatesReturned. If no person is identified, will return an empty array. </summary>
        public IList<FaceIdentificationCandidate> Candidates { get; }
    }
}
