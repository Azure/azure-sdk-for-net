// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.Vision.Face
{
    /// <summary> Properties describing the presence of a mask on a given face. </summary>
    public partial class MaskProperties
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="MaskProperties"/>. </summary>
        /// <param name="noseAndMouthCovered"> A boolean value indicating whether nose and mouth are covered. </param>
        /// <param name="type"> Type of the mask. </param>
        internal MaskProperties(bool noseAndMouthCovered, MaskType @type)
        {
            NoseAndMouthCovered = noseAndMouthCovered;
            Type = @type;
        }

        /// <summary> Initializes a new instance of <see cref="MaskProperties"/>. </summary>
        /// <param name="noseAndMouthCovered"> A boolean value indicating whether nose and mouth are covered. </param>
        /// <param name="type"> Type of the mask. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal MaskProperties(bool noseAndMouthCovered, MaskType @type, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            NoseAndMouthCovered = noseAndMouthCovered;
            Type = @type;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> A boolean value indicating whether nose and mouth are covered. </summary>
        public bool NoseAndMouthCovered { get; }

        /// <summary> Type of the mask. </summary>
        public MaskType Type { get; }
    }
}
