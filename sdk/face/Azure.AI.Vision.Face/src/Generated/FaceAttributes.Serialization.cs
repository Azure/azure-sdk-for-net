// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;

namespace Azure.AI.Vision.Face
{
    /// <summary> Face attributes for the detected face. </summary>
    public partial class FaceAttributes : IJsonModel<FaceAttributes>
    {
        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<FaceAttributes>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<FaceAttributes>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(FaceAttributes)} does not support writing '{format}' format.");
            }
            if (Optional.IsDefined(Age))
            {
                writer.WritePropertyName("age"u8);
                writer.WriteNumberValue(Age.Value);
            }
            if (Optional.IsDefined(Smile))
            {
                writer.WritePropertyName("smile"u8);
                writer.WriteNumberValue(Smile.Value);
            }
            if (Optional.IsDefined(FacialHair))
            {
                writer.WritePropertyName("facialHair"u8);
                writer.WriteObjectValue(FacialHair, options);
            }
            if (Optional.IsDefined(Glasses))
            {
                writer.WritePropertyName("glasses"u8);
                writer.WriteStringValue(Glasses.Value.ToString());
            }
            if (Optional.IsDefined(HeadPose))
            {
                writer.WritePropertyName("headPose"u8);
                writer.WriteObjectValue(HeadPose, options);
            }
            if (Optional.IsDefined(Hair))
            {
                writer.WritePropertyName("hair"u8);
                writer.WriteObjectValue(Hair, options);
            }
            if (Optional.IsDefined(Occlusion))
            {
                writer.WritePropertyName("occlusion"u8);
                writer.WriteObjectValue(Occlusion, options);
            }
            if (Optional.IsCollectionDefined(Accessories))
            {
                writer.WritePropertyName("accessories"u8);
                writer.WriteStartArray();
                foreach (AccessoryItem item in Accessories)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Blur))
            {
                writer.WritePropertyName("blur"u8);
                writer.WriteObjectValue(Blur, options);
            }
            if (Optional.IsDefined(Exposure))
            {
                writer.WritePropertyName("exposure"u8);
                writer.WriteObjectValue(Exposure, options);
            }
            if (Optional.IsDefined(Noise))
            {
                writer.WritePropertyName("noise"u8);
                writer.WriteObjectValue(Noise, options);
            }
            if (Optional.IsDefined(Mask))
            {
                writer.WritePropertyName("mask"u8);
                writer.WriteObjectValue(Mask, options);
            }
            if (Optional.IsDefined(QualityForRecognition))
            {
                writer.WritePropertyName("qualityForRecognition"u8);
                writer.WriteStringValue(QualityForRecognition.Value.ToString());
            }
            if (options.Format != "W" && _additionalBinaryDataProperties != null)
            {
                foreach (var item in _additionalBinaryDataProperties)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        FaceAttributes IJsonModel<FaceAttributes>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual FaceAttributes JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<FaceAttributes>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(FaceAttributes)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeFaceAttributes(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static FaceAttributes DeserializeFaceAttributes(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            float? age = default;
            float? smile = default;
            FacialHair facialHair = default;
            GlassesType? glasses = default;
            HeadPose headPose = default;
            HairProperties hair = default;
            OcclusionProperties occlusion = default;
            IList<AccessoryItem> accessories = default;
            BlurProperties blur = default;
            ExposureProperties exposure = default;
            NoiseProperties noise = default;
            MaskProperties mask = default;
            QualityForRecognition? qualityForRecognition = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("age"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    age = prop.Value.GetSingle();
                    continue;
                }
                if (prop.NameEquals("smile"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    smile = prop.Value.GetSingle();
                    continue;
                }
                if (prop.NameEquals("facialHair"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    facialHair = FacialHair.DeserializeFacialHair(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("glasses"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    glasses = new GlassesType(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("headPose"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    headPose = HeadPose.DeserializeHeadPose(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("hair"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    hair = HairProperties.DeserializeHairProperties(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("occlusion"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    occlusion = OcclusionProperties.DeserializeOcclusionProperties(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("accessories"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<AccessoryItem> array = new List<AccessoryItem>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(AccessoryItem.DeserializeAccessoryItem(item, options));
                    }
                    accessories = array;
                    continue;
                }
                if (prop.NameEquals("blur"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    blur = BlurProperties.DeserializeBlurProperties(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("exposure"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    exposure = ExposureProperties.DeserializeExposureProperties(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("noise"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    noise = NoiseProperties.DeserializeNoiseProperties(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("mask"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    mask = MaskProperties.DeserializeMaskProperties(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("qualityForRecognition"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    qualityForRecognition = new QualityForRecognition(prop.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new FaceAttributes(
                age,
                smile,
                facialHair,
                glasses,
                headPose,
                hair,
                occlusion,
                accessories ?? new ChangeTrackingList<AccessoryItem>(),
                blur,
                exposure,
                noise,
                mask,
                qualityForRecognition,
                additionalBinaryDataProperties);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<FaceAttributes>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<FaceAttributes>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureAIVisionFaceContext.Default);
                default:
                    throw new FormatException($"The model {nameof(FaceAttributes)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        FaceAttributes IPersistableModel<FaceAttributes>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual FaceAttributes PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<FaceAttributes>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeFaceAttributes(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(FaceAttributes)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<FaceAttributes>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
