// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;

namespace Azure.AI.Vision.Face
{
    /// <summary> Request of liveness with verify session creation. </summary>
    public partial class CreateLivenessWithVerifySessionContent
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="CreateLivenessWithVerifySessionContent"/>. </summary>
        /// <param name="livenessOperationMode"> Type of liveness mode the client should follow. </param>
        /// <param name="verifyImage"> The image stream for verify. Content-Disposition header field for this part must have filename. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="verifyImage"/> is null. </exception>
        public CreateLivenessWithVerifySessionContent(LivenessOperationMode livenessOperationMode, Stream verifyImage)
        {
            Argument.AssertNotNull(verifyImage, nameof(verifyImage));

            LivenessOperationMode = livenessOperationMode;
            VerifyImage = verifyImage;
        }

        /// <summary> Initializes a new instance of <see cref="CreateLivenessWithVerifySessionContent"/>. </summary>
        /// <param name="livenessOperationMode"> Type of liveness mode the client should follow. </param>
        /// <param name="deviceCorrelationIdSetInClient"> Whether or not to allow client to set their own 'deviceCorrelationId' via the Vision SDK. Default is false, and 'deviceCorrelationId' must be set in this request body. </param>
        /// <param name="enableSessionImage"> Whether or not store the session image. </param>
        /// <param name="livenessModelVersion"> The model version used for liveness classification. This is an optional parameter, and if this is not specified, then the latest supported model version will be chosen. </param>
        /// <param name="returnVerifyImageHash"> Whether or not return the verify image hash. </param>
        /// <param name="verifyConfidenceThreshold"> Threshold for confidence of the face verification. Please refer to the documentation for more details. https://learn.microsoft.com/legal/cognitive-services/face/characteristics-and-limitations?context=%2Fazure%2Fai-services%2Fcomputer-vision%2Fcontext%2Fcontext#recognition-confidence-score. </param>
        /// <param name="verifyImage"> The image stream for verify. Content-Disposition header field for this part must have filename. </param>
        /// <param name="deviceCorrelationId"> Unique Guid per each end-user device. This is to provide rate limiting and anti-hammering. If 'deviceCorrelationIdSetInClient' is true in this request, this 'deviceCorrelationId' must be null. </param>
        /// <param name="authTokenTimeToLiveInSeconds"> Seconds the session should last for. Range is 60 to 86400 seconds. Default value is 600. </param>
        /// <param name="numberOfClientAttemptsAllowed"> The number of times a client can attempt a liveness check using the same authToken. Default value is 1. Maximum value is 3. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal CreateLivenessWithVerifySessionContent(LivenessOperationMode livenessOperationMode, bool? deviceCorrelationIdSetInClient, bool? enableSessionImage, LivenessModel? livenessModelVersion, bool? returnVerifyImageHash, float? verifyConfidenceThreshold, Stream verifyImage, string deviceCorrelationId, int? authTokenTimeToLiveInSeconds, int? numberOfClientAttemptsAllowed, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            LivenessOperationMode = livenessOperationMode;
            DeviceCorrelationIdSetInClient = deviceCorrelationIdSetInClient;
            EnableSessionImage = enableSessionImage;
            LivenessModelVersion = livenessModelVersion;
            ReturnVerifyImageHash = returnVerifyImageHash;
            VerifyConfidenceThreshold = verifyConfidenceThreshold;
            VerifyImage = verifyImage;
            DeviceCorrelationId = deviceCorrelationId;
            AuthTokenTimeToLiveInSeconds = authTokenTimeToLiveInSeconds;
            NumberOfClientAttemptsAllowed = numberOfClientAttemptsAllowed;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="CreateLivenessWithVerifySessionContent"/> for deserialization. </summary>
        internal CreateLivenessWithVerifySessionContent()
        {
        }

        /// <summary> Type of liveness mode the client should follow. </summary>
        public LivenessOperationMode LivenessOperationMode { get; }
        /// <summary> Whether or not to allow client to set their own 'deviceCorrelationId' via the Vision SDK. Default is false, and 'deviceCorrelationId' must be set in this request body. </summary>
        public bool? DeviceCorrelationIdSetInClient { get; set; }
        /// <summary> Whether or not store the session image. </summary>
        public bool? EnableSessionImage { get; set; }
        /// <summary> The model version used for liveness classification. This is an optional parameter, and if this is not specified, then the latest supported model version will be chosen. </summary>
        public LivenessModel? LivenessModelVersion { get; set; }
        /// <summary> Whether or not return the verify image hash. </summary>
        public bool? ReturnVerifyImageHash { get; set; }
        /// <summary> Threshold for confidence of the face verification. Please refer to the documentation for more details. https://learn.microsoft.com/legal/cognitive-services/face/characteristics-and-limitations?context=%2Fazure%2Fai-services%2Fcomputer-vision%2Fcontext%2Fcontext#recognition-confidence-score. </summary>
        public float? VerifyConfidenceThreshold { get; set; }
        /// <summary> The image stream for verify. Content-Disposition header field for this part must have filename. </summary>
        public Stream VerifyImage { get; }
        /// <summary> Unique Guid per each end-user device. This is to provide rate limiting and anti-hammering. If 'deviceCorrelationIdSetInClient' is true in this request, this 'deviceCorrelationId' must be null. </summary>
        public string DeviceCorrelationId { get; set; }
        /// <summary> Seconds the session should last for. Range is 60 to 86400 seconds. Default value is 600. </summary>
        public int? AuthTokenTimeToLiveInSeconds { get; set; }
        /// <summary> The number of times a client can attempt a liveness check using the same authToken. Default value is 1. Maximum value is 3. </summary>
        public int? NumberOfClientAttemptsAllowed { get; set; }
    }
}
