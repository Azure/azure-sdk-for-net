// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.Vision.Face
{
    /// <summary> A rectangle within which a face can be found. </summary>
    public partial class FaceRectangle
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="FaceRectangle"/>. </summary>
        /// <param name="top"> The distance from the top edge if the image to the top edge of the rectangle, in pixels. </param>
        /// <param name="left"> The distance from the left edge if the image to the left edge of the rectangle, in pixels. </param>
        /// <param name="width"> The width of the rectangle, in pixels. </param>
        /// <param name="height"> The height of the rectangle, in pixels. </param>
        internal FaceRectangle(int top, int left, int width, int height)
        {
            Top = top;
            Left = left;
            Width = width;
            Height = height;
        }

        /// <summary> Initializes a new instance of <see cref="FaceRectangle"/>. </summary>
        /// <param name="top"> The distance from the top edge if the image to the top edge of the rectangle, in pixels. </param>
        /// <param name="left"> The distance from the left edge if the image to the left edge of the rectangle, in pixels. </param>
        /// <param name="width"> The width of the rectangle, in pixels. </param>
        /// <param name="height"> The height of the rectangle, in pixels. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal FaceRectangle(int top, int left, int width, int height, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            Top = top;
            Left = left;
            Width = width;
            Height = height;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> The distance from the top edge if the image to the top edge of the rectangle, in pixels. </summary>
        public int Top { get; }

        /// <summary> The distance from the left edge if the image to the left edge of the rectangle, in pixels. </summary>
        public int Left { get; }

        /// <summary> The width of the rectangle, in pixels. </summary>
        public int Width { get; }

        /// <summary> The height of the rectangle, in pixels. </summary>
        public int Height { get; }
    }
}
