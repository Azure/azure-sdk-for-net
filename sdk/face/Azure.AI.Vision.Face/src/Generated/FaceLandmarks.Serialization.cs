// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;

namespace Azure.AI.Vision.Face
{
    /// <summary> A collection of 27-point face landmarks pointing to the important positions of face components. </summary>
    public partial class FaceLandmarks : IJsonModel<FaceLandmarks>
    {
        /// <summary> Initializes a new instance of <see cref="FaceLandmarks"/> for deserialization. </summary>
        internal FaceLandmarks()
        {
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<FaceLandmarks>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<FaceLandmarks>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(FaceLandmarks)} does not support writing '{format}' format.");
            }
            writer.WritePropertyName("pupilLeft"u8);
            writer.WriteObjectValue(PupilLeft, options);
            writer.WritePropertyName("pupilRight"u8);
            writer.WriteObjectValue(PupilRight, options);
            writer.WritePropertyName("noseTip"u8);
            writer.WriteObjectValue(NoseTip, options);
            writer.WritePropertyName("mouthLeft"u8);
            writer.WriteObjectValue(MouthLeft, options);
            writer.WritePropertyName("mouthRight"u8);
            writer.WriteObjectValue(MouthRight, options);
            writer.WritePropertyName("eyebrowLeftOuter"u8);
            writer.WriteObjectValue(EyebrowLeftOuter, options);
            writer.WritePropertyName("eyebrowLeftInner"u8);
            writer.WriteObjectValue(EyebrowLeftInner, options);
            writer.WritePropertyName("eyeLeftOuter"u8);
            writer.WriteObjectValue(EyeLeftOuter, options);
            writer.WritePropertyName("eyeLeftTop"u8);
            writer.WriteObjectValue(EyeLeftTop, options);
            writer.WritePropertyName("eyeLeftBottom"u8);
            writer.WriteObjectValue(EyeLeftBottom, options);
            writer.WritePropertyName("eyeLeftInner"u8);
            writer.WriteObjectValue(EyeLeftInner, options);
            writer.WritePropertyName("eyebrowRightInner"u8);
            writer.WriteObjectValue(EyebrowRightInner, options);
            writer.WritePropertyName("eyebrowRightOuter"u8);
            writer.WriteObjectValue(EyebrowRightOuter, options);
            writer.WritePropertyName("eyeRightInner"u8);
            writer.WriteObjectValue(EyeRightInner, options);
            writer.WritePropertyName("eyeRightTop"u8);
            writer.WriteObjectValue(EyeRightTop, options);
            writer.WritePropertyName("eyeRightBottom"u8);
            writer.WriteObjectValue(EyeRightBottom, options);
            writer.WritePropertyName("eyeRightOuter"u8);
            writer.WriteObjectValue(EyeRightOuter, options);
            writer.WritePropertyName("noseRootLeft"u8);
            writer.WriteObjectValue(NoseRootLeft, options);
            writer.WritePropertyName("noseRootRight"u8);
            writer.WriteObjectValue(NoseRootRight, options);
            writer.WritePropertyName("noseLeftAlarTop"u8);
            writer.WriteObjectValue(NoseLeftAlarTop, options);
            writer.WritePropertyName("noseRightAlarTop"u8);
            writer.WriteObjectValue(NoseRightAlarTop, options);
            writer.WritePropertyName("noseLeftAlarOutTip"u8);
            writer.WriteObjectValue(NoseLeftAlarOutTip, options);
            writer.WritePropertyName("noseRightAlarOutTip"u8);
            writer.WriteObjectValue(NoseRightAlarOutTip, options);
            writer.WritePropertyName("upperLipTop"u8);
            writer.WriteObjectValue(UpperLipTop, options);
            writer.WritePropertyName("upperLipBottom"u8);
            writer.WriteObjectValue(UpperLipBottom, options);
            writer.WritePropertyName("underLipTop"u8);
            writer.WriteObjectValue(UnderLipTop, options);
            writer.WritePropertyName("underLipBottom"u8);
            writer.WriteObjectValue(UnderLipBottom, options);
            if (options.Format != "W" && _additionalBinaryDataProperties != null)
            {
                foreach (var item in _additionalBinaryDataProperties)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        FaceLandmarks IJsonModel<FaceLandmarks>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual FaceLandmarks JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<FaceLandmarks>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(FaceLandmarks)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeFaceLandmarks(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static FaceLandmarks DeserializeFaceLandmarks(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            LandmarkCoordinate pupilLeft = default;
            LandmarkCoordinate pupilRight = default;
            LandmarkCoordinate noseTip = default;
            LandmarkCoordinate mouthLeft = default;
            LandmarkCoordinate mouthRight = default;
            LandmarkCoordinate eyebrowLeftOuter = default;
            LandmarkCoordinate eyebrowLeftInner = default;
            LandmarkCoordinate eyeLeftOuter = default;
            LandmarkCoordinate eyeLeftTop = default;
            LandmarkCoordinate eyeLeftBottom = default;
            LandmarkCoordinate eyeLeftInner = default;
            LandmarkCoordinate eyebrowRightInner = default;
            LandmarkCoordinate eyebrowRightOuter = default;
            LandmarkCoordinate eyeRightInner = default;
            LandmarkCoordinate eyeRightTop = default;
            LandmarkCoordinate eyeRightBottom = default;
            LandmarkCoordinate eyeRightOuter = default;
            LandmarkCoordinate noseRootLeft = default;
            LandmarkCoordinate noseRootRight = default;
            LandmarkCoordinate noseLeftAlarTop = default;
            LandmarkCoordinate noseRightAlarTop = default;
            LandmarkCoordinate noseLeftAlarOutTip = default;
            LandmarkCoordinate noseRightAlarOutTip = default;
            LandmarkCoordinate upperLipTop = default;
            LandmarkCoordinate upperLipBottom = default;
            LandmarkCoordinate underLipTop = default;
            LandmarkCoordinate underLipBottom = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("pupilLeft"u8))
                {
                    pupilLeft = LandmarkCoordinate.DeserializeLandmarkCoordinate(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("pupilRight"u8))
                {
                    pupilRight = LandmarkCoordinate.DeserializeLandmarkCoordinate(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("noseTip"u8))
                {
                    noseTip = LandmarkCoordinate.DeserializeLandmarkCoordinate(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("mouthLeft"u8))
                {
                    mouthLeft = LandmarkCoordinate.DeserializeLandmarkCoordinate(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("mouthRight"u8))
                {
                    mouthRight = LandmarkCoordinate.DeserializeLandmarkCoordinate(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("eyebrowLeftOuter"u8))
                {
                    eyebrowLeftOuter = LandmarkCoordinate.DeserializeLandmarkCoordinate(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("eyebrowLeftInner"u8))
                {
                    eyebrowLeftInner = LandmarkCoordinate.DeserializeLandmarkCoordinate(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("eyeLeftOuter"u8))
                {
                    eyeLeftOuter = LandmarkCoordinate.DeserializeLandmarkCoordinate(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("eyeLeftTop"u8))
                {
                    eyeLeftTop = LandmarkCoordinate.DeserializeLandmarkCoordinate(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("eyeLeftBottom"u8))
                {
                    eyeLeftBottom = LandmarkCoordinate.DeserializeLandmarkCoordinate(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("eyeLeftInner"u8))
                {
                    eyeLeftInner = LandmarkCoordinate.DeserializeLandmarkCoordinate(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("eyebrowRightInner"u8))
                {
                    eyebrowRightInner = LandmarkCoordinate.DeserializeLandmarkCoordinate(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("eyebrowRightOuter"u8))
                {
                    eyebrowRightOuter = LandmarkCoordinate.DeserializeLandmarkCoordinate(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("eyeRightInner"u8))
                {
                    eyeRightInner = LandmarkCoordinate.DeserializeLandmarkCoordinate(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("eyeRightTop"u8))
                {
                    eyeRightTop = LandmarkCoordinate.DeserializeLandmarkCoordinate(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("eyeRightBottom"u8))
                {
                    eyeRightBottom = LandmarkCoordinate.DeserializeLandmarkCoordinate(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("eyeRightOuter"u8))
                {
                    eyeRightOuter = LandmarkCoordinate.DeserializeLandmarkCoordinate(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("noseRootLeft"u8))
                {
                    noseRootLeft = LandmarkCoordinate.DeserializeLandmarkCoordinate(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("noseRootRight"u8))
                {
                    noseRootRight = LandmarkCoordinate.DeserializeLandmarkCoordinate(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("noseLeftAlarTop"u8))
                {
                    noseLeftAlarTop = LandmarkCoordinate.DeserializeLandmarkCoordinate(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("noseRightAlarTop"u8))
                {
                    noseRightAlarTop = LandmarkCoordinate.DeserializeLandmarkCoordinate(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("noseLeftAlarOutTip"u8))
                {
                    noseLeftAlarOutTip = LandmarkCoordinate.DeserializeLandmarkCoordinate(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("noseRightAlarOutTip"u8))
                {
                    noseRightAlarOutTip = LandmarkCoordinate.DeserializeLandmarkCoordinate(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("upperLipTop"u8))
                {
                    upperLipTop = LandmarkCoordinate.DeserializeLandmarkCoordinate(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("upperLipBottom"u8))
                {
                    upperLipBottom = LandmarkCoordinate.DeserializeLandmarkCoordinate(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("underLipTop"u8))
                {
                    underLipTop = LandmarkCoordinate.DeserializeLandmarkCoordinate(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("underLipBottom"u8))
                {
                    underLipBottom = LandmarkCoordinate.DeserializeLandmarkCoordinate(prop.Value, options);
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new FaceLandmarks(
                pupilLeft,
                pupilRight,
                noseTip,
                mouthLeft,
                mouthRight,
                eyebrowLeftOuter,
                eyebrowLeftInner,
                eyeLeftOuter,
                eyeLeftTop,
                eyeLeftBottom,
                eyeLeftInner,
                eyebrowRightInner,
                eyebrowRightOuter,
                eyeRightInner,
                eyeRightTop,
                eyeRightBottom,
                eyeRightOuter,
                noseRootLeft,
                noseRootRight,
                noseLeftAlarTop,
                noseRightAlarTop,
                noseLeftAlarOutTip,
                noseRightAlarOutTip,
                upperLipTop,
                upperLipBottom,
                underLipTop,
                underLipBottom,
                additionalBinaryDataProperties);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<FaceLandmarks>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<FaceLandmarks>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureAIVisionFaceContext.Default);
                default:
                    throw new FormatException($"The model {nameof(FaceLandmarks)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        FaceLandmarks IPersistableModel<FaceLandmarks>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual FaceLandmarks PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<FaceLandmarks>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeFaceLandmarks(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(FaceLandmarks)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<FaceLandmarks>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
