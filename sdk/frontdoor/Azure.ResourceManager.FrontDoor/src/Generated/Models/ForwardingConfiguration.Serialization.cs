// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Resources.Models;

namespace Azure.ResourceManager.FrontDoor.Models
{
    public partial class ForwardingConfiguration : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(CustomForwardingPath))
            {
                writer.WritePropertyName("customForwardingPath");
                writer.WriteStringValue(CustomForwardingPath);
            }
            if (Optional.IsDefined(ForwardingProtocol))
            {
                writer.WritePropertyName("forwardingProtocol");
                writer.WriteStringValue(ForwardingProtocol.Value.ToString());
            }
            if (Optional.IsDefined(CacheConfiguration))
            {
                writer.WritePropertyName("cacheConfiguration");
                writer.WriteObjectValue(CacheConfiguration);
            }
            if (Optional.IsDefined(BackendPool))
            {
                writer.WritePropertyName("backendPool");
                JsonSerializer.Serialize(writer, BackendPool);
            }
            writer.WritePropertyName("@odata.type");
            writer.WriteStringValue(OdataType);
            writer.WriteEndObject();
        }

        internal static ForwardingConfiguration DeserializeForwardingConfiguration(JsonElement element)
        {
            Optional<string> customForwardingPath = default;
            Optional<FrontDoorForwardingProtocol> forwardingProtocol = default;
            Optional<FrontDoorCacheConfiguration> cacheConfiguration = default;
            Optional<WritableSubResource> backendPool = default;
            string odataType = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("customForwardingPath"))
                {
                    customForwardingPath = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("forwardingProtocol"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    forwardingProtocol = new FrontDoorForwardingProtocol(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("cacheConfiguration"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    cacheConfiguration = FrontDoorCacheConfiguration.DeserializeFrontDoorCacheConfiguration(property.Value);
                    continue;
                }
                if (property.NameEquals("backendPool"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    backendPool = JsonSerializer.Deserialize<WritableSubResource>(property.Value.ToString());
                    continue;
                }
                if (property.NameEquals("@odata.type"))
                {
                    odataType = property.Value.GetString();
                    continue;
                }
            }
            return new ForwardingConfiguration(odataType, customForwardingPath.Value, Optional.ToNullable(forwardingProtocol), cacheConfiguration.Value, backendPool);
        }
    }
}
