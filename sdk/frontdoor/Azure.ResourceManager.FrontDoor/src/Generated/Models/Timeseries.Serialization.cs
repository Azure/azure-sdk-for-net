// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.FrontDoor.Models
{
    public partial class Timeseries : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(Tags))
            {
                writer.WritePropertyName("tags");
                writer.WriteStartObject();
                foreach (var item in Tags)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            writer.WritePropertyName("location");
            writer.WriteStringValue(Location);
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            if (Optional.IsDefined(Endpoint))
            {
                writer.WritePropertyName("endpoint");
                writer.WriteStringValue(Endpoint);
            }
            if (Optional.IsDefined(StartDateTimeUTC))
            {
                writer.WritePropertyName("startDateTimeUTC");
                writer.WriteStringValue(StartDateTimeUTC);
            }
            if (Optional.IsDefined(EndDateTimeUTC))
            {
                writer.WritePropertyName("endDateTimeUTC");
                writer.WriteStringValue(EndDateTimeUTC);
            }
            if (Optional.IsDefined(AggregationInterval))
            {
                writer.WritePropertyName("aggregationInterval");
                writer.WriteStringValue(AggregationInterval.Value.ToString());
            }
            if (Optional.IsDefined(TimeseriesType))
            {
                writer.WritePropertyName("timeseriesType");
                writer.WriteStringValue(TimeseriesType.Value.ToString());
            }
            if (Optional.IsDefined(Country))
            {
                writer.WritePropertyName("country");
                writer.WriteStringValue(Country);
            }
            if (Optional.IsCollectionDefined(TimeseriesData))
            {
                writer.WritePropertyName("timeseriesData");
                writer.WriteStartArray();
                foreach (var item in TimeseriesData)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static Timeseries DeserializeTimeseries(JsonElement element)
        {
            Optional<IDictionary<string, string>> tags = default;
            AzureLocation location = default;
            ResourceIdentifier id = default;
            string name = default;
            Core.ResourceType type = default;
            Optional<SystemData> systemData = default;
            Optional<string> endpoint = default;
            Optional<string> startDateTimeUTC = default;
            Optional<string> endDateTimeUTC = default;
            Optional<AggregationInterval> aggregationInterval = default;
            Optional<TimeseriesType> timeseriesType = default;
            Optional<string> country = default;
            Optional<IList<TimeseriesDataPoint>> timeseriesData = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("tags"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    tags = dictionary;
                    continue;
                }
                if (property.NameEquals("location"))
                {
                    location = new AzureLocation(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("id"))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = new Core.ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.ToString());
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("endpoint"))
                        {
                            endpoint = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("startDateTimeUTC"))
                        {
                            startDateTimeUTC = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("endDateTimeUTC"))
                        {
                            endDateTimeUTC = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("aggregationInterval"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            aggregationInterval = new AggregationInterval(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("timeseriesType"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            timeseriesType = new TimeseriesType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("country"))
                        {
                            country = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("timeseriesData"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<TimeseriesDataPoint> array = new List<TimeseriesDataPoint>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(TimeseriesDataPoint.DeserializeTimeseriesDataPoint(item));
                            }
                            timeseriesData = array;
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new Timeseries(id, name, type, systemData.Value, Optional.ToDictionary(tags), location, endpoint.Value, startDateTimeUTC.Value, endDateTimeUTC.Value, Optional.ToNullable(aggregationInterval), Optional.ToNullable(timeseriesType), country.Value, Optional.ToList(timeseriesData));
        }
    }
}
