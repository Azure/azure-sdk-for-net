// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.FrontDoor.Models
{
    public partial class FrontDoorBackend : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(Address))
            {
                writer.WritePropertyName("address"u8);
                writer.WriteStringValue(Address);
            }
            if (Core.Optional.IsDefined(PrivateLinkAlias))
            {
                writer.WritePropertyName("privateLinkAlias"u8);
                writer.WriteStringValue(PrivateLinkAlias);
            }
            if (Core.Optional.IsDefined(PrivateLinkResourceId))
            {
                if (PrivateLinkResourceId != null)
                {
                    writer.WritePropertyName("privateLinkResourceId"u8);
                    writer.WriteStringValue(PrivateLinkResourceId);
                }
                else
                {
                    writer.WriteNull("privateLinkResourceId");
                }
            }
            if (Core.Optional.IsDefined(PrivateLinkLocation))
            {
                if (PrivateLinkLocation != null)
                {
                    writer.WritePropertyName("privateLinkLocation"u8);
                    writer.WriteStringValue(PrivateLinkLocation.Value);
                }
                else
                {
                    writer.WriteNull("privateLinkLocation");
                }
            }
            if (Core.Optional.IsDefined(PrivateLinkApprovalMessage))
            {
                writer.WritePropertyName("privateLinkApprovalMessage"u8);
                writer.WriteStringValue(PrivateLinkApprovalMessage);
            }
            if (Core.Optional.IsDefined(HttpPort))
            {
                writer.WritePropertyName("httpPort"u8);
                writer.WriteNumberValue(HttpPort.Value);
            }
            if (Core.Optional.IsDefined(HttpsPort))
            {
                writer.WritePropertyName("httpsPort"u8);
                writer.WriteNumberValue(HttpsPort.Value);
            }
            if (Core.Optional.IsDefined(EnabledState))
            {
                writer.WritePropertyName("enabledState"u8);
                writer.WriteStringValue(EnabledState.Value.ToString());
            }
            if (Core.Optional.IsDefined(Priority))
            {
                writer.WritePropertyName("priority"u8);
                writer.WriteNumberValue(Priority.Value);
            }
            if (Core.Optional.IsDefined(Weight))
            {
                writer.WritePropertyName("weight"u8);
                writer.WriteNumberValue(Weight.Value);
            }
            if (Core.Optional.IsDefined(BackendHostHeader))
            {
                writer.WritePropertyName("backendHostHeader"u8);
                writer.WriteStringValue(BackendHostHeader);
            }
            writer.WriteEndObject();
        }

        internal static FrontDoorBackend DeserializeFrontDoorBackend(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<string> address = default;
            Core.Optional<string> privateLinkAlias = default;
            Core.Optional<ResourceIdentifier> privateLinkResourceId = default;
            Core.Optional<AzureLocation?> privateLinkLocation = default;
            Core.Optional<BackendPrivateEndpointStatus?> privateEndpointStatus = default;
            Core.Optional<string> privateLinkApprovalMessage = default;
            Core.Optional<int> httpPort = default;
            Core.Optional<int> httpsPort = default;
            Core.Optional<BackendEnabledState> enabledState = default;
            Core.Optional<int> priority = default;
            Core.Optional<int> weight = default;
            Core.Optional<string> backendHostHeader = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("address"u8))
                {
                    address = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("privateLinkAlias"u8))
                {
                    privateLinkAlias = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("privateLinkResourceId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        privateLinkResourceId = null;
                        continue;
                    }
                    privateLinkResourceId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("privateLinkLocation"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        privateLinkLocation = null;
                        continue;
                    }
                    privateLinkLocation = new AzureLocation(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("privateEndpointStatus"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        privateEndpointStatus = null;
                        continue;
                    }
                    privateEndpointStatus = new BackendPrivateEndpointStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("privateLinkApprovalMessage"u8))
                {
                    privateLinkApprovalMessage = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("httpPort"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    httpPort = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("httpsPort"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    httpsPort = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("enabledState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    enabledState = new BackendEnabledState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("priority"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    priority = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("weight"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    weight = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("backendHostHeader"u8))
                {
                    backendHostHeader = property.Value.GetString();
                    continue;
                }
            }
            return new FrontDoorBackend(address.Value, privateLinkAlias.Value, privateLinkResourceId.Value, Core.Optional.ToNullable(privateLinkLocation), Core.Optional.ToNullable(privateEndpointStatus), privateLinkApprovalMessage.Value, Core.Optional.ToNullable(httpPort), Core.Optional.ToNullable(httpsPort), Core.Optional.ToNullable(enabledState), Core.Optional.ToNullable(priority), Core.Optional.ToNullable(weight), backendHostHeader.Value);
        }
    }
}
