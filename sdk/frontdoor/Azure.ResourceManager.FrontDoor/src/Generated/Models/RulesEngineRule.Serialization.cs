// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.FrontDoor.Models
{
    public partial class RulesEngineRule : IUtf8JsonSerializable, IModelJsonSerializable<RulesEngineRule>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<RulesEngineRule>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<RulesEngineRule>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            writer.WriteStartObject();
            writer.WritePropertyName("name"u8);
            writer.WriteStringValue(Name);
            writer.WritePropertyName("priority"u8);
            writer.WriteNumberValue(Priority);
            writer.WritePropertyName("action"u8);
            writer.WriteObjectValue(Action);
            if (Optional.IsCollectionDefined(MatchConditions))
            {
                if (MatchConditions != null)
                {
                    writer.WritePropertyName("matchConditions"u8);
                    writer.WriteStartArray();
                    foreach (var item in MatchConditions)
                    {
                        writer.WriteObjectValue(item);
                    }
                    writer.WriteEndArray();
                }
                else
                {
                    writer.WriteNull("matchConditions");
                }
            }
            if (Optional.IsDefined(MatchProcessingBehavior))
            {
                if (MatchProcessingBehavior != null)
                {
                    writer.WritePropertyName("matchProcessingBehavior"u8);
                    writer.WriteStringValue(MatchProcessingBehavior.Value.ToString());
                }
                else
                {
                    writer.WriteNull("matchProcessingBehavior");
                }
            }
            if (_rawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _rawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static RulesEngineRule DeserializeRulesEngineRule(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string name = default;
            int priority = default;
            RulesEngineAction action = default;
            Optional<IList<RulesEngineMatchCondition>> matchConditions = default;
            Optional<MatchProcessingBehavior?> matchProcessingBehavior = default;
            Dictionary<string, BinaryData> rawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("priority"u8))
                {
                    priority = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("action"u8))
                {
                    action = RulesEngineAction.DeserializeRulesEngineAction(property.Value);
                    continue;
                }
                if (property.NameEquals("matchConditions"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        matchConditions = null;
                        continue;
                    }
                    List<RulesEngineMatchCondition> array = new List<RulesEngineMatchCondition>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(RulesEngineMatchCondition.DeserializeRulesEngineMatchCondition(item));
                    }
                    matchConditions = array;
                    continue;
                }
                if (property.NameEquals("matchProcessingBehavior"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        matchProcessingBehavior = null;
                        continue;
                    }
                    matchProcessingBehavior = new MatchProcessingBehavior(property.Value.GetString());
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    rawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new RulesEngineRule(name, priority, action, Optional.ToList(matchConditions), Optional.ToNullable(matchProcessingBehavior), rawData);
        }

        RulesEngineRule IModelJsonSerializable<RulesEngineRule>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeRulesEngineRule(doc.RootElement, options);
        }

        BinaryData IModelSerializable<RulesEngineRule>.Serialize(ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        RulesEngineRule IModelSerializable<RulesEngineRule>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeRulesEngineRule(doc.RootElement, options);
        }

        public static implicit operator RequestContent(RulesEngineRule model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        public static explicit operator RulesEngineRule(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeRulesEngineRule(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
