// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Azure.ResourceManager.FrontDoor.Models
{
    /// <summary> Define a match condition. </summary>
    public partial class RulesEngineMatchCondition
    {
        /// <summary> Initializes a new instance of RulesEngineMatchCondition. </summary>
        /// <param name="rulesEngineMatchVariable"> Match Variable. </param>
        /// <param name="rulesEngineOperator"> Describes operator to apply to the match condition. </param>
        /// <param name="rulesEngineMatchValue"> Match values to match against. The operator will apply to each value in here with OR semantics. If any of them match the variable with the given operator this match condition is considered a match. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="rulesEngineMatchValue"/> is null. </exception>
        public RulesEngineMatchCondition(RulesEngineMatchVariable rulesEngineMatchVariable, RulesEngineOperator rulesEngineOperator, IEnumerable<string> rulesEngineMatchValue)
        {
            if (rulesEngineMatchValue == null)
            {
                throw new ArgumentNullException(nameof(rulesEngineMatchValue));
            }

            RulesEngineMatchVariable = rulesEngineMatchVariable;
            RulesEngineOperator = rulesEngineOperator;
            RulesEngineMatchValue = rulesEngineMatchValue.ToList();
            Transforms = new ChangeTrackingList<Transform>();
        }

        /// <summary> Initializes a new instance of RulesEngineMatchCondition. </summary>
        /// <param name="rulesEngineMatchVariable"> Match Variable. </param>
        /// <param name="selector"> Name of selector in RequestHeader or RequestBody to be matched. </param>
        /// <param name="rulesEngineOperator"> Describes operator to apply to the match condition. </param>
        /// <param name="negateCondition"> Describes if this is negate condition or not. </param>
        /// <param name="rulesEngineMatchValue"> Match values to match against. The operator will apply to each value in here with OR semantics. If any of them match the variable with the given operator this match condition is considered a match. </param>
        /// <param name="transforms"> List of transforms. </param>
        internal RulesEngineMatchCondition(RulesEngineMatchVariable rulesEngineMatchVariable, string selector, RulesEngineOperator rulesEngineOperator, bool? negateCondition, IList<string> rulesEngineMatchValue, IList<Transform> transforms)
        {
            RulesEngineMatchVariable = rulesEngineMatchVariable;
            Selector = selector;
            RulesEngineOperator = rulesEngineOperator;
            NegateCondition = negateCondition;
            RulesEngineMatchValue = rulesEngineMatchValue;
            Transforms = transforms;
        }

        /// <summary> Match Variable. </summary>
        public RulesEngineMatchVariable RulesEngineMatchVariable { get; set; }
        /// <summary> Name of selector in RequestHeader or RequestBody to be matched. </summary>
        public string Selector { get; set; }
        /// <summary> Describes operator to apply to the match condition. </summary>
        public RulesEngineOperator RulesEngineOperator { get; set; }
        /// <summary> Describes if this is negate condition or not. </summary>
        public bool? NegateCondition { get; set; }
        /// <summary> Match values to match against. The operator will apply to each value in here with OR semantics. If any of them match the variable with the given operator this match condition is considered a match. </summary>
        public IList<string> RulesEngineMatchValue { get; }
        /// <summary> List of transforms. </summary>
        public IList<Transform> Transforms { get; }
    }
}
