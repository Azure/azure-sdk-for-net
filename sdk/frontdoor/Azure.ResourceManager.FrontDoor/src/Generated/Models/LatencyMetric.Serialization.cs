// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.FrontDoor.Models
{
    public partial class LatencyMetric : IUtf8JsonSerializable, IJsonModel<LatencyMetric>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<LatencyMetric>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<LatencyMetric>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<LatencyMetric>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(LatencyMetric)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (options.Format != "W" && Optional.IsDefined(Name))
            {
                writer.WritePropertyName("name"u8);
                writer.WriteStringValue(Name);
            }
            if (options.Format != "W" && Optional.IsDefined(EndOn))
            {
                writer.WritePropertyName("endDateTimeUTC"u8);
                writer.WriteStringValue(EndOn.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(AValue))
            {
                writer.WritePropertyName("aValue"u8);
                writer.WriteNumberValue(AValue.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(BValue))
            {
                writer.WritePropertyName("bValue"u8);
                writer.WriteNumberValue(BValue.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(Delta))
            {
                writer.WritePropertyName("delta"u8);
                writer.WriteNumberValue(Delta.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(DeltaPercent))
            {
                writer.WritePropertyName("deltaPercent"u8);
                writer.WriteNumberValue(DeltaPercent.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(ACLower95CI))
            {
                writer.WritePropertyName("aCLower95CI"u8);
                writer.WriteNumberValue(ACLower95CI.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(AHUpper95CI))
            {
                writer.WritePropertyName("aHUpper95CI"u8);
                writer.WriteNumberValue(AHUpper95CI.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(BCLower95CI))
            {
                writer.WritePropertyName("bCLower95CI"u8);
                writer.WriteNumberValue(BCLower95CI.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(BUpper95CI))
            {
                writer.WritePropertyName("bUpper95CI"u8);
                writer.WriteNumberValue(BUpper95CI.Value);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        LatencyMetric IJsonModel<LatencyMetric>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<LatencyMetric>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(LatencyMetric)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeLatencyMetric(document.RootElement, options);
        }

        internal static LatencyMetric DeserializeLatencyMetric(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> name = default;
            Optional<DateTimeOffset> endDateTimeUtc = default;
            Optional<float> aValue = default;
            Optional<float> bValue = default;
            Optional<float> delta = default;
            Optional<float> deltaPercent = default;
            Optional<float> acLower95CI = default;
            Optional<float> ahUpper95CI = default;
            Optional<float> bcLower95CI = default;
            Optional<float> bUpper95CI = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("endDateTimeUTC"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    endDateTimeUtc = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("aValue"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    aValue = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("bValue"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    bValue = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("delta"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    delta = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("deltaPercent"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    deltaPercent = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("aCLower95CI"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    acLower95CI = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("aHUpper95CI"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    ahUpper95CI = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("bCLower95CI"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    bcLower95CI = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("bUpper95CI"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    bUpper95CI = property.Value.GetSingle();
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new LatencyMetric(name.Value, Optional.ToNullable(endDateTimeUtc), Optional.ToNullable(aValue), Optional.ToNullable(bValue), Optional.ToNullable(delta), Optional.ToNullable(deltaPercent), Optional.ToNullable(acLower95CI), Optional.ToNullable(ahUpper95CI), Optional.ToNullable(bcLower95CI), Optional.ToNullable(bUpper95CI), serializedAdditionalRawData);
        }

        private BinaryData SerializeBicep(ModelReaderWriterOptions options)
        {
            StringBuilder builder = new StringBuilder();
            builder.AppendLine("{");

            if (Optional.IsDefined(Name))
            {
                builder.Append("  name:");
                builder.AppendLine($" '{Name}'");
            }

            if (Optional.IsDefined(EndOn))
            {
                builder.Append("  endDateTimeUTC:");
                var formattedDateTimeString = TypeFormatters.ToString(EndOn.Value, "o");
                builder.AppendLine($" '{formattedDateTimeString}'");
            }

            if (Optional.IsDefined(AValue))
            {
                builder.Append("  aValue:");
                builder.AppendLine($" '{AValue.Value.ToString()}'");
            }

            if (Optional.IsDefined(BValue))
            {
                builder.Append("  bValue:");
                builder.AppendLine($" '{BValue.Value.ToString()}'");
            }

            if (Optional.IsDefined(Delta))
            {
                builder.Append("  delta:");
                builder.AppendLine($" '{Delta.Value.ToString()}'");
            }

            if (Optional.IsDefined(DeltaPercent))
            {
                builder.Append("  deltaPercent:");
                builder.AppendLine($" '{DeltaPercent.Value.ToString()}'");
            }

            if (Optional.IsDefined(ACLower95CI))
            {
                builder.Append("  aCLower95CI:");
                builder.AppendLine($" '{ACLower95CI.Value.ToString()}'");
            }

            if (Optional.IsDefined(AHUpper95CI))
            {
                builder.Append("  aHUpper95CI:");
                builder.AppendLine($" '{AHUpper95CI.Value.ToString()}'");
            }

            if (Optional.IsDefined(BCLower95CI))
            {
                builder.Append("  bCLower95CI:");
                builder.AppendLine($" '{BCLower95CI.Value.ToString()}'");
            }

            if (Optional.IsDefined(BUpper95CI))
            {
                builder.Append("  bUpper95CI:");
                builder.AppendLine($" '{BUpper95CI.Value.ToString()}'");
            }

            builder.AppendLine("}");
            return BinaryData.FromString(builder.ToString());
        }

        private void AppendChildObject(StringBuilder stringBuilder, object childObject, ModelReaderWriterOptions options, int spaces, bool indentFirstLine)
        {
            string indent = new string(' ', spaces);
            BinaryData data = ModelReaderWriter.Write(childObject, options);
            string[] lines = data.ToString().Split(Environment.NewLine.ToCharArray(), StringSplitOptions.RemoveEmptyEntries);
            for (int i = 0; i < lines.Length; i++)
            {
                string line = lines[i];
                if (i == 0 && !indentFirstLine)
                {
                    stringBuilder.AppendLine($" {line}");
                }
                else
                {
                    stringBuilder.AppendLine($"{indent}{line}");
                }
            }
        }

        BinaryData IPersistableModel<LatencyMetric>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<LatencyMetric>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                case "B":
                    return SerializeBicep(options);
                default:
                    throw new FormatException($"The model {nameof(LatencyMetric)} does not support '{options.Format}' format.");
            }
        }

        LatencyMetric IPersistableModel<LatencyMetric>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<LatencyMetric>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeLatencyMetric(document.RootElement, options);
                    }
                case "B":
                    throw new InvalidOperationException("Bicep deserialization is not supported for this type.");
                default:
                    throw new FormatException($"The model {nameof(LatencyMetric)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<LatencyMetric>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
