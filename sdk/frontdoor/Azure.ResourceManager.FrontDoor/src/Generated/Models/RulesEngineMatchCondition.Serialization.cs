// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.FrontDoor.Models
{
    public partial class RulesEngineMatchCondition : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("rulesEngineMatchVariable"u8);
            writer.WriteStringValue(RulesEngineMatchVariable.ToString());
            if (Optional.IsDefined(Selector))
            {
                writer.WritePropertyName("selector"u8);
                writer.WriteStringValue(Selector);
            }
            writer.WritePropertyName("rulesEngineOperator"u8);
            writer.WriteStringValue(RulesEngineOperator.ToString());
            if (Optional.IsDefined(IsNegateCondition))
            {
                writer.WritePropertyName("negateCondition"u8);
                writer.WriteBooleanValue(IsNegateCondition.Value);
            }
            writer.WritePropertyName("rulesEngineMatchValue"u8);
            writer.WriteStartArray();
            foreach (var item in RulesEngineMatchValue)
            {
                writer.WriteStringValue(item);
            }
            writer.WriteEndArray();
            if (Optional.IsCollectionDefined(Transforms))
            {
                writer.WritePropertyName("transforms"u8);
                writer.WriteStartArray();
                foreach (var item in Transforms)
                {
                    writer.WriteStringValue(item.ToString());
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static RulesEngineMatchCondition DeserializeRulesEngineMatchCondition(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            RulesEngineMatchVariable rulesEngineMatchVariable = default;
            Optional<string> selector = default;
            RulesEngineOperator rulesEngineOperator = default;
            Optional<bool> negateCondition = default;
            IList<string> rulesEngineMatchValue = default;
            Optional<IList<RulesEngineMatchTransform>> transforms = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("rulesEngineMatchVariable"u8))
                {
                    rulesEngineMatchVariable = new RulesEngineMatchVariable(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("selector"u8))
                {
                    selector = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("rulesEngineOperator"u8))
                {
                    rulesEngineOperator = new RulesEngineOperator(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("negateCondition"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    negateCondition = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("rulesEngineMatchValue"u8))
                {
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    rulesEngineMatchValue = array;
                    continue;
                }
                if (property.NameEquals("transforms"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<RulesEngineMatchTransform> array = new List<RulesEngineMatchTransform>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(new RulesEngineMatchTransform(item.GetString()));
                    }
                    transforms = array;
                    continue;
                }
            }
            return new RulesEngineMatchCondition(rulesEngineMatchVariable, selector.Value, rulesEngineOperator, Optional.ToNullable(negateCondition), rulesEngineMatchValue, Optional.ToList(transforms));
        }
    }
}
