// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.FrontDoor.Models
{
    /// <summary> The aggregation interval of the Timeseries. </summary>
    public readonly partial struct AggregationInterval : IEquatable<AggregationInterval>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AggregationInterval"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AggregationInterval(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string HourlyValue = "Hourly";
        private const string DailyValue = "Daily";

        /// <summary> Hourly. </summary>
        public static AggregationInterval Hourly { get; } = new AggregationInterval(HourlyValue);
        /// <summary> Daily. </summary>
        public static AggregationInterval Daily { get; } = new AggregationInterval(DailyValue);
        /// <summary> Determines if two <see cref="AggregationInterval"/> values are the same. </summary>
        public static bool operator ==(AggregationInterval left, AggregationInterval right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AggregationInterval"/> values are not the same. </summary>
        public static bool operator !=(AggregationInterval left, AggregationInterval right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="AggregationInterval"/>. </summary>
        public static implicit operator AggregationInterval(string value) => new AggregationInterval(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AggregationInterval other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AggregationInterval other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
