// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.FrontDoor
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for NetworkExperimentProfilesOperations.
    /// </summary>
    public static partial class NetworkExperimentProfilesOperationsExtensions
    {
            /// <summary>
            /// Gets a list of Network Experiment Profiles under a subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<Profile> List(this INetworkExperimentProfilesOperations operations)
            {
                return operations.ListAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of Network Experiment Profiles under a subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Profile>> ListAsync(this INetworkExperimentProfilesOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of Network Experiment Profiles within a resource group under a
            /// subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            public static IPage<Profile> ListByResourceGroup(this INetworkExperimentProfilesOperations operations, string resourceGroupName)
            {
                return operations.ListByResourceGroupAsync(resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of Network Experiment Profiles within a resource group under a
            /// subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Profile>> ListByResourceGroupAsync(this INetworkExperimentProfilesOperations operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets an NetworkExperiment Profile by ProfileName
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='profileName'>
            /// The Profile identifier associated with the Tenant and Partner
            /// </param>
            public static Profile Get(this INetworkExperimentProfilesOperations operations, string resourceGroupName, string profileName)
            {
                return operations.GetAsync(resourceGroupName, profileName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets an NetworkExperiment Profile by ProfileName
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='profileName'>
            /// The Profile identifier associated with the Tenant and Partner
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Profile> GetAsync(this INetworkExperimentProfilesOperations operations, string resourceGroupName, string profileName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, profileName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates an NetworkExperiment Profile
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='profileName'>
            /// The Profile identifier associated with the Tenant and Partner
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='parameters'>
            /// An Network Experiment Profile
            /// </param>
            public static Profile CreateOrUpdate(this INetworkExperimentProfilesOperations operations, string profileName, string resourceGroupName, Profile parameters)
            {
                return operations.CreateOrUpdateAsync(profileName, resourceGroupName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates an NetworkExperiment Profile
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='profileName'>
            /// The Profile identifier associated with the Tenant and Partner
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='parameters'>
            /// An Network Experiment Profile
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Profile> CreateOrUpdateAsync(this INetworkExperimentProfilesOperations operations, string profileName, string resourceGroupName, Profile parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(profileName, resourceGroupName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates an NetworkExperimentProfiles by NetworkExperimentProfile name
            /// </summary>
            /// <remarks>
            /// Updates an NetworkExperimentProfiles
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='profileName'>
            /// The Profile identifier associated with the Tenant and Partner
            /// </param>
            /// <param name='parameters'>
            /// The Profile Update Model
            /// </param>
            public static Profile Update(this INetworkExperimentProfilesOperations operations, string resourceGroupName, string profileName, ProfileUpdateModel parameters)
            {
                return operations.UpdateAsync(resourceGroupName, profileName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates an NetworkExperimentProfiles by NetworkExperimentProfile name
            /// </summary>
            /// <remarks>
            /// Updates an NetworkExperimentProfiles
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='profileName'>
            /// The Profile identifier associated with the Tenant and Partner
            /// </param>
            /// <param name='parameters'>
            /// The Profile Update Model
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Profile> UpdateAsync(this INetworkExperimentProfilesOperations operations, string resourceGroupName, string profileName, ProfileUpdateModel parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, profileName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an NetworkExperiment Profile by ProfileName
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='profileName'>
            /// The Profile identifier associated with the Tenant and Partner
            /// </param>
            public static void Delete(this INetworkExperimentProfilesOperations operations, string resourceGroupName, string profileName)
            {
                operations.DeleteAsync(resourceGroupName, profileName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an NetworkExperiment Profile by ProfileName
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='profileName'>
            /// The Profile identifier associated with the Tenant and Partner
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this INetworkExperimentProfilesOperations operations, string resourceGroupName, string profileName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, profileName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Creates an NetworkExperiment Profile
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='profileName'>
            /// The Profile identifier associated with the Tenant and Partner
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='parameters'>
            /// An Network Experiment Profile
            /// </param>
            public static Profile BeginCreateOrUpdate(this INetworkExperimentProfilesOperations operations, string profileName, string resourceGroupName, Profile parameters)
            {
                return operations.BeginCreateOrUpdateAsync(profileName, resourceGroupName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates an NetworkExperiment Profile
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='profileName'>
            /// The Profile identifier associated with the Tenant and Partner
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='parameters'>
            /// An Network Experiment Profile
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Profile> BeginCreateOrUpdateAsync(this INetworkExperimentProfilesOperations operations, string profileName, string resourceGroupName, Profile parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(profileName, resourceGroupName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates an NetworkExperimentProfiles by NetworkExperimentProfile name
            /// </summary>
            /// <remarks>
            /// Updates an NetworkExperimentProfiles
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='profileName'>
            /// The Profile identifier associated with the Tenant and Partner
            /// </param>
            /// <param name='parameters'>
            /// The Profile Update Model
            /// </param>
            public static Profile BeginUpdate(this INetworkExperimentProfilesOperations operations, string resourceGroupName, string profileName, ProfileUpdateModel parameters)
            {
                return operations.BeginUpdateAsync(resourceGroupName, profileName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates an NetworkExperimentProfiles by NetworkExperimentProfile name
            /// </summary>
            /// <remarks>
            /// Updates an NetworkExperimentProfiles
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='profileName'>
            /// The Profile identifier associated with the Tenant and Partner
            /// </param>
            /// <param name='parameters'>
            /// The Profile Update Model
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Profile> BeginUpdateAsync(this INetworkExperimentProfilesOperations operations, string resourceGroupName, string profileName, ProfileUpdateModel parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(resourceGroupName, profileName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an NetworkExperiment Profile by ProfileName
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='profileName'>
            /// The Profile identifier associated with the Tenant and Partner
            /// </param>
            public static void BeginDelete(this INetworkExperimentProfilesOperations operations, string resourceGroupName, string profileName)
            {
                operations.BeginDeleteAsync(resourceGroupName, profileName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an NetworkExperiment Profile by ProfileName
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='profileName'>
            /// The Profile identifier associated with the Tenant and Partner
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this INetworkExperimentProfilesOperations operations, string resourceGroupName, string profileName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, profileName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets a list of Network Experiment Profiles under a subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Profile> ListNext(this INetworkExperimentProfilesOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of Network Experiment Profiles under a subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Profile>> ListNextAsync(this INetworkExperimentProfilesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of Network Experiment Profiles within a resource group under a
            /// subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Profile> ListByResourceGroupNext(this INetworkExperimentProfilesOperations operations, string nextPageLink)
            {
                return operations.ListByResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of Network Experiment Profiles within a resource group under a
            /// subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Profile>> ListByResourceGroupNextAsync(this INetworkExperimentProfilesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
