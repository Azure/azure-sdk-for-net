// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.FrontDoor.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Backend address of a frontDoor load balancer.
    /// </summary>
    public partial class Backend
    {
        /// <summary>
        /// Initializes a new instance of the Backend class.
        /// </summary>
        public Backend()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Backend class.
        /// </summary>
        /// <param name="address">Location of the backend (IP address or
        /// FQDN)</param>
        /// <param name="httpPort">The HTTP TCP port number. Must be between 1
        /// and 65535.</param>
        /// <param name="httpsPort">The HTTPS TCP port number. Must be between
        /// 1 and 65535.</param>
        /// <param name="enabledState">Whether to enable use of this backend.
        /// Permitted values are 'Enabled' or 'Disabled'. Possible values
        /// include: 'Enabled', 'Disabled'</param>
        /// <param name="priority">Priority to use for load balancing. Higher
        /// priorities will not be used for load balancing if any lower
        /// priority backend is healthy.</param>
        /// <param name="weight">Weight of this endpoint for load balancing
        /// purposes.</param>
        /// <param name="backendHostHeader">The value to use as the host header
        /// sent to the backend. If blank or unspecified, this defaults to the
        /// incoming host.</param>
        public Backend(string address = default(string), int? httpPort = default(int?), int? httpsPort = default(int?), string enabledState = default(string), int? priority = default(int?), int? weight = default(int?), string backendHostHeader = default(string))
        {
            Address = address;
            HttpPort = httpPort;
            HttpsPort = httpsPort;
            EnabledState = enabledState;
            Priority = priority;
            Weight = weight;
            BackendHostHeader = backendHostHeader;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets location of the backend (IP address or FQDN)
        /// </summary>
        [JsonProperty(PropertyName = "address")]
        public string Address { get; set; }

        /// <summary>
        /// Gets or sets the HTTP TCP port number. Must be between 1 and 65535.
        /// </summary>
        [JsonProperty(PropertyName = "httpPort")]
        public int? HttpPort { get; set; }

        /// <summary>
        /// Gets or sets the HTTPS TCP port number. Must be between 1 and
        /// 65535.
        /// </summary>
        [JsonProperty(PropertyName = "httpsPort")]
        public int? HttpsPort { get; set; }

        /// <summary>
        /// Gets or sets whether to enable use of this backend. Permitted
        /// values are 'Enabled' or 'Disabled'. Possible values include:
        /// 'Enabled', 'Disabled'
        /// </summary>
        [JsonProperty(PropertyName = "enabledState")]
        public string EnabledState { get; set; }

        /// <summary>
        /// Gets or sets priority to use for load balancing. Higher priorities
        /// will not be used for load balancing if any lower priority backend
        /// is healthy.
        /// </summary>
        [JsonProperty(PropertyName = "priority")]
        public int? Priority { get; set; }

        /// <summary>
        /// Gets or sets weight of this endpoint for load balancing purposes.
        /// </summary>
        [JsonProperty(PropertyName = "weight")]
        public int? Weight { get; set; }

        /// <summary>
        /// Gets or sets the value to use as the host header sent to the
        /// backend. If blank or unspecified, this defaults to the incoming
        /// host.
        /// </summary>
        [JsonProperty(PropertyName = "backendHostHeader")]
        public string BackendHostHeader { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (HttpPort > 65535)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "HttpPort", 65535);
            }
            if (HttpPort < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "HttpPort", 1);
            }
            if (HttpsPort > 65535)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "HttpsPort", 65535);
            }
            if (HttpsPort < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "HttpsPort", 1);
            }
            if (Priority > 5)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "Priority", 5);
            }
            if (Priority < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "Priority", 1);
            }
            if (Weight > 1000)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "Weight", 1000);
            }
            if (Weight < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "Weight", 1);
            }
        }
    }
}
