// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.FrontDoor.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Contains a list of match conditions, and an action on how to modify the
    /// request/response. If multiple rules match, the actions from one rule
    /// that conflict with a previous rule overwrite for a singular action, or
    /// append in the case of headers manipulation.
    /// </summary>
    public partial class RulesEngineRule
    {
        /// <summary>
        /// Initializes a new instance of the RulesEngineRule class.
        /// </summary>
        public RulesEngineRule()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RulesEngineRule class.
        /// </summary>
        /// <param name="name">A name to refer to this specific rule.</param>
        /// <param name="priority">A priority assigned to this rule. </param>
        /// <param name="action">Actions to perform on the request and response
        /// if all of the match conditions are met.</param>
        /// <param name="matchConditions">A list of match conditions that must
        /// meet in order for the actions of this rule to run. Having no match
        /// conditions means the actions will always run.</param>
        /// <param name="matchProcessingBehavior">If this rule is a match
        /// should the rules engine continue running the remaining rules or
        /// stop. If not present, defaults to Continue. Possible values
        /// include: 'Continue', 'Stop'</param>
        public RulesEngineRule(string name, int priority, RulesEngineAction action, IList<RulesEngineMatchCondition> matchConditions = default(IList<RulesEngineMatchCondition>), string matchProcessingBehavior = default(string))
        {
            Name = name;
            Priority = priority;
            Action = action;
            MatchConditions = matchConditions;
            MatchProcessingBehavior = matchProcessingBehavior;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets a name to refer to this specific rule.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets a priority assigned to this rule.
        /// </summary>
        [JsonProperty(PropertyName = "priority")]
        public int Priority { get; set; }

        /// <summary>
        /// Gets or sets actions to perform on the request and response if all
        /// of the match conditions are met.
        /// </summary>
        [JsonProperty(PropertyName = "action")]
        public RulesEngineAction Action { get; set; }

        /// <summary>
        /// Gets or sets a list of match conditions that must meet in order for
        /// the actions of this rule to run. Having no match conditions means
        /// the actions will always run.
        /// </summary>
        [JsonProperty(PropertyName = "matchConditions")]
        public IList<RulesEngineMatchCondition> MatchConditions { get; set; }

        /// <summary>
        /// Gets or sets if this rule is a match should the rules engine
        /// continue running the remaining rules or stop. If not present,
        /// defaults to Continue. Possible values include: 'Continue', 'Stop'
        /// </summary>
        [JsonProperty(PropertyName = "matchProcessingBehavior")]
        public string MatchProcessingBehavior { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Action == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Action");
            }
            if (MatchConditions != null)
            {
                foreach (var element in MatchConditions)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
