// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.FrontDoor.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// A frontend endpoint used for routing.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class FrontendEndpoint : SubResource
    {
        /// <summary>
        /// Initializes a new instance of the FrontendEndpoint class.
        /// </summary>
        public FrontendEndpoint()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the FrontendEndpoint class.
        /// </summary>
        /// <param name="id">Resource ID.</param>
        /// <param name="hostName">The host name of the frontendEndpoint. Must
        /// be a domain name.</param>
        /// <param name="sessionAffinityEnabledState">Whether to allow session
        /// affinity on this host. Valid options are 'Enabled' or 'Disabled'.
        /// Possible values include: 'Enabled', 'Disabled'</param>
        /// <param name="sessionAffinityTtlSeconds">UNUSED. This field will be
        /// ignored. The TTL to use in seconds for session affinity, if
        /// applicable.</param>
        /// <param name="webApplicationFirewallPolicyLink">Defines the Web
        /// Application Firewall policy for each host (if applicable)</param>
        /// <param name="resourceState">Resource status. Possible values
        /// include: 'Creating', 'Enabling', 'Enabled', 'Disabling',
        /// 'Disabled', 'Deleting'</param>
        /// <param name="customHttpsProvisioningState">Provisioning status of
        /// Custom Https of the frontendEndpoint. Possible values include:
        /// 'Enabling', 'Enabled', 'Disabling', 'Disabled', 'Failed'</param>
        /// <param name="customHttpsProvisioningSubstate">Provisioning substate
        /// shows the progress of custom HTTPS enabling/disabling process step
        /// by step. Possible values include:
        /// 'SubmittingDomainControlValidationRequest',
        /// 'PendingDomainControlValidationREquestApproval',
        /// 'DomainControlValidationRequestApproved',
        /// 'DomainControlValidationRequestRejected',
        /// 'DomainControlValidationRequestTimedOut', 'IssuingCertificate',
        /// 'DeployingCertificate', 'CertificateDeployed',
        /// 'DeletingCertificate', 'CertificateDeleted'</param>
        /// <param name="customHttpsConfiguration">The configuration specifying
        /// how to enable HTTPS</param>
        /// <param name="name">Resource name.</param>
        /// <param name="type">Resource type.</param>
        public FrontendEndpoint(string id = default(string), string hostName = default(string), string sessionAffinityEnabledState = default(string), int? sessionAffinityTtlSeconds = default(int?), FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink webApplicationFirewallPolicyLink = default(FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink), string resourceState = default(string), string customHttpsProvisioningState = default(string), string customHttpsProvisioningSubstate = default(string), CustomHttpsConfiguration customHttpsConfiguration = default(CustomHttpsConfiguration), string name = default(string), string type = default(string))
            : base(id)
        {
            HostName = hostName;
            SessionAffinityEnabledState = sessionAffinityEnabledState;
            SessionAffinityTtlSeconds = sessionAffinityTtlSeconds;
            WebApplicationFirewallPolicyLink = webApplicationFirewallPolicyLink;
            ResourceState = resourceState;
            CustomHttpsProvisioningState = customHttpsProvisioningState;
            CustomHttpsProvisioningSubstate = customHttpsProvisioningSubstate;
            CustomHttpsConfiguration = customHttpsConfiguration;
            Name = name;
            Type = type;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the host name of the frontendEndpoint. Must be a
        /// domain name.
        /// </summary>
        [JsonProperty(PropertyName = "properties.hostName")]
        public string HostName { get; set; }

        /// <summary>
        /// Gets or sets whether to allow session affinity on this host. Valid
        /// options are 'Enabled' or 'Disabled'. Possible values include:
        /// 'Enabled', 'Disabled'
        /// </summary>
        [JsonProperty(PropertyName = "properties.sessionAffinityEnabledState")]
        public string SessionAffinityEnabledState { get; set; }

        /// <summary>
        /// Gets or sets UNUSED. This field will be ignored. The TTL to use in
        /// seconds for session affinity, if applicable.
        /// </summary>
        [JsonProperty(PropertyName = "properties.sessionAffinityTtlSeconds")]
        public int? SessionAffinityTtlSeconds { get; set; }

        /// <summary>
        /// Gets or sets defines the Web Application Firewall policy for each
        /// host (if applicable)
        /// </summary>
        [JsonProperty(PropertyName = "properties.webApplicationFirewallPolicyLink")]
        public FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink WebApplicationFirewallPolicyLink { get; set; }

        /// <summary>
        /// Gets or sets resource status. Possible values include: 'Creating',
        /// 'Enabling', 'Enabled', 'Disabling', 'Disabled', 'Deleting'
        /// </summary>
        [JsonProperty(PropertyName = "properties.resourceState")]
        public string ResourceState { get; set; }

        /// <summary>
        /// Gets provisioning status of Custom Https of the frontendEndpoint.
        /// Possible values include: 'Enabling', 'Enabled', 'Disabling',
        /// 'Disabled', 'Failed'
        /// </summary>
        [JsonProperty(PropertyName = "properties.customHttpsProvisioningState")]
        public string CustomHttpsProvisioningState { get; private set; }

        /// <summary>
        /// Gets provisioning substate shows the progress of custom HTTPS
        /// enabling/disabling process step by step. Possible values include:
        /// 'SubmittingDomainControlValidationRequest',
        /// 'PendingDomainControlValidationREquestApproval',
        /// 'DomainControlValidationRequestApproved',
        /// 'DomainControlValidationRequestRejected',
        /// 'DomainControlValidationRequestTimedOut', 'IssuingCertificate',
        /// 'DeployingCertificate', 'CertificateDeployed',
        /// 'DeletingCertificate', 'CertificateDeleted'
        /// </summary>
        [JsonProperty(PropertyName = "properties.customHttpsProvisioningSubstate")]
        public string CustomHttpsProvisioningSubstate { get; private set; }

        /// <summary>
        /// Gets the configuration specifying how to enable HTTPS
        /// </summary>
        [JsonProperty(PropertyName = "properties.customHttpsConfiguration")]
        public CustomHttpsConfiguration CustomHttpsConfiguration { get; private set; }

        /// <summary>
        /// Gets or sets resource name.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets resource type.
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (CustomHttpsConfiguration != null)
            {
                CustomHttpsConfiguration.Validate();
            }
        }
    }
}
