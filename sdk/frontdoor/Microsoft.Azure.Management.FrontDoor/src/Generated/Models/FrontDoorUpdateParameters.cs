// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.FrontDoor.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The properties needed to update a Front Door
    /// </summary>
    public partial class FrontDoorUpdateParameters
    {
        /// <summary>
        /// Initializes a new instance of the FrontDoorUpdateParameters class.
        /// </summary>
        public FrontDoorUpdateParameters()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the FrontDoorUpdateParameters class.
        /// </summary>
        /// <param name="friendlyName">A friendly name for the
        /// frontDoor</param>
        /// <param name="routingRules">Routing rules associated with this Front
        /// Door.</param>
        /// <param name="loadBalancingSettings">Load balancing settings
        /// associated with this Front Door instance.</param>
        /// <param name="healthProbeSettings">Health probe settings associated
        /// with this Front Door instance.</param>
        /// <param name="backendPools">Backend pools available to routing
        /// rules.</param>
        /// <param name="frontendEndpoints">Frontend endpoints available to
        /// routing rules.</param>
        /// <param name="backendPoolsSettings">Settings for all
        /// backendPools</param>
        /// <param name="enabledState">Operational status of the Front Door
        /// load balancer. Permitted values are 'Enabled' or 'Disabled'.
        /// Possible values include: 'Enabled', 'Disabled'</param>
        public FrontDoorUpdateParameters(string friendlyName = default(string), IList<RoutingRule> routingRules = default(IList<RoutingRule>), IList<LoadBalancingSettingsModel> loadBalancingSettings = default(IList<LoadBalancingSettingsModel>), IList<HealthProbeSettingsModel> healthProbeSettings = default(IList<HealthProbeSettingsModel>), IList<BackendPool> backendPools = default(IList<BackendPool>), IList<FrontendEndpoint> frontendEndpoints = default(IList<FrontendEndpoint>), BackendPoolsSettings backendPoolsSettings = default(BackendPoolsSettings), string enabledState = default(string))
        {
            FriendlyName = friendlyName;
            RoutingRules = routingRules;
            LoadBalancingSettings = loadBalancingSettings;
            HealthProbeSettings = healthProbeSettings;
            BackendPools = backendPools;
            FrontendEndpoints = frontendEndpoints;
            BackendPoolsSettings = backendPoolsSettings;
            EnabledState = enabledState;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets a friendly name for the frontDoor
        /// </summary>
        [JsonProperty(PropertyName = "friendlyName")]
        public string FriendlyName { get; set; }

        /// <summary>
        /// Gets or sets routing rules associated with this Front Door.
        /// </summary>
        [JsonProperty(PropertyName = "routingRules")]
        public IList<RoutingRule> RoutingRules { get; set; }

        /// <summary>
        /// Gets or sets load balancing settings associated with this Front
        /// Door instance.
        /// </summary>
        [JsonProperty(PropertyName = "loadBalancingSettings")]
        public IList<LoadBalancingSettingsModel> LoadBalancingSettings { get; set; }

        /// <summary>
        /// Gets or sets health probe settings associated with this Front Door
        /// instance.
        /// </summary>
        [JsonProperty(PropertyName = "healthProbeSettings")]
        public IList<HealthProbeSettingsModel> HealthProbeSettings { get; set; }

        /// <summary>
        /// Gets or sets backend pools available to routing rules.
        /// </summary>
        [JsonProperty(PropertyName = "backendPools")]
        public IList<BackendPool> BackendPools { get; set; }

        /// <summary>
        /// Gets or sets frontend endpoints available to routing rules.
        /// </summary>
        [JsonProperty(PropertyName = "frontendEndpoints")]
        public IList<FrontendEndpoint> FrontendEndpoints { get; set; }

        /// <summary>
        /// Gets or sets settings for all backendPools
        /// </summary>
        [JsonProperty(PropertyName = "backendPoolsSettings")]
        public BackendPoolsSettings BackendPoolsSettings { get; set; }

        /// <summary>
        /// Gets or sets operational status of the Front Door load balancer.
        /// Permitted values are 'Enabled' or 'Disabled'. Possible values
        /// include: 'Enabled', 'Disabled'
        /// </summary>
        [JsonProperty(PropertyName = "enabledState")]
        public string EnabledState { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (FrontendEndpoints != null)
            {
                foreach (var element in FrontendEndpoints)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (BackendPoolsSettings != null)
            {
                BackendPoolsSettings.Validate();
            }
        }
    }
}
