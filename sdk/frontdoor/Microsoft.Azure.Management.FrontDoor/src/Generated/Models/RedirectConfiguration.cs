// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.FrontDoor.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Describes Redirect Route.
    /// </summary>
    [Newtonsoft.Json.JsonObject("#Microsoft.Azure.FrontDoor.Models.FrontdoorRedirectConfiguration")]
    public partial class RedirectConfiguration : RouteConfiguration
    {
        /// <summary>
        /// Initializes a new instance of the RedirectConfiguration class.
        /// </summary>
        public RedirectConfiguration()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RedirectConfiguration class.
        /// </summary>
        /// <param name="redirectType">The redirect type the rule will use when
        /// redirecting traffic. Possible values include: 'Moved', 'Found',
        /// 'TemporaryRedirect', 'PermanentRedirect'</param>
        /// <param name="redirectProtocol">The protocol of the destination to
        /// where the traffic is redirected. Possible values include:
        /// 'HttpOnly', 'HttpsOnly', 'MatchRequest'</param>
        /// <param name="customHost">Host to redirect. Leave empty to use the
        /// incoming host as the destination host.</param>
        /// <param name="customPath">The full path to redirect. Path cannot be
        /// empty and must start with /. Leave empty to use the incoming path
        /// as destination path.</param>
        /// <param name="customFragment">Fragment to add to the redirect URL.
        /// Fragment is the part of the URL that comes after #. Do not include
        /// the #.</param>
        /// <param name="customQueryString">The set of query strings to be
        /// placed in the redirect URL. Setting this value would replace any
        /// existing query string; leave empty to preserve the incoming query
        /// string. Query string must be in &lt;key&gt;=&lt;value&gt; format.
        /// The first ? and &amp; will be added automatically so do not include
        /// them in the front, but do separate multiple query strings with
        /// &amp;.</param>
        public RedirectConfiguration(string redirectType = default(string), string redirectProtocol = default(string), string customHost = default(string), string customPath = default(string), string customFragment = default(string), string customQueryString = default(string))
        {
            RedirectType = redirectType;
            RedirectProtocol = redirectProtocol;
            CustomHost = customHost;
            CustomPath = customPath;
            CustomFragment = customFragment;
            CustomQueryString = customQueryString;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the redirect type the rule will use when redirecting
        /// traffic. Possible values include: 'Moved', 'Found',
        /// 'TemporaryRedirect', 'PermanentRedirect'
        /// </summary>
        [JsonProperty(PropertyName = "redirectType")]
        public string RedirectType { get; set; }

        /// <summary>
        /// Gets or sets the protocol of the destination to where the traffic
        /// is redirected. Possible values include: 'HttpOnly', 'HttpsOnly',
        /// 'MatchRequest'
        /// </summary>
        [JsonProperty(PropertyName = "redirectProtocol")]
        public string RedirectProtocol { get; set; }

        /// <summary>
        /// Gets or sets host to redirect. Leave empty to use the incoming host
        /// as the destination host.
        /// </summary>
        [JsonProperty(PropertyName = "customHost")]
        public string CustomHost { get; set; }

        /// <summary>
        /// Gets or sets the full path to redirect. Path cannot be empty and
        /// must start with /. Leave empty to use the incoming path as
        /// destination path.
        /// </summary>
        [JsonProperty(PropertyName = "customPath")]
        public string CustomPath { get; set; }

        /// <summary>
        /// Gets or sets fragment to add to the redirect URL. Fragment is the
        /// part of the URL that comes after #. Do not include the #.
        /// </summary>
        [JsonProperty(PropertyName = "customFragment")]
        public string CustomFragment { get; set; }

        /// <summary>
        /// Gets or sets the set of query strings to be placed in the redirect
        /// URL. Setting this value would replace any existing query string;
        /// leave empty to preserve the incoming query string. Query string
        /// must be in &amp;lt;key&amp;gt;=&amp;lt;value&amp;gt; format. The
        /// first ? and &amp;amp; will be added automatically so do not include
        /// them in the front, but do separate multiple query strings with
        /// &amp;amp;.
        /// </summary>
        [JsonProperty(PropertyName = "customQueryString")]
        public string CustomQueryString { get; set; }

    }
}
