// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.FrontDoor
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for LoadBalancingSettingsOperations.
    /// </summary>
    public static partial class LoadBalancingSettingsOperationsExtensions
    {
            /// <summary>
            /// Lists all of the LoadBalancingSettings within a Front Door.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='frontDoorName'>
            /// Name of the Front Door which is globally unique.
            /// </param>
            public static IPage<LoadBalancingSettingsModel> ListByFrontDoor(this ILoadBalancingSettingsOperations operations, string resourceGroupName, string frontDoorName)
            {
                return operations.ListByFrontDoorAsync(resourceGroupName, frontDoorName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all of the LoadBalancingSettings within a Front Door.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='frontDoorName'>
            /// Name of the Front Door which is globally unique.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<LoadBalancingSettingsModel>> ListByFrontDoorAsync(this ILoadBalancingSettingsOperations operations, string resourceGroupName, string frontDoorName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByFrontDoorWithHttpMessagesAsync(resourceGroupName, frontDoorName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a LoadBalancingSettings with the specified Rule name within the
            /// specified Front Door.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='frontDoorName'>
            /// Name of the Front Door which is globally unique.
            /// </param>
            /// <param name='loadBalancingSettingsName'>
            /// Name of the load balancing settings which is unique within the Front Door.
            /// </param>
            public static LoadBalancingSettingsModel Get(this ILoadBalancingSettingsOperations operations, string resourceGroupName, string frontDoorName, string loadBalancingSettingsName)
            {
                return operations.GetAsync(resourceGroupName, frontDoorName, loadBalancingSettingsName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a LoadBalancingSettings with the specified Rule name within the
            /// specified Front Door.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='frontDoorName'>
            /// Name of the Front Door which is globally unique.
            /// </param>
            /// <param name='loadBalancingSettingsName'>
            /// Name of the load balancing settings which is unique within the Front Door.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LoadBalancingSettingsModel> GetAsync(this ILoadBalancingSettingsOperations operations, string resourceGroupName, string frontDoorName, string loadBalancingSettingsName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, frontDoorName, loadBalancingSettingsName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new LoadBalancingSettings with the specified Rule name within the
            /// specified Front Door.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='frontDoorName'>
            /// Name of the Front Door which is globally unique.
            /// </param>
            /// <param name='loadBalancingSettingsName'>
            /// Name of the load balancing settings which is unique within the Front Door.
            /// </param>
            /// <param name='loadBalancingSettingsParameters'>
            /// LoadBalancingSettings properties needed to create a new Front Door.
            /// </param>
            public static LoadBalancingSettingsModel CreateOrUpdate(this ILoadBalancingSettingsOperations operations, string resourceGroupName, string frontDoorName, string loadBalancingSettingsName, LoadBalancingSettingsModel loadBalancingSettingsParameters)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, frontDoorName, loadBalancingSettingsName, loadBalancingSettingsParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new LoadBalancingSettings with the specified Rule name within the
            /// specified Front Door.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='frontDoorName'>
            /// Name of the Front Door which is globally unique.
            /// </param>
            /// <param name='loadBalancingSettingsName'>
            /// Name of the load balancing settings which is unique within the Front Door.
            /// </param>
            /// <param name='loadBalancingSettingsParameters'>
            /// LoadBalancingSettings properties needed to create a new Front Door.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LoadBalancingSettingsModel> CreateOrUpdateAsync(this ILoadBalancingSettingsOperations operations, string resourceGroupName, string frontDoorName, string loadBalancingSettingsName, LoadBalancingSettingsModel loadBalancingSettingsParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, frontDoorName, loadBalancingSettingsName, loadBalancingSettingsParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an existing LoadBalancingSettings with the specified parameters.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='frontDoorName'>
            /// Name of the Front Door which is globally unique.
            /// </param>
            /// <param name='loadBalancingSettingsName'>
            /// Name of the load balancing settings which is unique within the Front Door.
            /// </param>
            public static void Delete(this ILoadBalancingSettingsOperations operations, string resourceGroupName, string frontDoorName, string loadBalancingSettingsName)
            {
                operations.DeleteAsync(resourceGroupName, frontDoorName, loadBalancingSettingsName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an existing LoadBalancingSettings with the specified parameters.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='frontDoorName'>
            /// Name of the Front Door which is globally unique.
            /// </param>
            /// <param name='loadBalancingSettingsName'>
            /// Name of the load balancing settings which is unique within the Front Door.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this ILoadBalancingSettingsOperations operations, string resourceGroupName, string frontDoorName, string loadBalancingSettingsName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, frontDoorName, loadBalancingSettingsName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Creates a new LoadBalancingSettings with the specified Rule name within the
            /// specified Front Door.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='frontDoorName'>
            /// Name of the Front Door which is globally unique.
            /// </param>
            /// <param name='loadBalancingSettingsName'>
            /// Name of the load balancing settings which is unique within the Front Door.
            /// </param>
            /// <param name='loadBalancingSettingsParameters'>
            /// LoadBalancingSettings properties needed to create a new Front Door.
            /// </param>
            public static LoadBalancingSettingsModel BeginCreateOrUpdate(this ILoadBalancingSettingsOperations operations, string resourceGroupName, string frontDoorName, string loadBalancingSettingsName, LoadBalancingSettingsModel loadBalancingSettingsParameters)
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, frontDoorName, loadBalancingSettingsName, loadBalancingSettingsParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new LoadBalancingSettings with the specified Rule name within the
            /// specified Front Door.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='frontDoorName'>
            /// Name of the Front Door which is globally unique.
            /// </param>
            /// <param name='loadBalancingSettingsName'>
            /// Name of the load balancing settings which is unique within the Front Door.
            /// </param>
            /// <param name='loadBalancingSettingsParameters'>
            /// LoadBalancingSettings properties needed to create a new Front Door.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LoadBalancingSettingsModel> BeginCreateOrUpdateAsync(this ILoadBalancingSettingsOperations operations, string resourceGroupName, string frontDoorName, string loadBalancingSettingsName, LoadBalancingSettingsModel loadBalancingSettingsParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, frontDoorName, loadBalancingSettingsName, loadBalancingSettingsParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an existing LoadBalancingSettings with the specified parameters.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='frontDoorName'>
            /// Name of the Front Door which is globally unique.
            /// </param>
            /// <param name='loadBalancingSettingsName'>
            /// Name of the load balancing settings which is unique within the Front Door.
            /// </param>
            public static void BeginDelete(this ILoadBalancingSettingsOperations operations, string resourceGroupName, string frontDoorName, string loadBalancingSettingsName)
            {
                operations.BeginDeleteAsync(resourceGroupName, frontDoorName, loadBalancingSettingsName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an existing LoadBalancingSettings with the specified parameters.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='frontDoorName'>
            /// Name of the Front Door which is globally unique.
            /// </param>
            /// <param name='loadBalancingSettingsName'>
            /// Name of the load balancing settings which is unique within the Front Door.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this ILoadBalancingSettingsOperations operations, string resourceGroupName, string frontDoorName, string loadBalancingSettingsName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, frontDoorName, loadBalancingSettingsName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Lists all of the LoadBalancingSettings within a Front Door.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<LoadBalancingSettingsModel> ListByFrontDoorNext(this ILoadBalancingSettingsOperations operations, string nextPageLink)
            {
                return operations.ListByFrontDoorNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all of the LoadBalancingSettings within a Front Door.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<LoadBalancingSettingsModel>> ListByFrontDoorNextAsync(this ILoadBalancingSettingsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByFrontDoorNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
