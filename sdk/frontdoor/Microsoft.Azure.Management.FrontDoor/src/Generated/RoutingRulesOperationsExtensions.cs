// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.FrontDoor
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for RoutingRulesOperations.
    /// </summary>
    public static partial class RoutingRulesOperationsExtensions
    {
            /// <summary>
            /// Lists all of the Routing Rules within a Front Door.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='frontDoorName'>
            /// Name of the Front Door which is globally unique.
            /// </param>
            public static IPage<RoutingRule> ListByFrontDoor(this IRoutingRulesOperations operations, string resourceGroupName, string frontDoorName)
            {
                return operations.ListByFrontDoorAsync(resourceGroupName, frontDoorName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all of the Routing Rules within a Front Door.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='frontDoorName'>
            /// Name of the Front Door which is globally unique.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<RoutingRule>> ListByFrontDoorAsync(this IRoutingRulesOperations operations, string resourceGroupName, string frontDoorName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByFrontDoorWithHttpMessagesAsync(resourceGroupName, frontDoorName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a Routing Rule with the specified Rule name within the specified Front
            /// Door.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='frontDoorName'>
            /// Name of the Front Door which is globally unique.
            /// </param>
            /// <param name='routingRuleName'>
            /// Name of the Routing Rule which is unique within the Front Door.
            /// </param>
            public static RoutingRule Get(this IRoutingRulesOperations operations, string resourceGroupName, string frontDoorName, string routingRuleName)
            {
                return operations.GetAsync(resourceGroupName, frontDoorName, routingRuleName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a Routing Rule with the specified Rule name within the specified Front
            /// Door.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='frontDoorName'>
            /// Name of the Front Door which is globally unique.
            /// </param>
            /// <param name='routingRuleName'>
            /// Name of the Routing Rule which is unique within the Front Door.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RoutingRule> GetAsync(this IRoutingRulesOperations operations, string resourceGroupName, string frontDoorName, string routingRuleName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, frontDoorName, routingRuleName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new Routing Rule with the specified Rule name within the
            /// specified Front Door.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='frontDoorName'>
            /// Name of the Front Door which is globally unique.
            /// </param>
            /// <param name='routingRuleName'>
            /// Name of the Routing Rule which is unique within the Front Door.
            /// </param>
            /// <param name='routingRuleParameters'>
            /// Routing Rule properties needed to create a new Front Door.
            /// </param>
            public static RoutingRule CreateOrUpdate(this IRoutingRulesOperations operations, string resourceGroupName, string frontDoorName, string routingRuleName, RoutingRule routingRuleParameters)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, frontDoorName, routingRuleName, routingRuleParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new Routing Rule with the specified Rule name within the
            /// specified Front Door.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='frontDoorName'>
            /// Name of the Front Door which is globally unique.
            /// </param>
            /// <param name='routingRuleName'>
            /// Name of the Routing Rule which is unique within the Front Door.
            /// </param>
            /// <param name='routingRuleParameters'>
            /// Routing Rule properties needed to create a new Front Door.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RoutingRule> CreateOrUpdateAsync(this IRoutingRulesOperations operations, string resourceGroupName, string frontDoorName, string routingRuleName, RoutingRule routingRuleParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, frontDoorName, routingRuleName, routingRuleParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an existing Routing Rule with the specified parameters.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='frontDoorName'>
            /// Name of the Front Door which is globally unique.
            /// </param>
            /// <param name='routingRuleName'>
            /// Name of the Routing Rule which is unique within the Front Door.
            /// </param>
            public static void Delete(this IRoutingRulesOperations operations, string resourceGroupName, string frontDoorName, string routingRuleName)
            {
                operations.DeleteAsync(resourceGroupName, frontDoorName, routingRuleName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an existing Routing Rule with the specified parameters.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='frontDoorName'>
            /// Name of the Front Door which is globally unique.
            /// </param>
            /// <param name='routingRuleName'>
            /// Name of the Routing Rule which is unique within the Front Door.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IRoutingRulesOperations operations, string resourceGroupName, string frontDoorName, string routingRuleName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, frontDoorName, routingRuleName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Creates a new Routing Rule with the specified Rule name within the
            /// specified Front Door.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='frontDoorName'>
            /// Name of the Front Door which is globally unique.
            /// </param>
            /// <param name='routingRuleName'>
            /// Name of the Routing Rule which is unique within the Front Door.
            /// </param>
            /// <param name='routingRuleParameters'>
            /// Routing Rule properties needed to create a new Front Door.
            /// </param>
            public static RoutingRule BeginCreateOrUpdate(this IRoutingRulesOperations operations, string resourceGroupName, string frontDoorName, string routingRuleName, RoutingRule routingRuleParameters)
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, frontDoorName, routingRuleName, routingRuleParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new Routing Rule with the specified Rule name within the
            /// specified Front Door.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='frontDoorName'>
            /// Name of the Front Door which is globally unique.
            /// </param>
            /// <param name='routingRuleName'>
            /// Name of the Routing Rule which is unique within the Front Door.
            /// </param>
            /// <param name='routingRuleParameters'>
            /// Routing Rule properties needed to create a new Front Door.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RoutingRule> BeginCreateOrUpdateAsync(this IRoutingRulesOperations operations, string resourceGroupName, string frontDoorName, string routingRuleName, RoutingRule routingRuleParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, frontDoorName, routingRuleName, routingRuleParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an existing Routing Rule with the specified parameters.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='frontDoorName'>
            /// Name of the Front Door which is globally unique.
            /// </param>
            /// <param name='routingRuleName'>
            /// Name of the Routing Rule which is unique within the Front Door.
            /// </param>
            public static void BeginDelete(this IRoutingRulesOperations operations, string resourceGroupName, string frontDoorName, string routingRuleName)
            {
                operations.BeginDeleteAsync(resourceGroupName, frontDoorName, routingRuleName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an existing Routing Rule with the specified parameters.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='frontDoorName'>
            /// Name of the Front Door which is globally unique.
            /// </param>
            /// <param name='routingRuleName'>
            /// Name of the Routing Rule which is unique within the Front Door.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IRoutingRulesOperations operations, string resourceGroupName, string frontDoorName, string routingRuleName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, frontDoorName, routingRuleName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Lists all of the Routing Rules within a Front Door.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<RoutingRule> ListByFrontDoorNext(this IRoutingRulesOperations operations, string nextPageLink)
            {
                return operations.ListByFrontDoorNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all of the Routing Rules within a Front Door.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<RoutingRule>> ListByFrontDoorNextAsync(this IRoutingRulesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByFrontDoorNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
