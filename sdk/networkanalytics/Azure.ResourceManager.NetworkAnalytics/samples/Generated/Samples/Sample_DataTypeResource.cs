// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.NetworkAnalytics;
using Azure.ResourceManager.NetworkAnalytics.Models;

namespace Azure.ResourceManager.NetworkAnalytics.Samples
{
    public partial class Sample_DataTypeResource
    {
        // DataTypes_Get_MaximumSet_Gen
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_DataTypesGetMaximumSetGen()
        {
            // Generated from example definition: specification/networkanalytics/resource-manager/Microsoft.NetworkAnalytics/stable/2023-11-15/examples/DataTypes_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "DataTypes_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DataTypeResource created on azure
            // for more information of creating DataTypeResource, please refer to the document of DataTypeResource
            string subscriptionId = "00000000-0000-0000-0000-00000000000";
            string resourceGroupName = "aoiresourceGroupName";
            string dataProductName = "dataproduct01";
            string dataTypeName = "datatypename";
            ResourceIdentifier dataTypeResourceId = DataTypeResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, dataProductName, dataTypeName);
            DataTypeResource dataType = client.GetDataTypeResource(dataTypeResourceId);

            // invoke the operation
            DataTypeResource result = await dataType.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DataTypeData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // DataTypes_Get_MaximumSet_Gen - generated by [MinimumSet] rule_MinimumSet_Gen
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_DataTypesGetMaximumSetGenGeneratedByMinimumSetRuleMinimumSetGen()
        {
            // Generated from example definition: specification/networkanalytics/resource-manager/Microsoft.NetworkAnalytics/stable/2023-11-15/examples/DataTypes_Get_MinimumSet_Gen.json
            // this example is just showing the usage of "DataTypes_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DataTypeResource created on azure
            // for more information of creating DataTypeResource, please refer to the document of DataTypeResource
            string subscriptionId = "00000000-0000-0000-0000-00000000000";
            string resourceGroupName = "aoiresourceGroupName";
            string dataProductName = "dataproduct01";
            string dataTypeName = "datatypename";
            ResourceIdentifier dataTypeResourceId = DataTypeResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, dataProductName, dataTypeName);
            DataTypeResource dataType = client.GetDataTypeResource(dataTypeResourceId);

            // invoke the operation
            DataTypeResource result = await dataType.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DataTypeData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // DataTypes_Update_MaximumSet_Gen
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_DataTypesUpdateMaximumSetGen()
        {
            // Generated from example definition: specification/networkanalytics/resource-manager/Microsoft.NetworkAnalytics/stable/2023-11-15/examples/DataTypes_Update_MaximumSet_Gen.json
            // this example is just showing the usage of "DataTypes_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DataTypeResource created on azure
            // for more information of creating DataTypeResource, please refer to the document of DataTypeResource
            string subscriptionId = "00000000-0000-0000-0000-00000000000";
            string resourceGroupName = "aoiresourceGroupName";
            string dataProductName = "dataproduct01";
            string dataTypeName = "datatypename";
            ResourceIdentifier dataTypeResourceId = DataTypeResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, dataProductName, dataTypeName);
            DataTypeResource dataType = client.GetDataTypeResource(dataTypeResourceId);

            // invoke the operation
            DataTypePatch patch = new DataTypePatch()
            {
                State = new DataTypeState("STARTED"),
                StorageOutputRetention = 30,
                DatabaseCacheRetention = 16,
                DatabaseRetention = 9,
            };
            ArmOperation<DataTypeResource> lro = await dataType.UpdateAsync(WaitUntil.Completed, patch);
            DataTypeResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DataTypeData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // DataTypes_Update_MaximumSet_Gen - generated by [MinimumSet] rule_MinimumSet_Gen
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_DataTypesUpdateMaximumSetGenGeneratedByMinimumSetRuleMinimumSetGen()
        {
            // Generated from example definition: specification/networkanalytics/resource-manager/Microsoft.NetworkAnalytics/stable/2023-11-15/examples/DataTypes_Update_MinimumSet_Gen.json
            // this example is just showing the usage of "DataTypes_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DataTypeResource created on azure
            // for more information of creating DataTypeResource, please refer to the document of DataTypeResource
            string subscriptionId = "00000000-0000-0000-0000-00000000000";
            string resourceGroupName = "aoiresourceGroupName";
            string dataProductName = "dataproduct01";
            string dataTypeName = "datatypename";
            ResourceIdentifier dataTypeResourceId = DataTypeResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, dataProductName, dataTypeName);
            DataTypeResource dataType = client.GetDataTypeResource(dataTypeResourceId);

            // invoke the operation
            DataTypePatch patch = new DataTypePatch();
            ArmOperation<DataTypeResource> lro = await dataType.UpdateAsync(WaitUntil.Completed, patch);
            DataTypeResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DataTypeData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // DataTypes_Delete_MaximumSet_Gen
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_DataTypesDeleteMaximumSetGen()
        {
            // Generated from example definition: specification/networkanalytics/resource-manager/Microsoft.NetworkAnalytics/stable/2023-11-15/examples/DataTypes_Delete_MaximumSet_Gen.json
            // this example is just showing the usage of "DataTypes_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DataTypeResource created on azure
            // for more information of creating DataTypeResource, please refer to the document of DataTypeResource
            string subscriptionId = "00000000-0000-0000-0000-00000000000";
            string resourceGroupName = "aoiresourceGroupName";
            string dataProductName = "dataproduct01";
            string dataTypeName = "datatypename";
            ResourceIdentifier dataTypeResourceId = DataTypeResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, dataProductName, dataTypeName);
            DataTypeResource dataType = client.GetDataTypeResource(dataTypeResourceId);

            // invoke the operation
            await dataType.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // DataTypes_Delete_MaximumSet_Gen - generated by [MinimumSet] rule_MinimumSet_Gen
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_DataTypesDeleteMaximumSetGenGeneratedByMinimumSetRuleMinimumSetGen()
        {
            // Generated from example definition: specification/networkanalytics/resource-manager/Microsoft.NetworkAnalytics/stable/2023-11-15/examples/DataTypes_Delete_MinimumSet_Gen.json
            // this example is just showing the usage of "DataTypes_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DataTypeResource created on azure
            // for more information of creating DataTypeResource, please refer to the document of DataTypeResource
            string subscriptionId = "00000000-0000-0000-0000-00000000000";
            string resourceGroupName = "aoiresourceGroupName";
            string dataProductName = "dataproduct01";
            string dataTypeName = "datatypename";
            ResourceIdentifier dataTypeResourceId = DataTypeResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, dataProductName, dataTypeName);
            DataTypeResource dataType = client.GetDataTypeResource(dataTypeResourceId);

            // invoke the operation
            await dataType.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // DataTypes_DeleteData_MaximumSet_Gen
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task DeleteData_DataTypesDeleteDataMaximumSetGen()
        {
            // Generated from example definition: specification/networkanalytics/resource-manager/Microsoft.NetworkAnalytics/stable/2023-11-15/examples/DataTypes_DeleteData_MaximumSet_Gen.json
            // this example is just showing the usage of "DataTypes_DeleteData" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DataTypeResource created on azure
            // for more information of creating DataTypeResource, please refer to the document of DataTypeResource
            string subscriptionId = "00000000-0000-0000-0000-00000000000";
            string resourceGroupName = "aoiresourceGroupName";
            string dataProductName = "dataproduct01";
            string dataTypeName = "datatypename";
            ResourceIdentifier dataTypeResourceId = DataTypeResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, dataProductName, dataTypeName);
            DataTypeResource dataType = client.GetDataTypeResource(dataTypeResourceId);

            // invoke the operation
            BinaryData body = BinaryData.FromObjectAsJson(new Dictionary<string, object>()
            {
            });
            await dataType.DeleteDataAsync(WaitUntil.Completed, body);

            Console.WriteLine($"Succeeded");
        }

        // DataTypes_DeleteData_MinimumSet_Gen
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task DeleteData_DataTypesDeleteDataMinimumSetGen()
        {
            // Generated from example definition: specification/networkanalytics/resource-manager/Microsoft.NetworkAnalytics/stable/2023-11-15/examples/DataTypes_DeleteData_MinimumSet_Gen.json
            // this example is just showing the usage of "DataTypes_DeleteData" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DataTypeResource created on azure
            // for more information of creating DataTypeResource, please refer to the document of DataTypeResource
            string subscriptionId = "00000000-0000-0000-0000-00000000000";
            string resourceGroupName = "aoiresourceGroupName";
            string dataProductName = "dataproduct01";
            string dataTypeName = "datatypename";
            ResourceIdentifier dataTypeResourceId = DataTypeResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, dataProductName, dataTypeName);
            DataTypeResource dataType = client.GetDataTypeResource(dataTypeResourceId);

            // invoke the operation
            BinaryData body = BinaryData.FromObjectAsJson(new Dictionary<string, object>()
            {
            });
            await dataType.DeleteDataAsync(WaitUntil.Completed, body);

            Console.WriteLine($"Succeeded");
        }

        // DataTypes_GenerateStorageContainerSasToken_MaximumSet_Gen
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GenerateStorageContainerSasToken_DataTypesGenerateStorageContainerSasTokenMaximumSetGen()
        {
            // Generated from example definition: specification/networkanalytics/resource-manager/Microsoft.NetworkAnalytics/stable/2023-11-15/examples/DataTypes_GenerateStorageContainerSasToken_MaximumSet_Gen.json
            // this example is just showing the usage of "DataTypes_GenerateStorageContainerSasToken" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DataTypeResource created on azure
            // for more information of creating DataTypeResource, please refer to the document of DataTypeResource
            string subscriptionId = "00000000-0000-0000-0000-00000000000";
            string resourceGroupName = "aoiresourceGroupName";
            string dataProductName = "dataproduct01";
            string dataTypeName = "datatypename";
            ResourceIdentifier dataTypeResourceId = DataTypeResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, dataProductName, dataTypeName);
            DataTypeResource dataType = client.GetDataTypeResource(dataTypeResourceId);

            // invoke the operation
            ContainerSaS body = new ContainerSaS(DateTimeOffset.Parse("2023-08-24T05:34:58.039Z"), DateTimeOffset.Parse("2023-08-24T05:34:58.039Z"), "1.1.1.1");
            ContainerSasToken result = await dataType.GenerateStorageContainerSasTokenAsync(body);

            Console.WriteLine($"Succeeded: {result}");
        }

        // DataTypes_GenerateStorageContainerSasToken_MaximumSet_Gen - generated by [MinimumSet] rule_MinimumSet_Gen
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GenerateStorageContainerSasToken_DataTypesGenerateStorageContainerSasTokenMaximumSetGenGeneratedByMinimumSetRuleMinimumSetGen()
        {
            // Generated from example definition: specification/networkanalytics/resource-manager/Microsoft.NetworkAnalytics/stable/2023-11-15/examples/DataTypes_GenerateStorageContainerSasToken_MinimumSet_Gen.json
            // this example is just showing the usage of "DataTypes_GenerateStorageContainerSasToken" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DataTypeResource created on azure
            // for more information of creating DataTypeResource, please refer to the document of DataTypeResource
            string subscriptionId = "00000000-0000-0000-0000-00000000000";
            string resourceGroupName = "aoiresourceGroupName";
            string dataProductName = "dataproduct01";
            string dataTypeName = "datatypename";
            ResourceIdentifier dataTypeResourceId = DataTypeResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, dataProductName, dataTypeName);
            DataTypeResource dataType = client.GetDataTypeResource(dataTypeResourceId);

            // invoke the operation
            ContainerSaS body = new ContainerSaS(DateTimeOffset.Parse("2023-08-24T05:35:16.887Z"), DateTimeOffset.Parse("2023-08-24T05:35:16.887Z"), "1.1.1.1");
            ContainerSasToken result = await dataType.GenerateStorageContainerSasTokenAsync(body);

            Console.WriteLine($"Succeeded: {result}");
        }
    }
}
