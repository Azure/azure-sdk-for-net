// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.NetworkAnalytics.Models;

namespace Azure.ResourceManager.NetworkAnalytics
{
    public partial class DataProductData : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Identity))
            {
                writer.WritePropertyName("identity"u8);
                JsonSerializer.Serialize(writer, Identity);
            }
            if (Optional.IsCollectionDefined(Tags))
            {
                writer.WritePropertyName("tags"u8);
                writer.WriteStartObject();
                foreach (var item in Tags)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            writer.WritePropertyName("location"u8);
            writer.WriteStringValue(Location);
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(Publisher))
            {
                writer.WritePropertyName("publisher"u8);
                writer.WriteStringValue(Publisher);
            }
            if (Optional.IsDefined(Product))
            {
                writer.WritePropertyName("product"u8);
                writer.WriteStringValue(Product);
            }
            if (Optional.IsDefined(MajorVersion))
            {
                writer.WritePropertyName("majorVersion"u8);
                writer.WriteStringValue(MajorVersion);
            }
            if (Optional.IsCollectionDefined(Owners))
            {
                writer.WritePropertyName("owners"u8);
                writer.WriteStartArray();
                foreach (var item in Owners)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Redundancy))
            {
                writer.WritePropertyName("redundancy"u8);
                writer.WriteStringValue(Redundancy.Value.ToString());
            }
            if (Optional.IsDefined(PurviewAccount))
            {
                writer.WritePropertyName("purviewAccount"u8);
                writer.WriteStringValue(PurviewAccount);
            }
            if (Optional.IsDefined(PurviewCollection))
            {
                writer.WritePropertyName("purviewCollection"u8);
                writer.WriteStringValue(PurviewCollection);
            }
            if (Optional.IsDefined(PrivateLinksEnabled))
            {
                writer.WritePropertyName("privateLinksEnabled"u8);
                writer.WriteStringValue(PrivateLinksEnabled.Value.ToString());
            }
            if (Optional.IsDefined(PublicNetworkAccess))
            {
                writer.WritePropertyName("publicNetworkAccess"u8);
                writer.WriteStringValue(PublicNetworkAccess.Value.ToString());
            }
            if (Optional.IsDefined(CustomerManagedKeyEncryptionEnabled))
            {
                writer.WritePropertyName("customerManagedKeyEncryptionEnabled"u8);
                writer.WriteStringValue(CustomerManagedKeyEncryptionEnabled.Value.ToString());
            }
            if (Optional.IsDefined(CustomerEncryptionKey))
            {
                writer.WritePropertyName("customerEncryptionKey"u8);
                writer.WriteObjectValue(CustomerEncryptionKey);
            }
            if (Optional.IsDefined(Networkacls))
            {
                writer.WritePropertyName("networkacls"u8);
                writer.WriteObjectValue(Networkacls);
            }
            if (Optional.IsDefined(ManagedResourceGroupConfiguration))
            {
                writer.WritePropertyName("managedResourceGroupConfiguration"u8);
                writer.WriteObjectValue(ManagedResourceGroupConfiguration);
            }
            if (Optional.IsDefined(CurrentMinorVersion))
            {
                writer.WritePropertyName("currentMinorVersion"u8);
                writer.WriteStringValue(CurrentMinorVersion);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static DataProductData DeserializeDataProductData(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<ManagedServiceIdentity> identity = default;
            Optional<IDictionary<string, string>> tags = default;
            AzureLocation location = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<SystemData> systemData = default;
            Optional<string> resourceGuid = default;
            Optional<NetworkAnalyticsProvisioningState> provisioningState = default;
            Optional<string> publisher = default;
            Optional<string> product = default;
            Optional<string> majorVersion = default;
            Optional<IList<string>> owners = default;
            Optional<DataProductControlState> redundancy = default;
            Optional<string> purviewAccount = default;
            Optional<string> purviewCollection = default;
            Optional<DataProductControlState> privateLinksEnabled = default;
            Optional<DataProductControlState> publicNetworkAccess = default;
            Optional<DataProductControlState> customerManagedKeyEncryptionEnabled = default;
            Optional<EncryptionKeyDetails> customerEncryptionKey = default;
            Optional<DataProductNetworkAcls> networkacls = default;
            Optional<NetworkAnalyticsManagedResourceGroupConfiguration> managedResourceGroupConfiguration = default;
            Optional<IReadOnlyList<string>> availableMinorVersions = default;
            Optional<string> currentMinorVersion = default;
            Optional<string> documentation = default;
            Optional<ConsumptionEndpointsProperties> consumptionEndpoints = default;
            Optional<Uri> keyVaultUrl = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("identity"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    identity = JsonSerializer.Deserialize<ManagedServiceIdentity>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("tags"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    tags = dictionary;
                    continue;
                }
                if (property.NameEquals("location"u8))
                {
                    location = new AzureLocation(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("resourceGuid"u8))
                        {
                            resourceGuid = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("provisioningState"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            provisioningState = new NetworkAnalyticsProvisioningState(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("publisher"u8))
                        {
                            publisher = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("product"u8))
                        {
                            product = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("majorVersion"u8))
                        {
                            majorVersion = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("owners"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            owners = array;
                            continue;
                        }
                        if (property0.NameEquals("redundancy"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            redundancy = new DataProductControlState(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("purviewAccount"u8))
                        {
                            purviewAccount = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("purviewCollection"u8))
                        {
                            purviewCollection = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("privateLinksEnabled"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            privateLinksEnabled = new DataProductControlState(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("publicNetworkAccess"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            publicNetworkAccess = new DataProductControlState(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("customerManagedKeyEncryptionEnabled"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            customerManagedKeyEncryptionEnabled = new DataProductControlState(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("customerEncryptionKey"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            customerEncryptionKey = EncryptionKeyDetails.DeserializeEncryptionKeyDetails(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("networkacls"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            networkacls = DataProductNetworkAcls.DeserializeDataProductNetworkAcls(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("managedResourceGroupConfiguration"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            managedResourceGroupConfiguration = NetworkAnalyticsManagedResourceGroupConfiguration.DeserializeNetworkAnalyticsManagedResourceGroupConfiguration(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("availableMinorVersions"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            availableMinorVersions = array;
                            continue;
                        }
                        if (property0.NameEquals("currentMinorVersion"u8))
                        {
                            currentMinorVersion = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("documentation"u8))
                        {
                            documentation = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("consumptionEndpoints"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            consumptionEndpoints = ConsumptionEndpointsProperties.DeserializeConsumptionEndpointsProperties(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("keyVaultUrl"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            keyVaultUrl = new Uri(property0.Value.GetString());
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new DataProductData(id, name, type, systemData.Value, Optional.ToDictionary(tags), location, identity, resourceGuid.Value, Optional.ToNullable(provisioningState), publisher.Value, product.Value, majorVersion.Value, Optional.ToList(owners), Optional.ToNullable(redundancy), purviewAccount.Value, purviewCollection.Value, Optional.ToNullable(privateLinksEnabled), Optional.ToNullable(publicNetworkAccess), Optional.ToNullable(customerManagedKeyEncryptionEnabled), customerEncryptionKey.Value, networkacls.Value, managedResourceGroupConfiguration.Value, Optional.ToList(availableMinorVersions), currentMinorVersion.Value, documentation.Value, consumptionEndpoints.Value, keyVaultUrl.Value);
        }
    }
}
