// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.NetworkAnalytics.Models;

namespace Azure.ResourceManager.NetworkAnalytics
{
    public partial class DataProductData : IUtf8JsonSerializable, IJsonModel<DataProductData>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<DataProductData>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<DataProductData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DataProductData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(DataProductData)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (Optional.IsDefined(Identity))
            {
                writer.WritePropertyName("identity"u8);
                JsonSerializer.Serialize(writer, Identity);
            }
            if (Optional.IsCollectionDefined(Tags))
            {
                writer.WritePropertyName("tags"u8);
                writer.WriteStartObject();
                foreach (var item in Tags)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            writer.WritePropertyName("location"u8);
            writer.WriteStringValue(Location);
            if (options.Format != "W")
            {
                writer.WritePropertyName("id"u8);
                writer.WriteStringValue(Id);
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("name"u8);
                writer.WriteStringValue(Name);
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("type"u8);
                writer.WriteStringValue(ResourceType);
            }
            if (options.Format != "W" && Optional.IsDefined(SystemData))
            {
                writer.WritePropertyName("systemData"u8);
                JsonSerializer.Serialize(writer, SystemData);
            }
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (options.Format != "W" && Optional.IsDefined(ResourceGuid))
            {
                writer.WritePropertyName("resourceGuid"u8);
                writer.WriteStringValue(ResourceGuid);
            }
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (Optional.IsDefined(Publisher))
            {
                writer.WritePropertyName("publisher"u8);
                writer.WriteStringValue(Publisher);
            }
            if (Optional.IsDefined(Product))
            {
                writer.WritePropertyName("product"u8);
                writer.WriteStringValue(Product);
            }
            if (Optional.IsDefined(MajorVersion))
            {
                writer.WritePropertyName("majorVersion"u8);
                writer.WriteStringValue(MajorVersion);
            }
            if (Optional.IsCollectionDefined(Owners))
            {
                writer.WritePropertyName("owners"u8);
                writer.WriteStartArray();
                foreach (var item in Owners)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Redundancy))
            {
                writer.WritePropertyName("redundancy"u8);
                writer.WriteStringValue(Redundancy.Value.ToString());
            }
            if (Optional.IsDefined(PurviewAccount))
            {
                writer.WritePropertyName("purviewAccount"u8);
                writer.WriteStringValue(PurviewAccount);
            }
            if (Optional.IsDefined(PurviewCollection))
            {
                writer.WritePropertyName("purviewCollection"u8);
                writer.WriteStringValue(PurviewCollection);
            }
            if (Optional.IsDefined(PrivateLinksEnabled))
            {
                writer.WritePropertyName("privateLinksEnabled"u8);
                writer.WriteStringValue(PrivateLinksEnabled.Value.ToString());
            }
            if (Optional.IsDefined(PublicNetworkAccess))
            {
                writer.WritePropertyName("publicNetworkAccess"u8);
                writer.WriteStringValue(PublicNetworkAccess.Value.ToString());
            }
            if (Optional.IsDefined(CustomerManagedKeyEncryptionEnabled))
            {
                writer.WritePropertyName("customerManagedKeyEncryptionEnabled"u8);
                writer.WriteStringValue(CustomerManagedKeyEncryptionEnabled.Value.ToString());
            }
            if (Optional.IsDefined(CustomerEncryptionKey))
            {
                writer.WritePropertyName("customerEncryptionKey"u8);
                writer.WriteObjectValue(CustomerEncryptionKey);
            }
            if (Optional.IsDefined(Networkacls))
            {
                writer.WritePropertyName("networkacls"u8);
                writer.WriteObjectValue(Networkacls);
            }
            if (Optional.IsDefined(ManagedResourceGroupConfiguration))
            {
                writer.WritePropertyName("managedResourceGroupConfiguration"u8);
                writer.WriteObjectValue(ManagedResourceGroupConfiguration);
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(AvailableMinorVersions))
            {
                writer.WritePropertyName("availableMinorVersions"u8);
                writer.WriteStartArray();
                foreach (var item in AvailableMinorVersions)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(CurrentMinorVersion))
            {
                writer.WritePropertyName("currentMinorVersion"u8);
                writer.WriteStringValue(CurrentMinorVersion);
            }
            if (options.Format != "W" && Optional.IsDefined(Documentation))
            {
                writer.WritePropertyName("documentation"u8);
                writer.WriteStringValue(Documentation);
            }
            if (options.Format != "W" && Optional.IsDefined(ConsumptionEndpoints))
            {
                writer.WritePropertyName("consumptionEndpoints"u8);
                writer.WriteObjectValue(ConsumptionEndpoints);
            }
            if (options.Format != "W" && Optional.IsDefined(KeyVaultUri))
            {
                writer.WritePropertyName("keyVaultUrl"u8);
                writer.WriteStringValue(KeyVaultUri.AbsoluteUri);
            }
            writer.WriteEndObject();
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        DataProductData IJsonModel<DataProductData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DataProductData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(DataProductData)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeDataProductData(document.RootElement, options);
        }

        internal static DataProductData DeserializeDataProductData(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<ManagedServiceIdentity> identity = default;
            Optional<IDictionary<string, string>> tags = default;
            AzureLocation location = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<SystemData> systemData = default;
            Optional<string> resourceGuid = default;
            Optional<NetworkAnalyticsProvisioningState> provisioningState = default;
            Optional<string> publisher = default;
            Optional<string> product = default;
            Optional<string> majorVersion = default;
            Optional<IList<string>> owners = default;
            Optional<DataProductControlState> redundancy = default;
            Optional<string> purviewAccount = default;
            Optional<string> purviewCollection = default;
            Optional<DataProductControlState> privateLinksEnabled = default;
            Optional<DataProductControlState> publicNetworkAccess = default;
            Optional<DataProductControlState> customerManagedKeyEncryptionEnabled = default;
            Optional<EncryptionKeyDetails> customerEncryptionKey = default;
            Optional<DataProductNetworkAcls> networkacls = default;
            Optional<NetworkAnalyticsManagedResourceGroupConfiguration> managedResourceGroupConfiguration = default;
            Optional<IReadOnlyList<string>> availableMinorVersions = default;
            Optional<string> currentMinorVersion = default;
            Optional<string> documentation = default;
            Optional<ConsumptionEndpointsProperties> consumptionEndpoints = default;
            Optional<Uri> keyVaultUrl = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("identity"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    identity = JsonSerializer.Deserialize<ManagedServiceIdentity>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("tags"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    tags = dictionary;
                    continue;
                }
                if (property.NameEquals("location"u8))
                {
                    location = new AzureLocation(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("resourceGuid"u8))
                        {
                            resourceGuid = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("provisioningState"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            provisioningState = new NetworkAnalyticsProvisioningState(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("publisher"u8))
                        {
                            publisher = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("product"u8))
                        {
                            product = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("majorVersion"u8))
                        {
                            majorVersion = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("owners"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            owners = array;
                            continue;
                        }
                        if (property0.NameEquals("redundancy"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            redundancy = new DataProductControlState(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("purviewAccount"u8))
                        {
                            purviewAccount = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("purviewCollection"u8))
                        {
                            purviewCollection = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("privateLinksEnabled"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            privateLinksEnabled = new DataProductControlState(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("publicNetworkAccess"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            publicNetworkAccess = new DataProductControlState(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("customerManagedKeyEncryptionEnabled"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            customerManagedKeyEncryptionEnabled = new DataProductControlState(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("customerEncryptionKey"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            customerEncryptionKey = EncryptionKeyDetails.DeserializeEncryptionKeyDetails(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("networkacls"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            networkacls = DataProductNetworkAcls.DeserializeDataProductNetworkAcls(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("managedResourceGroupConfiguration"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            managedResourceGroupConfiguration = NetworkAnalyticsManagedResourceGroupConfiguration.DeserializeNetworkAnalyticsManagedResourceGroupConfiguration(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("availableMinorVersions"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            availableMinorVersions = array;
                            continue;
                        }
                        if (property0.NameEquals("currentMinorVersion"u8))
                        {
                            currentMinorVersion = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("documentation"u8))
                        {
                            documentation = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("consumptionEndpoints"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            consumptionEndpoints = ConsumptionEndpointsProperties.DeserializeConsumptionEndpointsProperties(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("keyVaultUrl"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            keyVaultUrl = new Uri(property0.Value.GetString());
                            continue;
                        }
                    }
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new DataProductData(id, name, type, systemData.Value, Optional.ToDictionary(tags), location, identity, resourceGuid.Value, Optional.ToNullable(provisioningState), publisher.Value, product.Value, majorVersion.Value, Optional.ToList(owners), Optional.ToNullable(redundancy), purviewAccount.Value, purviewCollection.Value, Optional.ToNullable(privateLinksEnabled), Optional.ToNullable(publicNetworkAccess), Optional.ToNullable(customerManagedKeyEncryptionEnabled), customerEncryptionKey.Value, networkacls.Value, managedResourceGroupConfiguration.Value, Optional.ToList(availableMinorVersions), currentMinorVersion.Value, documentation.Value, consumptionEndpoints.Value, keyVaultUrl.Value, serializedAdditionalRawData);
        }

        private BinaryData SerializeBicep(ModelReaderWriterOptions options)
        {
            StringBuilder builder = new StringBuilder();
            builder.AppendLine("{");

            if (Optional.IsDefined(Name))
            {
                builder.Append("  name:");
                if (Name.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{Name}'''");
                }
                else
                {
                    builder.AppendLine($" '{Name}'");
                }
            }

            if (Optional.IsDefined(Location))
            {
                builder.Append("  location:");
                builder.AppendLine($" '{Location.ToString()}'");
            }

            if (Optional.IsCollectionDefined(Tags))
            {
                if (Tags.Any())
                {
                    builder.Append("  tags:");
                    builder.AppendLine(" {");
                    foreach (var item in Tags)
                    {
                        builder.Append($"    {item.Key}:");
                        if (item.Value == null)
                        {
                            builder.Append("null");
                            continue;
                        }
                        if (item.Value.Contains(Environment.NewLine))
                        {
                            builder.AppendLine(" '''");
                            builder.AppendLine($"{item.Value}'''");
                        }
                        else
                        {
                            builder.AppendLine($" '{item.Value}'");
                        }
                    }
                    builder.AppendLine("  }");
                }
            }

            if (Optional.IsDefined(Identity))
            {
                builder.Append("  identity:");
                AppendChildObject(builder, Identity, options, 2, false);
            }

            if (Optional.IsDefined(Id))
            {
                builder.Append("  id:");
                builder.AppendLine($" '{Id.ToString()}'");
            }

            if (Optional.IsDefined(SystemData))
            {
                builder.Append("  systemData:");
                builder.AppendLine($" '{SystemData.ToString()}'");
            }

            builder.Append("  properties:");
            builder.AppendLine(" {");
            if (Optional.IsDefined(ResourceGuid))
            {
                builder.Append("    resourceGuid:");
                if (ResourceGuid.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{ResourceGuid}'''");
                }
                else
                {
                    builder.AppendLine($" '{ResourceGuid}'");
                }
            }

            if (Optional.IsDefined(ProvisioningState))
            {
                builder.Append("    provisioningState:");
                builder.AppendLine($" '{ProvisioningState.Value.ToString()}'");
            }

            if (Optional.IsDefined(Publisher))
            {
                builder.Append("    publisher:");
                if (Publisher.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{Publisher}'''");
                }
                else
                {
                    builder.AppendLine($" '{Publisher}'");
                }
            }

            if (Optional.IsDefined(Product))
            {
                builder.Append("    product:");
                if (Product.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{Product}'''");
                }
                else
                {
                    builder.AppendLine($" '{Product}'");
                }
            }

            if (Optional.IsDefined(MajorVersion))
            {
                builder.Append("    majorVersion:");
                if (MajorVersion.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{MajorVersion}'''");
                }
                else
                {
                    builder.AppendLine($" '{MajorVersion}'");
                }
            }

            if (Optional.IsCollectionDefined(Owners))
            {
                if (Owners.Any())
                {
                    builder.Append("    owners:");
                    builder.AppendLine(" [");
                    foreach (var item in Owners)
                    {
                        if (item == null)
                        {
                            builder.Append("null");
                            continue;
                        }
                        if (item.Contains(Environment.NewLine))
                        {
                            builder.AppendLine("      '''");
                            builder.AppendLine($"{item}'''");
                        }
                        else
                        {
                            builder.AppendLine($"      '{item}'");
                        }
                    }
                    builder.AppendLine("    ]");
                }
            }

            if (Optional.IsDefined(Redundancy))
            {
                builder.Append("    redundancy:");
                builder.AppendLine($" '{Redundancy.Value.ToString()}'");
            }

            if (Optional.IsDefined(PurviewAccount))
            {
                builder.Append("    purviewAccount:");
                if (PurviewAccount.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{PurviewAccount}'''");
                }
                else
                {
                    builder.AppendLine($" '{PurviewAccount}'");
                }
            }

            if (Optional.IsDefined(PurviewCollection))
            {
                builder.Append("    purviewCollection:");
                if (PurviewCollection.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{PurviewCollection}'''");
                }
                else
                {
                    builder.AppendLine($" '{PurviewCollection}'");
                }
            }

            if (Optional.IsDefined(PrivateLinksEnabled))
            {
                builder.Append("    privateLinksEnabled:");
                builder.AppendLine($" '{PrivateLinksEnabled.Value.ToString()}'");
            }

            if (Optional.IsDefined(PublicNetworkAccess))
            {
                builder.Append("    publicNetworkAccess:");
                builder.AppendLine($" '{PublicNetworkAccess.Value.ToString()}'");
            }

            if (Optional.IsDefined(CustomerManagedKeyEncryptionEnabled))
            {
                builder.Append("    customerManagedKeyEncryptionEnabled:");
                builder.AppendLine($" '{CustomerManagedKeyEncryptionEnabled.Value.ToString()}'");
            }

            if (Optional.IsDefined(CustomerEncryptionKey))
            {
                builder.Append("    customerEncryptionKey:");
                AppendChildObject(builder, CustomerEncryptionKey, options, 4, false);
            }

            if (Optional.IsDefined(Networkacls))
            {
                builder.Append("    networkacls:");
                AppendChildObject(builder, Networkacls, options, 4, false);
            }

            if (Optional.IsDefined(ManagedResourceGroupConfiguration))
            {
                builder.Append("    managedResourceGroupConfiguration:");
                AppendChildObject(builder, ManagedResourceGroupConfiguration, options, 4, false);
            }

            if (Optional.IsCollectionDefined(AvailableMinorVersions))
            {
                if (AvailableMinorVersions.Any())
                {
                    builder.Append("    availableMinorVersions:");
                    builder.AppendLine(" [");
                    foreach (var item in AvailableMinorVersions)
                    {
                        if (item == null)
                        {
                            builder.Append("null");
                            continue;
                        }
                        if (item.Contains(Environment.NewLine))
                        {
                            builder.AppendLine("      '''");
                            builder.AppendLine($"{item}'''");
                        }
                        else
                        {
                            builder.AppendLine($"      '{item}'");
                        }
                    }
                    builder.AppendLine("    ]");
                }
            }

            if (Optional.IsDefined(CurrentMinorVersion))
            {
                builder.Append("    currentMinorVersion:");
                if (CurrentMinorVersion.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{CurrentMinorVersion}'''");
                }
                else
                {
                    builder.AppendLine($" '{CurrentMinorVersion}'");
                }
            }

            if (Optional.IsDefined(Documentation))
            {
                builder.Append("    documentation:");
                if (Documentation.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{Documentation}'''");
                }
                else
                {
                    builder.AppendLine($" '{Documentation}'");
                }
            }

            if (Optional.IsDefined(ConsumptionEndpoints))
            {
                builder.Append("    consumptionEndpoints:");
                AppendChildObject(builder, ConsumptionEndpoints, options, 4, false);
            }

            if (Optional.IsDefined(KeyVaultUri))
            {
                builder.Append("    keyVaultUrl:");
                builder.AppendLine($" '{KeyVaultUri.AbsoluteUri}'");
            }

            builder.AppendLine("  }");
            builder.AppendLine("}");
            return BinaryData.FromString(builder.ToString());
        }

        private void AppendChildObject(StringBuilder stringBuilder, object childObject, ModelReaderWriterOptions options, int spaces, bool indentFirstLine)
        {
            string indent = new string(' ', spaces);
            BinaryData data = ModelReaderWriter.Write(childObject, options);
            string[] lines = data.ToString().Split(Environment.NewLine.ToCharArray(), StringSplitOptions.RemoveEmptyEntries);
            bool inMultilineString = false;
            for (int i = 0; i < lines.Length; i++)
            {
                string line = lines[i];
                if (inMultilineString)
                {
                    if (line.Contains("'''"))
                    {
                        inMultilineString = false;
                    }
                    stringBuilder.AppendLine(line);
                    continue;
                }
                if (line.Contains("'''"))
                {
                    inMultilineString = true;
                    stringBuilder.AppendLine($"{indent}{line}");
                    continue;
                }
                if (i == 0 && !indentFirstLine)
                {
                    stringBuilder.AppendLine($" {line}");
                }
                else
                {
                    stringBuilder.AppendLine($"{indent}{line}");
                }
            }
        }

        BinaryData IPersistableModel<DataProductData>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DataProductData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                case "B":
                    return SerializeBicep(options);
                default:
                    throw new FormatException($"The model {nameof(DataProductData)} does not support '{options.Format}' format.");
            }
        }

        DataProductData IPersistableModel<DataProductData>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DataProductData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeDataProductData(document.RootElement, options);
                    }
                case "B":
                    throw new InvalidOperationException("Bicep deserialization is not supported for this type.");
                default:
                    throw new FormatException($"The model {nameof(DataProductData)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<DataProductData>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
