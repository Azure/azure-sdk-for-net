// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net.ClientModel;
using System.Net.ClientModel.Core;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.NetworkAnalytics.Models
{
    public partial class ConsumptionEndpointsProperties : IUtf8JsonSerializable, IJsonModel<ConsumptionEndpointsProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<ConsumptionEndpointsProperties>)this).Write(writer, ModelReaderWriterOptions.Wire);

        void IJsonModel<ConsumptionEndpointsProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            if ((options.Format != "W" || ((IPersistableModel<ConsumptionEndpointsProperties>)this).GetWireFormat(options) != "J") && options.Format != "J")
            {
                throw new InvalidOperationException($"Must use 'J' format when calling the {nameof(IJsonModel<ConsumptionEndpointsProperties>)} interface");
            }

            writer.WriteStartObject();
            if (options.Format == "J")
            {
                if (Optional.IsDefined(IngestionUri))
                {
                    writer.WritePropertyName("ingestionUrl"u8);
                    writer.WriteStringValue(IngestionUri.AbsoluteUri);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(IngestionResourceId))
                {
                    writer.WritePropertyName("ingestionResourceId"u8);
                    writer.WriteStringValue(IngestionResourceId);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(FileAccessUri))
                {
                    writer.WritePropertyName("fileAccessUrl"u8);
                    writer.WriteStringValue(FileAccessUri.AbsoluteUri);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(FileAccessResourceId))
                {
                    writer.WritePropertyName("fileAccessResourceId"u8);
                    writer.WriteStringValue(FileAccessResourceId);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(QueryUri))
                {
                    writer.WritePropertyName("queryUrl"u8);
                    writer.WriteStringValue(QueryUri.AbsoluteUri);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(QueryResourceId))
                {
                    writer.WritePropertyName("queryResourceId"u8);
                    writer.WriteStringValue(QueryResourceId);
                }
            }
            if (_serializedAdditionalRawData != null && options.Format == "J")
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        ConsumptionEndpointsProperties IJsonModel<ConsumptionEndpointsProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(ConsumptionEndpointsProperties)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeConsumptionEndpointsProperties(document.RootElement, options);
        }

        internal static ConsumptionEndpointsProperties DeserializeConsumptionEndpointsProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelReaderWriterOptions.Wire;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<Uri> ingestionUrl = default;
            Optional<ResourceIdentifier> ingestionResourceId = default;
            Optional<Uri> fileAccessUrl = default;
            Optional<ResourceIdentifier> fileAccessResourceId = default;
            Optional<Uri> queryUrl = default;
            Optional<ResourceIdentifier> queryResourceId = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("ingestionUrl"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    ingestionUrl = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("ingestionResourceId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    ingestionResourceId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("fileAccessUrl"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    fileAccessUrl = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("fileAccessResourceId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    fileAccessResourceId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("queryUrl"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    queryUrl = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("queryResourceId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    queryResourceId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (options.Format == "J")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new ConsumptionEndpointsProperties(ingestionUrl.Value, ingestionResourceId.Value, fileAccessUrl.Value, fileAccessResourceId.Value, queryUrl.Value, queryResourceId.Value, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<ConsumptionEndpointsProperties>.Write(ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(ConsumptionEndpointsProperties)} does not support '{options.Format}' format.");
            }

            return ModelReaderWriter.Write(this, options);
        }

        ConsumptionEndpointsProperties IPersistableModel<ConsumptionEndpointsProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(ConsumptionEndpointsProperties)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.Parse(data);
            return DeserializeConsumptionEndpointsProperties(document.RootElement, options);
        }

        string IPersistableModel<ConsumptionEndpointsProperties>.GetWireFormat(ModelReaderWriterOptions options) => "J";
    }
}
