// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.DocumentIntelligence.Tests
{
    public partial class DocumentIntelligenceClientTests : AIDocumentIntelligenceTestBase
    {
        public DocumentIntelligenceClientTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DocumentIntelligenceClient_GetAnalyzeResultPdf_GetAnalyzeDocumentResultPDF()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentIntelligenceClient client = CreateDocumentIntelligenceClient(endpoint, credential);

            Response response = await client.GetAnalyzeResultPdfAsync("prebuilt-invoice", Guid.Parse("3b31320d-8bab-4f88-b19c-2322a7f11034"), null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DocumentIntelligenceClient_GetAnalyzeResultPdf_GetAnalyzeDocumentResultPDF_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentIntelligenceClient client = CreateDocumentIntelligenceClient(endpoint, credential);

            Response<BinaryData> response = await client.GetAnalyzeResultPdfAsync("prebuilt-invoice", Guid.Parse("3b31320d-8bab-4f88-b19c-2322a7f11034"));
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DocumentIntelligenceClient_GetAnalyzeResultFigure_GetAnalyzeDocumentResultFigure()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentIntelligenceClient client = CreateDocumentIntelligenceClient(endpoint, credential);

            Response response = await client.GetAnalyzeResultFigureAsync("prebuilt-invoice", Guid.Parse("3b31320d-8bab-4f88-b19c-2322a7f11034"), "1.0", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DocumentIntelligenceClient_GetAnalyzeResultFigure_GetAnalyzeDocumentResultFigure_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentIntelligenceClient client = CreateDocumentIntelligenceClient(endpoint, credential);

            Response<BinaryData> response = await client.GetAnalyzeResultFigureAsync("prebuilt-invoice", Guid.Parse("3b31320d-8bab-4f88-b19c-2322a7f11034"), "1.0");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DocumentIntelligenceClient_AnalyzeDocument_AnalyzeDocumentFromBase64()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentIntelligenceClient client = CreateDocumentIntelligenceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                base64Source = "e2Jhc2U2NEVuY29kZWRQZGZ9",
            });
            Operation<BinaryData> operation = await client.AnalyzeDocumentAsync(WaitUntil.Completed, "prebuilt-layout", content);
            BinaryData responseData = operation.Value;
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DocumentIntelligenceClient_AnalyzeDocument_AnalyzeDocumentFromBase64_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentIntelligenceClient client = CreateDocumentIntelligenceClient(endpoint, credential);

            Operation<AnalyzeResult> operation = await client.AnalyzeDocumentAsync(WaitUntil.Completed, "prebuilt-layout");
            AnalyzeResult responseData = operation.Value;
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DocumentIntelligenceClient_AnalyzeDocument_AnalyzeDocumentFromUrl()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentIntelligenceClient client = CreateDocumentIntelligenceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                urlSource = "http://host.com/doc.pdf",
            });
            Operation<BinaryData> operation = await client.AnalyzeDocumentAsync(WaitUntil.Completed, "customModel", content);
            BinaryData responseData = operation.Value;
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DocumentIntelligenceClient_AnalyzeDocument_AnalyzeDocumentFromUrl_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentIntelligenceClient client = CreateDocumentIntelligenceClient(endpoint, credential);

            Operation<AnalyzeResult> operation = await client.AnalyzeDocumentAsync(WaitUntil.Completed, "customModel");
            AnalyzeResult responseData = operation.Value;
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DocumentIntelligenceClient_AnalyzeBatchDocuments_AnalyzeBatchDocuments()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentIntelligenceClient client = CreateDocumentIntelligenceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                azureBlobSource = new
                {
                    containerUrl = "https://myStorageAccount.blob.core.windows.net/myContainer?mySasToken",
                    prefix = "trainingDocs/",
                },
                resultContainerUrl = "https://myStorageAccount.blob.core.windows.net/myOutputContainer?mySasToken",
                resultPrefix = "trainingDocsResult/",
                overwriteExisting = true,
            });
            Operation<BinaryData> operation = await client.AnalyzeBatchDocumentsAsync(WaitUntil.Completed, "customModel", content);
            BinaryData responseData = operation.Value;
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DocumentIntelligenceClient_AnalyzeBatchDocuments_AnalyzeBatchDocuments_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentIntelligenceClient client = CreateDocumentIntelligenceClient(endpoint, credential);

            Operation<AnalyzeBatchResult> operation = await client.AnalyzeBatchDocumentsAsync(WaitUntil.Completed, "customModel");
            AnalyzeBatchResult responseData = operation.Value;
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DocumentIntelligenceClient_ClassifyDocument_ClassifyDocumentFromUrl()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentIntelligenceClient client = CreateDocumentIntelligenceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                urlSource = "http://host.com/doc.pdf",
            });
            Operation<BinaryData> operation = await client.ClassifyDocumentAsync(WaitUntil.Completed, "classifierId", content);
            BinaryData responseData = operation.Value;
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DocumentIntelligenceClient_ClassifyDocument_ClassifyDocumentFromUrl_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentIntelligenceClient client = CreateDocumentIntelligenceClient(endpoint, credential);

            ClassifyDocumentContent classifyRequest = new ClassifyDocumentContent
            {
                UrlSource = new Uri("http://host.com/doc.pdf"),
            };
            Operation<AnalyzeResult> operation = await client.ClassifyDocumentAsync(WaitUntil.Completed, "classifierId", classifyRequest);
            AnalyzeResult responseData = operation.Value;
        }
    }
}
