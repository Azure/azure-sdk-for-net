// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.AI.DocumentIntelligence
{
    internal static partial class DocumentBarcodeKindExtensions
    {
        public static string ToSerialString(this DocumentBarcodeKind value) => value switch
        {
            DocumentBarcodeKind.QrCode => "QRCode",
            DocumentBarcodeKind.Pdf417 => "PDF417",
            DocumentBarcodeKind.Upca => "UPCA",
            DocumentBarcodeKind.Upce => "UPCE",
            DocumentBarcodeKind.Code39 => "Code39",
            DocumentBarcodeKind.Code128 => "Code128",
            DocumentBarcodeKind.Ean8 => "EAN8",
            DocumentBarcodeKind.Ean13 => "EAN13",
            DocumentBarcodeKind.DataBar => "DataBar",
            DocumentBarcodeKind.Code93 => "Code93",
            DocumentBarcodeKind.Codabar => "Codabar",
            DocumentBarcodeKind.DataBarExpanded => "DataBarExpanded",
            DocumentBarcodeKind.Itf => "ITF",
            DocumentBarcodeKind.MicroQrCode => "MicroQRCode",
            DocumentBarcodeKind.Aztec => "Aztec",
            DocumentBarcodeKind.DataMatrix => "DataMatrix",
            DocumentBarcodeKind.MaxiCode => "MaxiCode",
            _ => throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown DocumentBarcodeKind value.")
        };

        public static DocumentBarcodeKind ToDocumentBarcodeKind(this string value)
        {
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "QRCode")) return DocumentBarcodeKind.QrCode;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "PDF417")) return DocumentBarcodeKind.Pdf417;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "UPCA")) return DocumentBarcodeKind.Upca;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "UPCE")) return DocumentBarcodeKind.Upce;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Code39")) return DocumentBarcodeKind.Code39;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Code128")) return DocumentBarcodeKind.Code128;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "EAN8")) return DocumentBarcodeKind.Ean8;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "EAN13")) return DocumentBarcodeKind.Ean13;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "DataBar")) return DocumentBarcodeKind.DataBar;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Code93")) return DocumentBarcodeKind.Code93;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Codabar")) return DocumentBarcodeKind.Codabar;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "DataBarExpanded")) return DocumentBarcodeKind.DataBarExpanded;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "ITF")) return DocumentBarcodeKind.Itf;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "MicroQRCode")) return DocumentBarcodeKind.MicroQrCode;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Aztec")) return DocumentBarcodeKind.Aztec;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "DataMatrix")) return DocumentBarcodeKind.DataMatrix;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "MaxiCode")) return DocumentBarcodeKind.MaxiCode;
            throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown DocumentBarcodeKind value.");
        }
    }
}
