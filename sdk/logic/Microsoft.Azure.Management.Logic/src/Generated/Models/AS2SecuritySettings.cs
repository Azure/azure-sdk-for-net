// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Logic.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The AS2 agreement security settings.
    /// </summary>
    public partial class AS2SecuritySettings
    {
        /// <summary>
        /// Initializes a new instance of the AS2SecuritySettings class.
        /// </summary>
        public AS2SecuritySettings()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AS2SecuritySettings class.
        /// </summary>
        /// <param name="overrideGroupSigningCertificate">The value indicating
        /// whether to send or request a MDN.</param>
        /// <param name="enableNrrForInboundEncodedMessages">The value
        /// indicating whether to enable NRR for inbound encoded
        /// messages.</param>
        /// <param name="enableNrrForInboundDecodedMessages">The value
        /// indicating whether to enable NRR for inbound decoded
        /// messages.</param>
        /// <param name="enableNrrForOutboundMdn">The value indicating whether
        /// to enable NRR for outbound MDN.</param>
        /// <param name="enableNrrForOutboundEncodedMessages">The value
        /// indicating whether to enable NRR for outbound encoded
        /// messages.</param>
        /// <param name="enableNrrForOutboundDecodedMessages">The value
        /// indicating whether to enable NRR for outbound decoded
        /// messages.</param>
        /// <param name="enableNrrForInboundMdn">The value indicating whether
        /// to enable NRR for inbound MDN.</param>
        /// <param name="signingCertificateName">The name of the signing
        /// certificate.</param>
        /// <param name="encryptionCertificateName">The name of the encryption
        /// certificate.</param>
        /// <param name="sha2AlgorithmFormat">The Sha2 algorithm format. Valid
        /// values are Sha2, ShaHashSize, ShaHyphenHashSize,
        /// Sha2UnderscoreHashSize.</param>
        public AS2SecuritySettings(bool overrideGroupSigningCertificate, bool enableNrrForInboundEncodedMessages, bool enableNrrForInboundDecodedMessages, bool enableNrrForOutboundMdn, bool enableNrrForOutboundEncodedMessages, bool enableNrrForOutboundDecodedMessages, bool enableNrrForInboundMdn, string signingCertificateName = default(string), string encryptionCertificateName = default(string), string sha2AlgorithmFormat = default(string))
        {
            OverrideGroupSigningCertificate = overrideGroupSigningCertificate;
            SigningCertificateName = signingCertificateName;
            EncryptionCertificateName = encryptionCertificateName;
            EnableNrrForInboundEncodedMessages = enableNrrForInboundEncodedMessages;
            EnableNrrForInboundDecodedMessages = enableNrrForInboundDecodedMessages;
            EnableNrrForOutboundMdn = enableNrrForOutboundMdn;
            EnableNrrForOutboundEncodedMessages = enableNrrForOutboundEncodedMessages;
            EnableNrrForOutboundDecodedMessages = enableNrrForOutboundDecodedMessages;
            EnableNrrForInboundMdn = enableNrrForInboundMdn;
            Sha2AlgorithmFormat = sha2AlgorithmFormat;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the value indicating whether to send or request a MDN.
        /// </summary>
        [JsonProperty(PropertyName = "overrideGroupSigningCertificate")]
        public bool OverrideGroupSigningCertificate { get; set; }

        /// <summary>
        /// Gets or sets the name of the signing certificate.
        /// </summary>
        [JsonProperty(PropertyName = "signingCertificateName")]
        public string SigningCertificateName { get; set; }

        /// <summary>
        /// Gets or sets the name of the encryption certificate.
        /// </summary>
        [JsonProperty(PropertyName = "encryptionCertificateName")]
        public string EncryptionCertificateName { get; set; }

        /// <summary>
        /// Gets or sets the value indicating whether to enable NRR for inbound
        /// encoded messages.
        /// </summary>
        [JsonProperty(PropertyName = "enableNrrForInboundEncodedMessages")]
        public bool EnableNrrForInboundEncodedMessages { get; set; }

        /// <summary>
        /// Gets or sets the value indicating whether to enable NRR for inbound
        /// decoded messages.
        /// </summary>
        [JsonProperty(PropertyName = "enableNrrForInboundDecodedMessages")]
        public bool EnableNrrForInboundDecodedMessages { get; set; }

        /// <summary>
        /// Gets or sets the value indicating whether to enable NRR for
        /// outbound MDN.
        /// </summary>
        [JsonProperty(PropertyName = "enableNrrForOutboundMdn")]
        public bool EnableNrrForOutboundMdn { get; set; }

        /// <summary>
        /// Gets or sets the value indicating whether to enable NRR for
        /// outbound encoded messages.
        /// </summary>
        [JsonProperty(PropertyName = "enableNrrForOutboundEncodedMessages")]
        public bool EnableNrrForOutboundEncodedMessages { get; set; }

        /// <summary>
        /// Gets or sets the value indicating whether to enable NRR for
        /// outbound decoded messages.
        /// </summary>
        [JsonProperty(PropertyName = "enableNrrForOutboundDecodedMessages")]
        public bool EnableNrrForOutboundDecodedMessages { get; set; }

        /// <summary>
        /// Gets or sets the value indicating whether to enable NRR for inbound
        /// MDN.
        /// </summary>
        [JsonProperty(PropertyName = "enableNrrForInboundMdn")]
        public bool EnableNrrForInboundMdn { get; set; }

        /// <summary>
        /// Gets or sets the Sha2 algorithm format. Valid values are Sha2,
        /// ShaHashSize, ShaHyphenHashSize, Sha2UnderscoreHashSize.
        /// </summary>
        [JsonProperty(PropertyName = "sha2AlgorithmFormat")]
        public string Sha2AlgorithmFormat { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            //Nothing to validate
        }
    }
}
