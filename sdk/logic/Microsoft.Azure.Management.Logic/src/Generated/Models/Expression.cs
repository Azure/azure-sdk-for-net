// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Logic.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The expression.
    /// </summary>
    public partial class Expression
    {
        /// <summary>
        /// Initializes a new instance of the Expression class.
        /// </summary>
        public Expression()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Expression class.
        /// </summary>
        /// <param name="text">The text.</param>
        /// <param name="subexpressions">The sub expressions.</param>
        public Expression(string text = default(string), object value = default(object), IList<Expression> subexpressions = default(IList<Expression>), AzureResourceErrorInfo error = default(AzureResourceErrorInfo))
        {
            Text = text;
            Value = value;
            Subexpressions = subexpressions;
            Error = error;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the text.
        /// </summary>
        [JsonProperty(PropertyName = "text")]
        public string Text { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "value")]
        public object Value { get; set; }

        /// <summary>
        /// Gets or sets the sub expressions.
        /// </summary>
        [JsonProperty(PropertyName = "subexpressions")]
        public IList<Expression> Subexpressions { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "error")]
        public AzureResourceErrorInfo Error { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Subexpressions != null)
            {
                foreach (var element in Subexpressions)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (Error != null)
            {
                Error.Validate();
            }
        }
    }
}
