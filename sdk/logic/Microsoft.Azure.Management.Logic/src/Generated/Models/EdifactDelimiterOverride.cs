// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Logic.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The Edifact delimiter override settings.
    /// </summary>
    public partial class EdifactDelimiterOverride
    {
        /// <summary>
        /// Initializes a new instance of the EdifactDelimiterOverride class.
        /// </summary>
        public EdifactDelimiterOverride()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EdifactDelimiterOverride class.
        /// </summary>
        /// <param name="dataElementSeparator">The data element
        /// separator.</param>
        /// <param name="componentSeparator">The component separator.</param>
        /// <param name="segmentTerminator">The segment terminator.</param>
        /// <param name="repetitionSeparator">The repetition separator.</param>
        /// <param name="segmentTerminatorSuffix">The segment terminator
        /// suffix. Possible values include: 'NotSpecified', 'None', 'CR',
        /// 'LF', 'CRLF'</param>
        /// <param name="decimalPointIndicator">The decimal point indicator.
        /// Possible values include: 'NotSpecified', 'Comma', 'Decimal'</param>
        /// <param name="releaseIndicator">The release indicator.</param>
        /// <param name="messageId">The message id.</param>
        /// <param name="messageVersion">The message version.</param>
        /// <param name="messageRelease">The message release.</param>
        /// <param name="messageAssociationAssignedCode">The message
        /// association assigned code.</param>
        /// <param name="targetNamespace">The target namespace on which this
        /// delimiter settings has to be applied.</param>
        public EdifactDelimiterOverride(int dataElementSeparator, int componentSeparator, int segmentTerminator, int repetitionSeparator, SegmentTerminatorSuffix segmentTerminatorSuffix, EdifactDecimalIndicator decimalPointIndicator, int releaseIndicator, string messageId = default(string), string messageVersion = default(string), string messageRelease = default(string), string messageAssociationAssignedCode = default(string), string targetNamespace = default(string))
        {
            MessageId = messageId;
            MessageVersion = messageVersion;
            MessageRelease = messageRelease;
            DataElementSeparator = dataElementSeparator;
            ComponentSeparator = componentSeparator;
            SegmentTerminator = segmentTerminator;
            RepetitionSeparator = repetitionSeparator;
            SegmentTerminatorSuffix = segmentTerminatorSuffix;
            DecimalPointIndicator = decimalPointIndicator;
            ReleaseIndicator = releaseIndicator;
            MessageAssociationAssignedCode = messageAssociationAssignedCode;
            TargetNamespace = targetNamespace;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the message id.
        /// </summary>
        [JsonProperty(PropertyName = "messageId")]
        public string MessageId { get; set; }

        /// <summary>
        /// Gets or sets the message version.
        /// </summary>
        [JsonProperty(PropertyName = "messageVersion")]
        public string MessageVersion { get; set; }

        /// <summary>
        /// Gets or sets the message release.
        /// </summary>
        [JsonProperty(PropertyName = "messageRelease")]
        public string MessageRelease { get; set; }

        /// <summary>
        /// Gets or sets the data element separator.
        /// </summary>
        [JsonProperty(PropertyName = "dataElementSeparator")]
        public int DataElementSeparator { get; set; }

        /// <summary>
        /// Gets or sets the component separator.
        /// </summary>
        [JsonProperty(PropertyName = "componentSeparator")]
        public int ComponentSeparator { get; set; }

        /// <summary>
        /// Gets or sets the segment terminator.
        /// </summary>
        [JsonProperty(PropertyName = "segmentTerminator")]
        public int SegmentTerminator { get; set; }

        /// <summary>
        /// Gets or sets the repetition separator.
        /// </summary>
        [JsonProperty(PropertyName = "repetitionSeparator")]
        public int RepetitionSeparator { get; set; }

        /// <summary>
        /// Gets or sets the segment terminator suffix. Possible values
        /// include: 'NotSpecified', 'None', 'CR', 'LF', 'CRLF'
        /// </summary>
        [JsonProperty(PropertyName = "segmentTerminatorSuffix")]
        public SegmentTerminatorSuffix SegmentTerminatorSuffix { get; set; }

        /// <summary>
        /// Gets or sets the decimal point indicator. Possible values include:
        /// 'NotSpecified', 'Comma', 'Decimal'
        /// </summary>
        [JsonProperty(PropertyName = "decimalPointIndicator")]
        public EdifactDecimalIndicator DecimalPointIndicator { get; set; }

        /// <summary>
        /// Gets or sets the release indicator.
        /// </summary>
        [JsonProperty(PropertyName = "releaseIndicator")]
        public int ReleaseIndicator { get; set; }

        /// <summary>
        /// Gets or sets the message association assigned code.
        /// </summary>
        [JsonProperty(PropertyName = "messageAssociationAssignedCode")]
        public string MessageAssociationAssignedCode { get; set; }

        /// <summary>
        /// Gets or sets the target namespace on which this delimiter settings
        /// has to be applied.
        /// </summary>
        [JsonProperty(PropertyName = "targetNamespace")]
        public string TargetNamespace { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
        }
    }
}
