// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Logic.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The AS2 agreement acknowledgement connection settings.
    /// </summary>
    public partial class AS2AcknowledgementConnectionSettings
    {
        /// <summary>
        /// Initializes a new instance of the
        /// AS2AcknowledgementConnectionSettings class.
        /// </summary>
        public AS2AcknowledgementConnectionSettings()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// AS2AcknowledgementConnectionSettings class.
        /// </summary>
        /// <param name="ignoreCertificateNameMismatch">Indicates whether to
        /// ignore mismatch in certificate name.</param>
        /// <param name="supportHttpStatusCodeContinue">Indicates whether to
        /// support HTTP status code 'CONTINUE'.</param>
        /// <param name="keepHttpConnectionAlive">Indicates whether to keep the
        /// connection alive.</param>
        /// <param name="unfoldHttpHeaders">Indicates whether to unfold the
        /// HTTP headers.</param>
        public AS2AcknowledgementConnectionSettings(bool ignoreCertificateNameMismatch, bool supportHttpStatusCodeContinue, bool keepHttpConnectionAlive, bool unfoldHttpHeaders)
        {
            IgnoreCertificateNameMismatch = ignoreCertificateNameMismatch;
            SupportHttpStatusCodeContinue = supportHttpStatusCodeContinue;
            KeepHttpConnectionAlive = keepHttpConnectionAlive;
            UnfoldHttpHeaders = unfoldHttpHeaders;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets indicates whether to ignore mismatch in certificate
        /// name.
        /// </summary>
        [JsonProperty(PropertyName = "ignoreCertificateNameMismatch")]
        public bool IgnoreCertificateNameMismatch { get; set; }

        /// <summary>
        /// Gets or sets indicates whether to support HTTP status code
        /// 'CONTINUE'.
        /// </summary>
        [JsonProperty(PropertyName = "supportHttpStatusCodeContinue")]
        public bool SupportHttpStatusCodeContinue { get; set; }

        /// <summary>
        /// Gets or sets indicates whether to keep the connection alive.
        /// </summary>
        [JsonProperty(PropertyName = "keepHttpConnectionAlive")]
        public bool KeepHttpConnectionAlive { get; set; }

        /// <summary>
        /// Gets or sets indicates whether to unfold the HTTP headers.
        /// </summary>
        [JsonProperty(PropertyName = "unfoldHttpHeaders")]
        public bool UnfoldHttpHeaders { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            //Nothing to validate
        }
    }
}
