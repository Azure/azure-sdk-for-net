// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Logic.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The Swagger XML.
    /// </summary>
    public partial class SwaggerXml
    {
        /// <summary>
        /// Initializes a new instance of the SwaggerXml class.
        /// </summary>
        public SwaggerXml()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SwaggerXml class.
        /// </summary>
        /// <param name="name">The xml element or attribute name.</param>
        /// <param name="namespaceProperty">The xml namespace.</param>
        /// <param name="prefix">The name prefix.</param>
        /// <param name="attribute">Indicates whether the property should be an
        /// attribute instead of an element.</param>
        /// <param name="wrapped">Indicates whether the array elements are
        /// wrapped in a container element.</param>
        /// <param name="extensions">The vendor extensions.</param>
        public SwaggerXml(string name = default(string), string namespaceProperty = default(string), string prefix = default(string), bool? attribute = default(bool?), bool? wrapped = default(bool?), IDictionary<string, object> extensions = default(IDictionary<string, object>))
        {
            Name = name;
            NamespaceProperty = namespaceProperty;
            Prefix = prefix;
            Attribute = attribute;
            Wrapped = wrapped;
            Extensions = extensions;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the xml element or attribute name.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the xml namespace.
        /// </summary>
        [JsonProperty(PropertyName = "namespace")]
        public string NamespaceProperty { get; set; }

        /// <summary>
        /// Gets or sets the name prefix.
        /// </summary>
        [JsonProperty(PropertyName = "prefix")]
        public string Prefix { get; set; }

        /// <summary>
        /// Gets or sets indicates whether the property should be an attribute
        /// instead of an element.
        /// </summary>
        [JsonProperty(PropertyName = "attribute")]
        public bool? Attribute { get; set; }

        /// <summary>
        /// Gets or sets indicates whether the array elements are wrapped in a
        /// container element.
        /// </summary>
        [JsonProperty(PropertyName = "wrapped")]
        public bool? Wrapped { get; set; }

        /// <summary>
        /// Gets or sets the vendor extensions.
        /// </summary>
        [JsonProperty(PropertyName = "extensions")]
        public IDictionary<string, object> Extensions { get; set; }

    }
}
