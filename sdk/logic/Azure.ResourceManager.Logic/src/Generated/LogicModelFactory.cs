// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Logic;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.Logic.Models
{
    /// <summary> Model factory for generated models. </summary>
    public static partial class LogicModelFactory
    {
        /// <summary> Initializes a new instance of LogicWorkflowData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="identity"> Managed service identity properties. Current supported identity types: SystemAssigned, UserAssigned, None. </param>
        /// <param name="provisioningState"> Gets the provisioning state. </param>
        /// <param name="createdOn"> Gets the created time. </param>
        /// <param name="changedOn"> Gets the changed time. </param>
        /// <param name="state"> The state. </param>
        /// <param name="version"> Gets the version. </param>
        /// <param name="accessEndpoint"> Gets the access endpoint. </param>
        /// <param name="endpointsConfiguration"> The endpoints configuration. </param>
        /// <param name="accessControl"> The access control configuration. </param>
        /// <param name="sku"> The sku. </param>
        /// <param name="integrationAccount"> The integration account. </param>
        /// <param name="integrationServiceEnvironment"> The integration service environment. </param>
        /// <param name="definition"> The definition. </param>
        /// <param name="parameters"> The parameters. </param>
        /// <returns> A new <see cref="Logic.LogicWorkflowData"/> instance for mocking. </returns>
        public static LogicWorkflowData LogicWorkflowData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ManagedServiceIdentity identity = null, LogicWorkflowProvisioningState? provisioningState = null, DateTimeOffset? createdOn = null, DateTimeOffset? changedOn = null, LogicWorkflowState? state = null, string version = null, string accessEndpoint = null, FlowEndpointsConfiguration endpointsConfiguration = null, FlowAccessControlConfiguration accessControl = null, LogicSku sku = null, LogicResourceReference integrationAccount = null, LogicResourceReference integrationServiceEnvironment = null, BinaryData definition = null, IDictionary<string, LogicWorkflowParameterInfo> parameters = null)
        {
            tags ??= new Dictionary<string, string>();
            parameters ??= new Dictionary<string, LogicWorkflowParameterInfo>();

            return new LogicWorkflowData(id, name, resourceType, systemData, tags, location, identity, provisioningState, createdOn, changedOn, state, version, accessEndpoint, endpointsConfiguration, accessControl, sku, integrationAccount, integrationServiceEnvironment, definition, parameters);
        }

        /// <summary> Initializes a new instance of FlowEndpointsConfiguration. </summary>
        /// <param name="workflow"> The workflow endpoints. </param>
        /// <param name="connector"> The connector endpoints. </param>
        /// <returns> A new <see cref="Models.FlowEndpointsConfiguration"/> instance for mocking. </returns>
        public static FlowEndpointsConfiguration FlowEndpointsConfiguration(FlowEndpoints workflow = null, FlowEndpoints connector = null)
        {
            return new FlowEndpointsConfiguration(workflow, connector);
        }

        /// <summary> Initializes a new instance of FlowEndpoints. </summary>
        /// <param name="outgoingIPAddresses"> The outgoing ip address. </param>
        /// <param name="accessEndpointIPAddresses"> The access endpoint ip address. </param>
        /// <returns> A new <see cref="Models.FlowEndpoints"/> instance for mocking. </returns>
        public static FlowEndpoints FlowEndpoints(IEnumerable<FlowEndpointIPAddress> outgoingIPAddresses = null, IEnumerable<FlowEndpointIPAddress> accessEndpointIPAddresses = null)
        {
            outgoingIPAddresses ??= new List<FlowEndpointIPAddress>();
            accessEndpointIPAddresses ??= new List<FlowEndpointIPAddress>();

            return new FlowEndpoints(outgoingIPAddresses?.ToList(), accessEndpointIPAddresses?.ToList());
        }

        /// <summary> Initializes a new instance of FlowEndpointIPAddress. </summary>
        /// <param name="cidrAddress"> The address. </param>
        /// <returns> A new <see cref="Models.FlowEndpointIPAddress"/> instance for mocking. </returns>
        public static FlowEndpointIPAddress FlowEndpointIPAddress(string cidrAddress = null)
        {
            return new FlowEndpointIPAddress(cidrAddress);
        }

        /// <summary> Initializes a new instance of FlowAccessControlConfiguration. </summary>
        /// <param name="triggers"> The access control configuration for invoking workflow triggers. </param>
        /// <param name="contents"> The access control configuration for accessing workflow run contents. </param>
        /// <param name="actions"> The access control configuration for workflow actions. </param>
        /// <param name="workflowManagement"> The access control configuration for workflow management. </param>
        /// <returns> A new <see cref="Models.FlowAccessControlConfiguration"/> instance for mocking. </returns>
        public static FlowAccessControlConfiguration FlowAccessControlConfiguration(FlowAccessControlConfigurationPolicy triggers = null, FlowAccessControlConfigurationPolicy contents = null, FlowAccessControlConfigurationPolicy actions = null, FlowAccessControlConfigurationPolicy workflowManagement = null)
        {
            return new FlowAccessControlConfiguration(triggers, contents, actions, workflowManagement);
        }

        /// <summary> Initializes a new instance of FlowAccessControlConfigurationPolicy. </summary>
        /// <param name="allowedCallerIPAddresses"> The allowed caller IP address ranges. </param>
        /// <param name="accessPolicies"> The authentication policies for workflow. </param>
        /// <returns> A new <see cref="Models.FlowAccessControlConfigurationPolicy"/> instance for mocking. </returns>
        public static FlowAccessControlConfigurationPolicy FlowAccessControlConfigurationPolicy(IEnumerable<FlowAccessControlIPAddressRange> allowedCallerIPAddresses = null, IDictionary<string, OpenAuthenticationAccessPolicy> accessPolicies = null)
        {
            allowedCallerIPAddresses ??= new List<FlowAccessControlIPAddressRange>();
            accessPolicies ??= new Dictionary<string, OpenAuthenticationAccessPolicy>();

            return new FlowAccessControlConfigurationPolicy(allowedCallerIPAddresses?.ToList(), accessPolicies != null ? new OpenAuthenticationAccessPolicies(accessPolicies) : null);
        }

        /// <summary> Initializes a new instance of FlowAccessControlIPAddressRange. </summary>
        /// <param name="addressRange"> The IP address range. </param>
        /// <returns> A new <see cref="Models.FlowAccessControlIPAddressRange"/> instance for mocking. </returns>
        public static FlowAccessControlIPAddressRange FlowAccessControlIPAddressRange(string addressRange = null)
        {
            return new FlowAccessControlIPAddressRange(addressRange);
        }

        /// <summary> Initializes a new instance of OpenAuthenticationAccessPolicy. </summary>
        /// <param name="providerType"> Type of provider for OAuth. </param>
        /// <param name="claims"> The access policy claims. </param>
        /// <returns> A new <see cref="Models.OpenAuthenticationAccessPolicy"/> instance for mocking. </returns>
        public static OpenAuthenticationAccessPolicy OpenAuthenticationAccessPolicy(OpenAuthenticationProviderType? providerType = null, IEnumerable<OpenAuthenticationPolicyClaim> claims = null)
        {
            claims ??= new List<OpenAuthenticationPolicyClaim>();

            return new OpenAuthenticationAccessPolicy(providerType, claims?.ToList());
        }

        /// <summary> Initializes a new instance of OpenAuthenticationPolicyClaim. </summary>
        /// <param name="name"> The name of the claim. </param>
        /// <param name="value"> The value of the claim. </param>
        /// <returns> A new <see cref="Models.OpenAuthenticationPolicyClaim"/> instance for mocking. </returns>
        public static OpenAuthenticationPolicyClaim OpenAuthenticationPolicyClaim(string name = null, string value = null)
        {
            return new OpenAuthenticationPolicyClaim(name, value);
        }

        /// <summary> Initializes a new instance of LogicSku. </summary>
        /// <param name="name"> The name. </param>
        /// <param name="plan"> The reference to plan. </param>
        /// <returns> A new <see cref="Models.LogicSku"/> instance for mocking. </returns>
        public static LogicSku LogicSku(LogicSkuName name = default, LogicResourceReference plan = null)
        {
            return new LogicSku(name, plan);
        }

        /// <summary> Initializes a new instance of LogicResourceReference. </summary>
        /// <param name="id"> The resource id. </param>
        /// <param name="name"> Gets the resource name. </param>
        /// <param name="resourceType"> Gets the resource type. </param>
        /// <returns> A new <see cref="Models.LogicResourceReference"/> instance for mocking. </returns>
        public static LogicResourceReference LogicResourceReference(ResourceIdentifier id = null, string name = null, ResourceType? resourceType = null)
        {
            return new LogicResourceReference(id, name, resourceType);
        }

        /// <summary> Initializes a new instance of LogicWorkflowParameterInfo. </summary>
        /// <param name="parameterType"> The type. </param>
        /// <param name="value"> The value. </param>
        /// <param name="metadata"> The metadata. </param>
        /// <param name="description"> The description. </param>
        /// <returns> A new <see cref="Models.LogicWorkflowParameterInfo"/> instance for mocking. </returns>
        public static LogicWorkflowParameterInfo LogicWorkflowParameterInfo(LogicWorkflowParameterType? parameterType = null, BinaryData value = null, BinaryData metadata = null, string description = null)
        {
            return new LogicWorkflowParameterInfo(parameterType, value, metadata, description);
        }

        /// <summary> Initializes a new instance of LogicErrorResponse. </summary>
        /// <param name="code"> Error code. </param>
        /// <param name="message"> Error message indicating why the operation failed. </param>
        /// <returns> A new <see cref="Models.LogicErrorResponse"/> instance for mocking. </returns>
        public static LogicErrorResponse LogicErrorResponse(string code = null, string message = null)
        {
            return new LogicErrorResponse(code, message);
        }

        /// <summary> Initializes a new instance of LogicWorkflowTriggerCallbackUri. </summary>
        /// <param name="value"> Gets the workflow trigger callback URL. </param>
        /// <param name="method"> Gets the workflow trigger callback URL HTTP method. </param>
        /// <param name="basePath"> Gets the workflow trigger callback URL base path. </param>
        /// <param name="relativePath"> Gets the workflow trigger callback URL relative path. </param>
        /// <param name="relativePathParameters"> Gets the workflow trigger callback URL relative path parameters. </param>
        /// <param name="queries"> Gets the workflow trigger callback URL query parameters. </param>
        /// <returns> A new <see cref="Models.LogicWorkflowTriggerCallbackUri"/> instance for mocking. </returns>
        public static LogicWorkflowTriggerCallbackUri LogicWorkflowTriggerCallbackUri(string value = null, RequestMethod? method = null, string basePath = null, string relativePath = null, IEnumerable<string> relativePathParameters = null, LogicWorkflowTriggerCallbackQueryParameterInfo queries = null)
        {
            relativePathParameters ??= new List<string>();

            return new LogicWorkflowTriggerCallbackUri(value, method, basePath, relativePath, relativePathParameters?.ToList(), queries);
        }

        /// <summary> Initializes a new instance of LogicWorkflowTriggerCallbackQueryParameterInfo. </summary>
        /// <param name="apiVersion"> The api version. </param>
        /// <param name="sp"> The SAS permissions. </param>
        /// <param name="sv"> The SAS version. </param>
        /// <param name="sig"> The SAS signature. </param>
        /// <param name="se"> The SAS timestamp. </param>
        /// <returns> A new <see cref="Models.LogicWorkflowTriggerCallbackQueryParameterInfo"/> instance for mocking. </returns>
        public static LogicWorkflowTriggerCallbackQueryParameterInfo LogicWorkflowTriggerCallbackQueryParameterInfo(string apiVersion = null, string sp = null, string sv = null, string sig = null, string se = null)
        {
            return new LogicWorkflowTriggerCallbackQueryParameterInfo(apiVersion, sp, sv, sig, se);
        }

        /// <summary> Initializes a new instance of LogicWorkflowReference. </summary>
        /// <param name="id"> The resource id. </param>
        /// <param name="name"> Gets the resource name. </param>
        /// <param name="resourceType"> Gets the resource type. </param>
        /// <returns> A new <see cref="Models.LogicWorkflowReference"/> instance for mocking. </returns>
        public static LogicWorkflowReference LogicWorkflowReference(ResourceIdentifier id = null, string name = null, ResourceType? resourceType = null)
        {
            return new LogicWorkflowReference(id, name, resourceType);
        }

        /// <summary> Initializes a new instance of LogicWorkflowVersionData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="provisioningState"> The provisioning state. </param>
        /// <param name="createdOn"> Gets the created time. </param>
        /// <param name="changedOn"> Gets the changed time. </param>
        /// <param name="state"> The state. </param>
        /// <param name="version"> Gets the version. </param>
        /// <param name="accessEndpoint"> Gets the access endpoint. </param>
        /// <param name="endpointsConfiguration"> The endpoints configuration. </param>
        /// <param name="accessControl"> The access control configuration. </param>
        /// <param name="sku"> The sku. </param>
        /// <param name="integrationAccount"> The integration account. </param>
        /// <param name="definition"> The definition. </param>
        /// <param name="parameters"> The parameters. </param>
        /// <returns> A new <see cref="Logic.LogicWorkflowVersionData"/> instance for mocking. </returns>
        public static LogicWorkflowVersionData LogicWorkflowVersionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, LogicWorkflowProvisioningState? provisioningState = null, DateTimeOffset? createdOn = null, DateTimeOffset? changedOn = null, LogicWorkflowState? state = null, string version = null, string accessEndpoint = null, FlowEndpointsConfiguration endpointsConfiguration = null, FlowAccessControlConfiguration accessControl = null, LogicSku sku = null, LogicResourceReference integrationAccount = null, BinaryData definition = null, IDictionary<string, LogicWorkflowParameterInfo> parameters = null)
        {
            tags ??= new Dictionary<string, string>();
            parameters ??= new Dictionary<string, LogicWorkflowParameterInfo>();

            return new LogicWorkflowVersionData(id, name, resourceType, systemData, tags, location, provisioningState, createdOn, changedOn, state, version, accessEndpoint, endpointsConfiguration, accessControl, sku, integrationAccount, definition, parameters);
        }

        /// <summary> Initializes a new instance of LogicWorkflowTriggerData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="provisioningState"> Gets the provisioning state. </param>
        /// <param name="createdOn"> Gets the created time. </param>
        /// <param name="changedOn"> Gets the changed time. </param>
        /// <param name="state"> Gets the state. </param>
        /// <param name="status"> Gets the status. </param>
        /// <param name="lastExecutionOn"> Gets the last execution time. </param>
        /// <param name="nextExecutionOn"> Gets the next execution time. </param>
        /// <param name="recurrence"> Gets the workflow trigger recurrence. </param>
        /// <param name="workflow"> Gets the reference to workflow. </param>
        /// <returns> A new <see cref="Logic.LogicWorkflowTriggerData"/> instance for mocking. </returns>
        public static LogicWorkflowTriggerData LogicWorkflowTriggerData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, LogicWorkflowTriggerProvisioningState? provisioningState = null, DateTimeOffset? createdOn = null, DateTimeOffset? changedOn = null, LogicWorkflowState? state = null, LogicWorkflowStatus? status = null, DateTimeOffset? lastExecutionOn = null, DateTimeOffset? nextExecutionOn = null, LogicWorkflowTriggerRecurrence recurrence = null, LogicResourceReference workflow = null)
        {
            return new LogicWorkflowTriggerData(id, name, resourceType, systemData, provisioningState, createdOn, changedOn, state, status, lastExecutionOn, nextExecutionOn, recurrence, workflow);
        }

        /// <summary> Initializes a new instance of LogicWorkflowTriggerRecurrence. </summary>
        /// <param name="frequency"> The frequency. </param>
        /// <param name="interval"> The interval. </param>
        /// <param name="startOn"> The start time. </param>
        /// <param name="endOn"> The end time. </param>
        /// <param name="timeZone"> The time zone. </param>
        /// <param name="schedule"> The recurrence schedule. </param>
        /// <returns> A new <see cref="Models.LogicWorkflowTriggerRecurrence"/> instance for mocking. </returns>
        public static LogicWorkflowTriggerRecurrence LogicWorkflowTriggerRecurrence(LogicWorkflowRecurrenceFrequency? frequency = null, int? interval = null, DateTimeOffset? startOn = null, DateTimeOffset? endOn = null, string timeZone = null, LogicWorkflowRecurrenceSchedule schedule = null)
        {
            return new LogicWorkflowTriggerRecurrence(frequency, interval, startOn, endOn, timeZone, schedule);
        }

        /// <summary> Initializes a new instance of LogicWorkflowRecurrenceSchedule. </summary>
        /// <param name="minutes"> The minutes. </param>
        /// <param name="hours"> The hours. </param>
        /// <param name="weekDays"> The days of the week. </param>
        /// <param name="monthDays"> The month days. </param>
        /// <param name="monthlyOccurrences"> The monthly occurrences. </param>
        /// <returns> A new <see cref="Models.LogicWorkflowRecurrenceSchedule"/> instance for mocking. </returns>
        public static LogicWorkflowRecurrenceSchedule LogicWorkflowRecurrenceSchedule(IEnumerable<int> minutes = null, IEnumerable<int> hours = null, IEnumerable<LogicWorkflowDayOfWeek> weekDays = null, IEnumerable<int> monthDays = null, IEnumerable<LogicWorkflowRecurrenceScheduleOccurrence> monthlyOccurrences = null)
        {
            minutes ??= new List<int>();
            hours ??= new List<int>();
            weekDays ??= new List<LogicWorkflowDayOfWeek>();
            monthDays ??= new List<int>();
            monthlyOccurrences ??= new List<LogicWorkflowRecurrenceScheduleOccurrence>();

            return new LogicWorkflowRecurrenceSchedule(minutes?.ToList(), hours?.ToList(), weekDays?.ToList(), monthDays?.ToList(), monthlyOccurrences?.ToList());
        }

        /// <summary> Initializes a new instance of LogicWorkflowRecurrenceScheduleOccurrence. </summary>
        /// <param name="day"> The day of the week. </param>
        /// <param name="occurrence"> The occurrence. </param>
        /// <returns> A new <see cref="Models.LogicWorkflowRecurrenceScheduleOccurrence"/> instance for mocking. </returns>
        public static LogicWorkflowRecurrenceScheduleOccurrence LogicWorkflowRecurrenceScheduleOccurrence(LogicWorkflowDayOfWeek? day = null, int? occurrence = null)
        {
            return new LogicWorkflowRecurrenceScheduleOccurrence(day, occurrence);
        }

        /// <summary> Initializes a new instance of LogicJsonSchema. </summary>
        /// <param name="title"> The JSON title. </param>
        /// <param name="content"> The JSON content. </param>
        /// <returns> A new <see cref="Models.LogicJsonSchema"/> instance for mocking. </returns>
        public static LogicJsonSchema LogicJsonSchema(string title = null, BinaryData content = null)
        {
            return new LogicJsonSchema(title, content);
        }

        /// <summary> Initializes a new instance of LogicWorkflowTriggerReference. </summary>
        /// <param name="id"> The resource id. </param>
        /// <param name="name"> Gets the resource name. </param>
        /// <param name="resourceType"> Gets the resource type. </param>
        /// <param name="flowName"> The workflow name. </param>
        /// <param name="triggerName"> The workflow trigger name. </param>
        /// <returns> A new <see cref="Models.LogicWorkflowTriggerReference"/> instance for mocking. </returns>
        public static LogicWorkflowTriggerReference LogicWorkflowTriggerReference(ResourceIdentifier id = null, string name = null, ResourceType? resourceType = null, string flowName = null, string triggerName = null)
        {
            return new LogicWorkflowTriggerReference(id, name, resourceType, flowName, triggerName);
        }

        /// <summary> Initializes a new instance of LogicWorkflowTriggerHistoryData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="startOn"> Gets the start time. </param>
        /// <param name="endOn"> Gets the end time. </param>
        /// <param name="scheduledOn"> The scheduled time. </param>
        /// <param name="status"> Gets the status. </param>
        /// <param name="code"> Gets the code. </param>
        /// <param name="error"> Gets the error. </param>
        /// <param name="trackingId"> Gets the tracking id. </param>
        /// <param name="correlationClientTrackingId"> The run correlation. </param>
        /// <param name="inputsLink"> Gets the link to input parameters. </param>
        /// <param name="outputsLink"> Gets the link to output parameters. </param>
        /// <param name="isFired"> The value indicating whether trigger was fired. </param>
        /// <param name="run"> Gets the reference to workflow run. </param>
        /// <returns> A new <see cref="Logic.LogicWorkflowTriggerHistoryData"/> instance for mocking. </returns>
        public static LogicWorkflowTriggerHistoryData LogicWorkflowTriggerHistoryData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, DateTimeOffset? startOn = null, DateTimeOffset? endOn = null, DateTimeOffset? scheduledOn = null, LogicWorkflowStatus? status = null, string code = null, BinaryData error = null, Guid? trackingId = null, string correlationClientTrackingId = null, LogicContentLink inputsLink = null, LogicContentLink outputsLink = null, bool? isFired = null, LogicResourceReference run = null)
        {
            return new LogicWorkflowTriggerHistoryData(id, name, resourceType, systemData, startOn, endOn, scheduledOn, status, code, error, trackingId, correlationClientTrackingId != null ? new Correlation(correlationClientTrackingId) : null, inputsLink, outputsLink, isFired, run);
        }

        /// <summary> Initializes a new instance of LogicContentLink. </summary>
        /// <param name="uri"> The content link URI. </param>
        /// <param name="contentVersion"> The content version. </param>
        /// <param name="contentSize"> The content size. </param>
        /// <param name="contentHash"> The content hash. </param>
        /// <param name="metadata"> The metadata. </param>
        /// <returns> A new <see cref="Models.LogicContentLink"/> instance for mocking. </returns>
        public static LogicContentLink LogicContentLink(Uri uri = null, string contentVersion = null, long? contentSize = null, LogicContentHash contentHash = null, BinaryData metadata = null)
        {
            return new LogicContentLink(uri, contentVersion, contentSize, contentHash, metadata);
        }

        /// <summary> Initializes a new instance of LogicContentHash. </summary>
        /// <param name="algorithm"> The algorithm of the content hash. </param>
        /// <param name="value"> The value of the content hash. </param>
        /// <returns> A new <see cref="Models.LogicContentHash"/> instance for mocking. </returns>
        public static LogicContentHash LogicContentHash(string algorithm = null, string value = null)
        {
            return new LogicContentHash(algorithm, value);
        }

        /// <summary> Initializes a new instance of LogicWorkflowRunData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="waitEndOn"> Gets the wait end time. </param>
        /// <param name="startOn"> Gets the start time. </param>
        /// <param name="endOn"> Gets the end time. </param>
        /// <param name="status"> Gets the status. </param>
        /// <param name="code"> Gets the code. </param>
        /// <param name="error"> Gets the error. </param>
        /// <param name="correlationId"> Gets the correlation id. </param>
        /// <param name="correlationClientTrackingId"> The run correlation. </param>
        /// <param name="workflow"> Gets the reference to workflow version. </param>
        /// <param name="trigger"> Gets the fired trigger. </param>
        /// <param name="outputs"> Gets the outputs. </param>
        /// <param name="response"> Gets the response of the flow run. </param>
        /// <returns> A new <see cref="Logic.LogicWorkflowRunData"/> instance for mocking. </returns>
        public static LogicWorkflowRunData LogicWorkflowRunData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, DateTimeOffset? waitEndOn = null, DateTimeOffset? startOn = null, DateTimeOffset? endOn = null, LogicWorkflowStatus? status = null, string code = null, BinaryData error = null, string correlationId = null, string correlationClientTrackingId = null, LogicResourceReference workflow = null, LogicWorkflowRunTrigger trigger = null, IReadOnlyDictionary<string, LogicWorkflowOutputParameterInfo> outputs = null, LogicWorkflowRunTrigger response = null)
        {
            outputs ??= new Dictionary<string, LogicWorkflowOutputParameterInfo>();

            return new LogicWorkflowRunData(id, name, resourceType, systemData, waitEndOn, startOn, endOn, status, code, error, correlationId, correlationClientTrackingId != null ? new Correlation(correlationClientTrackingId) : null, workflow, trigger, outputs, response);
        }

        /// <summary> Initializes a new instance of LogicWorkflowRunTrigger. </summary>
        /// <param name="name"> Gets the name. </param>
        /// <param name="inputs"> Gets the inputs. </param>
        /// <param name="inputsLink"> Gets the link to inputs. </param>
        /// <param name="outputs"> Gets the outputs. </param>
        /// <param name="outputsLink"> Gets the link to outputs. </param>
        /// <param name="scheduledOn"> Gets the scheduled time. </param>
        /// <param name="startOn"> Gets the start time. </param>
        /// <param name="endOn"> Gets the end time. </param>
        /// <param name="trackingId"> Gets the tracking id. </param>
        /// <param name="correlationClientTrackingId"> The run correlation. </param>
        /// <param name="code"> Gets the code. </param>
        /// <param name="status"> Gets the status. </param>
        /// <param name="error"> Gets the error. </param>
        /// <param name="trackedProperties"> Gets the tracked properties. </param>
        /// <returns> A new <see cref="Models.LogicWorkflowRunTrigger"/> instance for mocking. </returns>
        public static LogicWorkflowRunTrigger LogicWorkflowRunTrigger(string name = null, BinaryData inputs = null, LogicContentLink inputsLink = null, BinaryData outputs = null, LogicContentLink outputsLink = null, DateTimeOffset? scheduledOn = null, DateTimeOffset? startOn = null, DateTimeOffset? endOn = null, Guid? trackingId = null, string correlationClientTrackingId = null, string code = null, LogicWorkflowStatus? status = null, BinaryData error = null, BinaryData trackedProperties = null)
        {
            return new LogicWorkflowRunTrigger(name, inputs, inputsLink, outputs, outputsLink, scheduledOn, startOn, endOn, trackingId, correlationClientTrackingId != null ? new Correlation(correlationClientTrackingId) : null, code, status, error, trackedProperties);
        }

        /// <summary> Initializes a new instance of LogicWorkflowOutputParameterInfo. </summary>
        /// <param name="parameterType"> The type. </param>
        /// <param name="value"> The value. </param>
        /// <param name="metadata"> The metadata. </param>
        /// <param name="description"> The description. </param>
        /// <param name="error"> Gets the error. </param>
        /// <returns> A new <see cref="Models.LogicWorkflowOutputParameterInfo"/> instance for mocking. </returns>
        public static LogicWorkflowOutputParameterInfo LogicWorkflowOutputParameterInfo(LogicWorkflowParameterType? parameterType = null, BinaryData value = null, BinaryData metadata = null, string description = null, BinaryData error = null)
        {
            return new LogicWorkflowOutputParameterInfo(parameterType, value, metadata, description, error);
        }

        /// <summary> Initializes a new instance of LogicWorkflowRunActionData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="startOn"> Gets the start time. </param>
        /// <param name="endOn"> Gets the end time. </param>
        /// <param name="status"> Gets the status. </param>
        /// <param name="code"> Gets the code. </param>
        /// <param name="error"> Gets the error. </param>
        /// <param name="trackingId"> Gets the tracking id. </param>
        /// <param name="correlation"> The correlation properties. </param>
        /// <param name="inputsLink"> Gets the link to inputs. </param>
        /// <param name="outputsLink"> Gets the link to outputs. </param>
        /// <param name="trackedProperties"> Gets the tracked properties. </param>
        /// <param name="retryHistory"> Gets the retry histories. </param>
        /// <returns> A new <see cref="Logic.LogicWorkflowRunActionData"/> instance for mocking. </returns>
        public static LogicWorkflowRunActionData LogicWorkflowRunActionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, DateTimeOffset? startOn = null, DateTimeOffset? endOn = null, LogicWorkflowStatus? status = null, string code = null, BinaryData error = null, Guid? trackingId = null, LogicWorkflowRunActionCorrelation correlation = null, LogicContentLink inputsLink = null, LogicContentLink outputsLink = null, BinaryData trackedProperties = null, IEnumerable<LogicWorkRetryHistory> retryHistory = null)
        {
            retryHistory ??= new List<LogicWorkRetryHistory>();

            return new LogicWorkflowRunActionData(id, name, resourceType, systemData, startOn, endOn, status, code, error, trackingId, correlation, inputsLink, outputsLink, trackedProperties, retryHistory?.ToList());
        }

        /// <summary> Initializes a new instance of LogicWorkflowRunActionCorrelation. </summary>
        /// <param name="clientTrackingId"> The client tracking identifier. </param>
        /// <param name="clientKeywords"> The client keywords. </param>
        /// <param name="actionTrackingId"> The action tracking identifier. </param>
        /// <returns> A new <see cref="Models.LogicWorkflowRunActionCorrelation"/> instance for mocking. </returns>
        public static LogicWorkflowRunActionCorrelation LogicWorkflowRunActionCorrelation(string clientTrackingId = null, IEnumerable<string> clientKeywords = null, Guid? actionTrackingId = null)
        {
            clientKeywords ??= new List<string>();

            return new LogicWorkflowRunActionCorrelation(clientTrackingId, clientKeywords?.ToList(), actionTrackingId);
        }

        /// <summary> Initializes a new instance of LogicWorkflowRunCorrelation. </summary>
        /// <param name="clientTrackingId"> The client tracking identifier. </param>
        /// <param name="clientKeywords"> The client keywords. </param>
        /// <returns> A new <see cref="Models.LogicWorkflowRunCorrelation"/> instance for mocking. </returns>
        public static LogicWorkflowRunCorrelation LogicWorkflowRunCorrelation(string clientTrackingId = null, IEnumerable<string> clientKeywords = null)
        {
            clientKeywords ??= new List<string>();

            return new LogicWorkflowRunCorrelation(clientTrackingId, clientKeywords?.ToList());
        }

        /// <summary> Initializes a new instance of LogicWorkRetryHistory. </summary>
        /// <param name="startOn"> Gets the start time. </param>
        /// <param name="endOn"> Gets the end time. </param>
        /// <param name="code"> Gets the status code. </param>
        /// <param name="clientRequestId"> Gets the client request Id. </param>
        /// <param name="serviceRequestId"> Gets the service request Id. </param>
        /// <param name="error"> Gets the error response. </param>
        /// <returns> A new <see cref="Models.LogicWorkRetryHistory"/> instance for mocking. </returns>
        public static LogicWorkRetryHistory LogicWorkRetryHistory(DateTimeOffset? startOn = null, DateTimeOffset? endOn = null, string code = null, string clientRequestId = null, string serviceRequestId = null, LogicErrorResponse error = null)
        {
            return new LogicWorkRetryHistory(startOn, endOn, code, clientRequestId, serviceRequestId, error);
        }

        /// <summary> Initializes a new instance of LogicExpressionRoot. </summary>
        /// <param name="text"> The text. </param>
        /// <param name="value"> Anything. </param>
        /// <param name="subexpressions"> The sub expressions. </param>
        /// <param name="error"> The azure resource error info. </param>
        /// <param name="path"> The path. </param>
        /// <returns> A new <see cref="Models.LogicExpressionRoot"/> instance for mocking. </returns>
        public static LogicExpressionRoot LogicExpressionRoot(string text = null, BinaryData value = null, IEnumerable<LogicExpression> subexpressions = null, LogicExpressionErrorInfo error = null, string path = null)
        {
            subexpressions ??= new List<LogicExpression>();

            return new LogicExpressionRoot(text, value, subexpressions?.ToList(), error, path);
        }

        /// <summary> Initializes a new instance of LogicExpression. </summary>
        /// <param name="text"> The text. </param>
        /// <param name="value"> Anything. </param>
        /// <param name="subexpressions"> The sub expressions. </param>
        /// <param name="error"> The azure resource error info. </param>
        /// <returns> A new <see cref="Models.LogicExpression"/> instance for mocking. </returns>
        public static LogicExpression LogicExpression(string text = null, BinaryData value = null, IEnumerable<LogicExpression> subexpressions = null, LogicExpressionErrorInfo error = null)
        {
            subexpressions ??= new List<LogicExpression>();

            return new LogicExpression(text, value, subexpressions?.ToList(), error);
        }

        /// <summary> Initializes a new instance of LogicExpressionErrorInfo. </summary>
        /// <param name="code"> The error code. </param>
        /// <param name="message"> The error message. </param>
        /// <param name="details"> The error details. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="code"/> is null. </exception>
        /// <returns> A new <see cref="Models.LogicExpressionErrorInfo"/> instance for mocking. </returns>
        public static LogicExpressionErrorInfo LogicExpressionErrorInfo(string code = null, string message = null, IEnumerable<LogicExpressionErrorInfo> details = null)
        {
            if (code == null)
            {
                throw new ArgumentNullException(nameof(code));
            }
            details ??= new List<LogicExpressionErrorInfo>();

            return new LogicExpressionErrorInfo(code, message, details?.ToList());
        }

        /// <summary> Initializes a new instance of LogicErrorInfo. </summary>
        /// <param name="code"> The error code. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="code"/> is null. </exception>
        /// <returns> A new <see cref="Models.LogicErrorInfo"/> instance for mocking. </returns>
        public static LogicErrorInfo LogicErrorInfo(string code = null)
        {
            if (code == null)
            {
                throw new ArgumentNullException(nameof(code));
            }

            return new LogicErrorInfo(code);
        }

        /// <summary> Initializes a new instance of LogicWorkflowRunActionRepetitionDefinitionData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="startOn"> The start time of the workflow scope repetition. </param>
        /// <param name="endOn"> The end time of the workflow scope repetition. </param>
        /// <param name="correlation"> The correlation properties. </param>
        /// <param name="status"> The status of the workflow scope repetition. </param>
        /// <param name="code"> The workflow scope repetition code. </param>
        /// <param name="error"> Anything. </param>
        /// <param name="trackingId"> Gets the tracking id. </param>
        /// <param name="inputs"> Gets the inputs. </param>
        /// <param name="inputsLink"> Gets the link to inputs. </param>
        /// <param name="outputs"> Gets the outputs. </param>
        /// <param name="outputsLink"> Gets the link to outputs. </param>
        /// <param name="trackedProperties"> Gets the tracked properties. </param>
        /// <param name="retryHistory"> Gets the retry histories. </param>
        /// <param name="iterationCount"></param>
        /// <param name="repetitionIndexes"> The repetition indexes. </param>
        /// <returns> A new <see cref="Logic.LogicWorkflowRunActionRepetitionDefinitionData"/> instance for mocking. </returns>
        public static LogicWorkflowRunActionRepetitionDefinitionData LogicWorkflowRunActionRepetitionDefinitionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, DateTimeOffset? startOn = null, DateTimeOffset? endOn = null, LogicWorkflowRunActionCorrelation correlation = null, LogicWorkflowStatus? status = null, string code = null, BinaryData error = null, Guid? trackingId = null, BinaryData inputs = null, LogicContentLink inputsLink = null, BinaryData outputs = null, LogicContentLink outputsLink = null, BinaryData trackedProperties = null, IEnumerable<LogicWorkRetryHistory> retryHistory = null, int? iterationCount = null, IEnumerable<LogicWorkflowRepetitionIndex> repetitionIndexes = null)
        {
            tags ??= new Dictionary<string, string>();
            retryHistory ??= new List<LogicWorkRetryHistory>();
            repetitionIndexes ??= new List<LogicWorkflowRepetitionIndex>();

            return new LogicWorkflowRunActionRepetitionDefinitionData(id, name, resourceType, systemData, tags, location, startOn, endOn, correlation, status, code, error, trackingId, inputs, inputsLink, outputs, outputsLink, trackedProperties, retryHistory?.ToList(), iterationCount, repetitionIndexes?.ToList());
        }

        /// <summary> Initializes a new instance of LogicWorkflowRepetitionIndex. </summary>
        /// <param name="scopeName"> The scope. </param>
        /// <param name="itemIndex"> The index. </param>
        /// <returns> A new <see cref="Models.LogicWorkflowRepetitionIndex"/> instance for mocking. </returns>
        public static LogicWorkflowRepetitionIndex LogicWorkflowRepetitionIndex(string scopeName = null, int itemIndex = default)
        {
            return new LogicWorkflowRepetitionIndex(scopeName, itemIndex);
        }

        /// <summary> Initializes a new instance of LogicWorkflowRequestHistoryData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The request history properties. </param>
        /// <returns> A new <see cref="Logic.LogicWorkflowRequestHistoryData"/> instance for mocking. </returns>
        public static LogicWorkflowRequestHistoryData LogicWorkflowRequestHistoryData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, LogicWorkflowRequestHistoryProperties properties = null)
        {
            tags ??= new Dictionary<string, string>();

            return new LogicWorkflowRequestHistoryData(id, name, resourceType, systemData, tags, location, properties);
        }

        /// <summary> Initializes a new instance of LogicWorkflowRequestHistoryProperties. </summary>
        /// <param name="startOn"> The time the request started. </param>
        /// <param name="endOn"> The time the request ended. </param>
        /// <param name="request"> The request. </param>
        /// <param name="response"> The response. </param>
        /// <returns> A new <see cref="Models.LogicWorkflowRequestHistoryProperties"/> instance for mocking. </returns>
        public static LogicWorkflowRequestHistoryProperties LogicWorkflowRequestHistoryProperties(DateTimeOffset? startOn = null, DateTimeOffset? endOn = null, LogicWorkflowRequest request = null, LogicWorkflowResponse response = null)
        {
            return new LogicWorkflowRequestHistoryProperties(startOn, endOn, request, response);
        }

        /// <summary> Initializes a new instance of LogicWorkflowRequest. </summary>
        /// <param name="headers"> A list of all the headers attached to the request. </param>
        /// <param name="uri"> The destination for the request. </param>
        /// <param name="method"> The HTTP method used for the request. </param>
        /// <returns> A new <see cref="Models.LogicWorkflowRequest"/> instance for mocking. </returns>
        public static LogicWorkflowRequest LogicWorkflowRequest(BinaryData headers = null, Uri uri = null, string method = null)
        {
            return new LogicWorkflowRequest(headers, uri, method);
        }

        /// <summary> Initializes a new instance of LogicWorkflowResponse. </summary>
        /// <param name="headers"> A list of all the headers attached to the response. </param>
        /// <param name="statusCode"> The status code of the response. </param>
        /// <param name="bodyLink"> Details on the location of the body content. </param>
        /// <returns> A new <see cref="Models.LogicWorkflowResponse"/> instance for mocking. </returns>
        public static LogicWorkflowResponse LogicWorkflowResponse(BinaryData headers = null, int? statusCode = null, LogicContentLink bodyLink = null)
        {
            return new LogicWorkflowResponse(headers, statusCode, bodyLink);
        }

        /// <summary> Initializes a new instance of IntegrationAccountData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="skuName"> The sku. </param>
        /// <param name="integrationServiceEnvironment"> The integration service environment. </param>
        /// <param name="state"> The workflow state. </param>
        /// <returns> A new <see cref="Logic.IntegrationAccountData"/> instance for mocking. </returns>
        public static IntegrationAccountData IntegrationAccountData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, IntegrationAccountSkuName? skuName = null, LogicResourceReference integrationServiceEnvironment = null, LogicWorkflowState? state = null)
        {
            tags ??= new Dictionary<string, string>();

            return new IntegrationAccountData(id, name, resourceType, systemData, tags, location, skuName.HasValue ? new IntegrationAccountSku(skuName.Value) : null, integrationServiceEnvironment, state);
        }

        /// <summary> Initializes a new instance of IntegrationAccountAssemblyDefinitionData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The assembly properties. </param>
        /// <returns> A new <see cref="Logic.IntegrationAccountAssemblyDefinitionData"/> instance for mocking. </returns>
        public static IntegrationAccountAssemblyDefinitionData IntegrationAccountAssemblyDefinitionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, IntegrationAccountAssemblyProperties properties = null)
        {
            tags ??= new Dictionary<string, string>();

            return new IntegrationAccountAssemblyDefinitionData(id, name, resourceType, systemData, tags, location, properties);
        }

        /// <summary> Initializes a new instance of IntegrationAccountAssemblyProperties. </summary>
        /// <param name="createdOn"> The artifact creation time. </param>
        /// <param name="changedOn"> The artifact changed time. </param>
        /// <param name="metadata"> Anything. </param>
        /// <param name="content"> Anything. </param>
        /// <param name="contentType"> The content type. </param>
        /// <param name="contentLink"> The content link. </param>
        /// <param name="assemblyName"> The assembly name. </param>
        /// <param name="assemblyVersion"> The assembly version. </param>
        /// <param name="assemblyCulture"> The assembly culture. </param>
        /// <param name="assemblyPublicKeyToken"> The assembly public key token. </param>
        /// <returns> A new <see cref="Models.IntegrationAccountAssemblyProperties"/> instance for mocking. </returns>
        public static IntegrationAccountAssemblyProperties IntegrationAccountAssemblyProperties(DateTimeOffset? createdOn = null, DateTimeOffset? changedOn = null, BinaryData metadata = null, BinaryData content = null, ContentType? contentType = null, LogicContentLink contentLink = null, string assemblyName = null, string assemblyVersion = null, string assemblyCulture = null, string assemblyPublicKeyToken = null)
        {
            return new IntegrationAccountAssemblyProperties(createdOn, changedOn, metadata, content, contentType, contentLink, assemblyName, assemblyVersion, assemblyCulture, assemblyPublicKeyToken);
        }

        /// <summary> Initializes a new instance of ArtifactContentProperties. </summary>
        /// <param name="createdOn"> The artifact creation time. </param>
        /// <param name="changedOn"> The artifact changed time. </param>
        /// <param name="metadata"> Anything. </param>
        /// <param name="content"> Anything. </param>
        /// <param name="contentType"> The content type. </param>
        /// <param name="contentLink"> The content link. </param>
        /// <returns> A new <see cref="Models.ArtifactContentProperties"/> instance for mocking. </returns>
        public static ArtifactContentProperties ArtifactContentProperties(DateTimeOffset? createdOn = null, DateTimeOffset? changedOn = null, BinaryData metadata = null, BinaryData content = null, ContentType? contentType = null, LogicContentLink contentLink = null)
        {
            return new ArtifactContentProperties(createdOn, changedOn, metadata, content, contentType, contentLink);
        }

        /// <summary> Initializes a new instance of ArtifactProperties. </summary>
        /// <param name="createdOn"> The artifact creation time. </param>
        /// <param name="changedOn"> The artifact changed time. </param>
        /// <param name="metadata"> Anything. </param>
        /// <returns> A new <see cref="Models.ArtifactProperties"/> instance for mocking. </returns>
        public static ArtifactProperties ArtifactProperties(DateTimeOffset? createdOn = null, DateTimeOffset? changedOn = null, BinaryData metadata = null)
        {
            return new ArtifactProperties(createdOn, changedOn, metadata);
        }

        /// <summary> Initializes a new instance of IntegrationAccountBatchConfigurationData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The batch configuration properties. </param>
        /// <returns> A new <see cref="Logic.IntegrationAccountBatchConfigurationData"/> instance for mocking. </returns>
        public static IntegrationAccountBatchConfigurationData IntegrationAccountBatchConfigurationData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, IntegrationAccountBatchConfigurationProperties properties = null)
        {
            tags ??= new Dictionary<string, string>();

            return new IntegrationAccountBatchConfigurationData(id, name, resourceType, systemData, tags, location, properties);
        }

        /// <summary> Initializes a new instance of IntegrationAccountBatchConfigurationProperties. </summary>
        /// <param name="createdOn"> The artifact creation time. </param>
        /// <param name="changedOn"> The artifact changed time. </param>
        /// <param name="metadata"> Anything. </param>
        /// <param name="batchGroupName"> The name of the batch group. </param>
        /// <param name="releaseCriteria"> The batch release criteria. </param>
        /// <returns> A new <see cref="Models.IntegrationAccountBatchConfigurationProperties"/> instance for mocking. </returns>
        public static IntegrationAccountBatchConfigurationProperties IntegrationAccountBatchConfigurationProperties(DateTimeOffset? createdOn = null, DateTimeOffset? changedOn = null, BinaryData metadata = null, string batchGroupName = null, IntegrationAccountBatchReleaseCriteria releaseCriteria = null)
        {
            return new IntegrationAccountBatchConfigurationProperties(createdOn, changedOn, metadata, batchGroupName, releaseCriteria);
        }

        /// <summary> Initializes a new instance of IntegrationAccountBatchReleaseCriteria. </summary>
        /// <param name="messageCount"> The message count. </param>
        /// <param name="batchSize"> The batch size in bytes. </param>
        /// <param name="recurrence"> The recurrence. </param>
        /// <returns> A new <see cref="Models.IntegrationAccountBatchReleaseCriteria"/> instance for mocking. </returns>
        public static IntegrationAccountBatchReleaseCriteria IntegrationAccountBatchReleaseCriteria(int? messageCount = null, int? batchSize = null, LogicWorkflowTriggerRecurrence recurrence = null)
        {
            return new IntegrationAccountBatchReleaseCriteria(messageCount, batchSize, recurrence);
        }

        /// <summary> Initializes a new instance of ListOperationCallbackUri. </summary>
        /// <param name="uri"> The URL value. </param>
        /// <returns> A new <see cref="Models.ListOperationCallbackUri"/> instance for mocking. </returns>
        public static ListOperationCallbackUri ListOperationCallbackUri(Uri uri = null)
        {
            return new ListOperationCallbackUri(uri);
        }

        /// <summary> Initializes a new instance of IntegrationAccountKeyVaultNameReference. </summary>
        /// <param name="id"> The resource id. </param>
        /// <param name="name"> Gets the resource name. </param>
        /// <param name="resourceType"> Gets the resource type. </param>
        /// <returns> A new <see cref="Models.IntegrationAccountKeyVaultNameReference"/> instance for mocking. </returns>
        public static IntegrationAccountKeyVaultNameReference IntegrationAccountKeyVaultNameReference(ResourceIdentifier id = null, string name = null, ResourceType? resourceType = null)
        {
            return new IntegrationAccountKeyVaultNameReference(id, name, resourceType);
        }

        /// <summary> Initializes a new instance of IntegrationAccountKeyVaultKey. </summary>
        /// <param name="keyId"> The key id. </param>
        /// <param name="isEnabled"> Whether the key is enabled or not. </param>
        /// <param name="createdOn"> When the key was created. </param>
        /// <param name="updatedOn"> When the key was updated. </param>
        /// <returns> A new <see cref="Models.IntegrationAccountKeyVaultKey"/> instance for mocking. </returns>
        public static IntegrationAccountKeyVaultKey IntegrationAccountKeyVaultKey(Uri keyId = null, bool? isEnabled = null, DateTimeOffset? createdOn = null, DateTimeOffset? updatedOn = null)
        {
            return new IntegrationAccountKeyVaultKey(keyId, isEnabled, createdOn, updatedOn);
        }

        /// <summary> Initializes a new instance of IntegrationAccountSchemaData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="schemaType"> The schema type. </param>
        /// <param name="targetNamespace"> The target namespace of the schema. </param>
        /// <param name="documentName"> The document name. </param>
        /// <param name="fileName"> The file name. </param>
        /// <param name="createdOn"> The created time. </param>
        /// <param name="changedOn"> The changed time. </param>
        /// <param name="metadata"> The metadata. </param>
        /// <param name="content"> The content. </param>
        /// <param name="contentType"> The content type. </param>
        /// <param name="contentLink"> The content link. </param>
        /// <returns> A new <see cref="Logic.IntegrationAccountSchemaData"/> instance for mocking. </returns>
        public static IntegrationAccountSchemaData IntegrationAccountSchemaData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, IntegrationAccountSchemaType schemaType = default, string targetNamespace = null, string documentName = null, string fileName = null, DateTimeOffset? createdOn = null, DateTimeOffset? changedOn = null, BinaryData metadata = null, BinaryData content = null, ContentType? contentType = null, LogicContentLink contentLink = null)
        {
            tags ??= new Dictionary<string, string>();

            return new IntegrationAccountSchemaData(id, name, resourceType, systemData, tags, location, schemaType, targetNamespace, documentName, fileName, createdOn, changedOn, metadata, content, contentType, contentLink);
        }

        /// <summary> Initializes a new instance of IntegrationAccountMapData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="mapType"> The map type. </param>
        /// <param name="parametersSchemaRef"> The parameters schema of integration account map. </param>
        /// <param name="createdOn"> The created time. </param>
        /// <param name="changedOn"> The changed time. </param>
        /// <param name="content"> The content. </param>
        /// <param name="contentType"> The content type. </param>
        /// <param name="contentLink"> The content link. </param>
        /// <param name="metadata"> The metadata. </param>
        /// <returns> A new <see cref="Logic.IntegrationAccountMapData"/> instance for mocking. </returns>
        public static IntegrationAccountMapData IntegrationAccountMapData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, IntegrationAccountMapType mapType = default, string parametersSchemaRef = null, DateTimeOffset? createdOn = null, DateTimeOffset? changedOn = null, BinaryData content = null, ContentType? contentType = null, LogicContentLink contentLink = null, BinaryData metadata = null)
        {
            tags ??= new Dictionary<string, string>();

            return new IntegrationAccountMapData(id, name, resourceType, systemData, tags, location, mapType, parametersSchemaRef != null ? new IntegrationAccountMapPropertiesParametersSchema(parametersSchemaRef) : null, createdOn, changedOn, content, contentType, contentLink, metadata);
        }

        /// <summary> Initializes a new instance of IntegrationAccountPartnerData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="partnerType"> The partner type. </param>
        /// <param name="createdOn"> The created time. </param>
        /// <param name="changedOn"> The changed time. </param>
        /// <param name="metadata"> The metadata. </param>
        /// <param name="b2bBusinessIdentities"> The partner content. </param>
        /// <returns> A new <see cref="Logic.IntegrationAccountPartnerData"/> instance for mocking. </returns>
        public static IntegrationAccountPartnerData IntegrationAccountPartnerData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, IntegrationAccountPartnerType partnerType = default, DateTimeOffset? createdOn = null, DateTimeOffset? changedOn = null, BinaryData metadata = null, IEnumerable<IntegrationAccountBusinessIdentity> b2bBusinessIdentities = null)
        {
            tags ??= new Dictionary<string, string>();
            b2bBusinessIdentities ??= new List<IntegrationAccountBusinessIdentity>();

            return new IntegrationAccountPartnerData(id, name, resourceType, systemData, tags, location, partnerType, createdOn, changedOn, metadata, b2bBusinessIdentities != null ? new IntegrationAccountPartnerContent(new B2BPartnerContent(b2bBusinessIdentities?.ToList())) : null);
        }

        /// <summary> Initializes a new instance of IntegrationAccountPartnerContent. </summary>
        /// <param name="b2bBusinessIdentities"> The B2B partner content. </param>
        /// <returns> A new <see cref="Models.IntegrationAccountPartnerContent"/> instance for mocking. </returns>
        public static IntegrationAccountPartnerContent IntegrationAccountPartnerContent(IEnumerable<IntegrationAccountBusinessIdentity> b2bBusinessIdentities = null)
        {
            b2bBusinessIdentities ??= new List<IntegrationAccountBusinessIdentity>();

            return new IntegrationAccountPartnerContent(b2bBusinessIdentities != null ? new B2BPartnerContent(b2bBusinessIdentities?.ToList()) : null);
        }

        /// <summary> Initializes a new instance of IntegrationAccountAgreementData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="createdOn"> The created time. </param>
        /// <param name="changedOn"> The changed time. </param>
        /// <param name="metadata"> The metadata. </param>
        /// <param name="agreementType"> The agreement type. </param>
        /// <param name="hostPartner"> The integration account partner that is set as host partner for this agreement. </param>
        /// <param name="guestPartner"> The integration account partner that is set as guest partner for this agreement. </param>
        /// <param name="hostIdentity"> The business identity of the host partner. </param>
        /// <param name="guestIdentity"> The business identity of the guest partner. </param>
        /// <param name="content"> The agreement content. </param>
        /// <returns> A new <see cref="Logic.IntegrationAccountAgreementData"/> instance for mocking. </returns>
        public static IntegrationAccountAgreementData IntegrationAccountAgreementData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, DateTimeOffset? createdOn = null, DateTimeOffset? changedOn = null, BinaryData metadata = null, IntegrationAccountAgreementType agreementType = default, string hostPartner = null, string guestPartner = null, IntegrationAccountBusinessIdentity hostIdentity = null, IntegrationAccountBusinessIdentity guestIdentity = null, IntegrationAccountAgreementContent content = null)
        {
            tags ??= new Dictionary<string, string>();

            return new IntegrationAccountAgreementData(id, name, resourceType, systemData, tags, location, createdOn, changedOn, metadata, agreementType, hostPartner, guestPartner, hostIdentity, guestIdentity, content);
        }

        /// <summary> Initializes a new instance of IntegrationAccountAgreementContent. </summary>
        /// <param name="aS2"> The AS2 agreement content. </param>
        /// <param name="x12"> The X12 agreement content. </param>
        /// <param name="edifact"> The EDIFACT agreement content. </param>
        /// <returns> A new <see cref="Models.IntegrationAccountAgreementContent"/> instance for mocking. </returns>
        public static IntegrationAccountAgreementContent IntegrationAccountAgreementContent(AS2AgreementContent aS2 = null, X12AgreementContent x12 = null, EdifactAgreementContent edifact = null)
        {
            return new IntegrationAccountAgreementContent(aS2, x12, edifact);
        }

        /// <summary> Initializes a new instance of AS2MdnSettings. </summary>
        /// <param name="needMdn"> The value indicating whether to send or request a MDN. </param>
        /// <param name="signMdn"> The value indicating whether the MDN needs to be signed or not. </param>
        /// <param name="sendMdnAsynchronously"> The value indicating whether to send the asynchronous MDN. </param>
        /// <param name="receiptDeliveryUri"> The receipt delivery URL. </param>
        /// <param name="dispositionNotificationTo"> The disposition notification to header value. </param>
        /// <param name="signOutboundMdnIfOptional"> The value indicating whether to sign the outbound MDN if optional. </param>
        /// <param name="mdnText"> The MDN text. </param>
        /// <param name="sendInboundMdnToMessageBox"> The value indicating whether to send inbound MDN to message box. </param>
        /// <param name="micHashingAlgorithm"> The signing or hashing algorithm. </param>
        /// <returns> A new <see cref="Models.AS2MdnSettings"/> instance for mocking. </returns>
        public static AS2MdnSettings AS2MdnSettings(bool needMdn = default, bool signMdn = default, bool sendMdnAsynchronously = default, Uri receiptDeliveryUri = null, string dispositionNotificationTo = null, bool signOutboundMdnIfOptional = default, string mdnText = null, bool sendInboundMdnToMessageBox = default, AS2HashingAlgorithm micHashingAlgorithm = default)
        {
            return new AS2MdnSettings(needMdn, signMdn, sendMdnAsynchronously, receiptDeliveryUri, dispositionNotificationTo, signOutboundMdnIfOptional, mdnText, sendInboundMdnToMessageBox, micHashingAlgorithm);
        }

        /// <summary> Initializes a new instance of AS2SecuritySettings. </summary>
        /// <param name="overrideGroupSigningCertificate"> The value indicating whether to send or request a MDN. </param>
        /// <param name="signingCertificateName"> The name of the signing certificate. </param>
        /// <param name="encryptionCertificateName"> The name of the encryption certificate. </param>
        /// <param name="enableNrrForInboundEncodedMessages"> The value indicating whether to enable NRR for inbound encoded messages. </param>
        /// <param name="enableNrrForInboundDecodedMessages"> The value indicating whether to enable NRR for inbound decoded messages. </param>
        /// <param name="enableNrrForOutboundMdn"> The value indicating whether to enable NRR for outbound MDN. </param>
        /// <param name="enableNrrForOutboundEncodedMessages"> The value indicating whether to enable NRR for outbound encoded messages. </param>
        /// <param name="enableNrrForOutboundDecodedMessages"> The value indicating whether to enable NRR for outbound decoded messages. </param>
        /// <param name="enableNrrForInboundMdn"> The value indicating whether to enable NRR for inbound MDN. </param>
        /// <param name="sha2AlgorithmFormat"> The Sha2 algorithm format. Valid values are Sha2, ShaHashSize, ShaHyphenHashSize, Sha2UnderscoreHashSize. </param>
        /// <returns> A new <see cref="Models.AS2SecuritySettings"/> instance for mocking. </returns>
        public static AS2SecuritySettings AS2SecuritySettings(bool overrideGroupSigningCertificate = default, string signingCertificateName = null, string encryptionCertificateName = null, bool enableNrrForInboundEncodedMessages = default, bool enableNrrForInboundDecodedMessages = default, bool enableNrrForOutboundMdn = default, bool enableNrrForOutboundEncodedMessages = default, bool enableNrrForOutboundDecodedMessages = default, bool enableNrrForInboundMdn = default, string sha2AlgorithmFormat = null)
        {
            return new AS2SecuritySettings(overrideGroupSigningCertificate, signingCertificateName, encryptionCertificateName, enableNrrForInboundEncodedMessages, enableNrrForInboundDecodedMessages, enableNrrForOutboundMdn, enableNrrForOutboundEncodedMessages, enableNrrForOutboundDecodedMessages, enableNrrForInboundMdn, sha2AlgorithmFormat);
        }

        /// <summary> Initializes a new instance of AS2ValidationSettings. </summary>
        /// <param name="overrideMessageProperties"> The value indicating whether to override incoming message properties with those in agreement. </param>
        /// <param name="encryptMessage"> The value indicating whether the message has to be encrypted. </param>
        /// <param name="signMessage"> The value indicating whether the message has to be signed. </param>
        /// <param name="compressMessage"> The value indicating whether the message has to be compressed. </param>
        /// <param name="checkDuplicateMessage"> The value indicating whether to check for duplicate message. </param>
        /// <param name="interchangeDuplicatesValidityDays"> The number of days to look back for duplicate interchange. </param>
        /// <param name="checkCertificateRevocationListOnSend"> The value indicating whether to check for certificate revocation list on send. </param>
        /// <param name="checkCertificateRevocationListOnReceive"> The value indicating whether to check for certificate revocation list on receive. </param>
        /// <param name="encryptionAlgorithm"> The encryption algorithm. </param>
        /// <param name="signingAlgorithm"> The signing algorithm. </param>
        /// <returns> A new <see cref="Models.AS2ValidationSettings"/> instance for mocking. </returns>
        public static AS2ValidationSettings AS2ValidationSettings(bool overrideMessageProperties = default, bool encryptMessage = default, bool signMessage = default, bool compressMessage = default, bool checkDuplicateMessage = default, int interchangeDuplicatesValidityDays = default, bool checkCertificateRevocationListOnSend = default, bool checkCertificateRevocationListOnReceive = default, AS2EncryptionAlgorithm encryptionAlgorithm = default, AS2SigningAlgorithm? signingAlgorithm = null)
        {
            return new AS2ValidationSettings(overrideMessageProperties, encryptMessage, signMessage, compressMessage, checkDuplicateMessage, interchangeDuplicatesValidityDays, checkCertificateRevocationListOnSend, checkCertificateRevocationListOnReceive, encryptionAlgorithm, signingAlgorithm);
        }

        /// <summary> Initializes a new instance of X12ProtocolSettings. </summary>
        /// <param name="validationSettings"> The X12 validation settings. </param>
        /// <param name="framingSettings"> The X12 framing settings. </param>
        /// <param name="envelopeSettings"> The X12 envelope settings. </param>
        /// <param name="acknowledgementSettings"> The X12 acknowledgment settings. </param>
        /// <param name="messageFilterType"> The X12 message filter. </param>
        /// <param name="securitySettings"> The X12 security settings. </param>
        /// <param name="processingSettings"> The X12 processing settings. </param>
        /// <param name="envelopeOverrides"> The X12 envelope override settings. </param>
        /// <param name="validationOverrides"> The X12 validation override settings. </param>
        /// <param name="messageFilterList"> The X12 message filter list. </param>
        /// <param name="schemaReferences"> The X12 schema references. </param>
        /// <param name="x12DelimiterOverrides"> The X12 delimiter override settings. </param>
        /// <returns> A new <see cref="Models.X12ProtocolSettings"/> instance for mocking. </returns>
        public static X12ProtocolSettings X12ProtocolSettings(X12ValidationSettings validationSettings = null, X12FramingSettings framingSettings = null, X12EnvelopeSettings envelopeSettings = null, X12AcknowledgementSettings acknowledgementSettings = null, MessageFilterType? messageFilterType = null, X12SecuritySettings securitySettings = null, X12ProcessingSettings processingSettings = null, IEnumerable<X12EnvelopeOverride> envelopeOverrides = null, IEnumerable<X12ValidationOverride> validationOverrides = null, IEnumerable<X12MessageIdentifier> messageFilterList = null, IEnumerable<X12SchemaReference> schemaReferences = null, IEnumerable<X12DelimiterOverrides> x12DelimiterOverrides = null)
        {
            envelopeOverrides ??= new List<X12EnvelopeOverride>();
            validationOverrides ??= new List<X12ValidationOverride>();
            messageFilterList ??= new List<X12MessageIdentifier>();
            schemaReferences ??= new List<X12SchemaReference>();
            x12DelimiterOverrides ??= new List<X12DelimiterOverrides>();

            return new X12ProtocolSettings(validationSettings, framingSettings, envelopeSettings, acknowledgementSettings, messageFilterType.HasValue ? new X12MessageFilter(messageFilterType.Value) : null, securitySettings, processingSettings, envelopeOverrides?.ToList(), validationOverrides?.ToList(), messageFilterList?.ToList(), schemaReferences?.ToList(), x12DelimiterOverrides?.ToList());
        }

        /// <summary> Initializes a new instance of X12EnvelopeSettings. </summary>
        /// <param name="controlStandardsId"> The controls standards id. </param>
        /// <param name="useControlStandardsIdAsRepetitionCharacter"> The value indicating whether to use control standards id as repetition character. </param>
        /// <param name="senderApplicationId"> The sender application id. </param>
        /// <param name="receiverApplicationId"> The receiver application id. </param>
        /// <param name="controlVersionNumber"> The control version number. </param>
        /// <param name="interchangeControlNumberLowerBound"> The interchange  control number lower bound. </param>
        /// <param name="interchangeControlNumberUpperBound"> The interchange  control number upper bound. </param>
        /// <param name="rolloverInterchangeControlNumber"> The value indicating whether to rollover interchange control number. </param>
        /// <param name="enableDefaultGroupHeaders"> The value indicating whether to enable default group headers. </param>
        /// <param name="functionalGroupId"> The functional group id. </param>
        /// <param name="groupControlNumberLowerBound"> The group control number lower bound. </param>
        /// <param name="groupControlNumberUpperBound"> The group control number upper bound. </param>
        /// <param name="rolloverGroupControlNumber"> The value indicating whether to rollover group control number. </param>
        /// <param name="groupHeaderAgencyCode"> The group header agency code. </param>
        /// <param name="groupHeaderVersion"> The group header version. </param>
        /// <param name="transactionSetControlNumberLowerBound"> The transaction set control number lower bound. </param>
        /// <param name="transactionSetControlNumberUpperBound"> The transaction set control number upper bound. </param>
        /// <param name="rolloverTransactionSetControlNumber"> The value indicating whether to rollover transaction set control number. </param>
        /// <param name="transactionSetControlNumberPrefix"> The transaction set control number prefix. </param>
        /// <param name="transactionSetControlNumberSuffix"> The transaction set control number suffix. </param>
        /// <param name="overwriteExistingTransactionSetControlNumber"> The value indicating whether to overwrite existing transaction set control number. </param>
        /// <param name="groupHeaderDateFormat"> The group header date format. </param>
        /// <param name="groupHeaderTimeFormat"> The group header time format. </param>
        /// <param name="usageIndicator"> The usage indicator. </param>
        /// <returns> A new <see cref="Models.X12EnvelopeSettings"/> instance for mocking. </returns>
        public static X12EnvelopeSettings X12EnvelopeSettings(int controlStandardsId = default, bool useControlStandardsIdAsRepetitionCharacter = default, string senderApplicationId = null, string receiverApplicationId = null, string controlVersionNumber = null, int interchangeControlNumberLowerBound = default, int interchangeControlNumberUpperBound = default, bool rolloverInterchangeControlNumber = default, bool enableDefaultGroupHeaders = default, string functionalGroupId = null, int groupControlNumberLowerBound = default, int groupControlNumberUpperBound = default, bool rolloverGroupControlNumber = default, string groupHeaderAgencyCode = null, string groupHeaderVersion = null, int transactionSetControlNumberLowerBound = default, int transactionSetControlNumberUpperBound = default, bool rolloverTransactionSetControlNumber = default, string transactionSetControlNumberPrefix = null, string transactionSetControlNumberSuffix = null, bool overwriteExistingTransactionSetControlNumber = default, X12DateFormat groupHeaderDateFormat = default, X12TimeFormat groupHeaderTimeFormat = default, UsageIndicator usageIndicator = default)
        {
            return new X12EnvelopeSettings(controlStandardsId, useControlStandardsIdAsRepetitionCharacter, senderApplicationId, receiverApplicationId, controlVersionNumber, interchangeControlNumberLowerBound, interchangeControlNumberUpperBound, rolloverInterchangeControlNumber, enableDefaultGroupHeaders, functionalGroupId, groupControlNumberLowerBound, groupControlNumberUpperBound, rolloverGroupControlNumber, groupHeaderAgencyCode, groupHeaderVersion, transactionSetControlNumberLowerBound, transactionSetControlNumberUpperBound, rolloverTransactionSetControlNumber, transactionSetControlNumberPrefix, transactionSetControlNumberSuffix, overwriteExistingTransactionSetControlNumber, groupHeaderDateFormat, groupHeaderTimeFormat, usageIndicator);
        }

        /// <summary> Initializes a new instance of X12AcknowledgementSettings. </summary>
        /// <param name="needTechnicalAcknowledgement"> The value indicating whether technical acknowledgement is needed. </param>
        /// <param name="batchTechnicalAcknowledgement"> The value indicating whether to batch the technical acknowledgements. </param>
        /// <param name="needFunctionalAcknowledgement"> The value indicating whether functional acknowledgement is needed. </param>
        /// <param name="functionalAcknowledgementVersion"> The functional acknowledgement version. </param>
        /// <param name="batchFunctionalAcknowledgement"> The value indicating whether to batch functional acknowledgements. </param>
        /// <param name="needImplementationAcknowledgement"> The value indicating whether implementation acknowledgement is needed. </param>
        /// <param name="implementationAcknowledgementVersion"> The implementation acknowledgement version. </param>
        /// <param name="batchImplementationAcknowledgement"> The value indicating whether to batch implementation acknowledgements. </param>
        /// <param name="needLoopForValidMessages"> The value indicating whether a loop is needed for valid messages. </param>
        /// <param name="sendSynchronousAcknowledgement"> The value indicating whether to send synchronous acknowledgement. </param>
        /// <param name="acknowledgementControlNumberPrefix"> The acknowledgement control number prefix. </param>
        /// <param name="acknowledgementControlNumberSuffix"> The acknowledgement control number suffix. </param>
        /// <param name="acknowledgementControlNumberLowerBound"> The acknowledgement control number lower bound. </param>
        /// <param name="acknowledgementControlNumberUpperBound"> The acknowledgement control number upper bound. </param>
        /// <param name="rolloverAcknowledgementControlNumber"> The value indicating whether to rollover acknowledgement control number. </param>
        /// <returns> A new <see cref="Models.X12AcknowledgementSettings"/> instance for mocking. </returns>
        public static X12AcknowledgementSettings X12AcknowledgementSettings(bool needTechnicalAcknowledgement = default, bool batchTechnicalAcknowledgement = default, bool needFunctionalAcknowledgement = default, string functionalAcknowledgementVersion = null, bool batchFunctionalAcknowledgement = default, bool needImplementationAcknowledgement = default, string implementationAcknowledgementVersion = null, bool batchImplementationAcknowledgement = default, bool needLoopForValidMessages = default, bool sendSynchronousAcknowledgement = default, string acknowledgementControlNumberPrefix = null, string acknowledgementControlNumberSuffix = null, int acknowledgementControlNumberLowerBound = default, int acknowledgementControlNumberUpperBound = default, bool rolloverAcknowledgementControlNumber = default)
        {
            return new X12AcknowledgementSettings(needTechnicalAcknowledgement, batchTechnicalAcknowledgement, needFunctionalAcknowledgement, functionalAcknowledgementVersion, batchFunctionalAcknowledgement, needImplementationAcknowledgement, implementationAcknowledgementVersion, batchImplementationAcknowledgement, needLoopForValidMessages, sendSynchronousAcknowledgement, acknowledgementControlNumberPrefix, acknowledgementControlNumberSuffix, acknowledgementControlNumberLowerBound, acknowledgementControlNumberUpperBound, rolloverAcknowledgementControlNumber);
        }

        /// <summary> Initializes a new instance of X12SecuritySettings. </summary>
        /// <param name="authorizationQualifier"> The authorization qualifier. </param>
        /// <param name="authorizationValue"> The authorization value. </param>
        /// <param name="securityQualifier"> The security qualifier. </param>
        /// <param name="passwordValue"> The password value. </param>
        /// <returns> A new <see cref="Models.X12SecuritySettings"/> instance for mocking. </returns>
        public static X12SecuritySettings X12SecuritySettings(string authorizationQualifier = null, string authorizationValue = null, string securityQualifier = null, string passwordValue = null)
        {
            return new X12SecuritySettings(authorizationQualifier, authorizationValue, securityQualifier, passwordValue);
        }

        /// <summary> Initializes a new instance of X12EnvelopeOverride. </summary>
        /// <param name="targetNamespace"> The target namespace on which this envelope settings has to be applied. </param>
        /// <param name="protocolVersion"> The protocol version on which this envelope settings has to be applied. </param>
        /// <param name="messageId"> The message id on which this envelope settings has to be applied. </param>
        /// <param name="responsibleAgencyCode"> The responsible agency code. </param>
        /// <param name="headerVersion"> The header version. </param>
        /// <param name="senderApplicationId"> The sender application id. </param>
        /// <param name="receiverApplicationId"> The receiver application id. </param>
        /// <param name="functionalIdentifierCode"> The functional identifier code. </param>
        /// <param name="dateFormat"> The date format. </param>
        /// <param name="timeFormat"> The time format. </param>
        /// <returns> A new <see cref="Models.X12EnvelopeOverride"/> instance for mocking. </returns>
        public static X12EnvelopeOverride X12EnvelopeOverride(string targetNamespace = null, string protocolVersion = null, string messageId = null, string responsibleAgencyCode = null, string headerVersion = null, string senderApplicationId = null, string receiverApplicationId = null, string functionalIdentifierCode = null, X12DateFormat dateFormat = default, X12TimeFormat timeFormat = default)
        {
            return new X12EnvelopeOverride(targetNamespace, protocolVersion, messageId, responsibleAgencyCode, headerVersion, senderApplicationId, receiverApplicationId, functionalIdentifierCode, dateFormat, timeFormat);
        }

        /// <summary> Initializes a new instance of X12SchemaReference. </summary>
        /// <param name="messageId"> The message id. </param>
        /// <param name="senderApplicationId"> The sender application id. </param>
        /// <param name="schemaVersion"> The schema version. </param>
        /// <param name="schemaName"> The schema name. </param>
        /// <returns> A new <see cref="Models.X12SchemaReference"/> instance for mocking. </returns>
        public static X12SchemaReference X12SchemaReference(string messageId = null, string senderApplicationId = null, string schemaVersion = null, string schemaName = null)
        {
            return new X12SchemaReference(messageId, senderApplicationId, schemaVersion, schemaName);
        }

        /// <summary> Initializes a new instance of X12DelimiterOverrides. </summary>
        /// <param name="protocolVersion"> The protocol version. </param>
        /// <param name="messageId"> The message id. </param>
        /// <param name="dataElementSeparator"> The data element separator. </param>
        /// <param name="componentSeparator"> The component separator. </param>
        /// <param name="segmentTerminator"> The segment terminator. </param>
        /// <param name="segmentTerminatorSuffix"> The segment terminator suffix. </param>
        /// <param name="replaceCharacter"> The replacement character. </param>
        /// <param name="replaceSeparatorsInPayload"> The value indicating whether to replace separators in payload. </param>
        /// <param name="targetNamespace"> The target namespace on which this delimiter settings has to be applied. </param>
        /// <returns> A new <see cref="Models.X12DelimiterOverrides"/> instance for mocking. </returns>
        public static X12DelimiterOverrides X12DelimiterOverrides(string protocolVersion = null, string messageId = null, int dataElementSeparator = default, int componentSeparator = default, int segmentTerminator = default, SegmentTerminatorSuffix segmentTerminatorSuffix = default, int replaceCharacter = default, bool replaceSeparatorsInPayload = default, string targetNamespace = null)
        {
            return new X12DelimiterOverrides(protocolVersion, messageId, dataElementSeparator, componentSeparator, segmentTerminator, segmentTerminatorSuffix, replaceCharacter, replaceSeparatorsInPayload, targetNamespace);
        }

        /// <summary> Initializes a new instance of EdifactProtocolSettings. </summary>
        /// <param name="validationSettings"> The EDIFACT validation settings. </param>
        /// <param name="framingSettings"> The EDIFACT framing settings. </param>
        /// <param name="envelopeSettings"> The EDIFACT envelope settings. </param>
        /// <param name="acknowledgementSettings"> The EDIFACT acknowledgement settings. </param>
        /// <param name="messageFilterType"> The EDIFACT message filter. </param>
        /// <param name="processingSettings"> The EDIFACT processing Settings. </param>
        /// <param name="envelopeOverrides"> The EDIFACT envelope override settings. </param>
        /// <param name="messageFilterList"> The EDIFACT message filter list. </param>
        /// <param name="schemaReferences"> The EDIFACT schema references. </param>
        /// <param name="validationOverrides"> The EDIFACT validation override settings. </param>
        /// <param name="edifactDelimiterOverrides"> The EDIFACT delimiter override settings. </param>
        /// <returns> A new <see cref="Models.EdifactProtocolSettings"/> instance for mocking. </returns>
        public static EdifactProtocolSettings EdifactProtocolSettings(EdifactValidationSettings validationSettings = null, EdifactFramingSettings framingSettings = null, EdifactEnvelopeSettings envelopeSettings = null, EdifactAcknowledgementSettings acknowledgementSettings = null, MessageFilterType? messageFilterType = null, EdifactProcessingSettings processingSettings = null, IEnumerable<EdifactEnvelopeOverride> envelopeOverrides = null, IEnumerable<EdifactMessageIdentifier> messageFilterList = null, IEnumerable<EdifactSchemaReference> schemaReferences = null, IEnumerable<EdifactValidationOverride> validationOverrides = null, IEnumerable<EdifactDelimiterOverride> edifactDelimiterOverrides = null)
        {
            envelopeOverrides ??= new List<EdifactEnvelopeOverride>();
            messageFilterList ??= new List<EdifactMessageIdentifier>();
            schemaReferences ??= new List<EdifactSchemaReference>();
            validationOverrides ??= new List<EdifactValidationOverride>();
            edifactDelimiterOverrides ??= new List<EdifactDelimiterOverride>();

            return new EdifactProtocolSettings(validationSettings, framingSettings, envelopeSettings, acknowledgementSettings, messageFilterType.HasValue ? new EdifactMessageFilter(messageFilterType.Value) : null, processingSettings, envelopeOverrides?.ToList(), messageFilterList?.ToList(), schemaReferences?.ToList(), validationOverrides?.ToList(), edifactDelimiterOverrides?.ToList());
        }

        /// <summary> Initializes a new instance of EdifactFramingSettings. </summary>
        /// <param name="serviceCodeListDirectoryVersion"> The service code list directory version. </param>
        /// <param name="characterEncoding"> The character encoding. </param>
        /// <param name="protocolVersion"> The protocol version. </param>
        /// <param name="dataElementSeparator"> The data element separator. </param>
        /// <param name="componentSeparator"> The component separator. </param>
        /// <param name="segmentTerminator"> The segment terminator. </param>
        /// <param name="releaseIndicator"> The release indicator. </param>
        /// <param name="repetitionSeparator"> The repetition separator. </param>
        /// <param name="characterSet"> The EDIFACT frame setting characterSet. </param>
        /// <param name="decimalPointIndicator"> The EDIFACT frame setting decimal indicator. </param>
        /// <param name="segmentTerminatorSuffix"> The EDIFACT frame setting segment terminator suffix. </param>
        /// <returns> A new <see cref="Models.EdifactFramingSettings"/> instance for mocking. </returns>
        public static EdifactFramingSettings EdifactFramingSettings(string serviceCodeListDirectoryVersion = null, string characterEncoding = null, int protocolVersion = default, int dataElementSeparator = default, int componentSeparator = default, int segmentTerminator = default, int releaseIndicator = default, int repetitionSeparator = default, EdifactCharacterSet characterSet = default, EdifactDecimalIndicator decimalPointIndicator = default, SegmentTerminatorSuffix segmentTerminatorSuffix = default)
        {
            return new EdifactFramingSettings(serviceCodeListDirectoryVersion, characterEncoding, protocolVersion, dataElementSeparator, componentSeparator, segmentTerminator, releaseIndicator, repetitionSeparator, characterSet, decimalPointIndicator, segmentTerminatorSuffix);
        }

        /// <summary> Initializes a new instance of EdifactEnvelopeSettings. </summary>
        /// <param name="groupAssociationAssignedCode"> The group association assigned code. </param>
        /// <param name="communicationAgreementId"> The communication agreement id. </param>
        /// <param name="applyDelimiterStringAdvice"> The value indicating whether to apply delimiter string advice. </param>
        /// <param name="createGroupingSegments"> The value indicating whether to create grouping segments. </param>
        /// <param name="enableDefaultGroupHeaders"> The value indicating whether to enable default group headers. </param>
        /// <param name="recipientReferencePasswordValue"> The recipient reference password value. </param>
        /// <param name="recipientReferencePasswordQualifier"> The recipient reference password qualifier. </param>
        /// <param name="applicationReferenceId"> The application reference id. </param>
        /// <param name="processingPriorityCode"> The processing priority code. </param>
        /// <param name="interchangeControlNumberLowerBound"> The interchange control number lower bound. </param>
        /// <param name="interchangeControlNumberUpperBound"> The interchange control number upper bound. </param>
        /// <param name="rolloverInterchangeControlNumber"> The value indicating whether to rollover interchange control number. </param>
        /// <param name="interchangeControlNumberPrefix"> The interchange control number prefix. </param>
        /// <param name="interchangeControlNumberSuffix"> The interchange control number suffix. </param>
        /// <param name="senderReverseRoutingAddress"> The sender reverse routing address. </param>
        /// <param name="receiverReverseRoutingAddress"> The receiver reverse routing address. </param>
        /// <param name="functionalGroupId"> The functional group id. </param>
        /// <param name="groupControllingAgencyCode"> The group controlling agency code. </param>
        /// <param name="groupMessageVersion"> The group message version. </param>
        /// <param name="groupMessageRelease"> The group message release. </param>
        /// <param name="groupControlNumberLowerBound"> The group control number lower bound. </param>
        /// <param name="groupControlNumberUpperBound"> The group control number upper bound. </param>
        /// <param name="rolloverGroupControlNumber"> The value indicating whether to rollover group control number. </param>
        /// <param name="groupControlNumberPrefix"> The group control number prefix. </param>
        /// <param name="groupControlNumberSuffix"> The group control number suffix. </param>
        /// <param name="groupApplicationReceiverQualifier"> The group application receiver qualifier. </param>
        /// <param name="groupApplicationReceiverId"> The group application receiver id. </param>
        /// <param name="groupApplicationSenderQualifier"> The group application sender qualifier. </param>
        /// <param name="groupApplicationSenderId"> The group application sender id. </param>
        /// <param name="groupApplicationPassword"> The group application password. </param>
        /// <param name="overwriteExistingTransactionSetControlNumber"> The value indicating whether to overwrite existing transaction set control number. </param>
        /// <param name="transactionSetControlNumberPrefix"> The transaction set control number prefix. </param>
        /// <param name="transactionSetControlNumberSuffix"> The transaction set control number suffix. </param>
        /// <param name="transactionSetControlNumberLowerBound"> The transaction set control number lower bound. </param>
        /// <param name="transactionSetControlNumberUpperBound"> The transaction set control number upper bound. </param>
        /// <param name="rolloverTransactionSetControlNumber"> The value indicating whether to rollover transaction set control number. </param>
        /// <param name="isTestInterchange"> The value indicating whether the message is a test interchange. </param>
        /// <param name="senderInternalIdentification"> The sender internal identification. </param>
        /// <param name="senderInternalSubIdentification"> The sender internal sub identification. </param>
        /// <param name="receiverInternalIdentification"> The receiver internal identification. </param>
        /// <param name="receiverInternalSubIdentification"> The receiver internal sub identification. </param>
        /// <returns> A new <see cref="Models.EdifactEnvelopeSettings"/> instance for mocking. </returns>
        public static EdifactEnvelopeSettings EdifactEnvelopeSettings(string groupAssociationAssignedCode = null, string communicationAgreementId = null, bool applyDelimiterStringAdvice = default, bool createGroupingSegments = default, bool enableDefaultGroupHeaders = default, string recipientReferencePasswordValue = null, string recipientReferencePasswordQualifier = null, string applicationReferenceId = null, string processingPriorityCode = null, long interchangeControlNumberLowerBound = default, long interchangeControlNumberUpperBound = default, bool rolloverInterchangeControlNumber = default, string interchangeControlNumberPrefix = null, string interchangeControlNumberSuffix = null, string senderReverseRoutingAddress = null, string receiverReverseRoutingAddress = null, string functionalGroupId = null, string groupControllingAgencyCode = null, string groupMessageVersion = null, string groupMessageRelease = null, long groupControlNumberLowerBound = default, long groupControlNumberUpperBound = default, bool rolloverGroupControlNumber = default, string groupControlNumberPrefix = null, string groupControlNumberSuffix = null, string groupApplicationReceiverQualifier = null, string groupApplicationReceiverId = null, string groupApplicationSenderQualifier = null, string groupApplicationSenderId = null, string groupApplicationPassword = null, bool overwriteExistingTransactionSetControlNumber = default, string transactionSetControlNumberPrefix = null, string transactionSetControlNumberSuffix = null, long transactionSetControlNumberLowerBound = default, long transactionSetControlNumberUpperBound = default, bool rolloverTransactionSetControlNumber = default, bool isTestInterchange = default, string senderInternalIdentification = null, string senderInternalSubIdentification = null, string receiverInternalIdentification = null, string receiverInternalSubIdentification = null)
        {
            return new EdifactEnvelopeSettings(groupAssociationAssignedCode, communicationAgreementId, applyDelimiterStringAdvice, createGroupingSegments, enableDefaultGroupHeaders, recipientReferencePasswordValue, recipientReferencePasswordQualifier, applicationReferenceId, processingPriorityCode, interchangeControlNumberLowerBound, interchangeControlNumberUpperBound, rolloverInterchangeControlNumber, interchangeControlNumberPrefix, interchangeControlNumberSuffix, senderReverseRoutingAddress, receiverReverseRoutingAddress, functionalGroupId, groupControllingAgencyCode, groupMessageVersion, groupMessageRelease, groupControlNumberLowerBound, groupControlNumberUpperBound, rolloverGroupControlNumber, groupControlNumberPrefix, groupControlNumberSuffix, groupApplicationReceiverQualifier, groupApplicationReceiverId, groupApplicationSenderQualifier, groupApplicationSenderId, groupApplicationPassword, overwriteExistingTransactionSetControlNumber, transactionSetControlNumberPrefix, transactionSetControlNumberSuffix, transactionSetControlNumberLowerBound, transactionSetControlNumberUpperBound, rolloverTransactionSetControlNumber, isTestInterchange, senderInternalIdentification, senderInternalSubIdentification, receiverInternalIdentification, receiverInternalSubIdentification);
        }

        /// <summary> Initializes a new instance of EdifactAcknowledgementSettings. </summary>
        /// <param name="needTechnicalAcknowledgement"> The value indicating whether technical acknowledgement is needed. </param>
        /// <param name="batchTechnicalAcknowledgement"> The value indicating whether to batch the technical acknowledgements. </param>
        /// <param name="needFunctionalAcknowledgement"> The value indicating whether functional acknowledgement is needed. </param>
        /// <param name="batchFunctionalAcknowledgement"> The value indicating whether to batch functional acknowledgements. </param>
        /// <param name="needLoopForValidMessages"> The value indicating whether a loop is needed for valid messages. </param>
        /// <param name="sendSynchronousAcknowledgement"> The value indicating whether to send synchronous acknowledgement. </param>
        /// <param name="acknowledgementControlNumberPrefix"> The acknowledgement control number prefix. </param>
        /// <param name="acknowledgementControlNumberSuffix"> The acknowledgement control number suffix. </param>
        /// <param name="acknowledgementControlNumberLowerBound"> The acknowledgement control number lower bound. </param>
        /// <param name="acknowledgementControlNumberUpperBound"> The acknowledgement control number upper bound. </param>
        /// <param name="rolloverAcknowledgementControlNumber"> The value indicating whether to rollover acknowledgement control number. </param>
        /// <returns> A new <see cref="Models.EdifactAcknowledgementSettings"/> instance for mocking. </returns>
        public static EdifactAcknowledgementSettings EdifactAcknowledgementSettings(bool needTechnicalAcknowledgement = default, bool batchTechnicalAcknowledgement = default, bool needFunctionalAcknowledgement = default, bool batchFunctionalAcknowledgement = default, bool needLoopForValidMessages = default, bool sendSynchronousAcknowledgement = default, string acknowledgementControlNumberPrefix = null, string acknowledgementControlNumberSuffix = null, int acknowledgementControlNumberLowerBound = default, int acknowledgementControlNumberUpperBound = default, bool rolloverAcknowledgementControlNumber = default)
        {
            return new EdifactAcknowledgementSettings(needTechnicalAcknowledgement, batchTechnicalAcknowledgement, needFunctionalAcknowledgement, batchFunctionalAcknowledgement, needLoopForValidMessages, sendSynchronousAcknowledgement, acknowledgementControlNumberPrefix, acknowledgementControlNumberSuffix, acknowledgementControlNumberLowerBound, acknowledgementControlNumberUpperBound, rolloverAcknowledgementControlNumber);
        }

        /// <summary> Initializes a new instance of EdifactEnvelopeOverride. </summary>
        /// <param name="messageId"> The message id on which this envelope settings has to be applied. </param>
        /// <param name="messageVersion"> The message version on which this envelope settings has to be applied. </param>
        /// <param name="messageRelease"> The message release version on which this envelope settings has to be applied. </param>
        /// <param name="messageAssociationAssignedCode"> The message association assigned code. </param>
        /// <param name="targetNamespace"> The target namespace on which this envelope settings has to be applied. </param>
        /// <param name="functionalGroupId"> The functional group id. </param>
        /// <param name="senderApplicationQualifier"> The sender application qualifier. </param>
        /// <param name="senderApplicationId"> The sender application id. </param>
        /// <param name="receiverApplicationQualifier"> The receiver application qualifier. </param>
        /// <param name="receiverApplicationId"> The receiver application id. </param>
        /// <param name="controllingAgencyCode"> The controlling agency code. </param>
        /// <param name="groupHeaderMessageVersion"> The group header message version. </param>
        /// <param name="groupHeaderMessageRelease"> The group header message release. </param>
        /// <param name="associationAssignedCode"> The association assigned code. </param>
        /// <param name="applicationPassword"> The application password. </param>
        /// <returns> A new <see cref="Models.EdifactEnvelopeOverride"/> instance for mocking. </returns>
        public static EdifactEnvelopeOverride EdifactEnvelopeOverride(string messageId = null, string messageVersion = null, string messageRelease = null, string messageAssociationAssignedCode = null, string targetNamespace = null, string functionalGroupId = null, string senderApplicationQualifier = null, string senderApplicationId = null, string receiverApplicationQualifier = null, string receiverApplicationId = null, string controllingAgencyCode = null, string groupHeaderMessageVersion = null, string groupHeaderMessageRelease = null, string associationAssignedCode = null, string applicationPassword = null)
        {
            return new EdifactEnvelopeOverride(messageId, messageVersion, messageRelease, messageAssociationAssignedCode, targetNamespace, functionalGroupId, senderApplicationQualifier, senderApplicationId, receiverApplicationQualifier, receiverApplicationId, controllingAgencyCode, groupHeaderMessageVersion, groupHeaderMessageRelease, associationAssignedCode, applicationPassword);
        }

        /// <summary> Initializes a new instance of EdifactSchemaReference. </summary>
        /// <param name="messageId"> The message id. </param>
        /// <param name="messageVersion"> The message version. </param>
        /// <param name="messageRelease"> The message release version. </param>
        /// <param name="senderApplicationId"> The sender application id. </param>
        /// <param name="senderApplicationQualifier"> The sender application qualifier. </param>
        /// <param name="associationAssignedCode"> The association assigned code. </param>
        /// <param name="schemaName"> The schema name. </param>
        /// <returns> A new <see cref="Models.EdifactSchemaReference"/> instance for mocking. </returns>
        public static EdifactSchemaReference EdifactSchemaReference(string messageId = null, string messageVersion = null, string messageRelease = null, string senderApplicationId = null, string senderApplicationQualifier = null, string associationAssignedCode = null, string schemaName = null)
        {
            return new EdifactSchemaReference(messageId, messageVersion, messageRelease, senderApplicationId, senderApplicationQualifier, associationAssignedCode, schemaName);
        }

        /// <summary> Initializes a new instance of EdifactDelimiterOverride. </summary>
        /// <param name="messageId"> The message id. </param>
        /// <param name="messageVersion"> The message version. </param>
        /// <param name="messageRelease"> The message release. </param>
        /// <param name="dataElementSeparator"> The data element separator. </param>
        /// <param name="componentSeparator"> The component separator. </param>
        /// <param name="segmentTerminator"> The segment terminator. </param>
        /// <param name="repetitionSeparator"> The repetition separator. </param>
        /// <param name="segmentTerminatorSuffix"> The segment terminator suffix. </param>
        /// <param name="decimalPointIndicator"> The decimal point indicator. </param>
        /// <param name="releaseIndicator"> The release indicator. </param>
        /// <param name="messageAssociationAssignedCode"> The message association assigned code. </param>
        /// <param name="targetNamespace"> The target namespace on which this delimiter settings has to be applied. </param>
        /// <returns> A new <see cref="Models.EdifactDelimiterOverride"/> instance for mocking. </returns>
        public static EdifactDelimiterOverride EdifactDelimiterOverride(string messageId = null, string messageVersion = null, string messageRelease = null, int dataElementSeparator = default, int componentSeparator = default, int segmentTerminator = default, int repetitionSeparator = default, SegmentTerminatorSuffix segmentTerminatorSuffix = default, EdifactDecimalIndicator decimalPointIndicator = default, int releaseIndicator = default, string messageAssociationAssignedCode = null, string targetNamespace = null)
        {
            return new EdifactDelimiterOverride(messageId, messageVersion, messageRelease, dataElementSeparator, componentSeparator, segmentTerminator, repetitionSeparator, segmentTerminatorSuffix, decimalPointIndicator, releaseIndicator, messageAssociationAssignedCode, targetNamespace);
        }

        /// <summary> Initializes a new instance of IntegrationAccountCertificateData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="createdOn"> The created time. </param>
        /// <param name="changedOn"> The changed time. </param>
        /// <param name="metadata"> The metadata. </param>
        /// <param name="key"> The key details in the key vault. </param>
        /// <param name="publicCertificate"> The public certificate. </param>
        /// <returns> A new <see cref="Logic.IntegrationAccountCertificateData"/> instance for mocking. </returns>
        public static IntegrationAccountCertificateData IntegrationAccountCertificateData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, DateTimeOffset? createdOn = null, DateTimeOffset? changedOn = null, BinaryData metadata = null, IntegrationAccountKeyVaultKeyReference key = null, BinaryData publicCertificate = null)
        {
            tags ??= new Dictionary<string, string>();

            return new IntegrationAccountCertificateData(id, name, resourceType, systemData, tags, location, createdOn, changedOn, metadata, key, publicCertificate);
        }

        /// <summary> Initializes a new instance of IntegrationAccountKeyVaultKeyReference. </summary>
        /// <param name="keyName"> The private key name in key vault. </param>
        /// <param name="keyVersion"> The private key version in key vault. </param>
        /// <param name="resourceId"> The resource id. </param>
        /// <param name="resourceName"> The resource name. </param>
        /// <param name="resourceType"> The resource type. </param>
        /// <returns> A new <see cref="Models.IntegrationAccountKeyVaultKeyReference"/> instance for mocking. </returns>
        public static IntegrationAccountKeyVaultKeyReference IntegrationAccountKeyVaultKeyReference(string keyName = null, string keyVersion = null, ResourceIdentifier resourceId = null, string resourceName = null, ResourceType? resourceType = null)
        {
            return new IntegrationAccountKeyVaultKeyReference(keyName, keyVersion, resourceId, resourceName, resourceType);
        }

        /// <summary> Initializes a new instance of IntegrationAccountSessionData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="createdOn"> The created time. </param>
        /// <param name="changedOn"> The changed time. </param>
        /// <param name="content"> The session content. </param>
        /// <returns> A new <see cref="Logic.IntegrationAccountSessionData"/> instance for mocking. </returns>
        public static IntegrationAccountSessionData IntegrationAccountSessionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, DateTimeOffset? createdOn = null, DateTimeOffset? changedOn = null, BinaryData content = null)
        {
            tags ??= new Dictionary<string, string>();

            return new IntegrationAccountSessionData(id, name, resourceType, systemData, tags, location, createdOn, changedOn, content);
        }

        /// <summary> Initializes a new instance of IntegrationServiceEnvironmentData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The integration service environment properties. </param>
        /// <param name="sku"> The sku. </param>
        /// <param name="identity"> Managed service identity properties. Current supported identity types: SystemAssigned, UserAssigned, None. </param>
        /// <returns> A new <see cref="Logic.IntegrationServiceEnvironmentData"/> instance for mocking. </returns>
        public static IntegrationServiceEnvironmentData IntegrationServiceEnvironmentData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, IntegrationServiceEnvironmentProperties properties = null, IntegrationServiceEnvironmentSku sku = null, ManagedServiceIdentity identity = null)
        {
            tags ??= new Dictionary<string, string>();

            return new IntegrationServiceEnvironmentData(id, name, resourceType, systemData, tags, location, properties, sku, identity);
        }

        /// <summary> Initializes a new instance of IntegrationServiceEnvironmentProperties. </summary>
        /// <param name="provisioningState"> The provisioning state. </param>
        /// <param name="state"> The integration service environment state. </param>
        /// <param name="integrationServiceEnvironmentId"> Gets the tracking id. </param>
        /// <param name="endpointsConfiguration"> The endpoints configuration. </param>
        /// <param name="networkConfiguration"> The network configuration. </param>
        /// <param name="encryptionKeyReference"> The encryption configuration. </param>
        /// <returns> A new <see cref="Models.IntegrationServiceEnvironmentProperties"/> instance for mocking. </returns>
        public static IntegrationServiceEnvironmentProperties IntegrationServiceEnvironmentProperties(LogicWorkflowProvisioningState? provisioningState = null, LogicWorkflowState? state = null, string integrationServiceEnvironmentId = null, FlowEndpointsConfiguration endpointsConfiguration = null, IntegrationServiceNetworkConfiguration networkConfiguration = null, IntegrationServiceEnvironmenEncryptionKeyReference encryptionKeyReference = null)
        {
            return new IntegrationServiceEnvironmentProperties(provisioningState, state, integrationServiceEnvironmentId, endpointsConfiguration, networkConfiguration, encryptionKeyReference != null ? new IntegrationServiceEnvironmenEncryptionConfiguration(encryptionKeyReference) : null);
        }

        /// <summary> Initializes a new instance of IntegrationServiceNetworkConfiguration. </summary>
        /// <param name="virtualNetworkAddressSpace"> Gets the virtual network address space. </param>
        /// <param name="endpointType"> The access endpoint. </param>
        /// <param name="subnets"> The subnets. </param>
        /// <returns> A new <see cref="Models.IntegrationServiceNetworkConfiguration"/> instance for mocking. </returns>
        public static IntegrationServiceNetworkConfiguration IntegrationServiceNetworkConfiguration(string virtualNetworkAddressSpace = null, IntegrationServiceEnvironmentAccessEndpointType? endpointType = null, IEnumerable<LogicResourceReference> subnets = null)
        {
            subnets ??= new List<LogicResourceReference>();

            return new IntegrationServiceNetworkConfiguration(virtualNetworkAddressSpace, endpointType != null ? new IntegrationServiceEnvironmentAccessEndpoint(endpointType) : null, subnets?.ToList());
        }

        /// <summary> Initializes a new instance of IntegrationServiceEnvironmenEncryptionKeyReference. </summary>
        /// <param name="keyVault"> The key vault reference. </param>
        /// <param name="keyName"> Gets the key name in the Key Vault. </param>
        /// <param name="keyVersion"> Gets the version of the key specified in the keyName property. </param>
        /// <returns> A new <see cref="Models.IntegrationServiceEnvironmenEncryptionKeyReference"/> instance for mocking. </returns>
        public static IntegrationServiceEnvironmenEncryptionKeyReference IntegrationServiceEnvironmenEncryptionKeyReference(LogicResourceReference keyVault = null, string keyName = null, string keyVersion = null)
        {
            return new IntegrationServiceEnvironmenEncryptionKeyReference(keyVault, keyName, keyVersion);
        }

        /// <summary> Initializes a new instance of IntegrationServiceEnvironmentSku. </summary>
        /// <param name="name"> The sku name. </param>
        /// <param name="capacity"> The sku capacity. </param>
        /// <returns> A new <see cref="Models.IntegrationServiceEnvironmentSku"/> instance for mocking. </returns>
        public static IntegrationServiceEnvironmentSku IntegrationServiceEnvironmentSku(IntegrationServiceEnvironmentSkuName? name = null, int? capacity = null)
        {
            return new IntegrationServiceEnvironmentSku(name, capacity);
        }

        /// <summary> Initializes a new instance of IntegrationServiceEnvironmentSkuDefinition. </summary>
        /// <param name="resourceType"> The resource type. </param>
        /// <param name="sku"> The sku. </param>
        /// <param name="capacity"> The sku capacity. </param>
        /// <returns> A new <see cref="Models.IntegrationServiceEnvironmentSkuDefinition"/> instance for mocking. </returns>
        public static IntegrationServiceEnvironmentSkuDefinition IntegrationServiceEnvironmentSkuDefinition(ResourceType? resourceType = null, IntegrationServiceEnvironmentSkuDefinitionSku sku = null, IntegrationServiceEnvironmentSkuCapacity capacity = null)
        {
            return new IntegrationServiceEnvironmentSkuDefinition(resourceType, sku, capacity);
        }

        /// <summary> Initializes a new instance of IntegrationServiceEnvironmentSkuDefinitionSku. </summary>
        /// <param name="name"> The sku name. </param>
        /// <param name="tier"> The sku tier. </param>
        /// <returns> A new <see cref="Models.IntegrationServiceEnvironmentSkuDefinitionSku"/> instance for mocking. </returns>
        public static IntegrationServiceEnvironmentSkuDefinitionSku IntegrationServiceEnvironmentSkuDefinitionSku(IntegrationServiceEnvironmentSkuName? name = null, string tier = null)
        {
            return new IntegrationServiceEnvironmentSkuDefinitionSku(name, tier);
        }

        /// <summary> Initializes a new instance of IntegrationServiceEnvironmentSkuCapacity. </summary>
        /// <param name="minimum"> The minimum capacity. </param>
        /// <param name="maximum"> The maximum capacity. </param>
        /// <param name="default"> The default capacity. </param>
        /// <param name="scaleType"> The sku scale type. </param>
        /// <returns> A new <see cref="Models.IntegrationServiceEnvironmentSkuCapacity"/> instance for mocking. </returns>
        public static IntegrationServiceEnvironmentSkuCapacity IntegrationServiceEnvironmentSkuCapacity(int? minimum = null, int? maximum = null, int? @default = null, IntegrationServiceEnvironmentSkuScaleType? scaleType = null)
        {
            return new IntegrationServiceEnvironmentSkuCapacity(minimum, maximum, @default, scaleType);
        }

        /// <summary> Initializes a new instance of IntegrationServiceEnvironmentSubnetNetworkHealth. </summary>
        /// <param name="outboundNetworkDependencies"> The outbound network dependencies. </param>
        /// <param name="outboundNetworkHealth"> The integration service environment network health. </param>
        /// <param name="networkDependencyHealthState"> The integration service environment network health state. </param>
        /// <returns> A new <see cref="Models.IntegrationServiceEnvironmentSubnetNetworkHealth"/> instance for mocking. </returns>
        public static IntegrationServiceEnvironmentSubnetNetworkHealth IntegrationServiceEnvironmentSubnetNetworkHealth(IEnumerable<IntegrationServiceEnvironmentNetworkDependency> outboundNetworkDependencies = null, IntegrationServiceEnvironmentNetworkDependencyHealth outboundNetworkHealth = null, IntegrationServiceEnvironmentNetworkEndPointAccessibilityState networkDependencyHealthState = default)
        {
            outboundNetworkDependencies ??= new List<IntegrationServiceEnvironmentNetworkDependency>();

            return new IntegrationServiceEnvironmentSubnetNetworkHealth(outboundNetworkDependencies?.ToList(), outboundNetworkHealth, networkDependencyHealthState);
        }

        /// <summary> Initializes a new instance of IntegrationServiceEnvironmentNetworkDependency. </summary>
        /// <param name="category"> The network dependency category type. </param>
        /// <param name="displayName"> The display name. </param>
        /// <param name="endpoints"> The endpoints. </param>
        /// <returns> A new <see cref="Models.IntegrationServiceEnvironmentNetworkDependency"/> instance for mocking. </returns>
        public static IntegrationServiceEnvironmentNetworkDependency IntegrationServiceEnvironmentNetworkDependency(IntegrationServiceEnvironmentNetworkDependencyCategoryType? category = null, string displayName = null, IEnumerable<IntegrationServiceEnvironmentNetworkEndpoint> endpoints = null)
        {
            endpoints ??= new List<IntegrationServiceEnvironmentNetworkEndpoint>();

            return new IntegrationServiceEnvironmentNetworkDependency(category, displayName, endpoints?.ToList());
        }

        /// <summary> Initializes a new instance of IntegrationServiceEnvironmentNetworkEndpoint. </summary>
        /// <param name="accessibility"> The accessibility state. </param>
        /// <param name="domainName"> The domain name. </param>
        /// <param name="ports"> The ports. </param>
        /// <returns> A new <see cref="Models.IntegrationServiceEnvironmentNetworkEndpoint"/> instance for mocking. </returns>
        public static IntegrationServiceEnvironmentNetworkEndpoint IntegrationServiceEnvironmentNetworkEndpoint(IntegrationServiceEnvironmentNetworkEndPointAccessibilityState? accessibility = null, string domainName = null, IEnumerable<string> ports = null)
        {
            ports ??= new List<string>();

            return new IntegrationServiceEnvironmentNetworkEndpoint(accessibility, domainName, ports?.ToList());
        }

        /// <summary> Initializes a new instance of IntegrationServiceEnvironmentNetworkDependencyHealth. </summary>
        /// <param name="error"> The error if any occurred during the operation. </param>
        /// <param name="state"> The network dependency health state. </param>
        /// <returns> A new <see cref="Models.IntegrationServiceEnvironmentNetworkDependencyHealth"/> instance for mocking. </returns>
        public static IntegrationServiceEnvironmentNetworkDependencyHealth IntegrationServiceEnvironmentNetworkDependencyHealth(IntegrationServiceErrorInfo error = null, IntegrationServiceEnvironmentNetworkDependencyHealthState? state = null)
        {
            return new IntegrationServiceEnvironmentNetworkDependencyHealth(error, state);
        }

        /// <summary> Initializes a new instance of IntegrationServiceErrorInfo. </summary>
        /// <param name="code"> The error code. </param>
        /// <param name="message"> The error message. </param>
        /// <param name="details"> The error message details. </param>
        /// <param name="innerError"> The inner error. </param>
        /// <returns> A new <see cref="Models.IntegrationServiceErrorInfo"/> instance for mocking. </returns>
        public static IntegrationServiceErrorInfo IntegrationServiceErrorInfo(IntegrationServiceErrorCode code = default, string message = null, IEnumerable<IntegrationServiceErrorInfo> details = null, BinaryData innerError = null)
        {
            details ??= new List<IntegrationServiceErrorInfo>();

            return new IntegrationServiceErrorInfo(code, message, details?.ToList(), innerError);
        }

        /// <summary> Initializes a new instance of IntegrationServiceEnvironmentManagedApiData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="namePropertiesName"> The name. </param>
        /// <param name="connectionParameters"> The connection parameters. </param>
        /// <param name="metadata"> The metadata. </param>
        /// <param name="runtimeUris"> The runtime urls. </param>
        /// <param name="generalInformation"> The api general information. </param>
        /// <param name="capabilities"> The capabilities. </param>
        /// <param name="serviceUri"> The backend service. </param>
        /// <param name="policies"> The policies for the API. </param>
        /// <param name="apiDefinitionUri"> The API definition. </param>
        /// <param name="apiDefinitions"> The api definitions. </param>
        /// <param name="integrationServiceEnvironment"> The integration service environment reference. </param>
        /// <param name="provisioningState"> The provisioning state. </param>
        /// <param name="category"> The category. </param>
        /// <param name="deploymentParametersContentLinkDefinition"> The integration service environment managed api deployment parameters. </param>
        /// <returns> A new <see cref="Logic.IntegrationServiceEnvironmentManagedApiData"/> instance for mocking. </returns>
        public static IntegrationServiceEnvironmentManagedApiData IntegrationServiceEnvironmentManagedApiData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string namePropertiesName = null, IReadOnlyDictionary<string, BinaryData> connectionParameters = null, LogicApiResourceMetadata metadata = null, IEnumerable<Uri> runtimeUris = null, LogicApiResourceGeneralInformation generalInformation = null, IEnumerable<string> capabilities = null, Uri serviceUri = null, LogicApiResourcePolicies policies = null, Uri apiDefinitionUri = null, LogicApiResourceDefinitions apiDefinitions = null, LogicResourceReference integrationServiceEnvironment = null, LogicWorkflowProvisioningState? provisioningState = null, LogicApiTier? category = null, LogicContentLink deploymentParametersContentLinkDefinition = null)
        {
            tags ??= new Dictionary<string, string>();
            connectionParameters ??= new Dictionary<string, BinaryData>();
            runtimeUris ??= new List<Uri>();
            capabilities ??= new List<string>();

            return new IntegrationServiceEnvironmentManagedApiData(id, name, resourceType, systemData, tags, location, namePropertiesName, connectionParameters, metadata, runtimeUris?.ToList(), generalInformation, capabilities?.ToList(), serviceUri != null ? new LogicApiResourceBackendService(serviceUri) : null, policies, apiDefinitionUri, apiDefinitions, integrationServiceEnvironment, provisioningState, category, deploymentParametersContentLinkDefinition != null ? new IntegrationServiceEnvironmentManagedApiDeploymentParameters(deploymentParametersContentLinkDefinition) : null);
        }

        /// <summary> Initializes a new instance of LogicApiResourceMetadata. </summary>
        /// <param name="source"> The source. </param>
        /// <param name="brandColor"> The brand color. </param>
        /// <param name="hideKey"> The hide key. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="apiType"> The api type. </param>
        /// <param name="wsdlService"> The WSDL service. </param>
        /// <param name="wsdlImportMethod"> The WSDL import method. </param>
        /// <param name="connectionType"> The connection type. </param>
        /// <param name="provisioningState"> The provisioning state. </param>
        /// <param name="deploymentParameters"> The connector deployment parameters metadata. </param>
        /// <returns> A new <see cref="Models.LogicApiResourceMetadata"/> instance for mocking. </returns>
        public static LogicApiResourceMetadata LogicApiResourceMetadata(string source = null, string brandColor = null, string hideKey = null, IReadOnlyDictionary<string, string> tags = null, LogicApiType? apiType = null, LogicWsdlService wsdlService = null, LogicWsdlImportMethod? wsdlImportMethod = null, string connectionType = null, LogicWorkflowProvisioningState? provisioningState = null, LogicApiDeploymentParameterMetadataSet deploymentParameters = null)
        {
            tags ??= new Dictionary<string, string>();

            return new LogicApiResourceMetadata(source, brandColor, hideKey, tags, apiType, wsdlService, wsdlImportMethod, connectionType, provisioningState, deploymentParameters);
        }

        /// <summary> Initializes a new instance of LogicWsdlService. </summary>
        /// <param name="qualifiedName"> The qualified name. </param>
        /// <param name="endpointQualifiedNames"> The list of endpoints&apos; qualified names. </param>
        /// <returns> A new <see cref="Models.LogicWsdlService"/> instance for mocking. </returns>
        public static LogicWsdlService LogicWsdlService(string qualifiedName = null, IEnumerable<string> endpointQualifiedNames = null)
        {
            endpointQualifiedNames ??= new List<string>();

            return new LogicWsdlService(qualifiedName, endpointQualifiedNames?.ToList());
        }

        /// <summary> Initializes a new instance of LogicApiDeploymentParameterMetadataSet. </summary>
        /// <param name="packageContentLink"> The package content link parameter. </param>
        /// <param name="redisCacheConnectionString"> The package content link parameter. </param>
        /// <returns> A new <see cref="Models.LogicApiDeploymentParameterMetadataSet"/> instance for mocking. </returns>
        public static LogicApiDeploymentParameterMetadataSet LogicApiDeploymentParameterMetadataSet(LogicApiDeploymentParameterMetadata packageContentLink = null, LogicApiDeploymentParameterMetadata redisCacheConnectionString = null)
        {
            return new LogicApiDeploymentParameterMetadataSet(packageContentLink, redisCacheConnectionString);
        }

        /// <summary> Initializes a new instance of LogicApiDeploymentParameterMetadata. </summary>
        /// <param name="apiDeploymentParameterMetadataType"> The type. </param>
        /// <param name="isRequired"> Indicates whether its required. </param>
        /// <param name="displayName"> The display name. </param>
        /// <param name="description"> The description. </param>
        /// <param name="visibility"> The visibility. </param>
        /// <returns> A new <see cref="Models.LogicApiDeploymentParameterMetadata"/> instance for mocking. </returns>
        public static LogicApiDeploymentParameterMetadata LogicApiDeploymentParameterMetadata(string apiDeploymentParameterMetadataType = null, bool? isRequired = null, string displayName = null, string description = null, LogicApiDeploymentParameterVisibility? visibility = null)
        {
            return new LogicApiDeploymentParameterMetadata(apiDeploymentParameterMetadataType, isRequired, displayName, description, visibility);
        }

        /// <summary> Initializes a new instance of LogicApiResourceGeneralInformation. </summary>
        /// <param name="iconUri"> The icon url. </param>
        /// <param name="displayName"> The display name. </param>
        /// <param name="description"> The description. </param>
        /// <param name="termsOfUseUri"> The terms of use url. </param>
        /// <param name="releaseTag"> The release tag. </param>
        /// <param name="tier"> The tier. </param>
        /// <returns> A new <see cref="Models.LogicApiResourceGeneralInformation"/> instance for mocking. </returns>
        public static LogicApiResourceGeneralInformation LogicApiResourceGeneralInformation(Uri iconUri = null, string displayName = null, string description = null, Uri termsOfUseUri = null, string releaseTag = null, LogicApiTier? tier = null)
        {
            return new LogicApiResourceGeneralInformation(iconUri, displayName, description, termsOfUseUri, releaseTag, tier);
        }

        /// <summary> Initializes a new instance of LogicApiResourcePolicies. </summary>
        /// <param name="content"> The API level only policies XML as embedded content. </param>
        /// <param name="contentLink"> The content link to the policies. </param>
        /// <returns> A new <see cref="Models.LogicApiResourcePolicies"/> instance for mocking. </returns>
        public static LogicApiResourcePolicies LogicApiResourcePolicies(BinaryData content = null, string contentLink = null)
        {
            return new LogicApiResourcePolicies(content, contentLink);
        }

        /// <summary> Initializes a new instance of LogicApiResourceDefinitions. </summary>
        /// <param name="originalSwaggerUri"> The original swagger url. </param>
        /// <param name="modifiedSwaggerUri"> The modified swagger url. </param>
        /// <returns> A new <see cref="Models.LogicApiResourceDefinitions"/> instance for mocking. </returns>
        public static LogicApiResourceDefinitions LogicApiResourceDefinitions(Uri originalSwaggerUri = null, Uri modifiedSwaggerUri = null)
        {
            return new LogicApiResourceDefinitions(originalSwaggerUri, modifiedSwaggerUri);
        }

        /// <summary> Initializes a new instance of LogicApiOperationInfo. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The api operations properties. </param>
        /// <returns> A new <see cref="Models.LogicApiOperationInfo"/> instance for mocking. </returns>
        public static LogicApiOperationInfo LogicApiOperationInfo(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, LogicApiOperationProperties properties = null)
        {
            tags ??= new Dictionary<string, string>();

            return new LogicApiOperationInfo(id, name, resourceType, systemData, tags, location, properties);
        }

        /// <summary> Initializes a new instance of LogicApiOperationProperties. </summary>
        /// <param name="summary"> The summary of the api operation. </param>
        /// <param name="description"> The description of the api operation. </param>
        /// <param name="visibility"> The visibility of the api operation. </param>
        /// <param name="trigger"> The trigger type of api operation. </param>
        /// <param name="triggerHint"> The trigger hint for the api operation. </param>
        /// <param name="isPageable"> Indicates whether the api operation is pageable. </param>
        /// <param name="annotation"> The annotation of api operation. </param>
        /// <param name="api"> The api reference. </param>
        /// <param name="inputsDefinition"> The operation inputs definition schema. </param>
        /// <param name="responsesDefinition"> The operation responses definition schemas. </param>
        /// <param name="isWebhook"> Indicates whether the API operation is webhook or not. </param>
        /// <param name="isNotification"> Indicates whether the API operation is notification or not. </param>
        /// <returns> A new <see cref="Models.LogicApiOperationProperties"/> instance for mocking. </returns>
        public static LogicApiOperationProperties LogicApiOperationProperties(string summary = null, string description = null, string visibility = null, string trigger = null, string triggerHint = null, bool? isPageable = null, LogicApiOperationAnnotation annotation = null, LogicApiReference api = null, SwaggerSchema inputsDefinition = null, IDictionary<string, SwaggerSchema> responsesDefinition = null, bool? isWebhook = null, bool? isNotification = null)
        {
            responsesDefinition ??= new Dictionary<string, SwaggerSchema>();

            return new LogicApiOperationProperties(summary, description, visibility, trigger, triggerHint, isPageable, annotation, api, inputsDefinition, responsesDefinition, isWebhook, isNotification);
        }

        /// <summary> Initializes a new instance of LogicApiOperationAnnotation. </summary>
        /// <param name="status"> The status annotation. </param>
        /// <param name="family"> The family. </param>
        /// <param name="revision"> The revision. </param>
        /// <returns> A new <see cref="Models.LogicApiOperationAnnotation"/> instance for mocking. </returns>
        public static LogicApiOperationAnnotation LogicApiOperationAnnotation(LogicApiOperationAnnotationStatus? status = null, string family = null, int? revision = null)
        {
            return new LogicApiOperationAnnotation(status, family, revision);
        }

        /// <summary> Initializes a new instance of LogicApiReference. </summary>
        /// <param name="id"> The resource id. </param>
        /// <param name="name"> Gets the resource name. </param>
        /// <param name="resourceType"> Gets the resource type. </param>
        /// <param name="displayName"> The display name of the api. </param>
        /// <param name="description"> The description of the api. </param>
        /// <param name="iconUri"> The icon uri of the api. </param>
        /// <param name="swagger"> The swagger of the api. </param>
        /// <param name="brandColor"> The brand color of the api. </param>
        /// <param name="category"> The tier. </param>
        /// <param name="integrationServiceEnvironment"> The integration service environment reference. </param>
        /// <returns> A new <see cref="Models.LogicApiReference"/> instance for mocking. </returns>
        public static LogicApiReference LogicApiReference(ResourceIdentifier id = null, string name = null, ResourceType? resourceType = null, string displayName = null, string description = null, Uri iconUri = null, BinaryData swagger = null, string brandColor = null, LogicApiTier? category = null, LogicResourceReference integrationServiceEnvironment = null)
        {
            return new LogicApiReference(id, name, resourceType, displayName, description, iconUri, swagger, brandColor, category, integrationServiceEnvironment);
        }

        /// <summary> Initializes a new instance of SwaggerSchema. </summary>
        /// <param name="reference"> The reference. </param>
        /// <param name="schemaType"> The type. </param>
        /// <param name="title"> The title. </param>
        /// <param name="items"> The items schema. </param>
        /// <param name="properties"> The object properties. </param>
        /// <param name="additionalProperties"> The additional properties. </param>
        /// <param name="requiredProperties"> The object required properties. </param>
        /// <param name="maxProperties"> The maximum number of allowed properties. </param>
        /// <param name="minProperties"> The minimum number of allowed properties. </param>
        /// <param name="allOf"> The schemas which must pass validation when this schema is used. </param>
        /// <param name="discriminator"> The discriminator. </param>
        /// <param name="isReadOnly"> Indicates whether this property must be present in the a request. </param>
        /// <param name="xml"> The xml representation format for a property. </param>
        /// <param name="externalDocs"> The external documentation. </param>
        /// <param name="example"> The example value. </param>
        /// <param name="isNotificationUrlExtension"> Indicates the notification url extension. If this is set, the property&apos;s value should be a callback url for a webhook. </param>
        /// <param name="dynamicSchemaOld"> The dynamic schema configuration. </param>
        /// <param name="dynamicSchemaNew"> The dynamic schema configuration. </param>
        /// <param name="dynamicListNew"> The dynamic list. </param>
        /// <param name="dynamicTree"> The dynamic values tree configuration. </param>
        /// <returns> A new <see cref="Models.SwaggerSchema"/> instance for mocking. </returns>
        public static SwaggerSchema SwaggerSchema(string reference = null, SwaggerSchemaType? schemaType = null, string title = null, SwaggerSchema items = null, IDictionary<string, SwaggerSchema> properties = null, BinaryData additionalProperties = null, IEnumerable<string> requiredProperties = null, int? maxProperties = null, int? minProperties = null, IEnumerable<SwaggerSchema> allOf = null, string discriminator = null, bool? isReadOnly = null, SwaggerXml xml = null, SwaggerExternalDocumentation externalDocs = null, BinaryData example = null, bool? isNotificationUrlExtension = null, SwaggerCustomDynamicSchema dynamicSchemaOld = null, SwaggerCustomDynamicProperties dynamicSchemaNew = null, SwaggerCustomDynamicList dynamicListNew = null, SwaggerCustomDynamicTree dynamicTree = null)
        {
            properties ??= new Dictionary<string, SwaggerSchema>();
            requiredProperties ??= new List<string>();
            allOf ??= new List<SwaggerSchema>();

            return new SwaggerSchema(reference, schemaType, title, items, properties, additionalProperties, requiredProperties?.ToList(), maxProperties, minProperties, allOf?.ToList(), discriminator, isReadOnly, xml, externalDocs, example, isNotificationUrlExtension, dynamicSchemaOld, dynamicSchemaNew, dynamicListNew, dynamicTree);
        }

        /// <summary> Initializes a new instance of SwaggerXml. </summary>
        /// <param name="name"> The xml element or attribute name. </param>
        /// <param name="namespace"> The xml namespace. </param>
        /// <param name="prefix"> The name prefix. </param>
        /// <param name="isAttribute"> Indicates whether the property should be an attribute instead of an element. </param>
        /// <param name="isWrapped"> Indicates whether the array elements are wrapped in a container element. </param>
        /// <param name="extensions"> The vendor extensions. </param>
        /// <returns> A new <see cref="Models.SwaggerXml"/> instance for mocking. </returns>
        public static SwaggerXml SwaggerXml(string name = null, string @namespace = null, string prefix = null, bool? isAttribute = null, bool? isWrapped = null, IDictionary<string, BinaryData> extensions = null)
        {
            extensions ??= new Dictionary<string, BinaryData>();

            return new SwaggerXml(name, @namespace, prefix, isAttribute, isWrapped, extensions);
        }

        /// <summary> Initializes a new instance of SwaggerExternalDocumentation. </summary>
        /// <param name="description"> The document description. </param>
        /// <param name="uri"> The documentation Uri. </param>
        /// <param name="extensions"> The vendor extensions. </param>
        /// <returns> A new <see cref="Models.SwaggerExternalDocumentation"/> instance for mocking. </returns>
        public static SwaggerExternalDocumentation SwaggerExternalDocumentation(string description = null, Uri uri = null, IDictionary<string, BinaryData> extensions = null)
        {
            extensions ??= new Dictionary<string, BinaryData>();

            return new SwaggerExternalDocumentation(description, uri, extensions);
        }

        /// <summary> Initializes a new instance of SwaggerCustomDynamicSchema. </summary>
        /// <param name="operationId"> The operation id to fetch dynamic schema. </param>
        /// <param name="valuePath"> Json pointer to the dynamic schema on the response body. </param>
        /// <param name="parameters"> The operation parameters. </param>
        /// <returns> A new <see cref="Models.SwaggerCustomDynamicSchema"/> instance for mocking. </returns>
        public static SwaggerCustomDynamicSchema SwaggerCustomDynamicSchema(string operationId = null, string valuePath = null, IDictionary<string, BinaryData> parameters = null)
        {
            parameters ??= new Dictionary<string, BinaryData>();

            return new SwaggerCustomDynamicSchema(operationId, valuePath, parameters);
        }

        /// <summary> Initializes a new instance of SwaggerCustomDynamicProperties. </summary>
        /// <param name="operationId"> The operation id to fetch dynamic schema. </param>
        /// <param name="valuePath"> Json pointer to the dynamic schema on the response body. </param>
        /// <param name="parameters"> The operation parameters. </param>
        /// <returns> A new <see cref="Models.SwaggerCustomDynamicProperties"/> instance for mocking. </returns>
        public static SwaggerCustomDynamicProperties SwaggerCustomDynamicProperties(string operationId = null, string valuePath = null, IDictionary<string, SwaggerCustomDynamicProperties> parameters = null)
        {
            parameters ??= new Dictionary<string, SwaggerCustomDynamicProperties>();

            return new SwaggerCustomDynamicProperties(operationId, valuePath, parameters);
        }

        /// <summary> Initializes a new instance of SwaggerCustomDynamicList. </summary>
        /// <param name="operationId"> The operation id to fetch dynamic schema. </param>
        /// <param name="builtInOperation"> The built in operation. </param>
        /// <param name="itemsPath"> The path to a response property (relative to the response object, not the response body) which contains an array of dynamic value items. </param>
        /// <param name="itemValuePath"> The path to a property which defines the value which should be used. </param>
        /// <param name="itemTitlePath"> The path to an item property which defines the display name of the item. </param>
        /// <param name="parameters"> The parameters. </param>
        /// <returns> A new <see cref="Models.SwaggerCustomDynamicList"/> instance for mocking. </returns>
        public static SwaggerCustomDynamicList SwaggerCustomDynamicList(string operationId = null, string builtInOperation = null, string itemsPath = null, string itemValuePath = null, string itemTitlePath = null, IDictionary<string, SwaggerCustomDynamicProperties> parameters = null)
        {
            parameters ??= new Dictionary<string, SwaggerCustomDynamicProperties>();

            return new SwaggerCustomDynamicList(operationId, builtInOperation, itemsPath, itemValuePath, itemTitlePath, parameters);
        }

        /// <summary> Initializes a new instance of SwaggerCustomDynamicTree. </summary>
        /// <param name="settings"> The tree settings. </param>
        /// <param name="open"> The tree on-open configuration. </param>
        /// <param name="browse"> The tree on-browse configuration. </param>
        /// <returns> A new <see cref="Models.SwaggerCustomDynamicTree"/> instance for mocking. </returns>
        public static SwaggerCustomDynamicTree SwaggerCustomDynamicTree(SwaggerCustomDynamicTreeSettings settings = null, SwaggerCustomDynamicTreeCommand open = null, SwaggerCustomDynamicTreeCommand browse = null)
        {
            return new SwaggerCustomDynamicTree(settings, open, browse);
        }

        /// <summary> Initializes a new instance of SwaggerCustomDynamicTreeSettings. </summary>
        /// <param name="canSelectParentNodes"> Indicates whether parent nodes can be selected. </param>
        /// <param name="canSelectLeafNodes"> Indicates whether leaf nodes can be selected. </param>
        /// <returns> A new <see cref="Models.SwaggerCustomDynamicTreeSettings"/> instance for mocking. </returns>
        public static SwaggerCustomDynamicTreeSettings SwaggerCustomDynamicTreeSettings(bool? canSelectParentNodes = null, bool? canSelectLeafNodes = null)
        {
            return new SwaggerCustomDynamicTreeSettings(canSelectParentNodes, canSelectLeafNodes);
        }

        /// <summary> Initializes a new instance of SwaggerCustomDynamicTreeCommand. </summary>
        /// <param name="operationId"> The path to an item property which defines the display name of the item. </param>
        /// <param name="itemsPath"> The path to an item property which defines the display name of the item. </param>
        /// <param name="itemValuePath"> The path to an item property which defines the display name of the item. </param>
        /// <param name="itemTitlePath"> The path to an item property which defines the display name of the item. </param>
        /// <param name="itemFullTitlePath"> The path to an item property which defines the display name of the item. </param>
        /// <param name="itemIsParent"> The path to an item property which defines the display name of the item. </param>
        /// <param name="selectableFilter"> The path to an item property which defines the display name of the item. </param>
        /// <param name="parameters"> Dictionary of &lt;SwaggerCustomDynamicTreeParameter&gt;. </param>
        /// <returns> A new <see cref="Models.SwaggerCustomDynamicTreeCommand"/> instance for mocking. </returns>
        public static SwaggerCustomDynamicTreeCommand SwaggerCustomDynamicTreeCommand(string operationId = null, string itemsPath = null, string itemValuePath = null, string itemTitlePath = null, string itemFullTitlePath = null, string itemIsParent = null, string selectableFilter = null, IDictionary<string, SwaggerCustomDynamicTreeParameterInfo> parameters = null)
        {
            parameters ??= new Dictionary<string, SwaggerCustomDynamicTreeParameterInfo>();

            return new SwaggerCustomDynamicTreeCommand(operationId, itemsPath, itemValuePath, itemTitlePath, itemFullTitlePath, itemIsParent, selectableFilter, parameters);
        }

        /// <summary> Initializes a new instance of SwaggerCustomDynamicTreeParameterInfo. </summary>
        /// <param name="selectedItemValuePath"> Gets or sets a path to a property in the currently selected item to pass as a value to a parameter for the given operation. </param>
        /// <param name="value"> The parameter value. </param>
        /// <param name="parameterReference"> The parameter reference. </param>
        /// <param name="isRequired"> Indicates whether the parameter is required. </param>
        /// <returns> A new <see cref="Models.SwaggerCustomDynamicTreeParameterInfo"/> instance for mocking. </returns>
        public static SwaggerCustomDynamicTreeParameterInfo SwaggerCustomDynamicTreeParameterInfo(string selectedItemValuePath = null, BinaryData value = null, string parameterReference = null, bool? isRequired = null)
        {
            return new SwaggerCustomDynamicTreeParameterInfo(selectedItemValuePath, value, parameterReference, isRequired);
        }
    }
}
