// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.ResourceManager.Logic.Models
{
    /// <summary>
    /// The Edifact validation override settings.
    /// Serialized Name: EdifactValidationOverride
    /// </summary>
    public partial class EdifactValidationOverride
    {
        /// <summary> Initializes a new instance of EdifactValidationOverride. </summary>
        /// <param name="messageId">
        /// The message id on which the validation settings has to be applied.
        /// Serialized Name: EdifactValidationOverride.messageId
        /// </param>
        /// <param name="enforceCharacterSet">
        /// The value indicating whether to validate character Set.
        /// Serialized Name: EdifactValidationOverride.enforceCharacterSet
        /// </param>
        /// <param name="validateEdiTypes">
        /// The value indicating whether to validate EDI types.
        /// Serialized Name: EdifactValidationOverride.validateEDITypes
        /// </param>
        /// <param name="validateXsdTypes">
        /// The value indicating whether to validate XSD types.
        /// Serialized Name: EdifactValidationOverride.validateXSDTypes
        /// </param>
        /// <param name="allowLeadingAndTrailingSpacesAndZeroes">
        /// The value indicating whether to allow leading and trailing spaces and zeroes.
        /// Serialized Name: EdifactValidationOverride.allowLeadingAndTrailingSpacesAndZeroes
        /// </param>
        /// <param name="trailingSeparatorPolicy">
        /// The trailing separator policy.
        /// Serialized Name: EdifactValidationOverride.trailingSeparatorPolicy
        /// </param>
        /// <param name="trimLeadingAndTrailingSpacesAndZeroes">
        /// The value indicating whether to trim leading and trailing spaces and zeroes.
        /// Serialized Name: EdifactValidationOverride.trimLeadingAndTrailingSpacesAndZeroes
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="messageId"/> is null. </exception>
        public EdifactValidationOverride(string messageId, bool enforceCharacterSet, bool validateEdiTypes, bool validateXsdTypes, bool allowLeadingAndTrailingSpacesAndZeroes, TrailingSeparatorPolicy trailingSeparatorPolicy, bool trimLeadingAndTrailingSpacesAndZeroes)
        {
            if (messageId == null)
            {
                throw new ArgumentNullException(nameof(messageId));
            }

            MessageId = messageId;
            EnforceCharacterSet = enforceCharacterSet;
            ValidateEdiTypes = validateEdiTypes;
            ValidateXsdTypes = validateXsdTypes;
            AllowLeadingAndTrailingSpacesAndZeroes = allowLeadingAndTrailingSpacesAndZeroes;
            TrailingSeparatorPolicy = trailingSeparatorPolicy;
            TrimLeadingAndTrailingSpacesAndZeroes = trimLeadingAndTrailingSpacesAndZeroes;
        }

        /// <summary>
        /// The message id on which the validation settings has to be applied.
        /// Serialized Name: EdifactValidationOverride.messageId
        /// </summary>
        public string MessageId { get; set; }
        /// <summary>
        /// The value indicating whether to validate character Set.
        /// Serialized Name: EdifactValidationOverride.enforceCharacterSet
        /// </summary>
        public bool EnforceCharacterSet { get; set; }
        /// <summary>
        /// The value indicating whether to validate EDI types.
        /// Serialized Name: EdifactValidationOverride.validateEDITypes
        /// </summary>
        public bool ValidateEdiTypes { get; set; }
        /// <summary>
        /// The value indicating whether to validate XSD types.
        /// Serialized Name: EdifactValidationOverride.validateXSDTypes
        /// </summary>
        public bool ValidateXsdTypes { get; set; }
        /// <summary>
        /// The value indicating whether to allow leading and trailing spaces and zeroes.
        /// Serialized Name: EdifactValidationOverride.allowLeadingAndTrailingSpacesAndZeroes
        /// </summary>
        public bool AllowLeadingAndTrailingSpacesAndZeroes { get; set; }
        /// <summary>
        /// The trailing separator policy.
        /// Serialized Name: EdifactValidationOverride.trailingSeparatorPolicy
        /// </summary>
        public TrailingSeparatorPolicy TrailingSeparatorPolicy { get; set; }
        /// <summary>
        /// The value indicating whether to trim leading and trailing spaces and zeroes.
        /// Serialized Name: EdifactValidationOverride.trimLeadingAndTrailingSpacesAndZeroes
        /// </summary>
        public bool TrimLeadingAndTrailingSpacesAndZeroes { get; set; }
    }
}
