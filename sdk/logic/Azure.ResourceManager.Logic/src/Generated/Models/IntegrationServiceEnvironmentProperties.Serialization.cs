// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Logic.Models
{
    public partial class IntegrationServiceEnvironmentProperties : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (Core.Optional.IsDefined(State))
            {
                writer.WritePropertyName("state"u8);
                writer.WriteStringValue(State.Value.ToString());
            }
            if (Core.Optional.IsDefined(IntegrationServiceEnvironmentId))
            {
                writer.WritePropertyName("integrationServiceEnvironmentId"u8);
                writer.WriteStringValue(IntegrationServiceEnvironmentId);
            }
            if (Core.Optional.IsDefined(EndpointsConfiguration))
            {
                writer.WritePropertyName("endpointsConfiguration"u8);
                writer.WriteObjectValue(EndpointsConfiguration);
            }
            if (Core.Optional.IsDefined(NetworkConfiguration))
            {
                writer.WritePropertyName("networkConfiguration"u8);
                writer.WriteObjectValue(NetworkConfiguration);
            }
            if (Core.Optional.IsDefined(EncryptionConfiguration))
            {
                writer.WritePropertyName("encryptionConfiguration"u8);
                writer.WriteObjectValue(EncryptionConfiguration);
            }
            writer.WriteEndObject();
        }

        internal static IntegrationServiceEnvironmentProperties DeserializeIntegrationServiceEnvironmentProperties(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<LogicWorkflowProvisioningState> provisioningState = default;
            Core.Optional<LogicWorkflowState> state = default;
            Core.Optional<string> integrationServiceEnvironmentId = default;
            Core.Optional<FlowEndpointsConfiguration> endpointsConfiguration = default;
            Core.Optional<IntegrationServiceNetworkConfiguration> networkConfiguration = default;
            Core.Optional<IntegrationServiceEnvironmenEncryptionConfiguration> encryptionConfiguration = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new LogicWorkflowProvisioningState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("state"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    state = new LogicWorkflowState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("integrationServiceEnvironmentId"u8))
                {
                    integrationServiceEnvironmentId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("endpointsConfiguration"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    endpointsConfiguration = FlowEndpointsConfiguration.DeserializeFlowEndpointsConfiguration(property.Value);
                    continue;
                }
                if (property.NameEquals("networkConfiguration"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    networkConfiguration = IntegrationServiceNetworkConfiguration.DeserializeIntegrationServiceNetworkConfiguration(property.Value);
                    continue;
                }
                if (property.NameEquals("encryptionConfiguration"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    encryptionConfiguration = IntegrationServiceEnvironmenEncryptionConfiguration.DeserializeIntegrationServiceEnvironmenEncryptionConfiguration(property.Value);
                    continue;
                }
            }
            return new IntegrationServiceEnvironmentProperties(Core.Optional.ToNullable(provisioningState), Core.Optional.ToNullable(state), integrationServiceEnvironmentId.Value, endpointsConfiguration.Value, networkConfiguration.Value, encryptionConfiguration.Value);
        }
    }
}
