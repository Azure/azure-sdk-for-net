// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Logic.Models
{
    public partial class X12ValidationSettings : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("validateCharacterSet");
            writer.WriteBooleanValue(ValidateCharacterSet);
            writer.WritePropertyName("checkDuplicateInterchangeControlNumber");
            writer.WriteBooleanValue(CheckDuplicateInterchangeControlNumber);
            writer.WritePropertyName("interchangeControlNumberValidityDays");
            writer.WriteNumberValue(InterchangeControlNumberValidityDays);
            writer.WritePropertyName("checkDuplicateGroupControlNumber");
            writer.WriteBooleanValue(CheckDuplicateGroupControlNumber);
            writer.WritePropertyName("checkDuplicateTransactionSetControlNumber");
            writer.WriteBooleanValue(CheckDuplicateTransactionSetControlNumber);
            writer.WritePropertyName("validateEDITypes");
            writer.WriteBooleanValue(ValidateEDITypes);
            writer.WritePropertyName("validateXSDTypes");
            writer.WriteBooleanValue(ValidateXSDTypes);
            writer.WritePropertyName("allowLeadingAndTrailingSpacesAndZeroes");
            writer.WriteBooleanValue(AllowLeadingAndTrailingSpacesAndZeroes);
            writer.WritePropertyName("trimLeadingAndTrailingSpacesAndZeroes");
            writer.WriteBooleanValue(TrimLeadingAndTrailingSpacesAndZeroes);
            writer.WritePropertyName("trailingSeparatorPolicy");
            writer.WriteStringValue(TrailingSeparatorPolicy.ToString());
            writer.WriteEndObject();
        }

        internal static X12ValidationSettings DeserializeX12ValidationSettings(JsonElement element)
        {
            bool validateCharacterSet = default;
            bool checkDuplicateInterchangeControlNumber = default;
            int interchangeControlNumberValidityDays = default;
            bool checkDuplicateGroupControlNumber = default;
            bool checkDuplicateTransactionSetControlNumber = default;
            bool validateEDITypes = default;
            bool validateXSDTypes = default;
            bool allowLeadingAndTrailingSpacesAndZeroes = default;
            bool trimLeadingAndTrailingSpacesAndZeroes = default;
            TrailingSeparatorPolicy trailingSeparatorPolicy = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("validateCharacterSet"))
                {
                    validateCharacterSet = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("checkDuplicateInterchangeControlNumber"))
                {
                    checkDuplicateInterchangeControlNumber = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("interchangeControlNumberValidityDays"))
                {
                    interchangeControlNumberValidityDays = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("checkDuplicateGroupControlNumber"))
                {
                    checkDuplicateGroupControlNumber = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("checkDuplicateTransactionSetControlNumber"))
                {
                    checkDuplicateTransactionSetControlNumber = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("validateEDITypes"))
                {
                    validateEDITypes = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("validateXSDTypes"))
                {
                    validateXSDTypes = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("allowLeadingAndTrailingSpacesAndZeroes"))
                {
                    allowLeadingAndTrailingSpacesAndZeroes = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("trimLeadingAndTrailingSpacesAndZeroes"))
                {
                    trimLeadingAndTrailingSpacesAndZeroes = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("trailingSeparatorPolicy"))
                {
                    trailingSeparatorPolicy = new TrailingSeparatorPolicy(property.Value.GetString());
                    continue;
                }
            }
            return new X12ValidationSettings(validateCharacterSet, checkDuplicateInterchangeControlNumber, interchangeControlNumberValidityDays, checkDuplicateGroupControlNumber, checkDuplicateTransactionSetControlNumber, validateEDITypes, validateXSDTypes, allowLeadingAndTrailingSpacesAndZeroes, trimLeadingAndTrailingSpacesAndZeroes, trailingSeparatorPolicy);
        }
    }
}
