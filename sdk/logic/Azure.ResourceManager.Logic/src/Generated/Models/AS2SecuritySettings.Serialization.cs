// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Logic.Models
{
    public partial class AS2SecuritySettings : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("overrideGroupSigningCertificate");
            writer.WriteBooleanValue(OverrideGroupSigningCertificate);
            if (Optional.IsDefined(SigningCertificateName))
            {
                writer.WritePropertyName("signingCertificateName");
                writer.WriteStringValue(SigningCertificateName);
            }
            if (Optional.IsDefined(EncryptionCertificateName))
            {
                writer.WritePropertyName("encryptionCertificateName");
                writer.WriteStringValue(EncryptionCertificateName);
            }
            writer.WritePropertyName("enableNRRForInboundEncodedMessages");
            writer.WriteBooleanValue(EnableNrrForInboundEncodedMessages);
            writer.WritePropertyName("enableNRRForInboundDecodedMessages");
            writer.WriteBooleanValue(EnableNrrForInboundDecodedMessages);
            writer.WritePropertyName("enableNRRForOutboundMDN");
            writer.WriteBooleanValue(EnableNrrForOutboundMdn);
            writer.WritePropertyName("enableNRRForOutboundEncodedMessages");
            writer.WriteBooleanValue(EnableNrrForOutboundEncodedMessages);
            writer.WritePropertyName("enableNRRForOutboundDecodedMessages");
            writer.WriteBooleanValue(EnableNrrForOutboundDecodedMessages);
            writer.WritePropertyName("enableNRRForInboundMDN");
            writer.WriteBooleanValue(EnableNrrForInboundMdn);
            if (Optional.IsDefined(Sha2AlgorithmFormat))
            {
                writer.WritePropertyName("sha2AlgorithmFormat");
                writer.WriteStringValue(Sha2AlgorithmFormat);
            }
            writer.WriteEndObject();
        }

        internal static AS2SecuritySettings DeserializeAS2SecuritySettings(JsonElement element)
        {
            bool overrideGroupSigningCertificate = default;
            Optional<string> signingCertificateName = default;
            Optional<string> encryptionCertificateName = default;
            bool enableNrrForInboundEncodedMessages = default;
            bool enableNrrForInboundDecodedMessages = default;
            bool enableNrrForOutboundMdn = default;
            bool enableNrrForOutboundEncodedMessages = default;
            bool enableNrrForOutboundDecodedMessages = default;
            bool enableNrrForInboundMdn = default;
            Optional<string> sha2AlgorithmFormat = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("overrideGroupSigningCertificate"))
                {
                    overrideGroupSigningCertificate = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("signingCertificateName"))
                {
                    signingCertificateName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("encryptionCertificateName"))
                {
                    encryptionCertificateName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("enableNRRForInboundEncodedMessages"))
                {
                    enableNrrForInboundEncodedMessages = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("enableNRRForInboundDecodedMessages"))
                {
                    enableNrrForInboundDecodedMessages = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("enableNRRForOutboundMDN"))
                {
                    enableNrrForOutboundMdn = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("enableNRRForOutboundEncodedMessages"))
                {
                    enableNrrForOutboundEncodedMessages = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("enableNRRForOutboundDecodedMessages"))
                {
                    enableNrrForOutboundDecodedMessages = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("enableNRRForInboundMDN"))
                {
                    enableNrrForInboundMdn = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("sha2AlgorithmFormat"))
                {
                    sha2AlgorithmFormat = property.Value.GetString();
                    continue;
                }
            }
            return new AS2SecuritySettings(overrideGroupSigningCertificate, signingCertificateName.Value, encryptionCertificateName.Value, enableNrrForInboundEncodedMessages, enableNrrForInboundDecodedMessages, enableNrrForOutboundMdn, enableNrrForOutboundEncodedMessages, enableNrrForOutboundDecodedMessages, enableNrrForInboundMdn, sha2AlgorithmFormat.Value);
        }
    }
}
