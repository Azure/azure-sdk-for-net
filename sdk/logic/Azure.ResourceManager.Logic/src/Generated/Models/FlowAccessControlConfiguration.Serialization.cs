// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Logic.Models
{
    public partial class FlowAccessControlConfiguration : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(Triggers))
            {
                writer.WritePropertyName("triggers"u8);
                writer.WriteObjectValue(Triggers);
            }
            if (Core.Optional.IsDefined(Contents))
            {
                writer.WritePropertyName("contents"u8);
                writer.WriteObjectValue(Contents);
            }
            if (Core.Optional.IsDefined(Actions))
            {
                writer.WritePropertyName("actions"u8);
                writer.WriteObjectValue(Actions);
            }
            if (Core.Optional.IsDefined(WorkflowManagement))
            {
                writer.WritePropertyName("workflowManagement"u8);
                writer.WriteObjectValue(WorkflowManagement);
            }
            writer.WriteEndObject();
        }

        internal static FlowAccessControlConfiguration DeserializeFlowAccessControlConfiguration(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<FlowAccessControlConfigurationPolicy> triggers = default;
            Core.Optional<FlowAccessControlConfigurationPolicy> contents = default;
            Core.Optional<FlowAccessControlConfigurationPolicy> actions = default;
            Core.Optional<FlowAccessControlConfigurationPolicy> workflowManagement = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("triggers"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    triggers = FlowAccessControlConfigurationPolicy.DeserializeFlowAccessControlConfigurationPolicy(property.Value);
                    continue;
                }
                if (property.NameEquals("contents"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    contents = FlowAccessControlConfigurationPolicy.DeserializeFlowAccessControlConfigurationPolicy(property.Value);
                    continue;
                }
                if (property.NameEquals("actions"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    actions = FlowAccessControlConfigurationPolicy.DeserializeFlowAccessControlConfigurationPolicy(property.Value);
                    continue;
                }
                if (property.NameEquals("workflowManagement"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    workflowManagement = FlowAccessControlConfigurationPolicy.DeserializeFlowAccessControlConfigurationPolicy(property.Value);
                    continue;
                }
            }
            return new FlowAccessControlConfiguration(triggers.Value, contents.Value, actions.Value, workflowManagement.Value);
        }
    }
}
