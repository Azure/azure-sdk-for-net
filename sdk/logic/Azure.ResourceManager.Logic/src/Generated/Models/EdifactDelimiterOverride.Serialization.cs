// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Logic.Models
{
    public partial class EdifactDelimiterOverride : IUtf8JsonSerializable, IJsonModel<EdifactDelimiterOverride>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdifactDelimiterOverride>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<EdifactDelimiterOverride>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdifactDelimiterOverride>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdifactDelimiterOverride)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (Optional.IsDefined(MessageId))
            {
                writer.WritePropertyName("messageId"u8);
                writer.WriteStringValue(MessageId);
            }
            if (Optional.IsDefined(MessageVersion))
            {
                writer.WritePropertyName("messageVersion"u8);
                writer.WriteStringValue(MessageVersion);
            }
            if (Optional.IsDefined(MessageRelease))
            {
                writer.WritePropertyName("messageRelease"u8);
                writer.WriteStringValue(MessageRelease);
            }
            writer.WritePropertyName("dataElementSeparator"u8);
            writer.WriteNumberValue(DataElementSeparator);
            writer.WritePropertyName("componentSeparator"u8);
            writer.WriteNumberValue(ComponentSeparator);
            writer.WritePropertyName("segmentTerminator"u8);
            writer.WriteNumberValue(SegmentTerminator);
            writer.WritePropertyName("repetitionSeparator"u8);
            writer.WriteNumberValue(RepetitionSeparator);
            writer.WritePropertyName("segmentTerminatorSuffix"u8);
            writer.WriteStringValue(SegmentTerminatorSuffix.ToSerialString());
            writer.WritePropertyName("decimalPointIndicator"u8);
            writer.WriteStringValue(DecimalPointIndicator.ToSerialString());
            writer.WritePropertyName("releaseIndicator"u8);
            writer.WriteNumberValue(ReleaseIndicator);
            if (Optional.IsDefined(MessageAssociationAssignedCode))
            {
                writer.WritePropertyName("messageAssociationAssignedCode"u8);
                writer.WriteStringValue(MessageAssociationAssignedCode);
            }
            if (Optional.IsDefined(TargetNamespace))
            {
                writer.WritePropertyName("targetNamespace"u8);
                writer.WriteStringValue(TargetNamespace);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        EdifactDelimiterOverride IJsonModel<EdifactDelimiterOverride>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdifactDelimiterOverride>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdifactDelimiterOverride)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdifactDelimiterOverride(document.RootElement, options);
        }

        internal static EdifactDelimiterOverride DeserializeEdifactDelimiterOverride(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> messageId = default;
            Optional<string> messageVersion = default;
            Optional<string> messageRelease = default;
            int dataElementSeparator = default;
            int componentSeparator = default;
            int segmentTerminator = default;
            int repetitionSeparator = default;
            SegmentTerminatorSuffix segmentTerminatorSuffix = default;
            EdifactDecimalIndicator decimalPointIndicator = default;
            int releaseIndicator = default;
            Optional<string> messageAssociationAssignedCode = default;
            Optional<string> targetNamespace = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("messageId"u8))
                {
                    messageId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("messageVersion"u8))
                {
                    messageVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("messageRelease"u8))
                {
                    messageRelease = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("dataElementSeparator"u8))
                {
                    dataElementSeparator = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("componentSeparator"u8))
                {
                    componentSeparator = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("segmentTerminator"u8))
                {
                    segmentTerminator = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("repetitionSeparator"u8))
                {
                    repetitionSeparator = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("segmentTerminatorSuffix"u8))
                {
                    segmentTerminatorSuffix = property.Value.GetString().ToSegmentTerminatorSuffix();
                    continue;
                }
                if (property.NameEquals("decimalPointIndicator"u8))
                {
                    decimalPointIndicator = property.Value.GetString().ToEdifactDecimalIndicator();
                    continue;
                }
                if (property.NameEquals("releaseIndicator"u8))
                {
                    releaseIndicator = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("messageAssociationAssignedCode"u8))
                {
                    messageAssociationAssignedCode = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("targetNamespace"u8))
                {
                    targetNamespace = property.Value.GetString();
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new EdifactDelimiterOverride(messageId.Value, messageVersion.Value, messageRelease.Value, dataElementSeparator, componentSeparator, segmentTerminator, repetitionSeparator, segmentTerminatorSuffix, decimalPointIndicator, releaseIndicator, messageAssociationAssignedCode.Value, targetNamespace.Value, serializedAdditionalRawData);
        }

        private BinaryData SerializeBicep(ModelReaderWriterOptions options)
        {
            StringBuilder builder = new StringBuilder();
            builder.AppendLine("{");

            if (Optional.IsDefined(MessageId))
            {
                builder.Append("  messageId:");
                if (MessageId.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{MessageId}'''");
                }
                else
                {
                    builder.AppendLine($" '{MessageId}'");
                }
            }

            if (Optional.IsDefined(MessageVersion))
            {
                builder.Append("  messageVersion:");
                if (MessageVersion.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{MessageVersion}'''");
                }
                else
                {
                    builder.AppendLine($" '{MessageVersion}'");
                }
            }

            if (Optional.IsDefined(MessageRelease))
            {
                builder.Append("  messageRelease:");
                if (MessageRelease.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{MessageRelease}'''");
                }
                else
                {
                    builder.AppendLine($" '{MessageRelease}'");
                }
            }

            if (Optional.IsDefined(DataElementSeparator))
            {
                builder.Append("  dataElementSeparator:");
                builder.AppendLine($" {DataElementSeparator}");
            }

            if (Optional.IsDefined(ComponentSeparator))
            {
                builder.Append("  componentSeparator:");
                builder.AppendLine($" {ComponentSeparator}");
            }

            if (Optional.IsDefined(SegmentTerminator))
            {
                builder.Append("  segmentTerminator:");
                builder.AppendLine($" {SegmentTerminator}");
            }

            if (Optional.IsDefined(RepetitionSeparator))
            {
                builder.Append("  repetitionSeparator:");
                builder.AppendLine($" {RepetitionSeparator}");
            }

            if (Optional.IsDefined(SegmentTerminatorSuffix))
            {
                builder.Append("  segmentTerminatorSuffix:");
                builder.AppendLine($" '{SegmentTerminatorSuffix.ToSerialString()}'");
            }

            if (Optional.IsDefined(DecimalPointIndicator))
            {
                builder.Append("  decimalPointIndicator:");
                builder.AppendLine($" '{DecimalPointIndicator.ToSerialString()}'");
            }

            if (Optional.IsDefined(ReleaseIndicator))
            {
                builder.Append("  releaseIndicator:");
                builder.AppendLine($" {ReleaseIndicator}");
            }

            if (Optional.IsDefined(MessageAssociationAssignedCode))
            {
                builder.Append("  messageAssociationAssignedCode:");
                if (MessageAssociationAssignedCode.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{MessageAssociationAssignedCode}'''");
                }
                else
                {
                    builder.AppendLine($" '{MessageAssociationAssignedCode}'");
                }
            }

            if (Optional.IsDefined(TargetNamespace))
            {
                builder.Append("  targetNamespace:");
                if (TargetNamespace.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{TargetNamespace}'''");
                }
                else
                {
                    builder.AppendLine($" '{TargetNamespace}'");
                }
            }

            builder.AppendLine("}");
            return BinaryData.FromString(builder.ToString());
        }

        private void AppendChildObject(StringBuilder stringBuilder, object childObject, ModelReaderWriterOptions options, int spaces, bool indentFirstLine)
        {
            string indent = new string(' ', spaces);
            BinaryData data = ModelReaderWriter.Write(childObject, options);
            string[] lines = data.ToString().Split(Environment.NewLine.ToCharArray(), StringSplitOptions.RemoveEmptyEntries);
            bool inMultilineString = false;
            for (int i = 0; i < lines.Length; i++)
            {
                string line = lines[i];
                if (inMultilineString)
                {
                    if (line.Contains("'''"))
                    {
                        inMultilineString = false;
                    }
                    stringBuilder.AppendLine(line);
                    continue;
                }
                if (line.Contains("'''"))
                {
                    inMultilineString = true;
                    stringBuilder.AppendLine($"{indent}{line}");
                    continue;
                }
                if (i == 0 && !indentFirstLine)
                {
                    stringBuilder.AppendLine($" {line}");
                }
                else
                {
                    stringBuilder.AppendLine($"{indent}{line}");
                }
            }
        }

        BinaryData IPersistableModel<EdifactDelimiterOverride>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdifactDelimiterOverride>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                case "B":
                    return SerializeBicep(options);
                default:
                    throw new FormatException($"The model {nameof(EdifactDelimiterOverride)} does not support '{options.Format}' format.");
            }
        }

        EdifactDelimiterOverride IPersistableModel<EdifactDelimiterOverride>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdifactDelimiterOverride>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeEdifactDelimiterOverride(document.RootElement, options);
                    }
                case "B":
                    throw new InvalidOperationException("Bicep deserialization is not supported for this type.");
                default:
                    throw new FormatException($"The model {nameof(EdifactDelimiterOverride)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdifactDelimiterOverride>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
