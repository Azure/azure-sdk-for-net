// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Logic.Models
{
    public partial class EdifactDelimiterOverride : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(MessageId))
            {
                writer.WritePropertyName("messageId");
                writer.WriteStringValue(MessageId);
            }
            if (Optional.IsDefined(MessageVersion))
            {
                writer.WritePropertyName("messageVersion");
                writer.WriteStringValue(MessageVersion);
            }
            if (Optional.IsDefined(MessageRelease))
            {
                writer.WritePropertyName("messageRelease");
                writer.WriteStringValue(MessageRelease);
            }
            writer.WritePropertyName("dataElementSeparator");
            writer.WriteNumberValue(DataElementSeparator);
            writer.WritePropertyName("componentSeparator");
            writer.WriteNumberValue(ComponentSeparator);
            writer.WritePropertyName("segmentTerminator");
            writer.WriteNumberValue(SegmentTerminator);
            writer.WritePropertyName("repetitionSeparator");
            writer.WriteNumberValue(RepetitionSeparator);
            writer.WritePropertyName("segmentTerminatorSuffix");
            writer.WriteStringValue(SegmentTerminatorSuffix.ToSerialString());
            writer.WritePropertyName("decimalPointIndicator");
            writer.WriteStringValue(DecimalPointIndicator.ToSerialString());
            writer.WritePropertyName("releaseIndicator");
            writer.WriteNumberValue(ReleaseIndicator);
            if (Optional.IsDefined(MessageAssociationAssignedCode))
            {
                writer.WritePropertyName("messageAssociationAssignedCode");
                writer.WriteStringValue(MessageAssociationAssignedCode);
            }
            if (Optional.IsDefined(TargetNamespace))
            {
                writer.WritePropertyName("targetNamespace");
                writer.WriteStringValue(TargetNamespace);
            }
            writer.WriteEndObject();
        }

        internal static EdifactDelimiterOverride DeserializeEdifactDelimiterOverride(JsonElement element)
        {
            Optional<string> messageId = default;
            Optional<string> messageVersion = default;
            Optional<string> messageRelease = default;
            int dataElementSeparator = default;
            int componentSeparator = default;
            int segmentTerminator = default;
            int repetitionSeparator = default;
            SegmentTerminatorSuffix segmentTerminatorSuffix = default;
            EdifactDecimalIndicator decimalPointIndicator = default;
            int releaseIndicator = default;
            Optional<string> messageAssociationAssignedCode = default;
            Optional<string> targetNamespace = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("messageId"))
                {
                    messageId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("messageVersion"))
                {
                    messageVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("messageRelease"))
                {
                    messageRelease = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("dataElementSeparator"))
                {
                    dataElementSeparator = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("componentSeparator"))
                {
                    componentSeparator = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("segmentTerminator"))
                {
                    segmentTerminator = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("repetitionSeparator"))
                {
                    repetitionSeparator = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("segmentTerminatorSuffix"))
                {
                    segmentTerminatorSuffix = property.Value.GetString().ToSegmentTerminatorSuffix();
                    continue;
                }
                if (property.NameEquals("decimalPointIndicator"))
                {
                    decimalPointIndicator = property.Value.GetString().ToEdifactDecimalIndicator();
                    continue;
                }
                if (property.NameEquals("releaseIndicator"))
                {
                    releaseIndicator = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("messageAssociationAssignedCode"))
                {
                    messageAssociationAssignedCode = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("targetNamespace"))
                {
                    targetNamespace = property.Value.GetString();
                    continue;
                }
            }
            return new EdifactDelimiterOverride(messageId.Value, messageVersion.Value, messageRelease.Value, dataElementSeparator, componentSeparator, segmentTerminator, repetitionSeparator, segmentTerminatorSuffix, decimalPointIndicator, releaseIndicator, messageAssociationAssignedCode.Value, targetNamespace.Value);
        }
    }
}
