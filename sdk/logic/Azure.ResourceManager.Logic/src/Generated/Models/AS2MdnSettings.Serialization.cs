// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Logic.Models
{
    public partial class AS2MdnSettings : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("needMDN");
            writer.WriteBooleanValue(NeedMdn);
            writer.WritePropertyName("signMDN");
            writer.WriteBooleanValue(SignMdn);
            writer.WritePropertyName("sendMDNAsynchronously");
            writer.WriteBooleanValue(SendMdnAsynchronously);
            if (Optional.IsDefined(ReceiptDeliveryUri))
            {
                writer.WritePropertyName("receiptDeliveryUrl");
                writer.WriteStringValue(ReceiptDeliveryUri.AbsoluteUri);
            }
            if (Optional.IsDefined(DispositionNotificationTo))
            {
                writer.WritePropertyName("dispositionNotificationTo");
                writer.WriteStringValue(DispositionNotificationTo);
            }
            writer.WritePropertyName("signOutboundMDNIfOptional");
            writer.WriteBooleanValue(SignOutboundMdnIfOptional);
            if (Optional.IsDefined(MdnText))
            {
                writer.WritePropertyName("mdnText");
                writer.WriteStringValue(MdnText);
            }
            writer.WritePropertyName("sendInboundMDNToMessageBox");
            writer.WriteBooleanValue(SendInboundMdnToMessageBox);
            writer.WritePropertyName("micHashingAlgorithm");
            writer.WriteStringValue(MicHashingAlgorithm.ToString());
            writer.WriteEndObject();
        }

        internal static AS2MdnSettings DeserializeAS2MdnSettings(JsonElement element)
        {
            bool needMdn = default;
            bool signMdn = default;
            bool sendMdnAsynchronously = default;
            Optional<Uri> receiptDeliveryUrl = default;
            Optional<string> dispositionNotificationTo = default;
            bool signOutboundMdnIfOptional = default;
            Optional<string> mdnText = default;
            bool sendInboundMdnToMessageBox = default;
            AS2HashingAlgorithm micHashingAlgorithm = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("needMDN"))
                {
                    needMdn = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("signMDN"))
                {
                    signMdn = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("sendMDNAsynchronously"))
                {
                    sendMdnAsynchronously = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("receiptDeliveryUrl"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        receiptDeliveryUrl = null;
                        continue;
                    }
                    receiptDeliveryUrl = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("dispositionNotificationTo"))
                {
                    dispositionNotificationTo = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("signOutboundMDNIfOptional"))
                {
                    signOutboundMdnIfOptional = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("mdnText"))
                {
                    mdnText = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sendInboundMDNToMessageBox"))
                {
                    sendInboundMdnToMessageBox = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("micHashingAlgorithm"))
                {
                    micHashingAlgorithm = new AS2HashingAlgorithm(property.Value.GetString());
                    continue;
                }
            }
            return new AS2MdnSettings(needMdn, signMdn, sendMdnAsynchronously, receiptDeliveryUrl.Value, dispositionNotificationTo.Value, signOutboundMdnIfOptional, mdnText.Value, sendInboundMdnToMessageBox, micHashingAlgorithm);
        }
    }
}
