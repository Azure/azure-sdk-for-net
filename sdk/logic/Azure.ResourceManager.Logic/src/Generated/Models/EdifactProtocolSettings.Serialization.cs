// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Logic.Models
{
    public partial class EdifactProtocolSettings : IUtf8JsonSerializable, IJsonModel<EdifactProtocolSettings>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdifactProtocolSettings>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<EdifactProtocolSettings>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdifactProtocolSettings>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdifactProtocolSettings)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            writer.WritePropertyName("validationSettings"u8);
            writer.WriteObjectValue(ValidationSettings);
            writer.WritePropertyName("framingSettings"u8);
            writer.WriteObjectValue(FramingSettings);
            writer.WritePropertyName("envelopeSettings"u8);
            writer.WriteObjectValue(EnvelopeSettings);
            writer.WritePropertyName("acknowledgementSettings"u8);
            writer.WriteObjectValue(AcknowledgementSettings);
            writer.WritePropertyName("messageFilter"u8);
            writer.WriteObjectValue(MessageFilter);
            writer.WritePropertyName("processingSettings"u8);
            writer.WriteObjectValue(ProcessingSettings);
            if (Optional.IsCollectionDefined(EnvelopeOverrides))
            {
                writer.WritePropertyName("envelopeOverrides"u8);
                writer.WriteStartArray();
                foreach (var item in EnvelopeOverrides)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(MessageFilterList))
            {
                writer.WritePropertyName("messageFilterList"u8);
                writer.WriteStartArray();
                foreach (var item in MessageFilterList)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WritePropertyName("schemaReferences"u8);
            writer.WriteStartArray();
            foreach (var item in SchemaReferences)
            {
                writer.WriteObjectValue(item);
            }
            writer.WriteEndArray();
            if (Optional.IsCollectionDefined(ValidationOverrides))
            {
                writer.WritePropertyName("validationOverrides"u8);
                writer.WriteStartArray();
                foreach (var item in ValidationOverrides)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(EdifactDelimiterOverrides))
            {
                writer.WritePropertyName("edifactDelimiterOverrides"u8);
                writer.WriteStartArray();
                foreach (var item in EdifactDelimiterOverrides)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        EdifactProtocolSettings IJsonModel<EdifactProtocolSettings>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdifactProtocolSettings>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdifactProtocolSettings)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdifactProtocolSettings(document.RootElement, options);
        }

        internal static EdifactProtocolSettings DeserializeEdifactProtocolSettings(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            EdifactValidationSettings validationSettings = default;
            EdifactFramingSettings framingSettings = default;
            EdifactEnvelopeSettings envelopeSettings = default;
            EdifactAcknowledgementSettings acknowledgementSettings = default;
            EdifactMessageFilter messageFilter = default;
            EdifactProcessingSettings processingSettings = default;
            Optional<IList<EdifactEnvelopeOverride>> envelopeOverrides = default;
            Optional<IList<EdifactMessageIdentifier>> messageFilterList = default;
            IList<EdifactSchemaReference> schemaReferences = default;
            Optional<IList<EdifactValidationOverride>> validationOverrides = default;
            Optional<IList<EdifactDelimiterOverride>> edifactDelimiterOverrides = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("validationSettings"u8))
                {
                    validationSettings = EdifactValidationSettings.DeserializeEdifactValidationSettings(property.Value);
                    continue;
                }
                if (property.NameEquals("framingSettings"u8))
                {
                    framingSettings = EdifactFramingSettings.DeserializeEdifactFramingSettings(property.Value);
                    continue;
                }
                if (property.NameEquals("envelopeSettings"u8))
                {
                    envelopeSettings = EdifactEnvelopeSettings.DeserializeEdifactEnvelopeSettings(property.Value);
                    continue;
                }
                if (property.NameEquals("acknowledgementSettings"u8))
                {
                    acknowledgementSettings = EdifactAcknowledgementSettings.DeserializeEdifactAcknowledgementSettings(property.Value);
                    continue;
                }
                if (property.NameEquals("messageFilter"u8))
                {
                    messageFilter = EdifactMessageFilter.DeserializeEdifactMessageFilter(property.Value);
                    continue;
                }
                if (property.NameEquals("processingSettings"u8))
                {
                    processingSettings = EdifactProcessingSettings.DeserializeEdifactProcessingSettings(property.Value);
                    continue;
                }
                if (property.NameEquals("envelopeOverrides"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<EdifactEnvelopeOverride> array = new List<EdifactEnvelopeOverride>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(EdifactEnvelopeOverride.DeserializeEdifactEnvelopeOverride(item));
                    }
                    envelopeOverrides = array;
                    continue;
                }
                if (property.NameEquals("messageFilterList"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<EdifactMessageIdentifier> array = new List<EdifactMessageIdentifier>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(EdifactMessageIdentifier.DeserializeEdifactMessageIdentifier(item));
                    }
                    messageFilterList = array;
                    continue;
                }
                if (property.NameEquals("schemaReferences"u8))
                {
                    List<EdifactSchemaReference> array = new List<EdifactSchemaReference>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(EdifactSchemaReference.DeserializeEdifactSchemaReference(item));
                    }
                    schemaReferences = array;
                    continue;
                }
                if (property.NameEquals("validationOverrides"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<EdifactValidationOverride> array = new List<EdifactValidationOverride>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(EdifactValidationOverride.DeserializeEdifactValidationOverride(item));
                    }
                    validationOverrides = array;
                    continue;
                }
                if (property.NameEquals("edifactDelimiterOverrides"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<EdifactDelimiterOverride> array = new List<EdifactDelimiterOverride>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(EdifactDelimiterOverride.DeserializeEdifactDelimiterOverride(item));
                    }
                    edifactDelimiterOverrides = array;
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new EdifactProtocolSettings(validationSettings, framingSettings, envelopeSettings, acknowledgementSettings, messageFilter, processingSettings, Optional.ToList(envelopeOverrides), Optional.ToList(messageFilterList), schemaReferences, Optional.ToList(validationOverrides), Optional.ToList(edifactDelimiterOverrides), serializedAdditionalRawData);
        }

        private BinaryData SerializeBicep(ModelReaderWriterOptions options)
        {
            StringBuilder builder = new StringBuilder();
            builder.AppendLine("{");

            if (Optional.IsDefined(ValidationSettings))
            {
                builder.Append("  validationSettings:");
                AppendChildObject(builder, ValidationSettings, options, 2, false);
            }

            if (Optional.IsDefined(FramingSettings))
            {
                builder.Append("  framingSettings:");
                AppendChildObject(builder, FramingSettings, options, 2, false);
            }

            if (Optional.IsDefined(EnvelopeSettings))
            {
                builder.Append("  envelopeSettings:");
                AppendChildObject(builder, EnvelopeSettings, options, 2, false);
            }

            if (Optional.IsDefined(AcknowledgementSettings))
            {
                builder.Append("  acknowledgementSettings:");
                AppendChildObject(builder, AcknowledgementSettings, options, 2, false);
            }

            if (Optional.IsDefined(MessageFilter))
            {
                builder.Append("  messageFilter:");
                AppendChildObject(builder, MessageFilter, options, 2, false);
            }

            if (Optional.IsDefined(ProcessingSettings))
            {
                builder.Append("  processingSettings:");
                AppendChildObject(builder, ProcessingSettings, options, 2, false);
            }

            if (Optional.IsCollectionDefined(EnvelopeOverrides))
            {
                if (EnvelopeOverrides.Any())
                {
                    builder.Append("  envelopeOverrides:");
                    builder.AppendLine(" [");
                    foreach (var item in EnvelopeOverrides)
                    {
                        AppendChildObject(builder, item, options, 4, true);
                    }
                    builder.AppendLine("  ]");
                }
            }

            if (Optional.IsCollectionDefined(MessageFilterList))
            {
                if (MessageFilterList.Any())
                {
                    builder.Append("  messageFilterList:");
                    builder.AppendLine(" [");
                    foreach (var item in MessageFilterList)
                    {
                        AppendChildObject(builder, item, options, 4, true);
                    }
                    builder.AppendLine("  ]");
                }
            }

            if (Optional.IsCollectionDefined(SchemaReferences))
            {
                if (SchemaReferences.Any())
                {
                    builder.Append("  schemaReferences:");
                    builder.AppendLine(" [");
                    foreach (var item in SchemaReferences)
                    {
                        AppendChildObject(builder, item, options, 4, true);
                    }
                    builder.AppendLine("  ]");
                }
            }

            if (Optional.IsCollectionDefined(ValidationOverrides))
            {
                if (ValidationOverrides.Any())
                {
                    builder.Append("  validationOverrides:");
                    builder.AppendLine(" [");
                    foreach (var item in ValidationOverrides)
                    {
                        AppendChildObject(builder, item, options, 4, true);
                    }
                    builder.AppendLine("  ]");
                }
            }

            if (Optional.IsCollectionDefined(EdifactDelimiterOverrides))
            {
                if (EdifactDelimiterOverrides.Any())
                {
                    builder.Append("  edifactDelimiterOverrides:");
                    builder.AppendLine(" [");
                    foreach (var item in EdifactDelimiterOverrides)
                    {
                        AppendChildObject(builder, item, options, 4, true);
                    }
                    builder.AppendLine("  ]");
                }
            }

            builder.AppendLine("}");
            return BinaryData.FromString(builder.ToString());
        }

        private void AppendChildObject(StringBuilder stringBuilder, object childObject, ModelReaderWriterOptions options, int spaces, bool indentFirstLine)
        {
            string indent = new string(' ', spaces);
            BinaryData data = ModelReaderWriter.Write(childObject, options);
            string[] lines = data.ToString().Split(Environment.NewLine.ToCharArray(), StringSplitOptions.RemoveEmptyEntries);
            bool inMultilineString = false;
            for (int i = 0; i < lines.Length; i++)
            {
                string line = lines[i];
                if (inMultilineString)
                {
                    if (line.Contains("'''"))
                    {
                        inMultilineString = false;
                    }
                    stringBuilder.AppendLine(line);
                    continue;
                }
                if (line.Contains("'''"))
                {
                    inMultilineString = true;
                    stringBuilder.AppendLine($"{indent}{line}");
                    continue;
                }
                if (i == 0 && !indentFirstLine)
                {
                    stringBuilder.AppendLine($" {line}");
                }
                else
                {
                    stringBuilder.AppendLine($"{indent}{line}");
                }
            }
        }

        BinaryData IPersistableModel<EdifactProtocolSettings>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdifactProtocolSettings>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                case "B":
                    return SerializeBicep(options);
                default:
                    throw new FormatException($"The model {nameof(EdifactProtocolSettings)} does not support '{options.Format}' format.");
            }
        }

        EdifactProtocolSettings IPersistableModel<EdifactProtocolSettings>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdifactProtocolSettings>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeEdifactProtocolSettings(document.RootElement, options);
                    }
                case "B":
                    throw new InvalidOperationException("Bicep deserialization is not supported for this type.");
                default:
                    throw new FormatException($"The model {nameof(EdifactProtocolSettings)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdifactProtocolSettings>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
