// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Logic.Models
{
    public partial class EdifactProtocolSettings : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("validationSettings");
            writer.WriteObjectValue(ValidationSettings);
            writer.WritePropertyName("framingSettings");
            writer.WriteObjectValue(FramingSettings);
            writer.WritePropertyName("envelopeSettings");
            writer.WriteObjectValue(EnvelopeSettings);
            writer.WritePropertyName("acknowledgementSettings");
            writer.WriteObjectValue(AcknowledgementSettings);
            writer.WritePropertyName("messageFilter");
            writer.WriteObjectValue(MessageFilter);
            writer.WritePropertyName("processingSettings");
            writer.WriteObjectValue(ProcessingSettings);
            if (Optional.IsCollectionDefined(EnvelopeOverrides))
            {
                writer.WritePropertyName("envelopeOverrides");
                writer.WriteStartArray();
                foreach (var item in EnvelopeOverrides)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(MessageFilterList))
            {
                writer.WritePropertyName("messageFilterList");
                writer.WriteStartArray();
                foreach (var item in MessageFilterList)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WritePropertyName("schemaReferences");
            writer.WriteStartArray();
            foreach (var item in SchemaReferences)
            {
                writer.WriteObjectValue(item);
            }
            writer.WriteEndArray();
            if (Optional.IsCollectionDefined(ValidationOverrides))
            {
                writer.WritePropertyName("validationOverrides");
                writer.WriteStartArray();
                foreach (var item in ValidationOverrides)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(EdifactDelimiterOverrides))
            {
                writer.WritePropertyName("edifactDelimiterOverrides");
                writer.WriteStartArray();
                foreach (var item in EdifactDelimiterOverrides)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static EdifactProtocolSettings DeserializeEdifactProtocolSettings(JsonElement element)
        {
            EdifactValidationSettings validationSettings = default;
            EdifactFramingSettings framingSettings = default;
            EdifactEnvelopeSettings envelopeSettings = default;
            EdifactAcknowledgementSettings acknowledgementSettings = default;
            EdifactMessageFilter messageFilter = default;
            EdifactProcessingSettings processingSettings = default;
            Optional<IList<EdifactEnvelopeOverride>> envelopeOverrides = default;
            Optional<IList<EdifactMessageIdentifier>> messageFilterList = default;
            IList<EdifactSchemaReference> schemaReferences = default;
            Optional<IList<EdifactValidationOverride>> validationOverrides = default;
            Optional<IList<EdifactDelimiterOverride>> edifactDelimiterOverrides = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("validationSettings"))
                {
                    validationSettings = EdifactValidationSettings.DeserializeEdifactValidationSettings(property.Value);
                    continue;
                }
                if (property.NameEquals("framingSettings"))
                {
                    framingSettings = EdifactFramingSettings.DeserializeEdifactFramingSettings(property.Value);
                    continue;
                }
                if (property.NameEquals("envelopeSettings"))
                {
                    envelopeSettings = EdifactEnvelopeSettings.DeserializeEdifactEnvelopeSettings(property.Value);
                    continue;
                }
                if (property.NameEquals("acknowledgementSettings"))
                {
                    acknowledgementSettings = EdifactAcknowledgementSettings.DeserializeEdifactAcknowledgementSettings(property.Value);
                    continue;
                }
                if (property.NameEquals("messageFilter"))
                {
                    messageFilter = EdifactMessageFilter.DeserializeEdifactMessageFilter(property.Value);
                    continue;
                }
                if (property.NameEquals("processingSettings"))
                {
                    processingSettings = EdifactProcessingSettings.DeserializeEdifactProcessingSettings(property.Value);
                    continue;
                }
                if (property.NameEquals("envelopeOverrides"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<EdifactEnvelopeOverride> array = new List<EdifactEnvelopeOverride>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(EdifactEnvelopeOverride.DeserializeEdifactEnvelopeOverride(item));
                    }
                    envelopeOverrides = array;
                    continue;
                }
                if (property.NameEquals("messageFilterList"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<EdifactMessageIdentifier> array = new List<EdifactMessageIdentifier>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(EdifactMessageIdentifier.DeserializeEdifactMessageIdentifier(item));
                    }
                    messageFilterList = array;
                    continue;
                }
                if (property.NameEquals("schemaReferences"))
                {
                    List<EdifactSchemaReference> array = new List<EdifactSchemaReference>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(EdifactSchemaReference.DeserializeEdifactSchemaReference(item));
                    }
                    schemaReferences = array;
                    continue;
                }
                if (property.NameEquals("validationOverrides"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<EdifactValidationOverride> array = new List<EdifactValidationOverride>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(EdifactValidationOverride.DeserializeEdifactValidationOverride(item));
                    }
                    validationOverrides = array;
                    continue;
                }
                if (property.NameEquals("edifactDelimiterOverrides"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<EdifactDelimiterOverride> array = new List<EdifactDelimiterOverride>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(EdifactDelimiterOverride.DeserializeEdifactDelimiterOverride(item));
                    }
                    edifactDelimiterOverrides = array;
                    continue;
                }
            }
            return new EdifactProtocolSettings(validationSettings, framingSettings, envelopeSettings, acknowledgementSettings, messageFilter, processingSettings, Optional.ToList(envelopeOverrides), Optional.ToList(messageFilterList), schemaReferences, Optional.ToList(validationOverrides), Optional.ToList(edifactDelimiterOverrides));
        }
    }
}
