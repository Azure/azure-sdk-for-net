// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Logic.Models
{
    public partial class EdifactProtocolSettings : IUtf8JsonSerializable, IJsonModel<EdifactProtocolSettings>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdifactProtocolSettings>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<EdifactProtocolSettings>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdifactProtocolSettings>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdifactProtocolSettings)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            writer.WritePropertyName("validationSettings"u8);
            BinaryData data = ModelReaderWriter.Write(ValidationSettings, options);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(data);
#else
            using (JsonDocument document = JsonDocument.Parse(data))
            {
                JsonSerializer.Serialize(writer, document.RootElement);
            }
#endif
            writer.WritePropertyName("framingSettings"u8);
            BinaryData data0 = ModelReaderWriter.Write(FramingSettings, options);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(data0);
#else
            using (JsonDocument document = JsonDocument.Parse(data0))
            {
                JsonSerializer.Serialize(writer, document.RootElement);
            }
#endif
            writer.WritePropertyName("envelopeSettings"u8);
            BinaryData data1 = ModelReaderWriter.Write(EnvelopeSettings, options);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(data1);
#else
            using (JsonDocument document = JsonDocument.Parse(data1))
            {
                JsonSerializer.Serialize(writer, document.RootElement);
            }
#endif
            writer.WritePropertyName("acknowledgementSettings"u8);
            BinaryData data2 = ModelReaderWriter.Write(AcknowledgementSettings, options);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(data2);
#else
            using (JsonDocument document = JsonDocument.Parse(data2))
            {
                JsonSerializer.Serialize(writer, document.RootElement);
            }
#endif
            writer.WritePropertyName("messageFilter"u8);
            BinaryData data3 = ModelReaderWriter.Write(MessageFilter, options);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(data3);
#else
            using (JsonDocument document = JsonDocument.Parse(data3))
            {
                JsonSerializer.Serialize(writer, document.RootElement);
            }
#endif
            writer.WritePropertyName("processingSettings"u8);
            BinaryData data4 = ModelReaderWriter.Write(ProcessingSettings, options);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(data4);
#else
            using (JsonDocument document = JsonDocument.Parse(data4))
            {
                JsonSerializer.Serialize(writer, document.RootElement);
            }
#endif
            if (Optional.IsCollectionDefined(EnvelopeOverrides))
            {
                writer.WritePropertyName("envelopeOverrides"u8);
                writer.WriteStartArray();
                foreach (var item in EnvelopeOverrides)
                {
                    BinaryData data5 = ModelReaderWriter.Write(item, options);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(data5);
#else
                    using (JsonDocument document = JsonDocument.Parse(data5))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(MessageFilterList))
            {
                writer.WritePropertyName("messageFilterList"u8);
                writer.WriteStartArray();
                foreach (var item in MessageFilterList)
                {
                    BinaryData data5 = ModelReaderWriter.Write(item, options);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(data5);
#else
                    using (JsonDocument document = JsonDocument.Parse(data5))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
                writer.WriteEndArray();
            }
            writer.WritePropertyName("schemaReferences"u8);
            writer.WriteStartArray();
            foreach (var item in SchemaReferences)
            {
                BinaryData data5 = ModelReaderWriter.Write(item, options);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(data5);
#else
                using (JsonDocument document = JsonDocument.Parse(data5))
                {
                    JsonSerializer.Serialize(writer, document.RootElement);
                }
#endif
            }
            writer.WriteEndArray();
            if (Optional.IsCollectionDefined(ValidationOverrides))
            {
                writer.WritePropertyName("validationOverrides"u8);
                writer.WriteStartArray();
                foreach (var item in ValidationOverrides)
                {
                    BinaryData data5 = ModelReaderWriter.Write(item, options);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(data5);
#else
                    using (JsonDocument document = JsonDocument.Parse(data5))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(EdifactDelimiterOverrides))
            {
                writer.WritePropertyName("edifactDelimiterOverrides"u8);
                writer.WriteStartArray();
                foreach (var item in EdifactDelimiterOverrides)
                {
                    BinaryData data5 = ModelReaderWriter.Write(item, options);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(data5);
#else
                    using (JsonDocument document = JsonDocument.Parse(data5))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        EdifactProtocolSettings IJsonModel<EdifactProtocolSettings>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdifactProtocolSettings>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdifactProtocolSettings)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdifactProtocolSettings(document.RootElement, options);
        }

        internal static EdifactProtocolSettings DeserializeEdifactProtocolSettings(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            EdifactValidationSettings validationSettings = default;
            EdifactFramingSettings framingSettings = default;
            EdifactEnvelopeSettings envelopeSettings = default;
            EdifactAcknowledgementSettings acknowledgementSettings = default;
            EdifactMessageFilter messageFilter = default;
            EdifactProcessingSettings processingSettings = default;
            Optional<IList<EdifactEnvelopeOverride>> envelopeOverrides = default;
            Optional<IList<EdifactMessageIdentifier>> messageFilterList = default;
            IList<EdifactSchemaReference> schemaReferences = default;
            Optional<IList<EdifactValidationOverride>> validationOverrides = default;
            Optional<IList<EdifactDelimiterOverride>> edifactDelimiterOverrides = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("validationSettings"u8))
                {
                    validationSettings = EdifactValidationSettings.DeserializeEdifactValidationSettings(property.Value);
                    continue;
                }
                if (property.NameEquals("framingSettings"u8))
                {
                    framingSettings = EdifactFramingSettings.DeserializeEdifactFramingSettings(property.Value);
                    continue;
                }
                if (property.NameEquals("envelopeSettings"u8))
                {
                    envelopeSettings = EdifactEnvelopeSettings.DeserializeEdifactEnvelopeSettings(property.Value);
                    continue;
                }
                if (property.NameEquals("acknowledgementSettings"u8))
                {
                    acknowledgementSettings = EdifactAcknowledgementSettings.DeserializeEdifactAcknowledgementSettings(property.Value);
                    continue;
                }
                if (property.NameEquals("messageFilter"u8))
                {
                    messageFilter = EdifactMessageFilter.DeserializeEdifactMessageFilter(property.Value);
                    continue;
                }
                if (property.NameEquals("processingSettings"u8))
                {
                    processingSettings = EdifactProcessingSettings.DeserializeEdifactProcessingSettings(property.Value);
                    continue;
                }
                if (property.NameEquals("envelopeOverrides"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<EdifactEnvelopeOverride> array = new List<EdifactEnvelopeOverride>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(EdifactEnvelopeOverride.DeserializeEdifactEnvelopeOverride(item));
                    }
                    envelopeOverrides = array;
                    continue;
                }
                if (property.NameEquals("messageFilterList"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<EdifactMessageIdentifier> array = new List<EdifactMessageIdentifier>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(EdifactMessageIdentifier.DeserializeEdifactMessageIdentifier(item));
                    }
                    messageFilterList = array;
                    continue;
                }
                if (property.NameEquals("schemaReferences"u8))
                {
                    List<EdifactSchemaReference> array = new List<EdifactSchemaReference>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(EdifactSchemaReference.DeserializeEdifactSchemaReference(item));
                    }
                    schemaReferences = array;
                    continue;
                }
                if (property.NameEquals("validationOverrides"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<EdifactValidationOverride> array = new List<EdifactValidationOverride>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(EdifactValidationOverride.DeserializeEdifactValidationOverride(item));
                    }
                    validationOverrides = array;
                    continue;
                }
                if (property.NameEquals("edifactDelimiterOverrides"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<EdifactDelimiterOverride> array = new List<EdifactDelimiterOverride>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(EdifactDelimiterOverride.DeserializeEdifactDelimiterOverride(item));
                    }
                    edifactDelimiterOverrides = array;
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new EdifactProtocolSettings(validationSettings, framingSettings, envelopeSettings, acknowledgementSettings, messageFilter, processingSettings, Optional.ToList(envelopeOverrides), Optional.ToList(messageFilterList), schemaReferences, Optional.ToList(validationOverrides), Optional.ToList(edifactDelimiterOverrides), serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<EdifactProtocolSettings>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdifactProtocolSettings>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(EdifactProtocolSettings)} does not support '{options.Format}' format.");
            }
        }

        EdifactProtocolSettings IPersistableModel<EdifactProtocolSettings>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdifactProtocolSettings>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeEdifactProtocolSettings(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdifactProtocolSettings)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdifactProtocolSettings>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
