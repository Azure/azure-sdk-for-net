// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Logic.Models
{
    /// <summary>
    /// The workflow provisioning state.
    /// Serialized Name: WorkflowProvisioningState
    /// </summary>
    public readonly partial struct LogicAppWorkflowProvisioningState : IEquatable<LogicAppWorkflowProvisioningState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="LogicAppWorkflowProvisioningState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public LogicAppWorkflowProvisioningState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NotSpecifiedValue = "NotSpecified";
        private const string AcceptedValue = "Accepted";
        private const string RunningValue = "Running";
        private const string ReadyValue = "Ready";
        private const string CreatingValue = "Creating";
        private const string CreatedValue = "Created";
        private const string DeletingValue = "Deleting";
        private const string DeletedValue = "Deleted";
        private const string CanceledValue = "Canceled";
        private const string FailedValue = "Failed";
        private const string SucceededValue = "Succeeded";
        private const string MovingValue = "Moving";
        private const string UpdatingValue = "Updating";
        private const string RegisteringValue = "Registering";
        private const string RegisteredValue = "Registered";
        private const string UnregisteringValue = "Unregistering";
        private const string UnregisteredValue = "Unregistered";
        private const string CompletedValue = "Completed";
        private const string RenewingValue = "Renewing";
        private const string PendingValue = "Pending";
        private const string WaitingValue = "Waiting";
        private const string InProgressValue = "InProgress";

        /// <summary>
        /// NotSpecified
        /// Serialized Name: WorkflowProvisioningState.NotSpecified
        /// </summary>
        public static LogicAppWorkflowProvisioningState NotSpecified { get; } = new LogicAppWorkflowProvisioningState(NotSpecifiedValue);
        /// <summary>
        /// Accepted
        /// Serialized Name: WorkflowProvisioningState.Accepted
        /// </summary>
        public static LogicAppWorkflowProvisioningState Accepted { get; } = new LogicAppWorkflowProvisioningState(AcceptedValue);
        /// <summary>
        /// Running
        /// Serialized Name: WorkflowProvisioningState.Running
        /// </summary>
        public static LogicAppWorkflowProvisioningState Running { get; } = new LogicAppWorkflowProvisioningState(RunningValue);
        /// <summary>
        /// Ready
        /// Serialized Name: WorkflowProvisioningState.Ready
        /// </summary>
        public static LogicAppWorkflowProvisioningState Ready { get; } = new LogicAppWorkflowProvisioningState(ReadyValue);
        /// <summary>
        /// Creating
        /// Serialized Name: WorkflowProvisioningState.Creating
        /// </summary>
        public static LogicAppWorkflowProvisioningState Creating { get; } = new LogicAppWorkflowProvisioningState(CreatingValue);
        /// <summary>
        /// Created
        /// Serialized Name: WorkflowProvisioningState.Created
        /// </summary>
        public static LogicAppWorkflowProvisioningState Created { get; } = new LogicAppWorkflowProvisioningState(CreatedValue);
        /// <summary>
        /// Deleting
        /// Serialized Name: WorkflowProvisioningState.Deleting
        /// </summary>
        public static LogicAppWorkflowProvisioningState Deleting { get; } = new LogicAppWorkflowProvisioningState(DeletingValue);
        /// <summary>
        /// Deleted
        /// Serialized Name: WorkflowProvisioningState.Deleted
        /// </summary>
        public static LogicAppWorkflowProvisioningState Deleted { get; } = new LogicAppWorkflowProvisioningState(DeletedValue);
        /// <summary>
        /// Canceled
        /// Serialized Name: WorkflowProvisioningState.Canceled
        /// </summary>
        public static LogicAppWorkflowProvisioningState Canceled { get; } = new LogicAppWorkflowProvisioningState(CanceledValue);
        /// <summary>
        /// Failed
        /// Serialized Name: WorkflowProvisioningState.Failed
        /// </summary>
        public static LogicAppWorkflowProvisioningState Failed { get; } = new LogicAppWorkflowProvisioningState(FailedValue);
        /// <summary>
        /// Succeeded
        /// Serialized Name: WorkflowProvisioningState.Succeeded
        /// </summary>
        public static LogicAppWorkflowProvisioningState Succeeded { get; } = new LogicAppWorkflowProvisioningState(SucceededValue);
        /// <summary>
        /// Moving
        /// Serialized Name: WorkflowProvisioningState.Moving
        /// </summary>
        public static LogicAppWorkflowProvisioningState Moving { get; } = new LogicAppWorkflowProvisioningState(MovingValue);
        /// <summary>
        /// Updating
        /// Serialized Name: WorkflowProvisioningState.Updating
        /// </summary>
        public static LogicAppWorkflowProvisioningState Updating { get; } = new LogicAppWorkflowProvisioningState(UpdatingValue);
        /// <summary>
        /// Registering
        /// Serialized Name: WorkflowProvisioningState.Registering
        /// </summary>
        public static LogicAppWorkflowProvisioningState Registering { get; } = new LogicAppWorkflowProvisioningState(RegisteringValue);
        /// <summary>
        /// Registered
        /// Serialized Name: WorkflowProvisioningState.Registered
        /// </summary>
        public static LogicAppWorkflowProvisioningState Registered { get; } = new LogicAppWorkflowProvisioningState(RegisteredValue);
        /// <summary>
        /// Unregistering
        /// Serialized Name: WorkflowProvisioningState.Unregistering
        /// </summary>
        public static LogicAppWorkflowProvisioningState Unregistering { get; } = new LogicAppWorkflowProvisioningState(UnregisteringValue);
        /// <summary>
        /// Unregistered
        /// Serialized Name: WorkflowProvisioningState.Unregistered
        /// </summary>
        public static LogicAppWorkflowProvisioningState Unregistered { get; } = new LogicAppWorkflowProvisioningState(UnregisteredValue);
        /// <summary>
        /// Completed
        /// Serialized Name: WorkflowProvisioningState.Completed
        /// </summary>
        public static LogicAppWorkflowProvisioningState Completed { get; } = new LogicAppWorkflowProvisioningState(CompletedValue);
        /// <summary>
        /// Renewing
        /// Serialized Name: WorkflowProvisioningState.Renewing
        /// </summary>
        public static LogicAppWorkflowProvisioningState Renewing { get; } = new LogicAppWorkflowProvisioningState(RenewingValue);
        /// <summary>
        /// Pending
        /// Serialized Name: WorkflowProvisioningState.Pending
        /// </summary>
        public static LogicAppWorkflowProvisioningState Pending { get; } = new LogicAppWorkflowProvisioningState(PendingValue);
        /// <summary>
        /// Waiting
        /// Serialized Name: WorkflowProvisioningState.Waiting
        /// </summary>
        public static LogicAppWorkflowProvisioningState Waiting { get; } = new LogicAppWorkflowProvisioningState(WaitingValue);
        /// <summary>
        /// InProgress
        /// Serialized Name: WorkflowProvisioningState.InProgress
        /// </summary>
        public static LogicAppWorkflowProvisioningState InProgress { get; } = new LogicAppWorkflowProvisioningState(InProgressValue);
        /// <summary> Determines if two <see cref="LogicAppWorkflowProvisioningState"/> values are the same. </summary>
        public static bool operator ==(LogicAppWorkflowProvisioningState left, LogicAppWorkflowProvisioningState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="LogicAppWorkflowProvisioningState"/> values are not the same. </summary>
        public static bool operator !=(LogicAppWorkflowProvisioningState left, LogicAppWorkflowProvisioningState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="LogicAppWorkflowProvisioningState"/>. </summary>
        public static implicit operator LogicAppWorkflowProvisioningState(string value) => new LogicAppWorkflowProvisioningState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is LogicAppWorkflowProvisioningState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(LogicAppWorkflowProvisioningState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
