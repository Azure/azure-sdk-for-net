// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Logic.Models
{
    public partial class EdifactProcessingSettings : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("maskSecurityInfo"u8);
            writer.WriteBooleanValue(MaskSecurityInfo);
            writer.WritePropertyName("preserveInterchange"u8);
            writer.WriteBooleanValue(PreserveInterchange);
            writer.WritePropertyName("suspendInterchangeOnError"u8);
            writer.WriteBooleanValue(SuspendInterchangeOnError);
            writer.WritePropertyName("createEmptyXmlTagsForTrailingSeparators"u8);
            writer.WriteBooleanValue(CreateEmptyXmlTagsForTrailingSeparators);
            writer.WritePropertyName("useDotAsDecimalSeparator"u8);
            writer.WriteBooleanValue(UseDotAsDecimalSeparator);
            writer.WriteEndObject();
        }

        internal static EdifactProcessingSettings DeserializeEdifactProcessingSettings(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            bool maskSecurityInfo = default;
            bool preserveInterchange = default;
            bool suspendInterchangeOnError = default;
            bool createEmptyXmlTagsForTrailingSeparators = default;
            bool useDotAsDecimalSeparator = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("maskSecurityInfo"u8))
                {
                    maskSecurityInfo = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("preserveInterchange"u8))
                {
                    preserveInterchange = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("suspendInterchangeOnError"u8))
                {
                    suspendInterchangeOnError = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("createEmptyXmlTagsForTrailingSeparators"u8))
                {
                    createEmptyXmlTagsForTrailingSeparators = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("useDotAsDecimalSeparator"u8))
                {
                    useDotAsDecimalSeparator = property.Value.GetBoolean();
                    continue;
                }
            }
            return new EdifactProcessingSettings(maskSecurityInfo, preserveInterchange, suspendInterchangeOnError, createEmptyXmlTagsForTrailingSeparators, useDotAsDecimalSeparator);
        }
    }
}
