// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

namespace Azure.ResourceManager.Logic.Models
{
    /// <summary>
    /// The Edifact agreement envelope settings.
    /// Serialized Name: EdifactEnvelopeSettings
    /// </summary>
    public partial class EdifactEnvelopeSettings
    {
        /// <summary> Initializes a new instance of EdifactEnvelopeSettings. </summary>
        /// <param name="applyDelimiterStringAdvice">
        /// The value indicating whether to apply delimiter string advice.
        /// Serialized Name: EdifactEnvelopeSettings.applyDelimiterStringAdvice
        /// </param>
        /// <param name="createGroupingSegments">
        /// The value indicating whether to create grouping segments.
        /// Serialized Name: EdifactEnvelopeSettings.createGroupingSegments
        /// </param>
        /// <param name="enableDefaultGroupHeaders">
        /// The value indicating whether to enable default group headers.
        /// Serialized Name: EdifactEnvelopeSettings.enableDefaultGroupHeaders
        /// </param>
        /// <param name="interchangeControlNumberLowerBound">
        /// The interchange control number lower bound.
        /// Serialized Name: EdifactEnvelopeSettings.interchangeControlNumberLowerBound
        /// </param>
        /// <param name="interchangeControlNumberUpperBound">
        /// The interchange control number upper bound.
        /// Serialized Name: EdifactEnvelopeSettings.interchangeControlNumberUpperBound
        /// </param>
        /// <param name="rolloverInterchangeControlNumber">
        /// The value indicating whether to rollover interchange control number.
        /// Serialized Name: EdifactEnvelopeSettings.rolloverInterchangeControlNumber
        /// </param>
        /// <param name="groupControlNumberLowerBound">
        /// The group control number lower bound.
        /// Serialized Name: EdifactEnvelopeSettings.groupControlNumberLowerBound
        /// </param>
        /// <param name="groupControlNumberUpperBound">
        /// The group control number upper bound.
        /// Serialized Name: EdifactEnvelopeSettings.groupControlNumberUpperBound
        /// </param>
        /// <param name="rolloverGroupControlNumber">
        /// The value indicating whether to rollover group control number.
        /// Serialized Name: EdifactEnvelopeSettings.rolloverGroupControlNumber
        /// </param>
        /// <param name="overwriteExistingTransactionSetControlNumber">
        /// The value indicating whether to overwrite existing transaction set control number.
        /// Serialized Name: EdifactEnvelopeSettings.overwriteExistingTransactionSetControlNumber
        /// </param>
        /// <param name="transactionSetControlNumberLowerBound">
        /// The transaction set control number lower bound.
        /// Serialized Name: EdifactEnvelopeSettings.transactionSetControlNumberLowerBound
        /// </param>
        /// <param name="transactionSetControlNumberUpperBound">
        /// The transaction set control number upper bound.
        /// Serialized Name: EdifactEnvelopeSettings.transactionSetControlNumberUpperBound
        /// </param>
        /// <param name="rolloverTransactionSetControlNumber">
        /// The value indicating whether to rollover transaction set control number.
        /// Serialized Name: EdifactEnvelopeSettings.rolloverTransactionSetControlNumber
        /// </param>
        /// <param name="isTestInterchange">
        /// The value indicating whether the message is a test interchange.
        /// Serialized Name: EdifactEnvelopeSettings.isTestInterchange
        /// </param>
        public EdifactEnvelopeSettings(bool applyDelimiterStringAdvice, bool createGroupingSegments, bool enableDefaultGroupHeaders, long interchangeControlNumberLowerBound, long interchangeControlNumberUpperBound, bool rolloverInterchangeControlNumber, long groupControlNumberLowerBound, long groupControlNumberUpperBound, bool rolloverGroupControlNumber, bool overwriteExistingTransactionSetControlNumber, long transactionSetControlNumberLowerBound, long transactionSetControlNumberUpperBound, bool rolloverTransactionSetControlNumber, bool isTestInterchange)
        {
            ApplyDelimiterStringAdvice = applyDelimiterStringAdvice;
            CreateGroupingSegments = createGroupingSegments;
            EnableDefaultGroupHeaders = enableDefaultGroupHeaders;
            InterchangeControlNumberLowerBound = interchangeControlNumberLowerBound;
            InterchangeControlNumberUpperBound = interchangeControlNumberUpperBound;
            RolloverInterchangeControlNumber = rolloverInterchangeControlNumber;
            GroupControlNumberLowerBound = groupControlNumberLowerBound;
            GroupControlNumberUpperBound = groupControlNumberUpperBound;
            RolloverGroupControlNumber = rolloverGroupControlNumber;
            OverwriteExistingTransactionSetControlNumber = overwriteExistingTransactionSetControlNumber;
            TransactionSetControlNumberLowerBound = transactionSetControlNumberLowerBound;
            TransactionSetControlNumberUpperBound = transactionSetControlNumberUpperBound;
            RolloverTransactionSetControlNumber = rolloverTransactionSetControlNumber;
            IsTestInterchange = isTestInterchange;
        }

        /// <summary> Initializes a new instance of EdifactEnvelopeSettings. </summary>
        /// <param name="groupAssociationAssignedCode">
        /// The group association assigned code.
        /// Serialized Name: EdifactEnvelopeSettings.groupAssociationAssignedCode
        /// </param>
        /// <param name="communicationAgreementId">
        /// The communication agreement id.
        /// Serialized Name: EdifactEnvelopeSettings.communicationAgreementId
        /// </param>
        /// <param name="applyDelimiterStringAdvice">
        /// The value indicating whether to apply delimiter string advice.
        /// Serialized Name: EdifactEnvelopeSettings.applyDelimiterStringAdvice
        /// </param>
        /// <param name="createGroupingSegments">
        /// The value indicating whether to create grouping segments.
        /// Serialized Name: EdifactEnvelopeSettings.createGroupingSegments
        /// </param>
        /// <param name="enableDefaultGroupHeaders">
        /// The value indicating whether to enable default group headers.
        /// Serialized Name: EdifactEnvelopeSettings.enableDefaultGroupHeaders
        /// </param>
        /// <param name="recipientReferencePasswordValue">
        /// The recipient reference password value.
        /// Serialized Name: EdifactEnvelopeSettings.recipientReferencePasswordValue
        /// </param>
        /// <param name="recipientReferencePasswordQualifier">
        /// The recipient reference password qualifier.
        /// Serialized Name: EdifactEnvelopeSettings.recipientReferencePasswordQualifier
        /// </param>
        /// <param name="applicationReferenceId">
        /// The application reference id.
        /// Serialized Name: EdifactEnvelopeSettings.applicationReferenceId
        /// </param>
        /// <param name="processingPriorityCode">
        /// The processing priority code.
        /// Serialized Name: EdifactEnvelopeSettings.processingPriorityCode
        /// </param>
        /// <param name="interchangeControlNumberLowerBound">
        /// The interchange control number lower bound.
        /// Serialized Name: EdifactEnvelopeSettings.interchangeControlNumberLowerBound
        /// </param>
        /// <param name="interchangeControlNumberUpperBound">
        /// The interchange control number upper bound.
        /// Serialized Name: EdifactEnvelopeSettings.interchangeControlNumberUpperBound
        /// </param>
        /// <param name="rolloverInterchangeControlNumber">
        /// The value indicating whether to rollover interchange control number.
        /// Serialized Name: EdifactEnvelopeSettings.rolloverInterchangeControlNumber
        /// </param>
        /// <param name="interchangeControlNumberPrefix">
        /// The interchange control number prefix.
        /// Serialized Name: EdifactEnvelopeSettings.interchangeControlNumberPrefix
        /// </param>
        /// <param name="interchangeControlNumberSuffix">
        /// The interchange control number suffix.
        /// Serialized Name: EdifactEnvelopeSettings.interchangeControlNumberSuffix
        /// </param>
        /// <param name="senderReverseRoutingAddress">
        /// The sender reverse routing address.
        /// Serialized Name: EdifactEnvelopeSettings.senderReverseRoutingAddress
        /// </param>
        /// <param name="receiverReverseRoutingAddress">
        /// The receiver reverse routing address.
        /// Serialized Name: EdifactEnvelopeSettings.receiverReverseRoutingAddress
        /// </param>
        /// <param name="functionalGroupId">
        /// The functional group id.
        /// Serialized Name: EdifactEnvelopeSettings.functionalGroupId
        /// </param>
        /// <param name="groupControllingAgencyCode">
        /// The group controlling agency code.
        /// Serialized Name: EdifactEnvelopeSettings.groupControllingAgencyCode
        /// </param>
        /// <param name="groupMessageVersion">
        /// The group message version.
        /// Serialized Name: EdifactEnvelopeSettings.groupMessageVersion
        /// </param>
        /// <param name="groupMessageRelease">
        /// The group message release.
        /// Serialized Name: EdifactEnvelopeSettings.groupMessageRelease
        /// </param>
        /// <param name="groupControlNumberLowerBound">
        /// The group control number lower bound.
        /// Serialized Name: EdifactEnvelopeSettings.groupControlNumberLowerBound
        /// </param>
        /// <param name="groupControlNumberUpperBound">
        /// The group control number upper bound.
        /// Serialized Name: EdifactEnvelopeSettings.groupControlNumberUpperBound
        /// </param>
        /// <param name="rolloverGroupControlNumber">
        /// The value indicating whether to rollover group control number.
        /// Serialized Name: EdifactEnvelopeSettings.rolloverGroupControlNumber
        /// </param>
        /// <param name="groupControlNumberPrefix">
        /// The group control number prefix.
        /// Serialized Name: EdifactEnvelopeSettings.groupControlNumberPrefix
        /// </param>
        /// <param name="groupControlNumberSuffix">
        /// The group control number suffix.
        /// Serialized Name: EdifactEnvelopeSettings.groupControlNumberSuffix
        /// </param>
        /// <param name="groupApplicationReceiverQualifier">
        /// The group application receiver qualifier.
        /// Serialized Name: EdifactEnvelopeSettings.groupApplicationReceiverQualifier
        /// </param>
        /// <param name="groupApplicationReceiverId">
        /// The group application receiver id.
        /// Serialized Name: EdifactEnvelopeSettings.groupApplicationReceiverId
        /// </param>
        /// <param name="groupApplicationSenderQualifier">
        /// The group application sender qualifier.
        /// Serialized Name: EdifactEnvelopeSettings.groupApplicationSenderQualifier
        /// </param>
        /// <param name="groupApplicationSenderId">
        /// The group application sender id.
        /// Serialized Name: EdifactEnvelopeSettings.groupApplicationSenderId
        /// </param>
        /// <param name="groupApplicationPassword">
        /// The group application password.
        /// Serialized Name: EdifactEnvelopeSettings.groupApplicationPassword
        /// </param>
        /// <param name="overwriteExistingTransactionSetControlNumber">
        /// The value indicating whether to overwrite existing transaction set control number.
        /// Serialized Name: EdifactEnvelopeSettings.overwriteExistingTransactionSetControlNumber
        /// </param>
        /// <param name="transactionSetControlNumberPrefix">
        /// The transaction set control number prefix.
        /// Serialized Name: EdifactEnvelopeSettings.transactionSetControlNumberPrefix
        /// </param>
        /// <param name="transactionSetControlNumberSuffix">
        /// The transaction set control number suffix.
        /// Serialized Name: EdifactEnvelopeSettings.transactionSetControlNumberSuffix
        /// </param>
        /// <param name="transactionSetControlNumberLowerBound">
        /// The transaction set control number lower bound.
        /// Serialized Name: EdifactEnvelopeSettings.transactionSetControlNumberLowerBound
        /// </param>
        /// <param name="transactionSetControlNumberUpperBound">
        /// The transaction set control number upper bound.
        /// Serialized Name: EdifactEnvelopeSettings.transactionSetControlNumberUpperBound
        /// </param>
        /// <param name="rolloverTransactionSetControlNumber">
        /// The value indicating whether to rollover transaction set control number.
        /// Serialized Name: EdifactEnvelopeSettings.rolloverTransactionSetControlNumber
        /// </param>
        /// <param name="isTestInterchange">
        /// The value indicating whether the message is a test interchange.
        /// Serialized Name: EdifactEnvelopeSettings.isTestInterchange
        /// </param>
        /// <param name="senderInternalIdentification">
        /// The sender internal identification.
        /// Serialized Name: EdifactEnvelopeSettings.senderInternalIdentification
        /// </param>
        /// <param name="senderInternalSubIdentification">
        /// The sender internal sub identification.
        /// Serialized Name: EdifactEnvelopeSettings.senderInternalSubIdentification
        /// </param>
        /// <param name="receiverInternalIdentification">
        /// The receiver internal identification.
        /// Serialized Name: EdifactEnvelopeSettings.receiverInternalIdentification
        /// </param>
        /// <param name="receiverInternalSubIdentification">
        /// The receiver internal sub identification.
        /// Serialized Name: EdifactEnvelopeSettings.receiverInternalSubIdentification
        /// </param>
        internal EdifactEnvelopeSettings(string groupAssociationAssignedCode, string communicationAgreementId, bool applyDelimiterStringAdvice, bool createGroupingSegments, bool enableDefaultGroupHeaders, string recipientReferencePasswordValue, string recipientReferencePasswordQualifier, string applicationReferenceId, string processingPriorityCode, long interchangeControlNumberLowerBound, long interchangeControlNumberUpperBound, bool rolloverInterchangeControlNumber, string interchangeControlNumberPrefix, string interchangeControlNumberSuffix, string senderReverseRoutingAddress, string receiverReverseRoutingAddress, string functionalGroupId, string groupControllingAgencyCode, string groupMessageVersion, string groupMessageRelease, long groupControlNumberLowerBound, long groupControlNumberUpperBound, bool rolloverGroupControlNumber, string groupControlNumberPrefix, string groupControlNumberSuffix, string groupApplicationReceiverQualifier, string groupApplicationReceiverId, string groupApplicationSenderQualifier, string groupApplicationSenderId, string groupApplicationPassword, bool overwriteExistingTransactionSetControlNumber, string transactionSetControlNumberPrefix, string transactionSetControlNumberSuffix, long transactionSetControlNumberLowerBound, long transactionSetControlNumberUpperBound, bool rolloverTransactionSetControlNumber, bool isTestInterchange, string senderInternalIdentification, string senderInternalSubIdentification, string receiverInternalIdentification, string receiverInternalSubIdentification)
        {
            GroupAssociationAssignedCode = groupAssociationAssignedCode;
            CommunicationAgreementId = communicationAgreementId;
            ApplyDelimiterStringAdvice = applyDelimiterStringAdvice;
            CreateGroupingSegments = createGroupingSegments;
            EnableDefaultGroupHeaders = enableDefaultGroupHeaders;
            RecipientReferencePasswordValue = recipientReferencePasswordValue;
            RecipientReferencePasswordQualifier = recipientReferencePasswordQualifier;
            ApplicationReferenceId = applicationReferenceId;
            ProcessingPriorityCode = processingPriorityCode;
            InterchangeControlNumberLowerBound = interchangeControlNumberLowerBound;
            InterchangeControlNumberUpperBound = interchangeControlNumberUpperBound;
            RolloverInterchangeControlNumber = rolloverInterchangeControlNumber;
            InterchangeControlNumberPrefix = interchangeControlNumberPrefix;
            InterchangeControlNumberSuffix = interchangeControlNumberSuffix;
            SenderReverseRoutingAddress = senderReverseRoutingAddress;
            ReceiverReverseRoutingAddress = receiverReverseRoutingAddress;
            FunctionalGroupId = functionalGroupId;
            GroupControllingAgencyCode = groupControllingAgencyCode;
            GroupMessageVersion = groupMessageVersion;
            GroupMessageRelease = groupMessageRelease;
            GroupControlNumberLowerBound = groupControlNumberLowerBound;
            GroupControlNumberUpperBound = groupControlNumberUpperBound;
            RolloverGroupControlNumber = rolloverGroupControlNumber;
            GroupControlNumberPrefix = groupControlNumberPrefix;
            GroupControlNumberSuffix = groupControlNumberSuffix;
            GroupApplicationReceiverQualifier = groupApplicationReceiverQualifier;
            GroupApplicationReceiverId = groupApplicationReceiverId;
            GroupApplicationSenderQualifier = groupApplicationSenderQualifier;
            GroupApplicationSenderId = groupApplicationSenderId;
            GroupApplicationPassword = groupApplicationPassword;
            OverwriteExistingTransactionSetControlNumber = overwriteExistingTransactionSetControlNumber;
            TransactionSetControlNumberPrefix = transactionSetControlNumberPrefix;
            TransactionSetControlNumberSuffix = transactionSetControlNumberSuffix;
            TransactionSetControlNumberLowerBound = transactionSetControlNumberLowerBound;
            TransactionSetControlNumberUpperBound = transactionSetControlNumberUpperBound;
            RolloverTransactionSetControlNumber = rolloverTransactionSetControlNumber;
            IsTestInterchange = isTestInterchange;
            SenderInternalIdentification = senderInternalIdentification;
            SenderInternalSubIdentification = senderInternalSubIdentification;
            ReceiverInternalIdentification = receiverInternalIdentification;
            ReceiverInternalSubIdentification = receiverInternalSubIdentification;
        }

        /// <summary>
        /// The group association assigned code.
        /// Serialized Name: EdifactEnvelopeSettings.groupAssociationAssignedCode
        /// </summary>
        public string GroupAssociationAssignedCode { get; set; }
        /// <summary>
        /// The communication agreement id.
        /// Serialized Name: EdifactEnvelopeSettings.communicationAgreementId
        /// </summary>
        public string CommunicationAgreementId { get; set; }
        /// <summary>
        /// The value indicating whether to apply delimiter string advice.
        /// Serialized Name: EdifactEnvelopeSettings.applyDelimiterStringAdvice
        /// </summary>
        public bool ApplyDelimiterStringAdvice { get; set; }
        /// <summary>
        /// The value indicating whether to create grouping segments.
        /// Serialized Name: EdifactEnvelopeSettings.createGroupingSegments
        /// </summary>
        public bool CreateGroupingSegments { get; set; }
        /// <summary>
        /// The value indicating whether to enable default group headers.
        /// Serialized Name: EdifactEnvelopeSettings.enableDefaultGroupHeaders
        /// </summary>
        public bool EnableDefaultGroupHeaders { get; set; }
        /// <summary>
        /// The recipient reference password value.
        /// Serialized Name: EdifactEnvelopeSettings.recipientReferencePasswordValue
        /// </summary>
        public string RecipientReferencePasswordValue { get; set; }
        /// <summary>
        /// The recipient reference password qualifier.
        /// Serialized Name: EdifactEnvelopeSettings.recipientReferencePasswordQualifier
        /// </summary>
        public string RecipientReferencePasswordQualifier { get; set; }
        /// <summary>
        /// The application reference id.
        /// Serialized Name: EdifactEnvelopeSettings.applicationReferenceId
        /// </summary>
        public string ApplicationReferenceId { get; set; }
        /// <summary>
        /// The processing priority code.
        /// Serialized Name: EdifactEnvelopeSettings.processingPriorityCode
        /// </summary>
        public string ProcessingPriorityCode { get; set; }
        /// <summary>
        /// The interchange control number lower bound.
        /// Serialized Name: EdifactEnvelopeSettings.interchangeControlNumberLowerBound
        /// </summary>
        public long InterchangeControlNumberLowerBound { get; set; }
        /// <summary>
        /// The interchange control number upper bound.
        /// Serialized Name: EdifactEnvelopeSettings.interchangeControlNumberUpperBound
        /// </summary>
        public long InterchangeControlNumberUpperBound { get; set; }
        /// <summary>
        /// The value indicating whether to rollover interchange control number.
        /// Serialized Name: EdifactEnvelopeSettings.rolloverInterchangeControlNumber
        /// </summary>
        public bool RolloverInterchangeControlNumber { get; set; }
        /// <summary>
        /// The interchange control number prefix.
        /// Serialized Name: EdifactEnvelopeSettings.interchangeControlNumberPrefix
        /// </summary>
        public string InterchangeControlNumberPrefix { get; set; }
        /// <summary>
        /// The interchange control number suffix.
        /// Serialized Name: EdifactEnvelopeSettings.interchangeControlNumberSuffix
        /// </summary>
        public string InterchangeControlNumberSuffix { get; set; }
        /// <summary>
        /// The sender reverse routing address.
        /// Serialized Name: EdifactEnvelopeSettings.senderReverseRoutingAddress
        /// </summary>
        public string SenderReverseRoutingAddress { get; set; }
        /// <summary>
        /// The receiver reverse routing address.
        /// Serialized Name: EdifactEnvelopeSettings.receiverReverseRoutingAddress
        /// </summary>
        public string ReceiverReverseRoutingAddress { get; set; }
        /// <summary>
        /// The functional group id.
        /// Serialized Name: EdifactEnvelopeSettings.functionalGroupId
        /// </summary>
        public string FunctionalGroupId { get; set; }
        /// <summary>
        /// The group controlling agency code.
        /// Serialized Name: EdifactEnvelopeSettings.groupControllingAgencyCode
        /// </summary>
        public string GroupControllingAgencyCode { get; set; }
        /// <summary>
        /// The group message version.
        /// Serialized Name: EdifactEnvelopeSettings.groupMessageVersion
        /// </summary>
        public string GroupMessageVersion { get; set; }
        /// <summary>
        /// The group message release.
        /// Serialized Name: EdifactEnvelopeSettings.groupMessageRelease
        /// </summary>
        public string GroupMessageRelease { get; set; }
        /// <summary>
        /// The group control number lower bound.
        /// Serialized Name: EdifactEnvelopeSettings.groupControlNumberLowerBound
        /// </summary>
        public long GroupControlNumberLowerBound { get; set; }
        /// <summary>
        /// The group control number upper bound.
        /// Serialized Name: EdifactEnvelopeSettings.groupControlNumberUpperBound
        /// </summary>
        public long GroupControlNumberUpperBound { get; set; }
        /// <summary>
        /// The value indicating whether to rollover group control number.
        /// Serialized Name: EdifactEnvelopeSettings.rolloverGroupControlNumber
        /// </summary>
        public bool RolloverGroupControlNumber { get; set; }
        /// <summary>
        /// The group control number prefix.
        /// Serialized Name: EdifactEnvelopeSettings.groupControlNumberPrefix
        /// </summary>
        public string GroupControlNumberPrefix { get; set; }
        /// <summary>
        /// The group control number suffix.
        /// Serialized Name: EdifactEnvelopeSettings.groupControlNumberSuffix
        /// </summary>
        public string GroupControlNumberSuffix { get; set; }
        /// <summary>
        /// The group application receiver qualifier.
        /// Serialized Name: EdifactEnvelopeSettings.groupApplicationReceiverQualifier
        /// </summary>
        public string GroupApplicationReceiverQualifier { get; set; }
        /// <summary>
        /// The group application receiver id.
        /// Serialized Name: EdifactEnvelopeSettings.groupApplicationReceiverId
        /// </summary>
        public string GroupApplicationReceiverId { get; set; }
        /// <summary>
        /// The group application sender qualifier.
        /// Serialized Name: EdifactEnvelopeSettings.groupApplicationSenderQualifier
        /// </summary>
        public string GroupApplicationSenderQualifier { get; set; }
        /// <summary>
        /// The group application sender id.
        /// Serialized Name: EdifactEnvelopeSettings.groupApplicationSenderId
        /// </summary>
        public string GroupApplicationSenderId { get; set; }
        /// <summary>
        /// The group application password.
        /// Serialized Name: EdifactEnvelopeSettings.groupApplicationPassword
        /// </summary>
        public string GroupApplicationPassword { get; set; }
        /// <summary>
        /// The value indicating whether to overwrite existing transaction set control number.
        /// Serialized Name: EdifactEnvelopeSettings.overwriteExistingTransactionSetControlNumber
        /// </summary>
        public bool OverwriteExistingTransactionSetControlNumber { get; set; }
        /// <summary>
        /// The transaction set control number prefix.
        /// Serialized Name: EdifactEnvelopeSettings.transactionSetControlNumberPrefix
        /// </summary>
        public string TransactionSetControlNumberPrefix { get; set; }
        /// <summary>
        /// The transaction set control number suffix.
        /// Serialized Name: EdifactEnvelopeSettings.transactionSetControlNumberSuffix
        /// </summary>
        public string TransactionSetControlNumberSuffix { get; set; }
        /// <summary>
        /// The transaction set control number lower bound.
        /// Serialized Name: EdifactEnvelopeSettings.transactionSetControlNumberLowerBound
        /// </summary>
        public long TransactionSetControlNumberLowerBound { get; set; }
        /// <summary>
        /// The transaction set control number upper bound.
        /// Serialized Name: EdifactEnvelopeSettings.transactionSetControlNumberUpperBound
        /// </summary>
        public long TransactionSetControlNumberUpperBound { get; set; }
        /// <summary>
        /// The value indicating whether to rollover transaction set control number.
        /// Serialized Name: EdifactEnvelopeSettings.rolloverTransactionSetControlNumber
        /// </summary>
        public bool RolloverTransactionSetControlNumber { get; set; }
        /// <summary>
        /// The value indicating whether the message is a test interchange.
        /// Serialized Name: EdifactEnvelopeSettings.isTestInterchange
        /// </summary>
        public bool IsTestInterchange { get; set; }
        /// <summary>
        /// The sender internal identification.
        /// Serialized Name: EdifactEnvelopeSettings.senderInternalIdentification
        /// </summary>
        public string SenderInternalIdentification { get; set; }
        /// <summary>
        /// The sender internal sub identification.
        /// Serialized Name: EdifactEnvelopeSettings.senderInternalSubIdentification
        /// </summary>
        public string SenderInternalSubIdentification { get; set; }
        /// <summary>
        /// The receiver internal identification.
        /// Serialized Name: EdifactEnvelopeSettings.receiverInternalIdentification
        /// </summary>
        public string ReceiverInternalIdentification { get; set; }
        /// <summary>
        /// The receiver internal sub identification.
        /// Serialized Name: EdifactEnvelopeSettings.receiverInternalSubIdentification
        /// </summary>
        public string ReceiverInternalSubIdentification { get; set; }
    }
}
