// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Logic.Models
{
    public partial class EdifactEnvelopeOverride : IUtf8JsonSerializable, IJsonModel<EdifactEnvelopeOverride>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdifactEnvelopeOverride>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<EdifactEnvelopeOverride>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdifactEnvelopeOverride>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdifactEnvelopeOverride)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (Optional.IsDefined(MessageId))
            {
                writer.WritePropertyName("messageId"u8);
                writer.WriteStringValue(MessageId);
            }
            if (Optional.IsDefined(MessageVersion))
            {
                writer.WritePropertyName("messageVersion"u8);
                writer.WriteStringValue(MessageVersion);
            }
            if (Optional.IsDefined(MessageRelease))
            {
                writer.WritePropertyName("messageRelease"u8);
                writer.WriteStringValue(MessageRelease);
            }
            if (Optional.IsDefined(MessageAssociationAssignedCode))
            {
                writer.WritePropertyName("messageAssociationAssignedCode"u8);
                writer.WriteStringValue(MessageAssociationAssignedCode);
            }
            if (Optional.IsDefined(TargetNamespace))
            {
                writer.WritePropertyName("targetNamespace"u8);
                writer.WriteStringValue(TargetNamespace);
            }
            if (Optional.IsDefined(FunctionalGroupId))
            {
                writer.WritePropertyName("functionalGroupId"u8);
                writer.WriteStringValue(FunctionalGroupId);
            }
            if (Optional.IsDefined(SenderApplicationQualifier))
            {
                writer.WritePropertyName("senderApplicationQualifier"u8);
                writer.WriteStringValue(SenderApplicationQualifier);
            }
            if (Optional.IsDefined(SenderApplicationId))
            {
                writer.WritePropertyName("senderApplicationId"u8);
                writer.WriteStringValue(SenderApplicationId);
            }
            if (Optional.IsDefined(ReceiverApplicationQualifier))
            {
                writer.WritePropertyName("receiverApplicationQualifier"u8);
                writer.WriteStringValue(ReceiverApplicationQualifier);
            }
            if (Optional.IsDefined(ReceiverApplicationId))
            {
                writer.WritePropertyName("receiverApplicationId"u8);
                writer.WriteStringValue(ReceiverApplicationId);
            }
            if (Optional.IsDefined(ControllingAgencyCode))
            {
                writer.WritePropertyName("controllingAgencyCode"u8);
                writer.WriteStringValue(ControllingAgencyCode);
            }
            if (Optional.IsDefined(GroupHeaderMessageVersion))
            {
                writer.WritePropertyName("groupHeaderMessageVersion"u8);
                writer.WriteStringValue(GroupHeaderMessageVersion);
            }
            if (Optional.IsDefined(GroupHeaderMessageRelease))
            {
                writer.WritePropertyName("groupHeaderMessageRelease"u8);
                writer.WriteStringValue(GroupHeaderMessageRelease);
            }
            if (Optional.IsDefined(AssociationAssignedCode))
            {
                writer.WritePropertyName("associationAssignedCode"u8);
                writer.WriteStringValue(AssociationAssignedCode);
            }
            if (Optional.IsDefined(ApplicationPassword))
            {
                writer.WritePropertyName("applicationPassword"u8);
                writer.WriteStringValue(ApplicationPassword);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        EdifactEnvelopeOverride IJsonModel<EdifactEnvelopeOverride>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdifactEnvelopeOverride>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdifactEnvelopeOverride)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdifactEnvelopeOverride(document.RootElement, options);
        }

        internal static EdifactEnvelopeOverride DeserializeEdifactEnvelopeOverride(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> messageId = default;
            Optional<string> messageVersion = default;
            Optional<string> messageRelease = default;
            Optional<string> messageAssociationAssignedCode = default;
            Optional<string> targetNamespace = default;
            Optional<string> functionalGroupId = default;
            Optional<string> senderApplicationQualifier = default;
            Optional<string> senderApplicationId = default;
            Optional<string> receiverApplicationQualifier = default;
            Optional<string> receiverApplicationId = default;
            Optional<string> controllingAgencyCode = default;
            Optional<string> groupHeaderMessageVersion = default;
            Optional<string> groupHeaderMessageRelease = default;
            Optional<string> associationAssignedCode = default;
            Optional<string> applicationPassword = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("messageId"u8))
                {
                    messageId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("messageVersion"u8))
                {
                    messageVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("messageRelease"u8))
                {
                    messageRelease = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("messageAssociationAssignedCode"u8))
                {
                    messageAssociationAssignedCode = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("targetNamespace"u8))
                {
                    targetNamespace = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("functionalGroupId"u8))
                {
                    functionalGroupId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("senderApplicationQualifier"u8))
                {
                    senderApplicationQualifier = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("senderApplicationId"u8))
                {
                    senderApplicationId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("receiverApplicationQualifier"u8))
                {
                    receiverApplicationQualifier = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("receiverApplicationId"u8))
                {
                    receiverApplicationId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("controllingAgencyCode"u8))
                {
                    controllingAgencyCode = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("groupHeaderMessageVersion"u8))
                {
                    groupHeaderMessageVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("groupHeaderMessageRelease"u8))
                {
                    groupHeaderMessageRelease = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("associationAssignedCode"u8))
                {
                    associationAssignedCode = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("applicationPassword"u8))
                {
                    applicationPassword = property.Value.GetString();
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new EdifactEnvelopeOverride(messageId.Value, messageVersion.Value, messageRelease.Value, messageAssociationAssignedCode.Value, targetNamespace.Value, functionalGroupId.Value, senderApplicationQualifier.Value, senderApplicationId.Value, receiverApplicationQualifier.Value, receiverApplicationId.Value, controllingAgencyCode.Value, groupHeaderMessageVersion.Value, groupHeaderMessageRelease.Value, associationAssignedCode.Value, applicationPassword.Value, serializedAdditionalRawData);
        }

        private BinaryData SerializeBicep(ModelReaderWriterOptions options)
        {
            StringBuilder builder = new StringBuilder();
            builder.AppendLine("{");

            if (Optional.IsDefined(MessageId))
            {
                builder.Append("  messageId:");
                if (MessageId.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{MessageId}'''");
                }
                else
                {
                    builder.AppendLine($" '{MessageId}'");
                }
            }

            if (Optional.IsDefined(MessageVersion))
            {
                builder.Append("  messageVersion:");
                if (MessageVersion.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{MessageVersion}'''");
                }
                else
                {
                    builder.AppendLine($" '{MessageVersion}'");
                }
            }

            if (Optional.IsDefined(MessageRelease))
            {
                builder.Append("  messageRelease:");
                if (MessageRelease.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{MessageRelease}'''");
                }
                else
                {
                    builder.AppendLine($" '{MessageRelease}'");
                }
            }

            if (Optional.IsDefined(MessageAssociationAssignedCode))
            {
                builder.Append("  messageAssociationAssignedCode:");
                if (MessageAssociationAssignedCode.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{MessageAssociationAssignedCode}'''");
                }
                else
                {
                    builder.AppendLine($" '{MessageAssociationAssignedCode}'");
                }
            }

            if (Optional.IsDefined(TargetNamespace))
            {
                builder.Append("  targetNamespace:");
                if (TargetNamespace.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{TargetNamespace}'''");
                }
                else
                {
                    builder.AppendLine($" '{TargetNamespace}'");
                }
            }

            if (Optional.IsDefined(FunctionalGroupId))
            {
                builder.Append("  functionalGroupId:");
                if (FunctionalGroupId.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{FunctionalGroupId}'''");
                }
                else
                {
                    builder.AppendLine($" '{FunctionalGroupId}'");
                }
            }

            if (Optional.IsDefined(SenderApplicationQualifier))
            {
                builder.Append("  senderApplicationQualifier:");
                if (SenderApplicationQualifier.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{SenderApplicationQualifier}'''");
                }
                else
                {
                    builder.AppendLine($" '{SenderApplicationQualifier}'");
                }
            }

            if (Optional.IsDefined(SenderApplicationId))
            {
                builder.Append("  senderApplicationId:");
                if (SenderApplicationId.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{SenderApplicationId}'''");
                }
                else
                {
                    builder.AppendLine($" '{SenderApplicationId}'");
                }
            }

            if (Optional.IsDefined(ReceiverApplicationQualifier))
            {
                builder.Append("  receiverApplicationQualifier:");
                if (ReceiverApplicationQualifier.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{ReceiverApplicationQualifier}'''");
                }
                else
                {
                    builder.AppendLine($" '{ReceiverApplicationQualifier}'");
                }
            }

            if (Optional.IsDefined(ReceiverApplicationId))
            {
                builder.Append("  receiverApplicationId:");
                if (ReceiverApplicationId.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{ReceiverApplicationId}'''");
                }
                else
                {
                    builder.AppendLine($" '{ReceiverApplicationId}'");
                }
            }

            if (Optional.IsDefined(ControllingAgencyCode))
            {
                builder.Append("  controllingAgencyCode:");
                if (ControllingAgencyCode.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{ControllingAgencyCode}'''");
                }
                else
                {
                    builder.AppendLine($" '{ControllingAgencyCode}'");
                }
            }

            if (Optional.IsDefined(GroupHeaderMessageVersion))
            {
                builder.Append("  groupHeaderMessageVersion:");
                if (GroupHeaderMessageVersion.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{GroupHeaderMessageVersion}'''");
                }
                else
                {
                    builder.AppendLine($" '{GroupHeaderMessageVersion}'");
                }
            }

            if (Optional.IsDefined(GroupHeaderMessageRelease))
            {
                builder.Append("  groupHeaderMessageRelease:");
                if (GroupHeaderMessageRelease.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{GroupHeaderMessageRelease}'''");
                }
                else
                {
                    builder.AppendLine($" '{GroupHeaderMessageRelease}'");
                }
            }

            if (Optional.IsDefined(AssociationAssignedCode))
            {
                builder.Append("  associationAssignedCode:");
                if (AssociationAssignedCode.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{AssociationAssignedCode}'''");
                }
                else
                {
                    builder.AppendLine($" '{AssociationAssignedCode}'");
                }
            }

            if (Optional.IsDefined(ApplicationPassword))
            {
                builder.Append("  applicationPassword:");
                if (ApplicationPassword.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{ApplicationPassword}'''");
                }
                else
                {
                    builder.AppendLine($" '{ApplicationPassword}'");
                }
            }

            builder.AppendLine("}");
            return BinaryData.FromString(builder.ToString());
        }

        private void AppendChildObject(StringBuilder stringBuilder, object childObject, ModelReaderWriterOptions options, int spaces, bool indentFirstLine)
        {
            string indent = new string(' ', spaces);
            BinaryData data = ModelReaderWriter.Write(childObject, options);
            string[] lines = data.ToString().Split(Environment.NewLine.ToCharArray(), StringSplitOptions.RemoveEmptyEntries);
            bool inMultilineString = false;
            for (int i = 0; i < lines.Length; i++)
            {
                string line = lines[i];
                if (inMultilineString)
                {
                    if (line.Contains("'''"))
                    {
                        inMultilineString = false;
                    }
                    stringBuilder.AppendLine(line);
                    continue;
                }
                if (line.Contains("'''"))
                {
                    inMultilineString = true;
                    stringBuilder.AppendLine($"{indent}{line}");
                    continue;
                }
                if (i == 0 && !indentFirstLine)
                {
                    stringBuilder.AppendLine($" {line}");
                }
                else
                {
                    stringBuilder.AppendLine($"{indent}{line}");
                }
            }
        }

        BinaryData IPersistableModel<EdifactEnvelopeOverride>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdifactEnvelopeOverride>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                case "B":
                    return SerializeBicep(options);
                default:
                    throw new FormatException($"The model {nameof(EdifactEnvelopeOverride)} does not support '{options.Format}' format.");
            }
        }

        EdifactEnvelopeOverride IPersistableModel<EdifactEnvelopeOverride>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdifactEnvelopeOverride>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeEdifactEnvelopeOverride(document.RootElement, options);
                    }
                case "B":
                    throw new InvalidOperationException("Bicep deserialization is not supported for this type.");
                default:
                    throw new FormatException($"The model {nameof(EdifactEnvelopeOverride)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdifactEnvelopeOverride>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
