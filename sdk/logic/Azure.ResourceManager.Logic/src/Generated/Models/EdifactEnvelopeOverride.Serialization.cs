// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Logic.Models
{
    public partial class EdifactEnvelopeOverride : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(MessageId))
            {
                writer.WritePropertyName("messageId"u8);
                writer.WriteStringValue(MessageId);
            }
            if (Core.Optional.IsDefined(MessageVersion))
            {
                writer.WritePropertyName("messageVersion"u8);
                writer.WriteStringValue(MessageVersion);
            }
            if (Core.Optional.IsDefined(MessageRelease))
            {
                writer.WritePropertyName("messageRelease"u8);
                writer.WriteStringValue(MessageRelease);
            }
            if (Core.Optional.IsDefined(MessageAssociationAssignedCode))
            {
                writer.WritePropertyName("messageAssociationAssignedCode"u8);
                writer.WriteStringValue(MessageAssociationAssignedCode);
            }
            if (Core.Optional.IsDefined(TargetNamespace))
            {
                writer.WritePropertyName("targetNamespace"u8);
                writer.WriteStringValue(TargetNamespace);
            }
            if (Core.Optional.IsDefined(FunctionalGroupId))
            {
                writer.WritePropertyName("functionalGroupId"u8);
                writer.WriteStringValue(FunctionalGroupId);
            }
            if (Core.Optional.IsDefined(SenderApplicationQualifier))
            {
                writer.WritePropertyName("senderApplicationQualifier"u8);
                writer.WriteStringValue(SenderApplicationQualifier);
            }
            if (Core.Optional.IsDefined(SenderApplicationId))
            {
                writer.WritePropertyName("senderApplicationId"u8);
                writer.WriteStringValue(SenderApplicationId);
            }
            if (Core.Optional.IsDefined(ReceiverApplicationQualifier))
            {
                writer.WritePropertyName("receiverApplicationQualifier"u8);
                writer.WriteStringValue(ReceiverApplicationQualifier);
            }
            if (Core.Optional.IsDefined(ReceiverApplicationId))
            {
                writer.WritePropertyName("receiverApplicationId"u8);
                writer.WriteStringValue(ReceiverApplicationId);
            }
            if (Core.Optional.IsDefined(ControllingAgencyCode))
            {
                writer.WritePropertyName("controllingAgencyCode"u8);
                writer.WriteStringValue(ControllingAgencyCode);
            }
            if (Core.Optional.IsDefined(GroupHeaderMessageVersion))
            {
                writer.WritePropertyName("groupHeaderMessageVersion"u8);
                writer.WriteStringValue(GroupHeaderMessageVersion);
            }
            if (Core.Optional.IsDefined(GroupHeaderMessageRelease))
            {
                writer.WritePropertyName("groupHeaderMessageRelease"u8);
                writer.WriteStringValue(GroupHeaderMessageRelease);
            }
            if (Core.Optional.IsDefined(AssociationAssignedCode))
            {
                writer.WritePropertyName("associationAssignedCode"u8);
                writer.WriteStringValue(AssociationAssignedCode);
            }
            if (Core.Optional.IsDefined(ApplicationPassword))
            {
                writer.WritePropertyName("applicationPassword"u8);
                writer.WriteStringValue(ApplicationPassword);
            }
            writer.WriteEndObject();
        }

        internal static EdifactEnvelopeOverride DeserializeEdifactEnvelopeOverride(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<string> messageId = default;
            Core.Optional<string> messageVersion = default;
            Core.Optional<string> messageRelease = default;
            Core.Optional<string> messageAssociationAssignedCode = default;
            Core.Optional<string> targetNamespace = default;
            Core.Optional<string> functionalGroupId = default;
            Core.Optional<string> senderApplicationQualifier = default;
            Core.Optional<string> senderApplicationId = default;
            Core.Optional<string> receiverApplicationQualifier = default;
            Core.Optional<string> receiverApplicationId = default;
            Core.Optional<string> controllingAgencyCode = default;
            Core.Optional<string> groupHeaderMessageVersion = default;
            Core.Optional<string> groupHeaderMessageRelease = default;
            Core.Optional<string> associationAssignedCode = default;
            Core.Optional<string> applicationPassword = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("messageId"u8))
                {
                    messageId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("messageVersion"u8))
                {
                    messageVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("messageRelease"u8))
                {
                    messageRelease = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("messageAssociationAssignedCode"u8))
                {
                    messageAssociationAssignedCode = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("targetNamespace"u8))
                {
                    targetNamespace = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("functionalGroupId"u8))
                {
                    functionalGroupId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("senderApplicationQualifier"u8))
                {
                    senderApplicationQualifier = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("senderApplicationId"u8))
                {
                    senderApplicationId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("receiverApplicationQualifier"u8))
                {
                    receiverApplicationQualifier = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("receiverApplicationId"u8))
                {
                    receiverApplicationId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("controllingAgencyCode"u8))
                {
                    controllingAgencyCode = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("groupHeaderMessageVersion"u8))
                {
                    groupHeaderMessageVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("groupHeaderMessageRelease"u8))
                {
                    groupHeaderMessageRelease = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("associationAssignedCode"u8))
                {
                    associationAssignedCode = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("applicationPassword"u8))
                {
                    applicationPassword = property.Value.GetString();
                    continue;
                }
            }
            return new EdifactEnvelopeOverride(messageId.Value, messageVersion.Value, messageRelease.Value, messageAssociationAssignedCode.Value, targetNamespace.Value, functionalGroupId.Value, senderApplicationQualifier.Value, senderApplicationId.Value, receiverApplicationQualifier.Value, receiverApplicationId.Value, controllingAgencyCode.Value, groupHeaderMessageVersion.Value, groupHeaderMessageRelease.Value, associationAssignedCode.Value, applicationPassword.Value);
        }
    }
}
