// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Logic.Models
{
    /// <summary>
    /// The workflow status.
    /// Serialized Name: WorkflowStatus
    /// </summary>
    public readonly partial struct LogicAppWorkflowStatus : IEquatable<LogicAppWorkflowStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="LogicAppWorkflowStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public LogicAppWorkflowStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NotSpecifiedValue = "NotSpecified";
        private const string PausedValue = "Paused";
        private const string RunningValue = "Running";
        private const string WaitingValue = "Waiting";
        private const string SucceededValue = "Succeeded";
        private const string SkippedValue = "Skipped";
        private const string SuspendedValue = "Suspended";
        private const string CancelledValue = "Cancelled";
        private const string FailedValue = "Failed";
        private const string FaultedValue = "Faulted";
        private const string TimedOutValue = "TimedOut";
        private const string AbortedValue = "Aborted";
        private const string IgnoredValue = "Ignored";

        /// <summary>
        /// NotSpecified
        /// Serialized Name: WorkflowStatus.NotSpecified
        /// </summary>
        public static LogicAppWorkflowStatus NotSpecified { get; } = new LogicAppWorkflowStatus(NotSpecifiedValue);
        /// <summary>
        /// Paused
        /// Serialized Name: WorkflowStatus.Paused
        /// </summary>
        public static LogicAppWorkflowStatus Paused { get; } = new LogicAppWorkflowStatus(PausedValue);
        /// <summary>
        /// Running
        /// Serialized Name: WorkflowStatus.Running
        /// </summary>
        public static LogicAppWorkflowStatus Running { get; } = new LogicAppWorkflowStatus(RunningValue);
        /// <summary>
        /// Waiting
        /// Serialized Name: WorkflowStatus.Waiting
        /// </summary>
        public static LogicAppWorkflowStatus Waiting { get; } = new LogicAppWorkflowStatus(WaitingValue);
        /// <summary>
        /// Succeeded
        /// Serialized Name: WorkflowStatus.Succeeded
        /// </summary>
        public static LogicAppWorkflowStatus Succeeded { get; } = new LogicAppWorkflowStatus(SucceededValue);
        /// <summary>
        /// Skipped
        /// Serialized Name: WorkflowStatus.Skipped
        /// </summary>
        public static LogicAppWorkflowStatus Skipped { get; } = new LogicAppWorkflowStatus(SkippedValue);
        /// <summary>
        /// Suspended
        /// Serialized Name: WorkflowStatus.Suspended
        /// </summary>
        public static LogicAppWorkflowStatus Suspended { get; } = new LogicAppWorkflowStatus(SuspendedValue);
        /// <summary>
        /// Cancelled
        /// Serialized Name: WorkflowStatus.Cancelled
        /// </summary>
        public static LogicAppWorkflowStatus Cancelled { get; } = new LogicAppWorkflowStatus(CancelledValue);
        /// <summary>
        /// Failed
        /// Serialized Name: WorkflowStatus.Failed
        /// </summary>
        public static LogicAppWorkflowStatus Failed { get; } = new LogicAppWorkflowStatus(FailedValue);
        /// <summary>
        /// Faulted
        /// Serialized Name: WorkflowStatus.Faulted
        /// </summary>
        public static LogicAppWorkflowStatus Faulted { get; } = new LogicAppWorkflowStatus(FaultedValue);
        /// <summary>
        /// TimedOut
        /// Serialized Name: WorkflowStatus.TimedOut
        /// </summary>
        public static LogicAppWorkflowStatus TimedOut { get; } = new LogicAppWorkflowStatus(TimedOutValue);
        /// <summary>
        /// Aborted
        /// Serialized Name: WorkflowStatus.Aborted
        /// </summary>
        public static LogicAppWorkflowStatus Aborted { get; } = new LogicAppWorkflowStatus(AbortedValue);
        /// <summary>
        /// Ignored
        /// Serialized Name: WorkflowStatus.Ignored
        /// </summary>
        public static LogicAppWorkflowStatus Ignored { get; } = new LogicAppWorkflowStatus(IgnoredValue);
        /// <summary> Determines if two <see cref="LogicAppWorkflowStatus"/> values are the same. </summary>
        public static bool operator ==(LogicAppWorkflowStatus left, LogicAppWorkflowStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="LogicAppWorkflowStatus"/> values are not the same. </summary>
        public static bool operator !=(LogicAppWorkflowStatus left, LogicAppWorkflowStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="LogicAppWorkflowStatus"/>. </summary>
        public static implicit operator LogicAppWorkflowStatus(string value) => new LogicAppWorkflowStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is LogicAppWorkflowStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(LogicAppWorkflowStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
