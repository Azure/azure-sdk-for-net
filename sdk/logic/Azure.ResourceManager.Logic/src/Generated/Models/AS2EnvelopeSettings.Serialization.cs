// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Logic.Models
{
    public partial class AS2EnvelopeSettings : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("messageContentType");
            writer.WriteStringValue(MessageContentType.ToString());
            writer.WritePropertyName("transmitFileNameInMimeHeader");
            writer.WriteBooleanValue(TransmitFileNameInMimeHeader);
            writer.WritePropertyName("fileNameTemplate");
            writer.WriteStringValue(FileNameTemplate);
            writer.WritePropertyName("suspendMessageOnFileNameGenerationError");
            writer.WriteBooleanValue(SuspendMessageOnFileNameGenerationError);
            writer.WritePropertyName("autogenerateFileName");
            writer.WriteBooleanValue(AutoGenerateFileName);
            writer.WriteEndObject();
        }

        internal static AS2EnvelopeSettings DeserializeAS2EnvelopeSettings(JsonElement element)
        {
            ContentType messageContentType = default;
            bool transmitFileNameInMimeHeader = default;
            string fileNameTemplate = default;
            bool suspendMessageOnFileNameGenerationError = default;
            bool autogenerateFileName = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("messageContentType"))
                {
                    messageContentType = new ContentType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("transmitFileNameInMimeHeader"))
                {
                    transmitFileNameInMimeHeader = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("fileNameTemplate"))
                {
                    fileNameTemplate = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("suspendMessageOnFileNameGenerationError"))
                {
                    suspendMessageOnFileNameGenerationError = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("autogenerateFileName"))
                {
                    autogenerateFileName = property.Value.GetBoolean();
                    continue;
                }
            }
            return new AS2EnvelopeSettings(messageContentType, transmitFileNameInMimeHeader, fileNameTemplate, suspendMessageOnFileNameGenerationError, autogenerateFileName);
        }
    }
}
