// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.Logic.Models
{
    public partial class AS2EnvelopeSettings : IUtf8JsonSerializable, IModelJsonSerializable<AS2EnvelopeSettings>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<AS2EnvelopeSettings>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<AS2EnvelopeSettings>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            writer.WriteStartObject();
            writer.WritePropertyName("messageContentType"u8);
            writer.WriteStringValue(MessageContentType.ToString());
            writer.WritePropertyName("transmitFileNameInMimeHeader"u8);
            writer.WriteBooleanValue(TransmitFileNameInMimeHeader);
            writer.WritePropertyName("fileNameTemplate"u8);
            writer.WriteStringValue(FileNameTemplate);
            writer.WritePropertyName("suspendMessageOnFileNameGenerationError"u8);
            writer.WriteBooleanValue(SuspendMessageOnFileNameGenerationError);
            writer.WritePropertyName("autogenerateFileName"u8);
            writer.WriteBooleanValue(AutoGenerateFileName);
            if (_rawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _rawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static AS2EnvelopeSettings DeserializeAS2EnvelopeSettings(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ContentType messageContentType = default;
            bool transmitFileNameInMimeHeader = default;
            string fileNameTemplate = default;
            bool suspendMessageOnFileNameGenerationError = default;
            bool autogenerateFileName = default;
            Dictionary<string, BinaryData> rawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("messageContentType"u8))
                {
                    messageContentType = new ContentType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("transmitFileNameInMimeHeader"u8))
                {
                    transmitFileNameInMimeHeader = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("fileNameTemplate"u8))
                {
                    fileNameTemplate = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("suspendMessageOnFileNameGenerationError"u8))
                {
                    suspendMessageOnFileNameGenerationError = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("autogenerateFileName"u8))
                {
                    autogenerateFileName = property.Value.GetBoolean();
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    rawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new AS2EnvelopeSettings(messageContentType, transmitFileNameInMimeHeader, fileNameTemplate, suspendMessageOnFileNameGenerationError, autogenerateFileName, rawData);
        }

        AS2EnvelopeSettings IModelJsonSerializable<AS2EnvelopeSettings>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeAS2EnvelopeSettings(doc.RootElement, options);
        }

        BinaryData IModelSerializable<AS2EnvelopeSettings>.Serialize(ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        AS2EnvelopeSettings IModelSerializable<AS2EnvelopeSettings>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeAS2EnvelopeSettings(doc.RootElement, options);
        }

        /// <summary> Converts a <see cref="AS2EnvelopeSettings"/> into a <see cref="RequestContent"/>. </summary>
        /// <param name="model"> The <see cref="AS2EnvelopeSettings"/> to convert. </param>
        public static implicit operator RequestContent(AS2EnvelopeSettings model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        /// <summary> Converts a <see cref="Response"/> into a <see cref="AS2EnvelopeSettings"/>. </summary>
        /// <param name="response"> The <see cref="Response"/> to convert. </param>
        public static explicit operator AS2EnvelopeSettings(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeAS2EnvelopeSettings(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
