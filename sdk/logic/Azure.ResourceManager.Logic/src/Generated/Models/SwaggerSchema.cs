// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.Logic.Models
{
    /// <summary>
    /// The swagger schema.
    /// Serialized Name: SwaggerSchema
    /// </summary>
    public partial class SwaggerSchema
    {
        /// <summary> Initializes a new instance of SwaggerSchema. </summary>
        public SwaggerSchema()
        {
            Properties = new ChangeTrackingDictionary<string, SwaggerSchema>();
            Required = new ChangeTrackingList<string>();
            AllOf = new ChangeTrackingList<SwaggerSchema>();
        }

        /// <summary> Initializes a new instance of SwaggerSchema. </summary>
        /// <param name="ref">
        /// The reference.
        /// Serialized Name: SwaggerSchema.ref
        /// </param>
        /// <param name="schemaType">
        /// The type
        /// Serialized Name: SwaggerSchema.type
        /// </param>
        /// <param name="title">
        /// The title.
        /// Serialized Name: SwaggerSchema.title
        /// </param>
        /// <param name="items">
        /// The items schema.
        /// Serialized Name: SwaggerSchema.items
        /// </param>
        /// <param name="properties">
        /// The object properties
        /// Serialized Name: SwaggerSchema.properties
        /// </param>
        /// <param name="additionalProperties">
        /// The additional properties.
        /// Serialized Name: SwaggerSchema.additionalProperties
        /// </param>
        /// <param name="required">
        /// The object required properties.
        /// Serialized Name: SwaggerSchema.required
        /// </param>
        /// <param name="maxProperties">
        /// The maximum number of allowed properties.
        /// Serialized Name: SwaggerSchema.maxProperties
        /// </param>
        /// <param name="minProperties">
        /// The minimum number of allowed properties.
        /// Serialized Name: SwaggerSchema.minProperties
        /// </param>
        /// <param name="allOf">
        /// The schemas which must pass validation when this schema is used.
        /// Serialized Name: SwaggerSchema.allOf
        /// </param>
        /// <param name="discriminator">
        /// The discriminator.
        /// Serialized Name: SwaggerSchema.discriminator
        /// </param>
        /// <param name="readOnly">
        /// Indicates whether this property must be present in the a request.
        /// Serialized Name: SwaggerSchema.readOnly
        /// </param>
        /// <param name="xml">
        /// The xml representation format for a property.
        /// Serialized Name: SwaggerSchema.xml
        /// </param>
        /// <param name="externalDocs">
        /// The external documentation.
        /// Serialized Name: SwaggerSchema.externalDocs
        /// </param>
        /// <param name="example">
        /// The example value.
        /// Serialized Name: SwaggerSchema.example
        /// </param>
        /// <param name="notificationUrlExtension">
        /// Indicates the notification url extension. If this is set, the property&apos;s value should be a callback url for a webhook.
        /// Serialized Name: SwaggerSchema.notificationUrlExtension
        /// </param>
        /// <param name="dynamicSchemaOld">
        /// The dynamic schema configuration.
        /// Serialized Name: SwaggerSchema.dynamicSchemaOld
        /// </param>
        /// <param name="dynamicSchemaNew">
        /// The dynamic schema configuration.
        /// Serialized Name: SwaggerSchema.dynamicSchemaNew
        /// </param>
        /// <param name="dynamicListNew">
        /// The dynamic list.
        /// Serialized Name: SwaggerSchema.dynamicListNew
        /// </param>
        /// <param name="dynamicTree">
        /// The dynamic values tree configuration.
        /// Serialized Name: SwaggerSchema.dynamicTree
        /// </param>
        internal SwaggerSchema(string @ref, SwaggerSchemaType? schemaType, string title, SwaggerSchema items, IDictionary<string, SwaggerSchema> properties, BinaryData additionalProperties, IList<string> required, int? maxProperties, int? minProperties, IList<SwaggerSchema> allOf, string discriminator, bool? readOnly, SwaggerXml xml, SwaggerExternalDocumentation externalDocs, BinaryData example, bool? notificationUrlExtension, SwaggerCustomDynamicSchema dynamicSchemaOld, SwaggerCustomDynamicProperties dynamicSchemaNew, SwaggerCustomDynamicList dynamicListNew, SwaggerCustomDynamicTree dynamicTree)
        {
            Ref = @ref;
            SchemaType = schemaType;
            Title = title;
            Items = items;
            Properties = properties;
            AdditionalProperties = additionalProperties;
            Required = required;
            MaxProperties = maxProperties;
            MinProperties = minProperties;
            AllOf = allOf;
            Discriminator = discriminator;
            ReadOnly = readOnly;
            Xml = xml;
            ExternalDocs = externalDocs;
            Example = example;
            NotificationUrlExtension = notificationUrlExtension;
            DynamicSchemaOld = dynamicSchemaOld;
            DynamicSchemaNew = dynamicSchemaNew;
            DynamicListNew = dynamicListNew;
            DynamicTree = dynamicTree;
        }

        /// <summary>
        /// The reference.
        /// Serialized Name: SwaggerSchema.ref
        /// </summary>
        public string Ref { get; set; }
        /// <summary>
        /// The type
        /// Serialized Name: SwaggerSchema.type
        /// </summary>
        public SwaggerSchemaType? SchemaType { get; set; }
        /// <summary>
        /// The title.
        /// Serialized Name: SwaggerSchema.title
        /// </summary>
        public string Title { get; set; }
        /// <summary>
        /// The items schema.
        /// Serialized Name: SwaggerSchema.items
        /// </summary>
        public SwaggerSchema Items { get; set; }
        /// <summary>
        /// The object properties
        /// Serialized Name: SwaggerSchema.properties
        /// </summary>
        public IDictionary<string, SwaggerSchema> Properties { get; }
        /// <summary>
        /// The additional properties.
        /// Serialized Name: SwaggerSchema.additionalProperties
        /// </summary>
        public BinaryData AdditionalProperties { get; set; }
        /// <summary>
        /// The object required properties.
        /// Serialized Name: SwaggerSchema.required
        /// </summary>
        public IList<string> Required { get; }
        /// <summary>
        /// The maximum number of allowed properties.
        /// Serialized Name: SwaggerSchema.maxProperties
        /// </summary>
        public int? MaxProperties { get; set; }
        /// <summary>
        /// The minimum number of allowed properties.
        /// Serialized Name: SwaggerSchema.minProperties
        /// </summary>
        public int? MinProperties { get; set; }
        /// <summary>
        /// The schemas which must pass validation when this schema is used.
        /// Serialized Name: SwaggerSchema.allOf
        /// </summary>
        public IList<SwaggerSchema> AllOf { get; }
        /// <summary>
        /// The discriminator.
        /// Serialized Name: SwaggerSchema.discriminator
        /// </summary>
        public string Discriminator { get; set; }
        /// <summary>
        /// Indicates whether this property must be present in the a request.
        /// Serialized Name: SwaggerSchema.readOnly
        /// </summary>
        public bool? ReadOnly { get; set; }
        /// <summary>
        /// The xml representation format for a property.
        /// Serialized Name: SwaggerSchema.xml
        /// </summary>
        public SwaggerXml Xml { get; set; }
        /// <summary>
        /// The external documentation.
        /// Serialized Name: SwaggerSchema.externalDocs
        /// </summary>
        public SwaggerExternalDocumentation ExternalDocs { get; set; }
        /// <summary>
        /// The example value.
        /// Serialized Name: SwaggerSchema.example
        /// </summary>
        public BinaryData Example { get; set; }
        /// <summary>
        /// Indicates the notification url extension. If this is set, the property&apos;s value should be a callback url for a webhook.
        /// Serialized Name: SwaggerSchema.notificationUrlExtension
        /// </summary>
        public bool? NotificationUrlExtension { get; set; }
        /// <summary>
        /// The dynamic schema configuration.
        /// Serialized Name: SwaggerSchema.dynamicSchemaOld
        /// </summary>
        public SwaggerCustomDynamicSchema DynamicSchemaOld { get; set; }
        /// <summary>
        /// The dynamic schema configuration.
        /// Serialized Name: SwaggerSchema.dynamicSchemaNew
        /// </summary>
        public SwaggerCustomDynamicProperties DynamicSchemaNew { get; set; }
        /// <summary>
        /// The dynamic list.
        /// Serialized Name: SwaggerSchema.dynamicListNew
        /// </summary>
        public SwaggerCustomDynamicList DynamicListNew { get; set; }
        /// <summary>
        /// The dynamic values tree configuration.
        /// Serialized Name: SwaggerSchema.dynamicTree
        /// </summary>
        public SwaggerCustomDynamicTree DynamicTree { get; set; }
    }
}
