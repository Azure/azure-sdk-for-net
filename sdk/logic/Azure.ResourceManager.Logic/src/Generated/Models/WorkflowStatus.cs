// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Logic.Models
{
    /// <summary> The workflow status. </summary>
    public readonly partial struct WorkflowStatus : IEquatable<WorkflowStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="WorkflowStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public WorkflowStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NotSpecifiedValue = "NotSpecified";
        private const string PausedValue = "Paused";
        private const string RunningValue = "Running";
        private const string WaitingValue = "Waiting";
        private const string SucceededValue = "Succeeded";
        private const string SkippedValue = "Skipped";
        private const string SuspendedValue = "Suspended";
        private const string CancelledValue = "Cancelled";
        private const string FailedValue = "Failed";
        private const string FaultedValue = "Faulted";
        private const string TimedOutValue = "TimedOut";
        private const string AbortedValue = "Aborted";
        private const string IgnoredValue = "Ignored";

        /// <summary> NotSpecified. </summary>
        public static WorkflowStatus NotSpecified { get; } = new WorkflowStatus(NotSpecifiedValue);
        /// <summary> Paused. </summary>
        public static WorkflowStatus Paused { get; } = new WorkflowStatus(PausedValue);
        /// <summary> Running. </summary>
        public static WorkflowStatus Running { get; } = new WorkflowStatus(RunningValue);
        /// <summary> Waiting. </summary>
        public static WorkflowStatus Waiting { get; } = new WorkflowStatus(WaitingValue);
        /// <summary> Succeeded. </summary>
        public static WorkflowStatus Succeeded { get; } = new WorkflowStatus(SucceededValue);
        /// <summary> Skipped. </summary>
        public static WorkflowStatus Skipped { get; } = new WorkflowStatus(SkippedValue);
        /// <summary> Suspended. </summary>
        public static WorkflowStatus Suspended { get; } = new WorkflowStatus(SuspendedValue);
        /// <summary> Cancelled. </summary>
        public static WorkflowStatus Cancelled { get; } = new WorkflowStatus(CancelledValue);
        /// <summary> Failed. </summary>
        public static WorkflowStatus Failed { get; } = new WorkflowStatus(FailedValue);
        /// <summary> Faulted. </summary>
        public static WorkflowStatus Faulted { get; } = new WorkflowStatus(FaultedValue);
        /// <summary> TimedOut. </summary>
        public static WorkflowStatus TimedOut { get; } = new WorkflowStatus(TimedOutValue);
        /// <summary> Aborted. </summary>
        public static WorkflowStatus Aborted { get; } = new WorkflowStatus(AbortedValue);
        /// <summary> Ignored. </summary>
        public static WorkflowStatus Ignored { get; } = new WorkflowStatus(IgnoredValue);
        /// <summary> Determines if two <see cref="WorkflowStatus"/> values are the same. </summary>
        public static bool operator ==(WorkflowStatus left, WorkflowStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="WorkflowStatus"/> values are not the same. </summary>
        public static bool operator !=(WorkflowStatus left, WorkflowStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="WorkflowStatus"/>. </summary>
        public static implicit operator WorkflowStatus(string value) => new WorkflowStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is WorkflowStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(WorkflowStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
