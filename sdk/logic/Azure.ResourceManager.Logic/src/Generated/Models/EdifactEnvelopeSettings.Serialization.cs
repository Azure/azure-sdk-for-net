// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Logic.Models
{
    public partial class EdifactEnvelopeSettings : IUtf8JsonSerializable, IJsonModel<EdifactEnvelopeSettings>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<EdifactEnvelopeSettings>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<EdifactEnvelopeSettings>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdifactEnvelopeSettings>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdifactEnvelopeSettings)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (Optional.IsDefined(GroupAssociationAssignedCode))
            {
                writer.WritePropertyName("groupAssociationAssignedCode"u8);
                writer.WriteStringValue(GroupAssociationAssignedCode);
            }
            if (Optional.IsDefined(CommunicationAgreementId))
            {
                writer.WritePropertyName("communicationAgreementId"u8);
                writer.WriteStringValue(CommunicationAgreementId);
            }
            writer.WritePropertyName("applyDelimiterStringAdvice"u8);
            writer.WriteBooleanValue(ApplyDelimiterStringAdvice);
            writer.WritePropertyName("createGroupingSegments"u8);
            writer.WriteBooleanValue(CreateGroupingSegments);
            writer.WritePropertyName("enableDefaultGroupHeaders"u8);
            writer.WriteBooleanValue(EnableDefaultGroupHeaders);
            if (Optional.IsDefined(RecipientReferencePasswordValue))
            {
                writer.WritePropertyName("recipientReferencePasswordValue"u8);
                writer.WriteStringValue(RecipientReferencePasswordValue);
            }
            if (Optional.IsDefined(RecipientReferencePasswordQualifier))
            {
                writer.WritePropertyName("recipientReferencePasswordQualifier"u8);
                writer.WriteStringValue(RecipientReferencePasswordQualifier);
            }
            if (Optional.IsDefined(ApplicationReferenceId))
            {
                writer.WritePropertyName("applicationReferenceId"u8);
                writer.WriteStringValue(ApplicationReferenceId);
            }
            if (Optional.IsDefined(ProcessingPriorityCode))
            {
                writer.WritePropertyName("processingPriorityCode"u8);
                writer.WriteStringValue(ProcessingPriorityCode);
            }
            writer.WritePropertyName("interchangeControlNumberLowerBound"u8);
            writer.WriteNumberValue(InterchangeControlNumberLowerBound);
            writer.WritePropertyName("interchangeControlNumberUpperBound"u8);
            writer.WriteNumberValue(InterchangeControlNumberUpperBound);
            writer.WritePropertyName("rolloverInterchangeControlNumber"u8);
            writer.WriteBooleanValue(RolloverInterchangeControlNumber);
            if (Optional.IsDefined(InterchangeControlNumberPrefix))
            {
                writer.WritePropertyName("interchangeControlNumberPrefix"u8);
                writer.WriteStringValue(InterchangeControlNumberPrefix);
            }
            if (Optional.IsDefined(InterchangeControlNumberSuffix))
            {
                writer.WritePropertyName("interchangeControlNumberSuffix"u8);
                writer.WriteStringValue(InterchangeControlNumberSuffix);
            }
            if (Optional.IsDefined(SenderReverseRoutingAddress))
            {
                writer.WritePropertyName("senderReverseRoutingAddress"u8);
                writer.WriteStringValue(SenderReverseRoutingAddress);
            }
            if (Optional.IsDefined(ReceiverReverseRoutingAddress))
            {
                writer.WritePropertyName("receiverReverseRoutingAddress"u8);
                writer.WriteStringValue(ReceiverReverseRoutingAddress);
            }
            if (Optional.IsDefined(FunctionalGroupId))
            {
                writer.WritePropertyName("functionalGroupId"u8);
                writer.WriteStringValue(FunctionalGroupId);
            }
            if (Optional.IsDefined(GroupControllingAgencyCode))
            {
                writer.WritePropertyName("groupControllingAgencyCode"u8);
                writer.WriteStringValue(GroupControllingAgencyCode);
            }
            if (Optional.IsDefined(GroupMessageVersion))
            {
                writer.WritePropertyName("groupMessageVersion"u8);
                writer.WriteStringValue(GroupMessageVersion);
            }
            if (Optional.IsDefined(GroupMessageRelease))
            {
                writer.WritePropertyName("groupMessageRelease"u8);
                writer.WriteStringValue(GroupMessageRelease);
            }
            writer.WritePropertyName("groupControlNumberLowerBound"u8);
            writer.WriteNumberValue(GroupControlNumberLowerBound);
            writer.WritePropertyName("groupControlNumberUpperBound"u8);
            writer.WriteNumberValue(GroupControlNumberUpperBound);
            writer.WritePropertyName("rolloverGroupControlNumber"u8);
            writer.WriteBooleanValue(RolloverGroupControlNumber);
            if (Optional.IsDefined(GroupControlNumberPrefix))
            {
                writer.WritePropertyName("groupControlNumberPrefix"u8);
                writer.WriteStringValue(GroupControlNumberPrefix);
            }
            if (Optional.IsDefined(GroupControlNumberSuffix))
            {
                writer.WritePropertyName("groupControlNumberSuffix"u8);
                writer.WriteStringValue(GroupControlNumberSuffix);
            }
            if (Optional.IsDefined(GroupApplicationReceiverQualifier))
            {
                writer.WritePropertyName("groupApplicationReceiverQualifier"u8);
                writer.WriteStringValue(GroupApplicationReceiverQualifier);
            }
            if (Optional.IsDefined(GroupApplicationReceiverId))
            {
                writer.WritePropertyName("groupApplicationReceiverId"u8);
                writer.WriteStringValue(GroupApplicationReceiverId);
            }
            if (Optional.IsDefined(GroupApplicationSenderQualifier))
            {
                writer.WritePropertyName("groupApplicationSenderQualifier"u8);
                writer.WriteStringValue(GroupApplicationSenderQualifier);
            }
            if (Optional.IsDefined(GroupApplicationSenderId))
            {
                writer.WritePropertyName("groupApplicationSenderId"u8);
                writer.WriteStringValue(GroupApplicationSenderId);
            }
            if (Optional.IsDefined(GroupApplicationPassword))
            {
                writer.WritePropertyName("groupApplicationPassword"u8);
                writer.WriteStringValue(GroupApplicationPassword);
            }
            writer.WritePropertyName("overwriteExistingTransactionSetControlNumber"u8);
            writer.WriteBooleanValue(OverwriteExistingTransactionSetControlNumber);
            if (Optional.IsDefined(TransactionSetControlNumberPrefix))
            {
                writer.WritePropertyName("transactionSetControlNumberPrefix"u8);
                writer.WriteStringValue(TransactionSetControlNumberPrefix);
            }
            if (Optional.IsDefined(TransactionSetControlNumberSuffix))
            {
                writer.WritePropertyName("transactionSetControlNumberSuffix"u8);
                writer.WriteStringValue(TransactionSetControlNumberSuffix);
            }
            writer.WritePropertyName("transactionSetControlNumberLowerBound"u8);
            writer.WriteNumberValue(TransactionSetControlNumberLowerBound);
            writer.WritePropertyName("transactionSetControlNumberUpperBound"u8);
            writer.WriteNumberValue(TransactionSetControlNumberUpperBound);
            writer.WritePropertyName("rolloverTransactionSetControlNumber"u8);
            writer.WriteBooleanValue(RolloverTransactionSetControlNumber);
            writer.WritePropertyName("isTestInterchange"u8);
            writer.WriteBooleanValue(IsTestInterchange);
            if (Optional.IsDefined(SenderInternalIdentification))
            {
                writer.WritePropertyName("senderInternalIdentification"u8);
                writer.WriteStringValue(SenderInternalIdentification);
            }
            if (Optional.IsDefined(SenderInternalSubIdentification))
            {
                writer.WritePropertyName("senderInternalSubIdentification"u8);
                writer.WriteStringValue(SenderInternalSubIdentification);
            }
            if (Optional.IsDefined(ReceiverInternalIdentification))
            {
                writer.WritePropertyName("receiverInternalIdentification"u8);
                writer.WriteStringValue(ReceiverInternalIdentification);
            }
            if (Optional.IsDefined(ReceiverInternalSubIdentification))
            {
                writer.WritePropertyName("receiverInternalSubIdentification"u8);
                writer.WriteStringValue(ReceiverInternalSubIdentification);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        EdifactEnvelopeSettings IJsonModel<EdifactEnvelopeSettings>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdifactEnvelopeSettings>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdifactEnvelopeSettings)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdifactEnvelopeSettings(document.RootElement, options);
        }

        internal static EdifactEnvelopeSettings DeserializeEdifactEnvelopeSettings(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> groupAssociationAssignedCode = default;
            Optional<string> communicationAgreementId = default;
            bool applyDelimiterStringAdvice = default;
            bool createGroupingSegments = default;
            bool enableDefaultGroupHeaders = default;
            Optional<string> recipientReferencePasswordValue = default;
            Optional<string> recipientReferencePasswordQualifier = default;
            Optional<string> applicationReferenceId = default;
            Optional<string> processingPriorityCode = default;
            long interchangeControlNumberLowerBound = default;
            long interchangeControlNumberUpperBound = default;
            bool rolloverInterchangeControlNumber = default;
            Optional<string> interchangeControlNumberPrefix = default;
            Optional<string> interchangeControlNumberSuffix = default;
            Optional<string> senderReverseRoutingAddress = default;
            Optional<string> receiverReverseRoutingAddress = default;
            Optional<string> functionalGroupId = default;
            Optional<string> groupControllingAgencyCode = default;
            Optional<string> groupMessageVersion = default;
            Optional<string> groupMessageRelease = default;
            long groupControlNumberLowerBound = default;
            long groupControlNumberUpperBound = default;
            bool rolloverGroupControlNumber = default;
            Optional<string> groupControlNumberPrefix = default;
            Optional<string> groupControlNumberSuffix = default;
            Optional<string> groupApplicationReceiverQualifier = default;
            Optional<string> groupApplicationReceiverId = default;
            Optional<string> groupApplicationSenderQualifier = default;
            Optional<string> groupApplicationSenderId = default;
            Optional<string> groupApplicationPassword = default;
            bool overwriteExistingTransactionSetControlNumber = default;
            Optional<string> transactionSetControlNumberPrefix = default;
            Optional<string> transactionSetControlNumberSuffix = default;
            long transactionSetControlNumberLowerBound = default;
            long transactionSetControlNumberUpperBound = default;
            bool rolloverTransactionSetControlNumber = default;
            bool isTestInterchange = default;
            Optional<string> senderInternalIdentification = default;
            Optional<string> senderInternalSubIdentification = default;
            Optional<string> receiverInternalIdentification = default;
            Optional<string> receiverInternalSubIdentification = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("groupAssociationAssignedCode"u8))
                {
                    groupAssociationAssignedCode = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("communicationAgreementId"u8))
                {
                    communicationAgreementId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("applyDelimiterStringAdvice"u8))
                {
                    applyDelimiterStringAdvice = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("createGroupingSegments"u8))
                {
                    createGroupingSegments = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("enableDefaultGroupHeaders"u8))
                {
                    enableDefaultGroupHeaders = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("recipientReferencePasswordValue"u8))
                {
                    recipientReferencePasswordValue = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("recipientReferencePasswordQualifier"u8))
                {
                    recipientReferencePasswordQualifier = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("applicationReferenceId"u8))
                {
                    applicationReferenceId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("processingPriorityCode"u8))
                {
                    processingPriorityCode = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("interchangeControlNumberLowerBound"u8))
                {
                    interchangeControlNumberLowerBound = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("interchangeControlNumberUpperBound"u8))
                {
                    interchangeControlNumberUpperBound = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("rolloverInterchangeControlNumber"u8))
                {
                    rolloverInterchangeControlNumber = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("interchangeControlNumberPrefix"u8))
                {
                    interchangeControlNumberPrefix = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("interchangeControlNumberSuffix"u8))
                {
                    interchangeControlNumberSuffix = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("senderReverseRoutingAddress"u8))
                {
                    senderReverseRoutingAddress = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("receiverReverseRoutingAddress"u8))
                {
                    receiverReverseRoutingAddress = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("functionalGroupId"u8))
                {
                    functionalGroupId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("groupControllingAgencyCode"u8))
                {
                    groupControllingAgencyCode = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("groupMessageVersion"u8))
                {
                    groupMessageVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("groupMessageRelease"u8))
                {
                    groupMessageRelease = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("groupControlNumberLowerBound"u8))
                {
                    groupControlNumberLowerBound = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("groupControlNumberUpperBound"u8))
                {
                    groupControlNumberUpperBound = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("rolloverGroupControlNumber"u8))
                {
                    rolloverGroupControlNumber = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("groupControlNumberPrefix"u8))
                {
                    groupControlNumberPrefix = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("groupControlNumberSuffix"u8))
                {
                    groupControlNumberSuffix = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("groupApplicationReceiverQualifier"u8))
                {
                    groupApplicationReceiverQualifier = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("groupApplicationReceiverId"u8))
                {
                    groupApplicationReceiverId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("groupApplicationSenderQualifier"u8))
                {
                    groupApplicationSenderQualifier = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("groupApplicationSenderId"u8))
                {
                    groupApplicationSenderId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("groupApplicationPassword"u8))
                {
                    groupApplicationPassword = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("overwriteExistingTransactionSetControlNumber"u8))
                {
                    overwriteExistingTransactionSetControlNumber = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("transactionSetControlNumberPrefix"u8))
                {
                    transactionSetControlNumberPrefix = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("transactionSetControlNumberSuffix"u8))
                {
                    transactionSetControlNumberSuffix = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("transactionSetControlNumberLowerBound"u8))
                {
                    transactionSetControlNumberLowerBound = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("transactionSetControlNumberUpperBound"u8))
                {
                    transactionSetControlNumberUpperBound = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("rolloverTransactionSetControlNumber"u8))
                {
                    rolloverTransactionSetControlNumber = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("isTestInterchange"u8))
                {
                    isTestInterchange = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("senderInternalIdentification"u8))
                {
                    senderInternalIdentification = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("senderInternalSubIdentification"u8))
                {
                    senderInternalSubIdentification = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("receiverInternalIdentification"u8))
                {
                    receiverInternalIdentification = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("receiverInternalSubIdentification"u8))
                {
                    receiverInternalSubIdentification = property.Value.GetString();
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new EdifactEnvelopeSettings(groupAssociationAssignedCode.Value, communicationAgreementId.Value, applyDelimiterStringAdvice, createGroupingSegments, enableDefaultGroupHeaders, recipientReferencePasswordValue.Value, recipientReferencePasswordQualifier.Value, applicationReferenceId.Value, processingPriorityCode.Value, interchangeControlNumberLowerBound, interchangeControlNumberUpperBound, rolloverInterchangeControlNumber, interchangeControlNumberPrefix.Value, interchangeControlNumberSuffix.Value, senderReverseRoutingAddress.Value, receiverReverseRoutingAddress.Value, functionalGroupId.Value, groupControllingAgencyCode.Value, groupMessageVersion.Value, groupMessageRelease.Value, groupControlNumberLowerBound, groupControlNumberUpperBound, rolloverGroupControlNumber, groupControlNumberPrefix.Value, groupControlNumberSuffix.Value, groupApplicationReceiverQualifier.Value, groupApplicationReceiverId.Value, groupApplicationSenderQualifier.Value, groupApplicationSenderId.Value, groupApplicationPassword.Value, overwriteExistingTransactionSetControlNumber, transactionSetControlNumberPrefix.Value, transactionSetControlNumberSuffix.Value, transactionSetControlNumberLowerBound, transactionSetControlNumberUpperBound, rolloverTransactionSetControlNumber, isTestInterchange, senderInternalIdentification.Value, senderInternalSubIdentification.Value, receiverInternalIdentification.Value, receiverInternalSubIdentification.Value, serializedAdditionalRawData);
        }

        private BinaryData SerializeBicep(ModelReaderWriterOptions options)
        {
            StringBuilder builder = new StringBuilder();
            builder.AppendLine("{");

            if (Optional.IsDefined(GroupAssociationAssignedCode))
            {
                builder.Append("  groupAssociationAssignedCode:");
                if (GroupAssociationAssignedCode.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{GroupAssociationAssignedCode}'''");
                }
                else
                {
                    builder.AppendLine($" '{GroupAssociationAssignedCode}'");
                }
            }

            if (Optional.IsDefined(CommunicationAgreementId))
            {
                builder.Append("  communicationAgreementId:");
                if (CommunicationAgreementId.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{CommunicationAgreementId}'''");
                }
                else
                {
                    builder.AppendLine($" '{CommunicationAgreementId}'");
                }
            }

            if (Optional.IsDefined(ApplyDelimiterStringAdvice))
            {
                builder.Append("  applyDelimiterStringAdvice:");
                var boolValue = ApplyDelimiterStringAdvice == true ? "true" : "false";
                builder.AppendLine($" {boolValue}");
            }

            if (Optional.IsDefined(CreateGroupingSegments))
            {
                builder.Append("  createGroupingSegments:");
                var boolValue = CreateGroupingSegments == true ? "true" : "false";
                builder.AppendLine($" {boolValue}");
            }

            if (Optional.IsDefined(EnableDefaultGroupHeaders))
            {
                builder.Append("  enableDefaultGroupHeaders:");
                var boolValue = EnableDefaultGroupHeaders == true ? "true" : "false";
                builder.AppendLine($" {boolValue}");
            }

            if (Optional.IsDefined(RecipientReferencePasswordValue))
            {
                builder.Append("  recipientReferencePasswordValue:");
                if (RecipientReferencePasswordValue.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{RecipientReferencePasswordValue}'''");
                }
                else
                {
                    builder.AppendLine($" '{RecipientReferencePasswordValue}'");
                }
            }

            if (Optional.IsDefined(RecipientReferencePasswordQualifier))
            {
                builder.Append("  recipientReferencePasswordQualifier:");
                if (RecipientReferencePasswordQualifier.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{RecipientReferencePasswordQualifier}'''");
                }
                else
                {
                    builder.AppendLine($" '{RecipientReferencePasswordQualifier}'");
                }
            }

            if (Optional.IsDefined(ApplicationReferenceId))
            {
                builder.Append("  applicationReferenceId:");
                if (ApplicationReferenceId.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{ApplicationReferenceId}'''");
                }
                else
                {
                    builder.AppendLine($" '{ApplicationReferenceId}'");
                }
            }

            if (Optional.IsDefined(ProcessingPriorityCode))
            {
                builder.Append("  processingPriorityCode:");
                if (ProcessingPriorityCode.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{ProcessingPriorityCode}'''");
                }
                else
                {
                    builder.AppendLine($" '{ProcessingPriorityCode}'");
                }
            }

            if (Optional.IsDefined(InterchangeControlNumberLowerBound))
            {
                builder.Append("  interchangeControlNumberLowerBound:");
                builder.AppendLine($" '{InterchangeControlNumberLowerBound.ToString()}'");
            }

            if (Optional.IsDefined(InterchangeControlNumberUpperBound))
            {
                builder.Append("  interchangeControlNumberUpperBound:");
                builder.AppendLine($" '{InterchangeControlNumberUpperBound.ToString()}'");
            }

            if (Optional.IsDefined(RolloverInterchangeControlNumber))
            {
                builder.Append("  rolloverInterchangeControlNumber:");
                var boolValue = RolloverInterchangeControlNumber == true ? "true" : "false";
                builder.AppendLine($" {boolValue}");
            }

            if (Optional.IsDefined(InterchangeControlNumberPrefix))
            {
                builder.Append("  interchangeControlNumberPrefix:");
                if (InterchangeControlNumberPrefix.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{InterchangeControlNumberPrefix}'''");
                }
                else
                {
                    builder.AppendLine($" '{InterchangeControlNumberPrefix}'");
                }
            }

            if (Optional.IsDefined(InterchangeControlNumberSuffix))
            {
                builder.Append("  interchangeControlNumberSuffix:");
                if (InterchangeControlNumberSuffix.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{InterchangeControlNumberSuffix}'''");
                }
                else
                {
                    builder.AppendLine($" '{InterchangeControlNumberSuffix}'");
                }
            }

            if (Optional.IsDefined(SenderReverseRoutingAddress))
            {
                builder.Append("  senderReverseRoutingAddress:");
                if (SenderReverseRoutingAddress.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{SenderReverseRoutingAddress}'''");
                }
                else
                {
                    builder.AppendLine($" '{SenderReverseRoutingAddress}'");
                }
            }

            if (Optional.IsDefined(ReceiverReverseRoutingAddress))
            {
                builder.Append("  receiverReverseRoutingAddress:");
                if (ReceiverReverseRoutingAddress.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{ReceiverReverseRoutingAddress}'''");
                }
                else
                {
                    builder.AppendLine($" '{ReceiverReverseRoutingAddress}'");
                }
            }

            if (Optional.IsDefined(FunctionalGroupId))
            {
                builder.Append("  functionalGroupId:");
                if (FunctionalGroupId.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{FunctionalGroupId}'''");
                }
                else
                {
                    builder.AppendLine($" '{FunctionalGroupId}'");
                }
            }

            if (Optional.IsDefined(GroupControllingAgencyCode))
            {
                builder.Append("  groupControllingAgencyCode:");
                if (GroupControllingAgencyCode.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{GroupControllingAgencyCode}'''");
                }
                else
                {
                    builder.AppendLine($" '{GroupControllingAgencyCode}'");
                }
            }

            if (Optional.IsDefined(GroupMessageVersion))
            {
                builder.Append("  groupMessageVersion:");
                if (GroupMessageVersion.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{GroupMessageVersion}'''");
                }
                else
                {
                    builder.AppendLine($" '{GroupMessageVersion}'");
                }
            }

            if (Optional.IsDefined(GroupMessageRelease))
            {
                builder.Append("  groupMessageRelease:");
                if (GroupMessageRelease.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{GroupMessageRelease}'''");
                }
                else
                {
                    builder.AppendLine($" '{GroupMessageRelease}'");
                }
            }

            if (Optional.IsDefined(GroupControlNumberLowerBound))
            {
                builder.Append("  groupControlNumberLowerBound:");
                builder.AppendLine($" '{GroupControlNumberLowerBound.ToString()}'");
            }

            if (Optional.IsDefined(GroupControlNumberUpperBound))
            {
                builder.Append("  groupControlNumberUpperBound:");
                builder.AppendLine($" '{GroupControlNumberUpperBound.ToString()}'");
            }

            if (Optional.IsDefined(RolloverGroupControlNumber))
            {
                builder.Append("  rolloverGroupControlNumber:");
                var boolValue = RolloverGroupControlNumber == true ? "true" : "false";
                builder.AppendLine($" {boolValue}");
            }

            if (Optional.IsDefined(GroupControlNumberPrefix))
            {
                builder.Append("  groupControlNumberPrefix:");
                if (GroupControlNumberPrefix.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{GroupControlNumberPrefix}'''");
                }
                else
                {
                    builder.AppendLine($" '{GroupControlNumberPrefix}'");
                }
            }

            if (Optional.IsDefined(GroupControlNumberSuffix))
            {
                builder.Append("  groupControlNumberSuffix:");
                if (GroupControlNumberSuffix.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{GroupControlNumberSuffix}'''");
                }
                else
                {
                    builder.AppendLine($" '{GroupControlNumberSuffix}'");
                }
            }

            if (Optional.IsDefined(GroupApplicationReceiverQualifier))
            {
                builder.Append("  groupApplicationReceiverQualifier:");
                if (GroupApplicationReceiverQualifier.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{GroupApplicationReceiverQualifier}'''");
                }
                else
                {
                    builder.AppendLine($" '{GroupApplicationReceiverQualifier}'");
                }
            }

            if (Optional.IsDefined(GroupApplicationReceiverId))
            {
                builder.Append("  groupApplicationReceiverId:");
                if (GroupApplicationReceiverId.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{GroupApplicationReceiverId}'''");
                }
                else
                {
                    builder.AppendLine($" '{GroupApplicationReceiverId}'");
                }
            }

            if (Optional.IsDefined(GroupApplicationSenderQualifier))
            {
                builder.Append("  groupApplicationSenderQualifier:");
                if (GroupApplicationSenderQualifier.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{GroupApplicationSenderQualifier}'''");
                }
                else
                {
                    builder.AppendLine($" '{GroupApplicationSenderQualifier}'");
                }
            }

            if (Optional.IsDefined(GroupApplicationSenderId))
            {
                builder.Append("  groupApplicationSenderId:");
                if (GroupApplicationSenderId.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{GroupApplicationSenderId}'''");
                }
                else
                {
                    builder.AppendLine($" '{GroupApplicationSenderId}'");
                }
            }

            if (Optional.IsDefined(GroupApplicationPassword))
            {
                builder.Append("  groupApplicationPassword:");
                if (GroupApplicationPassword.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{GroupApplicationPassword}'''");
                }
                else
                {
                    builder.AppendLine($" '{GroupApplicationPassword}'");
                }
            }

            if (Optional.IsDefined(OverwriteExistingTransactionSetControlNumber))
            {
                builder.Append("  overwriteExistingTransactionSetControlNumber:");
                var boolValue = OverwriteExistingTransactionSetControlNumber == true ? "true" : "false";
                builder.AppendLine($" {boolValue}");
            }

            if (Optional.IsDefined(TransactionSetControlNumberPrefix))
            {
                builder.Append("  transactionSetControlNumberPrefix:");
                if (TransactionSetControlNumberPrefix.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{TransactionSetControlNumberPrefix}'''");
                }
                else
                {
                    builder.AppendLine($" '{TransactionSetControlNumberPrefix}'");
                }
            }

            if (Optional.IsDefined(TransactionSetControlNumberSuffix))
            {
                builder.Append("  transactionSetControlNumberSuffix:");
                if (TransactionSetControlNumberSuffix.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{TransactionSetControlNumberSuffix}'''");
                }
                else
                {
                    builder.AppendLine($" '{TransactionSetControlNumberSuffix}'");
                }
            }

            if (Optional.IsDefined(TransactionSetControlNumberLowerBound))
            {
                builder.Append("  transactionSetControlNumberLowerBound:");
                builder.AppendLine($" '{TransactionSetControlNumberLowerBound.ToString()}'");
            }

            if (Optional.IsDefined(TransactionSetControlNumberUpperBound))
            {
                builder.Append("  transactionSetControlNumberUpperBound:");
                builder.AppendLine($" '{TransactionSetControlNumberUpperBound.ToString()}'");
            }

            if (Optional.IsDefined(RolloverTransactionSetControlNumber))
            {
                builder.Append("  rolloverTransactionSetControlNumber:");
                var boolValue = RolloverTransactionSetControlNumber == true ? "true" : "false";
                builder.AppendLine($" {boolValue}");
            }

            if (Optional.IsDefined(IsTestInterchange))
            {
                builder.Append("  isTestInterchange:");
                var boolValue = IsTestInterchange == true ? "true" : "false";
                builder.AppendLine($" {boolValue}");
            }

            if (Optional.IsDefined(SenderInternalIdentification))
            {
                builder.Append("  senderInternalIdentification:");
                if (SenderInternalIdentification.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{SenderInternalIdentification}'''");
                }
                else
                {
                    builder.AppendLine($" '{SenderInternalIdentification}'");
                }
            }

            if (Optional.IsDefined(SenderInternalSubIdentification))
            {
                builder.Append("  senderInternalSubIdentification:");
                if (SenderInternalSubIdentification.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{SenderInternalSubIdentification}'''");
                }
                else
                {
                    builder.AppendLine($" '{SenderInternalSubIdentification}'");
                }
            }

            if (Optional.IsDefined(ReceiverInternalIdentification))
            {
                builder.Append("  receiverInternalIdentification:");
                if (ReceiverInternalIdentification.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{ReceiverInternalIdentification}'''");
                }
                else
                {
                    builder.AppendLine($" '{ReceiverInternalIdentification}'");
                }
            }

            if (Optional.IsDefined(ReceiverInternalSubIdentification))
            {
                builder.Append("  receiverInternalSubIdentification:");
                if (ReceiverInternalSubIdentification.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{ReceiverInternalSubIdentification}'''");
                }
                else
                {
                    builder.AppendLine($" '{ReceiverInternalSubIdentification}'");
                }
            }

            builder.AppendLine("}");
            return BinaryData.FromString(builder.ToString());
        }

        private void AppendChildObject(StringBuilder stringBuilder, object childObject, ModelReaderWriterOptions options, int spaces, bool indentFirstLine)
        {
            string indent = new string(' ', spaces);
            BinaryData data = ModelReaderWriter.Write(childObject, options);
            string[] lines = data.ToString().Split(Environment.NewLine.ToCharArray(), StringSplitOptions.RemoveEmptyEntries);
            bool inMultilineString = false;
            for (int i = 0; i < lines.Length; i++)
            {
                string line = lines[i];
                if (inMultilineString)
                {
                    if (line.Contains("'''"))
                    {
                        inMultilineString = false;
                    }
                    stringBuilder.AppendLine(line);
                    continue;
                }
                if (line.Contains("'''"))
                {
                    inMultilineString = true;
                    stringBuilder.AppendLine($"{indent}{line}");
                    continue;
                }
                if (i == 0 && !indentFirstLine)
                {
                    stringBuilder.AppendLine($" {line}");
                }
                else
                {
                    stringBuilder.AppendLine($"{indent}{line}");
                }
            }
        }

        BinaryData IPersistableModel<EdifactEnvelopeSettings>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdifactEnvelopeSettings>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                case "B":
                    return SerializeBicep(options);
                default:
                    throw new FormatException($"The model {nameof(EdifactEnvelopeSettings)} does not support '{options.Format}' format.");
            }
        }

        EdifactEnvelopeSettings IPersistableModel<EdifactEnvelopeSettings>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<EdifactEnvelopeSettings>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeEdifactEnvelopeSettings(document.RootElement, options);
                    }
                case "B":
                    throw new InvalidOperationException("Bicep deserialization is not supported for this type.");
                default:
                    throw new FormatException($"The model {nameof(EdifactEnvelopeSettings)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<EdifactEnvelopeSettings>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
