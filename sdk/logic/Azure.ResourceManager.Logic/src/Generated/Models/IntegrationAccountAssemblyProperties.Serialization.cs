// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Logic.Models
{
    public partial class IntegrationAccountAssemblyProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("assemblyName");
            writer.WriteStringValue(AssemblyName);
            if (Optional.IsDefined(AssemblyVersion))
            {
                writer.WritePropertyName("assemblyVersion");
                writer.WriteStringValue(AssemblyVersion);
            }
            if (Optional.IsDefined(AssemblyCulture))
            {
                writer.WritePropertyName("assemblyCulture");
                writer.WriteStringValue(AssemblyCulture);
            }
            if (Optional.IsDefined(AssemblyPublicKeyToken))
            {
                writer.WritePropertyName("assemblyPublicKeyToken");
                writer.WriteStringValue(AssemblyPublicKeyToken);
            }
            if (Optional.IsDefined(Content))
            {
                writer.WritePropertyName("content");
#if NET6_0_OR_GREATER
				writer.WriteRawValue(Content);
#else
                JsonSerializer.Serialize(writer, JsonDocument.Parse(Content.ToString()).RootElement);
#endif
            }
            if (Optional.IsDefined(ContentType))
            {
                writer.WritePropertyName("contentType");
                writer.WriteStringValue(ContentType.Value.ToString());
            }
            if (Optional.IsDefined(ContentLink))
            {
                writer.WritePropertyName("contentLink");
                writer.WriteObjectValue(ContentLink);
            }
            if (Optional.IsDefined(CreatedOn))
            {
                writer.WritePropertyName("createdTime");
                writer.WriteStringValue(CreatedOn.Value, "O");
            }
            if (Optional.IsDefined(ChangedOn))
            {
                writer.WritePropertyName("changedTime");
                writer.WriteStringValue(ChangedOn.Value, "O");
            }
            if (Optional.IsDefined(Metadata))
            {
                writer.WritePropertyName("metadata");
#if NET6_0_OR_GREATER
				writer.WriteRawValue(Metadata);
#else
                JsonSerializer.Serialize(writer, JsonDocument.Parse(Metadata.ToString()).RootElement);
#endif
            }
            writer.WriteEndObject();
        }

        internal static IntegrationAccountAssemblyProperties DeserializeIntegrationAccountAssemblyProperties(JsonElement element)
        {
            string assemblyName = default;
            Optional<string> assemblyVersion = default;
            Optional<string> assemblyCulture = default;
            Optional<string> assemblyPublicKeyToken = default;
            Optional<BinaryData> content = default;
            Optional<ContentType> contentType = default;
            Optional<LogicContentLink> contentLink = default;
            Optional<DateTimeOffset> createdTime = default;
            Optional<DateTimeOffset> changedTime = default;
            Optional<BinaryData> metadata = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("assemblyName"))
                {
                    assemblyName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("assemblyVersion"))
                {
                    assemblyVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("assemblyCulture"))
                {
                    assemblyCulture = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("assemblyPublicKeyToken"))
                {
                    assemblyPublicKeyToken = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("content"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    content = BinaryData.FromString(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("contentType"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    contentType = new ContentType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("contentLink"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    contentLink = LogicContentLink.DeserializeLogicContentLink(property.Value);
                    continue;
                }
                if (property.NameEquals("createdTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    createdTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("changedTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    changedTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("metadata"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    metadata = BinaryData.FromString(property.Value.GetRawText());
                    continue;
                }
            }
            return new IntegrationAccountAssemblyProperties(Optional.ToNullable(createdTime), Optional.ToNullable(changedTime), metadata.Value, content.Value, Optional.ToNullable(contentType), contentLink.Value, assemblyName, assemblyVersion.Value, assemblyCulture.Value, assemblyPublicKeyToken.Value);
        }
    }
}
