// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Logic.Models
{
    public partial class SwaggerSchema : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Reference))
            {
                writer.WritePropertyName("ref"u8);
                writer.WriteStringValue(Reference);
            }
            if (Optional.IsDefined(SchemaType))
            {
                writer.WritePropertyName("type"u8);
                writer.WriteStringValue(SchemaType.Value.ToString());
            }
            if (Optional.IsDefined(Title))
            {
                writer.WritePropertyName("title"u8);
                writer.WriteStringValue(Title);
            }
            if (Optional.IsDefined(Items))
            {
                writer.WritePropertyName("items"u8);
                writer.WriteObjectValue(Items);
            }
            if (Optional.IsCollectionDefined(Properties))
            {
                writer.WritePropertyName("properties"u8);
                writer.WriteStartObject();
                foreach (var item in Properties)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteObjectValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsDefined(AdditionalProperties))
            {
                writer.WritePropertyName("additionalProperties"u8);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(AdditionalProperties);
#else
                using (JsonDocument document = JsonDocument.Parse(AdditionalProperties))
                {
                    JsonSerializer.Serialize(writer, document.RootElement);
                }
#endif
            }
            if (Optional.IsCollectionDefined(RequiredProperties))
            {
                writer.WritePropertyName("required"u8);
                writer.WriteStartArray();
                foreach (var item in RequiredProperties)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(MaxProperties))
            {
                writer.WritePropertyName("maxProperties"u8);
                writer.WriteNumberValue(MaxProperties.Value);
            }
            if (Optional.IsDefined(MinProperties))
            {
                writer.WritePropertyName("minProperties"u8);
                writer.WriteNumberValue(MinProperties.Value);
            }
            if (Optional.IsCollectionDefined(AllOf))
            {
                writer.WritePropertyName("allOf"u8);
                writer.WriteStartArray();
                foreach (var item in AllOf)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Discriminator))
            {
                writer.WritePropertyName("discriminator"u8);
                writer.WriteStringValue(Discriminator);
            }
            if (Optional.IsDefined(IsReadOnly))
            {
                writer.WritePropertyName("readOnly"u8);
                writer.WriteBooleanValue(IsReadOnly.Value);
            }
            if (Optional.IsDefined(Xml))
            {
                writer.WritePropertyName("xml"u8);
                writer.WriteObjectValue(Xml);
            }
            if (Optional.IsDefined(ExternalDocs))
            {
                writer.WritePropertyName("externalDocs"u8);
                writer.WriteObjectValue(ExternalDocs);
            }
            if (Optional.IsDefined(Example))
            {
                writer.WritePropertyName("example"u8);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(Example);
#else
                using (JsonDocument document = JsonDocument.Parse(Example))
                {
                    JsonSerializer.Serialize(writer, document.RootElement);
                }
#endif
            }
            if (Optional.IsDefined(IsNotificationUrlExtension))
            {
                writer.WritePropertyName("notificationUrlExtension"u8);
                writer.WriteBooleanValue(IsNotificationUrlExtension.Value);
            }
            if (Optional.IsDefined(DynamicSchemaOld))
            {
                writer.WritePropertyName("dynamicSchemaOld"u8);
                writer.WriteObjectValue(DynamicSchemaOld);
            }
            if (Optional.IsDefined(DynamicSchemaNew))
            {
                writer.WritePropertyName("dynamicSchemaNew"u8);
                writer.WriteObjectValue(DynamicSchemaNew);
            }
            if (Optional.IsDefined(DynamicListNew))
            {
                writer.WritePropertyName("dynamicListNew"u8);
                writer.WriteObjectValue(DynamicListNew);
            }
            if (Optional.IsDefined(DynamicTree))
            {
                writer.WritePropertyName("dynamicTree"u8);
                writer.WriteObjectValue(DynamicTree);
            }
            writer.WriteEndObject();
        }

        internal static SwaggerSchema DeserializeSwaggerSchema(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> @ref = default;
            Optional<SwaggerSchemaType> type = default;
            Optional<string> title = default;
            Optional<SwaggerSchema> items = default;
            Optional<IDictionary<string, SwaggerSchema>> properties = default;
            Optional<BinaryData> additionalProperties = default;
            Optional<IList<string>> required = default;
            Optional<int> maxProperties = default;
            Optional<int> minProperties = default;
            Optional<IList<SwaggerSchema>> allOf = default;
            Optional<string> discriminator = default;
            Optional<bool> readOnly = default;
            Optional<SwaggerXml> xml = default;
            Optional<SwaggerExternalDocumentation> externalDocs = default;
            Optional<BinaryData> example = default;
            Optional<bool> notificationUrlExtension = default;
            Optional<SwaggerCustomDynamicSchema> dynamicSchemaOld = default;
            Optional<SwaggerCustomDynamicProperties> dynamicSchemaNew = default;
            Optional<SwaggerCustomDynamicList> dynamicListNew = default;
            Optional<SwaggerCustomDynamicTree> dynamicTree = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("ref"u8))
                {
                    @ref = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    type = new SwaggerSchemaType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("title"u8))
                {
                    title = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("items"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    items = DeserializeSwaggerSchema(property.Value);
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, SwaggerSchema> dictionary = new Dictionary<string, SwaggerSchema>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, DeserializeSwaggerSchema(property0.Value));
                    }
                    properties = dictionary;
                    continue;
                }
                if (property.NameEquals("additionalProperties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    additionalProperties = BinaryData.FromString(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("required"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    required = array;
                    continue;
                }
                if (property.NameEquals("maxProperties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    maxProperties = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("minProperties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    minProperties = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("allOf"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<SwaggerSchema> array = new List<SwaggerSchema>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DeserializeSwaggerSchema(item));
                    }
                    allOf = array;
                    continue;
                }
                if (property.NameEquals("discriminator"u8))
                {
                    discriminator = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("readOnly"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    readOnly = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("xml"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    xml = SwaggerXml.DeserializeSwaggerXml(property.Value);
                    continue;
                }
                if (property.NameEquals("externalDocs"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    externalDocs = SwaggerExternalDocumentation.DeserializeSwaggerExternalDocumentation(property.Value);
                    continue;
                }
                if (property.NameEquals("example"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    example = BinaryData.FromString(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("notificationUrlExtension"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    notificationUrlExtension = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("dynamicSchemaOld"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    dynamicSchemaOld = SwaggerCustomDynamicSchema.DeserializeSwaggerCustomDynamicSchema(property.Value);
                    continue;
                }
                if (property.NameEquals("dynamicSchemaNew"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    dynamicSchemaNew = SwaggerCustomDynamicProperties.DeserializeSwaggerCustomDynamicProperties(property.Value);
                    continue;
                }
                if (property.NameEquals("dynamicListNew"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    dynamicListNew = SwaggerCustomDynamicList.DeserializeSwaggerCustomDynamicList(property.Value);
                    continue;
                }
                if (property.NameEquals("dynamicTree"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    dynamicTree = SwaggerCustomDynamicTree.DeserializeSwaggerCustomDynamicTree(property.Value);
                    continue;
                }
            }
            return new SwaggerSchema(@ref.Value, Optional.ToNullable(type), title.Value, items.Value, Optional.ToDictionary(properties), additionalProperties.Value, Optional.ToList(required), Optional.ToNullable(maxProperties), Optional.ToNullable(minProperties), Optional.ToList(allOf), discriminator.Value, Optional.ToNullable(readOnly), xml.Value, externalDocs.Value, example.Value, Optional.ToNullable(notificationUrlExtension), dynamicSchemaOld.Value, dynamicSchemaNew.Value, dynamicListNew.Value, dynamicTree.Value);
        }
    }
}
