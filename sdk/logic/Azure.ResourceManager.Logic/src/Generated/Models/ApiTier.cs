// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Logic.Models
{
    /// <summary> The Api tier. </summary>
    public readonly partial struct ApiTier : IEquatable<ApiTier>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ApiTier"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ApiTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NotSpecifiedValue = "NotSpecified";
        private const string EnterpriseValue = "Enterprise";
        private const string StandardValue = "Standard";
        private const string PremiumValue = "Premium";

        /// <summary> NotSpecified. </summary>
        public static ApiTier NotSpecified { get; } = new ApiTier(NotSpecifiedValue);
        /// <summary> Enterprise. </summary>
        public static ApiTier Enterprise { get; } = new ApiTier(EnterpriseValue);
        /// <summary> Standard. </summary>
        public static ApiTier Standard { get; } = new ApiTier(StandardValue);
        /// <summary> Premium. </summary>
        public static ApiTier Premium { get; } = new ApiTier(PremiumValue);
        /// <summary> Determines if two <see cref="ApiTier"/> values are the same. </summary>
        public static bool operator ==(ApiTier left, ApiTier right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ApiTier"/> values are not the same. </summary>
        public static bool operator !=(ApiTier left, ApiTier right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ApiTier"/>. </summary>
        public static implicit operator ApiTier(string value) => new ApiTier(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ApiTier other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ApiTier other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
