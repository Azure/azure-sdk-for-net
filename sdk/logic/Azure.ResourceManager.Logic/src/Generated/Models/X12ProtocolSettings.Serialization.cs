// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.Logic.Models
{
    public partial class X12ProtocolSettings : IUtf8JsonSerializable, IModelJsonSerializable<X12ProtocolSettings>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<X12ProtocolSettings>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<X12ProtocolSettings>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<X12ProtocolSettings>(this, options.Format);

            writer.WriteStartObject();
            writer.WritePropertyName("validationSettings"u8);
            if (ValidationSettings is null)
            {
                writer.WriteNullValue();
            }
            else
            {
                ((IModelJsonSerializable<X12ValidationSettings>)ValidationSettings).Serialize(writer, options);
            }
            writer.WritePropertyName("framingSettings"u8);
            if (FramingSettings is null)
            {
                writer.WriteNullValue();
            }
            else
            {
                ((IModelJsonSerializable<X12FramingSettings>)FramingSettings).Serialize(writer, options);
            }
            writer.WritePropertyName("envelopeSettings"u8);
            if (EnvelopeSettings is null)
            {
                writer.WriteNullValue();
            }
            else
            {
                ((IModelJsonSerializable<X12EnvelopeSettings>)EnvelopeSettings).Serialize(writer, options);
            }
            writer.WritePropertyName("acknowledgementSettings"u8);
            if (AcknowledgementSettings is null)
            {
                writer.WriteNullValue();
            }
            else
            {
                ((IModelJsonSerializable<X12AcknowledgementSettings>)AcknowledgementSettings).Serialize(writer, options);
            }
            writer.WritePropertyName("messageFilter"u8);
            if (MessageFilter is null)
            {
                writer.WriteNullValue();
            }
            else
            {
                ((IModelJsonSerializable<X12MessageFilter>)MessageFilter).Serialize(writer, options);
            }
            writer.WritePropertyName("securitySettings"u8);
            if (SecuritySettings is null)
            {
                writer.WriteNullValue();
            }
            else
            {
                ((IModelJsonSerializable<X12SecuritySettings>)SecuritySettings).Serialize(writer, options);
            }
            writer.WritePropertyName("processingSettings"u8);
            if (ProcessingSettings is null)
            {
                writer.WriteNullValue();
            }
            else
            {
                ((IModelJsonSerializable<X12ProcessingSettings>)ProcessingSettings).Serialize(writer, options);
            }
            if (Optional.IsCollectionDefined(EnvelopeOverrides))
            {
                writer.WritePropertyName("envelopeOverrides"u8);
                writer.WriteStartArray();
                foreach (var item in EnvelopeOverrides)
                {
                    if (item is null)
                    {
                        writer.WriteNullValue();
                    }
                    else
                    {
                        ((IModelJsonSerializable<X12EnvelopeOverride>)item).Serialize(writer, options);
                    }
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(ValidationOverrides))
            {
                writer.WritePropertyName("validationOverrides"u8);
                writer.WriteStartArray();
                foreach (var item in ValidationOverrides)
                {
                    if (item is null)
                    {
                        writer.WriteNullValue();
                    }
                    else
                    {
                        ((IModelJsonSerializable<X12ValidationOverride>)item).Serialize(writer, options);
                    }
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(MessageFilterList))
            {
                writer.WritePropertyName("messageFilterList"u8);
                writer.WriteStartArray();
                foreach (var item in MessageFilterList)
                {
                    if (item is null)
                    {
                        writer.WriteNullValue();
                    }
                    else
                    {
                        ((IModelJsonSerializable<X12MessageIdentifier>)item).Serialize(writer, options);
                    }
                }
                writer.WriteEndArray();
            }
            writer.WritePropertyName("schemaReferences"u8);
            writer.WriteStartArray();
            foreach (var item in SchemaReferences)
            {
                if (item is null)
                {
                    writer.WriteNullValue();
                }
                else
                {
                    ((IModelJsonSerializable<X12SchemaReference>)item).Serialize(writer, options);
                }
            }
            writer.WriteEndArray();
            if (Optional.IsCollectionDefined(X12DelimiterOverrides))
            {
                writer.WritePropertyName("x12DelimiterOverrides"u8);
                writer.WriteStartArray();
                foreach (var item in X12DelimiterOverrides)
                {
                    if (item is null)
                    {
                        writer.WriteNullValue();
                    }
                    else
                    {
                        ((IModelJsonSerializable<X12DelimiterOverrides>)item).Serialize(writer, options);
                    }
                }
                writer.WriteEndArray();
            }
            if (_serializedAdditionalRawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static X12ProtocolSettings DeserializeX12ProtocolSettings(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            X12ValidationSettings validationSettings = default;
            X12FramingSettings framingSettings = default;
            X12EnvelopeSettings envelopeSettings = default;
            X12AcknowledgementSettings acknowledgementSettings = default;
            X12MessageFilter messageFilter = default;
            X12SecuritySettings securitySettings = default;
            X12ProcessingSettings processingSettings = default;
            Optional<IList<X12EnvelopeOverride>> envelopeOverrides = default;
            Optional<IList<X12ValidationOverride>> validationOverrides = default;
            Optional<IList<X12MessageIdentifier>> messageFilterList = default;
            IList<X12SchemaReference> schemaReferences = default;
            Optional<IList<X12DelimiterOverrides>> x12DelimiterOverrides = default;
            Dictionary<string, BinaryData> serializedAdditionalRawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("validationSettings"u8))
                {
                    validationSettings = X12ValidationSettings.DeserializeX12ValidationSettings(property.Value);
                    continue;
                }
                if (property.NameEquals("framingSettings"u8))
                {
                    framingSettings = X12FramingSettings.DeserializeX12FramingSettings(property.Value);
                    continue;
                }
                if (property.NameEquals("envelopeSettings"u8))
                {
                    envelopeSettings = X12EnvelopeSettings.DeserializeX12EnvelopeSettings(property.Value);
                    continue;
                }
                if (property.NameEquals("acknowledgementSettings"u8))
                {
                    acknowledgementSettings = X12AcknowledgementSettings.DeserializeX12AcknowledgementSettings(property.Value);
                    continue;
                }
                if (property.NameEquals("messageFilter"u8))
                {
                    messageFilter = X12MessageFilter.DeserializeX12MessageFilter(property.Value);
                    continue;
                }
                if (property.NameEquals("securitySettings"u8))
                {
                    securitySettings = X12SecuritySettings.DeserializeX12SecuritySettings(property.Value);
                    continue;
                }
                if (property.NameEquals("processingSettings"u8))
                {
                    processingSettings = X12ProcessingSettings.DeserializeX12ProcessingSettings(property.Value);
                    continue;
                }
                if (property.NameEquals("envelopeOverrides"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<X12EnvelopeOverride> array = new List<X12EnvelopeOverride>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(X12EnvelopeOverride.DeserializeX12EnvelopeOverride(item));
                    }
                    envelopeOverrides = array;
                    continue;
                }
                if (property.NameEquals("validationOverrides"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<X12ValidationOverride> array = new List<X12ValidationOverride>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(X12ValidationOverride.DeserializeX12ValidationOverride(item));
                    }
                    validationOverrides = array;
                    continue;
                }
                if (property.NameEquals("messageFilterList"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<X12MessageIdentifier> array = new List<X12MessageIdentifier>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(X12MessageIdentifier.DeserializeX12MessageIdentifier(item));
                    }
                    messageFilterList = array;
                    continue;
                }
                if (property.NameEquals("schemaReferences"u8))
                {
                    List<X12SchemaReference> array = new List<X12SchemaReference>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(X12SchemaReference.DeserializeX12SchemaReference(item));
                    }
                    schemaReferences = array;
                    continue;
                }
                if (property.NameEquals("x12DelimiterOverrides"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<X12DelimiterOverrides> array = new List<X12DelimiterOverrides>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Models.X12DelimiterOverrides.DeserializeX12DelimiterOverrides(item));
                    }
                    x12DelimiterOverrides = array;
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    serializedAdditionalRawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new X12ProtocolSettings(validationSettings, framingSettings, envelopeSettings, acknowledgementSettings, messageFilter, securitySettings, processingSettings, Optional.ToList(envelopeOverrides), Optional.ToList(validationOverrides), Optional.ToList(messageFilterList), schemaReferences, Optional.ToList(x12DelimiterOverrides), serializedAdditionalRawData);
        }

        X12ProtocolSettings IModelJsonSerializable<X12ProtocolSettings>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<X12ProtocolSettings>(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeX12ProtocolSettings(doc.RootElement, options);
        }

        BinaryData IModelSerializable<X12ProtocolSettings>.Serialize(ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<X12ProtocolSettings>(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        X12ProtocolSettings IModelSerializable<X12ProtocolSettings>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<X12ProtocolSettings>(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeX12ProtocolSettings(doc.RootElement, options);
        }

        /// <summary> Converts a <see cref="X12ProtocolSettings"/> into a <see cref="RequestContent"/>. </summary>
        /// <param name="model"> The <see cref="X12ProtocolSettings"/> to convert. </param>
        public static implicit operator RequestContent(X12ProtocolSettings model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        /// <summary> Converts a <see cref="Response"/> into a <see cref="X12ProtocolSettings"/>. </summary>
        /// <param name="response"> The <see cref="Response"/> to convert. </param>
        public static explicit operator X12ProtocolSettings(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeX12ProtocolSettings(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
