// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Logic.Models
{
    public partial class EdifactSchemaReference : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("messageId");
            writer.WriteStringValue(MessageId);
            writer.WritePropertyName("messageVersion");
            writer.WriteStringValue(MessageVersion);
            writer.WritePropertyName("messageRelease");
            writer.WriteStringValue(MessageRelease);
            if (Optional.IsDefined(SenderApplicationId))
            {
                writer.WritePropertyName("senderApplicationId");
                writer.WriteStringValue(SenderApplicationId);
            }
            if (Optional.IsDefined(SenderApplicationQualifier))
            {
                writer.WritePropertyName("senderApplicationQualifier");
                writer.WriteStringValue(SenderApplicationQualifier);
            }
            if (Optional.IsDefined(AssociationAssignedCode))
            {
                writer.WritePropertyName("associationAssignedCode");
                writer.WriteStringValue(AssociationAssignedCode);
            }
            writer.WritePropertyName("schemaName");
            writer.WriteStringValue(SchemaName);
            writer.WriteEndObject();
        }

        internal static EdifactSchemaReference DeserializeEdifactSchemaReference(JsonElement element)
        {
            string messageId = default;
            string messageVersion = default;
            string messageRelease = default;
            Optional<string> senderApplicationId = default;
            Optional<string> senderApplicationQualifier = default;
            Optional<string> associationAssignedCode = default;
            string schemaName = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("messageId"))
                {
                    messageId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("messageVersion"))
                {
                    messageVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("messageRelease"))
                {
                    messageRelease = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("senderApplicationId"))
                {
                    senderApplicationId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("senderApplicationQualifier"))
                {
                    senderApplicationQualifier = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("associationAssignedCode"))
                {
                    associationAssignedCode = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("schemaName"))
                {
                    schemaName = property.Value.GetString();
                    continue;
                }
            }
            return new EdifactSchemaReference(messageId, messageVersion, messageRelease, senderApplicationId.Value, senderApplicationQualifier.Value, associationAssignedCode.Value, schemaName);
        }
    }
}
