// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Logic.Models
{
    /// <summary> The tracking record type. </summary>
    public readonly partial struct TrackingRecordType : IEquatable<TrackingRecordType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="TrackingRecordType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public TrackingRecordType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NotSpecifiedValue = "NotSpecified";
        private const string CustomValue = "Custom";
        private const string AS2MessageValue = "AS2Message";
        private const string AS2MDNValue = "AS2MDN";
        private const string X12InterchangeValue = "X12Interchange";
        private const string X12FunctionalGroupValue = "X12FunctionalGroup";
        private const string X12TransactionSetValue = "X12TransactionSet";
        private const string X12InterchangeAcknowledgmentValue = "X12InterchangeAcknowledgment";
        private const string X12FunctionalGroupAcknowledgmentValue = "X12FunctionalGroupAcknowledgment";
        private const string X12TransactionSetAcknowledgmentValue = "X12TransactionSetAcknowledgment";
        private const string EdifactInterchangeValue = "EdifactInterchange";
        private const string EdifactFunctionalGroupValue = "EdifactFunctionalGroup";
        private const string EdifactTransactionSetValue = "EdifactTransactionSet";
        private const string EdifactInterchangeAcknowledgmentValue = "EdifactInterchangeAcknowledgment";
        private const string EdifactFunctionalGroupAcknowledgmentValue = "EdifactFunctionalGroupAcknowledgment";
        private const string EdifactTransactionSetAcknowledgmentValue = "EdifactTransactionSetAcknowledgment";

        /// <summary> NotSpecified. </summary>
        public static TrackingRecordType NotSpecified { get; } = new TrackingRecordType(NotSpecifiedValue);
        /// <summary> Custom. </summary>
        public static TrackingRecordType Custom { get; } = new TrackingRecordType(CustomValue);
        /// <summary> AS2Message. </summary>
        public static TrackingRecordType AS2Message { get; } = new TrackingRecordType(AS2MessageValue);
        /// <summary> AS2MDN. </summary>
        public static TrackingRecordType AS2MDN { get; } = new TrackingRecordType(AS2MDNValue);
        /// <summary> X12Interchange. </summary>
        public static TrackingRecordType X12Interchange { get; } = new TrackingRecordType(X12InterchangeValue);
        /// <summary> X12FunctionalGroup. </summary>
        public static TrackingRecordType X12FunctionalGroup { get; } = new TrackingRecordType(X12FunctionalGroupValue);
        /// <summary> X12TransactionSet. </summary>
        public static TrackingRecordType X12TransactionSet { get; } = new TrackingRecordType(X12TransactionSetValue);
        /// <summary> X12InterchangeAcknowledgment. </summary>
        public static TrackingRecordType X12InterchangeAcknowledgment { get; } = new TrackingRecordType(X12InterchangeAcknowledgmentValue);
        /// <summary> X12FunctionalGroupAcknowledgment. </summary>
        public static TrackingRecordType X12FunctionalGroupAcknowledgment { get; } = new TrackingRecordType(X12FunctionalGroupAcknowledgmentValue);
        /// <summary> X12TransactionSetAcknowledgment. </summary>
        public static TrackingRecordType X12TransactionSetAcknowledgment { get; } = new TrackingRecordType(X12TransactionSetAcknowledgmentValue);
        /// <summary> EdifactInterchange. </summary>
        public static TrackingRecordType EdifactInterchange { get; } = new TrackingRecordType(EdifactInterchangeValue);
        /// <summary> EdifactFunctionalGroup. </summary>
        public static TrackingRecordType EdifactFunctionalGroup { get; } = new TrackingRecordType(EdifactFunctionalGroupValue);
        /// <summary> EdifactTransactionSet. </summary>
        public static TrackingRecordType EdifactTransactionSet { get; } = new TrackingRecordType(EdifactTransactionSetValue);
        /// <summary> EdifactInterchangeAcknowledgment. </summary>
        public static TrackingRecordType EdifactInterchangeAcknowledgment { get; } = new TrackingRecordType(EdifactInterchangeAcknowledgmentValue);
        /// <summary> EdifactFunctionalGroupAcknowledgment. </summary>
        public static TrackingRecordType EdifactFunctionalGroupAcknowledgment { get; } = new TrackingRecordType(EdifactFunctionalGroupAcknowledgmentValue);
        /// <summary> EdifactTransactionSetAcknowledgment. </summary>
        public static TrackingRecordType EdifactTransactionSetAcknowledgment { get; } = new TrackingRecordType(EdifactTransactionSetAcknowledgmentValue);
        /// <summary> Determines if two <see cref="TrackingRecordType"/> values are the same. </summary>
        public static bool operator ==(TrackingRecordType left, TrackingRecordType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="TrackingRecordType"/> values are not the same. </summary>
        public static bool operator !=(TrackingRecordType left, TrackingRecordType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="TrackingRecordType"/>. </summary>
        public static implicit operator TrackingRecordType(string value) => new TrackingRecordType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is TrackingRecordType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(TrackingRecordType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
