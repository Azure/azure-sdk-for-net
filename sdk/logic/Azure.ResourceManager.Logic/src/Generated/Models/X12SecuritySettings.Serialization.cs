// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Logic.Models
{
    public partial class X12SecuritySettings : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("authorizationQualifier");
            writer.WriteStringValue(AuthorizationQualifier);
            if (Optional.IsDefined(AuthorizationValue))
            {
                writer.WritePropertyName("authorizationValue");
                writer.WriteStringValue(AuthorizationValue);
            }
            writer.WritePropertyName("securityQualifier");
            writer.WriteStringValue(SecurityQualifier);
            if (Optional.IsDefined(PasswordValue))
            {
                writer.WritePropertyName("passwordValue");
                writer.WriteStringValue(PasswordValue);
            }
            writer.WriteEndObject();
        }

        internal static X12SecuritySettings DeserializeX12SecuritySettings(JsonElement element)
        {
            string authorizationQualifier = default;
            Optional<string> authorizationValue = default;
            string securityQualifier = default;
            Optional<string> passwordValue = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("authorizationQualifier"))
                {
                    authorizationQualifier = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("authorizationValue"))
                {
                    authorizationValue = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("securityQualifier"))
                {
                    securityQualifier = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("passwordValue"))
                {
                    passwordValue = property.Value.GetString();
                    continue;
                }
            }
            return new X12SecuritySettings(authorizationQualifier, authorizationValue.Value, securityQualifier, passwordValue.Value);
        }
    }
}
