// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Logic.Models
{
    /// <summary>
    /// The Api tier.
    /// Serialized Name: ApiTier
    /// </summary>
    public readonly partial struct LogicAppApiTier : IEquatable<LogicAppApiTier>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="LogicAppApiTier"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public LogicAppApiTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NotSpecifiedValue = "NotSpecified";
        private const string EnterpriseValue = "Enterprise";
        private const string StandardValue = "Standard";
        private const string PremiumValue = "Premium";

        /// <summary>
        /// NotSpecified
        /// Serialized Name: ApiTier.NotSpecified
        /// </summary>
        public static LogicAppApiTier NotSpecified { get; } = new LogicAppApiTier(NotSpecifiedValue);
        /// <summary>
        /// Enterprise
        /// Serialized Name: ApiTier.Enterprise
        /// </summary>
        public static LogicAppApiTier Enterprise { get; } = new LogicAppApiTier(EnterpriseValue);
        /// <summary>
        /// Standard
        /// Serialized Name: ApiTier.Standard
        /// </summary>
        public static LogicAppApiTier Standard { get; } = new LogicAppApiTier(StandardValue);
        /// <summary>
        /// Premium
        /// Serialized Name: ApiTier.Premium
        /// </summary>
        public static LogicAppApiTier Premium { get; } = new LogicAppApiTier(PremiumValue);
        /// <summary> Determines if two <see cref="LogicAppApiTier"/> values are the same. </summary>
        public static bool operator ==(LogicAppApiTier left, LogicAppApiTier right) => left.Equals(right);
        /// <summary> Determines if two <see cref="LogicAppApiTier"/> values are not the same. </summary>
        public static bool operator !=(LogicAppApiTier left, LogicAppApiTier right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="LogicAppApiTier"/>. </summary>
        public static implicit operator LogicAppApiTier(string value) => new LogicAppApiTier(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is LogicAppApiTier other && Equals(other);
        /// <inheritdoc />
        public bool Equals(LogicAppApiTier other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
