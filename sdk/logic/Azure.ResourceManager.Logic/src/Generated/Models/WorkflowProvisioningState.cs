// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Logic.Models
{
    /// <summary> The workflow provisioning state. </summary>
    public readonly partial struct WorkflowProvisioningState : IEquatable<WorkflowProvisioningState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="WorkflowProvisioningState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public WorkflowProvisioningState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NotSpecifiedValue = "NotSpecified";
        private const string AcceptedValue = "Accepted";
        private const string RunningValue = "Running";
        private const string ReadyValue = "Ready";
        private const string CreatingValue = "Creating";
        private const string CreatedValue = "Created";
        private const string DeletingValue = "Deleting";
        private const string DeletedValue = "Deleted";
        private const string CanceledValue = "Canceled";
        private const string FailedValue = "Failed";
        private const string SucceededValue = "Succeeded";
        private const string MovingValue = "Moving";
        private const string UpdatingValue = "Updating";
        private const string RegisteringValue = "Registering";
        private const string RegisteredValue = "Registered";
        private const string UnregisteringValue = "Unregistering";
        private const string UnregisteredValue = "Unregistered";
        private const string CompletedValue = "Completed";
        private const string RenewingValue = "Renewing";
        private const string PendingValue = "Pending";
        private const string WaitingValue = "Waiting";
        private const string InProgressValue = "InProgress";

        /// <summary> NotSpecified. </summary>
        public static WorkflowProvisioningState NotSpecified { get; } = new WorkflowProvisioningState(NotSpecifiedValue);
        /// <summary> Accepted. </summary>
        public static WorkflowProvisioningState Accepted { get; } = new WorkflowProvisioningState(AcceptedValue);
        /// <summary> Running. </summary>
        public static WorkflowProvisioningState Running { get; } = new WorkflowProvisioningState(RunningValue);
        /// <summary> Ready. </summary>
        public static WorkflowProvisioningState Ready { get; } = new WorkflowProvisioningState(ReadyValue);
        /// <summary> Creating. </summary>
        public static WorkflowProvisioningState Creating { get; } = new WorkflowProvisioningState(CreatingValue);
        /// <summary> Created. </summary>
        public static WorkflowProvisioningState Created { get; } = new WorkflowProvisioningState(CreatedValue);
        /// <summary> Deleting. </summary>
        public static WorkflowProvisioningState Deleting { get; } = new WorkflowProvisioningState(DeletingValue);
        /// <summary> Deleted. </summary>
        public static WorkflowProvisioningState Deleted { get; } = new WorkflowProvisioningState(DeletedValue);
        /// <summary> Canceled. </summary>
        public static WorkflowProvisioningState Canceled { get; } = new WorkflowProvisioningState(CanceledValue);
        /// <summary> Failed. </summary>
        public static WorkflowProvisioningState Failed { get; } = new WorkflowProvisioningState(FailedValue);
        /// <summary> Succeeded. </summary>
        public static WorkflowProvisioningState Succeeded { get; } = new WorkflowProvisioningState(SucceededValue);
        /// <summary> Moving. </summary>
        public static WorkflowProvisioningState Moving { get; } = new WorkflowProvisioningState(MovingValue);
        /// <summary> Updating. </summary>
        public static WorkflowProvisioningState Updating { get; } = new WorkflowProvisioningState(UpdatingValue);
        /// <summary> Registering. </summary>
        public static WorkflowProvisioningState Registering { get; } = new WorkflowProvisioningState(RegisteringValue);
        /// <summary> Registered. </summary>
        public static WorkflowProvisioningState Registered { get; } = new WorkflowProvisioningState(RegisteredValue);
        /// <summary> Unregistering. </summary>
        public static WorkflowProvisioningState Unregistering { get; } = new WorkflowProvisioningState(UnregisteringValue);
        /// <summary> Unregistered. </summary>
        public static WorkflowProvisioningState Unregistered { get; } = new WorkflowProvisioningState(UnregisteredValue);
        /// <summary> Completed. </summary>
        public static WorkflowProvisioningState Completed { get; } = new WorkflowProvisioningState(CompletedValue);
        /// <summary> Renewing. </summary>
        public static WorkflowProvisioningState Renewing { get; } = new WorkflowProvisioningState(RenewingValue);
        /// <summary> Pending. </summary>
        public static WorkflowProvisioningState Pending { get; } = new WorkflowProvisioningState(PendingValue);
        /// <summary> Waiting. </summary>
        public static WorkflowProvisioningState Waiting { get; } = new WorkflowProvisioningState(WaitingValue);
        /// <summary> InProgress. </summary>
        public static WorkflowProvisioningState InProgress { get; } = new WorkflowProvisioningState(InProgressValue);
        /// <summary> Determines if two <see cref="WorkflowProvisioningState"/> values are the same. </summary>
        public static bool operator ==(WorkflowProvisioningState left, WorkflowProvisioningState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="WorkflowProvisioningState"/> values are not the same. </summary>
        public static bool operator !=(WorkflowProvisioningState left, WorkflowProvisioningState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="WorkflowProvisioningState"/>. </summary>
        public static implicit operator WorkflowProvisioningState(string value) => new WorkflowProvisioningState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is WorkflowProvisioningState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(WorkflowProvisioningState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
