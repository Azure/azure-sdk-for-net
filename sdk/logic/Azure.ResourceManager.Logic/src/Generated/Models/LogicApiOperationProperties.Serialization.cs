// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Logic.Models
{
    public partial class LogicApiOperationProperties : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(Summary))
            {
                writer.WritePropertyName("summary"u8);
                writer.WriteStringValue(Summary);
            }
            if (Core.Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description"u8);
                writer.WriteStringValue(Description);
            }
            if (Core.Optional.IsDefined(Visibility))
            {
                writer.WritePropertyName("visibility"u8);
                writer.WriteStringValue(Visibility);
            }
            if (Core.Optional.IsDefined(Trigger))
            {
                writer.WritePropertyName("trigger"u8);
                writer.WriteStringValue(Trigger);
            }
            if (Core.Optional.IsDefined(TriggerHint))
            {
                writer.WritePropertyName("triggerHint"u8);
                writer.WriteStringValue(TriggerHint);
            }
            if (Core.Optional.IsDefined(IsPageable))
            {
                writer.WritePropertyName("pageable"u8);
                writer.WriteBooleanValue(IsPageable.Value);
            }
            if (Core.Optional.IsDefined(Annotation))
            {
                writer.WritePropertyName("annotation"u8);
                writer.WriteObjectValue(Annotation);
            }
            if (Core.Optional.IsDefined(Api))
            {
                writer.WritePropertyName("api"u8);
                writer.WriteObjectValue(Api);
            }
            if (Core.Optional.IsDefined(InputsDefinition))
            {
                writer.WritePropertyName("inputsDefinition"u8);
                writer.WriteObjectValue(InputsDefinition);
            }
            if (Core.Optional.IsCollectionDefined(ResponsesDefinition))
            {
                writer.WritePropertyName("responsesDefinition"u8);
                writer.WriteStartObject();
                foreach (var item in ResponsesDefinition)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteObjectValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Core.Optional.IsDefined(IsWebhook))
            {
                writer.WritePropertyName("isWebhook"u8);
                writer.WriteBooleanValue(IsWebhook.Value);
            }
            if (Core.Optional.IsDefined(IsNotification))
            {
                writer.WritePropertyName("isNotification"u8);
                writer.WriteBooleanValue(IsNotification.Value);
            }
            writer.WriteEndObject();
        }

        internal static LogicApiOperationProperties DeserializeLogicApiOperationProperties(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<string> summary = default;
            Core.Optional<string> description = default;
            Core.Optional<string> visibility = default;
            Core.Optional<string> trigger = default;
            Core.Optional<string> triggerHint = default;
            Core.Optional<bool> pageable = default;
            Core.Optional<LogicApiOperationAnnotation> annotation = default;
            Core.Optional<LogicApiReference> api = default;
            Core.Optional<SwaggerSchema> inputsDefinition = default;
            Core.Optional<IDictionary<string, SwaggerSchema>> responsesDefinition = default;
            Core.Optional<bool> isWebhook = default;
            Core.Optional<bool> isNotification = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("summary"u8))
                {
                    summary = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("description"u8))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("visibility"u8))
                {
                    visibility = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("trigger"u8))
                {
                    trigger = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("triggerHint"u8))
                {
                    triggerHint = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("pageable"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    pageable = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("annotation"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    annotation = LogicApiOperationAnnotation.DeserializeLogicApiOperationAnnotation(property.Value);
                    continue;
                }
                if (property.NameEquals("api"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    api = LogicApiReference.DeserializeLogicApiReference(property.Value);
                    continue;
                }
                if (property.NameEquals("inputsDefinition"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    inputsDefinition = SwaggerSchema.DeserializeSwaggerSchema(property.Value);
                    continue;
                }
                if (property.NameEquals("responsesDefinition"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, SwaggerSchema> dictionary = new Dictionary<string, SwaggerSchema>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, SwaggerSchema.DeserializeSwaggerSchema(property0.Value));
                    }
                    responsesDefinition = dictionary;
                    continue;
                }
                if (property.NameEquals("isWebhook"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isWebhook = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("isNotification"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isNotification = property.Value.GetBoolean();
                    continue;
                }
            }
            return new LogicApiOperationProperties(summary.Value, description.Value, visibility.Value, trigger.Value, triggerHint.Value, Core.Optional.ToNullable(pageable), annotation.Value, api.Value, inputsDefinition.Value, Core.Optional.ToDictionary(responsesDefinition), Core.Optional.ToNullable(isWebhook), Core.Optional.ToNullable(isNotification));
        }
    }
}
