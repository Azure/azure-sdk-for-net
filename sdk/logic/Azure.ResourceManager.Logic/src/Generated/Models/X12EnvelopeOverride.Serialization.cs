// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Logic.Models
{
    public partial class X12EnvelopeOverride : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("targetNamespace");
            writer.WriteStringValue(TargetNamespace);
            writer.WritePropertyName("protocolVersion");
            writer.WriteStringValue(ProtocolVersion);
            writer.WritePropertyName("messageId");
            writer.WriteStringValue(MessageId);
            writer.WritePropertyName("responsibleAgencyCode");
            writer.WriteStringValue(ResponsibleAgencyCode);
            writer.WritePropertyName("headerVersion");
            writer.WriteStringValue(HeaderVersion);
            writer.WritePropertyName("senderApplicationId");
            writer.WriteStringValue(SenderApplicationId);
            writer.WritePropertyName("receiverApplicationId");
            writer.WriteStringValue(ReceiverApplicationId);
            if (Optional.IsDefined(FunctionalIdentifierCode))
            {
                writer.WritePropertyName("functionalIdentifierCode");
                writer.WriteStringValue(FunctionalIdentifierCode);
            }
            writer.WritePropertyName("dateFormat");
            writer.WriteStringValue(DateFormat.ToString());
            writer.WritePropertyName("timeFormat");
            writer.WriteStringValue(TimeFormat.ToString());
            writer.WriteEndObject();
        }

        internal static X12EnvelopeOverride DeserializeX12EnvelopeOverride(JsonElement element)
        {
            string targetNamespace = default;
            string protocolVersion = default;
            string messageId = default;
            string responsibleAgencyCode = default;
            string headerVersion = default;
            string senderApplicationId = default;
            string receiverApplicationId = default;
            Optional<string> functionalIdentifierCode = default;
            X12DateFormat dateFormat = default;
            X12TimeFormat timeFormat = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("targetNamespace"))
                {
                    targetNamespace = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("protocolVersion"))
                {
                    protocolVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("messageId"))
                {
                    messageId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("responsibleAgencyCode"))
                {
                    responsibleAgencyCode = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("headerVersion"))
                {
                    headerVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("senderApplicationId"))
                {
                    senderApplicationId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("receiverApplicationId"))
                {
                    receiverApplicationId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("functionalIdentifierCode"))
                {
                    functionalIdentifierCode = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("dateFormat"))
                {
                    dateFormat = new X12DateFormat(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("timeFormat"))
                {
                    timeFormat = new X12TimeFormat(property.Value.GetString());
                    continue;
                }
            }
            return new X12EnvelopeOverride(targetNamespace, protocolVersion, messageId, responsibleAgencyCode, headerVersion, senderApplicationId, receiverApplicationId, functionalIdentifierCode.Value, dateFormat, timeFormat);
        }
    }
}
