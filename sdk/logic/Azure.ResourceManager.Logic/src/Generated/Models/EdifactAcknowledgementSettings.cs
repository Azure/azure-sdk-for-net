// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

namespace Azure.ResourceManager.Logic.Models
{
    /// <summary> The Edifact agreement acknowledgement settings. </summary>
    public partial class EdifactAcknowledgementSettings
    {
        /// <summary> Initializes a new instance of <see cref="EdifactAcknowledgementSettings"/>. </summary>
        /// <param name="needTechnicalAcknowledgement"> The value indicating whether technical acknowledgement is needed. </param>
        /// <param name="batchTechnicalAcknowledgement"> The value indicating whether to batch the technical acknowledgements. </param>
        /// <param name="needFunctionalAcknowledgement"> The value indicating whether functional acknowledgement is needed. </param>
        /// <param name="batchFunctionalAcknowledgement"> The value indicating whether to batch functional acknowledgements. </param>
        /// <param name="needLoopForValidMessages"> The value indicating whether a loop is needed for valid messages. </param>
        /// <param name="sendSynchronousAcknowledgement"> The value indicating whether to send synchronous acknowledgement. </param>
        /// <param name="acknowledgementControlNumberLowerBound"> The acknowledgement control number lower bound. </param>
        /// <param name="acknowledgementControlNumberUpperBound"> The acknowledgement control number upper bound. </param>
        /// <param name="rolloverAcknowledgementControlNumber"> The value indicating whether to rollover acknowledgement control number. </param>
        public EdifactAcknowledgementSettings(bool needTechnicalAcknowledgement, bool batchTechnicalAcknowledgement, bool needFunctionalAcknowledgement, bool batchFunctionalAcknowledgement, bool needLoopForValidMessages, bool sendSynchronousAcknowledgement, int acknowledgementControlNumberLowerBound, int acknowledgementControlNumberUpperBound, bool rolloverAcknowledgementControlNumber)
        {
            NeedTechnicalAcknowledgement = needTechnicalAcknowledgement;
            BatchTechnicalAcknowledgement = batchTechnicalAcknowledgement;
            NeedFunctionalAcknowledgement = needFunctionalAcknowledgement;
            BatchFunctionalAcknowledgement = batchFunctionalAcknowledgement;
            NeedLoopForValidMessages = needLoopForValidMessages;
            SendSynchronousAcknowledgement = sendSynchronousAcknowledgement;
            AcknowledgementControlNumberLowerBound = acknowledgementControlNumberLowerBound;
            AcknowledgementControlNumberUpperBound = acknowledgementControlNumberUpperBound;
            RolloverAcknowledgementControlNumber = rolloverAcknowledgementControlNumber;
        }

        /// <summary> Initializes a new instance of <see cref="EdifactAcknowledgementSettings"/>. </summary>
        /// <param name="needTechnicalAcknowledgement"> The value indicating whether technical acknowledgement is needed. </param>
        /// <param name="batchTechnicalAcknowledgement"> The value indicating whether to batch the technical acknowledgements. </param>
        /// <param name="needFunctionalAcknowledgement"> The value indicating whether functional acknowledgement is needed. </param>
        /// <param name="batchFunctionalAcknowledgement"> The value indicating whether to batch functional acknowledgements. </param>
        /// <param name="needLoopForValidMessages"> The value indicating whether a loop is needed for valid messages. </param>
        /// <param name="sendSynchronousAcknowledgement"> The value indicating whether to send synchronous acknowledgement. </param>
        /// <param name="acknowledgementControlNumberPrefix"> The acknowledgement control number prefix. </param>
        /// <param name="acknowledgementControlNumberSuffix"> The acknowledgement control number suffix. </param>
        /// <param name="acknowledgementControlNumberLowerBound"> The acknowledgement control number lower bound. </param>
        /// <param name="acknowledgementControlNumberUpperBound"> The acknowledgement control number upper bound. </param>
        /// <param name="rolloverAcknowledgementControlNumber"> The value indicating whether to rollover acknowledgement control number. </param>
        internal EdifactAcknowledgementSettings(bool needTechnicalAcknowledgement, bool batchTechnicalAcknowledgement, bool needFunctionalAcknowledgement, bool batchFunctionalAcknowledgement, bool needLoopForValidMessages, bool sendSynchronousAcknowledgement, string acknowledgementControlNumberPrefix, string acknowledgementControlNumberSuffix, int acknowledgementControlNumberLowerBound, int acknowledgementControlNumberUpperBound, bool rolloverAcknowledgementControlNumber)
        {
            NeedTechnicalAcknowledgement = needTechnicalAcknowledgement;
            BatchTechnicalAcknowledgement = batchTechnicalAcknowledgement;
            NeedFunctionalAcknowledgement = needFunctionalAcknowledgement;
            BatchFunctionalAcknowledgement = batchFunctionalAcknowledgement;
            NeedLoopForValidMessages = needLoopForValidMessages;
            SendSynchronousAcknowledgement = sendSynchronousAcknowledgement;
            AcknowledgementControlNumberPrefix = acknowledgementControlNumberPrefix;
            AcknowledgementControlNumberSuffix = acknowledgementControlNumberSuffix;
            AcknowledgementControlNumberLowerBound = acknowledgementControlNumberLowerBound;
            AcknowledgementControlNumberUpperBound = acknowledgementControlNumberUpperBound;
            RolloverAcknowledgementControlNumber = rolloverAcknowledgementControlNumber;
        }

        /// <summary> The value indicating whether technical acknowledgement is needed. </summary>
        public bool NeedTechnicalAcknowledgement { get; set; }
        /// <summary> The value indicating whether to batch the technical acknowledgements. </summary>
        public bool BatchTechnicalAcknowledgement { get; set; }
        /// <summary> The value indicating whether functional acknowledgement is needed. </summary>
        public bool NeedFunctionalAcknowledgement { get; set; }
        /// <summary> The value indicating whether to batch functional acknowledgements. </summary>
        public bool BatchFunctionalAcknowledgement { get; set; }
        /// <summary> The value indicating whether a loop is needed for valid messages. </summary>
        public bool NeedLoopForValidMessages { get; set; }
        /// <summary> The value indicating whether to send synchronous acknowledgement. </summary>
        public bool SendSynchronousAcknowledgement { get; set; }
        /// <summary> The acknowledgement control number prefix. </summary>
        public string AcknowledgementControlNumberPrefix { get; set; }
        /// <summary> The acknowledgement control number suffix. </summary>
        public string AcknowledgementControlNumberSuffix { get; set; }
        /// <summary> The acknowledgement control number lower bound. </summary>
        public int AcknowledgementControlNumberLowerBound { get; set; }
        /// <summary> The acknowledgement control number upper bound. </summary>
        public int AcknowledgementControlNumberUpperBound { get; set; }
        /// <summary> The value indicating whether to rollover acknowledgement control number. </summary>
        public bool RolloverAcknowledgementControlNumber { get; set; }
    }
}
