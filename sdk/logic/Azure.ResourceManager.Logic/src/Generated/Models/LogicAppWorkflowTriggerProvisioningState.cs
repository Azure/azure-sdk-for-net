// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Logic.Models
{
    /// <summary>
    /// The workflow trigger provisioning state.
    /// Serialized Name: WorkflowTriggerProvisioningState
    /// </summary>
    public readonly partial struct LogicAppWorkflowTriggerProvisioningState : IEquatable<LogicAppWorkflowTriggerProvisioningState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="LogicAppWorkflowTriggerProvisioningState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public LogicAppWorkflowTriggerProvisioningState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NotSpecifiedValue = "NotSpecified";
        private const string AcceptedValue = "Accepted";
        private const string RunningValue = "Running";
        private const string ReadyValue = "Ready";
        private const string CreatingValue = "Creating";
        private const string CreatedValue = "Created";
        private const string DeletingValue = "Deleting";
        private const string DeletedValue = "Deleted";
        private const string CanceledValue = "Canceled";
        private const string FailedValue = "Failed";
        private const string SucceededValue = "Succeeded";
        private const string MovingValue = "Moving";
        private const string UpdatingValue = "Updating";
        private const string RegisteringValue = "Registering";
        private const string RegisteredValue = "Registered";
        private const string UnregisteringValue = "Unregistering";
        private const string UnregisteredValue = "Unregistered";
        private const string CompletedValue = "Completed";

        /// <summary>
        /// NotSpecified
        /// Serialized Name: WorkflowTriggerProvisioningState.NotSpecified
        /// </summary>
        public static LogicAppWorkflowTriggerProvisioningState NotSpecified { get; } = new LogicAppWorkflowTriggerProvisioningState(NotSpecifiedValue);
        /// <summary>
        /// Accepted
        /// Serialized Name: WorkflowTriggerProvisioningState.Accepted
        /// </summary>
        public static LogicAppWorkflowTriggerProvisioningState Accepted { get; } = new LogicAppWorkflowTriggerProvisioningState(AcceptedValue);
        /// <summary>
        /// Running
        /// Serialized Name: WorkflowTriggerProvisioningState.Running
        /// </summary>
        public static LogicAppWorkflowTriggerProvisioningState Running { get; } = new LogicAppWorkflowTriggerProvisioningState(RunningValue);
        /// <summary>
        /// Ready
        /// Serialized Name: WorkflowTriggerProvisioningState.Ready
        /// </summary>
        public static LogicAppWorkflowTriggerProvisioningState Ready { get; } = new LogicAppWorkflowTriggerProvisioningState(ReadyValue);
        /// <summary>
        /// Creating
        /// Serialized Name: WorkflowTriggerProvisioningState.Creating
        /// </summary>
        public static LogicAppWorkflowTriggerProvisioningState Creating { get; } = new LogicAppWorkflowTriggerProvisioningState(CreatingValue);
        /// <summary>
        /// Created
        /// Serialized Name: WorkflowTriggerProvisioningState.Created
        /// </summary>
        public static LogicAppWorkflowTriggerProvisioningState Created { get; } = new LogicAppWorkflowTriggerProvisioningState(CreatedValue);
        /// <summary>
        /// Deleting
        /// Serialized Name: WorkflowTriggerProvisioningState.Deleting
        /// </summary>
        public static LogicAppWorkflowTriggerProvisioningState Deleting { get; } = new LogicAppWorkflowTriggerProvisioningState(DeletingValue);
        /// <summary>
        /// Deleted
        /// Serialized Name: WorkflowTriggerProvisioningState.Deleted
        /// </summary>
        public static LogicAppWorkflowTriggerProvisioningState Deleted { get; } = new LogicAppWorkflowTriggerProvisioningState(DeletedValue);
        /// <summary>
        /// Canceled
        /// Serialized Name: WorkflowTriggerProvisioningState.Canceled
        /// </summary>
        public static LogicAppWorkflowTriggerProvisioningState Canceled { get; } = new LogicAppWorkflowTriggerProvisioningState(CanceledValue);
        /// <summary>
        /// Failed
        /// Serialized Name: WorkflowTriggerProvisioningState.Failed
        /// </summary>
        public static LogicAppWorkflowTriggerProvisioningState Failed { get; } = new LogicAppWorkflowTriggerProvisioningState(FailedValue);
        /// <summary>
        /// Succeeded
        /// Serialized Name: WorkflowTriggerProvisioningState.Succeeded
        /// </summary>
        public static LogicAppWorkflowTriggerProvisioningState Succeeded { get; } = new LogicAppWorkflowTriggerProvisioningState(SucceededValue);
        /// <summary>
        /// Moving
        /// Serialized Name: WorkflowTriggerProvisioningState.Moving
        /// </summary>
        public static LogicAppWorkflowTriggerProvisioningState Moving { get; } = new LogicAppWorkflowTriggerProvisioningState(MovingValue);
        /// <summary>
        /// Updating
        /// Serialized Name: WorkflowTriggerProvisioningState.Updating
        /// </summary>
        public static LogicAppWorkflowTriggerProvisioningState Updating { get; } = new LogicAppWorkflowTriggerProvisioningState(UpdatingValue);
        /// <summary>
        /// Registering
        /// Serialized Name: WorkflowTriggerProvisioningState.Registering
        /// </summary>
        public static LogicAppWorkflowTriggerProvisioningState Registering { get; } = new LogicAppWorkflowTriggerProvisioningState(RegisteringValue);
        /// <summary>
        /// Registered
        /// Serialized Name: WorkflowTriggerProvisioningState.Registered
        /// </summary>
        public static LogicAppWorkflowTriggerProvisioningState Registered { get; } = new LogicAppWorkflowTriggerProvisioningState(RegisteredValue);
        /// <summary>
        /// Unregistering
        /// Serialized Name: WorkflowTriggerProvisioningState.Unregistering
        /// </summary>
        public static LogicAppWorkflowTriggerProvisioningState Unregistering { get; } = new LogicAppWorkflowTriggerProvisioningState(UnregisteringValue);
        /// <summary>
        /// Unregistered
        /// Serialized Name: WorkflowTriggerProvisioningState.Unregistered
        /// </summary>
        public static LogicAppWorkflowTriggerProvisioningState Unregistered { get; } = new LogicAppWorkflowTriggerProvisioningState(UnregisteredValue);
        /// <summary>
        /// Completed
        /// Serialized Name: WorkflowTriggerProvisioningState.Completed
        /// </summary>
        public static LogicAppWorkflowTriggerProvisioningState Completed { get; } = new LogicAppWorkflowTriggerProvisioningState(CompletedValue);
        /// <summary> Determines if two <see cref="LogicAppWorkflowTriggerProvisioningState"/> values are the same. </summary>
        public static bool operator ==(LogicAppWorkflowTriggerProvisioningState left, LogicAppWorkflowTriggerProvisioningState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="LogicAppWorkflowTriggerProvisioningState"/> values are not the same. </summary>
        public static bool operator !=(LogicAppWorkflowTriggerProvisioningState left, LogicAppWorkflowTriggerProvisioningState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="LogicAppWorkflowTriggerProvisioningState"/>. </summary>
        public static implicit operator LogicAppWorkflowTriggerProvisioningState(string value) => new LogicAppWorkflowTriggerProvisioningState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is LogicAppWorkflowTriggerProvisioningState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(LogicAppWorkflowTriggerProvisioningState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
