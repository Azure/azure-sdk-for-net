// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Logic.Models
{
    public partial class X12FramingSettings : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("dataElementSeparator"u8);
            writer.WriteNumberValue(DataElementSeparator);
            writer.WritePropertyName("componentSeparator"u8);
            writer.WriteNumberValue(ComponentSeparator);
            writer.WritePropertyName("replaceSeparatorsInPayload"u8);
            writer.WriteBooleanValue(ReplaceSeparatorsInPayload);
            writer.WritePropertyName("replaceCharacter"u8);
            writer.WriteNumberValue(ReplaceCharacter);
            writer.WritePropertyName("segmentTerminator"u8);
            writer.WriteNumberValue(SegmentTerminator);
            writer.WritePropertyName("characterSet"u8);
            writer.WriteStringValue(CharacterSet.ToString());
            writer.WritePropertyName("segmentTerminatorSuffix"u8);
            writer.WriteStringValue(SegmentTerminatorSuffix.ToSerialString());
            writer.WriteEndObject();
        }

        internal static X12FramingSettings DeserializeX12FramingSettings(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            int dataElementSeparator = default;
            int componentSeparator = default;
            bool replaceSeparatorsInPayload = default;
            int replaceCharacter = default;
            int segmentTerminator = default;
            X12CharacterSet characterSet = default;
            SegmentTerminatorSuffix segmentTerminatorSuffix = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("dataElementSeparator"u8))
                {
                    dataElementSeparator = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("componentSeparator"u8))
                {
                    componentSeparator = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("replaceSeparatorsInPayload"u8))
                {
                    replaceSeparatorsInPayload = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("replaceCharacter"u8))
                {
                    replaceCharacter = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("segmentTerminator"u8))
                {
                    segmentTerminator = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("characterSet"u8))
                {
                    characterSet = new X12CharacterSet(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("segmentTerminatorSuffix"u8))
                {
                    segmentTerminatorSuffix = property.Value.GetString().ToSegmentTerminatorSuffix();
                    continue;
                }
            }
            return new X12FramingSettings(dataElementSeparator, componentSeparator, replaceSeparatorsInPayload, replaceCharacter, segmentTerminator, characterSet, segmentTerminatorSuffix);
        }
    }
}
