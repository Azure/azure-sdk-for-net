// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Logic.Models
{
    public partial class AS2MessageConnectionSettings : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("ignoreCertificateNameMismatch");
            writer.WriteBooleanValue(IgnoreCertificateNameMismatch);
            writer.WritePropertyName("supportHttpStatusCodeContinue");
            writer.WriteBooleanValue(SupportHttpStatusCodeContinue);
            writer.WritePropertyName("keepHttpConnectionAlive");
            writer.WriteBooleanValue(KeepHttpConnectionAlive);
            writer.WritePropertyName("unfoldHttpHeaders");
            writer.WriteBooleanValue(UnfoldHttpHeaders);
            writer.WriteEndObject();
        }

        internal static AS2MessageConnectionSettings DeserializeAS2MessageConnectionSettings(JsonElement element)
        {
            bool ignoreCertificateNameMismatch = default;
            bool supportHttpStatusCodeContinue = default;
            bool keepHttpConnectionAlive = default;
            bool unfoldHttpHeaders = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("ignoreCertificateNameMismatch"))
                {
                    ignoreCertificateNameMismatch = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("supportHttpStatusCodeContinue"))
                {
                    supportHttpStatusCodeContinue = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("keepHttpConnectionAlive"))
                {
                    keepHttpConnectionAlive = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("unfoldHttpHeaders"))
                {
                    unfoldHttpHeaders = property.Value.GetBoolean();
                    continue;
                }
            }
            return new AS2MessageConnectionSettings(ignoreCertificateNameMismatch, supportHttpStatusCodeContinue, keepHttpConnectionAlive, unfoldHttpHeaders);
        }
    }
}
