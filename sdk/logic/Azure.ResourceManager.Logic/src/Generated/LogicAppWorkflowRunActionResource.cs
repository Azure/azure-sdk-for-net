// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Logic.Models;

namespace Azure.ResourceManager.Logic
{
    /// <summary>
    /// A Class representing a LogicAppWorkflowRunAction along with the instance operations that can be performed on it.
    /// If you have a <see cref="ResourceIdentifier" /> you can construct a <see cref="LogicAppWorkflowRunActionResource" />
    /// from an instance of <see cref="ArmClient" /> using the GetLogicAppWorkflowRunActionResource method.
    /// Otherwise you can get one from its parent resource <see cref="LogicAppWorkflowRunResource" /> using the GetLogicAppWorkflowRunAction method.
    /// </summary>
    public partial class LogicAppWorkflowRunActionResource : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="LogicAppWorkflowRunActionResource"/> instance. </summary>
        public static ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string resourceGroupName, string workflowName, string runName, string actionName)
        {
            var resourceId = $"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/actions/{actionName}";
            return new ResourceIdentifier(resourceId);
        }

        private readonly ClientDiagnostics _logicAppWorkflowRunActionWorkflowRunActionsClientDiagnostics;
        private readonly WorkflowRunActionsRestOperations _logicAppWorkflowRunActionWorkflowRunActionsRestClient;
        private readonly LogicAppWorkflowRunActionData _data;

        /// <summary> Initializes a new instance of the <see cref="LogicAppWorkflowRunActionResource"/> class for mocking. </summary>
        protected LogicAppWorkflowRunActionResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref = "LogicAppWorkflowRunActionResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal LogicAppWorkflowRunActionResource(ArmClient client, LogicAppWorkflowRunActionData data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of the <see cref="LogicAppWorkflowRunActionResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal LogicAppWorkflowRunActionResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _logicAppWorkflowRunActionWorkflowRunActionsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Logic", ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ResourceType, out string logicAppWorkflowRunActionWorkflowRunActionsApiVersion);
            _logicAppWorkflowRunActionWorkflowRunActionsRestClient = new WorkflowRunActionsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, logicAppWorkflowRunActionWorkflowRunActionsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.Logic/workflows/runs/actions";

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual LogicAppWorkflowRunActionData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary> Gets a collection of LogicAppWorkflowRunActionRepetitionResources in the LogicAppWorkflowRunAction. </summary>
        /// <returns> An object representing collection of LogicAppWorkflowRunActionRepetitionResources and their operations over a LogicAppWorkflowRunActionRepetitionResource. </returns>
        public virtual LogicAppWorkflowRunActionRepetitionCollection GetLogicAppWorkflowRunActionRepetitions()
        {
            return GetCachedClient(Client => new LogicAppWorkflowRunActionRepetitionCollection(Client, Id));
        }

        /// <summary>
        /// Get a workflow run action repetition.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/actions/{actionName}/repetitions/{repetitionName}
        /// Operation Id: WorkflowRunActionRepetitions_Get
        /// </summary>
        /// <param name="repetitionName"> The workflow repetition. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="repetitionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="repetitionName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<LogicAppWorkflowRunActionRepetitionResource>> GetLogicAppWorkflowRunActionRepetitionAsync(string repetitionName, CancellationToken cancellationToken = default)
        {
            return await GetLogicAppWorkflowRunActionRepetitions().GetAsync(repetitionName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a workflow run action repetition.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/actions/{actionName}/repetitions/{repetitionName}
        /// Operation Id: WorkflowRunActionRepetitions_Get
        /// </summary>
        /// <param name="repetitionName"> The workflow repetition. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="repetitionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="repetitionName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<LogicAppWorkflowRunActionRepetitionResource> GetLogicAppWorkflowRunActionRepetition(string repetitionName, CancellationToken cancellationToken = default)
        {
            return GetLogicAppWorkflowRunActionRepetitions().Get(repetitionName, cancellationToken);
        }

        /// <summary> Gets a collection of LogicAppWorkflowRunActionScopeRepetitionResources in the LogicAppWorkflowRunAction. </summary>
        /// <returns> An object representing collection of LogicAppWorkflowRunActionScopeRepetitionResources and their operations over a LogicAppWorkflowRunActionScopeRepetitionResource. </returns>
        public virtual LogicAppWorkflowRunActionScopeRepetitionCollection GetLogicAppWorkflowRunActionScopeRepetitions()
        {
            return GetCachedClient(Client => new LogicAppWorkflowRunActionScopeRepetitionCollection(Client, Id));
        }

        /// <summary>
        /// Get a workflow run action scoped repetition.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/actions/{actionName}/scopeRepetitions/{repetitionName}
        /// Operation Id: WorkflowRunActionScopeRepetitions_Get
        /// </summary>
        /// <param name="repetitionName"> The workflow repetition. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="repetitionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="repetitionName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<LogicAppWorkflowRunActionScopeRepetitionResource>> GetLogicAppWorkflowRunActionScopeRepetitionAsync(string repetitionName, CancellationToken cancellationToken = default)
        {
            return await GetLogicAppWorkflowRunActionScopeRepetitions().GetAsync(repetitionName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a workflow run action scoped repetition.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/actions/{actionName}/scopeRepetitions/{repetitionName}
        /// Operation Id: WorkflowRunActionScopeRepetitions_Get
        /// </summary>
        /// <param name="repetitionName"> The workflow repetition. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="repetitionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="repetitionName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<LogicAppWorkflowRunActionScopeRepetitionResource> GetLogicAppWorkflowRunActionScopeRepetition(string repetitionName, CancellationToken cancellationToken = default)
        {
            return GetLogicAppWorkflowRunActionScopeRepetitions().Get(repetitionName, cancellationToken);
        }

        /// <summary> Gets a collection of LogicAppWorkflowRunActionRequestHistoryResources in the LogicAppWorkflowRunAction. </summary>
        /// <returns> An object representing collection of LogicAppWorkflowRunActionRequestHistoryResources and their operations over a LogicAppWorkflowRunActionRequestHistoryResource. </returns>
        public virtual LogicAppWorkflowRunActionRequestHistoryCollection GetLogicAppWorkflowRunActionRequestHistories()
        {
            return GetCachedClient(Client => new LogicAppWorkflowRunActionRequestHistoryCollection(Client, Id));
        }

        /// <summary>
        /// Gets a workflow run request history.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/actions/{actionName}/requestHistories/{requestHistoryName}
        /// Operation Id: WorkflowRunActionRequestHistories_Get
        /// </summary>
        /// <param name="requestHistoryName"> The request history name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="requestHistoryName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="requestHistoryName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<LogicAppWorkflowRunActionRequestHistoryResource>> GetLogicAppWorkflowRunActionRequestHistoryAsync(string requestHistoryName, CancellationToken cancellationToken = default)
        {
            return await GetLogicAppWorkflowRunActionRequestHistories().GetAsync(requestHistoryName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets a workflow run request history.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/actions/{actionName}/requestHistories/{requestHistoryName}
        /// Operation Id: WorkflowRunActionRequestHistories_Get
        /// </summary>
        /// <param name="requestHistoryName"> The request history name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="requestHistoryName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="requestHistoryName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<LogicAppWorkflowRunActionRequestHistoryResource> GetLogicAppWorkflowRunActionRequestHistory(string requestHistoryName, CancellationToken cancellationToken = default)
        {
            return GetLogicAppWorkflowRunActionRequestHistories().Get(requestHistoryName, cancellationToken);
        }

        /// <summary>
        /// Gets a workflow run action.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/actions/{actionName}
        /// Operation Id: WorkflowRunActions_Get
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<LogicAppWorkflowRunActionResource>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _logicAppWorkflowRunActionWorkflowRunActionsClientDiagnostics.CreateScope("LogicAppWorkflowRunActionResource.Get");
            scope.Start();
            try
            {
                var response = await _logicAppWorkflowRunActionWorkflowRunActionsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new LogicAppWorkflowRunActionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets a workflow run action.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/actions/{actionName}
        /// Operation Id: WorkflowRunActions_Get
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<LogicAppWorkflowRunActionResource> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _logicAppWorkflowRunActionWorkflowRunActionsClientDiagnostics.CreateScope("LogicAppWorkflowRunActionResource.Get");
            scope.Start();
            try
            {
                var response = _logicAppWorkflowRunActionWorkflowRunActionsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new LogicAppWorkflowRunActionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Lists a workflow run expression trace.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/actions/{actionName}/listExpressionTraces
        /// Operation Id: WorkflowRunActions_ListExpressionTraces
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ExpressionRoot" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ExpressionRoot> GetExpressionTracesAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<ExpressionRoot>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _logicAppWorkflowRunActionWorkflowRunActionsClientDiagnostics.CreateScope("LogicAppWorkflowRunActionResource.GetExpressionTraces");
                scope.Start();
                try
                {
                    var response = await _logicAppWorkflowRunActionWorkflowRunActionsRestClient.ListExpressionTracesAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Inputs, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Lists a workflow run expression trace.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/actions/{actionName}/listExpressionTraces
        /// Operation Id: WorkflowRunActions_ListExpressionTraces
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ExpressionRoot" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ExpressionRoot> GetExpressionTraces(CancellationToken cancellationToken = default)
        {
            Page<ExpressionRoot> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _logicAppWorkflowRunActionWorkflowRunActionsClientDiagnostics.CreateScope("LogicAppWorkflowRunActionResource.GetExpressionTraces");
                scope.Start();
                try
                {
                    var response = _logicAppWorkflowRunActionWorkflowRunActionsRestClient.ListExpressionTraces(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Inputs, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }
    }
}
