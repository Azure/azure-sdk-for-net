// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Logic.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.Logic
{
    /// <summary>
    /// A Class representing an IntegrationAccount along with the instance operations that can be performed on it.
    /// If you have a <see cref="ResourceIdentifier" /> you can construct an <see cref="IntegrationAccountResource" />
    /// from an instance of <see cref="ArmClient" /> using the GetIntegrationAccountResource method.
    /// Otherwise you can get one from its parent resource <see cref="ResourceGroupResource" /> using the GetIntegrationAccount method.
    /// </summary>
    public partial class IntegrationAccountResource : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="IntegrationAccountResource"/> instance. </summary>
        public static ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string resourceGroupName, string integrationAccountName)
        {
            var resourceId = $"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}";
            return new ResourceIdentifier(resourceId);
        }

        private readonly ClientDiagnostics _integrationAccountClientDiagnostics;
        private readonly IntegrationAccountsRestOperations _integrationAccountRestClient;
        private readonly IntegrationAccountData _data;

        /// <summary> Initializes a new instance of the <see cref="IntegrationAccountResource"/> class for mocking. </summary>
        protected IntegrationAccountResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref = "IntegrationAccountResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal IntegrationAccountResource(ArmClient client, IntegrationAccountData data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of the <see cref="IntegrationAccountResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal IntegrationAccountResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _integrationAccountClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Logic", ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ResourceType, out string integrationAccountApiVersion);
            _integrationAccountRestClient = new IntegrationAccountsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, integrationAccountApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.Logic/integrationAccounts";

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual IntegrationAccountData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary> Gets a collection of AssemblyDefinitionResources in the IntegrationAccount. </summary>
        /// <returns> An object representing collection of AssemblyDefinitionResources and their operations over a AssemblyDefinitionResource. </returns>
        public virtual AssemblyDefinitionCollection GetAssemblyDefinitions()
        {
            return GetCachedClient(Client => new AssemblyDefinitionCollection(Client, Id));
        }

        /// <summary>
        /// Get an assembly for an integration account.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/assemblies/{assemblyArtifactName}
        /// Operation Id: IntegrationAccountAssemblies_Get
        /// </summary>
        /// <param name="assemblyArtifactName"> The assembly artifact name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="assemblyArtifactName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="assemblyArtifactName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<AssemblyDefinitionResource>> GetAssemblyDefinitionAsync(string assemblyArtifactName, CancellationToken cancellationToken = default)
        {
            return await GetAssemblyDefinitions().GetAsync(assemblyArtifactName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get an assembly for an integration account.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/assemblies/{assemblyArtifactName}
        /// Operation Id: IntegrationAccountAssemblies_Get
        /// </summary>
        /// <param name="assemblyArtifactName"> The assembly artifact name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="assemblyArtifactName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="assemblyArtifactName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<AssemblyDefinitionResource> GetAssemblyDefinition(string assemblyArtifactName, CancellationToken cancellationToken = default)
        {
            return GetAssemblyDefinitions().Get(assemblyArtifactName, cancellationToken);
        }

        /// <summary> Gets a collection of BatchConfigurationResources in the IntegrationAccount. </summary>
        /// <returns> An object representing collection of BatchConfigurationResources and their operations over a BatchConfigurationResource. </returns>
        public virtual BatchConfigurationCollection GetBatchConfigurations()
        {
            return GetCachedClient(Client => new BatchConfigurationCollection(Client, Id));
        }

        /// <summary>
        /// Get a batch configuration for an integration account.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/batchConfigurations/{batchConfigurationName}
        /// Operation Id: IntegrationAccountBatchConfigurations_Get
        /// </summary>
        /// <param name="batchConfigurationName"> The batch configuration name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="batchConfigurationName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="batchConfigurationName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<BatchConfigurationResource>> GetBatchConfigurationAsync(string batchConfigurationName, CancellationToken cancellationToken = default)
        {
            return await GetBatchConfigurations().GetAsync(batchConfigurationName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a batch configuration for an integration account.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/batchConfigurations/{batchConfigurationName}
        /// Operation Id: IntegrationAccountBatchConfigurations_Get
        /// </summary>
        /// <param name="batchConfigurationName"> The batch configuration name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="batchConfigurationName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="batchConfigurationName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<BatchConfigurationResource> GetBatchConfiguration(string batchConfigurationName, CancellationToken cancellationToken = default)
        {
            return GetBatchConfigurations().Get(batchConfigurationName, cancellationToken);
        }

        /// <summary> Gets a collection of IntegrationAccountSchemaResources in the IntegrationAccount. </summary>
        /// <returns> An object representing collection of IntegrationAccountSchemaResources and their operations over a IntegrationAccountSchemaResource. </returns>
        public virtual IntegrationAccountSchemaCollection GetIntegrationAccountSchemas()
        {
            return GetCachedClient(Client => new IntegrationAccountSchemaCollection(Client, Id));
        }

        /// <summary>
        /// Gets an integration account schema.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/schemas/{schemaName}
        /// Operation Id: IntegrationAccountSchemas_Get
        /// </summary>
        /// <param name="schemaName"> The integration account schema name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="schemaName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="schemaName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<IntegrationAccountSchemaResource>> GetIntegrationAccountSchemaAsync(string schemaName, CancellationToken cancellationToken = default)
        {
            return await GetIntegrationAccountSchemas().GetAsync(schemaName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets an integration account schema.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/schemas/{schemaName}
        /// Operation Id: IntegrationAccountSchemas_Get
        /// </summary>
        /// <param name="schemaName"> The integration account schema name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="schemaName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="schemaName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<IntegrationAccountSchemaResource> GetIntegrationAccountSchema(string schemaName, CancellationToken cancellationToken = default)
        {
            return GetIntegrationAccountSchemas().Get(schemaName, cancellationToken);
        }

        /// <summary> Gets a collection of IntegrationAccountMapResources in the IntegrationAccount. </summary>
        /// <returns> An object representing collection of IntegrationAccountMapResources and their operations over a IntegrationAccountMapResource. </returns>
        public virtual IntegrationAccountMapCollection GetIntegrationAccountMaps()
        {
            return GetCachedClient(Client => new IntegrationAccountMapCollection(Client, Id));
        }

        /// <summary>
        /// Gets an integration account map.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/maps/{mapName}
        /// Operation Id: IntegrationAccountMaps_Get
        /// </summary>
        /// <param name="mapName"> The integration account map name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="mapName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="mapName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<IntegrationAccountMapResource>> GetIntegrationAccountMapAsync(string mapName, CancellationToken cancellationToken = default)
        {
            return await GetIntegrationAccountMaps().GetAsync(mapName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets an integration account map.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/maps/{mapName}
        /// Operation Id: IntegrationAccountMaps_Get
        /// </summary>
        /// <param name="mapName"> The integration account map name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="mapName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="mapName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<IntegrationAccountMapResource> GetIntegrationAccountMap(string mapName, CancellationToken cancellationToken = default)
        {
            return GetIntegrationAccountMaps().Get(mapName, cancellationToken);
        }

        /// <summary> Gets a collection of IntegrationAccountPartnerResources in the IntegrationAccount. </summary>
        /// <returns> An object representing collection of IntegrationAccountPartnerResources and their operations over a IntegrationAccountPartnerResource. </returns>
        public virtual IntegrationAccountPartnerCollection GetIntegrationAccountPartners()
        {
            return GetCachedClient(Client => new IntegrationAccountPartnerCollection(Client, Id));
        }

        /// <summary>
        /// Gets an integration account partner.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/partners/{partnerName}
        /// Operation Id: IntegrationAccountPartners_Get
        /// </summary>
        /// <param name="partnerName"> The integration account partner name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="partnerName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="partnerName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<IntegrationAccountPartnerResource>> GetIntegrationAccountPartnerAsync(string partnerName, CancellationToken cancellationToken = default)
        {
            return await GetIntegrationAccountPartners().GetAsync(partnerName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets an integration account partner.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/partners/{partnerName}
        /// Operation Id: IntegrationAccountPartners_Get
        /// </summary>
        /// <param name="partnerName"> The integration account partner name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="partnerName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="partnerName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<IntegrationAccountPartnerResource> GetIntegrationAccountPartner(string partnerName, CancellationToken cancellationToken = default)
        {
            return GetIntegrationAccountPartners().Get(partnerName, cancellationToken);
        }

        /// <summary> Gets a collection of IntegrationAccountAgreementResources in the IntegrationAccount. </summary>
        /// <returns> An object representing collection of IntegrationAccountAgreementResources and their operations over a IntegrationAccountAgreementResource. </returns>
        public virtual IntegrationAccountAgreementCollection GetIntegrationAccountAgreements()
        {
            return GetCachedClient(Client => new IntegrationAccountAgreementCollection(Client, Id));
        }

        /// <summary>
        /// Gets an integration account agreement.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/agreements/{agreementName}
        /// Operation Id: IntegrationAccountAgreements_Get
        /// </summary>
        /// <param name="agreementName"> The integration account agreement name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="agreementName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="agreementName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<IntegrationAccountAgreementResource>> GetIntegrationAccountAgreementAsync(string agreementName, CancellationToken cancellationToken = default)
        {
            return await GetIntegrationAccountAgreements().GetAsync(agreementName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets an integration account agreement.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/agreements/{agreementName}
        /// Operation Id: IntegrationAccountAgreements_Get
        /// </summary>
        /// <param name="agreementName"> The integration account agreement name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="agreementName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="agreementName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<IntegrationAccountAgreementResource> GetIntegrationAccountAgreement(string agreementName, CancellationToken cancellationToken = default)
        {
            return GetIntegrationAccountAgreements().Get(agreementName, cancellationToken);
        }

        /// <summary> Gets a collection of IntegrationAccountCertificateResources in the IntegrationAccount. </summary>
        /// <returns> An object representing collection of IntegrationAccountCertificateResources and their operations over a IntegrationAccountCertificateResource. </returns>
        public virtual IntegrationAccountCertificateCollection GetIntegrationAccountCertificates()
        {
            return GetCachedClient(Client => new IntegrationAccountCertificateCollection(Client, Id));
        }

        /// <summary>
        /// Gets an integration account certificate.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/certificates/{certificateName}
        /// Operation Id: IntegrationAccountCertificates_Get
        /// </summary>
        /// <param name="certificateName"> The integration account certificate name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="certificateName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="certificateName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<IntegrationAccountCertificateResource>> GetIntegrationAccountCertificateAsync(string certificateName, CancellationToken cancellationToken = default)
        {
            return await GetIntegrationAccountCertificates().GetAsync(certificateName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets an integration account certificate.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/certificates/{certificateName}
        /// Operation Id: IntegrationAccountCertificates_Get
        /// </summary>
        /// <param name="certificateName"> The integration account certificate name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="certificateName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="certificateName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<IntegrationAccountCertificateResource> GetIntegrationAccountCertificate(string certificateName, CancellationToken cancellationToken = default)
        {
            return GetIntegrationAccountCertificates().Get(certificateName, cancellationToken);
        }

        /// <summary> Gets a collection of IntegrationAccountSessionResources in the IntegrationAccount. </summary>
        /// <returns> An object representing collection of IntegrationAccountSessionResources and their operations over a IntegrationAccountSessionResource. </returns>
        public virtual IntegrationAccountSessionCollection GetIntegrationAccountSessions()
        {
            return GetCachedClient(Client => new IntegrationAccountSessionCollection(Client, Id));
        }

        /// <summary>
        /// Gets an integration account session.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/sessions/{sessionName}
        /// Operation Id: IntegrationAccountSessions_Get
        /// </summary>
        /// <param name="sessionName"> The integration account session name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="sessionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="sessionName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<IntegrationAccountSessionResource>> GetIntegrationAccountSessionAsync(string sessionName, CancellationToken cancellationToken = default)
        {
            return await GetIntegrationAccountSessions().GetAsync(sessionName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets an integration account session.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/sessions/{sessionName}
        /// Operation Id: IntegrationAccountSessions_Get
        /// </summary>
        /// <param name="sessionName"> The integration account session name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="sessionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="sessionName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<IntegrationAccountSessionResource> GetIntegrationAccountSession(string sessionName, CancellationToken cancellationToken = default)
        {
            return GetIntegrationAccountSessions().Get(sessionName, cancellationToken);
        }

        /// <summary>
        /// Gets an integration account.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}
        /// Operation Id: IntegrationAccounts_Get
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<IntegrationAccountResource>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _integrationAccountClientDiagnostics.CreateScope("IntegrationAccountResource.Get");
            scope.Start();
            try
            {
                var response = await _integrationAccountRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new IntegrationAccountResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets an integration account.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}
        /// Operation Id: IntegrationAccounts_Get
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<IntegrationAccountResource> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _integrationAccountClientDiagnostics.CreateScope("IntegrationAccountResource.Get");
            scope.Start();
            try
            {
                var response = _integrationAccountRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new IntegrationAccountResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Deletes an integration account.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}
        /// Operation Id: IntegrationAccounts_Delete
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation> DeleteAsync(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _integrationAccountClientDiagnostics.CreateScope("IntegrationAccountResource.Delete");
            scope.Start();
            try
            {
                var response = await _integrationAccountRestClient.DeleteAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                var operation = new LogicArmOperation(response);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Deletes an integration account.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}
        /// Operation Id: IntegrationAccounts_Delete
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation Delete(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _integrationAccountClientDiagnostics.CreateScope("IntegrationAccountResource.Delete");
            scope.Start();
            try
            {
                var response = _integrationAccountRestClient.Delete(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                var operation = new LogicArmOperation(response);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Updates an integration account.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}
        /// Operation Id: IntegrationAccounts_Update
        /// </summary>
        /// <param name="data"> The integration account. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="data"/> is null. </exception>
        public virtual async Task<Response<IntegrationAccountResource>> UpdateAsync(IntegrationAccountData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _integrationAccountClientDiagnostics.CreateScope("IntegrationAccountResource.Update");
            scope.Start();
            try
            {
                var response = await _integrationAccountRestClient.UpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, data, cancellationToken).ConfigureAwait(false);
                return Response.FromValue(new IntegrationAccountResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Updates an integration account.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}
        /// Operation Id: IntegrationAccounts_Update
        /// </summary>
        /// <param name="data"> The integration account. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="data"/> is null. </exception>
        public virtual Response<IntegrationAccountResource> Update(IntegrationAccountData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _integrationAccountClientDiagnostics.CreateScope("IntegrationAccountResource.Update");
            scope.Start();
            try
            {
                var response = _integrationAccountRestClient.Update(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, data, cancellationToken);
                return Response.FromValue(new IntegrationAccountResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets the integration account callback URL.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/listCallbackUrl
        /// Operation Id: IntegrationAccounts_ListCallbackUrl
        /// </summary>
        /// <param name="getCallbackUrlParameters"> The callback URL parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="getCallbackUrlParameters"/> is null. </exception>
        public virtual async Task<Response<CallbackUri>> GetCallbackUrlAsync(GetCallbackUrlParameters getCallbackUrlParameters, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(getCallbackUrlParameters, nameof(getCallbackUrlParameters));

            using var scope = _integrationAccountClientDiagnostics.CreateScope("IntegrationAccountResource.GetCallbackUrl");
            scope.Start();
            try
            {
                var response = await _integrationAccountRestClient.ListCallbackUrlAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, getCallbackUrlParameters, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets the integration account callback URL.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/listCallbackUrl
        /// Operation Id: IntegrationAccounts_ListCallbackUrl
        /// </summary>
        /// <param name="getCallbackUrlParameters"> The callback URL parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="getCallbackUrlParameters"/> is null. </exception>
        public virtual Response<CallbackUri> GetCallbackUrl(GetCallbackUrlParameters getCallbackUrlParameters, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(getCallbackUrlParameters, nameof(getCallbackUrlParameters));

            using var scope = _integrationAccountClientDiagnostics.CreateScope("IntegrationAccountResource.GetCallbackUrl");
            scope.Start();
            try
            {
                var response = _integrationAccountRestClient.ListCallbackUrl(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, getCallbackUrlParameters, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets the integration account&apos;s Key Vault keys.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/listKeyVaultKeys
        /// Operation Id: IntegrationAccounts_ListKeyVaultKeys
        /// </summary>
        /// <param name="listKeyVaultKeys"> The key vault parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="listKeyVaultKeys"/> is null. </exception>
        /// <returns> An async collection of <see cref="KeyVaultKey" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<KeyVaultKey> GetKeyVaultKeysAsync(ListKeyVaultKeysDefinition listKeyVaultKeys, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(listKeyVaultKeys, nameof(listKeyVaultKeys));

            async Task<Page<KeyVaultKey>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _integrationAccountClientDiagnostics.CreateScope("IntegrationAccountResource.GetKeyVaultKeys");
                scope.Start();
                try
                {
                    var response = await _integrationAccountRestClient.ListKeyVaultKeysAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, listKeyVaultKeys, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Gets the integration account&apos;s Key Vault keys.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/listKeyVaultKeys
        /// Operation Id: IntegrationAccounts_ListKeyVaultKeys
        /// </summary>
        /// <param name="listKeyVaultKeys"> The key vault parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="listKeyVaultKeys"/> is null. </exception>
        /// <returns> A collection of <see cref="KeyVaultKey" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<KeyVaultKey> GetKeyVaultKeys(ListKeyVaultKeysDefinition listKeyVaultKeys, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(listKeyVaultKeys, nameof(listKeyVaultKeys));

            Page<KeyVaultKey> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _integrationAccountClientDiagnostics.CreateScope("IntegrationAccountResource.GetKeyVaultKeys");
                scope.Start();
                try
                {
                    var response = _integrationAccountRestClient.ListKeyVaultKeys(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, listKeyVaultKeys, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Logs the integration account&apos;s tracking events.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/logTrackingEvents
        /// Operation Id: IntegrationAccounts_LogTrackingEvents
        /// </summary>
        /// <param name="logTrackingEvents"> The callback URL parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="logTrackingEvents"/> is null. </exception>
        public virtual async Task<Response> LogTrackingEventsAsync(TrackingEventsDefinition logTrackingEvents, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(logTrackingEvents, nameof(logTrackingEvents));

            using var scope = _integrationAccountClientDiagnostics.CreateScope("IntegrationAccountResource.LogTrackingEvents");
            scope.Start();
            try
            {
                var response = await _integrationAccountRestClient.LogTrackingEventsAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, logTrackingEvents, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Logs the integration account&apos;s tracking events.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/logTrackingEvents
        /// Operation Id: IntegrationAccounts_LogTrackingEvents
        /// </summary>
        /// <param name="logTrackingEvents"> The callback URL parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="logTrackingEvents"/> is null. </exception>
        public virtual Response LogTrackingEvents(TrackingEventsDefinition logTrackingEvents, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(logTrackingEvents, nameof(logTrackingEvents));

            using var scope = _integrationAccountClientDiagnostics.CreateScope("IntegrationAccountResource.LogTrackingEvents");
            scope.Start();
            try
            {
                var response = _integrationAccountRestClient.LogTrackingEvents(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, logTrackingEvents, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Regenerates the integration account access key.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/regenerateAccessKey
        /// Operation Id: IntegrationAccounts_RegenerateAccessKey
        /// </summary>
        /// <param name="regenerateAccessKey"> The access key type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="regenerateAccessKey"/> is null. </exception>
        public virtual async Task<Response<IntegrationAccountResource>> RegenerateAccessKeyAsync(RegenerateActionParameter regenerateAccessKey, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(regenerateAccessKey, nameof(regenerateAccessKey));

            using var scope = _integrationAccountClientDiagnostics.CreateScope("IntegrationAccountResource.RegenerateAccessKey");
            scope.Start();
            try
            {
                var response = await _integrationAccountRestClient.RegenerateAccessKeyAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, regenerateAccessKey, cancellationToken).ConfigureAwait(false);
                return Response.FromValue(new IntegrationAccountResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Regenerates the integration account access key.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/regenerateAccessKey
        /// Operation Id: IntegrationAccounts_RegenerateAccessKey
        /// </summary>
        /// <param name="regenerateAccessKey"> The access key type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="regenerateAccessKey"/> is null. </exception>
        public virtual Response<IntegrationAccountResource> RegenerateAccessKey(RegenerateActionParameter regenerateAccessKey, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(regenerateAccessKey, nameof(regenerateAccessKey));

            using var scope = _integrationAccountClientDiagnostics.CreateScope("IntegrationAccountResource.RegenerateAccessKey");
            scope.Start();
            try
            {
                var response = _integrationAccountRestClient.RegenerateAccessKey(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, regenerateAccessKey, cancellationToken);
                return Response.FromValue(new IntegrationAccountResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Add a tag to the current resource.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}
        /// Operation Id: IntegrationAccounts_Get
        /// </summary>
        /// <param name="key"> The key for the tag. </param>
        /// <param name="value"> The value for the tag. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="key"/> or <paramref name="value"/> is null. </exception>
        public virtual async Task<Response<IntegrationAccountResource>> AddTagAsync(string key, string value, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(key, nameof(key));
            Argument.AssertNotNull(value, nameof(value));

            using var scope = _integrationAccountClientDiagnostics.CreateScope("IntegrationAccountResource.AddTag");
            scope.Start();
            try
            {
                var originalTags = await GetTagResource().GetAsync(cancellationToken).ConfigureAwait(false);
                originalTags.Value.Data.TagValues[key] = value;
                await GetTagResource().CreateOrUpdateAsync(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken).ConfigureAwait(false);
                var originalResponse = await _integrationAccountRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                return Response.FromValue(new IntegrationAccountResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Add a tag to the current resource.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}
        /// Operation Id: IntegrationAccounts_Get
        /// </summary>
        /// <param name="key"> The key for the tag. </param>
        /// <param name="value"> The value for the tag. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="key"/> or <paramref name="value"/> is null. </exception>
        public virtual Response<IntegrationAccountResource> AddTag(string key, string value, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(key, nameof(key));
            Argument.AssertNotNull(value, nameof(value));

            using var scope = _integrationAccountClientDiagnostics.CreateScope("IntegrationAccountResource.AddTag");
            scope.Start();
            try
            {
                var originalTags = GetTagResource().Get(cancellationToken);
                originalTags.Value.Data.TagValues[key] = value;
                GetTagResource().CreateOrUpdate(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken);
                var originalResponse = _integrationAccountRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                return Response.FromValue(new IntegrationAccountResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Replace the tags on the resource with the given set.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}
        /// Operation Id: IntegrationAccounts_Get
        /// </summary>
        /// <param name="tags"> The set of tags to use as replacement. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tags"/> is null. </exception>
        public virtual async Task<Response<IntegrationAccountResource>> SetTagsAsync(IDictionary<string, string> tags, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(tags, nameof(tags));

            using var scope = _integrationAccountClientDiagnostics.CreateScope("IntegrationAccountResource.SetTags");
            scope.Start();
            try
            {
                await GetTagResource().DeleteAsync(WaitUntil.Completed, cancellationToken: cancellationToken).ConfigureAwait(false);
                var originalTags = await GetTagResource().GetAsync(cancellationToken).ConfigureAwait(false);
                originalTags.Value.Data.TagValues.ReplaceWith(tags);
                await GetTagResource().CreateOrUpdateAsync(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken).ConfigureAwait(false);
                var originalResponse = await _integrationAccountRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                return Response.FromValue(new IntegrationAccountResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Replace the tags on the resource with the given set.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}
        /// Operation Id: IntegrationAccounts_Get
        /// </summary>
        /// <param name="tags"> The set of tags to use as replacement. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tags"/> is null. </exception>
        public virtual Response<IntegrationAccountResource> SetTags(IDictionary<string, string> tags, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(tags, nameof(tags));

            using var scope = _integrationAccountClientDiagnostics.CreateScope("IntegrationAccountResource.SetTags");
            scope.Start();
            try
            {
                GetTagResource().Delete(WaitUntil.Completed, cancellationToken: cancellationToken);
                var originalTags = GetTagResource().Get(cancellationToken);
                originalTags.Value.Data.TagValues.ReplaceWith(tags);
                GetTagResource().CreateOrUpdate(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken);
                var originalResponse = _integrationAccountRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                return Response.FromValue(new IntegrationAccountResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Removes a tag by key from the resource.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}
        /// Operation Id: IntegrationAccounts_Get
        /// </summary>
        /// <param name="key"> The key for the tag. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="key"/> is null. </exception>
        public virtual async Task<Response<IntegrationAccountResource>> RemoveTagAsync(string key, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(key, nameof(key));

            using var scope = _integrationAccountClientDiagnostics.CreateScope("IntegrationAccountResource.RemoveTag");
            scope.Start();
            try
            {
                var originalTags = await GetTagResource().GetAsync(cancellationToken).ConfigureAwait(false);
                originalTags.Value.Data.TagValues.Remove(key);
                await GetTagResource().CreateOrUpdateAsync(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken).ConfigureAwait(false);
                var originalResponse = await _integrationAccountRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                return Response.FromValue(new IntegrationAccountResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Removes a tag by key from the resource.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}
        /// Operation Id: IntegrationAccounts_Get
        /// </summary>
        /// <param name="key"> The key for the tag. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="key"/> is null. </exception>
        public virtual Response<IntegrationAccountResource> RemoveTag(string key, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(key, nameof(key));

            using var scope = _integrationAccountClientDiagnostics.CreateScope("IntegrationAccountResource.RemoveTag");
            scope.Start();
            try
            {
                var originalTags = GetTagResource().Get(cancellationToken);
                originalTags.Value.Data.TagValues.Remove(key);
                GetTagResource().CreateOrUpdate(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken);
                var originalResponse = _integrationAccountRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                return Response.FromValue(new IntegrationAccountResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
