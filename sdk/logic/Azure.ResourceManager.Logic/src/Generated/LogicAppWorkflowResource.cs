// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Logic.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.Logic
{
    /// <summary>
    /// A Class representing a LogicAppWorkflow along with the instance operations that can be performed on it.
    /// If you have a <see cref="ResourceIdentifier" /> you can construct a <see cref="LogicAppWorkflowResource" />
    /// from an instance of <see cref="ArmClient" /> using the GetLogicAppWorkflowResource method.
    /// Otherwise you can get one from its parent resource <see cref="ResourceGroupResource" /> using the GetLogicAppWorkflow method.
    /// </summary>
    public partial class LogicAppWorkflowResource : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="LogicAppWorkflowResource"/> instance. </summary>
        public static ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string resourceGroupName, string workflowName)
        {
            var resourceId = $"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}";
            return new ResourceIdentifier(resourceId);
        }

        private readonly ClientDiagnostics _logicAppWorkflowWorkflowsClientDiagnostics;
        private readonly WorkflowsRestOperations _logicAppWorkflowWorkflowsRestClient;
        private readonly LogicAppWorkflowData _data;

        /// <summary> Initializes a new instance of the <see cref="LogicAppWorkflowResource"/> class for mocking. </summary>
        protected LogicAppWorkflowResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref = "LogicAppWorkflowResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal LogicAppWorkflowResource(ArmClient client, LogicAppWorkflowData data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of the <see cref="LogicAppWorkflowResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal LogicAppWorkflowResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _logicAppWorkflowWorkflowsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Logic", ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ResourceType, out string logicAppWorkflowWorkflowsApiVersion);
            _logicAppWorkflowWorkflowsRestClient = new WorkflowsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, logicAppWorkflowWorkflowsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.Logic/workflows";

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual LogicAppWorkflowData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary> Gets a collection of LogicAppWorkflowVersionResources in the LogicAppWorkflow. </summary>
        /// <returns> An object representing collection of LogicAppWorkflowVersionResources and their operations over a LogicAppWorkflowVersionResource. </returns>
        public virtual LogicAppWorkflowVersionCollection GetLogicAppWorkflowVersions()
        {
            return GetCachedClient(Client => new LogicAppWorkflowVersionCollection(Client, Id));
        }

        /// <summary>
        /// Gets a workflow version.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/versions/{versionId}
        /// Operation Id: WorkflowVersions_Get
        /// </summary>
        /// <param name="versionId"> The workflow versionId. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="versionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="versionId"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<LogicAppWorkflowVersionResource>> GetLogicAppWorkflowVersionAsync(string versionId, CancellationToken cancellationToken = default)
        {
            return await GetLogicAppWorkflowVersions().GetAsync(versionId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets a workflow version.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/versions/{versionId}
        /// Operation Id: WorkflowVersions_Get
        /// </summary>
        /// <param name="versionId"> The workflow versionId. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="versionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="versionId"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<LogicAppWorkflowVersionResource> GetLogicAppWorkflowVersion(string versionId, CancellationToken cancellationToken = default)
        {
            return GetLogicAppWorkflowVersions().Get(versionId, cancellationToken);
        }

        /// <summary> Gets a collection of LogicAppWorkflowTriggerResources in the LogicAppWorkflow. </summary>
        /// <returns> An object representing collection of LogicAppWorkflowTriggerResources and their operations over a LogicAppWorkflowTriggerResource. </returns>
        public virtual LogicAppWorkflowTriggerCollection GetLogicAppWorkflowTriggers()
        {
            return GetCachedClient(Client => new LogicAppWorkflowTriggerCollection(Client, Id));
        }

        /// <summary>
        /// Gets a workflow trigger.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/triggers/{triggerName}
        /// Operation Id: WorkflowTriggers_Get
        /// </summary>
        /// <param name="triggerName"> The workflow trigger name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="triggerName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="triggerName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<LogicAppWorkflowTriggerResource>> GetLogicAppWorkflowTriggerAsync(string triggerName, CancellationToken cancellationToken = default)
        {
            return await GetLogicAppWorkflowTriggers().GetAsync(triggerName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets a workflow trigger.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/triggers/{triggerName}
        /// Operation Id: WorkflowTriggers_Get
        /// </summary>
        /// <param name="triggerName"> The workflow trigger name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="triggerName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="triggerName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<LogicAppWorkflowTriggerResource> GetLogicAppWorkflowTrigger(string triggerName, CancellationToken cancellationToken = default)
        {
            return GetLogicAppWorkflowTriggers().Get(triggerName, cancellationToken);
        }

        /// <summary> Gets a collection of LogicAppWorkflowRunResources in the LogicAppWorkflow. </summary>
        /// <returns> An object representing collection of LogicAppWorkflowRunResources and their operations over a LogicAppWorkflowRunResource. </returns>
        public virtual LogicAppWorkflowRunCollection GetLogicAppWorkflowRuns()
        {
            return GetCachedClient(Client => new LogicAppWorkflowRunCollection(Client, Id));
        }

        /// <summary>
        /// Gets a workflow run.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}
        /// Operation Id: WorkflowRuns_Get
        /// </summary>
        /// <param name="runName"> The workflow run name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="runName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="runName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<LogicAppWorkflowRunResource>> GetLogicAppWorkflowRunAsync(string runName, CancellationToken cancellationToken = default)
        {
            return await GetLogicAppWorkflowRuns().GetAsync(runName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets a workflow run.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}
        /// Operation Id: WorkflowRuns_Get
        /// </summary>
        /// <param name="runName"> The workflow run name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="runName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="runName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<LogicAppWorkflowRunResource> GetLogicAppWorkflowRun(string runName, CancellationToken cancellationToken = default)
        {
            return GetLogicAppWorkflowRuns().Get(runName, cancellationToken);
        }

        /// <summary>
        /// Gets a workflow.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}
        /// Operation Id: Workflows_Get
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<LogicAppWorkflowResource>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _logicAppWorkflowWorkflowsClientDiagnostics.CreateScope("LogicAppWorkflowResource.Get");
            scope.Start();
            try
            {
                var response = await _logicAppWorkflowWorkflowsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new LogicAppWorkflowResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets a workflow.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}
        /// Operation Id: Workflows_Get
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<LogicAppWorkflowResource> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _logicAppWorkflowWorkflowsClientDiagnostics.CreateScope("LogicAppWorkflowResource.Get");
            scope.Start();
            try
            {
                var response = _logicAppWorkflowWorkflowsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new LogicAppWorkflowResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Deletes a workflow.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}
        /// Operation Id: Workflows_Delete
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation> DeleteAsync(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _logicAppWorkflowWorkflowsClientDiagnostics.CreateScope("LogicAppWorkflowResource.Delete");
            scope.Start();
            try
            {
                var response = await _logicAppWorkflowWorkflowsRestClient.DeleteAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                var operation = new LogicArmOperation(response);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Deletes a workflow.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}
        /// Operation Id: Workflows_Delete
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation Delete(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _logicAppWorkflowWorkflowsClientDiagnostics.CreateScope("LogicAppWorkflowResource.Delete");
            scope.Start();
            try
            {
                var response = _logicAppWorkflowWorkflowsRestClient.Delete(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                var operation = new LogicArmOperation(response);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Updates a workflow.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}
        /// Operation Id: Workflows_Update
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<LogicAppWorkflowResource>> UpdateAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _logicAppWorkflowWorkflowsClientDiagnostics.CreateScope("LogicAppWorkflowResource.Update");
            scope.Start();
            try
            {
                var response = await _logicAppWorkflowWorkflowsRestClient.UpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                return Response.FromValue(new LogicAppWorkflowResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Updates a workflow.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}
        /// Operation Id: Workflows_Update
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<LogicAppWorkflowResource> Update(CancellationToken cancellationToken = default)
        {
            using var scope = _logicAppWorkflowWorkflowsClientDiagnostics.CreateScope("LogicAppWorkflowResource.Update");
            scope.Start();
            try
            {
                var response = _logicAppWorkflowWorkflowsRestClient.Update(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                return Response.FromValue(new LogicAppWorkflowResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Disables a workflow.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/disable
        /// Operation Id: Workflows_Disable
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DisableAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _logicAppWorkflowWorkflowsClientDiagnostics.CreateScope("LogicAppWorkflowResource.Disable");
            scope.Start();
            try
            {
                var response = await _logicAppWorkflowWorkflowsRestClient.DisableAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Disables a workflow.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/disable
        /// Operation Id: Workflows_Disable
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response Disable(CancellationToken cancellationToken = default)
        {
            using var scope = _logicAppWorkflowWorkflowsClientDiagnostics.CreateScope("LogicAppWorkflowResource.Disable");
            scope.Start();
            try
            {
                var response = _logicAppWorkflowWorkflowsRestClient.Disable(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Enables a workflow.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/enable
        /// Operation Id: Workflows_Enable
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> EnableAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _logicAppWorkflowWorkflowsClientDiagnostics.CreateScope("LogicAppWorkflowResource.Enable");
            scope.Start();
            try
            {
                var response = await _logicAppWorkflowWorkflowsRestClient.EnableAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Enables a workflow.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/enable
        /// Operation Id: Workflows_Enable
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response Enable(CancellationToken cancellationToken = default)
        {
            using var scope = _logicAppWorkflowWorkflowsClientDiagnostics.CreateScope("LogicAppWorkflowResource.Enable");
            scope.Start();
            try
            {
                var response = _logicAppWorkflowWorkflowsRestClient.Enable(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Generates the upgraded definition for a workflow.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/generateUpgradedDefinition
        /// Operation Id: Workflows_GenerateUpgradedDefinition
        /// </summary>
        /// <param name="content"> Parameters for generating an upgraded definition. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        public virtual async Task<Response<BinaryData>> GenerateUpgradedDefinitionAsync(GenerateUpgradedDefinitionContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = _logicAppWorkflowWorkflowsClientDiagnostics.CreateScope("LogicAppWorkflowResource.GenerateUpgradedDefinition");
            scope.Start();
            try
            {
                var response = await _logicAppWorkflowWorkflowsRestClient.GenerateUpgradedDefinitionAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, content, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Generates the upgraded definition for a workflow.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/generateUpgradedDefinition
        /// Operation Id: Workflows_GenerateUpgradedDefinition
        /// </summary>
        /// <param name="content"> Parameters for generating an upgraded definition. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        public virtual Response<BinaryData> GenerateUpgradedDefinition(GenerateUpgradedDefinitionContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = _logicAppWorkflowWorkflowsClientDiagnostics.CreateScope("LogicAppWorkflowResource.GenerateUpgradedDefinition");
            scope.Start();
            try
            {
                var response = _logicAppWorkflowWorkflowsRestClient.GenerateUpgradedDefinition(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, content, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get the workflow callback Url.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/listCallbackUrl
        /// Operation Id: Workflows_ListCallbackUrl
        /// </summary>
        /// <param name="listCallbackUrl"> Which callback url to list. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="listCallbackUrl"/> is null. </exception>
        public virtual async Task<Response<LogicAppWorkflowTriggerCallbackUri>> GetCallbackUrlAsync(GetCallbackUrlParameters listCallbackUrl, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(listCallbackUrl, nameof(listCallbackUrl));

            using var scope = _logicAppWorkflowWorkflowsClientDiagnostics.CreateScope("LogicAppWorkflowResource.GetCallbackUrl");
            scope.Start();
            try
            {
                var response = await _logicAppWorkflowWorkflowsRestClient.ListCallbackUrlAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, listCallbackUrl, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get the workflow callback Url.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/listCallbackUrl
        /// Operation Id: Workflows_ListCallbackUrl
        /// </summary>
        /// <param name="listCallbackUrl"> Which callback url to list. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="listCallbackUrl"/> is null. </exception>
        public virtual Response<LogicAppWorkflowTriggerCallbackUri> GetCallbackUrl(GetCallbackUrlParameters listCallbackUrl, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(listCallbackUrl, nameof(listCallbackUrl));

            using var scope = _logicAppWorkflowWorkflowsClientDiagnostics.CreateScope("LogicAppWorkflowResource.GetCallbackUrl");
            scope.Start();
            try
            {
                var response = _logicAppWorkflowWorkflowsRestClient.ListCallbackUrl(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, listCallbackUrl, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets an OpenAPI definition for the workflow.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/listSwagger
        /// Operation Id: Workflows_ListSwagger
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<BinaryData>> GetSwaggerAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _logicAppWorkflowWorkflowsClientDiagnostics.CreateScope("LogicAppWorkflowResource.GetSwagger");
            scope.Start();
            try
            {
                var response = await _logicAppWorkflowWorkflowsRestClient.ListSwaggerAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets an OpenAPI definition for the workflow.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/listSwagger
        /// Operation Id: Workflows_ListSwagger
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<BinaryData> GetSwagger(CancellationToken cancellationToken = default)
        {
            using var scope = _logicAppWorkflowWorkflowsClientDiagnostics.CreateScope("LogicAppWorkflowResource.GetSwagger");
            scope.Start();
            try
            {
                var response = _logicAppWorkflowWorkflowsRestClient.ListSwagger(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Moves an existing workflow.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/move
        /// Operation Id: Workflows_Move
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="move"> The workflow to move. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="move"/> is null. </exception>
        public virtual async Task<ArmOperation> MoveAsync(WaitUntil waitUntil, LogicAppWorkflowReference move, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(move, nameof(move));

            using var scope = _logicAppWorkflowWorkflowsClientDiagnostics.CreateScope("LogicAppWorkflowResource.Move");
            scope.Start();
            try
            {
                var response = await _logicAppWorkflowWorkflowsRestClient.MoveAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, move, cancellationToken).ConfigureAwait(false);
                var operation = new LogicArmOperation(_logicAppWorkflowWorkflowsClientDiagnostics, Pipeline, _logicAppWorkflowWorkflowsRestClient.CreateMoveRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, move).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Moves an existing workflow.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/move
        /// Operation Id: Workflows_Move
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="move"> The workflow to move. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="move"/> is null. </exception>
        public virtual ArmOperation Move(WaitUntil waitUntil, LogicAppWorkflowReference move, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(move, nameof(move));

            using var scope = _logicAppWorkflowWorkflowsClientDiagnostics.CreateScope("LogicAppWorkflowResource.Move");
            scope.Start();
            try
            {
                var response = _logicAppWorkflowWorkflowsRestClient.Move(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, move, cancellationToken);
                var operation = new LogicArmOperation(_logicAppWorkflowWorkflowsClientDiagnostics, Pipeline, _logicAppWorkflowWorkflowsRestClient.CreateMoveRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, move).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Regenerates the callback URL access key for request triggers.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/regenerateAccessKey
        /// Operation Id: Workflows_RegenerateAccessKey
        /// </summary>
        /// <param name="keyType"> The access key type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="keyType"/> is null. </exception>
        public virtual async Task<Response> RegenerateAccessKeyAsync(RegenerateActionParameter keyType, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(keyType, nameof(keyType));

            using var scope = _logicAppWorkflowWorkflowsClientDiagnostics.CreateScope("LogicAppWorkflowResource.RegenerateAccessKey");
            scope.Start();
            try
            {
                var response = await _logicAppWorkflowWorkflowsRestClient.RegenerateAccessKeyAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, keyType, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Regenerates the callback URL access key for request triggers.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/regenerateAccessKey
        /// Operation Id: Workflows_RegenerateAccessKey
        /// </summary>
        /// <param name="keyType"> The access key type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="keyType"/> is null. </exception>
        public virtual Response RegenerateAccessKey(RegenerateActionParameter keyType, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(keyType, nameof(keyType));

            using var scope = _logicAppWorkflowWorkflowsClientDiagnostics.CreateScope("LogicAppWorkflowResource.RegenerateAccessKey");
            scope.Start();
            try
            {
                var response = _logicAppWorkflowWorkflowsRestClient.RegenerateAccessKey(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, keyType, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Validates the workflow.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/validate
        /// Operation Id: Workflows_ValidateByResourceGroup
        /// </summary>
        /// <param name="data"> The workflow. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="data"/> is null. </exception>
        public virtual async Task<Response> ValidateByResourceGroupAsync(LogicAppWorkflowData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _logicAppWorkflowWorkflowsClientDiagnostics.CreateScope("LogicAppWorkflowResource.ValidateByResourceGroup");
            scope.Start();
            try
            {
                var response = await _logicAppWorkflowWorkflowsRestClient.ValidateByResourceGroupAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, data, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Validates the workflow.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/validate
        /// Operation Id: Workflows_ValidateByResourceGroup
        /// </summary>
        /// <param name="data"> The workflow. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="data"/> is null. </exception>
        public virtual Response ValidateByResourceGroup(LogicAppWorkflowData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _logicAppWorkflowWorkflowsClientDiagnostics.CreateScope("LogicAppWorkflowResource.ValidateByResourceGroup");
            scope.Start();
            try
            {
                var response = _logicAppWorkflowWorkflowsRestClient.ValidateByResourceGroup(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, data, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Add a tag to the current resource.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}
        /// Operation Id: Workflows_Get
        /// </summary>
        /// <param name="key"> The key for the tag. </param>
        /// <param name="value"> The value for the tag. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="key"/> or <paramref name="value"/> is null. </exception>
        public virtual async Task<Response<LogicAppWorkflowResource>> AddTagAsync(string key, string value, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(key, nameof(key));
            Argument.AssertNotNull(value, nameof(value));

            using var scope = _logicAppWorkflowWorkflowsClientDiagnostics.CreateScope("LogicAppWorkflowResource.AddTag");
            scope.Start();
            try
            {
                var originalTags = await GetTagResource().GetAsync(cancellationToken).ConfigureAwait(false);
                originalTags.Value.Data.TagValues[key] = value;
                await GetTagResource().CreateOrUpdateAsync(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken).ConfigureAwait(false);
                var originalResponse = await _logicAppWorkflowWorkflowsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                return Response.FromValue(new LogicAppWorkflowResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Add a tag to the current resource.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}
        /// Operation Id: Workflows_Get
        /// </summary>
        /// <param name="key"> The key for the tag. </param>
        /// <param name="value"> The value for the tag. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="key"/> or <paramref name="value"/> is null. </exception>
        public virtual Response<LogicAppWorkflowResource> AddTag(string key, string value, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(key, nameof(key));
            Argument.AssertNotNull(value, nameof(value));

            using var scope = _logicAppWorkflowWorkflowsClientDiagnostics.CreateScope("LogicAppWorkflowResource.AddTag");
            scope.Start();
            try
            {
                var originalTags = GetTagResource().Get(cancellationToken);
                originalTags.Value.Data.TagValues[key] = value;
                GetTagResource().CreateOrUpdate(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken);
                var originalResponse = _logicAppWorkflowWorkflowsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                return Response.FromValue(new LogicAppWorkflowResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Replace the tags on the resource with the given set.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}
        /// Operation Id: Workflows_Get
        /// </summary>
        /// <param name="tags"> The set of tags to use as replacement. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tags"/> is null. </exception>
        public virtual async Task<Response<LogicAppWorkflowResource>> SetTagsAsync(IDictionary<string, string> tags, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(tags, nameof(tags));

            using var scope = _logicAppWorkflowWorkflowsClientDiagnostics.CreateScope("LogicAppWorkflowResource.SetTags");
            scope.Start();
            try
            {
                await GetTagResource().DeleteAsync(WaitUntil.Completed, cancellationToken: cancellationToken).ConfigureAwait(false);
                var originalTags = await GetTagResource().GetAsync(cancellationToken).ConfigureAwait(false);
                originalTags.Value.Data.TagValues.ReplaceWith(tags);
                await GetTagResource().CreateOrUpdateAsync(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken).ConfigureAwait(false);
                var originalResponse = await _logicAppWorkflowWorkflowsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                return Response.FromValue(new LogicAppWorkflowResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Replace the tags on the resource with the given set.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}
        /// Operation Id: Workflows_Get
        /// </summary>
        /// <param name="tags"> The set of tags to use as replacement. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tags"/> is null. </exception>
        public virtual Response<LogicAppWorkflowResource> SetTags(IDictionary<string, string> tags, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(tags, nameof(tags));

            using var scope = _logicAppWorkflowWorkflowsClientDiagnostics.CreateScope("LogicAppWorkflowResource.SetTags");
            scope.Start();
            try
            {
                GetTagResource().Delete(WaitUntil.Completed, cancellationToken: cancellationToken);
                var originalTags = GetTagResource().Get(cancellationToken);
                originalTags.Value.Data.TagValues.ReplaceWith(tags);
                GetTagResource().CreateOrUpdate(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken);
                var originalResponse = _logicAppWorkflowWorkflowsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                return Response.FromValue(new LogicAppWorkflowResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Removes a tag by key from the resource.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}
        /// Operation Id: Workflows_Get
        /// </summary>
        /// <param name="key"> The key for the tag. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="key"/> is null. </exception>
        public virtual async Task<Response<LogicAppWorkflowResource>> RemoveTagAsync(string key, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(key, nameof(key));

            using var scope = _logicAppWorkflowWorkflowsClientDiagnostics.CreateScope("LogicAppWorkflowResource.RemoveTag");
            scope.Start();
            try
            {
                var originalTags = await GetTagResource().GetAsync(cancellationToken).ConfigureAwait(false);
                originalTags.Value.Data.TagValues.Remove(key);
                await GetTagResource().CreateOrUpdateAsync(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken).ConfigureAwait(false);
                var originalResponse = await _logicAppWorkflowWorkflowsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                return Response.FromValue(new LogicAppWorkflowResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Removes a tag by key from the resource.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}
        /// Operation Id: Workflows_Get
        /// </summary>
        /// <param name="key"> The key for the tag. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="key"/> is null. </exception>
        public virtual Response<LogicAppWorkflowResource> RemoveTag(string key, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(key, nameof(key));

            using var scope = _logicAppWorkflowWorkflowsClientDiagnostics.CreateScope("LogicAppWorkflowResource.RemoveTag");
            scope.Start();
            try
            {
                var originalTags = GetTagResource().Get(cancellationToken);
                originalTags.Value.Data.TagValues.Remove(key);
                GetTagResource().CreateOrUpdate(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken);
                var originalResponse = _logicAppWorkflowWorkflowsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                return Response.FromValue(new LogicAppWorkflowResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
