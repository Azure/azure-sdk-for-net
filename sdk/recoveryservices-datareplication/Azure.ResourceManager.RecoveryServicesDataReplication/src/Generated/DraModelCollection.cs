// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;

namespace Azure.ResourceManager.RecoveryServicesDataReplication
{
    /// <summary>
    /// A class representing a collection of <see cref="DraModelResource" /> and their operations.
    /// Each <see cref="DraModelResource" /> in the collection will belong to the same instance of <see cref="FabricModelResource" />.
    /// To get a <see cref="DraModelCollection" /> instance call the GetDraModels method from an instance of <see cref="FabricModelResource" />.
    /// </summary>
    public partial class DraModelCollection : ArmCollection, IEnumerable<DraModelResource>, IAsyncEnumerable<DraModelResource>
    {
        private readonly ClientDiagnostics _draModelDraClientDiagnostics;
        private readonly DraRestOperations _draModelDraRestClient;

        /// <summary> Initializes a new instance of the <see cref="DraModelCollection"/> class for mocking. </summary>
        protected DraModelCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="DraModelCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal DraModelCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _draModelDraClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.RecoveryServicesDataReplication", DraModelResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(DraModelResource.ResourceType, out string draModelDraApiVersion);
            _draModelDraRestClient = new DraRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, draModelDraApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != FabricModelResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, FabricModelResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Creates the fabric agent.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/replicationFabrics/{fabricName}/fabricAgents/{draName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Dra_Create</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="draName"> Dra name. </param>
        /// <param name="data"> Dra model. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="draName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="draName"/> or <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<DraModelResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string draName, DraModelData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(draName, nameof(draName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _draModelDraClientDiagnostics.CreateScope("DraModelCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _draModelDraRestClient.CreateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, draName, data, cancellationToken).ConfigureAwait(false);
                var operation = new RecoveryServicesDataReplicationArmOperation<DraModelResource>(new DraModelOperationSource(Client), _draModelDraClientDiagnostics, Pipeline, _draModelDraRestClient.CreateCreateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, draName, data).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Creates the fabric agent.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/replicationFabrics/{fabricName}/fabricAgents/{draName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Dra_Create</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="draName"> Dra name. </param>
        /// <param name="data"> Dra model. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="draName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="draName"/> or <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<DraModelResource> CreateOrUpdate(WaitUntil waitUntil, string draName, DraModelData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(draName, nameof(draName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _draModelDraClientDiagnostics.CreateScope("DraModelCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _draModelDraRestClient.Create(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, draName, data, cancellationToken);
                var operation = new RecoveryServicesDataReplicationArmOperation<DraModelResource>(new DraModelOperationSource(Client), _draModelDraClientDiagnostics, Pipeline, _draModelDraRestClient.CreateCreateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, draName, data).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets the details of the fabric agent.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/replicationFabrics/{fabricName}/fabricAgents/{draName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Dra_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="draName"> Dra name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="draName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="draName"/> is null. </exception>
        public virtual async Task<Response<DraModelResource>> GetAsync(string draName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(draName, nameof(draName));

            using var scope = _draModelDraClientDiagnostics.CreateScope("DraModelCollection.Get");
            scope.Start();
            try
            {
                var response = await _draModelDraRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, draName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new DraModelResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets the details of the fabric agent.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/replicationFabrics/{fabricName}/fabricAgents/{draName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Dra_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="draName"> Dra name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="draName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="draName"/> is null. </exception>
        public virtual Response<DraModelResource> Get(string draName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(draName, nameof(draName));

            using var scope = _draModelDraClientDiagnostics.CreateScope("DraModelCollection.Get");
            scope.Start();
            try
            {
                var response = _draModelDraRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, draName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new DraModelResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets the list of fabric agents in the given fabric.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/replicationFabrics/{fabricName}/fabricAgents</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Dra_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="DraModelResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<DraModelResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _draModelDraRestClient.CreateListRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _draModelDraRestClient.CreateListNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new DraModelResource(Client, DraModelData.DeserializeDraModelData(e)), _draModelDraClientDiagnostics, Pipeline, "DraModelCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Gets the list of fabric agents in the given fabric.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/replicationFabrics/{fabricName}/fabricAgents</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Dra_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="DraModelResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<DraModelResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _draModelDraRestClient.CreateListRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _draModelDraRestClient.CreateListNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new DraModelResource(Client, DraModelData.DeserializeDraModelData(e)), _draModelDraClientDiagnostics, Pipeline, "DraModelCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/replicationFabrics/{fabricName}/fabricAgents/{draName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Dra_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="draName"> Dra name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="draName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="draName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string draName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(draName, nameof(draName));

            using var scope = _draModelDraClientDiagnostics.CreateScope("DraModelCollection.Exists");
            scope.Start();
            try
            {
                var response = await _draModelDraRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, draName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/replicationFabrics/{fabricName}/fabricAgents/{draName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Dra_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="draName"> Dra name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="draName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="draName"/> is null. </exception>
        public virtual Response<bool> Exists(string draName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(draName, nameof(draName));

            using var scope = _draModelDraClientDiagnostics.CreateScope("DraModelCollection.Exists");
            scope.Start();
            try
            {
                var response = _draModelDraRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, draName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<DraModelResource> IEnumerable<DraModelResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<DraModelResource> IAsyncEnumerable<DraModelResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
