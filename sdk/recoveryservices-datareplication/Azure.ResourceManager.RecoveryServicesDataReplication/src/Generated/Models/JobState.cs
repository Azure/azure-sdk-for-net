// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.RecoveryServicesDataReplication.Models
{
    /// <summary> Gets or sets the job state. </summary>
    public readonly partial struct JobState : IEquatable<JobState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="JobState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public JobState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PendingValue = "Pending";
        private const string StartedValue = "Started";
        private const string CancellingValue = "Cancelling";
        private const string SucceededValue = "Succeeded";
        private const string FailedValue = "Failed";
        private const string CancelledValue = "Cancelled";
        private const string CompletedWithInformationValue = "CompletedWithInformation";
        private const string CompletedWithWarningsValue = "CompletedWithWarnings";
        private const string CompletedWithErrorsValue = "CompletedWithErrors";

        /// <summary> Job has not been started. </summary>
        public static JobState Pending { get; } = new JobState(PendingValue);
        /// <summary> Job is in progress. </summary>
        public static JobState Started { get; } = new JobState(StartedValue);
        /// <summary> Job cancellation is in progress. </summary>
        public static JobState Cancelling { get; } = new JobState(CancellingValue);
        /// <summary> Job has completed successfully. </summary>
        public static JobState Succeeded { get; } = new JobState(SucceededValue);
        /// <summary> Job failed. </summary>
        public static JobState Failed { get; } = new JobState(FailedValue);
        /// <summary> Job has been cancelled. </summary>
        public static JobState Cancelled { get; } = new JobState(CancelledValue);
        /// <summary> Job has completed with information. </summary>
        public static JobState CompletedWithInformation { get; } = new JobState(CompletedWithInformationValue);
        /// <summary> Job has completed with warnings. </summary>
        public static JobState CompletedWithWarnings { get; } = new JobState(CompletedWithWarningsValue);
        /// <summary> Job has completed with errors. </summary>
        public static JobState CompletedWithErrors { get; } = new JobState(CompletedWithErrorsValue);
        /// <summary> Determines if two <see cref="JobState"/> values are the same. </summary>
        public static bool operator ==(JobState left, JobState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="JobState"/> values are not the same. </summary>
        public static bool operator !=(JobState left, JobState right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="JobState"/>. </summary>
        public static implicit operator JobState(string value) => new JobState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is JobState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(JobState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
