// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.RecoveryServicesDataReplication;

namespace Azure.ResourceManager.RecoveryServicesDataReplication.Models
{
    /// <summary> HyperVToAzStackHCI protected disk properties. </summary>
    public partial class HyperVToAzStackHCIProtectedDiskProperties : IJsonModel<HyperVToAzStackHCIProtectedDiskProperties>
    {
        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<HyperVToAzStackHCIProtectedDiskProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<HyperVToAzStackHCIProtectedDiskProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(HyperVToAzStackHCIProtectedDiskProperties)} does not support writing '{format}' format.");
            }
            if (options.Format != "W" && Optional.IsDefined(StorageContainerId))
            {
                writer.WritePropertyName("storageContainerId"u8);
                writer.WriteStringValue(StorageContainerId);
            }
            if (options.Format != "W" && Optional.IsDefined(StorageContainerLocalPath))
            {
                writer.WritePropertyName("storageContainerLocalPath"u8);
                writer.WriteStringValue(StorageContainerLocalPath);
            }
            if (options.Format != "W" && Optional.IsDefined(SourceDiskId))
            {
                writer.WritePropertyName("sourceDiskId"u8);
                writer.WriteStringValue(SourceDiskId);
            }
            if (options.Format != "W" && Optional.IsDefined(SourceDiskName))
            {
                writer.WritePropertyName("sourceDiskName"u8);
                writer.WriteStringValue(SourceDiskName);
            }
            if (options.Format != "W" && Optional.IsDefined(SeedDiskName))
            {
                writer.WritePropertyName("seedDiskName"u8);
                writer.WriteStringValue(SeedDiskName);
            }
            if (options.Format != "W" && Optional.IsDefined(TestMigrateDiskName))
            {
                writer.WritePropertyName("testMigrateDiskName"u8);
                writer.WriteStringValue(TestMigrateDiskName);
            }
            if (options.Format != "W" && Optional.IsDefined(MigrateDiskName))
            {
                writer.WritePropertyName("migrateDiskName"u8);
                writer.WriteStringValue(MigrateDiskName);
            }
            if (options.Format != "W" && Optional.IsDefined(IsOsDisk))
            {
                writer.WritePropertyName("isOsDisk"u8);
                writer.WriteBooleanValue(IsOsDisk.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(CapacityInBytes))
            {
                writer.WritePropertyName("capacityInBytes"u8);
                writer.WriteNumberValue(CapacityInBytes.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(IsDynamic))
            {
                writer.WritePropertyName("isDynamic"u8);
                writer.WriteBooleanValue(IsDynamic.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(DiskType))
            {
                writer.WritePropertyName("diskType"u8);
                writer.WriteStringValue(DiskType);
            }
            if (options.Format != "W" && Optional.IsDefined(DiskBlockSize))
            {
                writer.WritePropertyName("diskBlockSize"u8);
                writer.WriteNumberValue(DiskBlockSize.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(DiskLogicalSectorSize))
            {
                writer.WritePropertyName("diskLogicalSectorSize"u8);
                writer.WriteNumberValue(DiskLogicalSectorSize.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(DiskPhysicalSectorSize))
            {
                writer.WritePropertyName("diskPhysicalSectorSize"u8);
                writer.WriteNumberValue(DiskPhysicalSectorSize.Value);
            }
            if (options.Format != "W" && _additionalBinaryDataProperties != null)
            {
                foreach (var item in _additionalBinaryDataProperties)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        HyperVToAzStackHCIProtectedDiskProperties IJsonModel<HyperVToAzStackHCIProtectedDiskProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual HyperVToAzStackHCIProtectedDiskProperties JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<HyperVToAzStackHCIProtectedDiskProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(HyperVToAzStackHCIProtectedDiskProperties)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeHyperVToAzStackHCIProtectedDiskProperties(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static HyperVToAzStackHCIProtectedDiskProperties DeserializeHyperVToAzStackHCIProtectedDiskProperties(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ResourceIdentifier storageContainerId = default;
            string storageContainerLocalPath = default;
            string sourceDiskId = default;
            string sourceDiskName = default;
            string seedDiskName = default;
            string testMigrateDiskName = default;
            string migrateDiskName = default;
            bool? isOsDisk = default;
            long? capacityInBytes = default;
            bool? isDynamic = default;
            string diskType = default;
            long? diskBlockSize = default;
            long? diskLogicalSectorSize = default;
            long? diskPhysicalSectorSize = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("storageContainerId"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    storageContainerId = new ResourceIdentifier(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("storageContainerLocalPath"u8))
                {
                    storageContainerLocalPath = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("sourceDiskId"u8))
                {
                    sourceDiskId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("sourceDiskName"u8))
                {
                    sourceDiskName = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("seedDiskName"u8))
                {
                    seedDiskName = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("testMigrateDiskName"u8))
                {
                    testMigrateDiskName = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("migrateDiskName"u8))
                {
                    migrateDiskName = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("isOsDisk"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isOsDisk = prop.Value.GetBoolean();
                    continue;
                }
                if (prop.NameEquals("capacityInBytes"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    capacityInBytes = prop.Value.GetInt64();
                    continue;
                }
                if (prop.NameEquals("isDynamic"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isDynamic = prop.Value.GetBoolean();
                    continue;
                }
                if (prop.NameEquals("diskType"u8))
                {
                    diskType = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("diskBlockSize"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    diskBlockSize = prop.Value.GetInt64();
                    continue;
                }
                if (prop.NameEquals("diskLogicalSectorSize"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    diskLogicalSectorSize = prop.Value.GetInt64();
                    continue;
                }
                if (prop.NameEquals("diskPhysicalSectorSize"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    diskPhysicalSectorSize = prop.Value.GetInt64();
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new HyperVToAzStackHCIProtectedDiskProperties(
                storageContainerId,
                storageContainerLocalPath,
                sourceDiskId,
                sourceDiskName,
                seedDiskName,
                testMigrateDiskName,
                migrateDiskName,
                isOsDisk,
                capacityInBytes,
                isDynamic,
                diskType,
                diskBlockSize,
                diskLogicalSectorSize,
                diskPhysicalSectorSize,
                additionalBinaryDataProperties);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<HyperVToAzStackHCIProtectedDiskProperties>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<HyperVToAzStackHCIProtectedDiskProperties>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerRecoveryServicesDataReplicationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(HyperVToAzStackHCIProtectedDiskProperties)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        HyperVToAzStackHCIProtectedDiskProperties IPersistableModel<HyperVToAzStackHCIProtectedDiskProperties>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual HyperVToAzStackHCIProtectedDiskProperties PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<HyperVToAzStackHCIProtectedDiskProperties>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeHyperVToAzStackHCIProtectedDiskProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(HyperVToAzStackHCIProtectedDiskProperties)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<HyperVToAzStackHCIProtectedDiskProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
