// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.RecoveryServicesDataReplication.Models
{
    public partial class HyperVToAzStackHciProtectedDiskProperties
    {
        internal static HyperVToAzStackHciProtectedDiskProperties DeserializeHyperVToAzStackHciProtectedDiskProperties(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<ResourceIdentifier> storageContainerId = default;
            Optional<string> storageContainerLocalPath = default;
            Optional<string> sourceDiskId = default;
            Optional<string> sourceDiskName = default;
            Optional<string> seedDiskName = default;
            Optional<string> testMigrateDiskName = default;
            Optional<string> migrateDiskName = default;
            Optional<bool> isOSDisk = default;
            Optional<long> capacityInBytes = default;
            Optional<bool> isDynamic = default;
            Optional<string> diskType = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("storageContainerId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    storageContainerId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("storageContainerLocalPath"u8))
                {
                    storageContainerLocalPath = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sourceDiskId"u8))
                {
                    sourceDiskId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sourceDiskName"u8))
                {
                    sourceDiskName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("seedDiskName"u8))
                {
                    seedDiskName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("testMigrateDiskName"u8))
                {
                    testMigrateDiskName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("migrateDiskName"u8))
                {
                    migrateDiskName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("isOsDisk"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isOSDisk = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("capacityInBytes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    capacityInBytes = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("isDynamic"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isDynamic = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("diskType"u8))
                {
                    diskType = property.Value.GetString();
                    continue;
                }
            }
            return new HyperVToAzStackHciProtectedDiskProperties(storageContainerId.Value, storageContainerLocalPath.Value, sourceDiskId.Value, sourceDiskName.Value, seedDiskName.Value, testMigrateDiskName.Value, migrateDiskName.Value, Optional.ToNullable(isOSDisk), Optional.ToNullable(capacityInBytes), Optional.ToNullable(isDynamic), diskType.Value);
        }
    }
}
