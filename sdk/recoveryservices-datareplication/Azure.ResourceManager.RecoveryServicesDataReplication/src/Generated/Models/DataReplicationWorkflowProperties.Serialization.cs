// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.RecoveryServicesDataReplication.Models
{
    public partial class DataReplicationWorkflowProperties
    {
        internal static DataReplicationWorkflowProperties DeserializeDataReplicationWorkflowProperties(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> displayName = default;
            Optional<DataReplicationWorkflowState> state = default;
            Optional<DateTimeOffset> startTime = default;
            Optional<DateTimeOffset> endTime = default;
            Optional<string> objectId = default;
            Optional<string> objectName = default;
            Optional<string> objectInternalId = default;
            Optional<string> objectInternalName = default;
            Optional<WorkflowObjectType> objectType = default;
            Optional<string> replicationProviderId = default;
            Optional<string> sourceFabricProviderId = default;
            Optional<string> targetFabricProviderId = default;
            Optional<IReadOnlyList<string>> allowedActions = default;
            Optional<string> activityId = default;
            Optional<IReadOnlyList<DataReplicationTask>> tasks = default;
            Optional<IReadOnlyList<DataReplicationErrorInfo>> errors = default;
            WorkflowModelCustomProperties customProperties = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("displayName"u8))
                {
                    displayName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("state"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    state = new DataReplicationWorkflowState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("startTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    startTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("endTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    endTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("objectId"u8))
                {
                    objectId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("objectName"u8))
                {
                    objectName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("objectInternalId"u8))
                {
                    objectInternalId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("objectInternalName"u8))
                {
                    objectInternalName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("objectType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    objectType = new WorkflowObjectType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("replicationProviderId"u8))
                {
                    replicationProviderId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sourceFabricProviderId"u8))
                {
                    sourceFabricProviderId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("targetFabricProviderId"u8))
                {
                    targetFabricProviderId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("allowedActions"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    allowedActions = array;
                    continue;
                }
                if (property.NameEquals("activityId"u8))
                {
                    activityId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("tasks"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<DataReplicationTask> array = new List<DataReplicationTask>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DataReplicationTask.DeserializeDataReplicationTask(item));
                    }
                    tasks = array;
                    continue;
                }
                if (property.NameEquals("errors"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<DataReplicationErrorInfo> array = new List<DataReplicationErrorInfo>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DataReplicationErrorInfo.DeserializeDataReplicationErrorInfo(item));
                    }
                    errors = array;
                    continue;
                }
                if (property.NameEquals("customProperties"u8))
                {
                    customProperties = WorkflowModelCustomProperties.DeserializeWorkflowModelCustomProperties(property.Value);
                    continue;
                }
            }
            return new DataReplicationWorkflowProperties(displayName.Value, Optional.ToNullable(state), Optional.ToNullable(startTime), Optional.ToNullable(endTime), objectId.Value, objectName.Value, objectInternalId.Value, objectInternalName.Value, Optional.ToNullable(objectType), replicationProviderId.Value, sourceFabricProviderId.Value, targetFabricProviderId.Value, Optional.ToList(allowedActions), activityId.Value, Optional.ToList(tasks), Optional.ToList(errors), customProperties);
        }
    }
}
