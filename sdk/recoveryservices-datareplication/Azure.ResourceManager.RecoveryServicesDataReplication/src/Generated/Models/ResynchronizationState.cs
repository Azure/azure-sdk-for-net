// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.RecoveryServicesDataReplication.Models
{
    /// <summary> Gets or sets the resynchronization state. </summary>
    public readonly partial struct ResynchronizationState : IEquatable<ResynchronizationState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ResynchronizationState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ResynchronizationState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NoneValue = "None";
        private const string ResynchronizationInitiatedValue = "ResynchronizationInitiated";
        private const string ResynchronizationCompletedValue = "ResynchronizationCompleted";
        private const string ResynchronizationFailedValue = "ResynchronizationFailed";

        /// <summary> Resynchronization is not active. </summary>
        public static ResynchronizationState None { get; } = new ResynchronizationState(NoneValue);
        /// <summary> Resynchronization has been initiated. </summary>
        public static ResynchronizationState ResynchronizationInitiated { get; } = new ResynchronizationState(ResynchronizationInitiatedValue);
        /// <summary> Resynchronization has been completed successfully. </summary>
        public static ResynchronizationState ResynchronizationCompleted { get; } = new ResynchronizationState(ResynchronizationCompletedValue);
        /// <summary> Resynchronization has failed and would need to be started again. </summary>
        public static ResynchronizationState ResynchronizationFailed { get; } = new ResynchronizationState(ResynchronizationFailedValue);
        /// <summary> Determines if two <see cref="ResynchronizationState"/> values are the same. </summary>
        public static bool operator ==(ResynchronizationState left, ResynchronizationState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ResynchronizationState"/> values are not the same. </summary>
        public static bool operator !=(ResynchronizationState left, ResynchronizationState right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ResynchronizationState"/>. </summary>
        public static implicit operator ResynchronizationState(string value) => new ResynchronizationState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ResynchronizationState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ResynchronizationState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
