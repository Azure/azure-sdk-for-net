// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using Azure.ResourceManager.RecoveryServicesDataReplication;

namespace Azure.ResourceManager.RecoveryServicesDataReplication.Models
{
    /// <summary> Gets or sets the test failover state. </summary>
    public readonly partial struct DataReplicationTestFailoverState : IEquatable<DataReplicationTestFailoverState>
    {
        private readonly string _value;
        /// <summary> Test failover is not active. </summary>
        private const string NoneValue = "None";
        /// <summary> Test failover has been initiated. </summary>
        private const string TestFailoverInitiatedValue = "TestFailoverInitiated";
        /// <summary> Preparing test protected entities is in progress. </summary>
        private const string TestFailoverCompletingValue = "TestFailoverCompleting";
        /// <summary> Test failover has been completed successfully. </summary>
        private const string TestFailoverCompletedValue = "TestFailoverCompleted";
        /// <summary> Test failover initiation failed.. </summary>
        private const string TestFailoverFailedValue = "TestFailoverFailed";
        /// <summary> Preparing test protected entities failed. </summary>
        private const string TestFailoverCompletionFailedValue = "TestFailoverCompletionFailed";
        /// <summary> Test failover cleanup has been initiated. </summary>
        private const string TestFailoverCleanupInitiatedValue = "TestFailoverCleanupInitiated";
        /// <summary> Cleaning up test protected entities is in progress. </summary>
        private const string TestFailoverCleanupCompletingValue = "TestFailoverCleanupCompleting";
        /// <summary> Test failover cleanup has completed/failed. This is a transient state before the state is moved back to None. </summary>
        private const string MarkedForDeletionValue = "MarkedForDeletion";

        /// <summary> Initializes a new instance of <see cref="DataReplicationTestFailoverState"/>. </summary>
        /// <param name="value"> The value. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DataReplicationTestFailoverState(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        /// <summary> Test failover is not active. </summary>
        public static DataReplicationTestFailoverState None { get; } = new DataReplicationTestFailoverState(NoneValue);

        /// <summary> Test failover has been initiated. </summary>
        public static DataReplicationTestFailoverState TestFailoverInitiated { get; } = new DataReplicationTestFailoverState(TestFailoverInitiatedValue);

        /// <summary> Preparing test protected entities is in progress. </summary>
        public static DataReplicationTestFailoverState TestFailoverCompleting { get; } = new DataReplicationTestFailoverState(TestFailoverCompletingValue);

        /// <summary> Test failover has been completed successfully. </summary>
        public static DataReplicationTestFailoverState TestFailoverCompleted { get; } = new DataReplicationTestFailoverState(TestFailoverCompletedValue);

        /// <summary> Test failover initiation failed.. </summary>
        public static DataReplicationTestFailoverState TestFailoverFailed { get; } = new DataReplicationTestFailoverState(TestFailoverFailedValue);

        /// <summary> Preparing test protected entities failed. </summary>
        public static DataReplicationTestFailoverState TestFailoverCompletionFailed { get; } = new DataReplicationTestFailoverState(TestFailoverCompletionFailedValue);

        /// <summary> Test failover cleanup has been initiated. </summary>
        public static DataReplicationTestFailoverState TestFailoverCleanupInitiated { get; } = new DataReplicationTestFailoverState(TestFailoverCleanupInitiatedValue);

        /// <summary> Cleaning up test protected entities is in progress. </summary>
        public static DataReplicationTestFailoverState TestFailoverCleanupCompleting { get; } = new DataReplicationTestFailoverState(TestFailoverCleanupCompletingValue);

        /// <summary> Test failover cleanup has completed/failed. This is a transient state before the state is moved back to None. </summary>
        public static DataReplicationTestFailoverState MarkedForDeletion { get; } = new DataReplicationTestFailoverState(MarkedForDeletionValue);

        /// <summary> Determines if two <see cref="DataReplicationTestFailoverState"/> values are the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator ==(DataReplicationTestFailoverState left, DataReplicationTestFailoverState right) => left.Equals(right);

        /// <summary> Determines if two <see cref="DataReplicationTestFailoverState"/> values are not the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator !=(DataReplicationTestFailoverState left, DataReplicationTestFailoverState right) => !left.Equals(right);

        /// <summary> Converts a string to a <see cref="DataReplicationTestFailoverState"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator DataReplicationTestFailoverState(string value) => new DataReplicationTestFailoverState(value);

        /// <summary> Converts a string to a <see cref="DataReplicationTestFailoverState"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator DataReplicationTestFailoverState?(string value) => value == null ? null : new DataReplicationTestFailoverState(value);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DataReplicationTestFailoverState other && Equals(other);

        /// <inheritdoc/>
        public bool Equals(DataReplicationTestFailoverState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        /// <inheritdoc/>
        public override string ToString() => _value;
    }
}
