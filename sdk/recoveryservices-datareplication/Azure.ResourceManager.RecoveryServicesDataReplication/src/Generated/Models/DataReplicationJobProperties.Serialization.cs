// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.ResourceManager.RecoveryServicesDataReplication;

namespace Azure.ResourceManager.RecoveryServicesDataReplication.Models
{
    /// <summary> Job model properties. </summary>
    public partial class DataReplicationJobProperties : IJsonModel<DataReplicationJobProperties>
    {
        /// <summary> Initializes a new instance of <see cref="DataReplicationJobProperties"/> for deserialization. </summary>
        internal DataReplicationJobProperties()
        {
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<DataReplicationJobProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<DataReplicationJobProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(DataReplicationJobProperties)} does not support writing '{format}' format.");
            }
            if (options.Format != "W" && Optional.IsDefined(DisplayName))
            {
                writer.WritePropertyName("displayName"u8);
                writer.WriteStringValue(DisplayName);
            }
            if (options.Format != "W" && Optional.IsDefined(State))
            {
                writer.WritePropertyName("state"u8);
                writer.WriteStringValue(State.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(StartTime))
            {
                writer.WritePropertyName("startTime"u8);
                writer.WriteStringValue(StartTime.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(EndTime))
            {
                writer.WritePropertyName("endTime"u8);
                writer.WriteStringValue(EndTime.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(ObjectId))
            {
                writer.WritePropertyName("objectId"u8);
                writer.WriteStringValue(ObjectId);
            }
            if (options.Format != "W" && Optional.IsDefined(ObjectName))
            {
                writer.WritePropertyName("objectName"u8);
                writer.WriteStringValue(ObjectName);
            }
            if (options.Format != "W" && Optional.IsDefined(ObjectInternalId))
            {
                writer.WritePropertyName("objectInternalId"u8);
                writer.WriteStringValue(ObjectInternalId);
            }
            if (options.Format != "W" && Optional.IsDefined(ObjectInternalName))
            {
                writer.WritePropertyName("objectInternalName"u8);
                writer.WriteStringValue(ObjectInternalName);
            }
            if (options.Format != "W" && Optional.IsDefined(ObjectType))
            {
                writer.WritePropertyName("objectType"u8);
                writer.WriteStringValue(ObjectType.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(ReplicationProviderId))
            {
                writer.WritePropertyName("replicationProviderId"u8);
                writer.WriteStringValue(ReplicationProviderId);
            }
            if (options.Format != "W" && Optional.IsDefined(SourceFabricProviderId))
            {
                writer.WritePropertyName("sourceFabricProviderId"u8);
                writer.WriteStringValue(SourceFabricProviderId);
            }
            if (options.Format != "W" && Optional.IsDefined(TargetFabricProviderId))
            {
                writer.WritePropertyName("targetFabricProviderId"u8);
                writer.WriteStringValue(TargetFabricProviderId);
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(AllowedActions))
            {
                writer.WritePropertyName("allowedActions"u8);
                writer.WriteStartArray();
                foreach (string item in AllowedActions)
                {
                    if (item == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsDefined(ActivityId))
            {
                writer.WritePropertyName("activityId"u8);
                writer.WriteStringValue(ActivityId);
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(Tasks))
            {
                writer.WritePropertyName("tasks"u8);
                writer.WriteStartArray();
                foreach (DataReplicationTask item in Tasks)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(Errors))
            {
                writer.WritePropertyName("errors"u8);
                writer.WriteStartArray();
                foreach (DataReplicationErrorInfo item in Errors)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            writer.WritePropertyName("customProperties"u8);
            writer.WriteObjectValue(CustomProperties, options);
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (options.Format != "W" && _additionalBinaryDataProperties != null)
            {
                foreach (var item in _additionalBinaryDataProperties)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        DataReplicationJobProperties IJsonModel<DataReplicationJobProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual DataReplicationJobProperties JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<DataReplicationJobProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(DataReplicationJobProperties)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeDataReplicationJobProperties(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static DataReplicationJobProperties DeserializeDataReplicationJobProperties(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string displayName = default;
            DataReplicationJobState? state = default;
            DateTimeOffset? startTime = default;
            DateTimeOffset? endTime = default;
            string objectId = default;
            string objectName = default;
            string objectInternalId = default;
            string objectInternalName = default;
            DataReplicationJobObjectType? objectType = default;
            string replicationProviderId = default;
            string sourceFabricProviderId = default;
            string targetFabricProviderId = default;
            IReadOnlyList<string> allowedActions = default;
            string activityId = default;
            IReadOnlyList<DataReplicationTask> tasks = default;
            IReadOnlyList<DataReplicationErrorInfo> errors = default;
            DataReplicationJobCustomProperties customProperties = default;
            DataReplicationProvisioningState? provisioningState = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("displayName"u8))
                {
                    displayName = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("state"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    state = new DataReplicationJobState(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("startTime"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    startTime = prop.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (prop.NameEquals("endTime"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    endTime = prop.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (prop.NameEquals("objectId"u8))
                {
                    objectId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("objectName"u8))
                {
                    objectName = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("objectInternalId"u8))
                {
                    objectInternalId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("objectInternalName"u8))
                {
                    objectInternalName = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("objectType"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    objectType = new DataReplicationJobObjectType(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("replicationProviderId"u8))
                {
                    replicationProviderId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("sourceFabricProviderId"u8))
                {
                    sourceFabricProviderId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("targetFabricProviderId"u8))
                {
                    targetFabricProviderId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("allowedActions"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(item.GetString());
                        }
                    }
                    allowedActions = array;
                    continue;
                }
                if (prop.NameEquals("activityId"u8))
                {
                    activityId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("tasks"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<DataReplicationTask> array = new List<DataReplicationTask>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(DataReplicationTask.DeserializeDataReplicationTask(item, options));
                    }
                    tasks = array;
                    continue;
                }
                if (prop.NameEquals("errors"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<DataReplicationErrorInfo> array = new List<DataReplicationErrorInfo>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(DataReplicationErrorInfo.DeserializeDataReplicationErrorInfo(item, options));
                    }
                    errors = array;
                    continue;
                }
                if (prop.NameEquals("customProperties"u8))
                {
                    customProperties = DataReplicationJobCustomProperties.DeserializeDataReplicationJobCustomProperties(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("provisioningState"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new DataReplicationProvisioningState(prop.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new DataReplicationJobProperties(
                displayName,
                state,
                startTime,
                endTime,
                objectId,
                objectName,
                objectInternalId,
                objectInternalName,
                objectType,
                replicationProviderId,
                sourceFabricProviderId,
                targetFabricProviderId,
                allowedActions ?? new ChangeTrackingList<string>(),
                activityId,
                tasks ?? new ChangeTrackingList<DataReplicationTask>(),
                errors ?? new ChangeTrackingList<DataReplicationErrorInfo>(),
                customProperties,
                provisioningState,
                additionalBinaryDataProperties);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<DataReplicationJobProperties>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<DataReplicationJobProperties>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerRecoveryServicesDataReplicationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(DataReplicationJobProperties)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        DataReplicationJobProperties IPersistableModel<DataReplicationJobProperties>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual DataReplicationJobProperties PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<DataReplicationJobProperties>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeDataReplicationJobProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(DataReplicationJobProperties)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<DataReplicationJobProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
