// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.RecoveryServicesDataReplication;

namespace Azure.ResourceManager.RecoveryServicesDataReplication.Models
{
    /// <summary> HyperV to AzStackHCI Protected item model custom properties. </summary>
    public partial class HyperVToAzStackHciProtectedItemCustomProperties : IJsonModel<HyperVToAzStackHciProtectedItemCustomProperties>
    {
        /// <summary> Initializes a new instance of <see cref="HyperVToAzStackHciProtectedItemCustomProperties"/> for deserialization. </summary>
        internal HyperVToAzStackHciProtectedItemCustomProperties()
        {
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<HyperVToAzStackHciProtectedItemCustomProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<HyperVToAzStackHciProtectedItemCustomProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(HyperVToAzStackHciProtectedItemCustomProperties)} does not support writing '{format}' format.");
            }
            base.JsonModelWriteCore(writer, options);
            if (options.Format != "W" && Optional.IsDefined(ActiveLocation))
            {
                writer.WritePropertyName("activeLocation"u8);
                writer.WriteStringValue(ActiveLocation.Value.ToString());
            }
            writer.WritePropertyName("targetHciClusterId"u8);
            writer.WriteStringValue(TargetHciClusterId);
            writer.WritePropertyName("targetArcClusterCustomLocationId"u8);
            writer.WriteStringValue(TargetArcClusterCustomLocationId);
            if (options.Format != "W" && Optional.IsDefined(TargetAzStackHciClusterName))
            {
                writer.WritePropertyName("targetAzStackHciClusterName"u8);
                writer.WriteStringValue(TargetAzStackHciClusterName);
            }
            writer.WritePropertyName("fabricDiscoveryMachineId"u8);
            writer.WriteStringValue(FabricDiscoveryMachineId);
            writer.WritePropertyName("disksToInclude"u8);
            writer.WriteStartArray();
            foreach (HyperVToAzStackHCIDiskInput item in DisksToInclude)
            {
                writer.WriteObjectValue(item, options);
            }
            writer.WriteEndArray();
            writer.WritePropertyName("nicsToInclude"u8);
            writer.WriteStartArray();
            foreach (HyperVToAzStackHCINicInput item in NicsToInclude)
            {
                writer.WriteObjectValue(item, options);
            }
            writer.WriteEndArray();
            if (options.Format != "W" && Optional.IsDefined(SourceVmName))
            {
                writer.WritePropertyName("sourceVmName"u8);
                writer.WriteStringValue(SourceVmName);
            }
            if (options.Format != "W" && Optional.IsDefined(SourceCpuCores))
            {
                writer.WritePropertyName("sourceCpuCores"u8);
                writer.WriteNumberValue(SourceCpuCores.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(SourceMemoryInMegaBytes))
            {
                writer.WritePropertyName("sourceMemoryInMegaBytes"u8);
                writer.WriteNumberValue(SourceMemoryInMegaBytes.Value);
            }
            if (Optional.IsDefined(TargetVmName))
            {
                writer.WritePropertyName("targetVmName"u8);
                writer.WriteStringValue(TargetVmName);
            }
            writer.WritePropertyName("targetResourceGroupId"u8);
            writer.WriteStringValue(TargetResourceGroupId);
            writer.WritePropertyName("storageContainerId"u8);
            writer.WriteStringValue(StorageContainerId);
            writer.WritePropertyName("hyperVGeneration"u8);
            writer.WriteStringValue(HyperVGeneration);
            if (Optional.IsDefined(TargetNetworkId))
            {
                writer.WritePropertyName("targetNetworkId"u8);
                writer.WriteStringValue(TargetNetworkId);
            }
            if (Optional.IsDefined(TestNetworkId))
            {
                writer.WritePropertyName("testNetworkId"u8);
                writer.WriteStringValue(TestNetworkId);
            }
            if (Optional.IsDefined(TargetCpuCores))
            {
                writer.WritePropertyName("targetCpuCores"u8);
                writer.WriteNumberValue(TargetCpuCores.Value);
            }
            if (Optional.IsDefined(IsDynamicRam))
            {
                writer.WritePropertyName("isDynamicRam"u8);
                writer.WriteBooleanValue(IsDynamicRam.Value);
            }
            if (Optional.IsDefined(DynamicMemoryConfig))
            {
                writer.WritePropertyName("dynamicMemoryConfig"u8);
                writer.WriteObjectValue(DynamicMemoryConfig, options);
            }
            if (Optional.IsDefined(TargetMemoryInMegaBytes))
            {
                writer.WritePropertyName("targetMemoryInMegaBytes"u8);
                writer.WriteNumberValue(TargetMemoryInMegaBytes.Value);
            }
            writer.WritePropertyName("runAsAccountId"u8);
            writer.WriteStringValue(RunAsAccountId);
            writer.WritePropertyName("sourceFabricAgentName"u8);
            writer.WriteStringValue(SourceFabricAgentName);
            writer.WritePropertyName("targetFabricAgentName"u8);
            writer.WriteStringValue(TargetFabricAgentName);
            if (options.Format != "W" && Optional.IsDefined(SourceApplianceName))
            {
                writer.WritePropertyName("sourceApplianceName"u8);
                writer.WriteStringValue(SourceApplianceName);
            }
            if (options.Format != "W" && Optional.IsDefined(TargetApplianceName))
            {
                writer.WritePropertyName("targetApplianceName"u8);
                writer.WriteStringValue(TargetApplianceName);
            }
            if (options.Format != "W" && Optional.IsDefined(OsType))
            {
                writer.WritePropertyName("osType"u8);
                writer.WriteStringValue(OsType);
            }
            if (options.Format != "W" && Optional.IsDefined(OsName))
            {
                writer.WritePropertyName("osName"u8);
                writer.WriteStringValue(OsName);
            }
            if (options.Format != "W" && Optional.IsDefined(FirmwareType))
            {
                writer.WritePropertyName("firmwareType"u8);
                writer.WriteStringValue(FirmwareType);
            }
            if (options.Format != "W" && Optional.IsDefined(TargetLocation))
            {
                writer.WritePropertyName("targetLocation"u8);
                writer.WriteStringValue(TargetLocation);
            }
            writer.WritePropertyName("customLocationRegion"u8);
            writer.WriteStringValue(CustomLocationRegion);
            if (options.Format != "W" && Optional.IsDefined(FailoverRecoveryPointId))
            {
                writer.WritePropertyName("failoverRecoveryPointId"u8);
                writer.WriteStringValue(FailoverRecoveryPointId);
            }
            if (options.Format != "W" && Optional.IsDefined(LastRecoveryPointReceivedOn))
            {
                writer.WritePropertyName("lastRecoveryPointReceived"u8);
                writer.WriteStringValue(LastRecoveryPointReceivedOn.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(LastRecoveryPointId))
            {
                writer.WritePropertyName("lastRecoveryPointId"u8);
                writer.WriteStringValue(LastRecoveryPointId);
            }
            if (options.Format != "W" && Optional.IsDefined(InitialReplicationProgressPercentage))
            {
                writer.WritePropertyName("initialReplicationProgressPercentage"u8);
                writer.WriteNumberValue(InitialReplicationProgressPercentage.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(ResyncProgressPercentage))
            {
                writer.WritePropertyName("resyncProgressPercentage"u8);
                writer.WriteNumberValue(ResyncProgressPercentage.Value);
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(ProtectedDisks))
            {
                writer.WritePropertyName("protectedDisks"u8);
                writer.WriteStartArray();
                foreach (HyperVToAzStackHCIProtectedDiskProperties item in ProtectedDisks)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(ProtectedNics))
            {
                writer.WritePropertyName("protectedNics"u8);
                writer.WriteStartArray();
                foreach (HyperVToAzStackHCIProtectedNicProperties item in ProtectedNics)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsDefined(TargetVmBiosId))
            {
                writer.WritePropertyName("targetVmBiosId"u8);
                writer.WriteStringValue(TargetVmBiosId);
            }
            if (options.Format != "W" && Optional.IsDefined(LastReplicationUpdateTime))
            {
                writer.WritePropertyName("lastReplicationUpdateTime"u8);
                writer.WriteStringValue(LastReplicationUpdateTime.Value, "O");
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        HyperVToAzStackHciProtectedItemCustomProperties IJsonModel<HyperVToAzStackHciProtectedItemCustomProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => (HyperVToAzStackHciProtectedItemCustomProperties)JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override DataReplicationProtectedItemCustomProperties JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<HyperVToAzStackHciProtectedItemCustomProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(HyperVToAzStackHciProtectedItemCustomProperties)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeHyperVToAzStackHciProtectedItemCustomProperties(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static HyperVToAzStackHciProtectedItemCustomProperties DeserializeHyperVToAzStackHciProtectedItemCustomProperties(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string instanceType = "HyperVToAzStackHCI";
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            ProtectedItemActiveLocation? activeLocation = default;
            ResourceIdentifier targetHciClusterId = default;
            ResourceIdentifier targetArcClusterCustomLocationId = default;
            string targetAzStackHciClusterName = default;
            ResourceIdentifier fabricDiscoveryMachineId = default;
            IList<HyperVToAzStackHCIDiskInput> disksToInclude = default;
            IList<HyperVToAzStackHCINicInput> nicsToInclude = default;
            string sourceVmName = default;
            int? sourceCpuCores = default;
            double? sourceMemoryInMegaBytes = default;
            string targetVmName = default;
            ResourceIdentifier targetResourceGroupId = default;
            ResourceIdentifier storageContainerId = default;
            string hyperVGeneration = default;
            string targetNetworkId = default;
            string testNetworkId = default;
            int? targetCpuCores = default;
            bool? isDynamicRam = default;
            ProtectedItemDynamicMemoryConfig dynamicMemoryConfig = default;
            int? targetMemoryInMegaBytes = default;
            string runAsAccountId = default;
            string sourceFabricAgentName = default;
            string targetFabricAgentName = default;
            string sourceApplianceName = default;
            string targetApplianceName = default;
            string osType = default;
            string osName = default;
            string firmwareType = default;
            string targetLocation = default;
            string customLocationRegion = default;
            string failoverRecoveryPointId = default;
            DateTimeOffset? lastRecoveryPointReceivedOn = default;
            string lastRecoveryPointId = default;
            int? initialReplicationProgressPercentage = default;
            int? resyncProgressPercentage = default;
            IReadOnlyList<HyperVToAzStackHCIProtectedDiskProperties> protectedDisks = default;
            IReadOnlyList<HyperVToAzStackHCIProtectedNicProperties> protectedNics = default;
            string targetVmBiosId = default;
            DateTimeOffset? lastReplicationUpdateTime = default;
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("instanceType"u8))
                {
                    instanceType = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("activeLocation"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    activeLocation = new ProtectedItemActiveLocation(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("targetHciClusterId"u8))
                {
                    targetHciClusterId = new ResourceIdentifier(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("targetArcClusterCustomLocationId"u8))
                {
                    targetArcClusterCustomLocationId = new ResourceIdentifier(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("targetAzStackHciClusterName"u8))
                {
                    targetAzStackHciClusterName = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("fabricDiscoveryMachineId"u8))
                {
                    fabricDiscoveryMachineId = new ResourceIdentifier(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("disksToInclude"u8))
                {
                    List<HyperVToAzStackHCIDiskInput> array = new List<HyperVToAzStackHCIDiskInput>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(HyperVToAzStackHCIDiskInput.DeserializeHyperVToAzStackHCIDiskInput(item, options));
                    }
                    disksToInclude = array;
                    continue;
                }
                if (prop.NameEquals("nicsToInclude"u8))
                {
                    List<HyperVToAzStackHCINicInput> array = new List<HyperVToAzStackHCINicInput>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(HyperVToAzStackHCINicInput.DeserializeHyperVToAzStackHCINicInput(item, options));
                    }
                    nicsToInclude = array;
                    continue;
                }
                if (prop.NameEquals("sourceVmName"u8))
                {
                    sourceVmName = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("sourceCpuCores"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sourceCpuCores = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("sourceMemoryInMegaBytes"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sourceMemoryInMegaBytes = prop.Value.GetDouble();
                    continue;
                }
                if (prop.NameEquals("targetVmName"u8))
                {
                    targetVmName = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("targetResourceGroupId"u8))
                {
                    targetResourceGroupId = new ResourceIdentifier(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("storageContainerId"u8))
                {
                    storageContainerId = new ResourceIdentifier(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("hyperVGeneration"u8))
                {
                    hyperVGeneration = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("targetNetworkId"u8))
                {
                    targetNetworkId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("testNetworkId"u8))
                {
                    testNetworkId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("targetCpuCores"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    targetCpuCores = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("isDynamicRam"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isDynamicRam = prop.Value.GetBoolean();
                    continue;
                }
                if (prop.NameEquals("dynamicMemoryConfig"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    dynamicMemoryConfig = ProtectedItemDynamicMemoryConfig.DeserializeProtectedItemDynamicMemoryConfig(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("targetMemoryInMegaBytes"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    targetMemoryInMegaBytes = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("runAsAccountId"u8))
                {
                    runAsAccountId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("sourceFabricAgentName"u8))
                {
                    sourceFabricAgentName = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("targetFabricAgentName"u8))
                {
                    targetFabricAgentName = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("sourceApplianceName"u8))
                {
                    sourceApplianceName = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("targetApplianceName"u8))
                {
                    targetApplianceName = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("osType"u8))
                {
                    osType = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("osName"u8))
                {
                    osName = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("firmwareType"u8))
                {
                    firmwareType = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("targetLocation"u8))
                {
                    targetLocation = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("customLocationRegion"u8))
                {
                    customLocationRegion = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("failoverRecoveryPointId"u8))
                {
                    failoverRecoveryPointId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("lastRecoveryPointReceived"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastRecoveryPointReceivedOn = prop.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (prop.NameEquals("lastRecoveryPointId"u8))
                {
                    lastRecoveryPointId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("initialReplicationProgressPercentage"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    initialReplicationProgressPercentage = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("resyncProgressPercentage"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    resyncProgressPercentage = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("protectedDisks"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<HyperVToAzStackHCIProtectedDiskProperties> array = new List<HyperVToAzStackHCIProtectedDiskProperties>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(HyperVToAzStackHCIProtectedDiskProperties.DeserializeHyperVToAzStackHCIProtectedDiskProperties(item, options));
                    }
                    protectedDisks = array;
                    continue;
                }
                if (prop.NameEquals("protectedNics"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<HyperVToAzStackHCIProtectedNicProperties> array = new List<HyperVToAzStackHCIProtectedNicProperties>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(HyperVToAzStackHCIProtectedNicProperties.DeserializeHyperVToAzStackHCIProtectedNicProperties(item, options));
                    }
                    protectedNics = array;
                    continue;
                }
                if (prop.NameEquals("targetVmBiosId"u8))
                {
                    targetVmBiosId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("lastReplicationUpdateTime"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastReplicationUpdateTime = prop.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new HyperVToAzStackHciProtectedItemCustomProperties(
                instanceType,
                additionalBinaryDataProperties,
                activeLocation,
                targetHciClusterId,
                targetArcClusterCustomLocationId,
                targetAzStackHciClusterName,
                fabricDiscoveryMachineId,
                disksToInclude,
                nicsToInclude,
                sourceVmName,
                sourceCpuCores,
                sourceMemoryInMegaBytes,
                targetVmName,
                targetResourceGroupId,
                storageContainerId,
                hyperVGeneration,
                targetNetworkId,
                testNetworkId,
                targetCpuCores,
                isDynamicRam,
                dynamicMemoryConfig,
                targetMemoryInMegaBytes,
                runAsAccountId,
                sourceFabricAgentName,
                targetFabricAgentName,
                sourceApplianceName,
                targetApplianceName,
                osType,
                osName,
                firmwareType,
                targetLocation,
                customLocationRegion,
                failoverRecoveryPointId,
                lastRecoveryPointReceivedOn,
                lastRecoveryPointId,
                initialReplicationProgressPercentage,
                resyncProgressPercentage,
                protectedDisks ?? new ChangeTrackingList<HyperVToAzStackHCIProtectedDiskProperties>(),
                protectedNics ?? new ChangeTrackingList<HyperVToAzStackHCIProtectedNicProperties>(),
                targetVmBiosId,
                lastReplicationUpdateTime);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<HyperVToAzStackHciProtectedItemCustomProperties>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected override BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<HyperVToAzStackHciProtectedItemCustomProperties>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerRecoveryServicesDataReplicationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(HyperVToAzStackHciProtectedItemCustomProperties)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        HyperVToAzStackHciProtectedItemCustomProperties IPersistableModel<HyperVToAzStackHciProtectedItemCustomProperties>.Create(BinaryData data, ModelReaderWriterOptions options) => (HyperVToAzStackHciProtectedItemCustomProperties)PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override DataReplicationProtectedItemCustomProperties PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<HyperVToAzStackHciProtectedItemCustomProperties>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeHyperVToAzStackHciProtectedItemCustomProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(HyperVToAzStackHciProtectedItemCustomProperties)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<HyperVToAzStackHciProtectedItemCustomProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
