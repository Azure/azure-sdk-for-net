// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.ResourceManager.RecoveryServicesDataReplication;

namespace Azure.ResourceManager.RecoveryServicesDataReplication.Models
{
    /// <summary> HyperV to  AzStackHCI event model custom properties. This class provides provider specific details for events of type DataContract.HealthEvents.HealthEventType.ProtectedItemHealth and DataContract.HealthEvents.HealthEventType.AgentHealth. </summary>
    internal partial class HyperVToAzStackHciEventCustomProperties : IJsonModel<HyperVToAzStackHciEventCustomProperties>
    {
        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<HyperVToAzStackHciEventCustomProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<HyperVToAzStackHciEventCustomProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(HyperVToAzStackHciEventCustomProperties)} does not support writing '{format}' format.");
            }
            base.JsonModelWriteCore(writer, options);
            if (options.Format != "W" && Optional.IsDefined(EventSourceFriendlyName))
            {
                writer.WritePropertyName("eventSourceFriendlyName"u8);
                writer.WriteStringValue(EventSourceFriendlyName);
            }
            if (options.Format != "W" && Optional.IsDefined(ProtectedItemFriendlyName))
            {
                writer.WritePropertyName("protectedItemFriendlyName"u8);
                writer.WriteStringValue(ProtectedItemFriendlyName);
            }
            if (options.Format != "W" && Optional.IsDefined(SourceApplianceName))
            {
                writer.WritePropertyName("sourceApplianceName"u8);
                writer.WriteStringValue(SourceApplianceName);
            }
            if (options.Format != "W" && Optional.IsDefined(TargetApplianceName))
            {
                writer.WritePropertyName("targetApplianceName"u8);
                writer.WriteStringValue(TargetApplianceName);
            }
            if (options.Format != "W" && Optional.IsDefined(ServerType))
            {
                writer.WritePropertyName("serverType"u8);
                writer.WriteStringValue(ServerType);
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        HyperVToAzStackHciEventCustomProperties IJsonModel<HyperVToAzStackHciEventCustomProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => (HyperVToAzStackHciEventCustomProperties)JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override DataReplicationEventCustomProperties JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<HyperVToAzStackHciEventCustomProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(HyperVToAzStackHciEventCustomProperties)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeHyperVToAzStackHciEventCustomProperties(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static HyperVToAzStackHciEventCustomProperties DeserializeHyperVToAzStackHciEventCustomProperties(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string instanceType = "HyperVToAzStackHCI";
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            string eventSourceFriendlyName = default;
            string protectedItemFriendlyName = default;
            string sourceApplianceName = default;
            string targetApplianceName = default;
            string serverType = default;
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("instanceType"u8))
                {
                    instanceType = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("eventSourceFriendlyName"u8))
                {
                    eventSourceFriendlyName = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("protectedItemFriendlyName"u8))
                {
                    protectedItemFriendlyName = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("sourceApplianceName"u8))
                {
                    sourceApplianceName = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("targetApplianceName"u8))
                {
                    targetApplianceName = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("serverType"u8))
                {
                    serverType = prop.Value.GetString();
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new HyperVToAzStackHciEventCustomProperties(
                instanceType,
                additionalBinaryDataProperties,
                eventSourceFriendlyName,
                protectedItemFriendlyName,
                sourceApplianceName,
                targetApplianceName,
                serverType);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<HyperVToAzStackHciEventCustomProperties>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected override BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<HyperVToAzStackHciEventCustomProperties>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerRecoveryServicesDataReplicationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(HyperVToAzStackHciEventCustomProperties)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        HyperVToAzStackHciEventCustomProperties IPersistableModel<HyperVToAzStackHciEventCustomProperties>.Create(BinaryData data, ModelReaderWriterOptions options) => (HyperVToAzStackHciEventCustomProperties)PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override DataReplicationEventCustomProperties PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<HyperVToAzStackHciEventCustomProperties>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeHyperVToAzStackHciEventCustomProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(HyperVToAzStackHciEventCustomProperties)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<HyperVToAzStackHciEventCustomProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
