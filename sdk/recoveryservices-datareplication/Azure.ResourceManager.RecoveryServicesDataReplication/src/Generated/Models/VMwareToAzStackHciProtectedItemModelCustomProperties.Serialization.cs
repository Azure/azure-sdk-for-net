// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.RecoveryServicesDataReplication.Models
{
    public partial class VMwareToAzStackHciProtectedItemModelCustomProperties : IUtf8JsonSerializable, IJsonModel<VMwareToAzStackHciProtectedItemModelCustomProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<VMwareToAzStackHciProtectedItemModelCustomProperties>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<VMwareToAzStackHciProtectedItemModelCustomProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<VMwareToAzStackHciProtectedItemModelCustomProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(VMwareToAzStackHciProtectedItemModelCustomProperties)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (options.Format != "W" && Optional.IsDefined(ActiveLocation))
            {
                writer.WritePropertyName("activeLocation"u8);
                writer.WriteStringValue(ActiveLocation.Value.ToString());
            }
            writer.WritePropertyName("targetHciClusterId"u8);
            writer.WriteStringValue(TargetHciClusterId);
            writer.WritePropertyName("targetArcClusterCustomLocationId"u8);
            writer.WriteStringValue(TargetArcClusterCustomLocationId);
            if (options.Format != "W" && Optional.IsDefined(TargetAzStackHciClusterName))
            {
                writer.WritePropertyName("targetAzStackHciClusterName"u8);
                writer.WriteStringValue(TargetAzStackHciClusterName);
            }
            writer.WritePropertyName("storageContainerId"u8);
            writer.WriteStringValue(StorageContainerId);
            writer.WritePropertyName("targetResourceGroupId"u8);
            writer.WriteStringValue(TargetResourceGroupId);
            if (options.Format != "W" && Optional.IsDefined(TargetLocation))
            {
                writer.WritePropertyName("targetLocation"u8);
                writer.WriteStringValue(TargetLocation);
            }
            writer.WritePropertyName("customLocationRegion"u8);
            writer.WriteStringValue(CustomLocationRegion);
            writer.WritePropertyName("disksToInclude"u8);
            writer.WriteStartArray();
            foreach (var item in DisksToInclude)
            {
                writer.WriteObjectValue(item);
            }
            writer.WriteEndArray();
            writer.WritePropertyName("nicsToInclude"u8);
            writer.WriteStartArray();
            foreach (var item in NicsToInclude)
            {
                writer.WriteObjectValue(item);
            }
            writer.WriteEndArray();
            if (options.Format != "W" && Optional.IsCollectionDefined(ProtectedDisks))
            {
                writer.WritePropertyName("protectedDisks"u8);
                writer.WriteStartArray();
                foreach (var item in ProtectedDisks)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(ProtectedNics))
            {
                writer.WritePropertyName("protectedNics"u8);
                writer.WriteStartArray();
                foreach (var item in ProtectedNics)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsDefined(TargetVmBiosId))
            {
                writer.WritePropertyName("targetVmBiosId"u8);
                writer.WriteStringValue(TargetVmBiosId);
            }
            if (Optional.IsDefined(TargetVmName))
            {
                writer.WritePropertyName("targetVmName"u8);
                writer.WriteStringValue(TargetVmName);
            }
            writer.WritePropertyName("hyperVGeneration"u8);
            writer.WriteStringValue(HyperVGeneration);
            if (Optional.IsDefined(TargetNetworkId))
            {
                writer.WritePropertyName("targetNetworkId"u8);
                writer.WriteStringValue(TargetNetworkId);
            }
            if (Optional.IsDefined(TestNetworkId))
            {
                writer.WritePropertyName("testNetworkId"u8);
                writer.WriteStringValue(TestNetworkId);
            }
            if (Optional.IsDefined(TargetCpuCores))
            {
                writer.WritePropertyName("targetCpuCores"u8);
                writer.WriteNumberValue(TargetCpuCores.Value);
            }
            if (Optional.IsDefined(IsDynamicRam))
            {
                writer.WritePropertyName("isDynamicRam"u8);
                writer.WriteBooleanValue(IsDynamicRam.Value);
            }
            if (Optional.IsDefined(DynamicMemoryConfig))
            {
                writer.WritePropertyName("dynamicMemoryConfig"u8);
                writer.WriteObjectValue(DynamicMemoryConfig);
            }
            if (Optional.IsDefined(TargetMemoryInMegaBytes))
            {
                writer.WritePropertyName("targetMemoryInMegaBytes"u8);
                writer.WriteNumberValue(TargetMemoryInMegaBytes.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(OSType))
            {
                writer.WritePropertyName("osType"u8);
                writer.WriteStringValue(OSType);
            }
            if (options.Format != "W" && Optional.IsDefined(OSName))
            {
                writer.WritePropertyName("osName"u8);
                writer.WriteStringValue(OSName);
            }
            if (options.Format != "W" && Optional.IsDefined(FirmwareType))
            {
                writer.WritePropertyName("firmwareType"u8);
                writer.WriteStringValue(FirmwareType);
            }
            writer.WritePropertyName("fabricDiscoveryMachineId"u8);
            writer.WriteStringValue(FabricDiscoveryMachineId);
            if (options.Format != "W" && Optional.IsDefined(SourceVmName))
            {
                writer.WritePropertyName("sourceVmName"u8);
                writer.WriteStringValue(SourceVmName);
            }
            if (options.Format != "W" && Optional.IsDefined(SourceCpuCores))
            {
                writer.WritePropertyName("sourceCpuCores"u8);
                writer.WriteNumberValue(SourceCpuCores.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(SourceMemoryInMegaBytes))
            {
                writer.WritePropertyName("sourceMemoryInMegaBytes"u8);
                writer.WriteNumberValue(SourceMemoryInMegaBytes.Value);
            }
            writer.WritePropertyName("runAsAccountId"u8);
            writer.WriteStringValue(RunAsAccountId);
            writer.WritePropertyName("sourceDraName"u8);
            writer.WriteStringValue(SourceDraName);
            writer.WritePropertyName("targetDraName"u8);
            writer.WriteStringValue(TargetDraName);
            if (options.Format != "W" && Optional.IsDefined(SourceApplianceName))
            {
                writer.WritePropertyName("sourceApplianceName"u8);
                writer.WriteStringValue(SourceApplianceName);
            }
            if (options.Format != "W" && Optional.IsDefined(TargetApplianceName))
            {
                writer.WritePropertyName("targetApplianceName"u8);
                writer.WriteStringValue(TargetApplianceName);
            }
            if (options.Format != "W" && Optional.IsDefined(FailoverRecoveryPointId))
            {
                writer.WritePropertyName("failoverRecoveryPointId"u8);
                writer.WriteStringValue(FailoverRecoveryPointId);
            }
            if (options.Format != "W" && Optional.IsDefined(LastRecoveryPointReceived))
            {
                writer.WritePropertyName("lastRecoveryPointReceived"u8);
                writer.WriteStringValue(LastRecoveryPointReceived.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(LastRecoveryPointId))
            {
                writer.WritePropertyName("lastRecoveryPointId"u8);
                writer.WriteStringValue(LastRecoveryPointId);
            }
            if (options.Format != "W" && Optional.IsDefined(InitialReplicationProgressPercentage))
            {
                writer.WritePropertyName("initialReplicationProgressPercentage"u8);
                writer.WriteNumberValue(InitialReplicationProgressPercentage.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(MigrationProgressPercentage))
            {
                writer.WritePropertyName("migrationProgressPercentage"u8);
                writer.WriteNumberValue(MigrationProgressPercentage.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(ResumeProgressPercentage))
            {
                writer.WritePropertyName("resumeProgressPercentage"u8);
                writer.WriteNumberValue(ResumeProgressPercentage.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(ResyncProgressPercentage))
            {
                writer.WritePropertyName("resyncProgressPercentage"u8);
                writer.WriteNumberValue(ResyncProgressPercentage.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(ResyncRetryCount))
            {
                writer.WritePropertyName("resyncRetryCount"u8);
                writer.WriteNumberValue(ResyncRetryCount.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(ResyncRequired))
            {
                writer.WritePropertyName("resyncRequired"u8);
                writer.WriteBooleanValue(ResyncRequired.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(ResyncState))
            {
                writer.WritePropertyName("resyncState"u8);
                writer.WriteStringValue(ResyncState.Value.ToString());
            }
            if (Optional.IsDefined(PerformAutoResync))
            {
                writer.WritePropertyName("performAutoResync"u8);
                writer.WriteBooleanValue(PerformAutoResync.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(ResumeRetryCount))
            {
                writer.WritePropertyName("resumeRetryCount"u8);
                writer.WriteNumberValue(ResumeRetryCount.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(LastReplicationUpdateOn))
            {
                writer.WritePropertyName("lastReplicationUpdateTime"u8);
                writer.WriteStringValue(LastReplicationUpdateOn.Value, "O");
            }
            writer.WritePropertyName("instanceType"u8);
            writer.WriteStringValue(InstanceType);
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        VMwareToAzStackHciProtectedItemModelCustomProperties IJsonModel<VMwareToAzStackHciProtectedItemModelCustomProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<VMwareToAzStackHciProtectedItemModelCustomProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(VMwareToAzStackHciProtectedItemModelCustomProperties)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeVMwareToAzStackHciProtectedItemModelCustomProperties(document.RootElement, options);
        }

        internal static VMwareToAzStackHciProtectedItemModelCustomProperties DeserializeVMwareToAzStackHciProtectedItemModelCustomProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<ProtectedItemActiveLocation> activeLocation = default;
            ResourceIdentifier targetHciClusterId = default;
            ResourceIdentifier targetArcClusterCustomLocationId = default;
            Optional<string> targetAzStackHciClusterName = default;
            ResourceIdentifier storageContainerId = default;
            ResourceIdentifier targetResourceGroupId = default;
            Optional<string> targetLocation = default;
            string customLocationRegion = default;
            IList<VMwareToAzStackHciDiskInput> disksToInclude = default;
            IList<VMwareToAzStackHciNicInput> nicsToInclude = default;
            Optional<IReadOnlyList<VMwareToAzStackHciProtectedDiskProperties>> protectedDisks = default;
            Optional<IReadOnlyList<VMwareToAzStackHciProtectedNicProperties>> protectedNics = default;
            Optional<string> targetVmBiosId = default;
            Optional<string> targetVmName = default;
            string hyperVGeneration = default;
            Optional<string> targetNetworkId = default;
            Optional<string> testNetworkId = default;
            Optional<int> targetCpuCores = default;
            Optional<bool> isDynamicRam = default;
            Optional<ProtectedItemDynamicMemoryConfig> dynamicMemoryConfig = default;
            Optional<int> targetMemoryInMegaBytes = default;
            Optional<string> osType = default;
            Optional<string> osName = default;
            Optional<string> firmwareType = default;
            ResourceIdentifier fabricDiscoveryMachineId = default;
            Optional<string> sourceVmName = default;
            Optional<int> sourceCpuCores = default;
            Optional<double> sourceMemoryInMegaBytes = default;
            string runAsAccountId = default;
            string sourceDraName = default;
            string targetDraName = default;
            Optional<string> sourceApplianceName = default;
            Optional<string> targetApplianceName = default;
            Optional<string> failoverRecoveryPointId = default;
            Optional<DateTimeOffset> lastRecoveryPointReceived = default;
            Optional<string> lastRecoveryPointId = default;
            Optional<int> initialReplicationProgressPercentage = default;
            Optional<int> migrationProgressPercentage = default;
            Optional<int> resumeProgressPercentage = default;
            Optional<int> resyncProgressPercentage = default;
            Optional<long> resyncRetryCount = default;
            Optional<bool> resyncRequired = default;
            Optional<VMwareToAzureMigrateResyncState> resyncState = default;
            Optional<bool> performAutoResync = default;
            Optional<long> resumeRetryCount = default;
            Optional<DateTimeOffset> lastReplicationUpdateTime = default;
            string instanceType = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("activeLocation"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    activeLocation = new ProtectedItemActiveLocation(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("targetHciClusterId"u8))
                {
                    targetHciClusterId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("targetArcClusterCustomLocationId"u8))
                {
                    targetArcClusterCustomLocationId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("targetAzStackHciClusterName"u8))
                {
                    targetAzStackHciClusterName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("storageContainerId"u8))
                {
                    storageContainerId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("targetResourceGroupId"u8))
                {
                    targetResourceGroupId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("targetLocation"u8))
                {
                    targetLocation = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("customLocationRegion"u8))
                {
                    customLocationRegion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("disksToInclude"u8))
                {
                    List<VMwareToAzStackHciDiskInput> array = new List<VMwareToAzStackHciDiskInput>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(VMwareToAzStackHciDiskInput.DeserializeVMwareToAzStackHciDiskInput(item));
                    }
                    disksToInclude = array;
                    continue;
                }
                if (property.NameEquals("nicsToInclude"u8))
                {
                    List<VMwareToAzStackHciNicInput> array = new List<VMwareToAzStackHciNicInput>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(VMwareToAzStackHciNicInput.DeserializeVMwareToAzStackHciNicInput(item));
                    }
                    nicsToInclude = array;
                    continue;
                }
                if (property.NameEquals("protectedDisks"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<VMwareToAzStackHciProtectedDiskProperties> array = new List<VMwareToAzStackHciProtectedDiskProperties>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(VMwareToAzStackHciProtectedDiskProperties.DeserializeVMwareToAzStackHciProtectedDiskProperties(item));
                    }
                    protectedDisks = array;
                    continue;
                }
                if (property.NameEquals("protectedNics"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<VMwareToAzStackHciProtectedNicProperties> array = new List<VMwareToAzStackHciProtectedNicProperties>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(VMwareToAzStackHciProtectedNicProperties.DeserializeVMwareToAzStackHciProtectedNicProperties(item));
                    }
                    protectedNics = array;
                    continue;
                }
                if (property.NameEquals("targetVmBiosId"u8))
                {
                    targetVmBiosId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("targetVmName"u8))
                {
                    targetVmName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("hyperVGeneration"u8))
                {
                    hyperVGeneration = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("targetNetworkId"u8))
                {
                    targetNetworkId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("testNetworkId"u8))
                {
                    testNetworkId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("targetCpuCores"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    targetCpuCores = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("isDynamicRam"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isDynamicRam = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("dynamicMemoryConfig"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    dynamicMemoryConfig = ProtectedItemDynamicMemoryConfig.DeserializeProtectedItemDynamicMemoryConfig(property.Value);
                    continue;
                }
                if (property.NameEquals("targetMemoryInMegaBytes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    targetMemoryInMegaBytes = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("osType"u8))
                {
                    osType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("osName"u8))
                {
                    osName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("firmwareType"u8))
                {
                    firmwareType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("fabricDiscoveryMachineId"u8))
                {
                    fabricDiscoveryMachineId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("sourceVmName"u8))
                {
                    sourceVmName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sourceCpuCores"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sourceCpuCores = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("sourceMemoryInMegaBytes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sourceMemoryInMegaBytes = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("runAsAccountId"u8))
                {
                    runAsAccountId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sourceDraName"u8))
                {
                    sourceDraName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("targetDraName"u8))
                {
                    targetDraName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sourceApplianceName"u8))
                {
                    sourceApplianceName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("targetApplianceName"u8))
                {
                    targetApplianceName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("failoverRecoveryPointId"u8))
                {
                    failoverRecoveryPointId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("lastRecoveryPointReceived"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastRecoveryPointReceived = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("lastRecoveryPointId"u8))
                {
                    lastRecoveryPointId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("initialReplicationProgressPercentage"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    initialReplicationProgressPercentage = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("migrationProgressPercentage"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    migrationProgressPercentage = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("resumeProgressPercentage"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    resumeProgressPercentage = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("resyncProgressPercentage"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    resyncProgressPercentage = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("resyncRetryCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    resyncRetryCount = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("resyncRequired"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    resyncRequired = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("resyncState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    resyncState = new VMwareToAzureMigrateResyncState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("performAutoResync"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    performAutoResync = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("resumeRetryCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    resumeRetryCount = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("lastReplicationUpdateTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastReplicationUpdateTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("instanceType"u8))
                {
                    instanceType = property.Value.GetString();
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new VMwareToAzStackHciProtectedItemModelCustomProperties(instanceType, serializedAdditionalRawData, Optional.ToNullable(activeLocation), targetHciClusterId, targetArcClusterCustomLocationId, targetAzStackHciClusterName.Value, storageContainerId, targetResourceGroupId, targetLocation.Value, customLocationRegion, disksToInclude, nicsToInclude, Optional.ToList(protectedDisks), Optional.ToList(protectedNics), targetVmBiosId.Value, targetVmName.Value, hyperVGeneration, targetNetworkId.Value, testNetworkId.Value, Optional.ToNullable(targetCpuCores), Optional.ToNullable(isDynamicRam), dynamicMemoryConfig.Value, Optional.ToNullable(targetMemoryInMegaBytes), osType.Value, osName.Value, firmwareType.Value, fabricDiscoveryMachineId, sourceVmName.Value, Optional.ToNullable(sourceCpuCores), Optional.ToNullable(sourceMemoryInMegaBytes), runAsAccountId, sourceDraName, targetDraName, sourceApplianceName.Value, targetApplianceName.Value, failoverRecoveryPointId.Value, Optional.ToNullable(lastRecoveryPointReceived), lastRecoveryPointId.Value, Optional.ToNullable(initialReplicationProgressPercentage), Optional.ToNullable(migrationProgressPercentage), Optional.ToNullable(resumeProgressPercentage), Optional.ToNullable(resyncProgressPercentage), Optional.ToNullable(resyncRetryCount), Optional.ToNullable(resyncRequired), Optional.ToNullable(resyncState), Optional.ToNullable(performAutoResync), Optional.ToNullable(resumeRetryCount), Optional.ToNullable(lastReplicationUpdateTime));
        }

        private BinaryData SerializeBicep(ModelReaderWriterOptions options)
        {
            StringBuilder builder = new StringBuilder();
            builder.AppendLine("{");

            if (Optional.IsDefined(ActiveLocation))
            {
                builder.Append("  activeLocation:");
                builder.AppendLine($" '{ActiveLocation.Value.ToString()}'");
            }

            if (Optional.IsDefined(TargetHciClusterId))
            {
                builder.Append("  targetHciClusterId:");
                builder.AppendLine($" '{TargetHciClusterId.ToString()}'");
            }

            if (Optional.IsDefined(TargetArcClusterCustomLocationId))
            {
                builder.Append("  targetArcClusterCustomLocationId:");
                builder.AppendLine($" '{TargetArcClusterCustomLocationId.ToString()}'");
            }

            if (Optional.IsDefined(TargetAzStackHciClusterName))
            {
                builder.Append("  targetAzStackHciClusterName:");
                if (TargetAzStackHciClusterName.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{TargetAzStackHciClusterName}'''");
                }
                else
                {
                    builder.AppendLine($" '{TargetAzStackHciClusterName}'");
                }
            }

            if (Optional.IsDefined(StorageContainerId))
            {
                builder.Append("  storageContainerId:");
                builder.AppendLine($" '{StorageContainerId.ToString()}'");
            }

            if (Optional.IsDefined(TargetResourceGroupId))
            {
                builder.Append("  targetResourceGroupId:");
                builder.AppendLine($" '{TargetResourceGroupId.ToString()}'");
            }

            if (Optional.IsDefined(TargetLocation))
            {
                builder.Append("  targetLocation:");
                if (TargetLocation.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{TargetLocation}'''");
                }
                else
                {
                    builder.AppendLine($" '{TargetLocation}'");
                }
            }

            if (Optional.IsDefined(CustomLocationRegion))
            {
                builder.Append("  customLocationRegion:");
                if (CustomLocationRegion.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{CustomLocationRegion}'''");
                }
                else
                {
                    builder.AppendLine($" '{CustomLocationRegion}'");
                }
            }

            if (Optional.IsCollectionDefined(DisksToInclude))
            {
                if (DisksToInclude.Any())
                {
                    builder.Append("  disksToInclude:");
                    builder.AppendLine(" [");
                    foreach (var item in DisksToInclude)
                    {
                        AppendChildObject(builder, item, options, 4, true);
                    }
                    builder.AppendLine("  ]");
                }
            }

            if (Optional.IsCollectionDefined(NicsToInclude))
            {
                if (NicsToInclude.Any())
                {
                    builder.Append("  nicsToInclude:");
                    builder.AppendLine(" [");
                    foreach (var item in NicsToInclude)
                    {
                        AppendChildObject(builder, item, options, 4, true);
                    }
                    builder.AppendLine("  ]");
                }
            }

            if (Optional.IsCollectionDefined(ProtectedDisks))
            {
                if (ProtectedDisks.Any())
                {
                    builder.Append("  protectedDisks:");
                    builder.AppendLine(" [");
                    foreach (var item in ProtectedDisks)
                    {
                        AppendChildObject(builder, item, options, 4, true);
                    }
                    builder.AppendLine("  ]");
                }
            }

            if (Optional.IsCollectionDefined(ProtectedNics))
            {
                if (ProtectedNics.Any())
                {
                    builder.Append("  protectedNics:");
                    builder.AppendLine(" [");
                    foreach (var item in ProtectedNics)
                    {
                        AppendChildObject(builder, item, options, 4, true);
                    }
                    builder.AppendLine("  ]");
                }
            }

            if (Optional.IsDefined(TargetVmBiosId))
            {
                builder.Append("  targetVmBiosId:");
                if (TargetVmBiosId.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{TargetVmBiosId}'''");
                }
                else
                {
                    builder.AppendLine($" '{TargetVmBiosId}'");
                }
            }

            if (Optional.IsDefined(TargetVmName))
            {
                builder.Append("  targetVmName:");
                if (TargetVmName.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{TargetVmName}'''");
                }
                else
                {
                    builder.AppendLine($" '{TargetVmName}'");
                }
            }

            if (Optional.IsDefined(HyperVGeneration))
            {
                builder.Append("  hyperVGeneration:");
                if (HyperVGeneration.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{HyperVGeneration}'''");
                }
                else
                {
                    builder.AppendLine($" '{HyperVGeneration}'");
                }
            }

            if (Optional.IsDefined(TargetNetworkId))
            {
                builder.Append("  targetNetworkId:");
                if (TargetNetworkId.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{TargetNetworkId}'''");
                }
                else
                {
                    builder.AppendLine($" '{TargetNetworkId}'");
                }
            }

            if (Optional.IsDefined(TestNetworkId))
            {
                builder.Append("  testNetworkId:");
                if (TestNetworkId.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{TestNetworkId}'''");
                }
                else
                {
                    builder.AppendLine($" '{TestNetworkId}'");
                }
            }

            if (Optional.IsDefined(TargetCpuCores))
            {
                builder.Append("  targetCpuCores:");
                builder.AppendLine($" {TargetCpuCores.Value}");
            }

            if (Optional.IsDefined(IsDynamicRam))
            {
                builder.Append("  isDynamicRam:");
                var boolValue = IsDynamicRam.Value == true ? "true" : "false";
                builder.AppendLine($" {boolValue}");
            }

            if (Optional.IsDefined(DynamicMemoryConfig))
            {
                builder.Append("  dynamicMemoryConfig:");
                AppendChildObject(builder, DynamicMemoryConfig, options, 2, false);
            }

            if (Optional.IsDefined(TargetMemoryInMegaBytes))
            {
                builder.Append("  targetMemoryInMegaBytes:");
                builder.AppendLine($" {TargetMemoryInMegaBytes.Value}");
            }

            if (Optional.IsDefined(OSType))
            {
                builder.Append("  osType:");
                if (OSType.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{OSType}'''");
                }
                else
                {
                    builder.AppendLine($" '{OSType}'");
                }
            }

            if (Optional.IsDefined(OSName))
            {
                builder.Append("  osName:");
                if (OSName.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{OSName}'''");
                }
                else
                {
                    builder.AppendLine($" '{OSName}'");
                }
            }

            if (Optional.IsDefined(FirmwareType))
            {
                builder.Append("  firmwareType:");
                if (FirmwareType.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{FirmwareType}'''");
                }
                else
                {
                    builder.AppendLine($" '{FirmwareType}'");
                }
            }

            if (Optional.IsDefined(FabricDiscoveryMachineId))
            {
                builder.Append("  fabricDiscoveryMachineId:");
                builder.AppendLine($" '{FabricDiscoveryMachineId.ToString()}'");
            }

            if (Optional.IsDefined(SourceVmName))
            {
                builder.Append("  sourceVmName:");
                if (SourceVmName.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{SourceVmName}'''");
                }
                else
                {
                    builder.AppendLine($" '{SourceVmName}'");
                }
            }

            if (Optional.IsDefined(SourceCpuCores))
            {
                builder.Append("  sourceCpuCores:");
                builder.AppendLine($" {SourceCpuCores.Value}");
            }

            if (Optional.IsDefined(SourceMemoryInMegaBytes))
            {
                builder.Append("  sourceMemoryInMegaBytes:");
                builder.AppendLine($" '{SourceMemoryInMegaBytes.Value.ToString()}'");
            }

            if (Optional.IsDefined(RunAsAccountId))
            {
                builder.Append("  runAsAccountId:");
                if (RunAsAccountId.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{RunAsAccountId}'''");
                }
                else
                {
                    builder.AppendLine($" '{RunAsAccountId}'");
                }
            }

            if (Optional.IsDefined(SourceDraName))
            {
                builder.Append("  sourceDraName:");
                if (SourceDraName.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{SourceDraName}'''");
                }
                else
                {
                    builder.AppendLine($" '{SourceDraName}'");
                }
            }

            if (Optional.IsDefined(TargetDraName))
            {
                builder.Append("  targetDraName:");
                if (TargetDraName.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{TargetDraName}'''");
                }
                else
                {
                    builder.AppendLine($" '{TargetDraName}'");
                }
            }

            if (Optional.IsDefined(SourceApplianceName))
            {
                builder.Append("  sourceApplianceName:");
                if (SourceApplianceName.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{SourceApplianceName}'''");
                }
                else
                {
                    builder.AppendLine($" '{SourceApplianceName}'");
                }
            }

            if (Optional.IsDefined(TargetApplianceName))
            {
                builder.Append("  targetApplianceName:");
                if (TargetApplianceName.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{TargetApplianceName}'''");
                }
                else
                {
                    builder.AppendLine($" '{TargetApplianceName}'");
                }
            }

            if (Optional.IsDefined(FailoverRecoveryPointId))
            {
                builder.Append("  failoverRecoveryPointId:");
                if (FailoverRecoveryPointId.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{FailoverRecoveryPointId}'''");
                }
                else
                {
                    builder.AppendLine($" '{FailoverRecoveryPointId}'");
                }
            }

            if (Optional.IsDefined(LastRecoveryPointReceived))
            {
                builder.Append("  lastRecoveryPointReceived:");
                var formattedDateTimeString = TypeFormatters.ToString(LastRecoveryPointReceived.Value, "o");
                builder.AppendLine($" '{formattedDateTimeString}'");
            }

            if (Optional.IsDefined(LastRecoveryPointId))
            {
                builder.Append("  lastRecoveryPointId:");
                if (LastRecoveryPointId.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{LastRecoveryPointId}'''");
                }
                else
                {
                    builder.AppendLine($" '{LastRecoveryPointId}'");
                }
            }

            if (Optional.IsDefined(InitialReplicationProgressPercentage))
            {
                builder.Append("  initialReplicationProgressPercentage:");
                builder.AppendLine($" {InitialReplicationProgressPercentage.Value}");
            }

            if (Optional.IsDefined(MigrationProgressPercentage))
            {
                builder.Append("  migrationProgressPercentage:");
                builder.AppendLine($" {MigrationProgressPercentage.Value}");
            }

            if (Optional.IsDefined(ResumeProgressPercentage))
            {
                builder.Append("  resumeProgressPercentage:");
                builder.AppendLine($" {ResumeProgressPercentage.Value}");
            }

            if (Optional.IsDefined(ResyncProgressPercentage))
            {
                builder.Append("  resyncProgressPercentage:");
                builder.AppendLine($" {ResyncProgressPercentage.Value}");
            }

            if (Optional.IsDefined(ResyncRetryCount))
            {
                builder.Append("  resyncRetryCount:");
                builder.AppendLine($" '{ResyncRetryCount.Value.ToString()}'");
            }

            if (Optional.IsDefined(ResyncRequired))
            {
                builder.Append("  resyncRequired:");
                var boolValue = ResyncRequired.Value == true ? "true" : "false";
                builder.AppendLine($" {boolValue}");
            }

            if (Optional.IsDefined(ResyncState))
            {
                builder.Append("  resyncState:");
                builder.AppendLine($" '{ResyncState.Value.ToString()}'");
            }

            if (Optional.IsDefined(PerformAutoResync))
            {
                builder.Append("  performAutoResync:");
                var boolValue = PerformAutoResync.Value == true ? "true" : "false";
                builder.AppendLine($" {boolValue}");
            }

            if (Optional.IsDefined(ResumeRetryCount))
            {
                builder.Append("  resumeRetryCount:");
                builder.AppendLine($" '{ResumeRetryCount.Value.ToString()}'");
            }

            if (Optional.IsDefined(LastReplicationUpdateOn))
            {
                builder.Append("  lastReplicationUpdateTime:");
                var formattedDateTimeString = TypeFormatters.ToString(LastReplicationUpdateOn.Value, "o");
                builder.AppendLine($" '{formattedDateTimeString}'");
            }

            if (Optional.IsDefined(InstanceType))
            {
                builder.Append("  instanceType:");
                if (InstanceType.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{InstanceType}'''");
                }
                else
                {
                    builder.AppendLine($" '{InstanceType}'");
                }
            }

            builder.AppendLine("}");
            return BinaryData.FromString(builder.ToString());
        }

        private void AppendChildObject(StringBuilder stringBuilder, object childObject, ModelReaderWriterOptions options, int spaces, bool indentFirstLine)
        {
            string indent = new string(' ', spaces);
            BinaryData data = ModelReaderWriter.Write(childObject, options);
            string[] lines = data.ToString().Split(Environment.NewLine.ToCharArray(), StringSplitOptions.RemoveEmptyEntries);
            bool inMultilineString = false;
            for (int i = 0; i < lines.Length; i++)
            {
                string line = lines[i];
                if (inMultilineString)
                {
                    if (line.Contains("'''"))
                    {
                        inMultilineString = false;
                    }
                    stringBuilder.AppendLine(line);
                    continue;
                }
                if (line.Contains("'''"))
                {
                    inMultilineString = true;
                    stringBuilder.AppendLine($"{indent}{line}");
                    continue;
                }
                if (i == 0 && !indentFirstLine)
                {
                    stringBuilder.AppendLine($" {line}");
                }
                else
                {
                    stringBuilder.AppendLine($"{indent}{line}");
                }
            }
        }

        BinaryData IPersistableModel<VMwareToAzStackHciProtectedItemModelCustomProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<VMwareToAzStackHciProtectedItemModelCustomProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                case "B":
                    return SerializeBicep(options);
                default:
                    throw new FormatException($"The model {nameof(VMwareToAzStackHciProtectedItemModelCustomProperties)} does not support '{options.Format}' format.");
            }
        }

        VMwareToAzStackHciProtectedItemModelCustomProperties IPersistableModel<VMwareToAzStackHciProtectedItemModelCustomProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<VMwareToAzStackHciProtectedItemModelCustomProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeVMwareToAzStackHciProtectedItemModelCustomProperties(document.RootElement, options);
                    }
                case "B":
                    throw new InvalidOperationException("Bicep deserialization is not supported for this type.");
                default:
                    throw new FormatException($"The model {nameof(VMwareToAzStackHciProtectedItemModelCustomProperties)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<VMwareToAzStackHciProtectedItemModelCustomProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
