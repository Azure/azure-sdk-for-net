// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.RecoveryServicesDataReplication.Models
{
    /// <summary> Gets or sets the instance type. </summary>
    internal readonly partial struct ReplicationType : IEquatable<ReplicationType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ReplicationType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ReplicationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NoneValue = "None";
        private const string VMwareToAvsValue = "VMwareToAvs";
        private const string VMwareToAvsFailbackValue = "VMwareToAvsFailback";
        private const string VMwareToAzureMigrateValue = "VMwareToAzureMigrate";
        private const string HyperVToAzStackHCIValue = "HyperVToAzStackHCI";
        private const string VMwareToAzStackHCIValue = "VMwareToAzStackHCI";

        /// <summary> None. </summary>
        public static ReplicationType None { get; } = new ReplicationType(NoneValue);
        /// <summary> VMwareToAvs. </summary>
        public static ReplicationType VMwareToAvs { get; } = new ReplicationType(VMwareToAvsValue);
        /// <summary> VMwareToAvsFailback. </summary>
        public static ReplicationType VMwareToAvsFailback { get; } = new ReplicationType(VMwareToAvsFailbackValue);
        /// <summary> VMwareToAzureMigrate. </summary>
        public static ReplicationType VMwareToAzureMigrate { get; } = new ReplicationType(VMwareToAzureMigrateValue);
        /// <summary> HyperVToAzStackHCI. </summary>
        public static ReplicationType HyperVToAzStackHCI { get; } = new ReplicationType(HyperVToAzStackHCIValue);
        /// <summary> VMwareToAzStackHCI. </summary>
        public static ReplicationType VMwareToAzStackHCI { get; } = new ReplicationType(VMwareToAzStackHCIValue);
        /// <summary> Determines if two <see cref="ReplicationType"/> values are the same. </summary>
        public static bool operator ==(ReplicationType left, ReplicationType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ReplicationType"/> values are not the same. </summary>
        public static bool operator !=(ReplicationType left, ReplicationType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ReplicationType"/>. </summary>
        public static implicit operator ReplicationType(string value) => new ReplicationType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ReplicationType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ReplicationType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
