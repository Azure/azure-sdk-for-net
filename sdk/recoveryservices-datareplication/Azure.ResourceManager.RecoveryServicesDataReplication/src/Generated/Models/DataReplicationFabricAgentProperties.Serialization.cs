// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.ResourceManager.RecoveryServicesDataReplication;

namespace Azure.ResourceManager.RecoveryServicesDataReplication.Models
{
    /// <summary> Fabric agent model properties. </summary>
    public partial class DataReplicationFabricAgentProperties : IJsonModel<DataReplicationFabricAgentProperties>
    {
        /// <summary> Initializes a new instance of <see cref="DataReplicationFabricAgentProperties"/> for deserialization. </summary>
        internal DataReplicationFabricAgentProperties()
        {
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<DataReplicationFabricAgentProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<DataReplicationFabricAgentProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(DataReplicationFabricAgentProperties)} does not support writing '{format}' format.");
            }
            if (options.Format != "W" && Optional.IsDefined(CorrelationId))
            {
                writer.WritePropertyName("correlationId"u8);
                writer.WriteStringValue(CorrelationId);
            }
            writer.WritePropertyName("machineId"u8);
            writer.WriteStringValue(MachineId);
            writer.WritePropertyName("machineName"u8);
            writer.WriteStringValue(MachineName);
            writer.WritePropertyName("authenticationIdentity"u8);
            writer.WriteObjectValue(AuthenticationIdentity, options);
            writer.WritePropertyName("resourceAccessIdentity"u8);
            writer.WriteObjectValue(ResourceAccessIdentity, options);
            if (options.Format != "W" && Optional.IsDefined(IsResponsive))
            {
                writer.WritePropertyName("isResponsive"u8);
                writer.WriteBooleanValue(IsResponsive.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(LastHeartbeatOn))
            {
                writer.WritePropertyName("lastHeartbeat"u8);
                writer.WriteStringValue(LastHeartbeatOn.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(VersionNumber))
            {
                writer.WritePropertyName("versionNumber"u8);
                writer.WriteStringValue(VersionNumber);
            }
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(HealthErrors))
            {
                writer.WritePropertyName("healthErrors"u8);
                writer.WriteStartArray();
                foreach (DataReplicationHealthErrorInfo item in HealthErrors)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            writer.WritePropertyName("customProperties"u8);
            writer.WriteObjectValue(CustomProperties, options);
            if (options.Format != "W" && _additionalBinaryDataProperties != null)
            {
                foreach (var item in _additionalBinaryDataProperties)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        DataReplicationFabricAgentProperties IJsonModel<DataReplicationFabricAgentProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual DataReplicationFabricAgentProperties JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<DataReplicationFabricAgentProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(DataReplicationFabricAgentProperties)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeDataReplicationFabricAgentProperties(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static DataReplicationFabricAgentProperties DeserializeDataReplicationFabricAgentProperties(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string correlationId = default;
            string machineId = default;
            string machineName = default;
            DataReplicationIdentity authenticationIdentity = default;
            DataReplicationIdentity resourceAccessIdentity = default;
            bool? isResponsive = default;
            DateTimeOffset? lastHeartbeatOn = default;
            string versionNumber = default;
            DataReplicationProvisioningState? provisioningState = default;
            IReadOnlyList<DataReplicationHealthErrorInfo> healthErrors = default;
            DataReplicationFabricAgentCustomProperties customProperties = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("correlationId"u8))
                {
                    correlationId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("machineId"u8))
                {
                    machineId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("machineName"u8))
                {
                    machineName = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("authenticationIdentity"u8))
                {
                    authenticationIdentity = DataReplicationIdentity.DeserializeDataReplicationIdentity(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("resourceAccessIdentity"u8))
                {
                    resourceAccessIdentity = DataReplicationIdentity.DeserializeDataReplicationIdentity(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("isResponsive"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isResponsive = prop.Value.GetBoolean();
                    continue;
                }
                if (prop.NameEquals("lastHeartbeat"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastHeartbeatOn = prop.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (prop.NameEquals("versionNumber"u8))
                {
                    versionNumber = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("provisioningState"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new DataReplicationProvisioningState(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("healthErrors"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<DataReplicationHealthErrorInfo> array = new List<DataReplicationHealthErrorInfo>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(DataReplicationHealthErrorInfo.DeserializeDataReplicationHealthErrorInfo(item, options));
                    }
                    healthErrors = array;
                    continue;
                }
                if (prop.NameEquals("customProperties"u8))
                {
                    customProperties = DataReplicationFabricAgentCustomProperties.DeserializeDataReplicationFabricAgentCustomProperties(prop.Value, options);
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new DataReplicationFabricAgentProperties(
                correlationId,
                machineId,
                machineName,
                authenticationIdentity,
                resourceAccessIdentity,
                isResponsive,
                lastHeartbeatOn,
                versionNumber,
                provisioningState,
                healthErrors ?? new ChangeTrackingList<DataReplicationHealthErrorInfo>(),
                customProperties,
                additionalBinaryDataProperties);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<DataReplicationFabricAgentProperties>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<DataReplicationFabricAgentProperties>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerRecoveryServicesDataReplicationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(DataReplicationFabricAgentProperties)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        DataReplicationFabricAgentProperties IPersistableModel<DataReplicationFabricAgentProperties>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual DataReplicationFabricAgentProperties PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<DataReplicationFabricAgentProperties>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeDataReplicationFabricAgentProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(DataReplicationFabricAgentProperties)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<DataReplicationFabricAgentProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
