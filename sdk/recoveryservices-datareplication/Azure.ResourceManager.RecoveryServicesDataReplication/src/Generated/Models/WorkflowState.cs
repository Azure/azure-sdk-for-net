// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.RecoveryServicesDataReplication.Models
{
    /// <summary> Gets or sets the workflow state. </summary>
    public readonly partial struct WorkflowState : IEquatable<WorkflowState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="WorkflowState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public WorkflowState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PendingValue = "Pending";
        private const string StartedValue = "Started";
        private const string CancellingValue = "Cancelling";
        private const string SucceededValue = "Succeeded";
        private const string FailedValue = "Failed";
        private const string CancelledValue = "Cancelled";
        private const string CompletedWithInformationValue = "CompletedWithInformation";
        private const string CompletedWithWarningsValue = "CompletedWithWarnings";
        private const string CompletedWithErrorsValue = "CompletedWithErrors";

        /// <summary> Pending. </summary>
        public static WorkflowState Pending { get; } = new WorkflowState(PendingValue);
        /// <summary> Started. </summary>
        public static WorkflowState Started { get; } = new WorkflowState(StartedValue);
        /// <summary> Cancelling. </summary>
        public static WorkflowState Cancelling { get; } = new WorkflowState(CancellingValue);
        /// <summary> Succeeded. </summary>
        public static WorkflowState Succeeded { get; } = new WorkflowState(SucceededValue);
        /// <summary> Failed. </summary>
        public static WorkflowState Failed { get; } = new WorkflowState(FailedValue);
        /// <summary> Cancelled. </summary>
        public static WorkflowState Cancelled { get; } = new WorkflowState(CancelledValue);
        /// <summary> CompletedWithInformation. </summary>
        public static WorkflowState CompletedWithInformation { get; } = new WorkflowState(CompletedWithInformationValue);
        /// <summary> CompletedWithWarnings. </summary>
        public static WorkflowState CompletedWithWarnings { get; } = new WorkflowState(CompletedWithWarningsValue);
        /// <summary> CompletedWithErrors. </summary>
        public static WorkflowState CompletedWithErrors { get; } = new WorkflowState(CompletedWithErrorsValue);
        /// <summary> Determines if two <see cref="WorkflowState"/> values are the same. </summary>
        public static bool operator ==(WorkflowState left, WorkflowState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="WorkflowState"/> values are not the same. </summary>
        public static bool operator !=(WorkflowState left, WorkflowState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="WorkflowState"/>. </summary>
        public static implicit operator WorkflowState(string value) => new WorkflowState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is WorkflowState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(WorkflowState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
