// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.RecoveryServicesDataReplication.Models
{
    public partial class DataReplicationProtectedItemProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("policyName"u8);
            writer.WriteStringValue(PolicyName);
            writer.WritePropertyName("replicationExtensionName"u8);
            writer.WriteStringValue(ReplicationExtensionName);
            writer.WritePropertyName("customProperties"u8);
            writer.WriteObjectValue(CustomProperties);
            writer.WriteEndObject();
        }

        internal static DataReplicationProtectedItemProperties DeserializeDataReplicationProtectedItemProperties(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string policyName = default;
            string replicationExtensionName = default;
            Optional<string> correlationId = default;
            Optional<DataReplicationProvisioningState> provisioningState = default;
            Optional<DataReplicationProtectionState> protectionState = default;
            Optional<string> protectionStateDescription = default;
            Optional<DataReplicationTestFailoverState> testFailoverState = default;
            Optional<string> testFailoverStateDescription = default;
            Optional<DataReplicationResynchronizationState> resynchronizationState = default;
            Optional<string> fabricObjectId = default;
            Optional<string> fabricObjectName = default;
            Optional<string> sourceFabricProviderId = default;
            Optional<string> targetFabricProviderId = default;
            Optional<string> fabricId = default;
            Optional<string> targetFabricId = default;
            Optional<string> draId = default;
            Optional<string> targetDraId = default;
            Optional<bool> resyncRequired = default;
            Optional<DateTimeOffset> lastSuccessfulPlannedFailoverTime = default;
            Optional<DateTimeOffset> lastSuccessfulUnplannedFailoverTime = default;
            Optional<DateTimeOffset> lastSuccessfulTestFailoverTime = default;
            Optional<ProtectedItemJobProperties> currentJob = default;
            Optional<IReadOnlyList<string>> allowedJobs = default;
            Optional<ProtectedItemJobProperties> lastFailedEnableProtectionJob = default;
            Optional<ProtectedItemJobProperties> lastFailedPlannedFailoverJob = default;
            Optional<ProtectedItemJobProperties> lastTestFailoverJob = default;
            Optional<DataReplicationHealthStatus> replicationHealth = default;
            Optional<IReadOnlyList<DataReplicationHealthErrorInfo>> healthErrors = default;
            ProtectedItemModelCustomProperties customProperties = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("policyName"u8))
                {
                    policyName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("replicationExtensionName"u8))
                {
                    replicationExtensionName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("correlationId"u8))
                {
                    correlationId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new DataReplicationProvisioningState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("protectionState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    protectionState = new DataReplicationProtectionState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("protectionStateDescription"u8))
                {
                    protectionStateDescription = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("testFailoverState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    testFailoverState = new DataReplicationTestFailoverState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("testFailoverStateDescription"u8))
                {
                    testFailoverStateDescription = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("resynchronizationState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    resynchronizationState = new DataReplicationResynchronizationState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("fabricObjectId"u8))
                {
                    fabricObjectId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("fabricObjectName"u8))
                {
                    fabricObjectName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sourceFabricProviderId"u8))
                {
                    sourceFabricProviderId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("targetFabricProviderId"u8))
                {
                    targetFabricProviderId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("fabricId"u8))
                {
                    fabricId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("targetFabricId"u8))
                {
                    targetFabricId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("draId"u8))
                {
                    draId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("targetDraId"u8))
                {
                    targetDraId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("resyncRequired"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    resyncRequired = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("lastSuccessfulPlannedFailoverTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastSuccessfulPlannedFailoverTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("lastSuccessfulUnplannedFailoverTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastSuccessfulUnplannedFailoverTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("lastSuccessfulTestFailoverTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastSuccessfulTestFailoverTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("currentJob"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    currentJob = ProtectedItemJobProperties.DeserializeProtectedItemJobProperties(property.Value);
                    continue;
                }
                if (property.NameEquals("allowedJobs"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    allowedJobs = array;
                    continue;
                }
                if (property.NameEquals("lastFailedEnableProtectionJob"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastFailedEnableProtectionJob = ProtectedItemJobProperties.DeserializeProtectedItemJobProperties(property.Value);
                    continue;
                }
                if (property.NameEquals("lastFailedPlannedFailoverJob"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastFailedPlannedFailoverJob = ProtectedItemJobProperties.DeserializeProtectedItemJobProperties(property.Value);
                    continue;
                }
                if (property.NameEquals("lastTestFailoverJob"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastTestFailoverJob = ProtectedItemJobProperties.DeserializeProtectedItemJobProperties(property.Value);
                    continue;
                }
                if (property.NameEquals("replicationHealth"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    replicationHealth = new DataReplicationHealthStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("healthErrors"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<DataReplicationHealthErrorInfo> array = new List<DataReplicationHealthErrorInfo>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DataReplicationHealthErrorInfo.DeserializeDataReplicationHealthErrorInfo(item));
                    }
                    healthErrors = array;
                    continue;
                }
                if (property.NameEquals("customProperties"u8))
                {
                    customProperties = ProtectedItemModelCustomProperties.DeserializeProtectedItemModelCustomProperties(property.Value);
                    continue;
                }
            }
            return new DataReplicationProtectedItemProperties(policyName, replicationExtensionName, correlationId.Value, Optional.ToNullable(provisioningState), Optional.ToNullable(protectionState), protectionStateDescription.Value, Optional.ToNullable(testFailoverState), testFailoverStateDescription.Value, Optional.ToNullable(resynchronizationState), fabricObjectId.Value, fabricObjectName.Value, sourceFabricProviderId.Value, targetFabricProviderId.Value, fabricId.Value, targetFabricId.Value, draId.Value, targetDraId.Value, Optional.ToNullable(resyncRequired), Optional.ToNullable(lastSuccessfulPlannedFailoverTime), Optional.ToNullable(lastSuccessfulUnplannedFailoverTime), Optional.ToNullable(lastSuccessfulTestFailoverTime), currentJob.Value, Optional.ToList(allowedJobs), lastFailedEnableProtectionJob.Value, lastFailedPlannedFailoverJob.Value, lastTestFailoverJob.Value, Optional.ToNullable(replicationHealth), Optional.ToList(healthErrors), customProperties);
        }
    }
}
