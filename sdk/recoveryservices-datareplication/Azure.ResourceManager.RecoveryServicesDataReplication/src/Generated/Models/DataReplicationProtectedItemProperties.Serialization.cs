// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.ResourceManager.RecoveryServicesDataReplication;

namespace Azure.ResourceManager.RecoveryServicesDataReplication.Models
{
    /// <summary> Protected item model properties. </summary>
    public partial class DataReplicationProtectedItemProperties : IJsonModel<DataReplicationProtectedItemProperties>
    {
        /// <summary> Initializes a new instance of <see cref="DataReplicationProtectedItemProperties"/> for deserialization. </summary>
        internal DataReplicationProtectedItemProperties()
        {
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<DataReplicationProtectedItemProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<DataReplicationProtectedItemProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(DataReplicationProtectedItemProperties)} does not support writing '{format}' format.");
            }
            writer.WritePropertyName("policyName"u8);
            writer.WriteStringValue(PolicyName);
            writer.WritePropertyName("replicationExtensionName"u8);
            writer.WriteStringValue(ReplicationExtensionName);
            if (options.Format != "W" && Optional.IsDefined(CorrelationId))
            {
                writer.WritePropertyName("correlationId"u8);
                writer.WriteStringValue(CorrelationId);
            }
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(ProtectionState))
            {
                writer.WritePropertyName("protectionState"u8);
                writer.WriteStringValue(ProtectionState.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(ProtectionStateDescription))
            {
                writer.WritePropertyName("protectionStateDescription"u8);
                writer.WriteStringValue(ProtectionStateDescription);
            }
            if (options.Format != "W" && Optional.IsDefined(TestFailoverState))
            {
                writer.WritePropertyName("testFailoverState"u8);
                writer.WriteStringValue(TestFailoverState.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(TestFailoverStateDescription))
            {
                writer.WritePropertyName("testFailoverStateDescription"u8);
                writer.WriteStringValue(TestFailoverStateDescription);
            }
            if (options.Format != "W" && Optional.IsDefined(ResynchronizationState))
            {
                writer.WritePropertyName("resynchronizationState"u8);
                writer.WriteStringValue(ResynchronizationState.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(FabricObjectId))
            {
                writer.WritePropertyName("fabricObjectId"u8);
                writer.WriteStringValue(FabricObjectId);
            }
            if (options.Format != "W" && Optional.IsDefined(FabricObjectName))
            {
                writer.WritePropertyName("fabricObjectName"u8);
                writer.WriteStringValue(FabricObjectName);
            }
            if (options.Format != "W" && Optional.IsDefined(SourceFabricProviderId))
            {
                writer.WritePropertyName("sourceFabricProviderId"u8);
                writer.WriteStringValue(SourceFabricProviderId);
            }
            if (options.Format != "W" && Optional.IsDefined(TargetFabricProviderId))
            {
                writer.WritePropertyName("targetFabricProviderId"u8);
                writer.WriteStringValue(TargetFabricProviderId);
            }
            if (options.Format != "W" && Optional.IsDefined(FabricId))
            {
                writer.WritePropertyName("fabricId"u8);
                writer.WriteStringValue(FabricId);
            }
            if (options.Format != "W" && Optional.IsDefined(TargetFabricId))
            {
                writer.WritePropertyName("targetFabricId"u8);
                writer.WriteStringValue(TargetFabricId);
            }
            if (options.Format != "W" && Optional.IsDefined(FabricAgentId))
            {
                writer.WritePropertyName("fabricAgentId"u8);
                writer.WriteStringValue(FabricAgentId);
            }
            if (options.Format != "W" && Optional.IsDefined(TargetFabricAgentId))
            {
                writer.WritePropertyName("targetFabricAgentId"u8);
                writer.WriteStringValue(TargetFabricAgentId);
            }
            if (options.Format != "W" && Optional.IsDefined(IsResyncRequired))
            {
                writer.WritePropertyName("resyncRequired"u8);
                writer.WriteBooleanValue(IsResyncRequired.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(LastSuccessfulPlannedFailoverTime))
            {
                writer.WritePropertyName("lastSuccessfulPlannedFailoverTime"u8);
                writer.WriteStringValue(LastSuccessfulPlannedFailoverTime.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(LastSuccessfulUnplannedFailoverTime))
            {
                writer.WritePropertyName("lastSuccessfulUnplannedFailoverTime"u8);
                writer.WriteStringValue(LastSuccessfulUnplannedFailoverTime.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(LastSuccessfulTestFailoverTime))
            {
                writer.WritePropertyName("lastSuccessfulTestFailoverTime"u8);
                writer.WriteStringValue(LastSuccessfulTestFailoverTime.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(CurrentJob))
            {
                writer.WritePropertyName("currentJob"u8);
                writer.WriteObjectValue(CurrentJob, options);
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(AllowedJobs))
            {
                writer.WritePropertyName("allowedJobs"u8);
                writer.WriteStartArray();
                foreach (string item in AllowedJobs)
                {
                    if (item == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsDefined(LastFailedEnableProtectionJob))
            {
                writer.WritePropertyName("lastFailedEnableProtectionJob"u8);
                writer.WriteObjectValue(LastFailedEnableProtectionJob, options);
            }
            if (options.Format != "W" && Optional.IsDefined(LastFailedPlannedFailoverJob))
            {
                writer.WritePropertyName("lastFailedPlannedFailoverJob"u8);
                writer.WriteObjectValue(LastFailedPlannedFailoverJob, options);
            }
            if (options.Format != "W" && Optional.IsDefined(LastTestFailoverJob))
            {
                writer.WritePropertyName("lastTestFailoverJob"u8);
                writer.WriteObjectValue(LastTestFailoverJob, options);
            }
            if (options.Format != "W" && Optional.IsDefined(ReplicationHealth))
            {
                writer.WritePropertyName("replicationHealth"u8);
                writer.WriteStringValue(ReplicationHealth.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(HealthErrors))
            {
                writer.WritePropertyName("healthErrors"u8);
                writer.WriteStartArray();
                foreach (DataReplicationHealthErrorInfo item in HealthErrors)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            writer.WritePropertyName("customProperties"u8);
            writer.WriteObjectValue(CustomProperties, options);
            if (options.Format != "W" && _additionalBinaryDataProperties != null)
            {
                foreach (var item in _additionalBinaryDataProperties)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        DataReplicationProtectedItemProperties IJsonModel<DataReplicationProtectedItemProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual DataReplicationProtectedItemProperties JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<DataReplicationProtectedItemProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(DataReplicationProtectedItemProperties)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeDataReplicationProtectedItemProperties(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static DataReplicationProtectedItemProperties DeserializeDataReplicationProtectedItemProperties(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string policyName = default;
            string replicationExtensionName = default;
            string correlationId = default;
            DataReplicationProvisioningState? provisioningState = default;
            DataReplicationProtectionState? protectionState = default;
            string protectionStateDescription = default;
            DataReplicationTestFailoverState? testFailoverState = default;
            string testFailoverStateDescription = default;
            DataReplicationResynchronizationState? resynchronizationState = default;
            string fabricObjectId = default;
            string fabricObjectName = default;
            string sourceFabricProviderId = default;
            string targetFabricProviderId = default;
            string fabricId = default;
            string targetFabricId = default;
            string fabricAgentId = default;
            string targetFabricAgentId = default;
            bool? isResyncRequired = default;
            DateTimeOffset? lastSuccessfulPlannedFailoverTime = default;
            DateTimeOffset? lastSuccessfulUnplannedFailoverTime = default;
            DateTimeOffset? lastSuccessfulTestFailoverTime = default;
            ProtectedItemJobProperties currentJob = default;
            IReadOnlyList<string> allowedJobs = default;
            ProtectedItemJobProperties lastFailedEnableProtectionJob = default;
            ProtectedItemJobProperties lastFailedPlannedFailoverJob = default;
            ProtectedItemJobProperties lastTestFailoverJob = default;
            DataReplicationHealthStatus? replicationHealth = default;
            IReadOnlyList<DataReplicationHealthErrorInfo> healthErrors = default;
            DataReplicationProtectedItemCustomProperties customProperties = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("policyName"u8))
                {
                    policyName = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("replicationExtensionName"u8))
                {
                    replicationExtensionName = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("correlationId"u8))
                {
                    correlationId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("provisioningState"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new DataReplicationProvisioningState(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("protectionState"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    protectionState = new DataReplicationProtectionState(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("protectionStateDescription"u8))
                {
                    protectionStateDescription = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("testFailoverState"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    testFailoverState = new DataReplicationTestFailoverState(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("testFailoverStateDescription"u8))
                {
                    testFailoverStateDescription = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("resynchronizationState"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    resynchronizationState = new DataReplicationResynchronizationState(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("fabricObjectId"u8))
                {
                    fabricObjectId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("fabricObjectName"u8))
                {
                    fabricObjectName = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("sourceFabricProviderId"u8))
                {
                    sourceFabricProviderId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("targetFabricProviderId"u8))
                {
                    targetFabricProviderId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("fabricId"u8))
                {
                    fabricId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("targetFabricId"u8))
                {
                    targetFabricId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("fabricAgentId"u8))
                {
                    fabricAgentId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("targetFabricAgentId"u8))
                {
                    targetFabricAgentId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("resyncRequired"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isResyncRequired = prop.Value.GetBoolean();
                    continue;
                }
                if (prop.NameEquals("lastSuccessfulPlannedFailoverTime"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastSuccessfulPlannedFailoverTime = prop.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (prop.NameEquals("lastSuccessfulUnplannedFailoverTime"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastSuccessfulUnplannedFailoverTime = prop.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (prop.NameEquals("lastSuccessfulTestFailoverTime"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastSuccessfulTestFailoverTime = prop.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (prop.NameEquals("currentJob"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    currentJob = ProtectedItemJobProperties.DeserializeProtectedItemJobProperties(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("allowedJobs"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(item.GetString());
                        }
                    }
                    allowedJobs = array;
                    continue;
                }
                if (prop.NameEquals("lastFailedEnableProtectionJob"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastFailedEnableProtectionJob = ProtectedItemJobProperties.DeserializeProtectedItemJobProperties(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("lastFailedPlannedFailoverJob"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastFailedPlannedFailoverJob = ProtectedItemJobProperties.DeserializeProtectedItemJobProperties(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("lastTestFailoverJob"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastTestFailoverJob = ProtectedItemJobProperties.DeserializeProtectedItemJobProperties(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("replicationHealth"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    replicationHealth = new DataReplicationHealthStatus(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("healthErrors"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<DataReplicationHealthErrorInfo> array = new List<DataReplicationHealthErrorInfo>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(DataReplicationHealthErrorInfo.DeserializeDataReplicationHealthErrorInfo(item, options));
                    }
                    healthErrors = array;
                    continue;
                }
                if (prop.NameEquals("customProperties"u8))
                {
                    customProperties = DataReplicationProtectedItemCustomProperties.DeserializeDataReplicationProtectedItemCustomProperties(prop.Value, options);
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new DataReplicationProtectedItemProperties(
                policyName,
                replicationExtensionName,
                correlationId,
                provisioningState,
                protectionState,
                protectionStateDescription,
                testFailoverState,
                testFailoverStateDescription,
                resynchronizationState,
                fabricObjectId,
                fabricObjectName,
                sourceFabricProviderId,
                targetFabricProviderId,
                fabricId,
                targetFabricId,
                fabricAgentId,
                targetFabricAgentId,
                isResyncRequired,
                lastSuccessfulPlannedFailoverTime,
                lastSuccessfulUnplannedFailoverTime,
                lastSuccessfulTestFailoverTime,
                currentJob,
                allowedJobs ?? new ChangeTrackingList<string>(),
                lastFailedEnableProtectionJob,
                lastFailedPlannedFailoverJob,
                lastTestFailoverJob,
                replicationHealth,
                healthErrors ?? new ChangeTrackingList<DataReplicationHealthErrorInfo>(),
                customProperties,
                additionalBinaryDataProperties);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<DataReplicationProtectedItemProperties>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<DataReplicationProtectedItemProperties>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerRecoveryServicesDataReplicationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(DataReplicationProtectedItemProperties)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        DataReplicationProtectedItemProperties IPersistableModel<DataReplicationProtectedItemProperties>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual DataReplicationProtectedItemProperties PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<DataReplicationProtectedItemProperties>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeDataReplicationProtectedItemProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(DataReplicationProtectedItemProperties)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<DataReplicationProtectedItemProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
