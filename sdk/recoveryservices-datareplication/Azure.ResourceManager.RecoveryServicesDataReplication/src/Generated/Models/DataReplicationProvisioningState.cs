// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using Azure.ResourceManager.RecoveryServicesDataReplication;

namespace Azure.ResourceManager.RecoveryServicesDataReplication.Models
{
    /// <summary> Gets or sets the provisioning state of the email configuration. </summary>
    public readonly partial struct DataReplicationProvisioningState : IEquatable<DataReplicationProvisioningState>
    {
        private readonly string _value;
        /// <summary> Resource creation has been canceled. </summary>
        private const string CanceledValue = "Canceled";
        /// <summary> Resource is being created. </summary>
        private const string CreatingValue = "Creating";
        /// <summary> Resource is being deleted. </summary>
        private const string DeletingValue = "Deleting";
        /// <summary> Resource has been deleted. </summary>
        private const string DeletedValue = "Deleted";
        /// <summary> Resource creation failed. </summary>
        private const string FailedValue = "Failed";
        /// <summary> Resource creation/update succeeded. </summary>
        private const string SucceededValue = "Succeeded";
        /// <summary> Resource is being updated. </summary>
        private const string UpdatingValue = "Updating";

        /// <summary> Initializes a new instance of <see cref="DataReplicationProvisioningState"/>. </summary>
        /// <param name="value"> The value. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DataReplicationProvisioningState(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        /// <summary> Resource creation has been canceled. </summary>
        public static DataReplicationProvisioningState Canceled { get; } = new DataReplicationProvisioningState(CanceledValue);

        /// <summary> Resource is being created. </summary>
        public static DataReplicationProvisioningState Creating { get; } = new DataReplicationProvisioningState(CreatingValue);

        /// <summary> Resource is being deleted. </summary>
        public static DataReplicationProvisioningState Deleting { get; } = new DataReplicationProvisioningState(DeletingValue);

        /// <summary> Resource has been deleted. </summary>
        public static DataReplicationProvisioningState Deleted { get; } = new DataReplicationProvisioningState(DeletedValue);

        /// <summary> Resource creation failed. </summary>
        public static DataReplicationProvisioningState Failed { get; } = new DataReplicationProvisioningState(FailedValue);

        /// <summary> Resource creation/update succeeded. </summary>
        public static DataReplicationProvisioningState Succeeded { get; } = new DataReplicationProvisioningState(SucceededValue);

        /// <summary> Resource is being updated. </summary>
        public static DataReplicationProvisioningState Updating { get; } = new DataReplicationProvisioningState(UpdatingValue);

        /// <summary> Determines if two <see cref="DataReplicationProvisioningState"/> values are the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator ==(DataReplicationProvisioningState left, DataReplicationProvisioningState right) => left.Equals(right);

        /// <summary> Determines if two <see cref="DataReplicationProvisioningState"/> values are not the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator !=(DataReplicationProvisioningState left, DataReplicationProvisioningState right) => !left.Equals(right);

        /// <summary> Converts a string to a <see cref="DataReplicationProvisioningState"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator DataReplicationProvisioningState(string value) => new DataReplicationProvisioningState(value);

        /// <summary> Converts a string to a <see cref="DataReplicationProvisioningState"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator DataReplicationProvisioningState?(string value) => value == null ? null : new DataReplicationProvisioningState(value);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DataReplicationProvisioningState other && Equals(other);

        /// <inheritdoc/>
        public bool Equals(DataReplicationProvisioningState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        /// <inheritdoc/>
        public override string ToString() => _value;
    }
}
