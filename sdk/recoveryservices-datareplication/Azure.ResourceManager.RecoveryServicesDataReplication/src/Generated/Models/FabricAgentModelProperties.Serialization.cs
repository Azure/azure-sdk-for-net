// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.RecoveryServicesDataReplication.Models
{
    public partial class FabricAgentModelProperties : IUtf8JsonSerializable, IJsonModel<FabricAgentModelProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<FabricAgentModelProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<FabricAgentModelProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<FabricAgentModelProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(FabricAgentModelProperties)} does not support writing '{format}' format.");
            }

            if (options.Format != "W" && Optional.IsDefined(CorrelationId))
            {
                writer.WritePropertyName("correlationId"u8);
                writer.WriteStringValue(CorrelationId);
            }
            writer.WritePropertyName("machineId"u8);
            writer.WriteStringValue(MachineId);
            writer.WritePropertyName("machineName"u8);
            writer.WriteStringValue(MachineName);
            writer.WritePropertyName("authenticationIdentity"u8);
            writer.WriteObjectValue(AuthenticationIdentity, options);
            writer.WritePropertyName("resourceAccessIdentity"u8);
            writer.WriteObjectValue(ResourceAccessIdentity, options);
            if (options.Format != "W" && Optional.IsDefined(IsResponsive))
            {
                writer.WritePropertyName("isResponsive"u8);
                writer.WriteBooleanValue(IsResponsive.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(LastHeartbeat))
            {
                writer.WritePropertyName("lastHeartbeat"u8);
                writer.WriteStringValue(LastHeartbeat.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(VersionNumber))
            {
                writer.WritePropertyName("versionNumber"u8);
                writer.WriteStringValue(VersionNumber);
            }
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(HealthErrors))
            {
                writer.WritePropertyName("healthErrors"u8);
                writer.WriteStartArray();
                foreach (var item in HealthErrors)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            writer.WritePropertyName("customProperties"u8);
            writer.WriteObjectValue(CustomProperties, options);
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        FabricAgentModelProperties IJsonModel<FabricAgentModelProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<FabricAgentModelProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(FabricAgentModelProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeFabricAgentModelProperties(document.RootElement, options);
        }

        internal static FabricAgentModelProperties DeserializeFabricAgentModelProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string correlationId = default;
            string machineId = default;
            string machineName = default;
            IdentityModel authenticationIdentity = default;
            IdentityModel resourceAccessIdentity = default;
            bool? isResponsive = default;
            DateTimeOffset? lastHeartbeat = default;
            string versionNumber = default;
            ProvisioningState? provisioningState = default;
            IReadOnlyList<HealthErrorModel> healthErrors = default;
            FabricAgentModelCustomProperties customProperties = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("correlationId"u8))
                {
                    correlationId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("machineId"u8))
                {
                    machineId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("machineName"u8))
                {
                    machineName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("authenticationIdentity"u8))
                {
                    authenticationIdentity = IdentityModel.DeserializeIdentityModel(property.Value, options);
                    continue;
                }
                if (property.NameEquals("resourceAccessIdentity"u8))
                {
                    resourceAccessIdentity = IdentityModel.DeserializeIdentityModel(property.Value, options);
                    continue;
                }
                if (property.NameEquals("isResponsive"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isResponsive = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("lastHeartbeat"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastHeartbeat = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("versionNumber"u8))
                {
                    versionNumber = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new ProvisioningState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("healthErrors"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<HealthErrorModel> array = new List<HealthErrorModel>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(HealthErrorModel.DeserializeHealthErrorModel(item, options));
                    }
                    healthErrors = array;
                    continue;
                }
                if (property.NameEquals("customProperties"u8))
                {
                    customProperties = FabricAgentModelCustomProperties.DeserializeFabricAgentModelCustomProperties(property.Value, options);
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new FabricAgentModelProperties(
                correlationId,
                machineId,
                machineName,
                authenticationIdentity,
                resourceAccessIdentity,
                isResponsive,
                lastHeartbeat,
                versionNumber,
                provisioningState,
                healthErrors ?? new ChangeTrackingList<HealthErrorModel>(),
                customProperties,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<FabricAgentModelProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<FabricAgentModelProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(FabricAgentModelProperties)} does not support writing '{options.Format}' format.");
            }
        }

        FabricAgentModelProperties IPersistableModel<FabricAgentModelProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<FabricAgentModelProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeFabricAgentModelProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(FabricAgentModelProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<FabricAgentModelProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
