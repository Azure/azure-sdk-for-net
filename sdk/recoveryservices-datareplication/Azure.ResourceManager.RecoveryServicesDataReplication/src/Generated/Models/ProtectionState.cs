// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.RecoveryServicesDataReplication.Models
{
    /// <summary> Gets or sets the protection state. </summary>
    public readonly partial struct ProtectionState : IEquatable<ProtectionState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ProtectionState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ProtectionState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UnprotectedStatesBeginValue = "UnprotectedStatesBegin";
        private const string EnablingProtectionValue = "EnablingProtection";
        private const string EnablingFailedValue = "EnablingFailed";
        private const string DisablingProtectionValue = "DisablingProtection";
        private const string MarkedForDeletionValue = "MarkedForDeletion";
        private const string DisablingFailedValue = "DisablingFailed";
        private const string UnprotectedStatesEndValue = "UnprotectedStatesEnd";
        private const string InitialReplicationStatesBeginValue = "InitialReplicationStatesBegin";
        private const string InitialReplicationInProgressValue = "InitialReplicationInProgress";
        private const string InitialReplicationCompletedOnPrimaryValue = "InitialReplicationCompletedOnPrimary";
        private const string InitialReplicationCompletedOnRecoveryValue = "InitialReplicationCompletedOnRecovery";
        private const string InitialReplicationFailedValue = "InitialReplicationFailed";
        private const string InitialReplicationStatesEndValue = "InitialReplicationStatesEnd";
        private const string ProtectedStatesBeginValue = "ProtectedStatesBegin";
        private const string ProtectedValue = "Protected";
        private const string ProtectedStatesEndValue = "ProtectedStatesEnd";
        private const string PlannedFailoverTransitionStatesBeginValue = "PlannedFailoverTransitionStatesBegin";
        private const string PlannedFailoverInitiatedValue = "PlannedFailoverInitiated";
        private const string PlannedFailoverCompletingValue = "PlannedFailoverCompleting";
        private const string PlannedFailoverCompletedValue = "PlannedFailoverCompleted";
        private const string PlannedFailoverFailedValue = "PlannedFailoverFailed";
        private const string PlannedFailoverCompletionFailedValue = "PlannedFailoverCompletionFailed";
        private const string PlannedFailoverTransitionStatesEndValue = "PlannedFailoverTransitionStatesEnd";
        private const string UnplannedFailoverTransitionStatesBeginValue = "UnplannedFailoverTransitionStatesBegin";
        private const string UnplannedFailoverInitiatedValue = "UnplannedFailoverInitiated";
        private const string UnplannedFailoverCompletingValue = "UnplannedFailoverCompleting";
        private const string UnplannedFailoverCompletedValue = "UnplannedFailoverCompleted";
        private const string UnplannedFailoverFailedValue = "UnplannedFailoverFailed";
        private const string UnplannedFailoverCompletionFailedValue = "UnplannedFailoverCompletionFailed";
        private const string UnplannedFailoverTransitionStatesEndValue = "UnplannedFailoverTransitionStatesEnd";
        private const string CommitFailoverStatesBeginValue = "CommitFailoverStatesBegin";
        private const string CommitFailoverInProgressOnPrimaryValue = "CommitFailoverInProgressOnPrimary";
        private const string CommitFailoverInProgressOnRecoveryValue = "CommitFailoverInProgressOnRecovery";
        private const string CommitFailoverCompletedValue = "CommitFailoverCompleted";
        private const string CommitFailoverFailedOnPrimaryValue = "CommitFailoverFailedOnPrimary";
        private const string CommitFailoverFailedOnRecoveryValue = "CommitFailoverFailedOnRecovery";
        private const string CommitFailoverStatesEndValue = "CommitFailoverStatesEnd";
        private const string CancelFailoverStatesBeginValue = "CancelFailoverStatesBegin";
        private const string CancelFailoverInProgressOnPrimaryValue = "CancelFailoverInProgressOnPrimary";
        private const string CancelFailoverInProgressOnRecoveryValue = "CancelFailoverInProgressOnRecovery";
        private const string CancelFailoverFailedOnPrimaryValue = "CancelFailoverFailedOnPrimary";
        private const string CancelFailoverFailedOnRecoveryValue = "CancelFailoverFailedOnRecovery";
        private const string CancelFailoverStatesEndValue = "CancelFailoverStatesEnd";
        private const string ChangeRecoveryPointStatesBeginValue = "ChangeRecoveryPointStatesBegin";
        private const string ChangeRecoveryPointInitiatedValue = "ChangeRecoveryPointInitiated";
        private const string ChangeRecoveryPointCompletedValue = "ChangeRecoveryPointCompleted";
        private const string ChangeRecoveryPointFailedValue = "ChangeRecoveryPointFailed";
        private const string ChangeRecoveryPointStatesEndValue = "ChangeRecoveryPointStatesEnd";
        private const string ReprotectStatesBeginValue = "ReprotectStatesBegin";
        private const string ReprotectInitiatedValue = "ReprotectInitiated";
        private const string ReprotectFailedValue = "ReprotectFailed";
        private const string ReprotectStatesEndValue = "ReprotectStatesEnd";

        /// <summary> UnprotectedStatesBegin. </summary>
        public static ProtectionState UnprotectedStatesBegin { get; } = new ProtectionState(UnprotectedStatesBeginValue);
        /// <summary> EnablingProtection. </summary>
        public static ProtectionState EnablingProtection { get; } = new ProtectionState(EnablingProtectionValue);
        /// <summary> EnablingFailed. </summary>
        public static ProtectionState EnablingFailed { get; } = new ProtectionState(EnablingFailedValue);
        /// <summary> DisablingProtection. </summary>
        public static ProtectionState DisablingProtection { get; } = new ProtectionState(DisablingProtectionValue);
        /// <summary> MarkedForDeletion. </summary>
        public static ProtectionState MarkedForDeletion { get; } = new ProtectionState(MarkedForDeletionValue);
        /// <summary> DisablingFailed. </summary>
        public static ProtectionState DisablingFailed { get; } = new ProtectionState(DisablingFailedValue);
        /// <summary> UnprotectedStatesEnd. </summary>
        public static ProtectionState UnprotectedStatesEnd { get; } = new ProtectionState(UnprotectedStatesEndValue);
        /// <summary> InitialReplicationStatesBegin. </summary>
        public static ProtectionState InitialReplicationStatesBegin { get; } = new ProtectionState(InitialReplicationStatesBeginValue);
        /// <summary> InitialReplicationInProgress. </summary>
        public static ProtectionState InitialReplicationInProgress { get; } = new ProtectionState(InitialReplicationInProgressValue);
        /// <summary> InitialReplicationCompletedOnPrimary. </summary>
        public static ProtectionState InitialReplicationCompletedOnPrimary { get; } = new ProtectionState(InitialReplicationCompletedOnPrimaryValue);
        /// <summary> InitialReplicationCompletedOnRecovery. </summary>
        public static ProtectionState InitialReplicationCompletedOnRecovery { get; } = new ProtectionState(InitialReplicationCompletedOnRecoveryValue);
        /// <summary> InitialReplicationFailed. </summary>
        public static ProtectionState InitialReplicationFailed { get; } = new ProtectionState(InitialReplicationFailedValue);
        /// <summary> InitialReplicationStatesEnd. </summary>
        public static ProtectionState InitialReplicationStatesEnd { get; } = new ProtectionState(InitialReplicationStatesEndValue);
        /// <summary> ProtectedStatesBegin. </summary>
        public static ProtectionState ProtectedStatesBegin { get; } = new ProtectionState(ProtectedStatesBeginValue);
        /// <summary> Protected. </summary>
        public static ProtectionState Protected { get; } = new ProtectionState(ProtectedValue);
        /// <summary> ProtectedStatesEnd. </summary>
        public static ProtectionState ProtectedStatesEnd { get; } = new ProtectionState(ProtectedStatesEndValue);
        /// <summary> PlannedFailoverTransitionStatesBegin. </summary>
        public static ProtectionState PlannedFailoverTransitionStatesBegin { get; } = new ProtectionState(PlannedFailoverTransitionStatesBeginValue);
        /// <summary> PlannedFailoverInitiated. </summary>
        public static ProtectionState PlannedFailoverInitiated { get; } = new ProtectionState(PlannedFailoverInitiatedValue);
        /// <summary> PlannedFailoverCompleting. </summary>
        public static ProtectionState PlannedFailoverCompleting { get; } = new ProtectionState(PlannedFailoverCompletingValue);
        /// <summary> PlannedFailoverCompleted. </summary>
        public static ProtectionState PlannedFailoverCompleted { get; } = new ProtectionState(PlannedFailoverCompletedValue);
        /// <summary> PlannedFailoverFailed. </summary>
        public static ProtectionState PlannedFailoverFailed { get; } = new ProtectionState(PlannedFailoverFailedValue);
        /// <summary> PlannedFailoverCompletionFailed. </summary>
        public static ProtectionState PlannedFailoverCompletionFailed { get; } = new ProtectionState(PlannedFailoverCompletionFailedValue);
        /// <summary> PlannedFailoverTransitionStatesEnd. </summary>
        public static ProtectionState PlannedFailoverTransitionStatesEnd { get; } = new ProtectionState(PlannedFailoverTransitionStatesEndValue);
        /// <summary> UnplannedFailoverTransitionStatesBegin. </summary>
        public static ProtectionState UnplannedFailoverTransitionStatesBegin { get; } = new ProtectionState(UnplannedFailoverTransitionStatesBeginValue);
        /// <summary> UnplannedFailoverInitiated. </summary>
        public static ProtectionState UnplannedFailoverInitiated { get; } = new ProtectionState(UnplannedFailoverInitiatedValue);
        /// <summary> UnplannedFailoverCompleting. </summary>
        public static ProtectionState UnplannedFailoverCompleting { get; } = new ProtectionState(UnplannedFailoverCompletingValue);
        /// <summary> UnplannedFailoverCompleted. </summary>
        public static ProtectionState UnplannedFailoverCompleted { get; } = new ProtectionState(UnplannedFailoverCompletedValue);
        /// <summary> UnplannedFailoverFailed. </summary>
        public static ProtectionState UnplannedFailoverFailed { get; } = new ProtectionState(UnplannedFailoverFailedValue);
        /// <summary> UnplannedFailoverCompletionFailed. </summary>
        public static ProtectionState UnplannedFailoverCompletionFailed { get; } = new ProtectionState(UnplannedFailoverCompletionFailedValue);
        /// <summary> UnplannedFailoverTransitionStatesEnd. </summary>
        public static ProtectionState UnplannedFailoverTransitionStatesEnd { get; } = new ProtectionState(UnplannedFailoverTransitionStatesEndValue);
        /// <summary> CommitFailoverStatesBegin. </summary>
        public static ProtectionState CommitFailoverStatesBegin { get; } = new ProtectionState(CommitFailoverStatesBeginValue);
        /// <summary> CommitFailoverInProgressOnPrimary. </summary>
        public static ProtectionState CommitFailoverInProgressOnPrimary { get; } = new ProtectionState(CommitFailoverInProgressOnPrimaryValue);
        /// <summary> CommitFailoverInProgressOnRecovery. </summary>
        public static ProtectionState CommitFailoverInProgressOnRecovery { get; } = new ProtectionState(CommitFailoverInProgressOnRecoveryValue);
        /// <summary> CommitFailoverCompleted. </summary>
        public static ProtectionState CommitFailoverCompleted { get; } = new ProtectionState(CommitFailoverCompletedValue);
        /// <summary> CommitFailoverFailedOnPrimary. </summary>
        public static ProtectionState CommitFailoverFailedOnPrimary { get; } = new ProtectionState(CommitFailoverFailedOnPrimaryValue);
        /// <summary> CommitFailoverFailedOnRecovery. </summary>
        public static ProtectionState CommitFailoverFailedOnRecovery { get; } = new ProtectionState(CommitFailoverFailedOnRecoveryValue);
        /// <summary> CommitFailoverStatesEnd. </summary>
        public static ProtectionState CommitFailoverStatesEnd { get; } = new ProtectionState(CommitFailoverStatesEndValue);
        /// <summary> CancelFailoverStatesBegin. </summary>
        public static ProtectionState CancelFailoverStatesBegin { get; } = new ProtectionState(CancelFailoverStatesBeginValue);
        /// <summary> CancelFailoverInProgressOnPrimary. </summary>
        public static ProtectionState CancelFailoverInProgressOnPrimary { get; } = new ProtectionState(CancelFailoverInProgressOnPrimaryValue);
        /// <summary> CancelFailoverInProgressOnRecovery. </summary>
        public static ProtectionState CancelFailoverInProgressOnRecovery { get; } = new ProtectionState(CancelFailoverInProgressOnRecoveryValue);
        /// <summary> CancelFailoverFailedOnPrimary. </summary>
        public static ProtectionState CancelFailoverFailedOnPrimary { get; } = new ProtectionState(CancelFailoverFailedOnPrimaryValue);
        /// <summary> CancelFailoverFailedOnRecovery. </summary>
        public static ProtectionState CancelFailoverFailedOnRecovery { get; } = new ProtectionState(CancelFailoverFailedOnRecoveryValue);
        /// <summary> CancelFailoverStatesEnd. </summary>
        public static ProtectionState CancelFailoverStatesEnd { get; } = new ProtectionState(CancelFailoverStatesEndValue);
        /// <summary> ChangeRecoveryPointStatesBegin. </summary>
        public static ProtectionState ChangeRecoveryPointStatesBegin { get; } = new ProtectionState(ChangeRecoveryPointStatesBeginValue);
        /// <summary> ChangeRecoveryPointInitiated. </summary>
        public static ProtectionState ChangeRecoveryPointInitiated { get; } = new ProtectionState(ChangeRecoveryPointInitiatedValue);
        /// <summary> ChangeRecoveryPointCompleted. </summary>
        public static ProtectionState ChangeRecoveryPointCompleted { get; } = new ProtectionState(ChangeRecoveryPointCompletedValue);
        /// <summary> ChangeRecoveryPointFailed. </summary>
        public static ProtectionState ChangeRecoveryPointFailed { get; } = new ProtectionState(ChangeRecoveryPointFailedValue);
        /// <summary> ChangeRecoveryPointStatesEnd. </summary>
        public static ProtectionState ChangeRecoveryPointStatesEnd { get; } = new ProtectionState(ChangeRecoveryPointStatesEndValue);
        /// <summary> ReprotectStatesBegin. </summary>
        public static ProtectionState ReprotectStatesBegin { get; } = new ProtectionState(ReprotectStatesBeginValue);
        /// <summary> ReprotectInitiated. </summary>
        public static ProtectionState ReprotectInitiated { get; } = new ProtectionState(ReprotectInitiatedValue);
        /// <summary> ReprotectFailed. </summary>
        public static ProtectionState ReprotectFailed { get; } = new ProtectionState(ReprotectFailedValue);
        /// <summary> ReprotectStatesEnd. </summary>
        public static ProtectionState ReprotectStatesEnd { get; } = new ProtectionState(ReprotectStatesEndValue);
        /// <summary> Determines if two <see cref="ProtectionState"/> values are the same. </summary>
        public static bool operator ==(ProtectionState left, ProtectionState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ProtectionState"/> values are not the same. </summary>
        public static bool operator !=(ProtectionState left, ProtectionState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ProtectionState"/>. </summary>
        public static implicit operator ProtectionState(string value) => new ProtectionState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ProtectionState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ProtectionState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
