// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.RecoveryServicesDataReplication.Models
{
    /// <summary> Gets or sets the test failover state. </summary>
    public readonly partial struct TestFailoverState : IEquatable<TestFailoverState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="TestFailoverState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public TestFailoverState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NoneValue = "None";
        private const string TestFailoverInitiatedValue = "TestFailoverInitiated";
        private const string TestFailoverCompletingValue = "TestFailoverCompleting";
        private const string TestFailoverCompletedValue = "TestFailoverCompleted";
        private const string TestFailoverFailedValue = "TestFailoverFailed";
        private const string TestFailoverCompletionFailedValue = "TestFailoverCompletionFailed";
        private const string TestFailoverCleanupInitiatedValue = "TestFailoverCleanupInitiated";
        private const string TestFailoverCleanupCompletingValue = "TestFailoverCleanupCompleting";
        private const string MarkedForDeletionValue = "MarkedForDeletion";

        /// <summary> Test failover is not active. </summary>
        public static TestFailoverState None { get; } = new TestFailoverState(NoneValue);
        /// <summary> Test failover has been initiated. </summary>
        public static TestFailoverState TestFailoverInitiated { get; } = new TestFailoverState(TestFailoverInitiatedValue);
        /// <summary> Preparing test protected entities is in progress. </summary>
        public static TestFailoverState TestFailoverCompleting { get; } = new TestFailoverState(TestFailoverCompletingValue);
        /// <summary> Test failover has been completed successfully. </summary>
        public static TestFailoverState TestFailoverCompleted { get; } = new TestFailoverState(TestFailoverCompletedValue);
        /// <summary> Test failover initiation failed.. </summary>
        public static TestFailoverState TestFailoverFailed { get; } = new TestFailoverState(TestFailoverFailedValue);
        /// <summary> Preparing test protected entities failed. </summary>
        public static TestFailoverState TestFailoverCompletionFailed { get; } = new TestFailoverState(TestFailoverCompletionFailedValue);
        /// <summary> Test failover cleanup has been initiated. </summary>
        public static TestFailoverState TestFailoverCleanupInitiated { get; } = new TestFailoverState(TestFailoverCleanupInitiatedValue);
        /// <summary> Cleaning up test protected entities is in progress. </summary>
        public static TestFailoverState TestFailoverCleanupCompleting { get; } = new TestFailoverState(TestFailoverCleanupCompletingValue);
        /// <summary> Test failover cleanup has completed/failed. This is a transient state before the state is moved back to None. </summary>
        public static TestFailoverState MarkedForDeletion { get; } = new TestFailoverState(MarkedForDeletionValue);
        /// <summary> Determines if two <see cref="TestFailoverState"/> values are the same. </summary>
        public static bool operator ==(TestFailoverState left, TestFailoverState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="TestFailoverState"/> values are not the same. </summary>
        public static bool operator !=(TestFailoverState left, TestFailoverState right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="TestFailoverState"/>. </summary>
        public static implicit operator TestFailoverState(string value) => new TestFailoverState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is TestFailoverState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(TestFailoverState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
