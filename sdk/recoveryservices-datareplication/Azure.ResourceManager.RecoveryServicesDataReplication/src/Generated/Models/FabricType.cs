// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.RecoveryServicesDataReplication.Models
{
    /// <summary> Gets or sets the instance type. </summary>
    internal readonly partial struct FabricType : IEquatable<FabricType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="FabricType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public FabricType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NoneValue = "None";
        private const string VMwareValue = "VMware";
        private const string AVSValue = "AVS";
        private const string AzureValue = "Azure";
        private const string AzStackHCIValue = "AzStackHCI";
        private const string HyperVMigrateValue = "HyperVMigrate";
        private const string VMwareMigrateValue = "VMwareMigrate";

        /// <summary> None. </summary>
        public static FabricType None { get; } = new FabricType(NoneValue);
        /// <summary> VMware. </summary>
        public static FabricType VMware { get; } = new FabricType(VMwareValue);
        /// <summary> AVS. </summary>
        public static FabricType AVS { get; } = new FabricType(AVSValue);
        /// <summary> Azure. </summary>
        public static FabricType Azure { get; } = new FabricType(AzureValue);
        /// <summary> AzStackHCI. </summary>
        public static FabricType AzStackHCI { get; } = new FabricType(AzStackHCIValue);
        /// <summary> HyperVMigrate. </summary>
        public static FabricType HyperVMigrate { get; } = new FabricType(HyperVMigrateValue);
        /// <summary> VMwareMigrate. </summary>
        public static FabricType VMwareMigrate { get; } = new FabricType(VMwareMigrateValue);
        /// <summary> Determines if two <see cref="FabricType"/> values are the same. </summary>
        public static bool operator ==(FabricType left, FabricType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="FabricType"/> values are not the same. </summary>
        public static bool operator !=(FabricType left, FabricType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="FabricType"/>. </summary>
        public static implicit operator FabricType(string value) => new FabricType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is FabricType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(FabricType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
