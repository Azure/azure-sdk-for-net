// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.RecoveryServicesDataReplication;

namespace Azure.ResourceManager.RecoveryServicesDataReplication.Models
{
    /// <summary> VMwareToAzStack disk input. </summary>
    public partial class VMwareToAzStackHCIDiskInput
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="VMwareToAzStackHCIDiskInput"/>. </summary>
        /// <param name="diskId"> Gets or sets the disk Id. </param>
        /// <param name="diskSizeGB"> Gets or sets the disk size in GB. </param>
        /// <param name="diskFileFormat"> Gets or sets the type of the virtual hard disk, vhd or vhdx. </param>
        /// <param name="isOsDisk"> Gets or sets a value indicating whether disk is os disk. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="diskId"/> or <paramref name="diskFileFormat"/> is null. </exception>
        public VMwareToAzStackHCIDiskInput(string diskId, long diskSizeGB, string diskFileFormat, bool isOsDisk)
        {
            Argument.AssertNotNull(diskId, nameof(diskId));
            Argument.AssertNotNull(diskFileFormat, nameof(diskFileFormat));

            DiskId = diskId;
            DiskSizeGB = diskSizeGB;
            DiskFileFormat = diskFileFormat;
            IsOsDisk = isOsDisk;
        }

        /// <summary> Initializes a new instance of <see cref="VMwareToAzStackHCIDiskInput"/>. </summary>
        /// <param name="diskId"> Gets or sets the disk Id. </param>
        /// <param name="storageContainerId"> Gets or sets the target storage account ARM Id. </param>
        /// <param name="isDynamic"> Gets or sets a value indicating whether dynamic sizing is enabled on the virtual hard disk. </param>
        /// <param name="diskSizeGB"> Gets or sets the disk size in GB. </param>
        /// <param name="diskFileFormat"> Gets or sets the type of the virtual hard disk, vhd or vhdx. </param>
        /// <param name="isOsDisk"> Gets or sets a value indicating whether disk is os disk. </param>
        /// <param name="diskBlockSize"> Gets or sets a value of disk block size. </param>
        /// <param name="diskLogicalSectorSize"> Gets or sets a value of disk logical sector size. </param>
        /// <param name="diskPhysicalSectorSize"> Gets or sets a value of disk physical sector size. </param>
        /// <param name="diskIdentifier"> Gets or sets a value of disk identifier. </param>
        /// <param name="diskController"> Disk controller. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal VMwareToAzStackHCIDiskInput(string diskId, ResourceIdentifier storageContainerId, bool? isDynamic, long diskSizeGB, string diskFileFormat, bool isOsDisk, long? diskBlockSize, long? diskLogicalSectorSize, long? diskPhysicalSectorSize, string diskIdentifier, DataReplicationDiskControllerInputs diskController, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            DiskId = diskId;
            StorageContainerId = storageContainerId;
            IsDynamic = isDynamic;
            DiskSizeGB = diskSizeGB;
            DiskFileFormat = diskFileFormat;
            IsOsDisk = isOsDisk;
            DiskBlockSize = diskBlockSize;
            DiskLogicalSectorSize = diskLogicalSectorSize;
            DiskPhysicalSectorSize = diskPhysicalSectorSize;
            DiskIdentifier = diskIdentifier;
            DiskController = diskController;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> Gets or sets the disk Id. </summary>
        public string DiskId { get; set; }

        /// <summary> Gets or sets the target storage account ARM Id. </summary>
        public ResourceIdentifier StorageContainerId { get; set; }

        /// <summary> Gets or sets a value indicating whether dynamic sizing is enabled on the virtual hard disk. </summary>
        public bool? IsDynamic { get; set; }

        /// <summary> Gets or sets the disk size in GB. </summary>
        public long DiskSizeGB { get; set; }

        /// <summary> Gets or sets the type of the virtual hard disk, vhd or vhdx. </summary>
        public string DiskFileFormat { get; set; }

        /// <summary> Gets or sets a value indicating whether disk is os disk. </summary>
        public bool IsOsDisk { get; set; }

        /// <summary> Gets or sets a value of disk block size. </summary>
        public long? DiskBlockSize { get; set; }

        /// <summary> Gets or sets a value of disk logical sector size. </summary>
        public long? DiskLogicalSectorSize { get; set; }

        /// <summary> Gets or sets a value of disk physical sector size. </summary>
        public long? DiskPhysicalSectorSize { get; set; }

        /// <summary> Gets or sets a value of disk identifier. </summary>
        public string DiskIdentifier { get; set; }

        /// <summary> Disk controller. </summary>
        public DataReplicationDiskControllerInputs DiskController { get; set; }
    }
}
