// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.RecoveryServicesDataReplication.Models
{
    /// <summary> Gets or sets the task state. </summary>
    public readonly partial struct TaskState : IEquatable<TaskState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="TaskState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public TaskState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PendingValue = "Pending";
        private const string StartedValue = "Started";
        private const string SucceededValue = "Succeeded";
        private const string FailedValue = "Failed";
        private const string CancelledValue = "Cancelled";
        private const string SkippedValue = "Skipped";

        /// <summary> Pending. </summary>
        public static TaskState Pending { get; } = new TaskState(PendingValue);
        /// <summary> Started. </summary>
        public static TaskState Started { get; } = new TaskState(StartedValue);
        /// <summary> Succeeded. </summary>
        public static TaskState Succeeded { get; } = new TaskState(SucceededValue);
        /// <summary> Failed. </summary>
        public static TaskState Failed { get; } = new TaskState(FailedValue);
        /// <summary> Cancelled. </summary>
        public static TaskState Cancelled { get; } = new TaskState(CancelledValue);
        /// <summary> Skipped. </summary>
        public static TaskState Skipped { get; } = new TaskState(SkippedValue);
        /// <summary> Determines if two <see cref="TaskState"/> values are the same. </summary>
        public static bool operator ==(TaskState left, TaskState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="TaskState"/> values are not the same. </summary>
        public static bool operator !=(TaskState left, TaskState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="TaskState"/>. </summary>
        public static implicit operator TaskState(string value) => new TaskState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is TaskState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(TaskState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
