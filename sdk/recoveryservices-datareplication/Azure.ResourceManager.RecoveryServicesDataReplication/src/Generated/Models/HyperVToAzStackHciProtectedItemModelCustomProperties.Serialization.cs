// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.RecoveryServicesDataReplication.Models
{
    public partial class HyperVToAzStackHciProtectedItemModelCustomProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("targetHciClusterId"u8);
            writer.WriteStringValue(TargetHciClusterId);
            writer.WritePropertyName("targetArcClusterCustomLocationId"u8);
            writer.WriteStringValue(TargetArcClusterCustomLocationId);
            writer.WritePropertyName("fabricDiscoveryMachineId"u8);
            writer.WriteStringValue(FabricDiscoveryMachineId);
            writer.WritePropertyName("disksToInclude"u8);
            writer.WriteStartArray();
            foreach (var item in DisksToInclude)
            {
                writer.WriteObjectValue(item);
            }
            writer.WriteEndArray();
            writer.WritePropertyName("nicsToInclude"u8);
            writer.WriteStartArray();
            foreach (var item in NicsToInclude)
            {
                writer.WriteObjectValue(item);
            }
            writer.WriteEndArray();
            if (Optional.IsDefined(TargetVmName))
            {
                writer.WritePropertyName("targetVmName"u8);
                writer.WriteStringValue(TargetVmName);
            }
            writer.WritePropertyName("targetResourceGroupId"u8);
            writer.WriteStringValue(TargetResourceGroupId);
            writer.WritePropertyName("storageContainerId"u8);
            writer.WriteStringValue(StorageContainerId);
            writer.WritePropertyName("hyperVGeneration"u8);
            writer.WriteStringValue(HyperVGeneration);
            if (Optional.IsDefined(TargetNetworkId))
            {
                writer.WritePropertyName("targetNetworkId"u8);
                writer.WriteStringValue(TargetNetworkId);
            }
            if (Optional.IsDefined(TestNetworkId))
            {
                writer.WritePropertyName("testNetworkId"u8);
                writer.WriteStringValue(TestNetworkId);
            }
            if (Optional.IsDefined(TargetCpuCores))
            {
                writer.WritePropertyName("targetCpuCores"u8);
                writer.WriteNumberValue(TargetCpuCores.Value);
            }
            if (Optional.IsDefined(IsDynamicRam))
            {
                writer.WritePropertyName("isDynamicRam"u8);
                writer.WriteBooleanValue(IsDynamicRam.Value);
            }
            if (Optional.IsDefined(DynamicMemoryConfig))
            {
                writer.WritePropertyName("dynamicMemoryConfig"u8);
                writer.WriteObjectValue(DynamicMemoryConfig);
            }
            if (Optional.IsDefined(TargetMemoryInMegaBytes))
            {
                writer.WritePropertyName("targetMemoryInMegaBytes"u8);
                writer.WriteNumberValue(TargetMemoryInMegaBytes.Value);
            }
            writer.WritePropertyName("runAsAccountId"u8);
            writer.WriteStringValue(RunAsAccountId);
            writer.WritePropertyName("sourceDraName"u8);
            writer.WriteStringValue(SourceDraName);
            writer.WritePropertyName("targetDraName"u8);
            writer.WriteStringValue(TargetDraName);
            writer.WritePropertyName("customLocationRegion"u8);
            writer.WriteStringValue(CustomLocationRegion);
            writer.WritePropertyName("instanceType"u8);
            writer.WriteStringValue(InstanceType);
            writer.WriteEndObject();
        }

        internal static HyperVToAzStackHciProtectedItemModelCustomProperties DeserializeHyperVToAzStackHciProtectedItemModelCustomProperties(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<ProtectedItemActiveLocation> activeLocation = default;
            ResourceIdentifier targetHciClusterId = default;
            ResourceIdentifier targetArcClusterCustomLocationId = default;
            Optional<string> targetAzStackHciClusterName = default;
            ResourceIdentifier fabricDiscoveryMachineId = default;
            IList<HyperVToAzStackHciDiskInput> disksToInclude = default;
            IList<HyperVToAzStackHciNicInput> nicsToInclude = default;
            Optional<string> sourceVmName = default;
            Optional<int> sourceCpuCores = default;
            Optional<double> sourceMemoryInMegaBytes = default;
            Optional<string> targetVmName = default;
            ResourceIdentifier targetResourceGroupId = default;
            ResourceIdentifier storageContainerId = default;
            string hyperVGeneration = default;
            Optional<string> targetNetworkId = default;
            Optional<string> testNetworkId = default;
            Optional<int> targetCpuCores = default;
            Optional<bool> isDynamicRam = default;
            Optional<ProtectedItemDynamicMemoryConfig> dynamicMemoryConfig = default;
            Optional<int> targetMemoryInMegaBytes = default;
            string runAsAccountId = default;
            string sourceDraName = default;
            string targetDraName = default;
            Optional<string> sourceApplianceName = default;
            Optional<string> targetApplianceName = default;
            Optional<string> osType = default;
            Optional<string> osName = default;
            Optional<string> firmwareType = default;
            Optional<string> targetLocation = default;
            string customLocationRegion = default;
            Optional<string> failoverRecoveryPointId = default;
            Optional<DateTimeOffset> lastRecoveryPointReceived = default;
            Optional<string> lastRecoveryPointId = default;
            Optional<int> initialReplicationProgressPercentage = default;
            Optional<int> resyncProgressPercentage = default;
            Optional<IReadOnlyList<HyperVToAzStackHciProtectedDiskProperties>> protectedDisks = default;
            Optional<IReadOnlyList<HyperVToAzStackHciProtectedNicProperties>> protectedNics = default;
            Optional<string> targetVmBiosId = default;
            Optional<DateTimeOffset> lastReplicationUpdateTime = default;
            string instanceType = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("activeLocation"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    activeLocation = new ProtectedItemActiveLocation(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("targetHciClusterId"u8))
                {
                    targetHciClusterId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("targetArcClusterCustomLocationId"u8))
                {
                    targetArcClusterCustomLocationId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("targetAzStackHciClusterName"u8))
                {
                    targetAzStackHciClusterName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("fabricDiscoveryMachineId"u8))
                {
                    fabricDiscoveryMachineId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("disksToInclude"u8))
                {
                    List<HyperVToAzStackHciDiskInput> array = new List<HyperVToAzStackHciDiskInput>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(HyperVToAzStackHciDiskInput.DeserializeHyperVToAzStackHciDiskInput(item));
                    }
                    disksToInclude = array;
                    continue;
                }
                if (property.NameEquals("nicsToInclude"u8))
                {
                    List<HyperVToAzStackHciNicInput> array = new List<HyperVToAzStackHciNicInput>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(HyperVToAzStackHciNicInput.DeserializeHyperVToAzStackHciNicInput(item));
                    }
                    nicsToInclude = array;
                    continue;
                }
                if (property.NameEquals("sourceVmName"u8))
                {
                    sourceVmName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sourceCpuCores"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sourceCpuCores = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("sourceMemoryInMegaBytes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sourceMemoryInMegaBytes = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("targetVmName"u8))
                {
                    targetVmName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("targetResourceGroupId"u8))
                {
                    targetResourceGroupId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("storageContainerId"u8))
                {
                    storageContainerId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("hyperVGeneration"u8))
                {
                    hyperVGeneration = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("targetNetworkId"u8))
                {
                    targetNetworkId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("testNetworkId"u8))
                {
                    testNetworkId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("targetCpuCores"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    targetCpuCores = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("isDynamicRam"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isDynamicRam = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("dynamicMemoryConfig"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    dynamicMemoryConfig = ProtectedItemDynamicMemoryConfig.DeserializeProtectedItemDynamicMemoryConfig(property.Value);
                    continue;
                }
                if (property.NameEquals("targetMemoryInMegaBytes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    targetMemoryInMegaBytes = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("runAsAccountId"u8))
                {
                    runAsAccountId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sourceDraName"u8))
                {
                    sourceDraName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("targetDraName"u8))
                {
                    targetDraName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sourceApplianceName"u8))
                {
                    sourceApplianceName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("targetApplianceName"u8))
                {
                    targetApplianceName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("osType"u8))
                {
                    osType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("osName"u8))
                {
                    osName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("firmwareType"u8))
                {
                    firmwareType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("targetLocation"u8))
                {
                    targetLocation = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("customLocationRegion"u8))
                {
                    customLocationRegion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("failoverRecoveryPointId"u8))
                {
                    failoverRecoveryPointId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("lastRecoveryPointReceived"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastRecoveryPointReceived = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("lastRecoveryPointId"u8))
                {
                    lastRecoveryPointId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("initialReplicationProgressPercentage"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    initialReplicationProgressPercentage = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("resyncProgressPercentage"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    resyncProgressPercentage = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("protectedDisks"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<HyperVToAzStackHciProtectedDiskProperties> array = new List<HyperVToAzStackHciProtectedDiskProperties>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(HyperVToAzStackHciProtectedDiskProperties.DeserializeHyperVToAzStackHciProtectedDiskProperties(item));
                    }
                    protectedDisks = array;
                    continue;
                }
                if (property.NameEquals("protectedNics"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<HyperVToAzStackHciProtectedNicProperties> array = new List<HyperVToAzStackHciProtectedNicProperties>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(HyperVToAzStackHciProtectedNicProperties.DeserializeHyperVToAzStackHciProtectedNicProperties(item));
                    }
                    protectedNics = array;
                    continue;
                }
                if (property.NameEquals("targetVmBiosId"u8))
                {
                    targetVmBiosId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("lastReplicationUpdateTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastReplicationUpdateTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("instanceType"u8))
                {
                    instanceType = property.Value.GetString();
                    continue;
                }
            }
            return new HyperVToAzStackHciProtectedItemModelCustomProperties(instanceType, Optional.ToNullable(activeLocation), targetHciClusterId, targetArcClusterCustomLocationId, targetAzStackHciClusterName.Value, fabricDiscoveryMachineId, disksToInclude, nicsToInclude, sourceVmName.Value, Optional.ToNullable(sourceCpuCores), Optional.ToNullable(sourceMemoryInMegaBytes), targetVmName.Value, targetResourceGroupId, storageContainerId, hyperVGeneration, targetNetworkId.Value, testNetworkId.Value, Optional.ToNullable(targetCpuCores), Optional.ToNullable(isDynamicRam), dynamicMemoryConfig.Value, Optional.ToNullable(targetMemoryInMegaBytes), runAsAccountId, sourceDraName, targetDraName, sourceApplianceName.Value, targetApplianceName.Value, osType.Value, osName.Value, firmwareType.Value, targetLocation.Value, customLocationRegion, failoverRecoveryPointId.Value, Optional.ToNullable(lastRecoveryPointReceived), lastRecoveryPointId.Value, Optional.ToNullable(initialReplicationProgressPercentage), Optional.ToNullable(resyncProgressPercentage), Optional.ToList(protectedDisks), Optional.ToList(protectedNics), targetVmBiosId.Value, Optional.ToNullable(lastReplicationUpdateTime));
        }
    }
}
