// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.RecoveryServicesDataReplication;

namespace Azure.ResourceManager.RecoveryServicesDataReplication.Models
{
    /// <summary> VMware to AzStackHCI Replication extension model custom properties. </summary>
    public partial class VMwareToAzStackHCIReplicationExtensionCustomProperties : IJsonModel<VMwareToAzStackHCIReplicationExtensionCustomProperties>
    {
        /// <summary> Initializes a new instance of <see cref="VMwareToAzStackHCIReplicationExtensionCustomProperties"/> for deserialization. </summary>
        internal VMwareToAzStackHCIReplicationExtensionCustomProperties()
        {
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<VMwareToAzStackHCIReplicationExtensionCustomProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<VMwareToAzStackHCIReplicationExtensionCustomProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(VMwareToAzStackHCIReplicationExtensionCustomProperties)} does not support writing '{format}' format.");
            }
            base.JsonModelWriteCore(writer, options);
            writer.WritePropertyName("vmwareFabricArmId"u8);
            writer.WriteStringValue(VmwareFabricArmId);
            if (options.Format != "W" && Optional.IsDefined(VmwareSiteId))
            {
                writer.WritePropertyName("vmwareSiteId"u8);
                writer.WriteStringValue(VmwareSiteId);
            }
            writer.WritePropertyName("azStackHciFabricArmId"u8);
            writer.WriteStringValue(AzStackHciFabricArmId);
            if (options.Format != "W" && Optional.IsDefined(AzStackHciSiteId))
            {
                writer.WritePropertyName("azStackHciSiteId"u8);
                writer.WriteStringValue(AzStackHciSiteId);
            }
            if (Optional.IsDefined(StorageAccountId))
            {
                writer.WritePropertyName("storageAccountId"u8);
                writer.WriteStringValue(StorageAccountId);
            }
            if (Optional.IsDefined(StorageAccountSasSecretName))
            {
                writer.WritePropertyName("storageAccountSasSecretName"u8);
                writer.WriteStringValue(StorageAccountSasSecretName);
            }
            if (options.Format != "W" && Optional.IsDefined(AsrServiceUri))
            {
                writer.WritePropertyName("asrServiceUri"u8);
                writer.WriteStringValue(AsrServiceUri.AbsoluteUri);
            }
            if (options.Format != "W" && Optional.IsDefined(RcmServiceUri))
            {
                writer.WritePropertyName("rcmServiceUri"u8);
                writer.WriteStringValue(RcmServiceUri.AbsoluteUri);
            }
            if (options.Format != "W" && Optional.IsDefined(GatewayServiceUri))
            {
                writer.WritePropertyName("gatewayServiceUri"u8);
                writer.WriteStringValue(GatewayServiceUri.AbsoluteUri);
            }
            if (options.Format != "W" && Optional.IsDefined(SourceGatewayServiceId))
            {
                writer.WritePropertyName("sourceGatewayServiceId"u8);
                writer.WriteStringValue(SourceGatewayServiceId);
            }
            if (options.Format != "W" && Optional.IsDefined(TargetGatewayServiceId))
            {
                writer.WritePropertyName("targetGatewayServiceId"u8);
                writer.WriteStringValue(TargetGatewayServiceId);
            }
            if (options.Format != "W" && Optional.IsDefined(SourceStorageContainerName))
            {
                writer.WritePropertyName("sourceStorageContainerName"u8);
                writer.WriteStringValue(SourceStorageContainerName);
            }
            if (options.Format != "W" && Optional.IsDefined(TargetStorageContainerName))
            {
                writer.WritePropertyName("targetStorageContainerName"u8);
                writer.WriteStringValue(TargetStorageContainerName);
            }
            if (options.Format != "W" && Optional.IsDefined(ResourceLocation))
            {
                writer.WritePropertyName("resourceLocation"u8);
                writer.WriteStringValue(ResourceLocation);
            }
            if (options.Format != "W" && Optional.IsDefined(SubscriptionId))
            {
                writer.WritePropertyName("subscriptionId"u8);
                writer.WriteStringValue(SubscriptionId);
            }
            if (options.Format != "W" && Optional.IsDefined(ResourceGroup))
            {
                writer.WritePropertyName("resourceGroup"u8);
                writer.WriteStringValue(ResourceGroup);
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        VMwareToAzStackHCIReplicationExtensionCustomProperties IJsonModel<VMwareToAzStackHCIReplicationExtensionCustomProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => (VMwareToAzStackHCIReplicationExtensionCustomProperties)JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override DataReplicationExtensionCustomProperties JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<VMwareToAzStackHCIReplicationExtensionCustomProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(VMwareToAzStackHCIReplicationExtensionCustomProperties)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeVMwareToAzStackHCIReplicationExtensionCustomProperties(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static VMwareToAzStackHCIReplicationExtensionCustomProperties DeserializeVMwareToAzStackHCIReplicationExtensionCustomProperties(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string instanceType = "VMwareToAzStackHCI";
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            ResourceIdentifier vmwareFabricArmId = default;
            ResourceIdentifier vmwareSiteId = default;
            ResourceIdentifier azStackHciFabricArmId = default;
            ResourceIdentifier azStackHciSiteId = default;
            string storageAccountId = default;
            string storageAccountSasSecretName = default;
            Uri asrServiceUri = default;
            Uri rcmServiceUri = default;
            Uri gatewayServiceUri = default;
            string sourceGatewayServiceId = default;
            string targetGatewayServiceId = default;
            string sourceStorageContainerName = default;
            string targetStorageContainerName = default;
            string resourceLocation = default;
            string subscriptionId = default;
            string resourceGroup = default;
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("instanceType"u8))
                {
                    instanceType = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("vmwareFabricArmId"u8))
                {
                    vmwareFabricArmId = new ResourceIdentifier(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("vmwareSiteId"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    vmwareSiteId = new ResourceIdentifier(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("azStackHciFabricArmId"u8))
                {
                    azStackHciFabricArmId = new ResourceIdentifier(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("azStackHciSiteId"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    azStackHciSiteId = new ResourceIdentifier(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("storageAccountId"u8))
                {
                    storageAccountId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("storageAccountSasSecretName"u8))
                {
                    storageAccountSasSecretName = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("asrServiceUri"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    asrServiceUri = new Uri(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("rcmServiceUri"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    rcmServiceUri = new Uri(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("gatewayServiceUri"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    gatewayServiceUri = new Uri(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("sourceGatewayServiceId"u8))
                {
                    sourceGatewayServiceId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("targetGatewayServiceId"u8))
                {
                    targetGatewayServiceId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("sourceStorageContainerName"u8))
                {
                    sourceStorageContainerName = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("targetStorageContainerName"u8))
                {
                    targetStorageContainerName = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("resourceLocation"u8))
                {
                    resourceLocation = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("subscriptionId"u8))
                {
                    subscriptionId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("resourceGroup"u8))
                {
                    resourceGroup = prop.Value.GetString();
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new VMwareToAzStackHCIReplicationExtensionCustomProperties(
                instanceType,
                additionalBinaryDataProperties,
                vmwareFabricArmId,
                vmwareSiteId,
                azStackHciFabricArmId,
                azStackHciSiteId,
                storageAccountId,
                storageAccountSasSecretName,
                asrServiceUri,
                rcmServiceUri,
                gatewayServiceUri,
                sourceGatewayServiceId,
                targetGatewayServiceId,
                sourceStorageContainerName,
                targetStorageContainerName,
                resourceLocation,
                subscriptionId,
                resourceGroup);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<VMwareToAzStackHCIReplicationExtensionCustomProperties>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected override BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<VMwareToAzStackHCIReplicationExtensionCustomProperties>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerRecoveryServicesDataReplicationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(VMwareToAzStackHCIReplicationExtensionCustomProperties)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        VMwareToAzStackHCIReplicationExtensionCustomProperties IPersistableModel<VMwareToAzStackHCIReplicationExtensionCustomProperties>.Create(BinaryData data, ModelReaderWriterOptions options) => (VMwareToAzStackHCIReplicationExtensionCustomProperties)PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override DataReplicationExtensionCustomProperties PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<VMwareToAzStackHCIReplicationExtensionCustomProperties>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeVMwareToAzStackHCIReplicationExtensionCustomProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(VMwareToAzStackHCIReplicationExtensionCustomProperties)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<VMwareToAzStackHCIReplicationExtensionCustomProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
