// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.RecoveryServicesDataReplication;

namespace Azure.ResourceManager.RecoveryServicesDataReplication.Models
{
    /// <summary> VMware to AzStackHCI Protected item model custom properties. </summary>
    public partial class VMwareToAzStackHCIProtectedItemCustomProperties : IJsonModel<VMwareToAzStackHCIProtectedItemCustomProperties>
    {
        /// <summary> Initializes a new instance of <see cref="VMwareToAzStackHCIProtectedItemCustomProperties"/> for deserialization. </summary>
        internal VMwareToAzStackHCIProtectedItemCustomProperties()
        {
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<VMwareToAzStackHCIProtectedItemCustomProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<VMwareToAzStackHCIProtectedItemCustomProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(VMwareToAzStackHCIProtectedItemCustomProperties)} does not support writing '{format}' format.");
            }
            base.JsonModelWriteCore(writer, options);
            if (options.Format != "W" && Optional.IsDefined(ActiveLocation))
            {
                writer.WritePropertyName("activeLocation"u8);
                writer.WriteStringValue(ActiveLocation.Value.ToString());
            }
            writer.WritePropertyName("targetHciClusterId"u8);
            writer.WriteStringValue(TargetHciClusterId);
            writer.WritePropertyName("targetArcClusterCustomLocationId"u8);
            writer.WriteStringValue(TargetArcClusterCustomLocationId);
            if (options.Format != "W" && Optional.IsDefined(TargetAzStackHciClusterName))
            {
                writer.WritePropertyName("targetAzStackHciClusterName"u8);
                writer.WriteStringValue(TargetAzStackHciClusterName);
            }
            writer.WritePropertyName("storageContainerId"u8);
            writer.WriteStringValue(StorageContainerId);
            writer.WritePropertyName("targetResourceGroupId"u8);
            writer.WriteStringValue(TargetResourceGroupId);
            if (options.Format != "W" && Optional.IsDefined(TargetLocation))
            {
                writer.WritePropertyName("targetLocation"u8);
                writer.WriteStringValue(TargetLocation);
            }
            writer.WritePropertyName("customLocationRegion"u8);
            writer.WriteStringValue(CustomLocationRegion);
            writer.WritePropertyName("disksToInclude"u8);
            writer.WriteStartArray();
            foreach (VMwareToAzStackHCIDiskInput item in DisksToInclude)
            {
                writer.WriteObjectValue(item, options);
            }
            writer.WriteEndArray();
            writer.WritePropertyName("nicsToInclude"u8);
            writer.WriteStartArray();
            foreach (VMwareToAzStackHCINicInput item in NicsToInclude)
            {
                writer.WriteObjectValue(item, options);
            }
            writer.WriteEndArray();
            if (options.Format != "W" && Optional.IsCollectionDefined(ProtectedDisks))
            {
                writer.WritePropertyName("protectedDisks"u8);
                writer.WriteStartArray();
                foreach (VMwareToAzStackHCIProtectedDiskProperties item in ProtectedDisks)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(ProtectedNics))
            {
                writer.WritePropertyName("protectedNics"u8);
                writer.WriteStartArray();
                foreach (VMwareToAzStackHCIProtectedNicProperties item in ProtectedNics)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsDefined(TargetVmBiosId))
            {
                writer.WritePropertyName("targetVmBiosId"u8);
                writer.WriteStringValue(TargetVmBiosId);
            }
            if (Optional.IsDefined(TargetVmName))
            {
                writer.WritePropertyName("targetVmName"u8);
                writer.WriteStringValue(TargetVmName);
            }
            writer.WritePropertyName("hyperVGeneration"u8);
            writer.WriteStringValue(HyperVGeneration);
            if (Optional.IsDefined(TargetNetworkId))
            {
                writer.WritePropertyName("targetNetworkId"u8);
                writer.WriteStringValue(TargetNetworkId);
            }
            if (Optional.IsDefined(TestNetworkId))
            {
                writer.WritePropertyName("testNetworkId"u8);
                writer.WriteStringValue(TestNetworkId);
            }
            if (Optional.IsDefined(TargetCpuCores))
            {
                writer.WritePropertyName("targetCpuCores"u8);
                writer.WriteNumberValue(TargetCpuCores.Value);
            }
            if (Optional.IsDefined(IsDynamicRam))
            {
                writer.WritePropertyName("isDynamicRam"u8);
                writer.WriteBooleanValue(IsDynamicRam.Value);
            }
            if (Optional.IsDefined(DynamicMemoryConfig))
            {
                writer.WritePropertyName("dynamicMemoryConfig"u8);
                writer.WriteObjectValue(DynamicMemoryConfig, options);
            }
            if (Optional.IsDefined(TargetMemoryInMegaBytes))
            {
                writer.WritePropertyName("targetMemoryInMegaBytes"u8);
                writer.WriteNumberValue(TargetMemoryInMegaBytes.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(OsType))
            {
                writer.WritePropertyName("osType"u8);
                writer.WriteStringValue(OsType);
            }
            if (options.Format != "W" && Optional.IsDefined(OsName))
            {
                writer.WritePropertyName("osName"u8);
                writer.WriteStringValue(OsName);
            }
            if (options.Format != "W" && Optional.IsDefined(FirmwareType))
            {
                writer.WritePropertyName("firmwareType"u8);
                writer.WriteStringValue(FirmwareType);
            }
            writer.WritePropertyName("fabricDiscoveryMachineId"u8);
            writer.WriteStringValue(FabricDiscoveryMachineId);
            if (options.Format != "W" && Optional.IsDefined(SourceVmName))
            {
                writer.WritePropertyName("sourceVmName"u8);
                writer.WriteStringValue(SourceVmName);
            }
            if (options.Format != "W" && Optional.IsDefined(SourceCpuCores))
            {
                writer.WritePropertyName("sourceCpuCores"u8);
                writer.WriteNumberValue(SourceCpuCores.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(SourceMemoryInMegaBytes))
            {
                writer.WritePropertyName("sourceMemoryInMegaBytes"u8);
                writer.WriteNumberValue(SourceMemoryInMegaBytes.Value);
            }
            writer.WritePropertyName("runAsAccountId"u8);
            writer.WriteStringValue(RunAsAccountId);
            writer.WritePropertyName("sourceFabricAgentName"u8);
            writer.WriteStringValue(SourceFabricAgentName);
            writer.WritePropertyName("targetFabricAgentName"u8);
            writer.WriteStringValue(TargetFabricAgentName);
            if (options.Format != "W" && Optional.IsDefined(SourceApplianceName))
            {
                writer.WritePropertyName("sourceApplianceName"u8);
                writer.WriteStringValue(SourceApplianceName);
            }
            if (options.Format != "W" && Optional.IsDefined(TargetApplianceName))
            {
                writer.WritePropertyName("targetApplianceName"u8);
                writer.WriteStringValue(TargetApplianceName);
            }
            if (options.Format != "W" && Optional.IsDefined(FailoverRecoveryPointId))
            {
                writer.WritePropertyName("failoverRecoveryPointId"u8);
                writer.WriteStringValue(FailoverRecoveryPointId);
            }
            if (options.Format != "W" && Optional.IsDefined(LastRecoveryPointReceivedOn))
            {
                writer.WritePropertyName("lastRecoveryPointReceived"u8);
                writer.WriteStringValue(LastRecoveryPointReceivedOn.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(LastRecoveryPointId))
            {
                writer.WritePropertyName("lastRecoveryPointId"u8);
                writer.WriteStringValue(LastRecoveryPointId);
            }
            if (options.Format != "W" && Optional.IsDefined(InitialReplicationProgressPercentage))
            {
                writer.WritePropertyName("initialReplicationProgressPercentage"u8);
                writer.WriteNumberValue(InitialReplicationProgressPercentage.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(MigrationProgressPercentage))
            {
                writer.WritePropertyName("migrationProgressPercentage"u8);
                writer.WriteNumberValue(MigrationProgressPercentage.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(ResumeProgressPercentage))
            {
                writer.WritePropertyName("resumeProgressPercentage"u8);
                writer.WriteNumberValue(ResumeProgressPercentage.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(ResyncProgressPercentage))
            {
                writer.WritePropertyName("resyncProgressPercentage"u8);
                writer.WriteNumberValue(ResyncProgressPercentage.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(ResyncRetryCount))
            {
                writer.WritePropertyName("resyncRetryCount"u8);
                writer.WriteNumberValue(ResyncRetryCount.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(ResyncRequired))
            {
                writer.WritePropertyName("resyncRequired"u8);
                writer.WriteBooleanValue(ResyncRequired.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(ResyncState))
            {
                writer.WritePropertyName("resyncState"u8);
                writer.WriteStringValue(ResyncState.Value.ToString());
            }
            if (Optional.IsDefined(PerformAutoResync))
            {
                writer.WritePropertyName("performAutoResync"u8);
                writer.WriteBooleanValue(PerformAutoResync.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(ResumeRetryCount))
            {
                writer.WritePropertyName("resumeRetryCount"u8);
                writer.WriteNumberValue(ResumeRetryCount.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(LastReplicationUpdateTime))
            {
                writer.WritePropertyName("lastReplicationUpdateTime"u8);
                writer.WriteStringValue(LastReplicationUpdateTime.Value, "O");
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        VMwareToAzStackHCIProtectedItemCustomProperties IJsonModel<VMwareToAzStackHCIProtectedItemCustomProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => (VMwareToAzStackHCIProtectedItemCustomProperties)JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override DataReplicationProtectedItemCustomProperties JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<VMwareToAzStackHCIProtectedItemCustomProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(VMwareToAzStackHCIProtectedItemCustomProperties)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeVMwareToAzStackHCIProtectedItemCustomProperties(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static VMwareToAzStackHCIProtectedItemCustomProperties DeserializeVMwareToAzStackHCIProtectedItemCustomProperties(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string instanceType = "VMwareToAzStackHCI";
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            ProtectedItemActiveLocation? activeLocation = default;
            ResourceIdentifier targetHciClusterId = default;
            ResourceIdentifier targetArcClusterCustomLocationId = default;
            string targetAzStackHciClusterName = default;
            ResourceIdentifier storageContainerId = default;
            ResourceIdentifier targetResourceGroupId = default;
            string targetLocation = default;
            string customLocationRegion = default;
            IList<VMwareToAzStackHCIDiskInput> disksToInclude = default;
            IList<VMwareToAzStackHCINicInput> nicsToInclude = default;
            IReadOnlyList<VMwareToAzStackHCIProtectedDiskProperties> protectedDisks = default;
            IReadOnlyList<VMwareToAzStackHCIProtectedNicProperties> protectedNics = default;
            string targetVmBiosId = default;
            string targetVmName = default;
            string hyperVGeneration = default;
            string targetNetworkId = default;
            string testNetworkId = default;
            int? targetCpuCores = default;
            bool? isDynamicRam = default;
            ProtectedItemDynamicMemoryConfig dynamicMemoryConfig = default;
            int? targetMemoryInMegaBytes = default;
            string osType = default;
            string osName = default;
            string firmwareType = default;
            ResourceIdentifier fabricDiscoveryMachineId = default;
            string sourceVmName = default;
            int? sourceCpuCores = default;
            double? sourceMemoryInMegaBytes = default;
            string runAsAccountId = default;
            string sourceFabricAgentName = default;
            string targetFabricAgentName = default;
            string sourceApplianceName = default;
            string targetApplianceName = default;
            string failoverRecoveryPointId = default;
            DateTimeOffset? lastRecoveryPointReceivedOn = default;
            string lastRecoveryPointId = default;
            int? initialReplicationProgressPercentage = default;
            int? migrationProgressPercentage = default;
            int? resumeProgressPercentage = default;
            int? resyncProgressPercentage = default;
            long? resyncRetryCount = default;
            bool? resyncRequired = default;
            VMwareToAzureMigrateResyncState? resyncState = default;
            bool? performAutoResync = default;
            long? resumeRetryCount = default;
            DateTimeOffset? lastReplicationUpdateTime = default;
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("instanceType"u8))
                {
                    instanceType = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("activeLocation"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    activeLocation = new ProtectedItemActiveLocation(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("targetHciClusterId"u8))
                {
                    targetHciClusterId = new ResourceIdentifier(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("targetArcClusterCustomLocationId"u8))
                {
                    targetArcClusterCustomLocationId = new ResourceIdentifier(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("targetAzStackHciClusterName"u8))
                {
                    targetAzStackHciClusterName = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("storageContainerId"u8))
                {
                    storageContainerId = new ResourceIdentifier(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("targetResourceGroupId"u8))
                {
                    targetResourceGroupId = new ResourceIdentifier(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("targetLocation"u8))
                {
                    targetLocation = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("customLocationRegion"u8))
                {
                    customLocationRegion = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("disksToInclude"u8))
                {
                    List<VMwareToAzStackHCIDiskInput> array = new List<VMwareToAzStackHCIDiskInput>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(VMwareToAzStackHCIDiskInput.DeserializeVMwareToAzStackHCIDiskInput(item, options));
                    }
                    disksToInclude = array;
                    continue;
                }
                if (prop.NameEquals("nicsToInclude"u8))
                {
                    List<VMwareToAzStackHCINicInput> array = new List<VMwareToAzStackHCINicInput>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(VMwareToAzStackHCINicInput.DeserializeVMwareToAzStackHCINicInput(item, options));
                    }
                    nicsToInclude = array;
                    continue;
                }
                if (prop.NameEquals("protectedDisks"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<VMwareToAzStackHCIProtectedDiskProperties> array = new List<VMwareToAzStackHCIProtectedDiskProperties>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(VMwareToAzStackHCIProtectedDiskProperties.DeserializeVMwareToAzStackHCIProtectedDiskProperties(item, options));
                    }
                    protectedDisks = array;
                    continue;
                }
                if (prop.NameEquals("protectedNics"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<VMwareToAzStackHCIProtectedNicProperties> array = new List<VMwareToAzStackHCIProtectedNicProperties>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(VMwareToAzStackHCIProtectedNicProperties.DeserializeVMwareToAzStackHCIProtectedNicProperties(item, options));
                    }
                    protectedNics = array;
                    continue;
                }
                if (prop.NameEquals("targetVmBiosId"u8))
                {
                    targetVmBiosId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("targetVmName"u8))
                {
                    targetVmName = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("hyperVGeneration"u8))
                {
                    hyperVGeneration = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("targetNetworkId"u8))
                {
                    targetNetworkId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("testNetworkId"u8))
                {
                    testNetworkId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("targetCpuCores"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    targetCpuCores = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("isDynamicRam"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isDynamicRam = prop.Value.GetBoolean();
                    continue;
                }
                if (prop.NameEquals("dynamicMemoryConfig"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    dynamicMemoryConfig = ProtectedItemDynamicMemoryConfig.DeserializeProtectedItemDynamicMemoryConfig(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("targetMemoryInMegaBytes"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    targetMemoryInMegaBytes = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("osType"u8))
                {
                    osType = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("osName"u8))
                {
                    osName = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("firmwareType"u8))
                {
                    firmwareType = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("fabricDiscoveryMachineId"u8))
                {
                    fabricDiscoveryMachineId = new ResourceIdentifier(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("sourceVmName"u8))
                {
                    sourceVmName = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("sourceCpuCores"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sourceCpuCores = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("sourceMemoryInMegaBytes"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sourceMemoryInMegaBytes = prop.Value.GetDouble();
                    continue;
                }
                if (prop.NameEquals("runAsAccountId"u8))
                {
                    runAsAccountId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("sourceFabricAgentName"u8))
                {
                    sourceFabricAgentName = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("targetFabricAgentName"u8))
                {
                    targetFabricAgentName = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("sourceApplianceName"u8))
                {
                    sourceApplianceName = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("targetApplianceName"u8))
                {
                    targetApplianceName = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("failoverRecoveryPointId"u8))
                {
                    failoverRecoveryPointId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("lastRecoveryPointReceived"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastRecoveryPointReceivedOn = prop.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (prop.NameEquals("lastRecoveryPointId"u8))
                {
                    lastRecoveryPointId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("initialReplicationProgressPercentage"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    initialReplicationProgressPercentage = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("migrationProgressPercentage"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    migrationProgressPercentage = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("resumeProgressPercentage"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    resumeProgressPercentage = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("resyncProgressPercentage"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    resyncProgressPercentage = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("resyncRetryCount"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    resyncRetryCount = prop.Value.GetInt64();
                    continue;
                }
                if (prop.NameEquals("resyncRequired"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    resyncRequired = prop.Value.GetBoolean();
                    continue;
                }
                if (prop.NameEquals("resyncState"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    resyncState = new VMwareToAzureMigrateResyncState(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("performAutoResync"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    performAutoResync = prop.Value.GetBoolean();
                    continue;
                }
                if (prop.NameEquals("resumeRetryCount"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    resumeRetryCount = prop.Value.GetInt64();
                    continue;
                }
                if (prop.NameEquals("lastReplicationUpdateTime"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastReplicationUpdateTime = prop.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new VMwareToAzStackHCIProtectedItemCustomProperties(
                instanceType,
                additionalBinaryDataProperties,
                activeLocation,
                targetHciClusterId,
                targetArcClusterCustomLocationId,
                targetAzStackHciClusterName,
                storageContainerId,
                targetResourceGroupId,
                targetLocation,
                customLocationRegion,
                disksToInclude,
                nicsToInclude,
                protectedDisks ?? new ChangeTrackingList<VMwareToAzStackHCIProtectedDiskProperties>(),
                protectedNics ?? new ChangeTrackingList<VMwareToAzStackHCIProtectedNicProperties>(),
                targetVmBiosId,
                targetVmName,
                hyperVGeneration,
                targetNetworkId,
                testNetworkId,
                targetCpuCores,
                isDynamicRam,
                dynamicMemoryConfig,
                targetMemoryInMegaBytes,
                osType,
                osName,
                firmwareType,
                fabricDiscoveryMachineId,
                sourceVmName,
                sourceCpuCores,
                sourceMemoryInMegaBytes,
                runAsAccountId,
                sourceFabricAgentName,
                targetFabricAgentName,
                sourceApplianceName,
                targetApplianceName,
                failoverRecoveryPointId,
                lastRecoveryPointReceivedOn,
                lastRecoveryPointId,
                initialReplicationProgressPercentage,
                migrationProgressPercentage,
                resumeProgressPercentage,
                resyncProgressPercentage,
                resyncRetryCount,
                resyncRequired,
                resyncState,
                performAutoResync,
                resumeRetryCount,
                lastReplicationUpdateTime);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<VMwareToAzStackHCIProtectedItemCustomProperties>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected override BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<VMwareToAzStackHCIProtectedItemCustomProperties>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerRecoveryServicesDataReplicationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(VMwareToAzStackHCIProtectedItemCustomProperties)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        VMwareToAzStackHCIProtectedItemCustomProperties IPersistableModel<VMwareToAzStackHCIProtectedItemCustomProperties>.Create(BinaryData data, ModelReaderWriterOptions options) => (VMwareToAzStackHCIProtectedItemCustomProperties)PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override DataReplicationProtectedItemCustomProperties PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<VMwareToAzStackHCIProtectedItemCustomProperties>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeVMwareToAzStackHCIProtectedItemCustomProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(VMwareToAzStackHCIProtectedItemCustomProperties)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<VMwareToAzStackHCIProtectedItemCustomProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
