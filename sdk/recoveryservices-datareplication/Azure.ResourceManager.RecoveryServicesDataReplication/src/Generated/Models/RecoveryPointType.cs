// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.RecoveryServicesDataReplication.Models
{
    /// <summary> Gets or sets the recovery point type. </summary>
    public readonly partial struct RecoveryPointType : IEquatable<RecoveryPointType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="RecoveryPointType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public RecoveryPointType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ApplicationConsistentValue = "ApplicationConsistent";
        private const string CrashConsistentValue = "CrashConsistent";

        /// <summary> Application consistent recovery point. </summary>
        public static RecoveryPointType ApplicationConsistent { get; } = new RecoveryPointType(ApplicationConsistentValue);
        /// <summary> Crash consistent recovery point. </summary>
        public static RecoveryPointType CrashConsistent { get; } = new RecoveryPointType(CrashConsistentValue);
        /// <summary> Determines if two <see cref="RecoveryPointType"/> values are the same. </summary>
        public static bool operator ==(RecoveryPointType left, RecoveryPointType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="RecoveryPointType"/> values are not the same. </summary>
        public static bool operator !=(RecoveryPointType left, RecoveryPointType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="RecoveryPointType"/>. </summary>
        public static implicit operator RecoveryPointType(string value) => new RecoveryPointType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is RecoveryPointType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(RecoveryPointType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
