// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.ResourceManager.RecoveryServicesDataReplication;

namespace Azure.ResourceManager.RecoveryServicesDataReplication.Models
{
    /// <summary> Disk controller. </summary>
    public partial class DataReplicationDiskControllerInputs
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="DataReplicationDiskControllerInputs"/>. </summary>
        /// <param name="controllerName"> Gets or sets the controller name (IDE,SCSI). </param>
        /// <param name="controllerId"> Gets or sets the controller ID. </param>
        /// <param name="controllerLocation"> Gets or sets the controller Location. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="controllerName"/> is null. </exception>
        public DataReplicationDiskControllerInputs(string controllerName, int controllerId, int controllerLocation)
        {
            Argument.AssertNotNull(controllerName, nameof(controllerName));

            ControllerName = controllerName;
            ControllerId = controllerId;
            ControllerLocation = controllerLocation;
        }

        /// <summary> Initializes a new instance of <see cref="DataReplicationDiskControllerInputs"/>. </summary>
        /// <param name="controllerName"> Gets or sets the controller name (IDE,SCSI). </param>
        /// <param name="controllerId"> Gets or sets the controller ID. </param>
        /// <param name="controllerLocation"> Gets or sets the controller Location. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal DataReplicationDiskControllerInputs(string controllerName, int controllerId, int controllerLocation, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            ControllerName = controllerName;
            ControllerId = controllerId;
            ControllerLocation = controllerLocation;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> Gets or sets the controller name (IDE,SCSI). </summary>
        public string ControllerName { get; set; }

        /// <summary> Gets or sets the controller ID. </summary>
        public int ControllerId { get; set; }

        /// <summary> Gets or sets the controller Location. </summary>
        public int ControllerLocation { get; set; }
    }
}
