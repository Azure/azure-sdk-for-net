// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.RecoveryServicesDataReplication.Models
{
    public partial class DraModelProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("machineId"u8);
            writer.WriteStringValue(MachineId);
            writer.WritePropertyName("machineName"u8);
            writer.WriteStringValue(MachineName);
            writer.WritePropertyName("authenticationIdentity"u8);
            writer.WriteObjectValue(AuthenticationIdentity);
            writer.WritePropertyName("resourceAccessIdentity"u8);
            writer.WriteObjectValue(ResourceAccessIdentity);
            writer.WritePropertyName("customProperties"u8);
            writer.WriteObjectValue(CustomProperties);
            writer.WriteEndObject();
        }

        internal static DraModelProperties DeserializeDraModelProperties(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> correlationId = default;
            string machineId = default;
            string machineName = default;
            IdentityModel authenticationIdentity = default;
            IdentityModel resourceAccessIdentity = default;
            Optional<bool> isResponsive = default;
            Optional<DateTimeOffset> lastHeartbeat = default;
            Optional<string> versionNumber = default;
            Optional<ProvisioningState> provisioningState = default;
            Optional<IReadOnlyList<HealthErrorModel>> healthErrors = default;
            DraModelCustomProperties customProperties = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("correlationId"u8))
                {
                    correlationId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("machineId"u8))
                {
                    machineId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("machineName"u8))
                {
                    machineName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("authenticationIdentity"u8))
                {
                    authenticationIdentity = IdentityModel.DeserializeIdentityModel(property.Value);
                    continue;
                }
                if (property.NameEquals("resourceAccessIdentity"u8))
                {
                    resourceAccessIdentity = IdentityModel.DeserializeIdentityModel(property.Value);
                    continue;
                }
                if (property.NameEquals("isResponsive"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isResponsive = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("lastHeartbeat"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastHeartbeat = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("versionNumber"u8))
                {
                    versionNumber = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new ProvisioningState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("healthErrors"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<HealthErrorModel> array = new List<HealthErrorModel>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(HealthErrorModel.DeserializeHealthErrorModel(item));
                    }
                    healthErrors = array;
                    continue;
                }
                if (property.NameEquals("customProperties"u8))
                {
                    customProperties = DraModelCustomProperties.DeserializeDraModelCustomProperties(property.Value);
                    continue;
                }
            }
            return new DraModelProperties(correlationId.Value, machineId, machineName, authenticationIdentity, resourceAccessIdentity, Optional.ToNullable(isResponsive), Optional.ToNullable(lastHeartbeat), versionNumber.Value, Optional.ToNullable(provisioningState), Optional.ToList(healthErrors), customProperties);
        }
    }
}
