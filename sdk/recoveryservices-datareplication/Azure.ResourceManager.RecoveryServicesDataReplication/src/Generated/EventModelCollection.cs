// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;

namespace Azure.ResourceManager.RecoveryServicesDataReplication
{
    /// <summary>
    /// A class representing a collection of <see cref="EventModelResource" /> and their operations.
    /// Each <see cref="EventModelResource" /> in the collection will belong to the same instance of <see cref="VaultModelResource" />.
    /// To get an <see cref="EventModelCollection" /> instance call the GetEventModels method from an instance of <see cref="VaultModelResource" />.
    /// </summary>
    public partial class EventModelCollection : ArmCollection, IEnumerable<EventModelResource>, IAsyncEnumerable<EventModelResource>
    {
        private readonly ClientDiagnostics _eventModelEventClientDiagnostics;
        private readonly EventRestOperations _eventModelEventRestClient;

        /// <summary> Initializes a new instance of the <see cref="EventModelCollection"/> class for mocking. </summary>
        protected EventModelCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="EventModelCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal EventModelCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _eventModelEventClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.RecoveryServicesDataReplication", EventModelResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(EventModelResource.ResourceType, out string eventModelEventApiVersion);
            _eventModelEventRestClient = new EventRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, eventModelEventApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != VaultModelResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, VaultModelResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Gets the details of the event.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/replicationVaults/{vaultName}/events/{eventName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Event_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="eventName"> The event name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="eventName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="eventName"/> is null. </exception>
        public virtual async Task<Response<EventModelResource>> GetAsync(string eventName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(eventName, nameof(eventName));

            using var scope = _eventModelEventClientDiagnostics.CreateScope("EventModelCollection.Get");
            scope.Start();
            try
            {
                var response = await _eventModelEventRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, eventName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EventModelResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets the details of the event.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/replicationVaults/{vaultName}/events/{eventName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Event_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="eventName"> The event name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="eventName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="eventName"/> is null. </exception>
        public virtual Response<EventModelResource> Get(string eventName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(eventName, nameof(eventName));

            using var scope = _eventModelEventClientDiagnostics.CreateScope("EventModelCollection.Get");
            scope.Start();
            try
            {
                var response = _eventModelEventRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, eventName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new EventModelResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets the list of events in the given vault.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/replicationVaults/{vaultName}/events</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Event_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="filter"> Filter string. </param>
        /// <param name="continuationToken"> Continuation token. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="EventModelResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<EventModelResource> GetAllAsync(string filter = null, string continuationToken = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _eventModelEventRestClient.CreateListRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, filter, continuationToken);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _eventModelEventRestClient.CreateListNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, filter, continuationToken);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new EventModelResource(Client, EventModelData.DeserializeEventModelData(e)), _eventModelEventClientDiagnostics, Pipeline, "EventModelCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Gets the list of events in the given vault.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/replicationVaults/{vaultName}/events</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Event_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="filter"> Filter string. </param>
        /// <param name="continuationToken"> Continuation token. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="EventModelResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<EventModelResource> GetAll(string filter = null, string continuationToken = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _eventModelEventRestClient.CreateListRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, filter, continuationToken);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _eventModelEventRestClient.CreateListNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, filter, continuationToken);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new EventModelResource(Client, EventModelData.DeserializeEventModelData(e)), _eventModelEventClientDiagnostics, Pipeline, "EventModelCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/replicationVaults/{vaultName}/events/{eventName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Event_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="eventName"> The event name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="eventName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="eventName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string eventName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(eventName, nameof(eventName));

            using var scope = _eventModelEventClientDiagnostics.CreateScope("EventModelCollection.Exists");
            scope.Start();
            try
            {
                var response = await _eventModelEventRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, eventName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataReplication/replicationVaults/{vaultName}/events/{eventName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Event_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="eventName"> The event name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="eventName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="eventName"/> is null. </exception>
        public virtual Response<bool> Exists(string eventName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(eventName, nameof(eventName));

            using var scope = _eventModelEventClientDiagnostics.CreateScope("EventModelCollection.Exists");
            scope.Start();
            try
            {
                var response = _eventModelEventRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, eventName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<EventModelResource> IEnumerable<EventModelResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<EventModelResource> IAsyncEnumerable<EventModelResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
