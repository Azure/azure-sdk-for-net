// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.RecoveryServicesDataReplication;
using Azure.ResourceManager.RecoveryServicesDataReplication.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.RecoveryServicesDataReplication.Mocking
{
    /// <summary> A class to add extension methods to <see cref="SubscriptionResource"/>. </summary>
    public partial class MockableRecoveryServicesDataReplicationSubscriptionResource : ArmResource
    {
        private ClientDiagnostics _vaultClientDiagnostics;
        private Vault _vaultRestClient;
        private ClientDiagnostics _fabricClientDiagnostics;
        private Fabric _fabricRestClient;
        private ClientDiagnostics _checkNameAvailabilityClientDiagnostics;
        private CheckNameAvailability _checkNameAvailabilityRestClient;

        /// <summary> Initializes a new instance of MockableRecoveryServicesDataReplicationSubscriptionResource for mocking. </summary>
        protected MockableRecoveryServicesDataReplicationSubscriptionResource()
        {
        }

        /// <summary> Initializes a new instance of <see cref="MockableRecoveryServicesDataReplicationSubscriptionResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal MockableRecoveryServicesDataReplicationSubscriptionResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics VaultClientDiagnostics => _vaultClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.RecoveryServicesDataReplication.Mocking", ProviderConstants.DefaultProviderNamespace, Diagnostics);

        private Vault VaultRestClient => _vaultRestClient ??= new Vault(VaultClientDiagnostics, Pipeline, Endpoint, "2024-09-01");

        private ClientDiagnostics FabricClientDiagnostics => _fabricClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.RecoveryServicesDataReplication.Mocking", ProviderConstants.DefaultProviderNamespace, Diagnostics);

        private Fabric FabricRestClient => _fabricRestClient ??= new Fabric(FabricClientDiagnostics, Pipeline, Endpoint, "2024-09-01");

        private ClientDiagnostics CheckNameAvailabilityClientDiagnostics => _checkNameAvailabilityClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.RecoveryServicesDataReplication.Mocking", ProviderConstants.DefaultProviderNamespace, Diagnostics);

        private CheckNameAvailability CheckNameAvailabilityRestClient => _checkNameAvailabilityRestClient ??= new CheckNameAvailability(CheckNameAvailabilityClientDiagnostics, Pipeline, Endpoint, "2024-09-01");

        /// <summary> Gets the list of vaults in the given subscription. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="DataReplicationVaultResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<DataReplicationVaultResource> GetDataReplicationVaultsAsync(CancellationToken cancellationToken = default)
        {
            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new AsyncPageableWrapper<DataReplicationVaultData, DataReplicationVaultResource>(new VaultGetBySubscriptionAsyncCollectionResultOfT(VaultRestClient, Guid.Parse(Id.SubscriptionId), context), data => new DataReplicationVaultResource(Client, data));
        }

        /// <summary> Gets the list of vaults in the given subscription. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="DataReplicationVaultResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<DataReplicationVaultResource> GetDataReplicationVaults(CancellationToken cancellationToken = default)
        {
            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new PageableWrapper<DataReplicationVaultData, DataReplicationVaultResource>(new VaultGetBySubscriptionCollectionResultOfT(VaultRestClient, Guid.Parse(Id.SubscriptionId), context), data => new DataReplicationVaultResource(Client, data));
        }

        /// <summary> Gets the list of fabrics in the given subscription. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="DataReplicationFabricResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<DataReplicationFabricResource> GetDataReplicationFabricsAsync(CancellationToken cancellationToken = default)
        {
            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new AsyncPageableWrapper<DataReplicationFabricData, DataReplicationFabricResource>(new FabricGetBySubscriptionAsyncCollectionResultOfT(FabricRestClient, Guid.Parse(Id.SubscriptionId), context), data => new DataReplicationFabricResource(Client, data));
        }

        /// <summary> Gets the list of fabrics in the given subscription. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="DataReplicationFabricResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<DataReplicationFabricResource> GetDataReplicationFabrics(CancellationToken cancellationToken = default)
        {
            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new PageableWrapper<DataReplicationFabricData, DataReplicationFabricResource>(new FabricGetBySubscriptionCollectionResultOfT(FabricRestClient, Guid.Parse(Id.SubscriptionId), context), data => new DataReplicationFabricResource(Client, data));
        }

        /// <summary> Checks the resource name availability. </summary>
        /// <param name="location"> The name of the Azure region. </param>
        /// <param name="body"> Resource details. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<DataReplicationNameAvailabilityResult>> PostAsync(AzureLocation location, DataReplicationNameAvailabilityContent body = default, CancellationToken cancellationToken = default)
        {
            using DiagnosticScope scope = CheckNameAvailabilityClientDiagnostics.CreateScope("MockableRecoveryServicesDataReplicationSubscriptionResource.Post");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = CheckNameAvailabilityRestClient.CreatePostRequest(Guid.Parse(Id.SubscriptionId), location, DataReplicationNameAvailabilityContent.ToRequestContent(body), context);
                Response result = await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
                Response<DataReplicationNameAvailabilityResult> response = Response.FromValue(DataReplicationNameAvailabilityResult.FromResponse(result), result);
                if (response.Value == null)
                {
                    throw new RequestFailedException(response.GetRawResponse());
                }
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Checks the resource name availability. </summary>
        /// <param name="location"> The name of the Azure region. </param>
        /// <param name="body"> Resource details. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<DataReplicationNameAvailabilityResult> Post(AzureLocation location, DataReplicationNameAvailabilityContent body = default, CancellationToken cancellationToken = default)
        {
            using DiagnosticScope scope = CheckNameAvailabilityClientDiagnostics.CreateScope("MockableRecoveryServicesDataReplicationSubscriptionResource.Post");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = CheckNameAvailabilityRestClient.CreatePostRequest(Guid.Parse(Id.SubscriptionId), location, DataReplicationNameAvailabilityContent.ToRequestContent(body), context);
                Response result = Pipeline.ProcessMessage(message, context);
                Response<DataReplicationNameAvailabilityResult> response = Response.FromValue(DataReplicationNameAvailabilityResult.FromResponse(result), result);
                if (response.Value == null)
                {
                    throw new RequestFailedException(response.GetRawResponse());
                }
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
