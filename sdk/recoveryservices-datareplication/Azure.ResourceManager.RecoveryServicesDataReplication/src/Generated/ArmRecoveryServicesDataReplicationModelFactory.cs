// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.RecoveryServicesDataReplication;

namespace Azure.ResourceManager.RecoveryServicesDataReplication.Models
{
    /// <summary> A factory class for creating instances of the models for mocking. </summary>
    public static partial class ArmRecoveryServicesDataReplicationModelFactory
    {

        /// <summary> Email configuration model. </summary>
        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="resourceType"> The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts". </param>
        /// <param name="systemData"> Azure Resource Manager metadata containing createdBy and modifiedBy information. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="RecoveryServicesDataReplication.DataReplicationEmailConfigurationData"/> instance for mocking. </returns>
        public static DataReplicationEmailConfigurationData DataReplicationEmailConfigurationData(ResourceIdentifier id = default, string name = default, ResourceType resourceType = default, SystemData systemData = default, DataReplicationEmailConfigurationProperties properties = default)
        {
            return new DataReplicationEmailConfigurationData(
                id,
                name,
                resourceType,
                systemData,
                additionalBinaryDataProperties: null,
                properties);
        }

        /// <summary> Email configuration model properties. </summary>
        /// <param name="sendToOwners"> Gets or sets a value indicating whether to send email to subscription administrator. </param>
        /// <param name="customEmailAddresses"> Gets or sets the custom email address for sending emails. </param>
        /// <param name="locale"> Gets or sets the locale for the email notification. </param>
        /// <param name="provisioningState"> Gets or sets the provisioning state of the email configuration. </param>
        /// <returns> A new <see cref="Models.DataReplicationEmailConfigurationProperties"/> instance for mocking. </returns>
        public static DataReplicationEmailConfigurationProperties DataReplicationEmailConfigurationProperties(bool sendToOwners = default, IEnumerable<string> customEmailAddresses = default, string locale = default, DataReplicationProvisioningState? provisioningState = default)
        {
            customEmailAddresses ??= new ChangeTrackingList<string>();

            return new DataReplicationEmailConfigurationProperties(sendToOwners, customEmailAddresses.ToList(), locale, provisioningState, additionalBinaryDataProperties: null);
        }

        /// <summary> Vault model. </summary>
        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="resourceType"> The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts". </param>
        /// <param name="systemData"> Azure Resource Manager metadata containing createdBy and modifiedBy information. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="location"> The geo-location where the resource lives. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="identity"> The managed service identities assigned to this resource. </param>
        /// <returns> A new <see cref="RecoveryServicesDataReplication.DataReplicationVaultData"/> instance for mocking. </returns>
        public static DataReplicationVaultData DataReplicationVaultData(ResourceIdentifier id = default, string name = default, ResourceType resourceType = default, SystemData systemData = default, IDictionary<string, string> tags = default, AzureLocation location = default, DataReplicationVaultProperties properties = default, ManagedServiceIdentity identity = default)
        {
            tags ??= new ChangeTrackingDictionary<string, string>();

            return new DataReplicationVaultData(
                id,
                name,
                resourceType,
                systemData,
                additionalBinaryDataProperties: null,
                tags,
                location,
                properties,
                identity);
        }

        /// <summary> Vault properties. </summary>
        /// <param name="provisioningState"> Gets or sets the provisioning state of the vault. </param>
        /// <param name="serviceResourceId"> Gets or sets the service resource Id. </param>
        /// <param name="vaultType"> Gets or sets the type of vault. </param>
        /// <returns> A new <see cref="Models.DataReplicationVaultProperties"/> instance for mocking. </returns>
        public static DataReplicationVaultProperties DataReplicationVaultProperties(DataReplicationProvisioningState? provisioningState = default, ResourceIdentifier serviceResourceId = default, DataReplicationVaultType? vaultType = default)
        {
            return new DataReplicationVaultProperties(provisioningState, serviceResourceId, vaultType, additionalBinaryDataProperties: null);
        }

        /// <summary> Vault model update. </summary>
        /// <param name="tags"> Gets or sets the resource tags. </param>
        /// <param name="properties"> Vault properties. </param>
        /// <param name="identity"> Vault identity. </param>
        /// <param name="id"> Gets or sets the Id of the resource. </param>
        /// <param name="name"> Gets or sets the name of the resource. </param>
        /// <param name="type"> Gets or sets the type of the resource. </param>
        /// <param name="systemData"> Metadata pertaining to creation and last modification of the resource. </param>
        /// <returns> A new <see cref="Models.DataReplicationVaultPatch"/> instance for mocking. </returns>
        public static DataReplicationVaultPatch DataReplicationVaultPatch(IDictionary<string, string> tags = default, DataReplicationVaultProperties properties = default, VaultIdentityModel identity = default, string id = default, string name = default, string @type = default, SystemData systemData = default)
        {
            tags ??= new ChangeTrackingDictionary<string, string>();

            return new DataReplicationVaultPatch(
                tags,
                properties,
                identity,
                id,
                name,
                @type,
                systemData,
                additionalBinaryDataProperties: null);
        }

        /// <summary> Vault model. </summary>
        /// <param name="type"> Gets or sets the identityType which can be either SystemAssigned or None. </param>
        /// <param name="principalId"> Gets or sets the object ID of the service principal object for the managed identity that is used to grant role-based access to an Azure resource. </param>
        /// <param name="tenantId"> Gets or sets a Globally Unique Identifier (GUID) that represents the Azure AD tenant where the resource is now a member. </param>
        /// <returns> A new <see cref="Models.VaultIdentityModel"/> instance for mocking. </returns>
        public static VaultIdentityModel VaultIdentityModel(VaultIdentityType @type = default, string principalId = default, string tenantId = default)
        {
            return new VaultIdentityModel(@type, principalId, tenantId, additionalBinaryDataProperties: null);
        }

        /// <summary> Event model. </summary>
        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="resourceType"> The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts". </param>
        /// <param name="systemData"> Azure Resource Manager metadata containing createdBy and modifiedBy information. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="RecoveryServicesDataReplication.DataReplicationEventData"/> instance for mocking. </returns>
        public static DataReplicationEventData DataReplicationEventData(ResourceIdentifier id = default, string name = default, ResourceType resourceType = default, SystemData systemData = default, DataReplicationEventProperties properties = default)
        {
            return new DataReplicationEventData(
                id,
                name,
                resourceType,
                systemData,
                additionalBinaryDataProperties: null,
                properties);
        }

        /// <param name="resourceType"> Gets or sets the resource type. </param>
        /// <param name="resourceName"> Gets or sets the resource name. </param>
        /// <param name="eventType"> Gets or sets the event type. </param>
        /// <param name="eventName"> Gets or sets the event name. </param>
        /// <param name="occurredOn"> Gets or sets the time at which the event occurred at source. </param>
        /// <param name="severity"> Gets or sets the event severity. </param>
        /// <param name="description"> Gets or sets the event description. </param>
        /// <param name="correlationId"> Gets or sets the event correlation Id. </param>
        /// <param name="healthErrors"> Gets or sets the errors associated with this event. </param>
        /// <param name="customInstanceType"> Discriminator property for DataReplicationEventCustomProperties. </param>
        /// <param name="provisioningState"> Gets or sets the provisioning state of the event. </param>
        /// <returns> A new <see cref="Models.DataReplicationEventProperties"/> instance for mocking. </returns>
        public static DataReplicationEventProperties DataReplicationEventProperties(ResourceType? resourceType = default, string resourceName = default, string eventType = default, string eventName = default, DateTimeOffset? occurredOn = default, string severity = default, string description = default, string correlationId = default, IEnumerable<DataReplicationHealthErrorInfo> healthErrors = default, string customInstanceType = default, DataReplicationProvisioningState? provisioningState = default)
        {
            healthErrors ??= new ChangeTrackingList<DataReplicationHealthErrorInfo>();

            return new DataReplicationEventProperties(
                resourceType,
                resourceName,
                eventType,
                eventName,
                occurredOn,
                severity,
                description,
                correlationId,
                healthErrors.ToList(),
                customInstanceType is null ? default : new Models.DataReplicationEventCustomProperties(customInstanceType, new Dictionary<string, BinaryData>()),
                provisioningState,
                additionalBinaryDataProperties: null);
        }

        /// <summary> Health error model. </summary>
        /// <param name="affectedResourceType"> Gets or sets the type of affected resource type. </param>
        /// <param name="affectedResourceCorrelationIds"> Gets or sets the list of affected resource correlation Ids. This can be used to uniquely identify the count of items affected by a specific category and severity as well as count of item affected by an specific issue. </param>
        /// <param name="childErrors"> Gets or sets a list of child health errors associated with this error. </param>
        /// <param name="code"> Gets or sets the error code. </param>
        /// <param name="healthCategory"> Gets or sets the health category. </param>
        /// <param name="category"> Gets or sets the error category. </param>
        /// <param name="severity"> Gets or sets the error severity. </param>
        /// <param name="source"> Gets or sets the error source. </param>
        /// <param name="creationTime"> Gets or sets the error creation time. </param>
        /// <param name="isCustomerResolvable"> Gets or sets a value indicating whether the error is customer resolvable. </param>
        /// <param name="summary"> Gets or sets the error summary. </param>
        /// <param name="message"> Gets or sets the error message. </param>
        /// <param name="causes"> Gets or sets possible causes of the error. </param>
        /// <param name="recommendation"> Gets or sets recommended action to resolve the error. </param>
        /// <returns> A new <see cref="Models.DataReplicationHealthErrorInfo"/> instance for mocking. </returns>
        public static DataReplicationHealthErrorInfo DataReplicationHealthErrorInfo(ResourceType? affectedResourceType = default, IEnumerable<string> affectedResourceCorrelationIds = default, IEnumerable<DataReplicationInnerHealthErrorInfo> childErrors = default, string code = default, string healthCategory = default, string category = default, string severity = default, string source = default, DateTimeOffset? creationTime = default, bool? isCustomerResolvable = default, string summary = default, string message = default, string causes = default, string recommendation = default)
        {
            affectedResourceCorrelationIds ??= new ChangeTrackingList<string>();
            childErrors ??= new ChangeTrackingList<DataReplicationInnerHealthErrorInfo>();

            return new DataReplicationHealthErrorInfo(
                affectedResourceType,
                affectedResourceCorrelationIds.ToList(),
                childErrors.ToList(),
                code,
                healthCategory,
                category,
                severity,
                source,
                creationTime,
                isCustomerResolvable,
                summary,
                message,
                causes,
                recommendation,
                additionalBinaryDataProperties: null);
        }

        /// <summary> Inner health error model. </summary>
        /// <param name="code"> Gets or sets the error code. </param>
        /// <param name="healthCategory"> Gets or sets the health category. </param>
        /// <param name="category"> Gets or sets the error category. </param>
        /// <param name="severity"> Gets or sets the error severity. </param>
        /// <param name="source"> Gets or sets the error source. </param>
        /// <param name="creationTime"> Gets or sets the error creation time. </param>
        /// <param name="isCustomerResolvable"> Gets or sets a value indicating whether the error is customer resolvable. </param>
        /// <param name="summary"> Gets or sets the error summary. </param>
        /// <param name="message"> Gets or sets the error message. </param>
        /// <param name="causes"> Gets or sets possible causes of the error. </param>
        /// <param name="recommendation"> Gets or sets recommended action to resolve the error. </param>
        /// <returns> A new <see cref="Models.DataReplicationInnerHealthErrorInfo"/> instance for mocking. </returns>
        public static DataReplicationInnerHealthErrorInfo DataReplicationInnerHealthErrorInfo(string code = default, string healthCategory = default, string category = default, string severity = default, string source = default, DateTimeOffset? creationTime = default, bool? isCustomerResolvable = default, string summary = default, string message = default, string causes = default, string recommendation = default)
        {
            return new DataReplicationInnerHealthErrorInfo(
                code,
                healthCategory,
                category,
                severity,
                source,
                creationTime,
                isCustomerResolvable,
                summary,
                message,
                causes,
                recommendation,
                additionalBinaryDataProperties: null);
        }

        /// <summary> Fabric model. </summary>
        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="resourceType"> The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts". </param>
        /// <param name="systemData"> Azure Resource Manager metadata containing createdBy and modifiedBy information. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="location"> The geo-location where the resource lives. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="RecoveryServicesDataReplication.DataReplicationFabricData"/> instance for mocking. </returns>
        public static DataReplicationFabricData DataReplicationFabricData(ResourceIdentifier id = default, string name = default, ResourceType resourceType = default, SystemData systemData = default, IDictionary<string, string> tags = default, AzureLocation location = default, DataReplicationFabricProperties properties = default)
        {
            tags ??= new ChangeTrackingDictionary<string, string>();

            return new DataReplicationFabricData(
                id,
                name,
                resourceType,
                systemData,
                additionalBinaryDataProperties: null,
                tags,
                location,
                properties);
        }

        /// <param name="provisioningState"> Gets or sets the provisioning state of the fabric. </param>
        /// <param name="serviceEndpoint"> Gets or sets the service endpoint. </param>
        /// <param name="serviceResourceId"> Gets or sets the service resource Id. </param>
        /// <param name="health"> Gets or sets the fabric health. </param>
        /// <param name="healthErrors"> Gets or sets the list of health errors. </param>
        /// <param name="customInstanceType"> Discriminator property for DataReplicationFabricCustomProperties. </param>
        /// <returns> A new <see cref="Models.DataReplicationFabricProperties"/> instance for mocking. </returns>
        public static DataReplicationFabricProperties DataReplicationFabricProperties(DataReplicationProvisioningState? provisioningState = default, string serviceEndpoint = default, ResourceIdentifier serviceResourceId = default, DataReplicationHealthStatus? health = default, IEnumerable<DataReplicationHealthErrorInfo> healthErrors = default, string customInstanceType = default)
        {
            healthErrors ??= new ChangeTrackingList<DataReplicationHealthErrorInfo>();

            return new DataReplicationFabricProperties(
                provisioningState,
                serviceEndpoint,
                serviceResourceId,
                health,
                healthErrors.ToList(),
                customInstanceType is null ? default : new Models.DataReplicationFabricCustomProperties(customInstanceType, new Dictionary<string, BinaryData>()),
                additionalBinaryDataProperties: null);
        }

        /// <summary> AzStackHCI fabric model custom properties. </summary>
        /// <param name="azStackHciSiteId"> Gets or sets the ARM Id of the AzStackHCI site. </param>
        /// <param name="applianceName"> Gets or sets the Appliance name. </param>
        /// <param name="cluster"> AzStackHCI cluster properties. </param>
        /// <param name="fabricResourceId"> Gets or sets the fabric resource Id. </param>
        /// <param name="fabricContainerId"> Gets or sets the fabric container Id. </param>
        /// <param name="migrationSolutionId"> Gets or sets the Migration solution ARM Id. </param>
        /// <param name="migrationHubUri"> Gets or sets the migration hub Uri. </param>
        /// <returns> A new <see cref="Models.AzStackHciFabricCustomProperties"/> instance for mocking. </returns>
        public static AzStackHciFabricCustomProperties AzStackHciFabricCustomProperties(ResourceIdentifier azStackHciSiteId = default, IEnumerable<string> applianceName = default, AzStackHCIClusterProperties cluster = default, ResourceIdentifier fabricResourceId = default, ResourceIdentifier fabricContainerId = default, ResourceIdentifier migrationSolutionId = default, Uri migrationHubUri = default)
        {
            applianceName ??= new ChangeTrackingList<string>();

            return new AzStackHciFabricCustomProperties(
                "AzStackHCI",
                additionalBinaryDataProperties: null,
                azStackHciSiteId,
                applianceName.ToList(),
                cluster,
                fabricResourceId,
                fabricContainerId,
                migrationSolutionId,
                migrationHubUri);
        }

        /// <summary> AzStackHCI cluster properties. </summary>
        /// <param name="clusterName"> Gets or sets the AzStackHCICluster FQDN name. </param>
        /// <param name="resourceName"> Gets or sets the AzStackHCICluster resource name. </param>
        /// <param name="storageAccountName"> Gets or sets the Storage account name. </param>
        /// <param name="storageContainers"> Gets or sets the list of AzStackHCICluster Storage Container. </param>
        /// <returns> A new <see cref="Models.AzStackHCIClusterProperties"/> instance for mocking. </returns>
        public static AzStackHCIClusterProperties AzStackHCIClusterProperties(string clusterName = default, string resourceName = default, string storageAccountName = default, IEnumerable<StorageContainerProperties> storageContainers = default)
        {
            storageContainers ??= new ChangeTrackingList<StorageContainerProperties>();

            return new AzStackHCIClusterProperties(clusterName, resourceName, storageAccountName, storageContainers.ToList(), additionalBinaryDataProperties: null);
        }

        /// <summary> HyperV migrate fabric model custom properties. </summary>
        /// <param name="hyperVSiteId"> Gets or sets the ARM Id of the HyperV site. </param>
        /// <param name="fabricResourceId"> Gets or sets the fabric resource Id. </param>
        /// <param name="fabricContainerId"> Gets or sets the fabric container Id. </param>
        /// <param name="migrationSolutionId"> Gets or sets the migration solution ARM Id. </param>
        /// <param name="migrationHubUri"> Gets or sets the migration hub Uri. </param>
        /// <returns> A new <see cref="Models.HyperVMigrateFabricCustomProperties"/> instance for mocking. </returns>
        public static HyperVMigrateFabricCustomProperties HyperVMigrateFabricCustomProperties(ResourceIdentifier hyperVSiteId = default, ResourceIdentifier fabricResourceId = default, ResourceIdentifier fabricContainerId = default, ResourceIdentifier migrationSolutionId = default, Uri migrationHubUri = default)
        {
            return new HyperVMigrateFabricCustomProperties(
                "HyperVMigrate",
                additionalBinaryDataProperties: null,
                hyperVSiteId,
                fabricResourceId,
                fabricContainerId,
                migrationSolutionId,
                migrationHubUri);
        }

        /// <summary> Fabric model update. </summary>
        /// <param name="tags"> Gets or sets the resource tags. </param>
        /// <param name="properties"> Fabric model properties. </param>
        /// <param name="id"> Gets or sets the Id of the resource. </param>
        /// <param name="name"> Gets or sets the name of the resource. </param>
        /// <param name="type"> Gets or sets the type of the resource. </param>
        /// <param name="systemData"> Metadata pertaining to creation and last modification of the resource. </param>
        /// <returns> A new <see cref="Models.DataReplicationFabricPatch"/> instance for mocking. </returns>
        public static DataReplicationFabricPatch DataReplicationFabricPatch(IDictionary<string, string> tags = default, DataReplicationFabricProperties properties = default, string id = default, string name = default, string @type = default, SystemData systemData = default)
        {
            tags ??= new ChangeTrackingDictionary<string, string>();

            return new DataReplicationFabricPatch(
                tags,
                properties,
                id,
                name,
                @type,
                systemData,
                additionalBinaryDataProperties: null);
        }

        /// <summary> Fabric agent model. </summary>
        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="resourceType"> The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts". </param>
        /// <param name="systemData"> Azure Resource Manager metadata containing createdBy and modifiedBy information. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="RecoveryServicesDataReplication.DataReplicationFabricAgentData"/> instance for mocking. </returns>
        public static DataReplicationFabricAgentData DataReplicationFabricAgentData(ResourceIdentifier id = default, string name = default, ResourceType resourceType = default, SystemData systemData = default, DataReplicationFabricAgentProperties properties = default)
        {
            return new DataReplicationFabricAgentData(
                id,
                name,
                resourceType,
                systemData,
                additionalBinaryDataProperties: null,
                properties);
        }

        /// <param name="correlationId"> Gets or sets the fabric agent correlation Id. </param>
        /// <param name="machineId"> Gets or sets the machine Id where fabric agent is running. </param>
        /// <param name="machineName"> Gets or sets the machine name where fabric agent is running. </param>
        /// <param name="authenticationIdentity"> Identity model. </param>
        /// <param name="resourceAccessIdentity"> Identity model. </param>
        /// <param name="isResponsive"> Gets or sets a value indicating whether the fabric agent is responsive. </param>
        /// <param name="lastHeartbeatOn"> Gets or sets the time when last heartbeat was sent by the fabric agent. </param>
        /// <param name="versionNumber"> Gets or sets the fabric agent version. </param>
        /// <param name="provisioningState"> Gets or sets the provisioning state of the fabric agent. </param>
        /// <param name="healthErrors"> Gets or sets the list of health errors. </param>
        /// <param name="customInstanceType"> Discriminator property for DataReplicationFabricAgentCustomProperties. </param>
        /// <returns> A new <see cref="Models.DataReplicationFabricAgentProperties"/> instance for mocking. </returns>
        public static DataReplicationFabricAgentProperties DataReplicationFabricAgentProperties(string correlationId = default, string machineId = default, string machineName = default, DataReplicationIdentity authenticationIdentity = default, DataReplicationIdentity resourceAccessIdentity = default, bool? isResponsive = default, DateTimeOffset? lastHeartbeatOn = default, string versionNumber = default, DataReplicationProvisioningState? provisioningState = default, IEnumerable<DataReplicationHealthErrorInfo> healthErrors = default, string customInstanceType = default)
        {
            healthErrors ??= new ChangeTrackingList<DataReplicationHealthErrorInfo>();

            return new DataReplicationFabricAgentProperties(
                correlationId,
                machineId,
                machineName,
                authenticationIdentity,
                resourceAccessIdentity,
                isResponsive,
                lastHeartbeatOn,
                versionNumber,
                provisioningState,
                healthErrors.ToList(),
                customInstanceType is null ? default : new Models.DataReplicationFabricAgentCustomProperties(customInstanceType, new Dictionary<string, BinaryData>()),
                additionalBinaryDataProperties: null);
        }

        /// <summary> Job model. </summary>
        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="resourceType"> The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts". </param>
        /// <param name="systemData"> Azure Resource Manager metadata containing createdBy and modifiedBy information. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="RecoveryServicesDataReplication.DataReplicationJobData"/> instance for mocking. </returns>
        public static DataReplicationJobData DataReplicationJobData(ResourceIdentifier id = default, string name = default, ResourceType resourceType = default, SystemData systemData = default, DataReplicationJobProperties properties = default)
        {
            return new DataReplicationJobData(
                id,
                name,
                resourceType,
                systemData,
                additionalBinaryDataProperties: null,
                properties);
        }

        /// <summary> Job model properties. </summary>
        /// <param name="displayName"> Gets or sets the friendly display name. </param>
        /// <param name="state"> Gets or sets the job state. </param>
        /// <param name="startTime"> Gets or sets the start time. </param>
        /// <param name="endTime"> Gets or sets the end time. </param>
        /// <param name="objectId"> Gets or sets the affected object Id. </param>
        /// <param name="objectName"> Gets or sets the affected object name. </param>
        /// <param name="objectInternalId"> Gets or sets the affected object internal Id. </param>
        /// <param name="objectInternalName"> Gets or sets the affected object internal name. </param>
        /// <param name="objectType"> Gets or sets the object type. </param>
        /// <param name="replicationProviderId"> Gets or sets the replication provider. </param>
        /// <param name="sourceFabricProviderId"> Gets or sets the source fabric provider. </param>
        /// <param name="targetFabricProviderId"> Gets or sets the target fabric provider. </param>
        /// <param name="allowedActions"> Gets or sets the list of allowed actions on the job. </param>
        /// <param name="activityId"> Gets or sets the job activity id. </param>
        /// <param name="tasks"> Gets or sets the list of tasks. </param>
        /// <param name="errors"> Gets or sets the list of errors. </param>
        /// <param name="customProperties"> Job model custom properties. </param>
        /// <param name="provisioningState"> Gets or sets the provisioning state of the job. </param>
        /// <returns> A new <see cref="Models.DataReplicationJobProperties"/> instance for mocking. </returns>
        public static DataReplicationJobProperties DataReplicationJobProperties(string displayName = default, DataReplicationJobState? state = default, DateTimeOffset? startTime = default, DateTimeOffset? endTime = default, string objectId = default, string objectName = default, string objectInternalId = default, string objectInternalName = default, DataReplicationJobObjectType? objectType = default, string replicationProviderId = default, string sourceFabricProviderId = default, string targetFabricProviderId = default, IEnumerable<string> allowedActions = default, string activityId = default, IEnumerable<DataReplicationTask> tasks = default, IEnumerable<DataReplicationErrorInfo> errors = default, DataReplicationJobCustomProperties customProperties = default, DataReplicationProvisioningState? provisioningState = default)
        {
            allowedActions ??= new ChangeTrackingList<string>();
            tasks ??= new ChangeTrackingList<DataReplicationTask>();
            errors ??= new ChangeTrackingList<DataReplicationErrorInfo>();

            return new DataReplicationJobProperties(
                displayName,
                state,
                startTime,
                endTime,
                objectId,
                objectName,
                objectInternalId,
                objectInternalName,
                objectType,
                replicationProviderId,
                sourceFabricProviderId,
                targetFabricProviderId,
                allowedActions.ToList(),
                activityId,
                tasks.ToList(),
                errors.ToList(),
                customProperties,
                provisioningState,
                additionalBinaryDataProperties: null);
        }

        /// <param name="taskName"> Gets or sets the task name. </param>
        /// <param name="state"> Gets or sets the task state. </param>
        /// <param name="startTime"> Gets or sets the start time. </param>
        /// <param name="endTime"> Gets or sets the end time. </param>
        /// <param name="customInstanceType"> Gets or sets the instance type. </param>
        /// <param name="childrenJobs"> Gets or sets the list of children job models. </param>
        /// <returns> A new <see cref="Models.DataReplicationTask"/> instance for mocking. </returns>
        public static DataReplicationTask DataReplicationTask(string taskName = default, DataReplicationTaskState? state = default, DateTimeOffset? startTime = default, DateTimeOffset? endTime = default, string customInstanceType = default, IEnumerable<DataReplicationJobData> childrenJobs = default)
        {
            childrenJobs ??= new ChangeTrackingList<DataReplicationJobData>();

            return new DataReplicationTask(
                taskName,
                state,
                startTime,
                endTime,
                customInstanceType is null ? default : new DataReplicationTaskCustomProperties(customInstanceType, new Dictionary<string, BinaryData>()),
                childrenJobs.ToList(),
                additionalBinaryDataProperties: null);
        }

        /// <summary> Error model. </summary>
        /// <param name="code"> Gets or sets the error code. </param>
        /// <param name="type"> Gets or sets the error type. </param>
        /// <param name="severity"> Gets or sets the error severity. </param>
        /// <param name="creationTime"> Gets or sets the creation time of error. </param>
        /// <param name="message"> Gets or sets the error message. </param>
        /// <param name="causes"> Gets or sets the possible causes of error. </param>
        /// <param name="recommendation"> Gets or sets the recommended action to resolve error. </param>
        /// <returns> A new <see cref="Models.DataReplicationErrorInfo"/> instance for mocking. </returns>
        public static DataReplicationErrorInfo DataReplicationErrorInfo(string code = default, string @type = default, string severity = default, DateTimeOffset? creationTime = default, string message = default, string causes = default, string recommendation = default)
        {
            return new DataReplicationErrorInfo(
                code,
                @type,
                severity,
                creationTime,
                message,
                causes,
                recommendation,
                additionalBinaryDataProperties: null);
        }

        /// <summary>
        /// Job model custom properties.
        /// Please note this is the abstract base class. The derived classes available for instantiation are: <see cref="FailoverJobCustomProperties"/>, <see cref="TestFailoverCleanupJobCustomProperties"/>, and <see cref="TestFailoverJobCustomProperties"/>.
        /// </summary>
        /// <param name="instanceType"> Discriminator property for DataReplicationJobCustomProperties. </param>
        /// <param name="affectedObjectDetails"> Gets or sets any custom properties of the affected object. </param>
        /// <returns> A new <see cref="Models.DataReplicationJobCustomProperties"/> instance for mocking. </returns>
        public static DataReplicationJobCustomProperties DataReplicationJobCustomProperties(string instanceType = default, AffectedObjectDetails affectedObjectDetails = default)
        {
            return new UnknownDataReplicationJobCustomProperties(instanceType, affectedObjectDetails, additionalBinaryDataProperties: null);
        }

        /// <summary> Details of the affected object. </summary>
        /// <param name="description"> Description of the affected object details. </param>
        /// <param name="type"> Type of the affected object details. </param>
        /// <returns> A new <see cref="Models.AffectedObjectDetails"/> instance for mocking. </returns>
        public static AffectedObjectDetails AffectedObjectDetails(string description = default, string @type = default)
        {
            return new AffectedObjectDetails(description, @type, additionalBinaryDataProperties: null);
        }

        /// <summary> Failover job model custom properties. </summary>
        /// <param name="affectedObjectDetails"> Gets or sets any custom properties of the affected object. </param>
        /// <param name="protectedItemDetails"> Gets or sets the failed over protected item details. </param>
        /// <returns> A new <see cref="Models.FailoverJobCustomProperties"/> instance for mocking. </returns>
        public static FailoverJobCustomProperties FailoverJobCustomProperties(AffectedObjectDetails affectedObjectDetails = default, IEnumerable<FailoverProtectedItemProperties> protectedItemDetails = default)
        {
            protectedItemDetails ??= new ChangeTrackingList<FailoverProtectedItemProperties>();

            return new FailoverJobCustomProperties("FailoverJobDetails", affectedObjectDetails, additionalBinaryDataProperties: null, protectedItemDetails.ToList());
        }

        /// <summary> Failover properties of the protected item. </summary>
        /// <param name="protectedItemName"> Gets or sets the protected item name. </param>
        /// <param name="vmName"> Gets or sets the VM name. </param>
        /// <param name="testVmName"> Gets or sets the test VM name. </param>
        /// <param name="recoveryPointId"> Gets or sets the recovery point Id. </param>
        /// <param name="recoveryPointTime"> Gets or sets the recovery point time. </param>
        /// <param name="networkName"> Gets or sets the network name. </param>
        /// <param name="subnet"> Gets or sets the network subnet. </param>
        /// <returns> A new <see cref="Models.FailoverProtectedItemProperties"/> instance for mocking. </returns>
        public static FailoverProtectedItemProperties FailoverProtectedItemProperties(string protectedItemName = default, string vmName = default, string testVmName = default, string recoveryPointId = default, DateTimeOffset? recoveryPointTime = default, string networkName = default, string subnet = default)
        {
            return new FailoverProtectedItemProperties(
                protectedItemName,
                vmName,
                testVmName,
                recoveryPointId,
                recoveryPointTime,
                networkName,
                subnet,
                additionalBinaryDataProperties: null);
        }

        /// <summary> Test failover cleanup job model custom properties. </summary>
        /// <param name="affectedObjectDetails"> Gets or sets any custom properties of the affected object. </param>
        /// <param name="comments"> Gets or sets the test failover cleanup comments. </param>
        /// <returns> A new <see cref="Models.TestFailoverCleanupJobCustomProperties"/> instance for mocking. </returns>
        public static TestFailoverCleanupJobCustomProperties TestFailoverCleanupJobCustomProperties(AffectedObjectDetails affectedObjectDetails = default, string comments = default)
        {
            return new TestFailoverCleanupJobCustomProperties("TestFailoverCleanupJobDetails", affectedObjectDetails, additionalBinaryDataProperties: null, comments);
        }

        /// <summary> Test failover job model custom properties. </summary>
        /// <param name="affectedObjectDetails"> Gets or sets any custom properties of the affected object. </param>
        /// <param name="protectedItemDetails"> Gets or sets the test VM details. </param>
        /// <returns> A new <see cref="Models.TestFailoverJobCustomProperties"/> instance for mocking. </returns>
        public static TestFailoverJobCustomProperties TestFailoverJobCustomProperties(AffectedObjectDetails affectedObjectDetails = default, IEnumerable<FailoverProtectedItemProperties> protectedItemDetails = default)
        {
            protectedItemDetails ??= new ChangeTrackingList<FailoverProtectedItemProperties>();

            return new TestFailoverJobCustomProperties("TestFailoverJobDetails", affectedObjectDetails, additionalBinaryDataProperties: null, protectedItemDetails.ToList());
        }

        /// <summary> Policy model. </summary>
        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="resourceType"> The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts". </param>
        /// <param name="systemData"> Azure Resource Manager metadata containing createdBy and modifiedBy information. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="RecoveryServicesDataReplication.DataReplicationPolicyData"/> instance for mocking. </returns>
        public static DataReplicationPolicyData DataReplicationPolicyData(ResourceIdentifier id = default, string name = default, ResourceType resourceType = default, SystemData systemData = default, DataReplicationPolicyProperties properties = default)
        {
            return new DataReplicationPolicyData(
                id,
                name,
                resourceType,
                systemData,
                additionalBinaryDataProperties: null,
                properties);
        }

        /// <param name="provisioningState"> Gets or sets the provisioning state of the policy. </param>
        /// <param name="customInstanceType"> Discriminator property for DataReplicationPolicyCustomProperties. </param>
        /// <returns> A new <see cref="Models.DataReplicationPolicyProperties"/> instance for mocking. </returns>
        public static DataReplicationPolicyProperties DataReplicationPolicyProperties(DataReplicationProvisioningState? provisioningState = default, string customInstanceType = default)
        {
            return new DataReplicationPolicyProperties(provisioningState, customInstanceType is null ? default : new Models.DataReplicationPolicyCustomProperties(customInstanceType, new Dictionary<string, BinaryData>()), additionalBinaryDataProperties: null);
        }

        /// <summary> Represents private endpoint connection. </summary>
        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="resourceType"> The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts". </param>
        /// <param name="systemData"> Azure Resource Manager metadata containing createdBy and modifiedBy information. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="RecoveryServicesDataReplication.DataReplicationPrivateEndpointConnectionData"/> instance for mocking. </returns>
        public static DataReplicationPrivateEndpointConnectionData DataReplicationPrivateEndpointConnectionData(ResourceIdentifier id = default, string name = default, ResourceType resourceType = default, SystemData systemData = default, DataReplicationPrivateEndpointConnectionProperties properties = default)
        {
            return new DataReplicationPrivateEndpointConnectionData(
                id,
                name,
                resourceType,
                systemData,
                additionalBinaryDataProperties: null,
                properties);
        }

        /// <param name="provisioningState"> Gets or sets provisioning state of the private endpoint connection. </param>
        /// <param name="privateEndpointId"> Gets or sets the id. </param>
        /// <param name="privateLinkServiceConnectionState"> Represents Private link service connection state. </param>
        /// <returns> A new <see cref="Models.DataReplicationPrivateEndpointConnectionProperties"/> instance for mocking. </returns>
        public static DataReplicationPrivateEndpointConnectionProperties DataReplicationPrivateEndpointConnectionProperties(DataReplicationProvisioningState? provisioningState = default, string privateEndpointId = default, DataReplicationPrivateLinkServiceConnectionState privateLinkServiceConnectionState = default)
        {
            return new DataReplicationPrivateEndpointConnectionProperties(provisioningState, privateEndpointId is null ? default : new PrivateEndpoint(privateEndpointId, new Dictionary<string, BinaryData>()), privateLinkServiceConnectionState, additionalBinaryDataProperties: null);
        }

        /// <summary> Represents private endpoint connection proxy request. </summary>
        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="resourceType"> The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts". </param>
        /// <param name="systemData"> Azure Resource Manager metadata containing createdBy and modifiedBy information. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="etag"> Gets or sets ETag. </param>
        /// <returns> A new <see cref="RecoveryServicesDataReplication.DataReplicationPrivateEndpointConnectionProxyData"/> instance for mocking. </returns>
        public static DataReplicationPrivateEndpointConnectionProxyData DataReplicationPrivateEndpointConnectionProxyData(ResourceIdentifier id = default, string name = default, ResourceType resourceType = default, SystemData systemData = default, DataReplicationPrivateEndpointConnectionProxyProperties properties = default, ETag? etag = default)
        {
            return new DataReplicationPrivateEndpointConnectionProxyData(
                id,
                name,
                resourceType,
                systemData,
                additionalBinaryDataProperties: null,
                properties,
                etag);
        }

        /// <summary> Represents private endpoint connection proxy request. </summary>
        /// <param name="provisioningState"> Gets or sets the provisioning state of the private endpoint connection proxy. </param>
        /// <param name="remotePrivateEndpoint"> Represent remote private endpoint information for the private endpoint connection proxy. </param>
        /// <returns> A new <see cref="Models.DataReplicationPrivateEndpointConnectionProxyProperties"/> instance for mocking. </returns>
        public static DataReplicationPrivateEndpointConnectionProxyProperties DataReplicationPrivateEndpointConnectionProxyProperties(DataReplicationProvisioningState? provisioningState = default, RemotePrivateEndpoint remotePrivateEndpoint = default)
        {
            return new DataReplicationPrivateEndpointConnectionProxyProperties(provisioningState, remotePrivateEndpoint, additionalBinaryDataProperties: null);
        }

        /// <summary> Represent remote private endpoint information for the private endpoint connection proxy. </summary>
        /// <param name="id"> Gets or sets private link service proxy id. </param>
        /// <param name="privateLinkServiceConnections"> Gets or sets the list of Private Link Service Connections and gets populated for Auto approval flow. </param>
        /// <param name="manualPrivateLinkServiceConnections"> Gets or sets the list of Manual Private Link Service Connections and gets populated for Manual approval flow. </param>
        /// <param name="privateLinkServiceProxies"> Gets or sets the list of private link service proxies. </param>
        /// <param name="connectionDetails"> Gets or sets the list of Connection Details. This is the connection details for private endpoint. </param>
        /// <returns> A new <see cref="Models.RemotePrivateEndpoint"/> instance for mocking. </returns>
        public static RemotePrivateEndpoint RemotePrivateEndpoint(string id = default, IEnumerable<DataReplicationPrivateLinkServiceConnection> privateLinkServiceConnections = default, IEnumerable<DataReplicationPrivateLinkServiceConnection> manualPrivateLinkServiceConnections = default, IEnumerable<DataReplicationPrivateLinkServiceProxy> privateLinkServiceProxies = default, IEnumerable<RemotePrivateEndpointConnectionDetails> connectionDetails = default)
        {
            privateLinkServiceConnections ??= new ChangeTrackingList<DataReplicationPrivateLinkServiceConnection>();
            manualPrivateLinkServiceConnections ??= new ChangeTrackingList<DataReplicationPrivateLinkServiceConnection>();
            privateLinkServiceProxies ??= new ChangeTrackingList<DataReplicationPrivateLinkServiceProxy>();
            connectionDetails ??= new ChangeTrackingList<RemotePrivateEndpointConnectionDetails>();

            return new RemotePrivateEndpoint(
                id,
                privateLinkServiceConnections.ToList(),
                manualPrivateLinkServiceConnections.ToList(),
                privateLinkServiceProxies.ToList(),
                connectionDetails.ToList(),
                additionalBinaryDataProperties: null);
        }

        /// <summary> Represents of an NRP private link service connection. </summary>
        /// <param name="name"> Gets or sets private link service connection name. </param>
        /// <param name="groupIds"> Gets or sets group ids. </param>
        /// <param name="requestMessage"> Gets or sets the request message for the private link service connection. </param>
        /// <returns> A new <see cref="Models.DataReplicationPrivateLinkServiceConnection"/> instance for mocking. </returns>
        public static DataReplicationPrivateLinkServiceConnection DataReplicationPrivateLinkServiceConnection(string name = default, IEnumerable<string> groupIds = default, string requestMessage = default)
        {
            groupIds ??= new ChangeTrackingList<string>();

            return new DataReplicationPrivateLinkServiceConnection(name, groupIds.ToList(), requestMessage, additionalBinaryDataProperties: null);
        }

        /// <param name="id"> Gets or sets private link service proxy id. </param>
        /// <param name="remotePrivateLinkServiceConnectionState"> Represents Private link service connection state. </param>
        /// <param name="remotePrivateEndpointConnectionId"> Gets or sets the remote private endpoint connection id. </param>
        /// <param name="groupConnectivityInformation"> Gets or sets group connectivity information. </param>
        /// <returns> A new <see cref="Models.DataReplicationPrivateLinkServiceProxy"/> instance for mocking. </returns>
        public static DataReplicationPrivateLinkServiceProxy DataReplicationPrivateLinkServiceProxy(string id = default, DataReplicationPrivateLinkServiceConnectionState remotePrivateLinkServiceConnectionState = default, string remotePrivateEndpointConnectionId = default, IEnumerable<GroupConnectivityInformation> groupConnectivityInformation = default)
        {
            groupConnectivityInformation ??= new ChangeTrackingList<GroupConnectivityInformation>();

            return new DataReplicationPrivateLinkServiceProxy(id, remotePrivateLinkServiceConnectionState, remotePrivateEndpointConnectionId is null ? default : new RemotePrivateEndpointConnection(remotePrivateEndpointConnectionId, new Dictionary<string, BinaryData>()), groupConnectivityInformation.ToList(), additionalBinaryDataProperties: null);
        }

        /// <summary> Represents of a connection's group information. </summary>
        /// <param name="groupId"> Gets or sets group id. </param>
        /// <param name="memberName"> Gets or sets member name. </param>
        /// <param name="customerVisibleFqdns"> Gets or sets customer visible FQDNs. </param>
        /// <param name="internalFqdn"> Gets or sets Internal Fqdn. </param>
        /// <param name="redirectMapId"> Gets or sets the redirect map id. </param>
        /// <param name="privateLinkServiceArmRegion"> Gets or sets the private link service arm region. </param>
        /// <returns> A new <see cref="Models.GroupConnectivityInformation"/> instance for mocking. </returns>
        public static GroupConnectivityInformation GroupConnectivityInformation(string groupId = default, string memberName = default, IEnumerable<string> customerVisibleFqdns = default, string internalFqdn = default, string redirectMapId = default, string privateLinkServiceArmRegion = default)
        {
            customerVisibleFqdns ??= new ChangeTrackingList<string>();

            return new GroupConnectivityInformation(
                groupId,
                memberName,
                customerVisibleFqdns.ToList(),
                internalFqdn,
                redirectMapId,
                privateLinkServiceArmRegion,
                additionalBinaryDataProperties: null);
        }

        /// <summary> Represents private link resource. </summary>
        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="resourceType"> The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts". </param>
        /// <param name="systemData"> Azure Resource Manager metadata containing createdBy and modifiedBy information. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="RecoveryServicesDataReplication.DataReplicationPrivateLinkResourceData"/> instance for mocking. </returns>
        public static DataReplicationPrivateLinkResourceData DataReplicationPrivateLinkResourceData(ResourceIdentifier id = default, string name = default, ResourceType resourceType = default, SystemData systemData = default, DataReplicationPrivateLinkResourceProperties properties = default)
        {
            return new DataReplicationPrivateLinkResourceData(
                id,
                name,
                resourceType,
                systemData,
                additionalBinaryDataProperties: null,
                properties);
        }

        /// <summary> Represents private link resource properties. </summary>
        /// <param name="groupId"> Gets or sets the group id. </param>
        /// <param name="requiredMembers"> Gets or sets the required member. This translates to how many Private IPs should be created for each privately linkable resource. </param>
        /// <param name="requiredZoneNames"> Gets or sets the private DNS zone names. </param>
        /// <param name="provisioningState"> Gets or sets the provisioning state of the private link resource. </param>
        /// <returns> A new <see cref="Models.DataReplicationPrivateLinkResourceProperties"/> instance for mocking. </returns>
        public static DataReplicationPrivateLinkResourceProperties DataReplicationPrivateLinkResourceProperties(string groupId = default, IEnumerable<string> requiredMembers = default, IEnumerable<string> requiredZoneNames = default, DataReplicationProvisioningState? provisioningState = default)
        {
            requiredMembers ??= new ChangeTrackingList<string>();
            requiredZoneNames ??= new ChangeTrackingList<string>();

            return new DataReplicationPrivateLinkResourceProperties(groupId, requiredMembers.ToList(), requiredZoneNames.ToList(), provisioningState, additionalBinaryDataProperties: null);
        }

        /// <summary> Protected item model. </summary>
        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="resourceType"> The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts". </param>
        /// <param name="systemData"> Azure Resource Manager metadata containing createdBy and modifiedBy information. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="RecoveryServicesDataReplication.DataReplicationProtectedItemData"/> instance for mocking. </returns>
        public static DataReplicationProtectedItemData DataReplicationProtectedItemData(ResourceIdentifier id = default, string name = default, ResourceType resourceType = default, SystemData systemData = default, DataReplicationProtectedItemProperties properties = default)
        {
            return new DataReplicationProtectedItemData(
                id,
                name,
                resourceType,
                systemData,
                additionalBinaryDataProperties: null,
                properties);
        }

        /// <param name="policyName"> Gets or sets the policy name. </param>
        /// <param name="replicationExtensionName"> Gets or sets the replication extension name. </param>
        /// <param name="correlationId"> Gets or sets the protected item correlation Id. </param>
        /// <param name="provisioningState"> Gets or sets the provisioning state of the fabric agent. </param>
        /// <param name="protectionState"> Gets or sets the protection state. </param>
        /// <param name="protectionStateDescription"> Gets or sets the protection state description. </param>
        /// <param name="testFailoverState"> Gets or sets the test failover state. </param>
        /// <param name="testFailoverStateDescription"> Gets or sets the Test failover state description. </param>
        /// <param name="resynchronizationState"> Gets or sets the resynchronization state. </param>
        /// <param name="fabricObjectId"> Gets or sets the fabric object Id. </param>
        /// <param name="fabricObjectName"> Gets or sets the fabric object name. </param>
        /// <param name="sourceFabricProviderId"> Gets or sets the source fabric provider Id. </param>
        /// <param name="targetFabricProviderId"> Gets or sets the target fabric provider Id. </param>
        /// <param name="fabricId"> Gets or sets the fabric Id. </param>
        /// <param name="targetFabricId"> Gets or sets the target fabric Id. </param>
        /// <param name="fabricAgentId"> Gets or sets the fabric agent Id. </param>
        /// <param name="targetFabricAgentId"> Gets or sets the target fabric agent Id. </param>
        /// <param name="isResyncRequired"> Gets or sets a value indicating whether resynchronization is required or not. </param>
        /// <param name="lastSuccessfulPlannedFailoverTime"> Gets or sets the Last successful planned failover time. </param>
        /// <param name="lastSuccessfulUnplannedFailoverTime"> Gets or sets the Last successful unplanned failover time. </param>
        /// <param name="lastSuccessfulTestFailoverTime"> Gets or sets the Last successful test failover time. </param>
        /// <param name="currentJob"> Gets or sets the current scenario. </param>
        /// <param name="allowedJobs"> Gets or sets the allowed scenarios on the protected item. </param>
        /// <param name="lastFailedEnableProtectionJob"> Gets or sets the last failed enabled protection job. </param>
        /// <param name="lastFailedPlannedFailoverJob"> Gets or sets the last failed planned failover job. </param>
        /// <param name="lastTestFailoverJob"> Gets or sets the last test failover job. </param>
        /// <param name="replicationHealth"> Gets or sets protected item replication health. </param>
        /// <param name="healthErrors"> Gets or sets the list of health errors. </param>
        /// <param name="customInstanceType"> Discriminator property for DataReplicationProtectedItemCustomProperties. </param>
        /// <returns> A new <see cref="Models.DataReplicationProtectedItemProperties"/> instance for mocking. </returns>
        public static DataReplicationProtectedItemProperties DataReplicationProtectedItemProperties(string policyName = default, string replicationExtensionName = default, string correlationId = default, DataReplicationProvisioningState? provisioningState = default, DataReplicationProtectionState? protectionState = default, string protectionStateDescription = default, DataReplicationTestFailoverState? testFailoverState = default, string testFailoverStateDescription = default, DataReplicationResynchronizationState? resynchronizationState = default, string fabricObjectId = default, string fabricObjectName = default, string sourceFabricProviderId = default, string targetFabricProviderId = default, string fabricId = default, string targetFabricId = default, string fabricAgentId = default, string targetFabricAgentId = default, bool? isResyncRequired = default, DateTimeOffset? lastSuccessfulPlannedFailoverTime = default, DateTimeOffset? lastSuccessfulUnplannedFailoverTime = default, DateTimeOffset? lastSuccessfulTestFailoverTime = default, ProtectedItemJobProperties currentJob = default, IEnumerable<string> allowedJobs = default, ProtectedItemJobProperties lastFailedEnableProtectionJob = default, ProtectedItemJobProperties lastFailedPlannedFailoverJob = default, ProtectedItemJobProperties lastTestFailoverJob = default, DataReplicationHealthStatus? replicationHealth = default, IEnumerable<DataReplicationHealthErrorInfo> healthErrors = default, string customInstanceType = default)
        {
            allowedJobs ??= new ChangeTrackingList<string>();
            healthErrors ??= new ChangeTrackingList<DataReplicationHealthErrorInfo>();

            return new DataReplicationProtectedItemProperties(
                policyName,
                replicationExtensionName,
                correlationId,
                provisioningState,
                protectionState,
                protectionStateDescription,
                testFailoverState,
                testFailoverStateDescription,
                resynchronizationState,
                fabricObjectId,
                fabricObjectName,
                sourceFabricProviderId,
                targetFabricProviderId,
                fabricId,
                targetFabricId,
                fabricAgentId,
                targetFabricAgentId,
                isResyncRequired,
                lastSuccessfulPlannedFailoverTime,
                lastSuccessfulUnplannedFailoverTime,
                lastSuccessfulTestFailoverTime,
                currentJob,
                allowedJobs.ToList(),
                lastFailedEnableProtectionJob,
                lastFailedPlannedFailoverJob,
                lastTestFailoverJob,
                replicationHealth,
                healthErrors.ToList(),
                customInstanceType is null ? default : new Models.DataReplicationProtectedItemCustomProperties(customInstanceType, new Dictionary<string, BinaryData>()),
                additionalBinaryDataProperties: null);
        }

        /// <summary> Protected item job properties. </summary>
        /// <param name="scenarioName"> Gets or sets protection scenario name. </param>
        /// <param name="id"> Gets or sets job Id. </param>
        /// <param name="name"> Gets or sets job name. </param>
        /// <param name="displayName"> Gets or sets the job friendly display name. </param>
        /// <param name="state"> Gets or sets job state. </param>
        /// <param name="startTime"> Gets or sets start time of the job. </param>
        /// <param name="endTime"> Gets or sets end time of the job. </param>
        /// <returns> A new <see cref="Models.ProtectedItemJobProperties"/> instance for mocking. </returns>
        public static ProtectedItemJobProperties ProtectedItemJobProperties(string scenarioName = default, string id = default, string name = default, string displayName = default, string state = default, DateTimeOffset? startTime = default, DateTimeOffset? endTime = default)
        {
            return new ProtectedItemJobProperties(
                scenarioName,
                id,
                name,
                displayName,
                state,
                startTime,
                endTime,
                additionalBinaryDataProperties: null);
        }

        /// <summary> HyperV to AzStackHCI Protected item model custom properties. </summary>
        /// <param name="activeLocation"> Gets or sets the location of the protected item. </param>
        /// <param name="targetHciClusterId"> Gets or sets the Target HCI Cluster ARM Id. </param>
        /// <param name="targetArcClusterCustomLocationId"> Gets or sets the Target Arc Cluster Custom Location ARM Id. </param>
        /// <param name="targetAzStackHciClusterName"> Gets or sets the Target AzStackHCI cluster name. </param>
        /// <param name="fabricDiscoveryMachineId"> Gets or sets the ARM Id of the discovered machine. </param>
        /// <param name="disksToInclude"> Gets or sets the list of disks to replicate. </param>
        /// <param name="nicsToInclude"> Gets or sets the list of VM NIC to replicate. </param>
        /// <param name="sourceVmName"> Gets or sets the source VM display name. </param>
        /// <param name="sourceCpuCores"> Gets or sets the source VM CPU cores. </param>
        /// <param name="sourceMemoryInMegaBytes"> Gets or sets the source VM ram memory size in megabytes. </param>
        /// <param name="targetVmName"> Gets or sets the target VM display name. </param>
        /// <param name="targetResourceGroupId"> Gets or sets the target resource group ARM Id. </param>
        /// <param name="storageContainerId"> Gets or sets the target storage container ARM Id. </param>
        /// <param name="hyperVGeneration"> Gets or sets the hypervisor generation of the virtual machine. </param>
        /// <param name="targetNetworkId"> Gets or sets the target network Id within AzStackHCI Cluster. </param>
        /// <param name="testNetworkId"> Gets or sets the target test network Id within AzStackHCI Cluster. </param>
        /// <param name="targetCpuCores"> Gets or sets the target CPU cores. </param>
        /// <param name="isDynamicRam"> Gets or sets a value indicating whether memory is dynamical. </param>
        /// <param name="dynamicMemoryConfig"> Protected item dynamic memory config. </param>
        /// <param name="targetMemoryInMegaBytes"> Gets or sets the target memory in mega-bytes. </param>
        /// <param name="runAsAccountId"> Gets or sets the Run As account Id. </param>
        /// <param name="sourceFabricAgentName"> Gets or sets the source fabric agent name. </param>
        /// <param name="targetFabricAgentName"> Gets or sets the target fabric agent name. </param>
        /// <param name="sourceApplianceName"> Gets or sets the source appliance name. </param>
        /// <param name="targetApplianceName"> Gets or sets the target appliance name. </param>
        /// <param name="osType"> Gets or sets the type of the OS. </param>
        /// <param name="osName"> Gets or sets the name of the OS. </param>
        /// <param name="firmwareType"> Gets or sets the firmware type. </param>
        /// <param name="targetLocation"> Gets or sets the target location. </param>
        /// <param name="customLocationRegion"> Gets or sets the location of Azure Arc HCI custom location resource. </param>
        /// <param name="failoverRecoveryPointId"> Gets or sets the recovery point Id to which the VM was failed over. </param>
        /// <param name="lastRecoveryPointReceivedOn"> Gets or sets the last recovery point received time. </param>
        /// <param name="lastRecoveryPointId"> Gets or sets the last recovery point Id. </param>
        /// <param name="initialReplicationProgressPercentage"> Gets or sets the initial replication progress percentage. This is calculated based on total bytes processed for all disks in the source VM. </param>
        /// <param name="resyncProgressPercentage"> Gets or sets the resync progress percentage. This is calculated based on total bytes processed for all disks in the source VM. </param>
        /// <param name="protectedDisks"> Gets or sets the list of protected disks. </param>
        /// <param name="protectedNics"> Gets or sets the VM NIC details. </param>
        /// <param name="targetVmBiosId"> Gets or sets the BIOS Id of the target AzStackHCI VM. </param>
        /// <param name="lastReplicationUpdateTime"> Gets or sets the latest timestamp that replication status is updated. </param>
        /// <returns> A new <see cref="Models.HyperVToAzStackHciProtectedItemCustomProperties"/> instance for mocking. </returns>
        public static HyperVToAzStackHciProtectedItemCustomProperties HyperVToAzStackHciProtectedItemCustomProperties(ProtectedItemActiveLocation? activeLocation = default, ResourceIdentifier targetHciClusterId = default, ResourceIdentifier targetArcClusterCustomLocationId = default, string targetAzStackHciClusterName = default, ResourceIdentifier fabricDiscoveryMachineId = default, IEnumerable<HyperVToAzStackHCIDiskInput> disksToInclude = default, IEnumerable<HyperVToAzStackHCINicInput> nicsToInclude = default, string sourceVmName = default, int? sourceCpuCores = default, double? sourceMemoryInMegaBytes = default, string targetVmName = default, ResourceIdentifier targetResourceGroupId = default, ResourceIdentifier storageContainerId = default, string hyperVGeneration = default, string targetNetworkId = default, string testNetworkId = default, int? targetCpuCores = default, bool? isDynamicRam = default, ProtectedItemDynamicMemoryConfig dynamicMemoryConfig = default, int? targetMemoryInMegaBytes = default, string runAsAccountId = default, string sourceFabricAgentName = default, string targetFabricAgentName = default, string sourceApplianceName = default, string targetApplianceName = default, string osType = default, string osName = default, string firmwareType = default, string targetLocation = default, string customLocationRegion = default, string failoverRecoveryPointId = default, DateTimeOffset? lastRecoveryPointReceivedOn = default, string lastRecoveryPointId = default, int? initialReplicationProgressPercentage = default, int? resyncProgressPercentage = default, IEnumerable<HyperVToAzStackHCIProtectedDiskProperties> protectedDisks = default, IEnumerable<HyperVToAzStackHCIProtectedNicProperties> protectedNics = default, string targetVmBiosId = default, DateTimeOffset? lastReplicationUpdateTime = default)
        {
            disksToInclude ??= new ChangeTrackingList<HyperVToAzStackHCIDiskInput>();
            nicsToInclude ??= new ChangeTrackingList<HyperVToAzStackHCINicInput>();
            protectedDisks ??= new ChangeTrackingList<HyperVToAzStackHCIProtectedDiskProperties>();
            protectedNics ??= new ChangeTrackingList<HyperVToAzStackHCIProtectedNicProperties>();

            return new HyperVToAzStackHciProtectedItemCustomProperties(
                "HyperVToAzStackHCI",
                additionalBinaryDataProperties: null,
                activeLocation,
                targetHciClusterId,
                targetArcClusterCustomLocationId,
                targetAzStackHciClusterName,
                fabricDiscoveryMachineId,
                disksToInclude.ToList(),
                nicsToInclude.ToList(),
                sourceVmName,
                sourceCpuCores,
                sourceMemoryInMegaBytes,
                targetVmName,
                targetResourceGroupId,
                storageContainerId,
                hyperVGeneration,
                targetNetworkId,
                testNetworkId,
                targetCpuCores,
                isDynamicRam,
                dynamicMemoryConfig,
                targetMemoryInMegaBytes,
                runAsAccountId,
                sourceFabricAgentName,
                targetFabricAgentName,
                sourceApplianceName,
                targetApplianceName,
                osType,
                osName,
                firmwareType,
                targetLocation,
                customLocationRegion,
                failoverRecoveryPointId,
                lastRecoveryPointReceivedOn,
                lastRecoveryPointId,
                initialReplicationProgressPercentage,
                resyncProgressPercentage,
                protectedDisks.ToList(),
                protectedNics.ToList(),
                targetVmBiosId,
                lastReplicationUpdateTime);
        }

        /// <summary> HyperVToAzStackHCI NIC properties. </summary>
        /// <param name="nicId"> Gets or sets the NIC Id. </param>
        /// <param name="networkName"> Gets or sets the network name. </param>
        /// <param name="targetNetworkId"> Gets or sets the target network Id within AzStackHCI Cluster. </param>
        /// <param name="testNetworkId"> Gets or sets the target test network Id within AzStackHCI Cluster. </param>
        /// <param name="selectionTypeForFailover"> Gets or sets the selection type of the NIC. </param>
        /// <param name="isStaticIpMigrationEnabled"> Gets or sets a value indicating whether static ip migration is enabled. </param>
        /// <param name="isMacMigrationEnabled"> Gets or sets a value indicating whether mac address migration is enabled. </param>
        /// <returns> A new <see cref="Models.HyperVToAzStackHCINicInput"/> instance for mocking. </returns>
        public static HyperVToAzStackHCINicInput HyperVToAzStackHCINicInput(string nicId = default, string networkName = default, string targetNetworkId = default, string testNetworkId = default, VMNicSelection selectionTypeForFailover = default, bool? isStaticIpMigrationEnabled = default, bool? isMacMigrationEnabled = default)
        {
            return new HyperVToAzStackHCINicInput(
                nicId,
                networkName,
                targetNetworkId,
                testNetworkId,
                selectionTypeForFailover,
                isStaticIpMigrationEnabled,
                isMacMigrationEnabled,
                additionalBinaryDataProperties: null);
        }

        /// <summary> HyperVToAzStackHCI protected disk properties. </summary>
        /// <param name="storageContainerId"> Gets or sets the ARM Id of the storage container. </param>
        /// <param name="storageContainerLocalPath"> Gets or sets the local path of the storage container. </param>
        /// <param name="sourceDiskId"> Gets or sets the source disk Id. </param>
        /// <param name="sourceDiskName"> Gets or sets the source disk Name. </param>
        /// <param name="seedDiskName"> Gets or sets the seed disk name. </param>
        /// <param name="testMigrateDiskName"> Gets or sets the test failover clone disk. </param>
        /// <param name="migrateDiskName"> Gets or sets the failover clone disk. </param>
        /// <param name="isOsDisk"> Gets or sets a value indicating whether the disk is the OS disk. </param>
        /// <param name="capacityInBytes"> Gets or sets the disk capacity in bytes. </param>
        /// <param name="isDynamic"> Gets or sets a value indicating whether dynamic sizing is enabled on the virtual hard disk. </param>
        /// <param name="diskType"> Gets or sets the disk type. </param>
        /// <param name="diskBlockSize"> Gets or sets a value of disk block size. </param>
        /// <param name="diskLogicalSectorSize"> Gets or sets a value of disk logical sector size. </param>
        /// <param name="diskPhysicalSectorSize"> Gets or sets a value of disk physical sector size. </param>
        /// <returns> A new <see cref="Models.HyperVToAzStackHCIProtectedDiskProperties"/> instance for mocking. </returns>
        public static HyperVToAzStackHCIProtectedDiskProperties HyperVToAzStackHCIProtectedDiskProperties(ResourceIdentifier storageContainerId = default, string storageContainerLocalPath = default, string sourceDiskId = default, string sourceDiskName = default, string seedDiskName = default, string testMigrateDiskName = default, string migrateDiskName = default, bool? isOsDisk = default, long? capacityInBytes = default, bool? isDynamic = default, string diskType = default, long? diskBlockSize = default, long? diskLogicalSectorSize = default, long? diskPhysicalSectorSize = default)
        {
            return new HyperVToAzStackHCIProtectedDiskProperties(
                storageContainerId,
                storageContainerLocalPath,
                sourceDiskId,
                sourceDiskName,
                seedDiskName,
                testMigrateDiskName,
                migrateDiskName,
                isOsDisk,
                capacityInBytes,
                isDynamic,
                diskType,
                diskBlockSize,
                diskLogicalSectorSize,
                diskPhysicalSectorSize,
                additionalBinaryDataProperties: null);
        }

        /// <summary> HyperVToAzStackHCI NIC properties. </summary>
        /// <param name="nicId"> Gets or sets the NIC Id. </param>
        /// <param name="macAddress"> Gets or sets the NIC mac address. </param>
        /// <param name="networkName"> Gets or sets the network name. </param>
        /// <param name="targetNetworkId"> Gets or sets the target network Id within AzStackHCI Cluster. </param>
        /// <param name="testNetworkId"> Gets or sets the target test network Id within AzStackHCI Cluster. </param>
        /// <param name="selectionTypeForFailover"> Gets or sets the selection type of the NIC. </param>
        /// <returns> A new <see cref="Models.HyperVToAzStackHCIProtectedNicProperties"/> instance for mocking. </returns>
        public static HyperVToAzStackHCIProtectedNicProperties HyperVToAzStackHCIProtectedNicProperties(string nicId = default, string macAddress = default, string networkName = default, string targetNetworkId = default, string testNetworkId = default, VMNicSelection? selectionTypeForFailover = default)
        {
            return new HyperVToAzStackHCIProtectedNicProperties(
                nicId,
                macAddress,
                networkName,
                targetNetworkId,
                testNetworkId,
                selectionTypeForFailover,
                additionalBinaryDataProperties: null);
        }

        /// <summary> VMware to AzStackHCI Protected item model custom properties. </summary>
        /// <param name="activeLocation"> Gets or sets the location of the protected item. </param>
        /// <param name="targetHciClusterId"> Gets or sets the Target HCI Cluster ARM Id. </param>
        /// <param name="targetArcClusterCustomLocationId"> Gets or sets the Target Arc Cluster Custom Location ARM Id. </param>
        /// <param name="targetAzStackHciClusterName"> Gets or sets the Target AzStackHCI cluster name. </param>
        /// <param name="storageContainerId"> Gets or sets the target storage container ARM Id. </param>
        /// <param name="targetResourceGroupId"> Gets or sets the target resource group ARM Id. </param>
        /// <param name="targetLocation"> Gets or sets the target location. </param>
        /// <param name="customLocationRegion"> Gets or sets the location of Azure Arc HCI custom location resource. </param>
        /// <param name="disksToInclude"> Gets or sets the list of disks to replicate. </param>
        /// <param name="nicsToInclude"> Gets or sets the list of VM NIC to replicate. </param>
        /// <param name="protectedDisks"> Gets or sets the list of protected disks. </param>
        /// <param name="protectedNics"> Gets or sets the VM NIC details. </param>
        /// <param name="targetVmBiosId"> Gets or sets the BIOS Id of the target AzStackHCI VM. </param>
        /// <param name="targetVmName"> Gets or sets the target VM display name. </param>
        /// <param name="hyperVGeneration"> Gets or sets the hypervisor generation of the virtual machine possible values are 1,2. </param>
        /// <param name="targetNetworkId"> Gets or sets the target network Id within AzStackHCI Cluster. </param>
        /// <param name="testNetworkId"> Gets or sets the target test network Id within AzStackHCI Cluster. </param>
        /// <param name="targetCpuCores"> Gets or sets the target CPU cores. </param>
        /// <param name="isDynamicRam"> Gets or sets a value indicating whether memory is dynamical. </param>
        /// <param name="dynamicMemoryConfig"> Protected item dynamic memory config. </param>
        /// <param name="targetMemoryInMegaBytes"> Gets or sets the target memory in mega-bytes. </param>
        /// <param name="osType"> Gets or sets the type of the OS. </param>
        /// <param name="osName"> Gets or sets the name of the OS. </param>
        /// <param name="firmwareType"> Gets or sets the firmware type. </param>
        /// <param name="fabricDiscoveryMachineId"> Gets or sets the ARM Id of the discovered machine. </param>
        /// <param name="sourceVmName"> Gets or sets the source VM display name. </param>
        /// <param name="sourceCpuCores"> Gets or sets the source VM CPU cores. </param>
        /// <param name="sourceMemoryInMegaBytes"> Gets or sets the source VM ram memory size in megabytes. </param>
        /// <param name="runAsAccountId"> Gets or sets the run as account Id. </param>
        /// <param name="sourceFabricAgentName"> Gets or sets the source fabric agent name. </param>
        /// <param name="targetFabricAgentName"> Gets or sets the target fabric agent name. </param>
        /// <param name="sourceApplianceName"> Gets or sets the source appliance name. </param>
        /// <param name="targetApplianceName"> Gets or sets the target appliance name. </param>
        /// <param name="failoverRecoveryPointId"> Gets or sets the recovery point Id to which the VM was failed over. </param>
        /// <param name="lastRecoveryPointReceivedOn"> Gets or sets the last recovery point received time. </param>
        /// <param name="lastRecoveryPointId"> Gets or sets the last recovery point Id. </param>
        /// <param name="initialReplicationProgressPercentage"> Gets or sets the initial replication progress percentage. This is calculated based on total bytes processed for all disks in the source VM. </param>
        /// <param name="migrationProgressPercentage"> Gets or sets the migration progress percentage. </param>
        /// <param name="resumeProgressPercentage"> Gets or sets the resume progress percentage. </param>
        /// <param name="resyncProgressPercentage"> Gets or sets the resync progress percentage. This is calculated based on total bytes processed for all disks in the source VM. </param>
        /// <param name="resyncRetryCount"> Gets or sets the resync retry count. </param>
        /// <param name="resyncRequired"> Gets or sets a value indicating whether resync is required. </param>
        /// <param name="resyncState"> Gets or sets the resync state. </param>
        /// <param name="performAutoResync"> Gets or sets a value indicating whether auto resync is to be done. </param>
        /// <param name="resumeRetryCount"> Gets or sets the resume retry count. </param>
        /// <param name="lastReplicationUpdateTime"> Gets or sets the latest timestamp that replication status is updated. </param>
        /// <returns> A new <see cref="Models.VMwareToAzStackHCIProtectedItemCustomProperties"/> instance for mocking. </returns>
        public static VMwareToAzStackHCIProtectedItemCustomProperties VMwareToAzStackHCIProtectedItemCustomProperties(ProtectedItemActiveLocation? activeLocation = default, ResourceIdentifier targetHciClusterId = default, ResourceIdentifier targetArcClusterCustomLocationId = default, string targetAzStackHciClusterName = default, ResourceIdentifier storageContainerId = default, ResourceIdentifier targetResourceGroupId = default, string targetLocation = default, string customLocationRegion = default, IEnumerable<VMwareToAzStackHCIDiskInput> disksToInclude = default, IEnumerable<VMwareToAzStackHCINicInput> nicsToInclude = default, IEnumerable<VMwareToAzStackHCIProtectedDiskProperties> protectedDisks = default, IEnumerable<VMwareToAzStackHCIProtectedNicProperties> protectedNics = default, string targetVmBiosId = default, string targetVmName = default, string hyperVGeneration = default, string targetNetworkId = default, string testNetworkId = default, int? targetCpuCores = default, bool? isDynamicRam = default, ProtectedItemDynamicMemoryConfig dynamicMemoryConfig = default, int? targetMemoryInMegaBytes = default, string osType = default, string osName = default, string firmwareType = default, ResourceIdentifier fabricDiscoveryMachineId = default, string sourceVmName = default, int? sourceCpuCores = default, double? sourceMemoryInMegaBytes = default, string runAsAccountId = default, string sourceFabricAgentName = default, string targetFabricAgentName = default, string sourceApplianceName = default, string targetApplianceName = default, string failoverRecoveryPointId = default, DateTimeOffset? lastRecoveryPointReceivedOn = default, string lastRecoveryPointId = default, int? initialReplicationProgressPercentage = default, int? migrationProgressPercentage = default, int? resumeProgressPercentage = default, int? resyncProgressPercentage = default, long? resyncRetryCount = default, bool? resyncRequired = default, VMwareToAzureMigrateResyncState? resyncState = default, bool? performAutoResync = default, long? resumeRetryCount = default, DateTimeOffset? lastReplicationUpdateTime = default)
        {
            disksToInclude ??= new ChangeTrackingList<VMwareToAzStackHCIDiskInput>();
            nicsToInclude ??= new ChangeTrackingList<VMwareToAzStackHCINicInput>();
            protectedDisks ??= new ChangeTrackingList<VMwareToAzStackHCIProtectedDiskProperties>();
            protectedNics ??= new ChangeTrackingList<VMwareToAzStackHCIProtectedNicProperties>();

            return new VMwareToAzStackHCIProtectedItemCustomProperties(
                "VMwareToAzStackHCI",
                additionalBinaryDataProperties: null,
                activeLocation,
                targetHciClusterId,
                targetArcClusterCustomLocationId,
                targetAzStackHciClusterName,
                storageContainerId,
                targetResourceGroupId,
                targetLocation,
                customLocationRegion,
                disksToInclude.ToList(),
                nicsToInclude.ToList(),
                protectedDisks.ToList(),
                protectedNics.ToList(),
                targetVmBiosId,
                targetVmName,
                hyperVGeneration,
                targetNetworkId,
                testNetworkId,
                targetCpuCores,
                isDynamicRam,
                dynamicMemoryConfig,
                targetMemoryInMegaBytes,
                osType,
                osName,
                firmwareType,
                fabricDiscoveryMachineId,
                sourceVmName,
                sourceCpuCores,
                sourceMemoryInMegaBytes,
                runAsAccountId,
                sourceFabricAgentName,
                targetFabricAgentName,
                sourceApplianceName,
                targetApplianceName,
                failoverRecoveryPointId,
                lastRecoveryPointReceivedOn,
                lastRecoveryPointId,
                initialReplicationProgressPercentage,
                migrationProgressPercentage,
                resumeProgressPercentage,
                resyncProgressPercentage,
                resyncRetryCount,
                resyncRequired,
                resyncState,
                performAutoResync,
                resumeRetryCount,
                lastReplicationUpdateTime);
        }

        /// <summary> VMwareToAzStackHCI NIC properties. </summary>
        /// <param name="nicId"> Gets or sets the NIC Id. </param>
        /// <param name="label"> Gets or sets the NIC label. </param>
        /// <param name="networkName"> Gets or sets the network name. </param>
        /// <param name="targetNetworkId"> Gets or sets the target network Id within AzStackHCI Cluster. </param>
        /// <param name="testNetworkId"> Gets or sets the target test network Id within AzStackHCI Cluster. </param>
        /// <param name="selectionTypeForFailover"> Gets or sets the selection type of the NIC. </param>
        /// <param name="isStaticIpMigrationEnabled"> Gets or sets a value indicating whether static ip migration is enabled. </param>
        /// <param name="isMacMigrationEnabled"> Gets or sets a value indicating whether mac address migration is enabled. </param>
        /// <returns> A new <see cref="Models.VMwareToAzStackHCINicInput"/> instance for mocking. </returns>
        public static VMwareToAzStackHCINicInput VMwareToAzStackHCINicInput(string nicId = default, string label = default, string networkName = default, string targetNetworkId = default, string testNetworkId = default, VMNicSelection selectionTypeForFailover = default, bool? isStaticIpMigrationEnabled = default, bool? isMacMigrationEnabled = default)
        {
            return new VMwareToAzStackHCINicInput(
                nicId,
                label,
                networkName,
                targetNetworkId,
                testNetworkId,
                selectionTypeForFailover,
                isStaticIpMigrationEnabled,
                isMacMigrationEnabled,
                additionalBinaryDataProperties: null);
        }

        /// <summary> VMwareToAzStackHCI protected disk properties. </summary>
        /// <param name="storageContainerId"> Gets or sets the ARM Id of the storage container. </param>
        /// <param name="storageContainerLocalPath"> Gets or sets the local path of the storage container. </param>
        /// <param name="sourceDiskId"> Gets or sets the source disk Id. </param>
        /// <param name="sourceDiskName"> Gets or sets the source disk Name. </param>
        /// <param name="seedDiskName"> Gets or sets the seed disk name. </param>
        /// <param name="testMigrateDiskName"> Gets or sets the test failover clone disk. </param>
        /// <param name="migrateDiskName"> Gets or sets the failover clone disk. </param>
        /// <param name="isOsDisk"> Gets or sets a value indicating whether the disk is the OS disk. </param>
        /// <param name="capacityInBytes"> Gets or sets the disk capacity in bytes. </param>
        /// <param name="isDynamic"> Gets or sets a value indicating whether dynamic sizing is enabled on the virtual hard disk. </param>
        /// <param name="diskType"> Gets or sets the disk type. </param>
        /// <param name="diskBlockSize"> Gets or sets a value of disk block size. </param>
        /// <param name="diskLogicalSectorSize"> Gets or sets a value of disk logical sector size. </param>
        /// <param name="diskPhysicalSectorSize"> Gets or sets a value of disk physical sector size. </param>
        /// <returns> A new <see cref="Models.VMwareToAzStackHCIProtectedDiskProperties"/> instance for mocking. </returns>
        public static VMwareToAzStackHCIProtectedDiskProperties VMwareToAzStackHCIProtectedDiskProperties(ResourceIdentifier storageContainerId = default, string storageContainerLocalPath = default, string sourceDiskId = default, string sourceDiskName = default, string seedDiskName = default, string testMigrateDiskName = default, string migrateDiskName = default, bool? isOsDisk = default, long? capacityInBytes = default, bool? isDynamic = default, string diskType = default, long? diskBlockSize = default, long? diskLogicalSectorSize = default, long? diskPhysicalSectorSize = default)
        {
            return new VMwareToAzStackHCIProtectedDiskProperties(
                storageContainerId,
                storageContainerLocalPath,
                sourceDiskId,
                sourceDiskName,
                seedDiskName,
                testMigrateDiskName,
                migrateDiskName,
                isOsDisk,
                capacityInBytes,
                isDynamic,
                diskType,
                diskBlockSize,
                diskLogicalSectorSize,
                diskPhysicalSectorSize,
                additionalBinaryDataProperties: null);
        }

        /// <summary> VMwareToAzStackHCI NIC properties. </summary>
        /// <param name="nicId"> Gets or sets the NIC Id. </param>
        /// <param name="macAddress"> Gets or sets the NIC mac address. </param>
        /// <param name="label"> Gets or sets the NIC label. </param>
        /// <param name="isPrimaryNic"> Gets or sets a value indicating whether this is the primary NIC. </param>
        /// <param name="networkName"> Gets or sets the network name. </param>
        /// <param name="targetNetworkId"> Gets or sets the target network Id within AzStackHCI Cluster. </param>
        /// <param name="testNetworkId"> Gets or sets the target test network Id within AzStackHCI Cluster. </param>
        /// <param name="selectionTypeForFailover"> Gets or sets the selection type of the NIC. </param>
        /// <returns> A new <see cref="Models.VMwareToAzStackHCIProtectedNicProperties"/> instance for mocking. </returns>
        public static VMwareToAzStackHCIProtectedNicProperties VMwareToAzStackHCIProtectedNicProperties(string nicId = default, string macAddress = default, string label = default, bool? isPrimaryNic = default, string networkName = default, string targetNetworkId = default, string testNetworkId = default, VMNicSelection? selectionTypeForFailover = default)
        {
            return new VMwareToAzStackHCIProtectedNicProperties(
                nicId,
                macAddress,
                label,
                isPrimaryNic,
                networkName,
                targetNetworkId,
                testNetworkId,
                selectionTypeForFailover,
                additionalBinaryDataProperties: null);
        }

        /// <summary> Protected item model update. </summary>
        /// <param name="properties"> Protected item model properties. </param>
        /// <param name="id"> Gets or sets the Id of the resource. </param>
        /// <param name="name"> Gets or sets the name of the resource. </param>
        /// <param name="type"> Gets or sets the type of the resource. </param>
        /// <param name="systemData"> Metadata pertaining to creation and last modification of the resource. </param>
        /// <returns> A new <see cref="Models.DataReplicationProtectedItemPatch"/> instance for mocking. </returns>
        public static DataReplicationProtectedItemPatch DataReplicationProtectedItemPatch(DataReplicationProtectedItemPropertiesUpdate properties = default, string id = default, string name = default, string @type = default, SystemData systemData = default)
        {
            return new DataReplicationProtectedItemPatch(
                properties,
                id,
                name,
                @type,
                systemData,
                additionalBinaryDataProperties: null);
        }

        /// <summary> Recovery point model. </summary>
        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="resourceType"> The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts". </param>
        /// <param name="systemData"> Azure Resource Manager metadata containing createdBy and modifiedBy information. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="RecoveryServicesDataReplication.DataReplicationRecoveryPointData"/> instance for mocking. </returns>
        public static DataReplicationRecoveryPointData DataReplicationRecoveryPointData(ResourceIdentifier id = default, string name = default, ResourceType resourceType = default, SystemData systemData = default, DataReplicationRecoveryPointProperties properties = default)
        {
            return new DataReplicationRecoveryPointData(
                id,
                name,
                resourceType,
                systemData,
                additionalBinaryDataProperties: null,
                properties);
        }

        /// <param name="recoveryPointTime"> Gets or sets the recovery point time. </param>
        /// <param name="recoveryPointType"> Gets or sets the recovery point type. </param>
        /// <param name="customInstanceType"> Discriminator property for DataReplicationRecoveryPointCustomProperties. </param>
        /// <param name="provisioningState"> Gets or sets the provisioning state of the recovery point item. </param>
        /// <returns> A new <see cref="Models.DataReplicationRecoveryPointProperties"/> instance for mocking. </returns>
        public static DataReplicationRecoveryPointProperties DataReplicationRecoveryPointProperties(DateTimeOffset recoveryPointTime = default, DataReplicationRecoveryPointType recoveryPointType = default, string customInstanceType = default, DataReplicationProvisioningState? provisioningState = default)
        {
            return new DataReplicationRecoveryPointProperties(recoveryPointTime, recoveryPointType, customInstanceType is null ? default : new Models.DataReplicationRecoveryPointCustomProperties(customInstanceType, new Dictionary<string, BinaryData>()), provisioningState, additionalBinaryDataProperties: null);
        }

        /// <summary> Replication extension model. </summary>
        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="resourceType"> The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts". </param>
        /// <param name="systemData"> Azure Resource Manager metadata containing createdBy and modifiedBy information. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="RecoveryServicesDataReplication.DataReplicationExtensionData"/> instance for mocking. </returns>
        public static DataReplicationExtensionData DataReplicationExtensionData(ResourceIdentifier id = default, string name = default, ResourceType resourceType = default, SystemData systemData = default, DataReplicationExtensionProperties properties = default)
        {
            return new DataReplicationExtensionData(
                id,
                name,
                resourceType,
                systemData,
                additionalBinaryDataProperties: null,
                properties);
        }

        /// <param name="provisioningState"> Gets or sets the provisioning state of the replication extension. </param>
        /// <param name="customInstanceType"> Discriminator property for DataReplicationExtensionCustomProperties. </param>
        /// <returns> A new <see cref="Models.DataReplicationExtensionProperties"/> instance for mocking. </returns>
        public static DataReplicationExtensionProperties DataReplicationExtensionProperties(DataReplicationProvisioningState? provisioningState = default, string customInstanceType = default)
        {
            return new DataReplicationExtensionProperties(provisioningState, customInstanceType is null ? default : new Models.DataReplicationExtensionCustomProperties(customInstanceType, new Dictionary<string, BinaryData>()), additionalBinaryDataProperties: null);
        }

        /// <summary> HyperV to AzStackHCI Replication extension model custom properties. </summary>
        /// <param name="hyperVFabricArmId"> Gets or sets the ARM Id of the source HyperV fabric. </param>
        /// <param name="hyperVSiteId"> Gets or sets the ARM Id of the HyperV site. </param>
        /// <param name="azStackHciFabricArmId"> Gets or sets the ARM Id of the target AzStackHCI fabric. </param>
        /// <param name="azStackHciSiteId"> Gets or sets the ARM Id of the AzStackHCI site. </param>
        /// <param name="storageAccountId"> Gets or sets the storage account Id. </param>
        /// <param name="storageAccountSasSecretName"> Gets or sets the Sas Secret of storage account. </param>
        /// <param name="asrServiceUri"> Gets or sets the Uri of ASR. </param>
        /// <param name="rcmServiceUri"> Gets or sets the Uri of Rcm. </param>
        /// <param name="gatewayServiceUri"> Gets or sets the Uri of Gateway. </param>
        /// <param name="sourceGatewayServiceId"> Gets or sets the gateway service Id of source. </param>
        /// <param name="targetGatewayServiceId"> Gets or sets the gateway service Id of target. </param>
        /// <param name="sourceStorageContainerName"> Gets or sets the source storage container name. </param>
        /// <param name="targetStorageContainerName"> Gets or sets the target storage container name. </param>
        /// <param name="resourceLocation"> Gets or sets the resource location. </param>
        /// <param name="subscriptionId"> Gets or sets the subscription. </param>
        /// <param name="resourceGroup"> Gets or sets the resource group. </param>
        /// <returns> A new <see cref="Models.HyperVToAzStackHciReplicationExtensionCustomProperties"/> instance for mocking. </returns>
        public static HyperVToAzStackHciReplicationExtensionCustomProperties HyperVToAzStackHciReplicationExtensionCustomProperties(ResourceIdentifier hyperVFabricArmId = default, ResourceIdentifier hyperVSiteId = default, ResourceIdentifier azStackHciFabricArmId = default, ResourceIdentifier azStackHciSiteId = default, string storageAccountId = default, string storageAccountSasSecretName = default, Uri asrServiceUri = default, Uri rcmServiceUri = default, Uri gatewayServiceUri = default, string sourceGatewayServiceId = default, string targetGatewayServiceId = default, string sourceStorageContainerName = default, string targetStorageContainerName = default, string resourceLocation = default, string subscriptionId = default, string resourceGroup = default)
        {
            return new HyperVToAzStackHciReplicationExtensionCustomProperties(
                "HyperVToAzStackHCI",
                additionalBinaryDataProperties: null,
                hyperVFabricArmId,
                hyperVSiteId,
                azStackHciFabricArmId,
                azStackHciSiteId,
                storageAccountId,
                storageAccountSasSecretName,
                asrServiceUri,
                rcmServiceUri,
                gatewayServiceUri,
                sourceGatewayServiceId,
                targetGatewayServiceId,
                sourceStorageContainerName,
                targetStorageContainerName,
                resourceLocation,
                subscriptionId,
                resourceGroup);
        }

        /// <summary> VMware to AzStackHCI Replication extension model custom properties. </summary>
        /// <param name="vmwareFabricArmId"> Gets or sets the ARM Id of the source VMware fabric. </param>
        /// <param name="vmwareSiteId"> Gets or sets the ARM Id of the VMware site. </param>
        /// <param name="azStackHciFabricArmId"> Gets or sets the ARM Id of the target AzStackHCI fabric. </param>
        /// <param name="azStackHciSiteId"> Gets or sets the ARM Id of the AzStackHCI site. </param>
        /// <param name="storageAccountId"> Gets or sets the storage account Id. </param>
        /// <param name="storageAccountSasSecretName"> Gets or sets the Sas Secret of storage account. </param>
        /// <param name="asrServiceUri"> Gets or sets the Uri of ASR. </param>
        /// <param name="rcmServiceUri"> Gets or sets the Uri of Rcm. </param>
        /// <param name="gatewayServiceUri"> Gets or sets the Uri of Gateway. </param>
        /// <param name="sourceGatewayServiceId"> Gets or sets the gateway service Id of source. </param>
        /// <param name="targetGatewayServiceId"> Gets or sets the gateway service Id of target. </param>
        /// <param name="sourceStorageContainerName"> Gets or sets the source storage container name. </param>
        /// <param name="targetStorageContainerName"> Gets or sets the target storage container name. </param>
        /// <param name="resourceLocation"> Gets or sets the resource location. </param>
        /// <param name="subscriptionId"> Gets or sets the subscription. </param>
        /// <param name="resourceGroup"> Gets or sets the resource group. </param>
        /// <returns> A new <see cref="Models.VMwareToAzStackHCIReplicationExtensionCustomProperties"/> instance for mocking. </returns>
        public static VMwareToAzStackHCIReplicationExtensionCustomProperties VMwareToAzStackHCIReplicationExtensionCustomProperties(ResourceIdentifier vmwareFabricArmId = default, ResourceIdentifier vmwareSiteId = default, ResourceIdentifier azStackHciFabricArmId = default, ResourceIdentifier azStackHciSiteId = default, string storageAccountId = default, string storageAccountSasSecretName = default, Uri asrServiceUri = default, Uri rcmServiceUri = default, Uri gatewayServiceUri = default, string sourceGatewayServiceId = default, string targetGatewayServiceId = default, string sourceStorageContainerName = default, string targetStorageContainerName = default, string resourceLocation = default, string subscriptionId = default, string resourceGroup = default)
        {
            return new VMwareToAzStackHCIReplicationExtensionCustomProperties(
                "VMwareToAzStackHCI",
                additionalBinaryDataProperties: null,
                vmwareFabricArmId,
                vmwareSiteId,
                azStackHciFabricArmId,
                azStackHciSiteId,
                storageAccountId,
                storageAccountSasSecretName,
                asrServiceUri,
                rcmServiceUri,
                gatewayServiceUri,
                sourceGatewayServiceId,
                targetGatewayServiceId,
                sourceStorageContainerName,
                targetStorageContainerName,
                resourceLocation,
                subscriptionId,
                resourceGroup);
        }

        /// <summary> Check name availability response model. </summary>
        /// <param name="isNameAvailable"> Gets or sets a value indicating whether resource name is available or not. </param>
        /// <param name="reason"> Gets or sets the reason for resource name unavailability. </param>
        /// <param name="message"> Gets or sets the message for resource name unavailability. </param>
        /// <returns> A new <see cref="Models.DataReplicationNameAvailabilityResult"/> instance for mocking. </returns>
        public static DataReplicationNameAvailabilityResult DataReplicationNameAvailabilityResult(bool? isNameAvailable = default, string reason = default, string message = default)
        {
            return new DataReplicationNameAvailabilityResult(isNameAvailable, reason, message, additionalBinaryDataProperties: null);
        }
    }
}
