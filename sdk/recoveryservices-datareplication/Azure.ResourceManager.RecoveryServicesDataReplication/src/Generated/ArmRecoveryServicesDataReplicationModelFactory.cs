// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.RecoveryServicesDataReplication.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmRecoveryServicesDataReplicationModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Models.OperationStatus"/>. </summary>
        /// <param name="id"> Gets or sets the Id. </param>
        /// <param name="name"> Gets or sets the operation name. </param>
        /// <param name="status"> Gets or sets the status of the operation. ARM expects the terminal status to be one of Succeeded/ Failed/ Canceled. All other values imply that the operation is still running. </param>
        /// <param name="startTime"> Gets or sets the start time. </param>
        /// <param name="endTime"> Gets or sets the end time. </param>
        /// <returns> A new <see cref="Models.OperationStatus"/> instance for mocking. </returns>
        public static OperationStatus OperationStatus(string id = null, string name = null, string status = null, string startTime = null, string endTime = null)
        {
            return new OperationStatus(
                id,
                name,
                status,
                startTime,
                endTime,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CheckNameAvailabilityResponseModel"/>. </summary>
        /// <param name="nameAvailable"> Gets or sets a value indicating whether resource name is available or not. </param>
        /// <param name="reason"> Gets or sets the reason for resource name unavailability. </param>
        /// <param name="message"> Gets or sets the message for resource name unavailability. </param>
        /// <returns> A new <see cref="Models.CheckNameAvailabilityResponseModel"/> instance for mocking. </returns>
        public static CheckNameAvailabilityResponseModel CheckNameAvailabilityResponseModel(bool? nameAvailable = null, string reason = null, string message = null)
        {
            return new CheckNameAvailabilityResponseModel(nameAvailable, reason, message, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="RecoveryServicesDataReplication.ReplicationExtensionModelData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="RecoveryServicesDataReplication.ReplicationExtensionModelData"/> instance for mocking. </returns>
        public static ReplicationExtensionModelData ReplicationExtensionModelData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ReplicationExtensionModelProperties properties = null)
        {
            return new ReplicationExtensionModelData(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ReplicationExtensionModelProperties"/>. </summary>
        /// <param name="provisioningState"> Gets or sets the provisioning state of the replication extension. </param>
        /// <param name="customProperties">
        /// Replication extension model custom properties.
        /// Please note <see cref="ReplicationExtensionModelCustomProperties"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="Models.HyperVToAzStackHCIReplicationExtensionModelCustomProperties"/> and <see cref="Models.VMwareToAzStackHCIReplicationExtensionModelCustomProperties"/>.
        /// </param>
        /// <returns> A new <see cref="Models.ReplicationExtensionModelProperties"/> instance for mocking. </returns>
        public static ReplicationExtensionModelProperties ReplicationExtensionModelProperties(ProvisioningState? provisioningState = null, ReplicationExtensionModelCustomProperties customProperties = null)
        {
            return new ReplicationExtensionModelProperties(provisioningState, customProperties, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.HyperVToAzStackHCIReplicationExtensionModelCustomProperties"/>. </summary>
        /// <param name="hyperVFabricArmId"> Gets or sets the ARM Id of the source HyperV fabric. </param>
        /// <param name="hyperVSiteId"> Gets or sets the ARM Id of the HyperV site. </param>
        /// <param name="azStackHciFabricArmId"> Gets or sets the ARM Id of the target AzStackHCI fabric. </param>
        /// <param name="azStackHciSiteId"> Gets or sets the ARM Id of the AzStackHCI site. </param>
        /// <param name="storageAccountId"> Gets or sets the storage account Id. </param>
        /// <param name="storageAccountSasSecretName"> Gets or sets the Sas Secret of storage account. </param>
        /// <param name="asrServiceUri"> Gets or sets the Uri of ASR. </param>
        /// <param name="rcmServiceUri"> Gets or sets the Uri of Rcm. </param>
        /// <param name="gatewayServiceUri"> Gets or sets the Uri of Gateway. </param>
        /// <param name="sourceGatewayServiceId"> Gets or sets the gateway service Id of source. </param>
        /// <param name="targetGatewayServiceId"> Gets or sets the gateway service Id of target. </param>
        /// <param name="sourceStorageContainerName"> Gets or sets the source storage container name. </param>
        /// <param name="targetStorageContainerName"> Gets or sets the target storage container name. </param>
        /// <param name="resourceLocation"> Gets or sets the resource location. </param>
        /// <param name="subscriptionId"> Gets or sets the subscription. </param>
        /// <param name="resourceGroup"> Gets or sets the resource group. </param>
        /// <returns> A new <see cref="Models.HyperVToAzStackHCIReplicationExtensionModelCustomProperties"/> instance for mocking. </returns>
        public static HyperVToAzStackHCIReplicationExtensionModelCustomProperties HyperVToAzStackHCIReplicationExtensionModelCustomProperties(string hyperVFabricArmId = null, string hyperVSiteId = null, string azStackHciFabricArmId = null, string azStackHciSiteId = null, string storageAccountId = null, string storageAccountSasSecretName = null, string asrServiceUri = null, string rcmServiceUri = null, string gatewayServiceUri = null, string sourceGatewayServiceId = null, string targetGatewayServiceId = null, string sourceStorageContainerName = null, string targetStorageContainerName = null, string resourceLocation = null, string subscriptionId = null, string resourceGroup = null)
        {
            return new HyperVToAzStackHCIReplicationExtensionModelCustomProperties(
                "HyperVToAzStackHCI",
                serializedAdditionalRawData: null,
                hyperVFabricArmId,
                hyperVSiteId,
                azStackHciFabricArmId,
                azStackHciSiteId,
                storageAccountId,
                storageAccountSasSecretName,
                asrServiceUri,
                rcmServiceUri,
                gatewayServiceUri,
                sourceGatewayServiceId,
                targetGatewayServiceId,
                sourceStorageContainerName,
                targetStorageContainerName,
                resourceLocation,
                subscriptionId,
                resourceGroup);
        }

        /// <summary> Initializes a new instance of <see cref="Models.VMwareToAzStackHCIReplicationExtensionModelCustomProperties"/>. </summary>
        /// <param name="vmwareFabricArmId"> Gets or sets the ARM Id of the source VMware fabric. </param>
        /// <param name="vmwareSiteId"> Gets or sets the ARM Id of the VMware site. </param>
        /// <param name="azStackHciFabricArmId"> Gets or sets the ARM Id of the target AzStackHCI fabric. </param>
        /// <param name="azStackHciSiteId"> Gets or sets the ARM Id of the AzStackHCI site. </param>
        /// <param name="storageAccountId"> Gets or sets the storage account Id. </param>
        /// <param name="storageAccountSasSecretName"> Gets or sets the Sas Secret of storage account. </param>
        /// <param name="asrServiceUri"> Gets or sets the Uri of ASR. </param>
        /// <param name="rcmServiceUri"> Gets or sets the Uri of Rcm. </param>
        /// <param name="gatewayServiceUri"> Gets or sets the Uri of Gateway. </param>
        /// <param name="sourceGatewayServiceId"> Gets or sets the gateway service Id of source. </param>
        /// <param name="targetGatewayServiceId"> Gets or sets the gateway service Id of target. </param>
        /// <param name="sourceStorageContainerName"> Gets or sets the source storage container name. </param>
        /// <param name="targetStorageContainerName"> Gets or sets the target storage container name. </param>
        /// <param name="resourceLocation"> Gets or sets the resource location. </param>
        /// <param name="subscriptionId"> Gets or sets the subscription. </param>
        /// <param name="resourceGroup"> Gets or sets the resource group. </param>
        /// <returns> A new <see cref="Models.VMwareToAzStackHCIReplicationExtensionModelCustomProperties"/> instance for mocking. </returns>
        public static VMwareToAzStackHCIReplicationExtensionModelCustomProperties VMwareToAzStackHCIReplicationExtensionModelCustomProperties(string vmwareFabricArmId = null, string vmwareSiteId = null, string azStackHciFabricArmId = null, string azStackHciSiteId = null, string storageAccountId = null, string storageAccountSasSecretName = null, string asrServiceUri = null, string rcmServiceUri = null, string gatewayServiceUri = null, string sourceGatewayServiceId = null, string targetGatewayServiceId = null, string sourceStorageContainerName = null, string targetStorageContainerName = null, string resourceLocation = null, string subscriptionId = null, string resourceGroup = null)
        {
            return new VMwareToAzStackHCIReplicationExtensionModelCustomProperties(
                "VMwareToAzStackHCI",
                serializedAdditionalRawData: null,
                vmwareFabricArmId,
                vmwareSiteId,
                azStackHciFabricArmId,
                azStackHciSiteId,
                storageAccountId,
                storageAccountSasSecretName,
                asrServiceUri,
                rcmServiceUri,
                gatewayServiceUri,
                sourceGatewayServiceId,
                targetGatewayServiceId,
                sourceStorageContainerName,
                targetStorageContainerName,
                resourceLocation,
                subscriptionId,
                resourceGroup);
        }

        /// <summary> Initializes a new instance of <see cref="RecoveryServicesDataReplication.RecoveryPointModelData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="RecoveryServicesDataReplication.RecoveryPointModelData"/> instance for mocking. </returns>
        public static RecoveryPointModelData RecoveryPointModelData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, RecoveryPointModelProperties properties = null)
        {
            return new RecoveryPointModelData(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.RecoveryPointModelProperties"/>. </summary>
        /// <param name="recoveryPointOn"> Gets or sets the recovery point time. </param>
        /// <param name="recoveryPointType"> Gets or sets the recovery point type. </param>
        /// <param name="customProperties">
        /// Recovery point model custom properties.
        /// Please note <see cref="RecoveryPointModelCustomProperties"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="Models.HyperVToAzStackHCIRecoveryPointModelCustomProperties"/> and <see cref="Models.VMwareToAzStackHCIRecoveryPointModelCustomProperties"/>.
        /// </param>
        /// <param name="provisioningState"> Gets or sets the provisioning state of the recovery point item. </param>
        /// <returns> A new <see cref="Models.RecoveryPointModelProperties"/> instance for mocking. </returns>
        public static RecoveryPointModelProperties RecoveryPointModelProperties(DateTimeOffset recoveryPointOn = default, RecoveryPointType recoveryPointType = default, RecoveryPointModelCustomProperties customProperties = null, ProvisioningState? provisioningState = null)
        {
            return new RecoveryPointModelProperties(recoveryPointOn, recoveryPointType, customProperties, provisioningState, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.HyperVToAzStackHCIRecoveryPointModelCustomProperties"/>. </summary>
        /// <param name="diskIds"> Gets or sets the list of the disk Ids. </param>
        /// <returns> A new <see cref="Models.HyperVToAzStackHCIRecoveryPointModelCustomProperties"/> instance for mocking. </returns>
        public static HyperVToAzStackHCIRecoveryPointModelCustomProperties HyperVToAzStackHCIRecoveryPointModelCustomProperties(IEnumerable<string> diskIds = null)
        {
            diskIds ??= new List<string>();

            return new HyperVToAzStackHCIRecoveryPointModelCustomProperties("HyperVToAzStackHCI", serializedAdditionalRawData: null, diskIds?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.VMwareToAzStackHCIRecoveryPointModelCustomProperties"/>. </summary>
        /// <param name="diskIds"> Gets or sets the list of the disk Ids. </param>
        /// <returns> A new <see cref="Models.VMwareToAzStackHCIRecoveryPointModelCustomProperties"/> instance for mocking. </returns>
        public static VMwareToAzStackHCIRecoveryPointModelCustomProperties VMwareToAzStackHCIRecoveryPointModelCustomProperties(IEnumerable<string> diskIds = null)
        {
            diskIds ??= new List<string>();

            return new VMwareToAzStackHCIRecoveryPointModelCustomProperties("VMwareToAzStackHCIRecoveryPointModelCustomProperties", serializedAdditionalRawData: null, diskIds?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="RecoveryServicesDataReplication.ProtectedItemModelData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="RecoveryServicesDataReplication.ProtectedItemModelData"/> instance for mocking. </returns>
        public static ProtectedItemModelData ProtectedItemModelData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ProtectedItemModelProperties properties = null)
        {
            return new ProtectedItemModelData(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ProtectedItemModelProperties"/>. </summary>
        /// <param name="policyName"> Gets or sets the policy name. </param>
        /// <param name="replicationExtensionName"> Gets or sets the replication extension name. </param>
        /// <param name="correlationId"> Gets or sets the protected item correlation Id. </param>
        /// <param name="provisioningState"> Gets or sets the provisioning state of the fabric agent. </param>
        /// <param name="protectionState"> Gets or sets the protection state. </param>
        /// <param name="protectionStateDescription"> Gets or sets the protection state description. </param>
        /// <param name="testFailoverState"> Gets or sets the test failover state. </param>
        /// <param name="testFailoverStateDescription"> Gets or sets the Test failover state description. </param>
        /// <param name="resynchronizationState"> Gets or sets the resynchronization state. </param>
        /// <param name="fabricObjectId"> Gets or sets the fabric object Id. </param>
        /// <param name="fabricObjectName"> Gets or sets the fabric object name. </param>
        /// <param name="sourceFabricProviderId"> Gets or sets the source fabric provider Id. </param>
        /// <param name="targetFabricProviderId"> Gets or sets the target fabric provider Id. </param>
        /// <param name="fabricId"> Gets or sets the fabric Id. </param>
        /// <param name="targetFabricId"> Gets or sets the target fabric Id. </param>
        /// <param name="fabricAgentId"> Gets or sets the fabric agent Id. </param>
        /// <param name="targetFabricAgentId"> Gets or sets the target fabric agent Id. </param>
        /// <param name="resyncRequired"> Gets or sets a value indicating whether resynchronization is required or not. </param>
        /// <param name="lastSuccessfulPlannedFailoverOn"> Gets or sets the Last successful planned failover time. </param>
        /// <param name="lastSuccessfulUnplannedFailoverOn"> Gets or sets the Last successful unplanned failover time. </param>
        /// <param name="lastSuccessfulTestFailoverOn"> Gets or sets the Last successful test failover time. </param>
        /// <param name="currentJob"> Gets or sets the current scenario. </param>
        /// <param name="allowedJobs"> Gets or sets the allowed scenarios on the protected item. </param>
        /// <param name="lastFailedEnableProtectionJob"> Gets or sets the last failed enabled protection job. </param>
        /// <param name="lastFailedPlannedFailoverJob"> Gets or sets the last failed planned failover job. </param>
        /// <param name="lastTestFailoverJob"> Gets or sets the last test failover job. </param>
        /// <param name="replicationHealth"> Gets or sets protected item replication health. </param>
        /// <param name="healthErrors"> Gets or sets the list of health errors. </param>
        /// <param name="customProperties">
        /// Protected item model custom properties.
        /// Please note <see cref="ProtectedItemModelCustomProperties"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="Models.HyperVToAzStackHCIProtectedItemModelCustomProperties"/> and <see cref="Models.VMwareToAzStackHCIProtectedItemModelCustomProperties"/>.
        /// </param>
        /// <returns> A new <see cref="Models.ProtectedItemModelProperties"/> instance for mocking. </returns>
        public static ProtectedItemModelProperties ProtectedItemModelProperties(string policyName = null, string replicationExtensionName = null, string correlationId = null, ProvisioningState? provisioningState = null, ProtectionState? protectionState = null, string protectionStateDescription = null, TestFailoverState? testFailoverState = null, string testFailoverStateDescription = null, ResynchronizationState? resynchronizationState = null, string fabricObjectId = null, string fabricObjectName = null, string sourceFabricProviderId = null, string targetFabricProviderId = null, string fabricId = null, string targetFabricId = null, string fabricAgentId = null, string targetFabricAgentId = null, bool? resyncRequired = null, DateTimeOffset? lastSuccessfulPlannedFailoverOn = null, DateTimeOffset? lastSuccessfulUnplannedFailoverOn = null, DateTimeOffset? lastSuccessfulTestFailoverOn = null, ProtectedItemJobProperties currentJob = null, IEnumerable<string> allowedJobs = null, ProtectedItemJobProperties lastFailedEnableProtectionJob = null, ProtectedItemJobProperties lastFailedPlannedFailoverJob = null, ProtectedItemJobProperties lastTestFailoverJob = null, HealthStatus? replicationHealth = null, IEnumerable<HealthErrorModel> healthErrors = null, ProtectedItemModelCustomProperties customProperties = null)
        {
            allowedJobs ??= new List<string>();
            healthErrors ??= new List<HealthErrorModel>();

            return new ProtectedItemModelProperties(
                policyName,
                replicationExtensionName,
                correlationId,
                provisioningState,
                protectionState,
                protectionStateDescription,
                testFailoverState,
                testFailoverStateDescription,
                resynchronizationState,
                fabricObjectId,
                fabricObjectName,
                sourceFabricProviderId,
                targetFabricProviderId,
                fabricId,
                targetFabricId,
                fabricAgentId,
                targetFabricAgentId,
                resyncRequired,
                lastSuccessfulPlannedFailoverOn,
                lastSuccessfulUnplannedFailoverOn,
                lastSuccessfulTestFailoverOn,
                currentJob,
                allowedJobs?.ToList(),
                lastFailedEnableProtectionJob,
                lastFailedPlannedFailoverJob,
                lastTestFailoverJob,
                replicationHealth,
                healthErrors?.ToList(),
                customProperties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ProtectedItemJobProperties"/>. </summary>
        /// <param name="scenarioName"> Gets or sets protection scenario name. </param>
        /// <param name="id"> Gets or sets job Id. </param>
        /// <param name="name"> Gets or sets job name. </param>
        /// <param name="displayName"> Gets or sets the job friendly display name. </param>
        /// <param name="state"> Gets or sets job state. </param>
        /// <param name="startOn"> Gets or sets start time of the job. </param>
        /// <param name="endOn"> Gets or sets end time of the job. </param>
        /// <returns> A new <see cref="Models.ProtectedItemJobProperties"/> instance for mocking. </returns>
        public static ProtectedItemJobProperties ProtectedItemJobProperties(string scenarioName = null, string id = null, string name = null, string displayName = null, string state = null, DateTimeOffset? startOn = null, DateTimeOffset? endOn = null)
        {
            return new ProtectedItemJobProperties(
                scenarioName,
                id,
                name,
                displayName,
                state,
                startOn,
                endOn,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.HealthErrorModel"/>. </summary>
        /// <param name="affectedResourceType"> Gets or sets the type of affected resource type. </param>
        /// <param name="affectedResourceCorrelationIds"> Gets or sets the list of affected resource correlation Ids. This can be used to uniquely identify the count of items affected by a specific category and severity as well as count of item affected by an specific issue. </param>
        /// <param name="childErrors"> Gets or sets a list of child health errors associated with this error. </param>
        /// <param name="code"> Gets or sets the error code. </param>
        /// <param name="healthCategory"> Gets or sets the health category. </param>
        /// <param name="category"> Gets or sets the error category. </param>
        /// <param name="severity"> Gets or sets the error severity. </param>
        /// <param name="source"> Gets or sets the error source. </param>
        /// <param name="createdOn"> Gets or sets the error creation time. </param>
        /// <param name="isCustomerResolvable"> Gets or sets a value indicating whether the error is customer resolvable. </param>
        /// <param name="summary"> Gets or sets the error summary. </param>
        /// <param name="message"> Gets or sets the error message. </param>
        /// <param name="causes"> Gets or sets possible causes of the error. </param>
        /// <param name="recommendation"> Gets or sets recommended action to resolve the error. </param>
        /// <returns> A new <see cref="Models.HealthErrorModel"/> instance for mocking. </returns>
        public static HealthErrorModel HealthErrorModel(string affectedResourceType = null, IEnumerable<string> affectedResourceCorrelationIds = null, IEnumerable<InnerHealthErrorModel> childErrors = null, string code = null, string healthCategory = null, string category = null, string severity = null, string source = null, DateTimeOffset? createdOn = null, bool? isCustomerResolvable = null, string summary = null, string message = null, string causes = null, string recommendation = null)
        {
            affectedResourceCorrelationIds ??= new List<string>();
            childErrors ??= new List<InnerHealthErrorModel>();

            return new HealthErrorModel(
                affectedResourceType,
                affectedResourceCorrelationIds?.ToList(),
                childErrors?.ToList(),
                code,
                healthCategory,
                category,
                severity,
                source,
                createdOn,
                isCustomerResolvable,
                summary,
                message,
                causes,
                recommendation,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.InnerHealthErrorModel"/>. </summary>
        /// <param name="code"> Gets or sets the error code. </param>
        /// <param name="healthCategory"> Gets or sets the health category. </param>
        /// <param name="category"> Gets or sets the error category. </param>
        /// <param name="severity"> Gets or sets the error severity. </param>
        /// <param name="source"> Gets or sets the error source. </param>
        /// <param name="createdOn"> Gets or sets the error creation time. </param>
        /// <param name="isCustomerResolvable"> Gets or sets a value indicating whether the error is customer resolvable. </param>
        /// <param name="summary"> Gets or sets the error summary. </param>
        /// <param name="message"> Gets or sets the error message. </param>
        /// <param name="causes"> Gets or sets possible causes of the error. </param>
        /// <param name="recommendation"> Gets or sets recommended action to resolve the error. </param>
        /// <returns> A new <see cref="Models.InnerHealthErrorModel"/> instance for mocking. </returns>
        public static InnerHealthErrorModel InnerHealthErrorModel(string code = null, string healthCategory = null, string category = null, string severity = null, string source = null, DateTimeOffset? createdOn = null, bool? isCustomerResolvable = null, string summary = null, string message = null, string causes = null, string recommendation = null)
        {
            return new InnerHealthErrorModel(
                code,
                healthCategory,
                category,
                severity,
                source,
                createdOn,
                isCustomerResolvable,
                summary,
                message,
                causes,
                recommendation,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.HyperVToAzStackHCIProtectedItemModelCustomProperties"/>. </summary>
        /// <param name="activeLocation"> Gets or sets the location of the protected item. </param>
        /// <param name="targetHciClusterId"> Gets or sets the Target HCI Cluster ARM Id. </param>
        /// <param name="targetArcClusterCustomLocationId"> Gets or sets the Target Arc Cluster Custom Location ARM Id. </param>
        /// <param name="targetAzStackHciClusterName"> Gets or sets the Target AzStackHCI cluster name. </param>
        /// <param name="fabricDiscoveryMachineId"> Gets or sets the ARM Id of the discovered machine. </param>
        /// <param name="disksToInclude"> Gets or sets the list of disks to replicate. </param>
        /// <param name="nicsToInclude"> Gets or sets the list of VM NIC to replicate. </param>
        /// <param name="sourceVmName"> Gets or sets the source VM display name. </param>
        /// <param name="sourceCpuCores"> Gets or sets the source VM CPU cores. </param>
        /// <param name="sourceMemoryInMegaBytes"> Gets or sets the source VM ram memory size in megabytes. </param>
        /// <param name="targetVmName"> Gets or sets the target VM display name. </param>
        /// <param name="targetResourceGroupId"> Gets or sets the target resource group ARM Id. </param>
        /// <param name="storageContainerId"> Gets or sets the target storage container ARM Id. </param>
        /// <param name="hyperVGeneration"> Gets or sets the hypervisor generation of the virtual machine. </param>
        /// <param name="targetNetworkId"> Gets or sets the target network Id within AzStackHCI Cluster. </param>
        /// <param name="testNetworkId"> Gets or sets the target test network Id within AzStackHCI Cluster. </param>
        /// <param name="targetCpuCores"> Gets or sets the target CPU cores. </param>
        /// <param name="isDynamicRam"> Gets or sets a value indicating whether memory is dynamical. </param>
        /// <param name="dynamicMemoryConfig"> Protected item dynamic memory config. </param>
        /// <param name="targetMemoryInMegaBytes"> Gets or sets the target memory in mega-bytes. </param>
        /// <param name="runAsAccountId"> Gets or sets the Run As account Id. </param>
        /// <param name="sourceFabricAgentName"> Gets or sets the source fabric agent name. </param>
        /// <param name="targetFabricAgentName"> Gets or sets the target fabric agent name. </param>
        /// <param name="sourceApplianceName"> Gets or sets the source appliance name. </param>
        /// <param name="targetApplianceName"> Gets or sets the target appliance name. </param>
        /// <param name="osType"> Gets or sets the type of the OS. </param>
        /// <param name="osName"> Gets or sets the name of the OS. </param>
        /// <param name="firmwareType"> Gets or sets the firmware type. </param>
        /// <param name="targetLocation"> Gets or sets the target location. </param>
        /// <param name="customLocationRegion"> Gets or sets the location of Azure Arc HCI custom location resource. </param>
        /// <param name="failoverRecoveryPointId"> Gets or sets the recovery point Id to which the VM was failed over. </param>
        /// <param name="lastRecoveryPointReceived"> Gets or sets the last recovery point received time. </param>
        /// <param name="lastRecoveryPointId"> Gets or sets the last recovery point Id. </param>
        /// <param name="initialReplicationProgressPercentage"> Gets or sets the initial replication progress percentage. This is calculated based on total bytes processed for all disks in the source VM. </param>
        /// <param name="resyncProgressPercentage"> Gets or sets the resync progress percentage. This is calculated based on total bytes processed for all disks in the source VM. </param>
        /// <param name="protectedDisks"> Gets or sets the list of protected disks. </param>
        /// <param name="protectedNics"> Gets or sets the VM NIC details. </param>
        /// <param name="targetVmBiosId"> Gets or sets the BIOS Id of the target AzStackHCI VM. </param>
        /// <param name="lastReplicationUpdateOn"> Gets or sets the latest timestamp that replication status is updated. </param>
        /// <returns> A new <see cref="Models.HyperVToAzStackHCIProtectedItemModelCustomProperties"/> instance for mocking. </returns>
        public static HyperVToAzStackHCIProtectedItemModelCustomProperties HyperVToAzStackHCIProtectedItemModelCustomProperties(ProtectedItemActiveLocation? activeLocation = null, string targetHciClusterId = null, string targetArcClusterCustomLocationId = null, string targetAzStackHciClusterName = null, string fabricDiscoveryMachineId = null, IEnumerable<HyperVToAzStackHCIDiskInput> disksToInclude = null, IEnumerable<HyperVToAzStackHCINicInput> nicsToInclude = null, string sourceVmName = null, int? sourceCpuCores = null, double? sourceMemoryInMegaBytes = null, string targetVmName = null, string targetResourceGroupId = null, string storageContainerId = null, string hyperVGeneration = null, string targetNetworkId = null, string testNetworkId = null, int? targetCpuCores = null, bool? isDynamicRam = null, ProtectedItemDynamicMemoryConfig dynamicMemoryConfig = null, int? targetMemoryInMegaBytes = null, string runAsAccountId = null, string sourceFabricAgentName = null, string targetFabricAgentName = null, string sourceApplianceName = null, string targetApplianceName = null, string osType = null, string osName = null, string firmwareType = null, string targetLocation = null, string customLocationRegion = null, string failoverRecoveryPointId = null, DateTimeOffset? lastRecoveryPointReceived = null, string lastRecoveryPointId = null, int? initialReplicationProgressPercentage = null, int? resyncProgressPercentage = null, IEnumerable<HyperVToAzStackHCIProtectedDiskProperties> protectedDisks = null, IEnumerable<HyperVToAzStackHCIProtectedNicProperties> protectedNics = null, string targetVmBiosId = null, DateTimeOffset? lastReplicationUpdateOn = null)
        {
            disksToInclude ??= new List<HyperVToAzStackHCIDiskInput>();
            nicsToInclude ??= new List<HyperVToAzStackHCINicInput>();
            protectedDisks ??= new List<HyperVToAzStackHCIProtectedDiskProperties>();
            protectedNics ??= new List<HyperVToAzStackHCIProtectedNicProperties>();

            return new HyperVToAzStackHCIProtectedItemModelCustomProperties(
                "HyperVToAzStackHCI",
                serializedAdditionalRawData: null,
                activeLocation,
                targetHciClusterId,
                targetArcClusterCustomLocationId,
                targetAzStackHciClusterName,
                fabricDiscoveryMachineId,
                disksToInclude?.ToList(),
                nicsToInclude?.ToList(),
                sourceVmName,
                sourceCpuCores,
                sourceMemoryInMegaBytes,
                targetVmName,
                targetResourceGroupId,
                storageContainerId,
                hyperVGeneration,
                targetNetworkId,
                testNetworkId,
                targetCpuCores,
                isDynamicRam,
                dynamicMemoryConfig,
                targetMemoryInMegaBytes,
                runAsAccountId,
                sourceFabricAgentName,
                targetFabricAgentName,
                sourceApplianceName,
                targetApplianceName,
                osType,
                osName,
                firmwareType,
                targetLocation,
                customLocationRegion,
                failoverRecoveryPointId,
                lastRecoveryPointReceived,
                lastRecoveryPointId,
                initialReplicationProgressPercentage,
                resyncProgressPercentage,
                protectedDisks?.ToList(),
                protectedNics?.ToList(),
                targetVmBiosId,
                lastReplicationUpdateOn);
        }

        /// <summary> Initializes a new instance of <see cref="Models.HyperVToAzStackHCINicInput"/>. </summary>
        /// <param name="nicId"> Gets or sets the NIC Id. </param>
        /// <param name="networkName"> Gets or sets the network name. </param>
        /// <param name="targetNetworkId"> Gets or sets the target network Id within AzStackHCI Cluster. </param>
        /// <param name="testNetworkId"> Gets or sets the target test network Id within AzStackHCI Cluster. </param>
        /// <param name="selectionTypeForFailover"> Gets or sets the selection type of the NIC. </param>
        /// <param name="isStaticIPMigrationEnabled"> Gets or sets a value indicating whether static ip migration is enabled. </param>
        /// <param name="isMacMigrationEnabled"> Gets or sets a value indicating whether mac address migration is enabled. </param>
        /// <returns> A new <see cref="Models.HyperVToAzStackHCINicInput"/> instance for mocking. </returns>
        public static HyperVToAzStackHCINicInput HyperVToAzStackHCINicInput(string nicId = null, string networkName = null, string targetNetworkId = null, string testNetworkId = null, VmNicSelection selectionTypeForFailover = default, bool? isStaticIPMigrationEnabled = null, bool? isMacMigrationEnabled = null)
        {
            return new HyperVToAzStackHCINicInput(
                nicId,
                networkName,
                targetNetworkId,
                testNetworkId,
                selectionTypeForFailover,
                isStaticIPMigrationEnabled,
                isMacMigrationEnabled,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.HyperVToAzStackHCIProtectedDiskProperties"/>. </summary>
        /// <param name="storageContainerId"> Gets or sets the ARM Id of the storage container. </param>
        /// <param name="storageContainerLocalPath"> Gets or sets the local path of the storage container. </param>
        /// <param name="sourceDiskId"> Gets or sets the source disk Id. </param>
        /// <param name="sourceDiskName"> Gets or sets the source disk Name. </param>
        /// <param name="seedDiskName"> Gets or sets the seed disk name. </param>
        /// <param name="testMigrateDiskName"> Gets or sets the test failover clone disk. </param>
        /// <param name="migrateDiskName"> Gets or sets the failover clone disk. </param>
        /// <param name="isOSDisk"> Gets or sets a value indicating whether the disk is the OS disk. </param>
        /// <param name="capacityInBytes"> Gets or sets the disk capacity in bytes. </param>
        /// <param name="isDynamic"> Gets or sets a value indicating whether dynamic sizing is enabled on the virtual hard disk. </param>
        /// <param name="diskType"> Gets or sets the disk type. </param>
        /// <param name="diskBlockSize"> Gets or sets a value of disk block size. </param>
        /// <param name="diskLogicalSectorSize"> Gets or sets a value of disk logical sector size. </param>
        /// <param name="diskPhysicalSectorSize"> Gets or sets a value of disk physical sector size. </param>
        /// <returns> A new <see cref="Models.HyperVToAzStackHCIProtectedDiskProperties"/> instance for mocking. </returns>
        public static HyperVToAzStackHCIProtectedDiskProperties HyperVToAzStackHCIProtectedDiskProperties(string storageContainerId = null, string storageContainerLocalPath = null, string sourceDiskId = null, string sourceDiskName = null, string seedDiskName = null, string testMigrateDiskName = null, string migrateDiskName = null, bool? isOSDisk = null, long? capacityInBytes = null, bool? isDynamic = null, string diskType = null, long? diskBlockSize = null, long? diskLogicalSectorSize = null, long? diskPhysicalSectorSize = null)
        {
            return new HyperVToAzStackHCIProtectedDiskProperties(
                storageContainerId,
                storageContainerLocalPath,
                sourceDiskId,
                sourceDiskName,
                seedDiskName,
                testMigrateDiskName,
                migrateDiskName,
                isOSDisk,
                capacityInBytes,
                isDynamic,
                diskType,
                diskBlockSize,
                diskLogicalSectorSize,
                diskPhysicalSectorSize,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.HyperVToAzStackHCIProtectedNicProperties"/>. </summary>
        /// <param name="nicId"> Gets or sets the NIC Id. </param>
        /// <param name="macAddress"> Gets or sets the NIC mac address. </param>
        /// <param name="networkName"> Gets or sets the network name. </param>
        /// <param name="targetNetworkId"> Gets or sets the target network Id within AzStackHCI Cluster. </param>
        /// <param name="testNetworkId"> Gets or sets the target test network Id within AzStackHCI Cluster. </param>
        /// <param name="selectionTypeForFailover"> Gets or sets the selection type of the NIC. </param>
        /// <returns> A new <see cref="Models.HyperVToAzStackHCIProtectedNicProperties"/> instance for mocking. </returns>
        public static HyperVToAzStackHCIProtectedNicProperties HyperVToAzStackHCIProtectedNicProperties(string nicId = null, string macAddress = null, string networkName = null, string targetNetworkId = null, string testNetworkId = null, VmNicSelection? selectionTypeForFailover = null)
        {
            return new HyperVToAzStackHCIProtectedNicProperties(
                nicId,
                macAddress,
                networkName,
                targetNetworkId,
                testNetworkId,
                selectionTypeForFailover,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.VMwareToAzStackHCIProtectedItemModelCustomProperties"/>. </summary>
        /// <param name="activeLocation"> Gets or sets the location of the protected item. </param>
        /// <param name="targetHciClusterId"> Gets or sets the Target HCI Cluster ARM Id. </param>
        /// <param name="targetArcClusterCustomLocationId"> Gets or sets the Target Arc Cluster Custom Location ARM Id. </param>
        /// <param name="targetAzStackHciClusterName"> Gets or sets the Target AzStackHCI cluster name. </param>
        /// <param name="storageContainerId"> Gets or sets the target storage container ARM Id. </param>
        /// <param name="targetResourceGroupId"> Gets or sets the target resource group ARM Id. </param>
        /// <param name="targetLocation"> Gets or sets the target location. </param>
        /// <param name="customLocationRegion"> Gets or sets the location of Azure Arc HCI custom location resource. </param>
        /// <param name="disksToInclude"> Gets or sets the list of disks to replicate. </param>
        /// <param name="nicsToInclude"> Gets or sets the list of VM NIC to replicate. </param>
        /// <param name="protectedDisks"> Gets or sets the list of protected disks. </param>
        /// <param name="protectedNics"> Gets or sets the VM NIC details. </param>
        /// <param name="targetVmBiosId"> Gets or sets the BIOS Id of the target AzStackHCI VM. </param>
        /// <param name="targetVmName"> Gets or sets the target VM display name. </param>
        /// <param name="hyperVGeneration"> Gets or sets the hypervisor generation of the virtual machine possible values are 1,2. </param>
        /// <param name="targetNetworkId"> Gets or sets the target network Id within AzStackHCI Cluster. </param>
        /// <param name="testNetworkId"> Gets or sets the target test network Id within AzStackHCI Cluster. </param>
        /// <param name="targetCpuCores"> Gets or sets the target CPU cores. </param>
        /// <param name="isDynamicRam"> Gets or sets a value indicating whether memory is dynamical. </param>
        /// <param name="dynamicMemoryConfig"> Protected item dynamic memory config. </param>
        /// <param name="targetMemoryInMegaBytes"> Gets or sets the target memory in mega-bytes. </param>
        /// <param name="osType"> Gets or sets the type of the OS. </param>
        /// <param name="osName"> Gets or sets the name of the OS. </param>
        /// <param name="firmwareType"> Gets or sets the firmware type. </param>
        /// <param name="fabricDiscoveryMachineId"> Gets or sets the ARM Id of the discovered machine. </param>
        /// <param name="sourceVmName"> Gets or sets the source VM display name. </param>
        /// <param name="sourceCpuCores"> Gets or sets the source VM CPU cores. </param>
        /// <param name="sourceMemoryInMegaBytes"> Gets or sets the source VM ram memory size in megabytes. </param>
        /// <param name="runAsAccountId"> Gets or sets the run as account Id. </param>
        /// <param name="sourceFabricAgentName"> Gets or sets the source fabric agent name. </param>
        /// <param name="targetFabricAgentName"> Gets or sets the target fabric agent name. </param>
        /// <param name="sourceApplianceName"> Gets or sets the source appliance name. </param>
        /// <param name="targetApplianceName"> Gets or sets the target appliance name. </param>
        /// <param name="failoverRecoveryPointId"> Gets or sets the recovery point Id to which the VM was failed over. </param>
        /// <param name="lastRecoveryPointReceived"> Gets or sets the last recovery point received time. </param>
        /// <param name="lastRecoveryPointId"> Gets or sets the last recovery point Id. </param>
        /// <param name="initialReplicationProgressPercentage"> Gets or sets the initial replication progress percentage. This is calculated based on total bytes processed for all disks in the source VM. </param>
        /// <param name="migrationProgressPercentage"> Gets or sets the migration progress percentage. </param>
        /// <param name="resumeProgressPercentage"> Gets or sets the resume progress percentage. </param>
        /// <param name="resyncProgressPercentage"> Gets or sets the resync progress percentage. This is calculated based on total bytes processed for all disks in the source VM. </param>
        /// <param name="resyncRetryCount"> Gets or sets the resync retry count. </param>
        /// <param name="resyncRequired"> Gets or sets a value indicating whether resync is required. </param>
        /// <param name="resyncState"> Gets or sets the resync state. </param>
        /// <param name="performAutoResync"> Gets or sets a value indicating whether auto resync is to be done. </param>
        /// <param name="resumeRetryCount"> Gets or sets the resume retry count. </param>
        /// <param name="lastReplicationUpdateOn"> Gets or sets the latest timestamp that replication status is updated. </param>
        /// <returns> A new <see cref="Models.VMwareToAzStackHCIProtectedItemModelCustomProperties"/> instance for mocking. </returns>
        public static VMwareToAzStackHCIProtectedItemModelCustomProperties VMwareToAzStackHCIProtectedItemModelCustomProperties(ProtectedItemActiveLocation? activeLocation = null, string targetHciClusterId = null, string targetArcClusterCustomLocationId = null, string targetAzStackHciClusterName = null, string storageContainerId = null, string targetResourceGroupId = null, string targetLocation = null, string customLocationRegion = null, IEnumerable<VMwareToAzStackHCIDiskInput> disksToInclude = null, IEnumerable<VMwareToAzStackHCINicInput> nicsToInclude = null, IEnumerable<VMwareToAzStackHCIProtectedDiskProperties> protectedDisks = null, IEnumerable<VMwareToAzStackHCIProtectedNicProperties> protectedNics = null, string targetVmBiosId = null, string targetVmName = null, string hyperVGeneration = null, string targetNetworkId = null, string testNetworkId = null, int? targetCpuCores = null, bool? isDynamicRam = null, ProtectedItemDynamicMemoryConfig dynamicMemoryConfig = null, int? targetMemoryInMegaBytes = null, string osType = null, string osName = null, string firmwareType = null, string fabricDiscoveryMachineId = null, string sourceVmName = null, int? sourceCpuCores = null, double? sourceMemoryInMegaBytes = null, string runAsAccountId = null, string sourceFabricAgentName = null, string targetFabricAgentName = null, string sourceApplianceName = null, string targetApplianceName = null, string failoverRecoveryPointId = null, DateTimeOffset? lastRecoveryPointReceived = null, string lastRecoveryPointId = null, int? initialReplicationProgressPercentage = null, int? migrationProgressPercentage = null, int? resumeProgressPercentage = null, int? resyncProgressPercentage = null, long? resyncRetryCount = null, bool? resyncRequired = null, VMwareToAzureMigrateResyncState? resyncState = null, bool? performAutoResync = null, long? resumeRetryCount = null, DateTimeOffset? lastReplicationUpdateOn = null)
        {
            disksToInclude ??= new List<VMwareToAzStackHCIDiskInput>();
            nicsToInclude ??= new List<VMwareToAzStackHCINicInput>();
            protectedDisks ??= new List<VMwareToAzStackHCIProtectedDiskProperties>();
            protectedNics ??= new List<VMwareToAzStackHCIProtectedNicProperties>();

            return new VMwareToAzStackHCIProtectedItemModelCustomProperties(
                "VMwareToAzStackHCI",
                serializedAdditionalRawData: null,
                activeLocation,
                targetHciClusterId,
                targetArcClusterCustomLocationId,
                targetAzStackHciClusterName,
                storageContainerId,
                targetResourceGroupId,
                targetLocation,
                customLocationRegion,
                disksToInclude?.ToList(),
                nicsToInclude?.ToList(),
                protectedDisks?.ToList(),
                protectedNics?.ToList(),
                targetVmBiosId,
                targetVmName,
                hyperVGeneration,
                targetNetworkId,
                testNetworkId,
                targetCpuCores,
                isDynamicRam,
                dynamicMemoryConfig,
                targetMemoryInMegaBytes,
                osType,
                osName,
                firmwareType,
                fabricDiscoveryMachineId,
                sourceVmName,
                sourceCpuCores,
                sourceMemoryInMegaBytes,
                runAsAccountId,
                sourceFabricAgentName,
                targetFabricAgentName,
                sourceApplianceName,
                targetApplianceName,
                failoverRecoveryPointId,
                lastRecoveryPointReceived,
                lastRecoveryPointId,
                initialReplicationProgressPercentage,
                migrationProgressPercentage,
                resumeProgressPercentage,
                resyncProgressPercentage,
                resyncRetryCount,
                resyncRequired,
                resyncState,
                performAutoResync,
                resumeRetryCount,
                lastReplicationUpdateOn);
        }

        /// <summary> Initializes a new instance of <see cref="Models.VMwareToAzStackHCINicInput"/>. </summary>
        /// <param name="nicId"> Gets or sets the NIC Id. </param>
        /// <param name="label"> Gets or sets the NIC label. </param>
        /// <param name="networkName"> Gets or sets the network name. </param>
        /// <param name="targetNetworkId"> Gets or sets the target network Id within AzStackHCI Cluster. </param>
        /// <param name="testNetworkId"> Gets or sets the target test network Id within AzStackHCI Cluster. </param>
        /// <param name="selectionTypeForFailover"> Gets or sets the selection type of the NIC. </param>
        /// <param name="isStaticIPMigrationEnabled"> Gets or sets a value indicating whether static ip migration is enabled. </param>
        /// <param name="isMacMigrationEnabled"> Gets or sets a value indicating whether mac address migration is enabled. </param>
        /// <returns> A new <see cref="Models.VMwareToAzStackHCINicInput"/> instance for mocking. </returns>
        public static VMwareToAzStackHCINicInput VMwareToAzStackHCINicInput(string nicId = null, string label = null, string networkName = null, string targetNetworkId = null, string testNetworkId = null, VmNicSelection selectionTypeForFailover = default, bool? isStaticIPMigrationEnabled = null, bool? isMacMigrationEnabled = null)
        {
            return new VMwareToAzStackHCINicInput(
                nicId,
                label,
                networkName,
                targetNetworkId,
                testNetworkId,
                selectionTypeForFailover,
                isStaticIPMigrationEnabled,
                isMacMigrationEnabled,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.VMwareToAzStackHCIProtectedDiskProperties"/>. </summary>
        /// <param name="storageContainerId"> Gets or sets the ARM Id of the storage container. </param>
        /// <param name="storageContainerLocalPath"> Gets or sets the local path of the storage container. </param>
        /// <param name="sourceDiskId"> Gets or sets the source disk Id. </param>
        /// <param name="sourceDiskName"> Gets or sets the source disk Name. </param>
        /// <param name="seedDiskName"> Gets or sets the seed disk name. </param>
        /// <param name="testMigrateDiskName"> Gets or sets the test failover clone disk. </param>
        /// <param name="migrateDiskName"> Gets or sets the failover clone disk. </param>
        /// <param name="isOSDisk"> Gets or sets a value indicating whether the disk is the OS disk. </param>
        /// <param name="capacityInBytes"> Gets or sets the disk capacity in bytes. </param>
        /// <param name="isDynamic"> Gets or sets a value indicating whether dynamic sizing is enabled on the virtual hard disk. </param>
        /// <param name="diskType"> Gets or sets the disk type. </param>
        /// <param name="diskBlockSize"> Gets or sets a value of disk block size. </param>
        /// <param name="diskLogicalSectorSize"> Gets or sets a value of disk logical sector size. </param>
        /// <param name="diskPhysicalSectorSize"> Gets or sets a value of disk physical sector size. </param>
        /// <returns> A new <see cref="Models.VMwareToAzStackHCIProtectedDiskProperties"/> instance for mocking. </returns>
        public static VMwareToAzStackHCIProtectedDiskProperties VMwareToAzStackHCIProtectedDiskProperties(string storageContainerId = null, string storageContainerLocalPath = null, string sourceDiskId = null, string sourceDiskName = null, string seedDiskName = null, string testMigrateDiskName = null, string migrateDiskName = null, bool? isOSDisk = null, long? capacityInBytes = null, bool? isDynamic = null, string diskType = null, long? diskBlockSize = null, long? diskLogicalSectorSize = null, long? diskPhysicalSectorSize = null)
        {
            return new VMwareToAzStackHCIProtectedDiskProperties(
                storageContainerId,
                storageContainerLocalPath,
                sourceDiskId,
                sourceDiskName,
                seedDiskName,
                testMigrateDiskName,
                migrateDiskName,
                isOSDisk,
                capacityInBytes,
                isDynamic,
                diskType,
                diskBlockSize,
                diskLogicalSectorSize,
                diskPhysicalSectorSize,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.VMwareToAzStackHCIProtectedNicProperties"/>. </summary>
        /// <param name="nicId"> Gets or sets the NIC Id. </param>
        /// <param name="macAddress"> Gets or sets the NIC mac address. </param>
        /// <param name="label"> Gets or sets the NIC label. </param>
        /// <param name="isPrimaryNic"> Gets or sets a value indicating whether this is the primary NIC. </param>
        /// <param name="networkName"> Gets or sets the network name. </param>
        /// <param name="targetNetworkId"> Gets or sets the target network Id within AzStackHCI Cluster. </param>
        /// <param name="testNetworkId"> Gets or sets the target test network Id within AzStackHCI Cluster. </param>
        /// <param name="selectionTypeForFailover"> Gets or sets the selection type of the NIC. </param>
        /// <returns> A new <see cref="Models.VMwareToAzStackHCIProtectedNicProperties"/> instance for mocking. </returns>
        public static VMwareToAzStackHCIProtectedNicProperties VMwareToAzStackHCIProtectedNicProperties(string nicId = null, string macAddress = null, string label = null, bool? isPrimaryNic = null, string networkName = null, string targetNetworkId = null, string testNetworkId = null, VmNicSelection? selectionTypeForFailover = null)
        {
            return new VMwareToAzStackHCIProtectedNicProperties(
                nicId,
                macAddress,
                label,
                isPrimaryNic,
                networkName,
                targetNetworkId,
                testNetworkId,
                selectionTypeForFailover,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ProtectedItemModelPatch"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="customProperties"> Protected item model properties. </param>
        /// <returns> A new <see cref="Models.ProtectedItemModelPatch"/> instance for mocking. </returns>
        public static ProtectedItemModelPatch ProtectedItemModelPatch(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ProtectedItemModelCustomPropertiesUpdate customProperties = null)
        {
            return new ProtectedItemModelPatch(
                id,
                name,
                resourceType,
                systemData,
                customProperties != null ? new ProtectedItemModelPropertiesUpdate(customProperties, serializedAdditionalRawData: null) : null,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="RecoveryServicesDataReplication.RecoveryServicesDataReplicationPrivateLinkResourceDataData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="RecoveryServicesDataReplication.RecoveryServicesDataReplicationPrivateLinkResourceDataData"/> instance for mocking. </returns>
        public static RecoveryServicesDataReplicationPrivateLinkResourceDataData RecoveryServicesDataReplicationPrivateLinkResourceDataData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, RecoveryServicesDataReplicationPrivateLinkResourceProperties properties = null)
        {
            return new RecoveryServicesDataReplicationPrivateLinkResourceDataData(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.RecoveryServicesDataReplicationPrivateLinkResourceProperties"/>. </summary>
        /// <param name="groupId"> Gets or sets the group id. </param>
        /// <param name="requiredMembers"> Gets or sets the required member. This translates to how many Private IPs should be created for each privately linkable resource. </param>
        /// <param name="requiredZoneNames"> Gets or sets the private DNS zone names. </param>
        /// <param name="provisioningState"> Gets or sets the provisioning state of the private link resource. </param>
        /// <returns> A new <see cref="Models.RecoveryServicesDataReplicationPrivateLinkResourceProperties"/> instance for mocking. </returns>
        public static RecoveryServicesDataReplicationPrivateLinkResourceProperties RecoveryServicesDataReplicationPrivateLinkResourceProperties(string groupId = null, IEnumerable<string> requiredMembers = null, IEnumerable<string> requiredZoneNames = null, ProvisioningState? provisioningState = null)
        {
            requiredMembers ??= new List<string>();
            requiredZoneNames ??= new List<string>();

            return new RecoveryServicesDataReplicationPrivateLinkResourceProperties(groupId, requiredMembers?.ToList(), requiredZoneNames?.ToList(), provisioningState, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="RecoveryServicesDataReplication.PrivateEndpointConnectionProxyData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="etag"> Gets or sets ETag. </param>
        /// <returns> A new <see cref="RecoveryServicesDataReplication.PrivateEndpointConnectionProxyData"/> instance for mocking. </returns>
        public static PrivateEndpointConnectionProxyData PrivateEndpointConnectionProxyData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, PrivateEndpointConnectionProxyProperties properties = null, string etag = null)
        {
            return new PrivateEndpointConnectionProxyData(
                id,
                name,
                resourceType,
                systemData,
                properties,
                etag,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.PrivateEndpointConnectionProxyProperties"/>. </summary>
        /// <param name="provisioningState"> Gets or sets the provisioning state of the private endpoint connection proxy. </param>
        /// <param name="remotePrivateEndpoint"> Represent remote private endpoint information for the private endpoint connection proxy. </param>
        /// <returns> A new <see cref="Models.PrivateEndpointConnectionProxyProperties"/> instance for mocking. </returns>
        public static PrivateEndpointConnectionProxyProperties PrivateEndpointConnectionProxyProperties(ProvisioningState? provisioningState = null, RemotePrivateEndpoint remotePrivateEndpoint = null)
        {
            return new PrivateEndpointConnectionProxyProperties(provisioningState, remotePrivateEndpoint, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="RecoveryServicesDataReplication.RecoveryServicesDataReplicationPrivateEndpointConnectionData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="RecoveryServicesDataReplication.RecoveryServicesDataReplicationPrivateEndpointConnectionData"/> instance for mocking. </returns>
        public static RecoveryServicesDataReplicationPrivateEndpointConnectionData RecoveryServicesDataReplicationPrivateEndpointConnectionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, PrivateEndpointConnectionResponseProperties properties = null)
        {
            return new RecoveryServicesDataReplicationPrivateEndpointConnectionData(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.PrivateEndpointConnectionResponseProperties"/>. </summary>
        /// <param name="provisioningState"> Gets or sets provisioning state of the private endpoint connection. </param>
        /// <param name="privateEndpointId"> Represent private Endpoint network resource that is linked to the Private Endpoint connection. </param>
        /// <param name="privateLinkServiceConnectionState"> Represents Private link service connection state. </param>
        /// <returns> A new <see cref="Models.PrivateEndpointConnectionResponseProperties"/> instance for mocking. </returns>
        public static PrivateEndpointConnectionResponseProperties PrivateEndpointConnectionResponseProperties(ProvisioningState? provisioningState = null, ResourceIdentifier privateEndpointId = null, RecoveryServicesDataReplicationPrivateLinkServiceConnectionState privateLinkServiceConnectionState = null)
        {
            return new PrivateEndpointConnectionResponseProperties(provisioningState, privateEndpointId != null ? ResourceManagerModelFactory.WritableSubResource(privateEndpointId) : null, privateLinkServiceConnectionState, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="RecoveryServicesDataReplication.PolicyModelData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="RecoveryServicesDataReplication.PolicyModelData"/> instance for mocking. </returns>
        public static PolicyModelData PolicyModelData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, PolicyModelProperties properties = null)
        {
            return new PolicyModelData(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.PolicyModelProperties"/>. </summary>
        /// <param name="provisioningState"> Gets or sets the provisioning state of the policy. </param>
        /// <param name="customProperties">
        /// Policy model custom properties.
        /// Please note <see cref="PolicyModelCustomProperties"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="HyperVToAzStackHCIPolicyModelCustomProperties"/> and <see cref="VMwareToAzStackHCIPolicyModelCustomProperties"/>.
        /// </param>
        /// <returns> A new <see cref="Models.PolicyModelProperties"/> instance for mocking. </returns>
        public static PolicyModelProperties PolicyModelProperties(ProvisioningState? provisioningState = null, PolicyModelCustomProperties customProperties = null)
        {
            return new PolicyModelProperties(provisioningState, customProperties, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="RecoveryServicesDataReplication.JobModelData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="RecoveryServicesDataReplication.JobModelData"/> instance for mocking. </returns>
        public static JobModelData JobModelData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, JobModelProperties properties = null)
        {
            return new JobModelData(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.JobModelProperties"/>. </summary>
        /// <param name="displayName"> Gets or sets the friendly display name. </param>
        /// <param name="state"> Gets or sets the job state. </param>
        /// <param name="startOn"> Gets or sets the start time. </param>
        /// <param name="endOn"> Gets or sets the end time. </param>
        /// <param name="objectId"> Gets or sets the affected object Id. </param>
        /// <param name="objectName"> Gets or sets the affected object name. </param>
        /// <param name="objectInternalId"> Gets or sets the affected object internal Id. </param>
        /// <param name="objectInternalName"> Gets or sets the affected object internal name. </param>
        /// <param name="objectType"> Gets or sets the object type. </param>
        /// <param name="replicationProviderId"> Gets or sets the replication provider. </param>
        /// <param name="sourceFabricProviderId"> Gets or sets the source fabric provider. </param>
        /// <param name="targetFabricProviderId"> Gets or sets the target fabric provider. </param>
        /// <param name="allowedActions"> Gets or sets the list of allowed actions on the job. </param>
        /// <param name="activityId"> Gets or sets the job activity id. </param>
        /// <param name="tasks"> Gets or sets the list of tasks. </param>
        /// <param name="errors"> Gets or sets the list of errors. </param>
        /// <param name="customProperties">
        /// Job model custom properties.
        /// Please note <see cref="Models.JobModelCustomProperties"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="Models.FailoverJobModelCustomProperties"/>, <see cref="Models.TestFailoverCleanupJobModelCustomProperties"/> and <see cref="Models.TestFailoverJobModelCustomProperties"/>.
        /// </param>
        /// <param name="provisioningState"> Gets or sets the provisioning state of the job. </param>
        /// <returns> A new <see cref="Models.JobModelProperties"/> instance for mocking. </returns>
        public static JobModelProperties JobModelProperties(string displayName = null, JobState? state = null, DateTimeOffset? startOn = null, DateTimeOffset? endOn = null, string objectId = null, string objectName = null, string objectInternalId = null, string objectInternalName = null, JobObjectType? objectType = null, string replicationProviderId = null, string sourceFabricProviderId = null, string targetFabricProviderId = null, IEnumerable<string> allowedActions = null, string activityId = null, IEnumerable<TaskModel> tasks = null, IEnumerable<ErrorModel> errors = null, JobModelCustomProperties customProperties = null, ProvisioningState? provisioningState = null)
        {
            allowedActions ??= new List<string>();
            tasks ??= new List<TaskModel>();
            errors ??= new List<ErrorModel>();

            return new JobModelProperties(
                displayName,
                state,
                startOn,
                endOn,
                objectId,
                objectName,
                objectInternalId,
                objectInternalName,
                objectType,
                replicationProviderId,
                sourceFabricProviderId,
                targetFabricProviderId,
                allowedActions?.ToList(),
                activityId,
                tasks?.ToList(),
                errors?.ToList(),
                customProperties,
                provisioningState,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TaskModel"/>. </summary>
        /// <param name="taskName"> Gets or sets the task name. </param>
        /// <param name="state"> Gets or sets the task state. </param>
        /// <param name="startOn"> Gets or sets the start time. </param>
        /// <param name="endOn"> Gets or sets the end time. </param>
        /// <param name="customInstanceType"> Task model custom properties. </param>
        /// <param name="childrenJobs"> Gets or sets the list of children job models. </param>
        /// <returns> A new <see cref="Models.TaskModel"/> instance for mocking. </returns>
        public static TaskModel TaskModel(string taskName = null, TaskState? state = null, DateTimeOffset? startOn = null, DateTimeOffset? endOn = null, string customInstanceType = null, IEnumerable<JobModelData> childrenJobs = null)
        {
            childrenJobs ??= new List<JobModelData>();

            return new TaskModel(
                taskName,
                state,
                startOn,
                endOn,
                customInstanceType != null ? new TaskModelCustomProperties(customInstanceType, serializedAdditionalRawData: null) : null,
                childrenJobs?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ErrorModel"/>. </summary>
        /// <param name="code"> Gets or sets the error code. </param>
        /// <param name="type"> Gets or sets the error type. </param>
        /// <param name="severity"> Gets or sets the error severity. </param>
        /// <param name="createdOn"> Gets or sets the creation time of error. </param>
        /// <param name="message"> Gets or sets the error message. </param>
        /// <param name="causes"> Gets or sets the possible causes of error. </param>
        /// <param name="recommendation"> Gets or sets the recommended action to resolve error. </param>
        /// <returns> A new <see cref="Models.ErrorModel"/> instance for mocking. </returns>
        public static ErrorModel ErrorModel(string code = null, string type = null, string severity = null, DateTimeOffset? createdOn = null, string message = null, string causes = null, string recommendation = null)
        {
            return new ErrorModel(
                code,
                type,
                severity,
                createdOn,
                message,
                causes,
                recommendation,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.JobModelCustomProperties"/>. </summary>
        /// <param name="instanceType"> Discriminator property for JobModelCustomProperties. </param>
        /// <param name="affectedObjectDetails"> Gets or sets any custom properties of the affected object. </param>
        /// <returns> A new <see cref="Models.JobModelCustomProperties"/> instance for mocking. </returns>
        public static JobModelCustomProperties JobModelCustomProperties(string instanceType = null, JobModelCustomPropertiesAffectedObjectDetails affectedObjectDetails = null)
        {
            return new UnknownJobModelCustomProperties(instanceType, affectedObjectDetails, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.JobModelCustomPropertiesAffectedObjectDetails"/>. </summary>
        /// <param name="description"></param>
        /// <param name="type"></param>
        /// <returns> A new <see cref="Models.JobModelCustomPropertiesAffectedObjectDetails"/> instance for mocking. </returns>
        public static JobModelCustomPropertiesAffectedObjectDetails JobModelCustomPropertiesAffectedObjectDetails(string description = null, JobModelCustomPropertiesAffectedObjectDetailsType? type = null)
        {
            return new JobModelCustomPropertiesAffectedObjectDetails(description, type, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.FailoverJobModelCustomProperties"/>. </summary>
        /// <param name="affectedObjectDetails"> Gets or sets any custom properties of the affected object. </param>
        /// <param name="protectedItemDetails"> Gets or sets the failed over protected item details. </param>
        /// <returns> A new <see cref="Models.FailoverJobModelCustomProperties"/> instance for mocking. </returns>
        public static FailoverJobModelCustomProperties FailoverJobModelCustomProperties(JobModelCustomPropertiesAffectedObjectDetails affectedObjectDetails = null, IEnumerable<FailoverProtectedItemProperties> protectedItemDetails = null)
        {
            protectedItemDetails ??= new List<FailoverProtectedItemProperties>();

            return new FailoverJobModelCustomProperties("FailoverJobDetails", affectedObjectDetails, serializedAdditionalRawData: null, protectedItemDetails?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.FailoverProtectedItemProperties"/>. </summary>
        /// <param name="protectedItemName"> Gets or sets the protected item name. </param>
        /// <param name="vmName"> Gets or sets the VM name. </param>
        /// <param name="testVmName"> Gets or sets the test VM name. </param>
        /// <param name="recoveryPointId"> Gets or sets the recovery point Id. </param>
        /// <param name="recoveryPointOn"> Gets or sets the recovery point time. </param>
        /// <param name="networkName"> Gets or sets the network name. </param>
        /// <param name="subnet"> Gets or sets the network subnet. </param>
        /// <returns> A new <see cref="Models.FailoverProtectedItemProperties"/> instance for mocking. </returns>
        public static FailoverProtectedItemProperties FailoverProtectedItemProperties(string protectedItemName = null, string vmName = null, string testVmName = null, string recoveryPointId = null, DateTimeOffset? recoveryPointOn = null, string networkName = null, string subnet = null)
        {
            return new FailoverProtectedItemProperties(
                protectedItemName,
                vmName,
                testVmName,
                recoveryPointId,
                recoveryPointOn,
                networkName,
                subnet,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TestFailoverCleanupJobModelCustomProperties"/>. </summary>
        /// <param name="affectedObjectDetails"> Gets or sets any custom properties of the affected object. </param>
        /// <param name="comments"> Gets or sets the test failover cleanup comments. </param>
        /// <returns> A new <see cref="Models.TestFailoverCleanupJobModelCustomProperties"/> instance for mocking. </returns>
        public static TestFailoverCleanupJobModelCustomProperties TestFailoverCleanupJobModelCustomProperties(JobModelCustomPropertiesAffectedObjectDetails affectedObjectDetails = null, string comments = null)
        {
            return new TestFailoverCleanupJobModelCustomProperties("TestFailoverCleanupJobDetails", affectedObjectDetails, serializedAdditionalRawData: null, comments);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TestFailoverJobModelCustomProperties"/>. </summary>
        /// <param name="affectedObjectDetails"> Gets or sets any custom properties of the affected object. </param>
        /// <param name="protectedItemDetails"> Gets or sets the test VM details. </param>
        /// <returns> A new <see cref="Models.TestFailoverJobModelCustomProperties"/> instance for mocking. </returns>
        public static TestFailoverJobModelCustomProperties TestFailoverJobModelCustomProperties(JobModelCustomPropertiesAffectedObjectDetails affectedObjectDetails = null, IEnumerable<FailoverProtectedItemProperties> protectedItemDetails = null)
        {
            protectedItemDetails ??= new List<FailoverProtectedItemProperties>();

            return new TestFailoverJobModelCustomProperties("TestFailoverJobDetails", affectedObjectDetails, serializedAdditionalRawData: null, protectedItemDetails?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="RecoveryServicesDataReplication.FabricAgentModelData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="RecoveryServicesDataReplication.FabricAgentModelData"/> instance for mocking. </returns>
        public static FabricAgentModelData FabricAgentModelData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, FabricAgentModelProperties properties = null)
        {
            return new FabricAgentModelData(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.FabricAgentModelProperties"/>. </summary>
        /// <param name="correlationId"> Gets or sets the fabric agent correlation Id. </param>
        /// <param name="machineId"> Gets or sets the machine Id where fabric agent is running. </param>
        /// <param name="machineName"> Gets or sets the machine name where fabric agent is running. </param>
        /// <param name="authenticationIdentity"> Identity model. </param>
        /// <param name="resourceAccessIdentity"> Identity model. </param>
        /// <param name="isResponsive"> Gets or sets a value indicating whether the fabric agent is responsive. </param>
        /// <param name="lastHeartbeat"> Gets or sets the time when last heartbeat was sent by the fabric agent. </param>
        /// <param name="versionNumber"> Gets or sets the fabric agent version. </param>
        /// <param name="provisioningState"> Gets or sets the provisioning state of the fabric agent. </param>
        /// <param name="healthErrors"> Gets or sets the list of health errors. </param>
        /// <param name="customProperties">
        /// Fabric agent model custom properties.
        /// Please note <see cref="FabricAgentModelCustomProperties"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="VMwareFabricAgentModelCustomProperties"/>.
        /// </param>
        /// <returns> A new <see cref="Models.FabricAgentModelProperties"/> instance for mocking. </returns>
        public static FabricAgentModelProperties FabricAgentModelProperties(string correlationId = null, string machineId = null, string machineName = null, IdentityModel authenticationIdentity = null, IdentityModel resourceAccessIdentity = null, bool? isResponsive = null, DateTimeOffset? lastHeartbeat = null, string versionNumber = null, ProvisioningState? provisioningState = null, IEnumerable<HealthErrorModel> healthErrors = null, FabricAgentModelCustomProperties customProperties = null)
        {
            healthErrors ??= new List<HealthErrorModel>();

            return new FabricAgentModelProperties(
                correlationId,
                machineId,
                machineName,
                authenticationIdentity,
                resourceAccessIdentity,
                isResponsive,
                lastHeartbeat,
                versionNumber,
                provisioningState,
                healthErrors?.ToList(),
                customProperties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="RecoveryServicesDataReplication.FabricModelData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="RecoveryServicesDataReplication.FabricModelData"/> instance for mocking. </returns>
        public static FabricModelData FabricModelData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, FabricModelProperties properties = null)
        {
            tags ??= new Dictionary<string, string>();

            return new FabricModelData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.FabricModelProperties"/>. </summary>
        /// <param name="provisioningState"> Gets or sets the provisioning state of the fabric. </param>
        /// <param name="serviceEndpoint"> Gets or sets the service endpoint. </param>
        /// <param name="serviceResourceId"> Gets or sets the service resource Id. </param>
        /// <param name="health"> Gets or sets the fabric health. </param>
        /// <param name="healthErrors"> Gets or sets the list of health errors. </param>
        /// <param name="customProperties">
        /// Fabric model custom properties.
        /// Please note <see cref="FabricModelCustomProperties"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="Models.AzStackHCIFabricModelCustomProperties"/>, <see cref="Models.HyperVMigrateFabricModelCustomProperties"/> and <see cref="VMwareMigrateFabricModelCustomProperties"/>.
        /// </param>
        /// <returns> A new <see cref="Models.FabricModelProperties"/> instance for mocking. </returns>
        public static FabricModelProperties FabricModelProperties(ProvisioningState? provisioningState = null, string serviceEndpoint = null, string serviceResourceId = null, HealthStatus? health = null, IEnumerable<HealthErrorModel> healthErrors = null, FabricModelCustomProperties customProperties = null)
        {
            healthErrors ??= new List<HealthErrorModel>();

            return new FabricModelProperties(
                provisioningState,
                serviceEndpoint,
                serviceResourceId,
                health,
                healthErrors?.ToList(),
                customProperties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AzStackHCIFabricModelCustomProperties"/>. </summary>
        /// <param name="azStackHciSiteId"> Gets or sets the ARM Id of the AzStackHCI site. </param>
        /// <param name="applianceName"> Gets or sets the Appliance name. </param>
        /// <param name="cluster"> AzStackHCI cluster properties. </param>
        /// <param name="fabricResourceId"> Gets or sets the fabric resource Id. </param>
        /// <param name="fabricContainerId"> Gets or sets the fabric container Id. </param>
        /// <param name="migrationSolutionId"> Gets or sets the Migration solution ARM Id. </param>
        /// <param name="migrationHubUri"> Gets or sets the migration hub Uri. </param>
        /// <returns> A new <see cref="Models.AzStackHCIFabricModelCustomProperties"/> instance for mocking. </returns>
        public static AzStackHCIFabricModelCustomProperties AzStackHCIFabricModelCustomProperties(string azStackHciSiteId = null, IEnumerable<string> applianceName = null, AzStackHCIClusterProperties cluster = null, string fabricResourceId = null, string fabricContainerId = null, string migrationSolutionId = null, string migrationHubUri = null)
        {
            applianceName ??= new List<string>();

            return new AzStackHCIFabricModelCustomProperties(
                "AzStackHCI",
                serializedAdditionalRawData: null,
                azStackHciSiteId,
                applianceName?.ToList(),
                cluster,
                fabricResourceId,
                fabricContainerId,
                migrationSolutionId,
                migrationHubUri);
        }

        /// <summary> Initializes a new instance of <see cref="Models.HyperVMigrateFabricModelCustomProperties"/>. </summary>
        /// <param name="hyperVSiteId"> Gets or sets the ARM Id of the HyperV site. </param>
        /// <param name="fabricResourceId"> Gets or sets the fabric resource Id. </param>
        /// <param name="fabricContainerId"> Gets or sets the fabric container Id. </param>
        /// <param name="migrationSolutionId"> Gets or sets the migration solution ARM Id. </param>
        /// <param name="migrationHubUri"> Gets or sets the migration hub Uri. </param>
        /// <returns> A new <see cref="Models.HyperVMigrateFabricModelCustomProperties"/> instance for mocking. </returns>
        public static HyperVMigrateFabricModelCustomProperties HyperVMigrateFabricModelCustomProperties(string hyperVSiteId = null, string fabricResourceId = null, string fabricContainerId = null, string migrationSolutionId = null, string migrationHubUri = null)
        {
            return new HyperVMigrateFabricModelCustomProperties(
                "HyperVMigrate",
                serializedAdditionalRawData: null,
                hyperVSiteId,
                fabricResourceId,
                fabricContainerId,
                migrationSolutionId,
                migrationHubUri);
        }

        /// <summary> Initializes a new instance of <see cref="Models.FabricModelPatch"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> Gets or sets the resource tags. </param>
        /// <param name="properties"> Fabric model properties. </param>
        /// <returns> A new <see cref="Models.FabricModelPatch"/> instance for mocking. </returns>
        public static FabricModelPatch FabricModelPatch(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, FabricModelProperties properties = null)
        {
            tags ??= new Dictionary<string, string>();

            return new FabricModelPatch(
                id,
                name,
                resourceType,
                systemData,
                tags,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="RecoveryServicesDataReplication.EventModelData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="RecoveryServicesDataReplication.EventModelData"/> instance for mocking. </returns>
        public static EventModelData EventModelData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, EventModelProperties properties = null)
        {
            return new EventModelData(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.EventModelProperties"/>. </summary>
        /// <param name="resourceType"> Gets or sets the resource type. </param>
        /// <param name="resourceName"> Gets or sets the resource name. </param>
        /// <param name="eventType"> Gets or sets the event type. </param>
        /// <param name="eventName"> Gets or sets the event name. </param>
        /// <param name="timeOfOccurrence"> Gets or sets the time at which the event occurred at source. </param>
        /// <param name="severity"> Gets or sets the event severity. </param>
        /// <param name="description"> Gets or sets the event description. </param>
        /// <param name="correlationId"> Gets or sets the event correlation Id. </param>
        /// <param name="healthErrors"> Gets or sets the errors associated with this event. </param>
        /// <param name="customProperties">
        /// Event model custom properties.
        /// Please note <see cref="EventModelCustomProperties"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="Models.HyperVToAzStackHCIEventModelCustomProperties"/> and <see cref="Models.VMwareToAzStackHCIEventModelCustomProperties"/>.
        /// </param>
        /// <param name="provisioningState"> Gets or sets the provisioning state of the event. </param>
        /// <returns> A new <see cref="Models.EventModelProperties"/> instance for mocking. </returns>
        public static EventModelProperties EventModelProperties(string resourceType = null, string resourceName = null, string eventType = null, string eventName = null, DateTimeOffset? timeOfOccurrence = null, string severity = null, string description = null, string correlationId = null, IEnumerable<HealthErrorModel> healthErrors = null, EventModelCustomProperties customProperties = null, ProvisioningState? provisioningState = null)
        {
            healthErrors ??= new List<HealthErrorModel>();

            return new EventModelProperties(
                resourceType,
                resourceName,
                eventType,
                eventName,
                timeOfOccurrence,
                severity,
                description,
                correlationId,
                healthErrors?.ToList(),
                customProperties,
                provisioningState,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.HyperVToAzStackHCIEventModelCustomProperties"/>. </summary>
        /// <param name="eventSourceFriendlyName"> Gets or sets the friendly name of the source which has raised this health event. </param>
        /// <param name="protectedItemFriendlyName"> Gets or sets the protected item friendly name. </param>
        /// <param name="sourceApplianceName"> Gets or sets the source appliance name. </param>
        /// <param name="targetApplianceName"> Gets or sets the source target name. </param>
        /// <param name="serverType"> Gets or sets the server type. </param>
        /// <returns> A new <see cref="Models.HyperVToAzStackHCIEventModelCustomProperties"/> instance for mocking. </returns>
        public static HyperVToAzStackHCIEventModelCustomProperties HyperVToAzStackHCIEventModelCustomProperties(string eventSourceFriendlyName = null, string protectedItemFriendlyName = null, string sourceApplianceName = null, string targetApplianceName = null, string serverType = null)
        {
            return new HyperVToAzStackHCIEventModelCustomProperties(
                "HyperVToAzStackHCI",
                serializedAdditionalRawData: null,
                eventSourceFriendlyName,
                protectedItemFriendlyName,
                sourceApplianceName,
                targetApplianceName,
                serverType);
        }

        /// <summary> Initializes a new instance of <see cref="Models.VMwareToAzStackHCIEventModelCustomProperties"/>. </summary>
        /// <param name="eventSourceFriendlyName"> Gets or sets the friendly name of the source which has raised this health event. </param>
        /// <param name="protectedItemFriendlyName"> Gets or sets the protected item friendly name. </param>
        /// <param name="sourceApplianceName"> Gets or sets the source appliance name. </param>
        /// <param name="targetApplianceName"> Gets or sets the source target name. </param>
        /// <param name="serverType"> Gets or sets the server type. </param>
        /// <returns> A new <see cref="Models.VMwareToAzStackHCIEventModelCustomProperties"/> instance for mocking. </returns>
        public static VMwareToAzStackHCIEventModelCustomProperties VMwareToAzStackHCIEventModelCustomProperties(string eventSourceFriendlyName = null, string protectedItemFriendlyName = null, string sourceApplianceName = null, string targetApplianceName = null, string serverType = null)
        {
            return new VMwareToAzStackHCIEventModelCustomProperties(
                "VMwareToAzStackHCI",
                serializedAdditionalRawData: null,
                eventSourceFriendlyName,
                protectedItemFriendlyName,
                sourceApplianceName,
                targetApplianceName,
                serverType);
        }

        /// <summary> Initializes a new instance of <see cref="RecoveryServicesDataReplication.VaultModelData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="identity"> The managed service identities assigned to this resource. </param>
        /// <returns> A new <see cref="RecoveryServicesDataReplication.VaultModelData"/> instance for mocking. </returns>
        public static VaultModelData VaultModelData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, VaultModelProperties properties = null, ManagedServiceIdentity identity = null)
        {
            tags ??= new Dictionary<string, string>();

            return new VaultModelData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                identity,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.VaultModelProperties"/>. </summary>
        /// <param name="provisioningState"> Gets or sets the provisioning state of the vault. </param>
        /// <param name="serviceResourceId"> Gets or sets the service resource Id. </param>
        /// <param name="vaultType"> Gets or sets the type of vault. </param>
        /// <returns> A new <see cref="Models.VaultModelProperties"/> instance for mocking. </returns>
        public static VaultModelProperties VaultModelProperties(ProvisioningState? provisioningState = null, string serviceResourceId = null, ReplicationVaultType? vaultType = null)
        {
            return new VaultModelProperties(provisioningState, serviceResourceId, vaultType, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.VaultModelPatch"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> Gets or sets the resource tags. </param>
        /// <param name="properties"> Vault properties. </param>
        /// <param name="identity"> Vault identity. Current supported identity types: None, SystemAssigned, UserAssigned. </param>
        /// <returns> A new <see cref="Models.VaultModelPatch"/> instance for mocking. </returns>
        public static VaultModelPatch VaultModelPatch(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, VaultModelProperties properties = null, ManagedServiceIdentity identity = null)
        {
            tags ??= new Dictionary<string, string>();

            return new VaultModelPatch(
                id,
                name,
                resourceType,
                systemData,
                tags,
                properties,
                identity,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="RecoveryServicesDataReplication.EmailConfigurationModelData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="RecoveryServicesDataReplication.EmailConfigurationModelData"/> instance for mocking. </returns>
        public static EmailConfigurationModelData EmailConfigurationModelData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, EmailConfigurationModelProperties properties = null)
        {
            return new EmailConfigurationModelData(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.EmailConfigurationModelProperties"/>. </summary>
        /// <param name="sendToOwners"> Gets or sets a value indicating whether to send email to subscription administrator. </param>
        /// <param name="customEmailAddresses"> Gets or sets the custom email address for sending emails. </param>
        /// <param name="locale"> Gets or sets the locale for the email notification. </param>
        /// <param name="provisioningState"> Gets or sets the provisioning state of the email configuration. </param>
        /// <returns> A new <see cref="Models.EmailConfigurationModelProperties"/> instance for mocking. </returns>
        public static EmailConfigurationModelProperties EmailConfigurationModelProperties(bool sendToOwners = default, IEnumerable<string> customEmailAddresses = null, string locale = null, ProvisioningState? provisioningState = null)
        {
            customEmailAddresses ??= new List<string>();

            return new EmailConfigurationModelProperties(sendToOwners, customEmailAddresses?.ToList(), locale, provisioningState, serializedAdditionalRawData: null);
        }
    }
}
