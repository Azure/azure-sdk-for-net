// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.RecoveryServicesDataReplication.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.RecoveryServicesDataReplication.Samples
{
    public partial class Sample_VaultModelResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_GetsTheVault()
        {
            // Generated from example definition: 2024-09-01/Vault_Get.json
            // this example is just showing the usage of "VaultModel_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this VaultModelResource created on azure
            // for more information of creating VaultModelResource, please refer to the document of VaultModelResource
            string subscriptionId = "930CEC23-4430-4513-B855-DBA237E2F3BF";
            string resourceGroupName = "rgrecoveryservicesdatareplication";
            string vaultName = "4";
            ResourceIdentifier vaultModelResourceId = VaultModelResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, vaultName);
            VaultModelResource vaultModel = client.GetVaultModelResource(vaultModelResourceId);

            // invoke the operation
            VaultModelResource result = await vaultModel.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            VaultModelData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_DeletesTheVault()
        {
            // Generated from example definition: 2024-09-01/Vault_Delete.json
            // this example is just showing the usage of "VaultModel_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this VaultModelResource created on azure
            // for more information of creating VaultModelResource, please refer to the document of VaultModelResource
            string subscriptionId = "930CEC23-4430-4513-B855-DBA237E2F3BF";
            string resourceGroupName = "rgrecoveryservicesdatareplication";
            string vaultName = "4";
            ResourceIdentifier vaultModelResourceId = VaultModelResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, vaultName);
            VaultModelResource vaultModel = client.GetVaultModelResource(vaultModelResourceId);

            // invoke the operation
            await vaultModel.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_UpdatesTheVault()
        {
            // Generated from example definition: 2024-09-01/Vault_Update.json
            // this example is just showing the usage of "VaultModel_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this VaultModelResource created on azure
            // for more information of creating VaultModelResource, please refer to the document of VaultModelResource
            string subscriptionId = "930CEC23-4430-4513-B855-DBA237E2F3BF";
            string resourceGroupName = "rgrecoveryservicesdatareplication";
            string vaultName = "4";
            ResourceIdentifier vaultModelResourceId = VaultModelResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, vaultName);
            VaultModelResource vaultModel = client.GetVaultModelResource(vaultModelResourceId);

            // invoke the operation
            VaultModelPatch patch = new VaultModelPatch
            {
                Tags =
{
["key8872"] = "pvtc"
},
                Properties = new VaultModelProperties
                {
                    VaultType = ReplicationVaultType.DisasterRecovery,
                },
            };
            ArmOperation<VaultModelResource> lro = await vaultModel.UpdateAsync(WaitUntil.Completed, patch);
            VaultModelResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            VaultModelData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
