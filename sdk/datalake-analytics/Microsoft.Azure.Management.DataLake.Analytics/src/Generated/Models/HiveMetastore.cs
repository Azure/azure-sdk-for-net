// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataLake.Analytics.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    [Rest.Serialization.JsonTransformation]
    public partial class HiveMetastore : SubResource
    {
        /// <summary>
        /// Initializes a new instance of the HiveMetastore class.
        /// </summary>
        public HiveMetastore()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the HiveMetastore class.
        /// </summary>
        /// <param name="id">The resource identifier.</param>
        /// <param name="name">The resource name.</param>
        /// <param name="type">The resource type.</param>
        /// <param name="serverUri">The serverUri for the Hive
        /// MetaStore</param>
        /// <param name="databaseName">The databaseName for the Hive
        /// MetaStore</param>
        /// <param name="runtimeVersion">The runtimeVersion for the Hive
        /// MetaStore</param>
        /// <param name="userName">The userName for the Hive MetaStore</param>
        /// <param name="password">The password for the Hive MetaStore</param>
        /// <param name="nestedResourceProvisioningState">The current state of
        /// the NestedResource. Possible values include: 'Succeeded',
        /// 'Canceled', 'Failed'</param>
        public HiveMetastore(string id = default(string), string name = default(string), string type = default(string), string serverUri = default(string), string databaseName = default(string), string runtimeVersion = default(string), string userName = default(string), string password = default(string), NestedResourceProvisioningState? nestedResourceProvisioningState = default(NestedResourceProvisioningState?))
            : base(id, name, type)
        {
            ServerUri = serverUri;
            DatabaseName = databaseName;
            RuntimeVersion = runtimeVersion;
            UserName = userName;
            Password = password;
            NestedResourceProvisioningState = nestedResourceProvisioningState;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the serverUri for the Hive MetaStore
        /// </summary>
        [JsonProperty(PropertyName = "properties.serverUri")]
        public string ServerUri { get; private set; }

        /// <summary>
        /// Gets the databaseName for the Hive MetaStore
        /// </summary>
        [JsonProperty(PropertyName = "properties.databaseName")]
        public string DatabaseName { get; private set; }

        /// <summary>
        /// Gets the runtimeVersion for the Hive MetaStore
        /// </summary>
        [JsonProperty(PropertyName = "properties.runtimeVersion")]
        public string RuntimeVersion { get; private set; }

        /// <summary>
        /// Gets the userName for the Hive MetaStore
        /// </summary>
        [JsonProperty(PropertyName = "properties.userName")]
        public string UserName { get; private set; }

        /// <summary>
        /// Gets the password for the Hive MetaStore
        /// </summary>
        [JsonProperty(PropertyName = "properties.password")]
        public string Password { get; private set; }

        /// <summary>
        /// Gets the current state of the NestedResource. Possible values
        /// include: 'Succeeded', 'Canceled', 'Failed'
        /// </summary>
        [JsonProperty(PropertyName = "properties.nestedResourceProvisioningState")]
        public NestedResourceProvisioningState? NestedResourceProvisioningState { get; private set; }

    }
}
