// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataLake.Analytics.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// U-SQL job properties used when submitting U-SQL jobs.
    /// </summary>
    [Newtonsoft.Json.JsonObject("USql")]
    public partial class CreateUSqlJobProperties : CreateJobProperties
    {
        /// <summary>
        /// Initializes a new instance of the CreateUSqlJobProperties class.
        /// </summary>
        public CreateUSqlJobProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CreateUSqlJobProperties class.
        /// </summary>
        /// <param name="script">The script to run. Please note that the
        /// maximum script size is 3 MB.</param>
        /// <param name="runtimeVersion">The runtime version of the Data Lake
        /// Analytics engine to use for the specific type of job being
        /// run.</param>
        /// <param name="compileMode">The specific compilation mode for the job
        /// used during execution. If this is not specified during submission,
        /// the server will determine the optimal compilation mode. Possible
        /// values include: 'Semantic', 'Full', 'SingleBox'</param>
        public CreateUSqlJobProperties(string script, string runtimeVersion = default(string), CompileMode? compileMode = default(CompileMode?))
            : base(script, runtimeVersion)
        {
            CompileMode = compileMode;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the specific compilation mode for the job used during
        /// execution. If this is not specified during submission, the server
        /// will determine the optimal compilation mode. Possible values
        /// include: 'Semantic', 'Full', 'SingleBox'
        /// </summary>
        [JsonProperty(PropertyName = "compileMode")]
        public CompileMode? CompileMode { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
        }
    }
}
