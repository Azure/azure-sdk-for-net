// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.DataLakeAnalytics.Models;

namespace Azure.ResourceManager.DataLakeAnalytics
{
    public partial class Sample_StorageAccountInformationResource
    {
        // Gets the specified Azure Storage account
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetsTheSpecifiedAzureStorageAccount()
        {
            // Generated from example definition: specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/StorageAccounts_Get.json
            // this example is just showing the usage of "StorageAccounts_Get" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this StorageAccountInformationResource created on azure
            // for more information of creating StorageAccountInformationResource, please refer to the document of StorageAccountInformationResource
            string subscriptionId = "34adfa4f-cedf-4dc0-ba29-b6d1a69ab345";
            string resourceGroupName = "contosorg";
            string accountName = "contosoadla";
            string storageAccountName = "test_storage";
            ResourceIdentifier storageAccountInformationResourceId = StorageAccountInformationResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, accountName, storageAccountName);
            StorageAccountInformationResource storageAccountInformation = client.GetStorageAccountInformationResource(storageAccountInformationResourceId);

            // invoke the operation
            StorageAccountInformationResource result = await storageAccountInformation.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            StorageAccountInformationData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Replaces Azure Storage blob account details
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_ReplacesAzureStorageBlobAccountDetails()
        {
            // Generated from example definition: specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/StorageAccounts_Update.json
            // this example is just showing the usage of "StorageAccounts_Update" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this StorageAccountInformationResource created on azure
            // for more information of creating StorageAccountInformationResource, please refer to the document of StorageAccountInformationResource
            string subscriptionId = "34adfa4f-cedf-4dc0-ba29-b6d1a69ab345";
            string resourceGroupName = "contosorg";
            string accountName = "contosoadla";
            string storageAccountName = "test_storage";
            ResourceIdentifier storageAccountInformationResourceId = StorageAccountInformationResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, accountName, storageAccountName);
            StorageAccountInformationResource storageAccountInformation = client.GetStorageAccountInformationResource(storageAccountInformationResourceId);

            // invoke the operation
            StorageAccountInformationPatch patch = new StorageAccountInformationPatch()
            {
                AccessKey = "34adfa4f-cedf-4dc0-ba29-b6d1a69ab346",
                Suffix = "test_suffix",
            };
            await storageAccountInformation.UpdateAsync(patch);

            Console.WriteLine($"Succeeded");
        }

        // Removes an Azure Storage account
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_RemovesAnAzureStorageAccount()
        {
            // Generated from example definition: specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/StorageAccounts_Delete.json
            // this example is just showing the usage of "StorageAccounts_Delete" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this StorageAccountInformationResource created on azure
            // for more information of creating StorageAccountInformationResource, please refer to the document of StorageAccountInformationResource
            string subscriptionId = "34adfa4f-cedf-4dc0-ba29-b6d1a69ab345";
            string resourceGroupName = "contosorg";
            string accountName = "contosoadla";
            string storageAccountName = "test_storage";
            ResourceIdentifier storageAccountInformationResourceId = StorageAccountInformationResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, accountName, storageAccountName);
            StorageAccountInformationResource storageAccountInformation = client.GetStorageAccountInformationResource(storageAccountInformationResourceId);

            // invoke the operation
            await storageAccountInformation.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }
    }
}
