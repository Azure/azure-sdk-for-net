// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Azure.ResourceManager.DataLakeAnalytics.Models
{
    /// <summary> The parameters to use for creating a Data Lake Analytics account. </summary>
    public partial class DataLakeAnalyticsAccountCreateOrUpdateContent
    {
        /// <summary> Initializes a new instance of DataLakeAnalyticsAccountCreateOrUpdateContent. </summary>
        /// <param name="location"> The resource location. </param>
        /// <param name="defaultDataLakeStoreAccount"> The default Data Lake Store account associated with this account. </param>
        /// <param name="dataLakeStoreAccounts"> The list of Data Lake Store accounts associated with this account. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="defaultDataLakeStoreAccount"/> or <paramref name="dataLakeStoreAccounts"/> is null. </exception>
        public DataLakeAnalyticsAccountCreateOrUpdateContent(AzureLocation location, string defaultDataLakeStoreAccount, IEnumerable<AddDataLakeStoreWithAccountParameters> dataLakeStoreAccounts)
        {
            if (defaultDataLakeStoreAccount == null)
            {
                throw new ArgumentNullException(nameof(defaultDataLakeStoreAccount));
            }
            if (dataLakeStoreAccounts == null)
            {
                throw new ArgumentNullException(nameof(dataLakeStoreAccounts));
            }

            Location = location;
            Tags = new ChangeTrackingDictionary<string, string>();
            DefaultDataLakeStoreAccount = defaultDataLakeStoreAccount;
            DataLakeStoreAccounts = dataLakeStoreAccounts.ToList();
            StorageAccounts = new ChangeTrackingList<AddStorageAccountWithAccountParameters>();
            ComputePolicies = new ChangeTrackingList<CreateComputePolicyWithAccountParameters>();
            FirewallRules = new ChangeTrackingList<CreateFirewallRuleWithAccountParameters>();
        }

        /// <summary> The resource location. </summary>
        public AzureLocation Location { get; }
        /// <summary> The resource tags. </summary>
        public IDictionary<string, string> Tags { get; }
        /// <summary> The default Data Lake Store account associated with this account. </summary>
        public string DefaultDataLakeStoreAccount { get; }
        /// <summary> The list of Data Lake Store accounts associated with this account. </summary>
        public IList<AddDataLakeStoreWithAccountParameters> DataLakeStoreAccounts { get; }
        /// <summary> The list of Azure Blob Storage accounts associated with this account. </summary>
        public IList<AddStorageAccountWithAccountParameters> StorageAccounts { get; }
        /// <summary> The list of compute policies associated with this account. </summary>
        public IList<CreateComputePolicyWithAccountParameters> ComputePolicies { get; }
        /// <summary> The list of firewall rules associated with this account. </summary>
        public IList<CreateFirewallRuleWithAccountParameters> FirewallRules { get; }
        /// <summary> The current state of the IP address firewall for this account. </summary>
        public FirewallState? FirewallState { get; set; }
        /// <summary> The current state of allowing or disallowing IPs originating within Azure through the firewall. If the firewall is disabled, this is not enforced. </summary>
        public FirewallAllowAzureIPsState? FirewallAllowAzureIPs { get; set; }
        /// <summary> The commitment tier for the next month. </summary>
        public TierType? NewTier { get; set; }
        /// <summary> The maximum supported jobs running under the account at the same time. </summary>
        public int? MaxJobCount { get; set; }
        /// <summary> The maximum supported degree of parallelism for this account. </summary>
        public int? MaxDegreeOfParallelism { get; set; }
        /// <summary> The maximum supported degree of parallelism per job for this account. </summary>
        public int? MaxDegreeOfParallelismPerJob { get; set; }
        /// <summary> The minimum supported priority per job for this account. </summary>
        public int? MinPriorityPerJob { get; set; }
        /// <summary> The number of days that job metadata is retained. </summary>
        public int? QueryStoreRetention { get; set; }
    }
}
