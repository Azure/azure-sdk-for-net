// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.ConfidentialLedger.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.ConfidentialLedger
{
    /// <summary> A class representing the ConfidentialLedger data model. </summary>
    public partial class ConfidentialLedgerData : ResourceData
    {
        /// <summary> Initializes a new instance of ConfidentialLedgerData. </summary>
        public ConfidentialLedgerData()
        {
            Tags = new ChangeTrackingDictionary<string, string>();
        }

        /// <summary> Initializes a new instance of ConfidentialLedgerData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Properties of Confidential Ledger Resource. </param>
        /// <param name="location"> The Azure location where the Confidential Ledger is running. </param>
        /// <param name="tags"> Additional tags for Confidential Ledger. </param>
        internal ConfidentialLedgerData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, LedgerProperties properties, AzureLocation? location, IDictionary<string, string> tags) : base(id, name, resourceType, systemData)
        {
            Properties = properties;
            Location = location;
            Tags = tags;
        }

        /// <summary> Properties of Confidential Ledger Resource. </summary>
        public LedgerProperties Properties { get; set; }
        /// <summary> The Azure location where the Confidential Ledger is running. </summary>
        public AzureLocation? Location { get; set; }
        /// <summary> Additional tags for Confidential Ledger. </summary>
        public IDictionary<string, string> Tags { get; }
    }
}
