// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ConfidentialLedger.Models
{
    /// <summary> Object representing RunningState for Confidential Ledger. </summary>
    public readonly partial struct RunningState : IEquatable<RunningState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="RunningState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public RunningState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ActiveValue = "Active";
        private const string PausedValue = "Paused";
        private const string UnknownValue = "Unknown";
        private const string PausingValue = "Pausing";
        private const string ResumingValue = "Resuming";

        /// <summary> Active. </summary>
        public static RunningState Active { get; } = new RunningState(ActiveValue);
        /// <summary> Paused. </summary>
        public static RunningState Paused { get; } = new RunningState(PausedValue);
        /// <summary> Unknown. </summary>
        public static RunningState Unknown { get; } = new RunningState(UnknownValue);
        /// <summary> Pausing. </summary>
        public static RunningState Pausing { get; } = new RunningState(PausingValue);
        /// <summary> Resuming. </summary>
        public static RunningState Resuming { get; } = new RunningState(ResumingValue);
        /// <summary> Determines if two <see cref="RunningState"/> values are the same. </summary>
        public static bool operator ==(RunningState left, RunningState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="RunningState"/> values are not the same. </summary>
        public static bool operator !=(RunningState left, RunningState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="RunningState"/>. </summary>
        public static implicit operator RunningState(string value) => new RunningState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is RunningState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(RunningState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
