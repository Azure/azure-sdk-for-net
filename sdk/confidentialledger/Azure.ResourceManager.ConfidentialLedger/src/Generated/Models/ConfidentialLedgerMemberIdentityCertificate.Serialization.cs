// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ConfidentialLedger.Models
{
    public partial class ConfidentialLedgerMemberIdentityCertificate : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(Certificate))
            {
                writer.WritePropertyName("certificate"u8);
                writer.WriteStringValue(Certificate);
            }
            if (Core.Optional.IsDefined(Encryptionkey))
            {
                writer.WritePropertyName("encryptionkey"u8);
                writer.WriteStringValue(Encryptionkey);
            }
            if (Core.Optional.IsDefined(Tags))
            {
                writer.WritePropertyName("tags"u8);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(Tags);
#else
                JsonSerializer.Serialize(writer, JsonDocument.Parse(Tags.ToString()).RootElement);
#endif
            }
            writer.WriteEndObject();
        }

        internal static ConfidentialLedgerMemberIdentityCertificate DeserializeConfidentialLedgerMemberIdentityCertificate(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<string> certificate = default;
            Core.Optional<string> encryptionkey = default;
            Core.Optional<BinaryData> tags = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("certificate"u8))
                {
                    certificate = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("encryptionkey"u8))
                {
                    encryptionkey = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("tags"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    tags = BinaryData.FromString(property.Value.GetRawText());
                    continue;
                }
            }
            return new ConfidentialLedgerMemberIdentityCertificate(certificate.Value, encryptionkey.Value, tags.Value);
        }
    }
}
