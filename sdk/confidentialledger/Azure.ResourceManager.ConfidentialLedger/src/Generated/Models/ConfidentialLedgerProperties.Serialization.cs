// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.ConfidentialLedger.Models
{
    public partial class ConfidentialLedgerProperties : IUtf8JsonSerializable, IModelJsonSerializable<ConfidentialLedgerProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<ConfidentialLedgerProperties>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<ConfidentialLedgerProperties>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<ConfidentialLedgerProperties>(this, options.Format);

            writer.WriteStartObject();
            if (Optional.IsDefined(RunningState))
            {
                writer.WritePropertyName("runningState"u8);
                writer.WriteStringValue(RunningState.Value.ToString());
            }
            if (Optional.IsDefined(LedgerType))
            {
                writer.WritePropertyName("ledgerType"u8);
                writer.WriteStringValue(LedgerType.Value.ToString());
            }
            if (Optional.IsCollectionDefined(AadBasedSecurityPrincipals))
            {
                writer.WritePropertyName("aadBasedSecurityPrincipals"u8);
                writer.WriteStartArray();
                foreach (var item in AadBasedSecurityPrincipals)
                {
                    if (item is null)
                    {
                        writer.WriteNullValue();
                    }
                    else
                    {
                        ((IModelJsonSerializable<AadBasedSecurityPrincipal>)item).Serialize(writer, options);
                    }
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(CertBasedSecurityPrincipals))
            {
                writer.WritePropertyName("certBasedSecurityPrincipals"u8);
                writer.WriteStartArray();
                foreach (var item in CertBasedSecurityPrincipals)
                {
                    if (item is null)
                    {
                        writer.WriteNullValue();
                    }
                    else
                    {
                        ((IModelJsonSerializable<CertBasedSecurityPrincipal>)item).Serialize(writer, options);
                    }
                }
                writer.WriteEndArray();
            }
            if (_rawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _rawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static ConfidentialLedgerProperties DeserializeConfidentialLedgerProperties(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> ledgerName = default;
            Optional<Uri> ledgerUri = default;
            Optional<Uri> identityServiceUri = default;
            Optional<string> ledgerInternalNamespace = default;
            Optional<ConfidentialLedgerRunningState> runningState = default;
            Optional<ConfidentialLedgerType> ledgerType = default;
            Optional<ConfidentialLedgerProvisioningState> provisioningState = default;
            Optional<IList<AadBasedSecurityPrincipal>> aadBasedSecurityPrincipals = default;
            Optional<IList<CertBasedSecurityPrincipal>> certBasedSecurityPrincipals = default;
            Dictionary<string, BinaryData> rawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("ledgerName"u8))
                {
                    ledgerName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ledgerUri"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    ledgerUri = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("identityServiceUri"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    identityServiceUri = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("ledgerInternalNamespace"u8))
                {
                    ledgerInternalNamespace = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("runningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    runningState = new ConfidentialLedgerRunningState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("ledgerType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    ledgerType = new ConfidentialLedgerType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new ConfidentialLedgerProvisioningState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("aadBasedSecurityPrincipals"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<AadBasedSecurityPrincipal> array = new List<AadBasedSecurityPrincipal>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(AadBasedSecurityPrincipal.DeserializeAadBasedSecurityPrincipal(item));
                    }
                    aadBasedSecurityPrincipals = array;
                    continue;
                }
                if (property.NameEquals("certBasedSecurityPrincipals"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<CertBasedSecurityPrincipal> array = new List<CertBasedSecurityPrincipal>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(CertBasedSecurityPrincipal.DeserializeCertBasedSecurityPrincipal(item));
                    }
                    certBasedSecurityPrincipals = array;
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    rawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new ConfidentialLedgerProperties(ledgerName.Value, ledgerUri.Value, identityServiceUri.Value, ledgerInternalNamespace.Value, Optional.ToNullable(runningState), Optional.ToNullable(ledgerType), Optional.ToNullable(provisioningState), Optional.ToList(aadBasedSecurityPrincipals), Optional.ToList(certBasedSecurityPrincipals), rawData);
        }

        ConfidentialLedgerProperties IModelJsonSerializable<ConfidentialLedgerProperties>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<ConfidentialLedgerProperties>(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeConfidentialLedgerProperties(doc.RootElement, options);
        }

        BinaryData IModelSerializable<ConfidentialLedgerProperties>.Serialize(ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<ConfidentialLedgerProperties>(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        ConfidentialLedgerProperties IModelSerializable<ConfidentialLedgerProperties>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<ConfidentialLedgerProperties>(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeConfidentialLedgerProperties(doc.RootElement, options);
        }

        /// <summary> Converts a <see cref="ConfidentialLedgerProperties"/> into a <see cref="RequestContent"/>. </summary>
        /// <param name="model"> The <see cref="ConfidentialLedgerProperties"/> to convert. </param>
        public static implicit operator RequestContent(ConfidentialLedgerProperties model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        /// <summary> Converts a <see cref="Response"/> into a <see cref="ConfidentialLedgerProperties"/>. </summary>
        /// <param name="response"> The <see cref="Response"/> to convert. </param>
        public static explicit operator ConfidentialLedgerProperties(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeConfidentialLedgerProperties(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
