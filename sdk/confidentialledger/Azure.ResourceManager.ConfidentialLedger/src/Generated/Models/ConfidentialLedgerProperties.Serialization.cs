// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ConfidentialLedger.Models
{
    public partial class ConfidentialLedgerProperties : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(RunningState))
            {
                writer.WritePropertyName("runningState"u8);
                writer.WriteStringValue(RunningState.Value.ToString());
            }
            if (Core.Optional.IsDefined(LedgerType))
            {
                writer.WritePropertyName("ledgerType"u8);
                writer.WriteStringValue(LedgerType.Value.ToString());
            }
            if (Core.Optional.IsCollectionDefined(AadBasedSecurityPrincipals))
            {
                writer.WritePropertyName("aadBasedSecurityPrincipals"u8);
                writer.WriteStartArray();
                foreach (var item in AadBasedSecurityPrincipals)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Core.Optional.IsCollectionDefined(CertBasedSecurityPrincipals))
            {
                writer.WritePropertyName("certBasedSecurityPrincipals"u8);
                writer.WriteStartArray();
                foreach (var item in CertBasedSecurityPrincipals)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static ConfidentialLedgerProperties DeserializeConfidentialLedgerProperties(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<string> ledgerName = default;
            Core.Optional<Uri> ledgerUri = default;
            Core.Optional<Uri> identityServiceUri = default;
            Core.Optional<string> ledgerInternalNamespace = default;
            Core.Optional<ConfidentialLedgerRunningState> runningState = default;
            Core.Optional<ConfidentialLedgerType> ledgerType = default;
            Core.Optional<ConfidentialLedgerProvisioningState> provisioningState = default;
            Core.Optional<IList<AadBasedSecurityPrincipal>> aadBasedSecurityPrincipals = default;
            Core.Optional<IList<CertBasedSecurityPrincipal>> certBasedSecurityPrincipals = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("ledgerName"u8))
                {
                    ledgerName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ledgerUri"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    ledgerUri = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("identityServiceUri"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    identityServiceUri = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("ledgerInternalNamespace"u8))
                {
                    ledgerInternalNamespace = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("runningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    runningState = new ConfidentialLedgerRunningState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("ledgerType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    ledgerType = new ConfidentialLedgerType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new ConfidentialLedgerProvisioningState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("aadBasedSecurityPrincipals"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<AadBasedSecurityPrincipal> array = new List<AadBasedSecurityPrincipal>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(AadBasedSecurityPrincipal.DeserializeAadBasedSecurityPrincipal(item));
                    }
                    aadBasedSecurityPrincipals = array;
                    continue;
                }
                if (property.NameEquals("certBasedSecurityPrincipals"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<CertBasedSecurityPrincipal> array = new List<CertBasedSecurityPrincipal>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(CertBasedSecurityPrincipal.DeserializeCertBasedSecurityPrincipal(item));
                    }
                    certBasedSecurityPrincipals = array;
                    continue;
                }
            }
            return new ConfidentialLedgerProperties(ledgerName.Value, ledgerUri.Value, identityServiceUri.Value, ledgerInternalNamespace.Value, Core.Optional.ToNullable(runningState), Core.Optional.ToNullable(ledgerType), Core.Optional.ToNullable(provisioningState), Core.Optional.ToList(aadBasedSecurityPrincipals), Core.Optional.ToList(certBasedSecurityPrincipals));
        }
    }
}
