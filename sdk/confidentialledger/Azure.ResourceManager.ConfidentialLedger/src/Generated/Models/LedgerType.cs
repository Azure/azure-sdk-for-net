// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ConfidentialLedger.Models
{
    /// <summary> Type of the ledger. Private means transaction data is encrypted. </summary>
    public readonly partial struct LedgerType : IEquatable<LedgerType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="LedgerType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public LedgerType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UnknownValue = "Unknown";
        private const string PublicValue = "Public";
        private const string PrivateValue = "Private";

        /// <summary> Unknown. </summary>
        public static LedgerType Unknown { get; } = new LedgerType(UnknownValue);
        /// <summary> Public. </summary>
        public static LedgerType Public { get; } = new LedgerType(PublicValue);
        /// <summary> Private. </summary>
        public static LedgerType Private { get; } = new LedgerType(PrivateValue);
        /// <summary> Determines if two <see cref="LedgerType"/> values are the same. </summary>
        public static bool operator ==(LedgerType left, LedgerType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="LedgerType"/> values are not the same. </summary>
        public static bool operator !=(LedgerType left, LedgerType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="LedgerType"/>. </summary>
        public static implicit operator LedgerType(string value) => new LedgerType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is LedgerType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(LedgerType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
