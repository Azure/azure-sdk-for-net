// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.ConfidentialLedger;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.ConfidentialLedger.Models
{
    /// <summary> Model factory for generated models. </summary>
    public static partial class ConfidentialLedgerModelFactory
    {
        /// <summary> Initializes a new instance of ConfidentialLedgerNameAvailabilityResult. </summary>
        /// <param name="isNameAvailable"> Indicates if the resource name is available. </param>
        /// <param name="reason"> The reason why the given name is not available. </param>
        /// <param name="message"> Detailed reason why the given name is available. </param>
        /// <returns> A new <see cref="Models.ConfidentialLedgerNameAvailabilityResult"/> instance for mocking. </returns>
        public static ConfidentialLedgerNameAvailabilityResult ConfidentialLedgerNameAvailabilityResult(bool? isNameAvailable = null, ConfidentialLedgerNameUnavailableReason? reason = null, string message = null)
        {
            return new ConfidentialLedgerNameAvailabilityResult(isNameAvailable, reason, message);
        }

        /// <summary> Initializes a new instance of ConfidentialLedgerData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> Properties of Confidential Ledger Resource. </param>
        /// <returns> A new <see cref="ConfidentialLedger.ConfidentialLedgerData"/> instance for mocking. </returns>
        public static ConfidentialLedgerData ConfidentialLedgerData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ConfidentialLedgerProperties properties = null)
        {
            tags ??= new Dictionary<string, string>();

            return new ConfidentialLedgerData(id, name, resourceType, systemData, tags, location, properties);
        }

        /// <summary> Initializes a new instance of ConfidentialLedgerProperties. </summary>
        /// <param name="ledgerName"> Unique name for the Confidential Ledger. </param>
        /// <param name="ledgerUri"> Endpoint for calling Ledger Service. </param>
        /// <param name="identityServiceUri"> Endpoint for accessing network identity. </param>
        /// <param name="ledgerInternalNamespace"> Internal namespace for the Ledger. </param>
        /// <param name="ledgerType"> Type of Confidential Ledger. </param>
        /// <param name="provisioningState"> Provisioning state of Ledger Resource. </param>
        /// <param name="aadBasedSecurityPrincipals"> Array of all AAD based Security Principals. </param>
        /// <param name="certBasedSecurityPrincipals"> Array of all cert based Security Principals. </param>
        /// <returns> A new <see cref="Models.ConfidentialLedgerProperties"/> instance for mocking. </returns>
        public static ConfidentialLedgerProperties ConfidentialLedgerProperties(string ledgerName = null, Uri ledgerUri = null, Uri identityServiceUri = null, string ledgerInternalNamespace = null, ConfidentialLedgerType? ledgerType = null, ConfidentialLedgerProvisioningState? provisioningState = null, IEnumerable<AadBasedSecurityPrincipal> aadBasedSecurityPrincipals = null, IEnumerable<CertBasedSecurityPrincipal> certBasedSecurityPrincipals = null)
        {
            aadBasedSecurityPrincipals ??= new List<AadBasedSecurityPrincipal>();
            certBasedSecurityPrincipals ??= new List<CertBasedSecurityPrincipal>();

            return new ConfidentialLedgerProperties(ledgerName, ledgerUri, identityServiceUri, ledgerInternalNamespace, ledgerType, provisioningState, aadBasedSecurityPrincipals?.ToList(), certBasedSecurityPrincipals?.ToList());
        }

        /// <summary> Initializes a new instance of AadBasedSecurityPrincipal. </summary>
        /// <param name="principalId"> UUID/GUID based Principal Id of the Security Principal. </param>
        /// <param name="tenantId"> UUID/GUID based Tenant Id of the Security Principal. </param>
        /// <param name="ledgerRoleName"> LedgerRole associated with the Security Principal of Ledger. </param>
        /// <returns> A new <see cref="Models.AadBasedSecurityPrincipal"/> instance for mocking. </returns>
        public static AadBasedSecurityPrincipal AadBasedSecurityPrincipal(Guid? principalId = null, Guid? tenantId = null, ConfidentialLedgerRoleName? ledgerRoleName = null)
        {
            return new AadBasedSecurityPrincipal(principalId, tenantId, ledgerRoleName);
        }

        /// <summary> Initializes a new instance of CertBasedSecurityPrincipal. </summary>
        /// <param name="cert"> Public key of the user cert (.pem or .cer). </param>
        /// <param name="ledgerRoleName"> LedgerRole associated with the Security Principal of Ledger. </param>
        /// <returns> A new <see cref="Models.CertBasedSecurityPrincipal"/> instance for mocking. </returns>
        public static CertBasedSecurityPrincipal CertBasedSecurityPrincipal(string cert = null, ConfidentialLedgerRoleName? ledgerRoleName = null)
        {
            return new CertBasedSecurityPrincipal(cert, ledgerRoleName);
        }
    }
}
