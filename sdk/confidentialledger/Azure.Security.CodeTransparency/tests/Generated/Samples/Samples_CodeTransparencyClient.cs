// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Security.CodeTransparency.Samples
{
    public partial class Samples_CodeTransparencyClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CodeTransparency_GetEntryStatus_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response response = client.GetEntryStatus("<operationId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("operationId").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CodeTransparency_GetEntryStatus_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response response = await client.GetEntryStatusAsync("<operationId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("operationId").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CodeTransparency_GetEntryStatus_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response<GetOperationResult> response = client.GetEntryStatus("<operationId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CodeTransparency_GetEntryStatus_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response<GetOperationResult> response = await client.GetEntryStatusAsync("<operationId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CodeTransparency_GetEntryStatus_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response response = client.GetEntryStatus("<operationId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("entryId").ToString());
            Console.WriteLine(result.GetProperty("error").ToString());
            Console.WriteLine(result.GetProperty("operationId").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CodeTransparency_GetEntryStatus_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response response = await client.GetEntryStatusAsync("<operationId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("entryId").ToString());
            Console.WriteLine(result.GetProperty("error").ToString());
            Console.WriteLine(result.GetProperty("operationId").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CodeTransparency_GetEntryStatus_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response<GetOperationResult> response = client.GetEntryStatus("<operationId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CodeTransparency_GetEntryStatus_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response<GetOperationResult> response = await client.GetEntryStatusAsync("<operationId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CodeTransparency_GetEntryStatuses_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response response = client.GetEntryStatuses(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("operations")[0].GetProperty("operationId").ToString());
            Console.WriteLine(result.GetProperty("operations")[0].GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CodeTransparency_GetEntryStatuses_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response response = await client.GetEntryStatusesAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("operations")[0].GetProperty("operationId").ToString());
            Console.WriteLine(result.GetProperty("operations")[0].GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CodeTransparency_GetEntryStatuses_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response<ListOperationResult> response = client.GetEntryStatuses();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CodeTransparency_GetEntryStatuses_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response<ListOperationResult> response = await client.GetEntryStatusesAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CodeTransparency_GetEntryStatuses_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response response = client.GetEntryStatuses(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("operations")[0].GetProperty("entryId").ToString());
            Console.WriteLine(result.GetProperty("operations")[0].GetProperty("error").ToString());
            Console.WriteLine(result.GetProperty("operations")[0].GetProperty("operationId").ToString());
            Console.WriteLine(result.GetProperty("operations")[0].GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CodeTransparency_GetEntryStatuses_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response response = await client.GetEntryStatusesAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("operations")[0].GetProperty("entryId").ToString());
            Console.WriteLine(result.GetProperty("operations")[0].GetProperty("error").ToString());
            Console.WriteLine(result.GetProperty("operations")[0].GetProperty("operationId").ToString());
            Console.WriteLine(result.GetProperty("operations")[0].GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CodeTransparency_GetEntryStatuses_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response<ListOperationResult> response = client.GetEntryStatuses();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CodeTransparency_GetEntryStatuses_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response<ListOperationResult> response = await client.GetEntryStatusesAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CodeTransparency_GetEntry_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response response = client.GetEntry("<entryId>", null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CodeTransparency_GetEntry_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response response = await client.GetEntryAsync("<entryId>", null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CodeTransparency_GetEntry_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response<BinaryData> response = client.GetEntry("<entryId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CodeTransparency_GetEntry_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response<BinaryData> response = await client.GetEntryAsync("<entryId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CodeTransparency_GetEntry_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response response = client.GetEntry("<entryId>", true, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CodeTransparency_GetEntry_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response response = await client.GetEntryAsync("<entryId>", true, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CodeTransparency_GetEntry_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response<BinaryData> response = client.GetEntry("<entryId>", embedReceipt: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CodeTransparency_GetEntry_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response<BinaryData> response = await client.GetEntryAsync("<entryId>", embedReceipt: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CodeTransparency_GetEntryReceipt_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response response = client.GetEntryReceipt("<entryId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CodeTransparency_GetEntryReceipt_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response response = await client.GetEntryReceiptAsync("<entryId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CodeTransparency_GetEntryReceipt_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response<BinaryData> response = client.GetEntryReceipt("<entryId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CodeTransparency_GetEntryReceipt_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response<BinaryData> response = await client.GetEntryReceiptAsync("<entryId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CodeTransparency_GetEntryReceipt_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response response = client.GetEntryReceipt("<entryId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CodeTransparency_GetEntryReceipt_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response response = await client.GetEntryReceiptAsync("<entryId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CodeTransparency_GetEntryReceipt_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response<BinaryData> response = client.GetEntryReceipt("<entryId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CodeTransparency_GetEntryReceipt_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response<BinaryData> response = await client.GetEntryReceiptAsync("<entryId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CodeTransparency_GetParameters_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response response = client.GetParameters(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("serviceCertificate").ToString());
            Console.WriteLine(result.GetProperty("serviceId").ToString());
            Console.WriteLine(result.GetProperty("signatureAlgorithm").ToString());
            Console.WriteLine(result.GetProperty("treeAlgorithm").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CodeTransparency_GetParameters_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response response = await client.GetParametersAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("serviceCertificate").ToString());
            Console.WriteLine(result.GetProperty("serviceId").ToString());
            Console.WriteLine(result.GetProperty("signatureAlgorithm").ToString());
            Console.WriteLine(result.GetProperty("treeAlgorithm").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CodeTransparency_GetParameters_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response<ParametersResult> response = client.GetParameters();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CodeTransparency_GetParameters_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response<ParametersResult> response = await client.GetParametersAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CodeTransparency_GetParameters_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response response = client.GetParameters(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("serviceCertificate").ToString());
            Console.WriteLine(result.GetProperty("serviceId").ToString());
            Console.WriteLine(result.GetProperty("signatureAlgorithm").ToString());
            Console.WriteLine(result.GetProperty("treeAlgorithm").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CodeTransparency_GetParameters_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response response = await client.GetParametersAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("serviceCertificate").ToString());
            Console.WriteLine(result.GetProperty("serviceId").ToString());
            Console.WriteLine(result.GetProperty("signatureAlgorithm").ToString());
            Console.WriteLine(result.GetProperty("treeAlgorithm").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CodeTransparency_GetParameters_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response<ParametersResult> response = client.GetParameters();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CodeTransparency_GetParameters_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response<ParametersResult> response = await client.GetParametersAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CodeTransparency_GetDidConfig_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response response = client.GetDidConfig(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("controller").ToString());
            Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("publicKeyJwk").GetProperty("kty").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CodeTransparency_GetDidConfig_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response response = await client.GetDidConfigAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("controller").ToString());
            Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("publicKeyJwk").GetProperty("kty").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CodeTransparency_GetDidConfig_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response<DidDocument> response = client.GetDidConfig();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CodeTransparency_GetDidConfig_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response<DidDocument> response = await client.GetDidConfigAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CodeTransparency_GetDidConfig_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response response = client.GetDidConfig(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("controller").ToString());
            Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("publicKeyJwk").GetProperty("alg").ToString());
            Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("publicKeyJwk").GetProperty("crv").ToString());
            Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("publicKeyJwk").GetProperty("d").ToString());
            Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("publicKeyJwk").GetProperty("dp").ToString());
            Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("publicKeyJwk").GetProperty("dq").ToString());
            Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("publicKeyJwk").GetProperty("e").ToString());
            Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("publicKeyJwk").GetProperty("k").ToString());
            Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("publicKeyJwk").GetProperty("kid").ToString());
            Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("publicKeyJwk").GetProperty("kty").ToString());
            Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("publicKeyJwk").GetProperty("n").ToString());
            Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("publicKeyJwk").GetProperty("p").ToString());
            Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("publicKeyJwk").GetProperty("q").ToString());
            Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("publicKeyJwk").GetProperty("qi").ToString());
            Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("publicKeyJwk").GetProperty("use").ToString());
            Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("publicKeyJwk").GetProperty("x").ToString());
            Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("publicKeyJwk").GetProperty("x5c")[0].ToString());
            Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("publicKeyJwk").GetProperty("y").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CodeTransparency_GetDidConfig_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response response = await client.GetDidConfigAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("controller").ToString());
            Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("publicKeyJwk").GetProperty("alg").ToString());
            Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("publicKeyJwk").GetProperty("crv").ToString());
            Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("publicKeyJwk").GetProperty("d").ToString());
            Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("publicKeyJwk").GetProperty("dp").ToString());
            Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("publicKeyJwk").GetProperty("dq").ToString());
            Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("publicKeyJwk").GetProperty("e").ToString());
            Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("publicKeyJwk").GetProperty("k").ToString());
            Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("publicKeyJwk").GetProperty("kid").ToString());
            Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("publicKeyJwk").GetProperty("kty").ToString());
            Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("publicKeyJwk").GetProperty("n").ToString());
            Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("publicKeyJwk").GetProperty("p").ToString());
            Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("publicKeyJwk").GetProperty("q").ToString());
            Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("publicKeyJwk").GetProperty("qi").ToString());
            Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("publicKeyJwk").GetProperty("use").ToString());
            Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("publicKeyJwk").GetProperty("x").ToString());
            Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("publicKeyJwk").GetProperty("x5c")[0].ToString());
            Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("publicKeyJwk").GetProperty("y").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CodeTransparency_GetDidConfig_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response<DidDocument> response = client.GetDidConfig();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CodeTransparency_GetDidConfig_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response<DidDocument> response = await client.GetDidConfigAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CodeTransparency_GetCodeTransparencyConfig_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response response = client.GetCodeTransparencyConfig(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CodeTransparency_GetCodeTransparencyConfig_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response response = await client.GetCodeTransparencyConfigAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CodeTransparency_GetCodeTransparencyConfig_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response<CodeTransparencyConfiguration> response = client.GetCodeTransparencyConfig();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CodeTransparency_GetCodeTransparencyConfig_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response<CodeTransparencyConfiguration> response = await client.GetCodeTransparencyConfigAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CodeTransparency_GetCodeTransparencyConfig_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response response = client.GetCodeTransparencyConfig(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("policy").GetProperty("accepted_algorithms")[0].ToString());
            Console.WriteLine(result.GetProperty("policy").GetProperty("accepted_did_issuers")[0].ToString());
            Console.WriteLine(result.GetProperty("authentication").GetProperty("allow_unauthenticated").ToString());
            Console.WriteLine(result.GetProperty("authentication").GetProperty("jwt").GetProperty("required_claims").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("service_identifier").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CodeTransparency_GetCodeTransparencyConfig_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response response = await client.GetCodeTransparencyConfigAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("policy").GetProperty("accepted_algorithms")[0].ToString());
            Console.WriteLine(result.GetProperty("policy").GetProperty("accepted_did_issuers")[0].ToString());
            Console.WriteLine(result.GetProperty("authentication").GetProperty("allow_unauthenticated").ToString());
            Console.WriteLine(result.GetProperty("authentication").GetProperty("jwt").GetProperty("required_claims").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("service_identifier").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CodeTransparency_GetCodeTransparencyConfig_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response<CodeTransparencyConfiguration> response = client.GetCodeTransparencyConfig();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CodeTransparency_GetCodeTransparencyConfig_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response<CodeTransparencyConfiguration> response = await client.GetCodeTransparencyConfigAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CodeTransparency_GetCodeTransparencyVersion_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response response = client.GetCodeTransparencyVersion(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("scitt_version").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CodeTransparency_GetCodeTransparencyVersion_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response response = await client.GetCodeTransparencyVersionAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("scitt_version").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CodeTransparency_GetCodeTransparencyVersion_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response<VersionResult> response = client.GetCodeTransparencyVersion();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CodeTransparency_GetCodeTransparencyVersion_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response<VersionResult> response = await client.GetCodeTransparencyVersionAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CodeTransparency_GetCodeTransparencyVersion_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response response = client.GetCodeTransparencyVersion(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("scitt_version").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CodeTransparency_GetCodeTransparencyVersion_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response response = await client.GetCodeTransparencyVersionAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("scitt_version").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CodeTransparency_GetCodeTransparencyVersion_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response<VersionResult> response = client.GetCodeTransparencyVersion();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CodeTransparency_GetCodeTransparencyVersion_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response<VersionResult> response = await client.GetCodeTransparencyVersionAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CodeTransparency_GetEntryIds_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            foreach (BinaryData item in client.GetEntryIds(null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CodeTransparency_GetEntryIds_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            await foreach (BinaryData item in client.GetEntryIdsAsync(null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CodeTransparency_GetEntryIds_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            foreach (string item in client.GetEntryIds())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CodeTransparency_GetEntryIds_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            await foreach (string item in client.GetEntryIdsAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CodeTransparency_GetEntryIds_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            foreach (BinaryData item in client.GetEntryIds(1234L, 1234L, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CodeTransparency_GetEntryIds_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            await foreach (BinaryData item in client.GetEntryIdsAsync(1234L, 1234L, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CodeTransparency_GetEntryIds_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            foreach (string item in client.GetEntryIds(from: 1234L, to: 1234L))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CodeTransparency_GetEntryIds_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            await foreach (string item in client.GetEntryIdsAsync(from: 1234L, to: 1234L))
            {
            }
        }
    }
}
