// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Security.CodeTransparency.Samples
{
    public partial class Samples_CodeTransparencyClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CodeTransparency_GetTransparencyConfigCbor_GetTransparencyConfigCbor()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response response = client.GetTransparencyConfigCbor(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CodeTransparency_GetTransparencyConfigCbor_GetTransparencyConfigCbor_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response response = await client.GetTransparencyConfigCborAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CodeTransparency_GetTransparencyConfigCbor_GetTransparencyConfigCbor_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response<BinaryData> response = client.GetTransparencyConfigCbor();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CodeTransparency_GetTransparencyConfigCbor_GetTransparencyConfigCbor_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response<BinaryData> response = await client.GetTransparencyConfigCborAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CodeTransparency_GetPublicKeys_GetPublicKeys()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response response = client.GetPublicKeys(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("keys")[0].GetProperty("kty").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CodeTransparency_GetPublicKeys_GetPublicKeys_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response response = await client.GetPublicKeysAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("keys")[0].GetProperty("kty").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CodeTransparency_GetPublicKeys_GetPublicKeys_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response<JwksDocument> response = client.GetPublicKeys();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CodeTransparency_GetPublicKeys_GetPublicKeys_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response<JwksDocument> response = await client.GetPublicKeysAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CodeTransparency_GetOperation_GetOperation()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response response = client.GetOperation("2.131", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CodeTransparency_GetOperation_GetOperation_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response response = await client.GetOperationAsync("2.131", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CodeTransparency_GetOperation_GetOperation_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response<BinaryData> response = client.GetOperation("2.131");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CodeTransparency_GetOperation_GetOperation_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response<BinaryData> response = await client.GetOperationAsync("2.131");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CodeTransparency_GetEntry_GetEntry()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response response = client.GetEntry("2.131", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CodeTransparency_GetEntry_GetEntry_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response response = await client.GetEntryAsync("2.131", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CodeTransparency_GetEntry_GetEntry_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response<BinaryData> response = client.GetEntry("2.131");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CodeTransparency_GetEntry_GetEntry_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response<BinaryData> response = await client.GetEntryAsync("2.131");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CodeTransparency_GetEntryStatement_GetEntryStatement()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response response = client.GetEntryStatement("2.131", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CodeTransparency_GetEntryStatement_GetEntryStatement_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response response = await client.GetEntryStatementAsync("2.131", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CodeTransparency_GetEntryStatement_GetEntryStatement_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response<BinaryData> response = client.GetEntryStatement("2.131");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CodeTransparency_GetEntryStatement_GetEntryStatement_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response<BinaryData> response = await client.GetEntryStatementAsync("2.131");
        }
    }
}
