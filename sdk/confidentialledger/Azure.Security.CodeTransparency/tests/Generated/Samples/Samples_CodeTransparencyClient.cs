// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Security.CodeTransparency.Samples
{
    public partial class Samples_CodeTransparencyClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CodeTransparency_GetTransparencyConfigCbor_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response response = client.GetTransparencyConfigCbor(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CodeTransparency_GetTransparencyConfigCbor_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response response = await client.GetTransparencyConfigCborAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CodeTransparency_GetTransparencyConfigCbor_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response<BinaryData> response = client.GetTransparencyConfigCbor();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CodeTransparency_GetTransparencyConfigCbor_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response<BinaryData> response = await client.GetTransparencyConfigCborAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CodeTransparency_GetTransparencyConfigCbor_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response response = client.GetTransparencyConfigCbor(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CodeTransparency_GetTransparencyConfigCbor_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response response = await client.GetTransparencyConfigCborAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CodeTransparency_GetTransparencyConfigCbor_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response<BinaryData> response = client.GetTransparencyConfigCbor();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CodeTransparency_GetTransparencyConfigCbor_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response<BinaryData> response = await client.GetTransparencyConfigCborAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CodeTransparency_GetPublicKeys_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response response = client.GetPublicKeys(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("keys")[0].GetProperty("kty").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CodeTransparency_GetPublicKeys_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response response = await client.GetPublicKeysAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("keys")[0].GetProperty("kty").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CodeTransparency_GetPublicKeys_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response<JwksDocument> response = client.GetPublicKeys();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CodeTransparency_GetPublicKeys_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response<JwksDocument> response = await client.GetPublicKeysAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CodeTransparency_GetPublicKeys_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response response = client.GetPublicKeys(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("keys")[0].GetProperty("alg").ToString());
            Console.WriteLine(result.GetProperty("keys")[0].GetProperty("crv").ToString());
            Console.WriteLine(result.GetProperty("keys")[0].GetProperty("d").ToString());
            Console.WriteLine(result.GetProperty("keys")[0].GetProperty("dp").ToString());
            Console.WriteLine(result.GetProperty("keys")[0].GetProperty("dq").ToString());
            Console.WriteLine(result.GetProperty("keys")[0].GetProperty("e").ToString());
            Console.WriteLine(result.GetProperty("keys")[0].GetProperty("k").ToString());
            Console.WriteLine(result.GetProperty("keys")[0].GetProperty("kid").ToString());
            Console.WriteLine(result.GetProperty("keys")[0].GetProperty("kty").ToString());
            Console.WriteLine(result.GetProperty("keys")[0].GetProperty("n").ToString());
            Console.WriteLine(result.GetProperty("keys")[0].GetProperty("p").ToString());
            Console.WriteLine(result.GetProperty("keys")[0].GetProperty("q").ToString());
            Console.WriteLine(result.GetProperty("keys")[0].GetProperty("qi").ToString());
            Console.WriteLine(result.GetProperty("keys")[0].GetProperty("use").ToString());
            Console.WriteLine(result.GetProperty("keys")[0].GetProperty("x").ToString());
            Console.WriteLine(result.GetProperty("keys")[0].GetProperty("x5c")[0].ToString());
            Console.WriteLine(result.GetProperty("keys")[0].GetProperty("y").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CodeTransparency_GetPublicKeys_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response response = await client.GetPublicKeysAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("keys")[0].GetProperty("alg").ToString());
            Console.WriteLine(result.GetProperty("keys")[0].GetProperty("crv").ToString());
            Console.WriteLine(result.GetProperty("keys")[0].GetProperty("d").ToString());
            Console.WriteLine(result.GetProperty("keys")[0].GetProperty("dp").ToString());
            Console.WriteLine(result.GetProperty("keys")[0].GetProperty("dq").ToString());
            Console.WriteLine(result.GetProperty("keys")[0].GetProperty("e").ToString());
            Console.WriteLine(result.GetProperty("keys")[0].GetProperty("k").ToString());
            Console.WriteLine(result.GetProperty("keys")[0].GetProperty("kid").ToString());
            Console.WriteLine(result.GetProperty("keys")[0].GetProperty("kty").ToString());
            Console.WriteLine(result.GetProperty("keys")[0].GetProperty("n").ToString());
            Console.WriteLine(result.GetProperty("keys")[0].GetProperty("p").ToString());
            Console.WriteLine(result.GetProperty("keys")[0].GetProperty("q").ToString());
            Console.WriteLine(result.GetProperty("keys")[0].GetProperty("qi").ToString());
            Console.WriteLine(result.GetProperty("keys")[0].GetProperty("use").ToString());
            Console.WriteLine(result.GetProperty("keys")[0].GetProperty("x").ToString());
            Console.WriteLine(result.GetProperty("keys")[0].GetProperty("x5c")[0].ToString());
            Console.WriteLine(result.GetProperty("keys")[0].GetProperty("y").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CodeTransparency_GetPublicKeys_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response<JwksDocument> response = client.GetPublicKeys();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CodeTransparency_GetPublicKeys_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response<JwksDocument> response = await client.GetPublicKeysAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CodeTransparency_GetOperation_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response response = client.GetOperation("<operationId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CodeTransparency_GetOperation_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response response = await client.GetOperationAsync("<operationId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CodeTransparency_GetOperation_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response<BinaryData> response = client.GetOperation("<operationId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CodeTransparency_GetOperation_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response<BinaryData> response = await client.GetOperationAsync("<operationId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CodeTransparency_GetOperation_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response response = client.GetOperation("<operationId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CodeTransparency_GetOperation_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response response = await client.GetOperationAsync("<operationId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CodeTransparency_GetOperation_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response<BinaryData> response = client.GetOperation("<operationId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CodeTransparency_GetOperation_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response<BinaryData> response = await client.GetOperationAsync("<operationId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CodeTransparency_GetEntry_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response response = client.GetEntry("<entryId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CodeTransparency_GetEntry_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response response = await client.GetEntryAsync("<entryId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CodeTransparency_GetEntry_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response<BinaryData> response = client.GetEntry("<entryId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CodeTransparency_GetEntry_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response<BinaryData> response = await client.GetEntryAsync("<entryId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CodeTransparency_GetEntry_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response response = client.GetEntry("<entryId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CodeTransparency_GetEntry_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response response = await client.GetEntryAsync("<entryId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CodeTransparency_GetEntry_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response<BinaryData> response = client.GetEntry("<entryId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CodeTransparency_GetEntry_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response<BinaryData> response = await client.GetEntryAsync("<entryId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CodeTransparency_GetEntryStatement_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response response = client.GetEntryStatement("<entryId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CodeTransparency_GetEntryStatement_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response response = await client.GetEntryStatementAsync("<entryId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CodeTransparency_GetEntryStatement_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response<BinaryData> response = client.GetEntryStatement("<entryId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CodeTransparency_GetEntryStatement_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response<BinaryData> response = await client.GetEntryStatementAsync("<entryId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CodeTransparency_GetEntryStatement_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response response = client.GetEntryStatement("<entryId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CodeTransparency_GetEntryStatement_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response response = await client.GetEntryStatementAsync("<entryId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CodeTransparency_GetEntryStatement_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response<BinaryData> response = client.GetEntryStatement("<entryId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CodeTransparency_GetEntryStatement_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

            Response<BinaryData> response = await client.GetEntryStatementAsync("<entryId>");
        }
    }
}
