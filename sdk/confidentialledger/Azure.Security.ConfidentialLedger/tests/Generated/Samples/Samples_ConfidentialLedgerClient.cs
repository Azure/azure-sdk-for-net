// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Security.ConfidentialLedger.Samples
{
    public partial class Samples_ConfidentialLedgerClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetConstitution_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            Response response = client.GetConstitution();

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("digest").ToString());
            Console.WriteLine(result.GetProperty("script").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetConstitution_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            Response response = await client.GetConstitutionAsync();

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("digest").ToString());
            Console.WriteLine(result.GetProperty("script").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetConstitution_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            Response response = client.GetConstitution();

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("digest").ToString());
            Console.WriteLine(result.GetProperty("script").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetConstitution_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            Response response = await client.GetConstitutionAsync();

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("digest").ToString());
            Console.WriteLine(result.GetProperty("script").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetEnclaveQuotes_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            Response response = client.GetEnclaveQuotes();

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("currentNodeId").ToString());
            Console.WriteLine(result.GetProperty("enclaveQuotes").GetProperty("<key>").GetProperty("nodeId").ToString());
            Console.WriteLine(result.GetProperty("enclaveQuotes").GetProperty("<key>").GetProperty("quoteVersion").ToString());
            Console.WriteLine(result.GetProperty("enclaveQuotes").GetProperty("<key>").GetProperty("raw").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetEnclaveQuotes_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            Response response = await client.GetEnclaveQuotesAsync();

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("currentNodeId").ToString());
            Console.WriteLine(result.GetProperty("enclaveQuotes").GetProperty("<key>").GetProperty("nodeId").ToString());
            Console.WriteLine(result.GetProperty("enclaveQuotes").GetProperty("<key>").GetProperty("quoteVersion").ToString());
            Console.WriteLine(result.GetProperty("enclaveQuotes").GetProperty("<key>").GetProperty("raw").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetEnclaveQuotes_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            Response response = client.GetEnclaveQuotes();

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("currentNodeId").ToString());
            Console.WriteLine(result.GetProperty("enclaveQuotes").GetProperty("<key>").GetProperty("nodeId").ToString());
            Console.WriteLine(result.GetProperty("enclaveQuotes").GetProperty("<key>").GetProperty("mrenclave").ToString());
            Console.WriteLine(result.GetProperty("enclaveQuotes").GetProperty("<key>").GetProperty("quoteVersion").ToString());
            Console.WriteLine(result.GetProperty("enclaveQuotes").GetProperty("<key>").GetProperty("raw").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetEnclaveQuotes_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            Response response = await client.GetEnclaveQuotesAsync();

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("currentNodeId").ToString());
            Console.WriteLine(result.GetProperty("enclaveQuotes").GetProperty("<key>").GetProperty("nodeId").ToString());
            Console.WriteLine(result.GetProperty("enclaveQuotes").GetProperty("<key>").GetProperty("mrenclave").ToString());
            Console.WriteLine(result.GetProperty("enclaveQuotes").GetProperty("<key>").GetProperty("quoteVersion").ToString());
            Console.WriteLine(result.GetProperty("enclaveQuotes").GetProperty("<key>").GetProperty("raw").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateLedgerEntry_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                contents = "<contents>",
            });
            Response response = client.CreateLedgerEntry(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("collectionId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateLedgerEntry_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                contents = "<contents>",
            });
            Response response = await client.CreateLedgerEntryAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("collectionId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateLedgerEntry_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                contents = "<contents>",
            });
            Response response = client.CreateLedgerEntry(content, collectionId: "<collectionId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("collectionId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateLedgerEntry_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                contents = "<contents>",
            });
            Response response = await client.CreateLedgerEntryAsync(content, collectionId: "<collectionId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("collectionId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetLedgerEntry_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            Response response = client.GetLedgerEntry("<transactionId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("state").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetLedgerEntry_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            Response response = await client.GetLedgerEntryAsync("<transactionId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("state").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetLedgerEntry_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            Response response = client.GetLedgerEntry("<transactionId>", collectionId: "<collectionId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("entry").GetProperty("contents").ToString());
            Console.WriteLine(result.GetProperty("entry").GetProperty("collectionId").ToString());
            Console.WriteLine(result.GetProperty("entry").GetProperty("transactionId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetLedgerEntry_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            Response response = await client.GetLedgerEntryAsync("<transactionId>", collectionId: "<collectionId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("entry").GetProperty("contents").ToString());
            Console.WriteLine(result.GetProperty("entry").GetProperty("collectionId").ToString());
            Console.WriteLine(result.GetProperty("entry").GetProperty("transactionId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetReceipt_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            Response response = client.GetReceipt("<transactionId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("transactionId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetReceipt_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            Response response = await client.GetReceiptAsync("<transactionId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("transactionId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetReceipt_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            Response response = client.GetReceipt("<transactionId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("applicationClaims")[0].GetProperty("digest").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("applicationClaims")[0].GetProperty("digest").GetProperty("protocol").ToString());
            Console.WriteLine(result.GetProperty("applicationClaims")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("applicationClaims")[0].GetProperty("ledgerEntry").GetProperty("collectionId").ToString());
            Console.WriteLine(result.GetProperty("applicationClaims")[0].GetProperty("ledgerEntry").GetProperty("contents").ToString());
            Console.WriteLine(result.GetProperty("applicationClaims")[0].GetProperty("ledgerEntry").GetProperty("secretKey").ToString());
            Console.WriteLine(result.GetProperty("applicationClaims")[0].GetProperty("ledgerEntry").GetProperty("protocol").ToString());
            Console.WriteLine(result.GetProperty("receipt").GetProperty("cert").ToString());
            Console.WriteLine(result.GetProperty("receipt").GetProperty("leaf").ToString());
            Console.WriteLine(result.GetProperty("receipt").GetProperty("leafComponents").GetProperty("claimsDigest").ToString());
            Console.WriteLine(result.GetProperty("receipt").GetProperty("leafComponents").GetProperty("commitEvidence").ToString());
            Console.WriteLine(result.GetProperty("receipt").GetProperty("leafComponents").GetProperty("writeSetDigest").ToString());
            Console.WriteLine(result.GetProperty("receipt").GetProperty("nodeId").ToString());
            Console.WriteLine(result.GetProperty("receipt").GetProperty("proof")[0].GetProperty("left").ToString());
            Console.WriteLine(result.GetProperty("receipt").GetProperty("proof")[0].GetProperty("right").ToString());
            Console.WriteLine(result.GetProperty("receipt").GetProperty("root").ToString());
            Console.WriteLine(result.GetProperty("receipt").GetProperty("serviceEndorsements")[0].ToString());
            Console.WriteLine(result.GetProperty("receipt").GetProperty("signature").ToString());
            Console.WriteLine(result.GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("transactionId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetReceipt_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            Response response = await client.GetReceiptAsync("<transactionId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("applicationClaims")[0].GetProperty("digest").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("applicationClaims")[0].GetProperty("digest").GetProperty("protocol").ToString());
            Console.WriteLine(result.GetProperty("applicationClaims")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("applicationClaims")[0].GetProperty("ledgerEntry").GetProperty("collectionId").ToString());
            Console.WriteLine(result.GetProperty("applicationClaims")[0].GetProperty("ledgerEntry").GetProperty("contents").ToString());
            Console.WriteLine(result.GetProperty("applicationClaims")[0].GetProperty("ledgerEntry").GetProperty("secretKey").ToString());
            Console.WriteLine(result.GetProperty("applicationClaims")[0].GetProperty("ledgerEntry").GetProperty("protocol").ToString());
            Console.WriteLine(result.GetProperty("receipt").GetProperty("cert").ToString());
            Console.WriteLine(result.GetProperty("receipt").GetProperty("leaf").ToString());
            Console.WriteLine(result.GetProperty("receipt").GetProperty("leafComponents").GetProperty("claimsDigest").ToString());
            Console.WriteLine(result.GetProperty("receipt").GetProperty("leafComponents").GetProperty("commitEvidence").ToString());
            Console.WriteLine(result.GetProperty("receipt").GetProperty("leafComponents").GetProperty("writeSetDigest").ToString());
            Console.WriteLine(result.GetProperty("receipt").GetProperty("nodeId").ToString());
            Console.WriteLine(result.GetProperty("receipt").GetProperty("proof")[0].GetProperty("left").ToString());
            Console.WriteLine(result.GetProperty("receipt").GetProperty("proof")[0].GetProperty("right").ToString());
            Console.WriteLine(result.GetProperty("receipt").GetProperty("root").ToString());
            Console.WriteLine(result.GetProperty("receipt").GetProperty("serviceEndorsements")[0].ToString());
            Console.WriteLine(result.GetProperty("receipt").GetProperty("signature").ToString());
            Console.WriteLine(result.GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("transactionId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetTransactionStatus_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            Response response = client.GetTransactionStatus("<transactionId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("transactionId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetTransactionStatus_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            Response response = await client.GetTransactionStatusAsync("<transactionId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("transactionId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetTransactionStatus_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            Response response = client.GetTransactionStatus("<transactionId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("transactionId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetTransactionStatus_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            Response response = await client.GetTransactionStatusAsync("<transactionId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("transactionId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetCurrentLedgerEntry_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            Response response = client.GetCurrentLedgerEntry();

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("contents").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetCurrentLedgerEntry_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            Response response = await client.GetCurrentLedgerEntryAsync();

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("contents").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetCurrentLedgerEntry_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            Response response = client.GetCurrentLedgerEntry(collectionId: "<collectionId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("contents").ToString());
            Console.WriteLine(result.GetProperty("collectionId").ToString());
            Console.WriteLine(result.GetProperty("transactionId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetCurrentLedgerEntry_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            Response response = await client.GetCurrentLedgerEntryAsync(collectionId: "<collectionId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("contents").ToString());
            Console.WriteLine(result.GetProperty("collectionId").ToString());
            Console.WriteLine(result.GetProperty("transactionId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteUser_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            Response response = client.DeleteUser("<userId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteUser_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            Response response = await client.DeleteUserAsync("<userId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteUser_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            Response response = client.DeleteUser("<userId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteUser_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            Response response = await client.DeleteUserAsync("<userId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetUser_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            Response response = client.GetUser("<userId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("assignedRole").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetUser_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            Response response = await client.GetUserAsync("<userId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("assignedRole").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetUser_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            Response response = client.GetUser("<userId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("assignedRole").ToString());
            Console.WriteLine(result.GetProperty("userId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetUser_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            Response response = await client.GetUserAsync("<userId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("assignedRole").ToString());
            Console.WriteLine(result.GetProperty("userId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateOrUpdateUser_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                assignedRole = "Administrator",
            });
            Response response = client.CreateOrUpdateUser("<userId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("assignedRole").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateOrUpdateUser_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                assignedRole = "Administrator",
            });
            Response response = await client.CreateOrUpdateUserAsync("<userId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("assignedRole").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateOrUpdateUser_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                assignedRole = "Administrator",
            });
            Response response = client.CreateOrUpdateUser("<userId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("assignedRole").ToString());
            Console.WriteLine(result.GetProperty("userId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateOrUpdateUser_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                assignedRole = "Administrator",
            });
            Response response = await client.CreateOrUpdateUserAsync("<userId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("assignedRole").ToString());
            Console.WriteLine(result.GetProperty("userId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteLedgerUser_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            Response response = client.DeleteLedgerUser("<userId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteLedgerUser_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            Response response = await client.DeleteLedgerUserAsync("<userId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteLedgerUser_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            Response response = client.DeleteLedgerUser("<userId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteLedgerUser_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            Response response = await client.DeleteLedgerUserAsync("<userId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetLedgerUser_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            Response response = client.GetLedgerUser("<userId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("assignedRoles")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetLedgerUser_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            Response response = await client.GetLedgerUserAsync("<userId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("assignedRoles")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetLedgerUser_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            Response response = client.GetLedgerUser("<userId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("assignedRoles")[0].ToString());
            Console.WriteLine(result.GetProperty("userId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetLedgerUser_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            Response response = await client.GetLedgerUserAsync("<userId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("assignedRoles")[0].ToString());
            Console.WriteLine(result.GetProperty("userId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateOrUpdateLedgerUser_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                assignedRoles = new object[]
            {
"Administrator"
            },
            });
            Response response = client.CreateOrUpdateLedgerUser("<userId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("assignedRoles")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateOrUpdateLedgerUser_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                assignedRoles = new object[]
            {
"Administrator"
            },
            });
            Response response = await client.CreateOrUpdateLedgerUserAsync("<userId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("assignedRoles")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateOrUpdateLedgerUser_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                assignedRoles = new object[]
            {
"Administrator"
            },
            });
            Response response = client.CreateOrUpdateLedgerUser("<userId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("assignedRoles")[0].ToString());
            Console.WriteLine(result.GetProperty("userId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateOrUpdateLedgerUser_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                assignedRoles = new object[]
            {
"Administrator"
            },
            });
            Response response = await client.CreateOrUpdateLedgerUserAsync("<userId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("assignedRoles")[0].ToString());
            Console.WriteLine(result.GetProperty("userId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetUserDefinedEndpoint_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            Response response = client.GetUserDefinedEndpoint();

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("metadata").GetProperty("endpoints").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("modules").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetUserDefinedEndpoint_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            Response response = await client.GetUserDefinedEndpointAsync();

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("metadata").GetProperty("endpoints").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("modules").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetUserDefinedEndpoint_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            Response response = client.GetUserDefinedEndpoint();

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("metadata").GetProperty("endpoints").GetProperty("<key>").GetProperty("get").GetProperty("authn_policies")[0].ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("endpoints").GetProperty("<key>").GetProperty("get").GetProperty("forwarding_required").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("endpoints").GetProperty("<key>").GetProperty("get").GetProperty("interpreter_reuse").GetProperty("key").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("endpoints").GetProperty("<key>").GetProperty("get").GetProperty("js_function").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("endpoints").GetProperty("<key>").GetProperty("get").GetProperty("js_module").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("endpoints").GetProperty("<key>").GetProperty("get").GetProperty("mode").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("endpoints").GetProperty("<key>").GetProperty("get").GetProperty("openapi").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("endpoints").GetProperty("<key>").GetProperty("get").GetProperty("openapi_hidden").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("endpoints").GetProperty("<key>").GetProperty("get").GetProperty("redirection_strategy").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("endpoints").GetProperty("<key>").GetProperty("put").GetProperty("authn_policies")[0].ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("endpoints").GetProperty("<key>").GetProperty("put").GetProperty("forwarding_required").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("endpoints").GetProperty("<key>").GetProperty("put").GetProperty("interpreter_reuse").GetProperty("key").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("endpoints").GetProperty("<key>").GetProperty("put").GetProperty("js_function").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("endpoints").GetProperty("<key>").GetProperty("put").GetProperty("js_module").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("endpoints").GetProperty("<key>").GetProperty("put").GetProperty("mode").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("endpoints").GetProperty("<key>").GetProperty("put").GetProperty("openapi").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("endpoints").GetProperty("<key>").GetProperty("put").GetProperty("openapi_hidden").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("endpoints").GetProperty("<key>").GetProperty("put").GetProperty("redirection_strategy").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("endpoints").GetProperty("<key>").GetProperty("patch").GetProperty("authn_policies")[0].ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("endpoints").GetProperty("<key>").GetProperty("patch").GetProperty("forwarding_required").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("endpoints").GetProperty("<key>").GetProperty("patch").GetProperty("interpreter_reuse").GetProperty("key").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("endpoints").GetProperty("<key>").GetProperty("patch").GetProperty("js_function").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("endpoints").GetProperty("<key>").GetProperty("patch").GetProperty("js_module").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("endpoints").GetProperty("<key>").GetProperty("patch").GetProperty("mode").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("endpoints").GetProperty("<key>").GetProperty("patch").GetProperty("openapi").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("endpoints").GetProperty("<key>").GetProperty("patch").GetProperty("openapi_hidden").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("endpoints").GetProperty("<key>").GetProperty("patch").GetProperty("redirection_strategy").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("endpoints").GetProperty("<key>").GetProperty("delete").GetProperty("authn_policies")[0].ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("endpoints").GetProperty("<key>").GetProperty("delete").GetProperty("forwarding_required").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("endpoints").GetProperty("<key>").GetProperty("delete").GetProperty("interpreter_reuse").GetProperty("key").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("endpoints").GetProperty("<key>").GetProperty("delete").GetProperty("js_function").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("endpoints").GetProperty("<key>").GetProperty("delete").GetProperty("js_module").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("endpoints").GetProperty("<key>").GetProperty("delete").GetProperty("mode").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("endpoints").GetProperty("<key>").GetProperty("delete").GetProperty("openapi").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("endpoints").GetProperty("<key>").GetProperty("delete").GetProperty("openapi_hidden").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("endpoints").GetProperty("<key>").GetProperty("delete").GetProperty("redirection_strategy").ToString());
            Console.WriteLine(result.GetProperty("modules").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetUserDefinedEndpoint_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            Response response = await client.GetUserDefinedEndpointAsync();

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("metadata").GetProperty("endpoints").GetProperty("<key>").GetProperty("get").GetProperty("authn_policies")[0].ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("endpoints").GetProperty("<key>").GetProperty("get").GetProperty("forwarding_required").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("endpoints").GetProperty("<key>").GetProperty("get").GetProperty("interpreter_reuse").GetProperty("key").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("endpoints").GetProperty("<key>").GetProperty("get").GetProperty("js_function").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("endpoints").GetProperty("<key>").GetProperty("get").GetProperty("js_module").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("endpoints").GetProperty("<key>").GetProperty("get").GetProperty("mode").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("endpoints").GetProperty("<key>").GetProperty("get").GetProperty("openapi").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("endpoints").GetProperty("<key>").GetProperty("get").GetProperty("openapi_hidden").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("endpoints").GetProperty("<key>").GetProperty("get").GetProperty("redirection_strategy").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("endpoints").GetProperty("<key>").GetProperty("put").GetProperty("authn_policies")[0].ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("endpoints").GetProperty("<key>").GetProperty("put").GetProperty("forwarding_required").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("endpoints").GetProperty("<key>").GetProperty("put").GetProperty("interpreter_reuse").GetProperty("key").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("endpoints").GetProperty("<key>").GetProperty("put").GetProperty("js_function").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("endpoints").GetProperty("<key>").GetProperty("put").GetProperty("js_module").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("endpoints").GetProperty("<key>").GetProperty("put").GetProperty("mode").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("endpoints").GetProperty("<key>").GetProperty("put").GetProperty("openapi").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("endpoints").GetProperty("<key>").GetProperty("put").GetProperty("openapi_hidden").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("endpoints").GetProperty("<key>").GetProperty("put").GetProperty("redirection_strategy").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("endpoints").GetProperty("<key>").GetProperty("patch").GetProperty("authn_policies")[0].ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("endpoints").GetProperty("<key>").GetProperty("patch").GetProperty("forwarding_required").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("endpoints").GetProperty("<key>").GetProperty("patch").GetProperty("interpreter_reuse").GetProperty("key").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("endpoints").GetProperty("<key>").GetProperty("patch").GetProperty("js_function").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("endpoints").GetProperty("<key>").GetProperty("patch").GetProperty("js_module").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("endpoints").GetProperty("<key>").GetProperty("patch").GetProperty("mode").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("endpoints").GetProperty("<key>").GetProperty("patch").GetProperty("openapi").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("endpoints").GetProperty("<key>").GetProperty("patch").GetProperty("openapi_hidden").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("endpoints").GetProperty("<key>").GetProperty("patch").GetProperty("redirection_strategy").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("endpoints").GetProperty("<key>").GetProperty("delete").GetProperty("authn_policies")[0].ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("endpoints").GetProperty("<key>").GetProperty("delete").GetProperty("forwarding_required").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("endpoints").GetProperty("<key>").GetProperty("delete").GetProperty("interpreter_reuse").GetProperty("key").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("endpoints").GetProperty("<key>").GetProperty("delete").GetProperty("js_function").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("endpoints").GetProperty("<key>").GetProperty("delete").GetProperty("js_module").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("endpoints").GetProperty("<key>").GetProperty("delete").GetProperty("mode").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("endpoints").GetProperty("<key>").GetProperty("delete").GetProperty("openapi").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("endpoints").GetProperty("<key>").GetProperty("delete").GetProperty("openapi_hidden").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("endpoints").GetProperty("<key>").GetProperty("delete").GetProperty("redirection_strategy").ToString());
            Console.WriteLine(result.GetProperty("modules").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateUserDefinedEndpoint_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                metadata = new
                {
                    endpoints = new
                    {
                        key = new object(),
                    },
                },
                modules = new object(),
            });
            Response response = client.CreateUserDefinedEndpoint(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateUserDefinedEndpoint_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                metadata = new
                {
                    endpoints = new
                    {
                        key = new object(),
                    },
                },
                modules = new object(),
            });
            Response response = await client.CreateUserDefinedEndpointAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateUserDefinedEndpoint_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                metadata = new
                {
                    endpoints = new
                    {
                        key = new
                        {
                            get = new
                            {
                                authn_policies = new object[]
            {
new object()
            },
                                forwarding_required = "sometimes",
                                interpreter_reuse = new
                                {
                                    key = "<key>",
                                },
                                js_function = "<js_function>",
                                js_module = "<js_module>",
                                mode = "readwrite",
                                openapi = new object(),
                                openapi_hidden = true,
                                redirection_strategy = "none",
                            },
                        },
                    },
                },
                modules = new object(),
            });
            Response response = client.CreateUserDefinedEndpoint(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateUserDefinedEndpoint_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                metadata = new
                {
                    endpoints = new
                    {
                        key = new
                        {
                            get = new
                            {
                                authn_policies = new object[]
            {
new object()
            },
                                forwarding_required = "sometimes",
                                interpreter_reuse = new
                                {
                                    key = "<key>",
                                },
                                js_function = "<js_function>",
                                js_module = "<js_module>",
                                mode = "readwrite",
                                openapi = new object(),
                                openapi_hidden = true,
                                redirection_strategy = "none",
                            },
                        },
                    },
                },
                modules = new object(),
            });
            Response response = await client.CreateUserDefinedEndpointAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetRuntimeOptions_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            Response response = client.GetRuntimeOptions();

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetRuntimeOptions_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            Response response = await client.GetRuntimeOptionsAsync();

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetRuntimeOptions_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            Response response = client.GetRuntimeOptions();

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("log_exception_details").ToString());
            Console.WriteLine(result.GetProperty("max_cached_interpreters").ToString());
            Console.WriteLine(result.GetProperty("max_execution_time_ms").ToString());
            Console.WriteLine(result.GetProperty("max_heap_bytes").ToString());
            Console.WriteLine(result.GetProperty("max_stack_bytes").ToString());
            Console.WriteLine(result.GetProperty("return_exception_details").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetRuntimeOptions_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            Response response = await client.GetRuntimeOptionsAsync();

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("log_exception_details").ToString());
            Console.WriteLine(result.GetProperty("max_cached_interpreters").ToString());
            Console.WriteLine(result.GetProperty("max_execution_time_ms").ToString());
            Console.WriteLine(result.GetProperty("max_heap_bytes").ToString());
            Console.WriteLine(result.GetProperty("max_stack_bytes").ToString());
            Console.WriteLine(result.GetProperty("return_exception_details").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UpdateRuntimeOptions_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.UpdateRuntimeOptions(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UpdateRuntimeOptions_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.UpdateRuntimeOptionsAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UpdateRuntimeOptions_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                log_exception_details = true,
                max_cached_interpreters = 1234L,
                max_execution_time_ms = 1234L,
                max_heap_bytes = 1234L,
                max_stack_bytes = 1234L,
                return_exception_details = true,
            });
            Response response = client.UpdateRuntimeOptions(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("log_exception_details").ToString());
            Console.WriteLine(result.GetProperty("max_cached_interpreters").ToString());
            Console.WriteLine(result.GetProperty("max_execution_time_ms").ToString());
            Console.WriteLine(result.GetProperty("max_heap_bytes").ToString());
            Console.WriteLine(result.GetProperty("max_stack_bytes").ToString());
            Console.WriteLine(result.GetProperty("return_exception_details").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UpdateRuntimeOptions_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                log_exception_details = true,
                max_cached_interpreters = 1234L,
                max_execution_time_ms = 1234L,
                max_heap_bytes = 1234L,
                max_stack_bytes = 1234L,
                return_exception_details = true,
            });
            Response response = await client.UpdateRuntimeOptionsAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("log_exception_details").ToString());
            Console.WriteLine(result.GetProperty("max_cached_interpreters").ToString());
            Console.WriteLine(result.GetProperty("max_execution_time_ms").ToString());
            Console.WriteLine(result.GetProperty("max_heap_bytes").ToString());
            Console.WriteLine(result.GetProperty("max_stack_bytes").ToString());
            Console.WriteLine(result.GetProperty("return_exception_details").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetUserDefinedEndpointsModule_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            Response response = client.GetUserDefinedEndpointsModule("<module>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("module").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetUserDefinedEndpointsModule_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            Response response = await client.GetUserDefinedEndpointsModuleAsync("<module>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("module").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetUserDefinedEndpointsModule_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            Response response = client.GetUserDefinedEndpointsModule("<module>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("module").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetUserDefinedEndpointsModule_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            Response response = await client.GetUserDefinedEndpointsModuleAsync("<module>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("module").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetUserDefinedRole_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            Response response = client.GetUserDefinedRole("<roleName>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetUserDefinedRole_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            Response response = await client.GetUserDefinedRoleAsync("<roleName>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetUserDefinedRole_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            Response response = client.GetUserDefinedRole("<roleName>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("roleName").ToString());
            Console.WriteLine(result[0].GetProperty("roleActions")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetUserDefinedRole_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            Response response = await client.GetUserDefinedRoleAsync("<roleName>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("roleName").ToString());
            Console.WriteLine(result[0].GetProperty("roleActions")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateUserDefinedRole_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object[]
            {
new object()
            });
            Response response = client.CreateUserDefinedRole(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateUserDefinedRole_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object[]
            {
new object()
            });
            Response response = await client.CreateUserDefinedRoleAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateUserDefinedRole_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object[]
            {
new
{
roleName = "<roleName>",
roleActions = new object[]
{
"<roleActions>"
},
}
            });
            Response response = client.CreateUserDefinedRole(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateUserDefinedRole_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object[]
            {
new
{
roleName = "<roleName>",
roleActions = new object[]
{
"<roleActions>"
},
}
            });
            Response response = await client.CreateUserDefinedRoleAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UpdateUserDefinedRole_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object[]
            {
new object()
            });
            Response response = client.UpdateUserDefinedRole(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UpdateUserDefinedRole_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object[]
            {
new object()
            });
            Response response = await client.UpdateUserDefinedRoleAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UpdateUserDefinedRole_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object[]
            {
new
{
roleName = "<roleName>",
roleActions = new object[]
{
"<roleActions>"
},
}
            });
            Response response = client.UpdateUserDefinedRole(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UpdateUserDefinedRole_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object[]
            {
new
{
roleName = "<roleName>",
roleActions = new object[]
{
"<roleActions>"
},
}
            });
            Response response = await client.UpdateUserDefinedRoleAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteUserDefinedRole_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            Response response = client.DeleteUserDefinedRole("<roleName>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteUserDefinedRole_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            Response response = await client.DeleteUserDefinedRoleAsync("<roleName>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteUserDefinedRole_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            Response response = client.DeleteUserDefinedRole("<roleName>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteUserDefinedRole_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            Response response = await client.DeleteUserDefinedRoleAsync("<roleName>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetConsortiumMembers_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            foreach (BinaryData item in client.GetConsortiumMembers())
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("certificate").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetConsortiumMembers_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            await foreach (BinaryData item in client.GetConsortiumMembersAsync())
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("certificate").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetConsortiumMembers_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            foreach (BinaryData item in client.GetConsortiumMembers())
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("certificate").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetConsortiumMembers_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            await foreach (BinaryData item in client.GetConsortiumMembersAsync())
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("certificate").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetCollections_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            foreach (BinaryData item in client.GetCollections())
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("collectionId").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetCollections_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            await foreach (BinaryData item in client.GetCollectionsAsync())
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("collectionId").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetCollections_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            foreach (BinaryData item in client.GetCollections())
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("collectionId").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetCollections_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            await foreach (BinaryData item in client.GetCollectionsAsync())
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("collectionId").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetLedgerEntries_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            foreach (BinaryData item in client.GetLedgerEntries())
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("contents").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetLedgerEntries_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            await foreach (BinaryData item in client.GetLedgerEntriesAsync())
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("contents").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetLedgerEntries_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            foreach (BinaryData item in client.GetLedgerEntries(collectionId: "<collectionId>", fromTransactionId: "<fromTransactionId>", toTransactionId: "<toTransactionId>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("contents").ToString());
                Console.WriteLine(result.GetProperty("collectionId").ToString());
                Console.WriteLine(result.GetProperty("transactionId").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetLedgerEntries_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            await foreach (BinaryData item in client.GetLedgerEntriesAsync(collectionId: "<collectionId>", fromTransactionId: "<fromTransactionId>", toTransactionId: "<toTransactionId>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("contents").ToString());
                Console.WriteLine(result.GetProperty("collectionId").ToString());
                Console.WriteLine(result.GetProperty("transactionId").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetUsers_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            foreach (BinaryData item in client.GetUsers())
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("assignedRole").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetUsers_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            await foreach (BinaryData item in client.GetUsersAsync())
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("assignedRole").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetUsers_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            foreach (BinaryData item in client.GetUsers())
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("assignedRole").ToString());
                Console.WriteLine(result.GetProperty("userId").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetUsers_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            await foreach (BinaryData item in client.GetUsersAsync())
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("assignedRole").ToString());
                Console.WriteLine(result.GetProperty("userId").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetLedgerUsers_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            foreach (BinaryData item in client.GetLedgerUsers())
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("assignedRoles")[0].ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetLedgerUsers_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            await foreach (BinaryData item in client.GetLedgerUsersAsync())
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("assignedRoles")[0].ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetLedgerUsers_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            foreach (BinaryData item in client.GetLedgerUsers())
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("assignedRoles")[0].ToString());
                Console.WriteLine(result.GetProperty("userId").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetLedgerUsers_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            ConfidentialLedgerClient client = new ConfidentialLedgerClient(endpoint, credential);

            await foreach (BinaryData item in client.GetLedgerUsersAsync())
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("assignedRoles")[0].ToString());
                Console.WriteLine(result.GetProperty("userId").ToString());
            }
        }
    }
}
