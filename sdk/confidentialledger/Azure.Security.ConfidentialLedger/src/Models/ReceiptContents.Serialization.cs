// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Security.ConfidentialLedger.Models
{
    public partial class ReceiptContents
    {
        internal static ReceiptContents DeserializeReceiptContents(JsonElement element)
        {
            Optional<string> cert = default;
            Optional<string> leaf = default;
            Optional<ReceiptLeafComponents> leafComponents = default;
            string nodeId = default;
            IReadOnlyList<ReceiptElement> proof = default;
            Optional<string> root = default;
            Optional<IReadOnlyList<string>> serviceEndorsements = default;
            string signature = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("cert"))
                {
                    cert = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("leaf"))
                {
                    leaf = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("leafComponents"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    leafComponents = ReceiptLeafComponents.DeserializeReceiptLeafComponents(property.Value);
                    continue;
                }
                if (property.NameEquals("nodeId"))
                {
                    nodeId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("proof"))
                {
                    List<ReceiptElement> array = new List<ReceiptElement>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ReceiptElement.DeserializeReceiptElement(item));
                    }
                    proof = array;
                    continue;
                }
                if (property.NameEquals("root"))
                {
                    root = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("serviceEndorsements"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    serviceEndorsements = array;
                    continue;
                }
                if (property.NameEquals("signature"))
                {
                    signature = property.Value.GetString();
                    continue;
                }
            }
            return new ReceiptContents(cert.Value, leaf.Value, leafComponents.Value, nodeId, proof, root.Value, Optional.ToList(serviceEndorsements), signature);
        }
    }
}
