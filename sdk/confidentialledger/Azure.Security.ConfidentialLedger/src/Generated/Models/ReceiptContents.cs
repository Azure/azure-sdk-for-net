// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.Security.ConfidentialLedger.Models
{
    /// <summary> A receipt certifying the transaction at the specified id. </summary>
    public partial class ReceiptContents
    {
        /// <summary> Initializes a new instance of ReceiptContents. </summary>
        /// <param name="leaf"> Merkle tree leaf for this transaction. </param>
        /// <param name="nodeId"> Id of the node returning the receipt. </param>
        /// <param name="proof"> Merkle proof. </param>
        /// <param name="root"> Root of the Merkle tree at the time the transaction was recorded. </param>
        /// <param name="signature"> Signature by the node, with its certificate, over the Merkle root. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="leaf"/>, <paramref name="nodeId"/>, <paramref name="proof"/>, <paramref name="root"/>, or <paramref name="signature"/> is null. </exception>
        internal ReceiptContents(string leaf, string nodeId, IEnumerable<MerkleProofElement> proof, string root, string signature)
        {
            if (leaf == null)
            {
                throw new ArgumentNullException(nameof(leaf));
            }
            if (nodeId == null)
            {
                throw new ArgumentNullException(nameof(nodeId));
            }
            if (proof == null)
            {
                throw new ArgumentNullException(nameof(proof));
            }
            if (root == null)
            {
                throw new ArgumentNullException(nameof(root));
            }
            if (signature == null)
            {
                throw new ArgumentNullException(nameof(signature));
            }

            Leaf = leaf;
            NodeId = nodeId;
            Proof = proof.ToList();
            Root = root;
            Signature = signature;
        }

        /// <summary> Initializes a new instance of ReceiptContents. </summary>
        /// <param name="leaf"> Merkle tree leaf for this transaction. </param>
        /// <param name="nodeId"> Id of the node returning the receipt. </param>
        /// <param name="proof"> Merkle proof. </param>
        /// <param name="root"> Root of the Merkle tree at the time the transaction was recorded. </param>
        /// <param name="signature"> Signature by the node, with its certificate, over the Merkle root. </param>
        internal ReceiptContents(string leaf, string nodeId, IReadOnlyList<MerkleProofElement> proof, string root, string signature)
        {
            Leaf = leaf;
            NodeId = nodeId;
            Proof = proof;
            Root = root;
            Signature = signature;
        }

        /// <summary> Merkle tree leaf for this transaction. </summary>
        public string Leaf { get; }
        /// <summary> Id of the node returning the receipt. </summary>
        public string NodeId { get; }
        /// <summary> Merkle proof. </summary>
        public IReadOnlyList<MerkleProofElement> Proof { get; }
        /// <summary> Root of the Merkle tree at the time the transaction was recorded. </summary>
        public string Root { get; }
        /// <summary> Signature by the node, with its certificate, over the Merkle root. </summary>
        public string Signature { get; }
    }
}
