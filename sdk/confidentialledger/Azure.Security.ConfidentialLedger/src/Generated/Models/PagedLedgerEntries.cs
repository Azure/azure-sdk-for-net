// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.Security.ConfidentialLedger.Models
{
    /// <summary> Paginated ledger entries returned in response to a query. </summary>
    internal partial class PagedLedgerEntries
    {
        /// <summary> Initializes a new instance of PagedLedgerEntries. </summary>
        /// <param name="state"> State of a ledger query. </param>
        /// <param name="entries"> Array of ledger entries. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="entries"/> is null. </exception>
        internal PagedLedgerEntries(ConfidentialLedgerQueryState state, IEnumerable<LedgerEntry> entries)
        {
            if (entries == null)
            {
                throw new ArgumentNullException(nameof(entries));
            }

            State = state;
            Entries = entries.ToList();
        }

        /// <summary> Initializes a new instance of PagedLedgerEntries. </summary>
        /// <param name="state"> State of a ledger query. </param>
        /// <param name="nextLink"> Path from which to retrieve the next page of results. </param>
        /// <param name="entries"> Array of ledger entries. </param>
        internal PagedLedgerEntries(ConfidentialLedgerQueryState state, string nextLink, IReadOnlyList<LedgerEntry> entries)
        {
            State = state;
            NextLink = nextLink;
            Entries = entries;
        }

        /// <summary> State of a ledger query. </summary>
        public ConfidentialLedgerQueryState State { get; }
        /// <summary> Path from which to retrieve the next page of results. </summary>
        public string NextLink { get; }
        /// <summary> Array of ledger entries. </summary>
        public IReadOnlyList<LedgerEntry> Entries { get; }
    }
}
