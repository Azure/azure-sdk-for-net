// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure.Core.Extensions;
using Azure.Security.ConfidentialLedger;
using Azure.Security.ConfidentialLedger.Certificate;

namespace Microsoft.Extensions.Azure
{
    /// <summary> Extension methods to add <see cref="ConfidentialLedgerClient"/>, <see cref="ConfidentialLedgerCertificateClient"/> to client builder. </summary>
    public static partial class ConfidentialLedgerClientBuilderExtensions
    {
        /// <summary> Registers a <see cref="ConfidentialLedgerClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="ledgerEndpoint"> The Confidential Ledger URL, for example https://contoso.confidentialledger.azure.com. </param>
        public static IAzureClientBuilder<ConfidentialLedgerClient, ConfidentialLedgerClientOptions> AddConfidentialLedgerClient<TBuilder>(this TBuilder builder, Uri ledgerEndpoint)
        where TBuilder : IAzureClientFactoryBuilderWithCredential
        {
            return builder.RegisterClientFactory<ConfidentialLedgerClient, ConfidentialLedgerClientOptions>((options, cred) => new ConfidentialLedgerClient(ledgerEndpoint, cred, options));
        }

        /// <summary> Registers a <see cref="ConfidentialLedgerCertificateClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="certificateEndpoint"> The certificate endpoint (or "Identity Service Endpoint" in the Azure portal), for example https://identity.confidential-ledger.core.azure.com. </param>
        public static IAzureClientBuilder<ConfidentialLedgerCertificateClient, ConfidentialLedgerClientOptions> AddConfidentialLedgerCertificateClient<TBuilder>(this TBuilder builder, Uri certificateEndpoint)
        where TBuilder : IAzureClientFactoryBuilderWithCredential
        {
            return builder.RegisterClientFactory<ConfidentialLedgerCertificateClient, ConfidentialLedgerClientOptions>((options, cred) => new ConfidentialLedgerCertificateClient(certificateEndpoint, cred, options));
        }

        /// <summary> Registers a <see cref="ConfidentialLedgerClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="configuration"> The configuration values. </param>
        public static IAzureClientBuilder<ConfidentialLedgerClient, ConfidentialLedgerClientOptions> AddConfidentialLedgerClient<TBuilder, TConfiguration>(this TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<ConfidentialLedgerClient, ConfidentialLedgerClientOptions>(configuration);
        }
        /// <summary> Registers a <see cref="ConfidentialLedgerCertificateClient"/> instance. </summary>
        /// <param name="builder"> The builder to register with. </param>
        /// <param name="configuration"> The configuration values. </param>
        public static IAzureClientBuilder<ConfidentialLedgerCertificateClient, ConfidentialLedgerClientOptions> AddConfidentialLedgerCertificateClient<TBuilder, TConfiguration>(this TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<ConfidentialLedgerCertificateClient, ConfidentialLedgerClientOptions>(configuration);
        }
    }
}
