// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.Management.Network.Models;

namespace Azure.Management.Network
{
    /// <summary> The NetworkWatchers service client. </summary>
    public partial class NetworkWatchersClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal NetworkWatchersRestClient RestClient { get; }
        /// <summary> Initializes a new instance of NetworkWatchersClient for mocking. </summary>
        protected NetworkWatchersClient()
        {
        }

        /// <summary> Initializes a new instance of NetworkWatchersClient. </summary>
        public NetworkWatchersClient(string subscriptionId, TokenCredential tokenCredential, NetworkManagementClientOptions options = null) : this(subscriptionId, "https://management.azure.com", tokenCredential, options)
        {
        }

        /// <summary> Initializes a new instance of NetworkWatchersClient. </summary>
        public NetworkWatchersClient(string subscriptionId, string host, TokenCredential tokenCredential, NetworkManagementClientOptions options = null)
        {
            options ??= new NetworkManagementClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            _pipeline = ManagementPipelineBuilder.Build(tokenCredential, host, options);
            RestClient = new NetworkWatchersRestClient(_clientDiagnostics, _pipeline, subscriptionId: subscriptionId, host: host);
        }

        /// <summary> Creates or updates a network watcher in the specified resource group. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="networkWatcherName"> The name of the network watcher. </param>
        /// <param name="parameters"> Parameters that define the network watcher resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<NetworkWatcher>> CreateOrUpdateAsync(string resourceGroupName, string networkWatcherName, NetworkWatcher parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("NetworkWatchersClient.CreateOrUpdate");
            scope.Start();
            try
            {
                return await RestClient.CreateOrUpdateAsync(resourceGroupName, networkWatcherName, parameters, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates or updates a network watcher in the specified resource group. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="networkWatcherName"> The name of the network watcher. </param>
        /// <param name="parameters"> Parameters that define the network watcher resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<NetworkWatcher> CreateOrUpdate(string resourceGroupName, string networkWatcherName, NetworkWatcher parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("NetworkWatchersClient.CreateOrUpdate");
            scope.Start();
            try
            {
                return RestClient.CreateOrUpdate(resourceGroupName, networkWatcherName, parameters, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the specified network watcher by resource group. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="networkWatcherName"> The name of the network watcher. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<NetworkWatcher>> GetAsync(string resourceGroupName, string networkWatcherName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("NetworkWatchersClient.Get");
            scope.Start();
            try
            {
                return await RestClient.GetAsync(resourceGroupName, networkWatcherName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the specified network watcher by resource group. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="networkWatcherName"> The name of the network watcher. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<NetworkWatcher> Get(string resourceGroupName, string networkWatcherName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("NetworkWatchersClient.Get");
            scope.Start();
            try
            {
                return RestClient.Get(resourceGroupName, networkWatcherName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates a network watcher tags. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="networkWatcherName"> The name of the network watcher. </param>
        /// <param name="parameters"> Parameters supplied to update network watcher tags. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<NetworkWatcher>> UpdateTagsAsync(string resourceGroupName, string networkWatcherName, TagsObject parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("NetworkWatchersClient.UpdateTags");
            scope.Start();
            try
            {
                return await RestClient.UpdateTagsAsync(resourceGroupName, networkWatcherName, parameters, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates a network watcher tags. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="networkWatcherName"> The name of the network watcher. </param>
        /// <param name="parameters"> Parameters supplied to update network watcher tags. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<NetworkWatcher> UpdateTags(string resourceGroupName, string networkWatcherName, TagsObject parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("NetworkWatchersClient.UpdateTags");
            scope.Start();
            try
            {
                return RestClient.UpdateTags(resourceGroupName, networkWatcherName, parameters, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the current network topology by resource group. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="networkWatcherName"> The name of the network watcher. </param>
        /// <param name="parameters"> Parameters that define the representation of topology. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Topology>> GetTopologyAsync(string resourceGroupName, string networkWatcherName, TopologyParameters parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("NetworkWatchersClient.GetTopology");
            scope.Start();
            try
            {
                return await RestClient.GetTopologyAsync(resourceGroupName, networkWatcherName, parameters, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the current network topology by resource group. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="networkWatcherName"> The name of the network watcher. </param>
        /// <param name="parameters"> Parameters that define the representation of topology. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Topology> GetTopology(string resourceGroupName, string networkWatcherName, TopologyParameters parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("NetworkWatchersClient.GetTopology");
            scope.Start();
            try
            {
                return RestClient.GetTopology(resourceGroupName, networkWatcherName, parameters, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets all network watchers by resource group. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<NetworkWatcher> ListAsync(string resourceGroupName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }

            async Task<Page<NetworkWatcher>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("NetworkWatchersClient.List");
                scope.Start();
                try
                {
                    var response = await RestClient.ListAsync(resourceGroupName, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary> Gets all network watchers by resource group. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<NetworkWatcher> List(string resourceGroupName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }

            Page<NetworkWatcher> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("NetworkWatchersClient.List");
                scope.Start();
                try
                {
                    var response = RestClient.List(resourceGroupName, cancellationToken);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary> Gets all network watchers by subscription. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<NetworkWatcher> ListAllAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<NetworkWatcher>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("NetworkWatchersClient.ListAll");
                scope.Start();
                try
                {
                    var response = await RestClient.ListAllAsync(cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary> Gets all network watchers by subscription. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<NetworkWatcher> ListAll(CancellationToken cancellationToken = default)
        {
            Page<NetworkWatcher> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("NetworkWatchersClient.ListAll");
                scope.Start();
                try
                {
                    var response = RestClient.ListAll(cancellationToken);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary> Deletes the specified network watcher resource. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="networkWatcherName"> The name of the network watcher. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async ValueTask<NetworkWatchersDeleteOperation> StartDeleteAsync(string resourceGroupName, string networkWatcherName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (networkWatcherName == null)
            {
                throw new ArgumentNullException(nameof(networkWatcherName));
            }

            using var scope = _clientDiagnostics.CreateScope("NetworkWatchersClient.StartDelete");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.DeleteAsync(resourceGroupName, networkWatcherName, cancellationToken).ConfigureAwait(false);
                return new NetworkWatchersDeleteOperation(_clientDiagnostics, _pipeline, RestClient.CreateDeleteRequest(resourceGroupName, networkWatcherName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes the specified network watcher resource. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="networkWatcherName"> The name of the network watcher. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual NetworkWatchersDeleteOperation StartDelete(string resourceGroupName, string networkWatcherName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (networkWatcherName == null)
            {
                throw new ArgumentNullException(nameof(networkWatcherName));
            }

            using var scope = _clientDiagnostics.CreateScope("NetworkWatchersClient.StartDelete");
            scope.Start();
            try
            {
                var originalResponse = RestClient.Delete(resourceGroupName, networkWatcherName, cancellationToken);
                return new NetworkWatchersDeleteOperation(_clientDiagnostics, _pipeline, RestClient.CreateDeleteRequest(resourceGroupName, networkWatcherName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Verify IP flow from the specified VM to a location given the currently configured NSG rules. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="networkWatcherName"> The name of the network watcher. </param>
        /// <param name="parameters"> Parameters that define the IP flow to be verified. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async ValueTask<NetworkWatchersVerifyIPFlowOperation> StartVerifyIPFlowAsync(string resourceGroupName, string networkWatcherName, VerificationIPFlowParameters parameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (networkWatcherName == null)
            {
                throw new ArgumentNullException(nameof(networkWatcherName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("NetworkWatchersClient.StartVerifyIPFlow");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.VerifyIPFlowAsync(resourceGroupName, networkWatcherName, parameters, cancellationToken).ConfigureAwait(false);
                return new NetworkWatchersVerifyIPFlowOperation(_clientDiagnostics, _pipeline, RestClient.CreateVerifyIPFlowRequest(resourceGroupName, networkWatcherName, parameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Verify IP flow from the specified VM to a location given the currently configured NSG rules. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="networkWatcherName"> The name of the network watcher. </param>
        /// <param name="parameters"> Parameters that define the IP flow to be verified. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual NetworkWatchersVerifyIPFlowOperation StartVerifyIPFlow(string resourceGroupName, string networkWatcherName, VerificationIPFlowParameters parameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (networkWatcherName == null)
            {
                throw new ArgumentNullException(nameof(networkWatcherName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("NetworkWatchersClient.StartVerifyIPFlow");
            scope.Start();
            try
            {
                var originalResponse = RestClient.VerifyIPFlow(resourceGroupName, networkWatcherName, parameters, cancellationToken);
                return new NetworkWatchersVerifyIPFlowOperation(_clientDiagnostics, _pipeline, RestClient.CreateVerifyIPFlowRequest(resourceGroupName, networkWatcherName, parameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the next hop from the specified VM. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="networkWatcherName"> The name of the network watcher. </param>
        /// <param name="parameters"> Parameters that define the source and destination endpoint. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async ValueTask<NetworkWatchersGetNextHopOperation> StartGetNextHopAsync(string resourceGroupName, string networkWatcherName, NextHopParameters parameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (networkWatcherName == null)
            {
                throw new ArgumentNullException(nameof(networkWatcherName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("NetworkWatchersClient.StartGetNextHop");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.GetNextHopAsync(resourceGroupName, networkWatcherName, parameters, cancellationToken).ConfigureAwait(false);
                return new NetworkWatchersGetNextHopOperation(_clientDiagnostics, _pipeline, RestClient.CreateGetNextHopRequest(resourceGroupName, networkWatcherName, parameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the next hop from the specified VM. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="networkWatcherName"> The name of the network watcher. </param>
        /// <param name="parameters"> Parameters that define the source and destination endpoint. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual NetworkWatchersGetNextHopOperation StartGetNextHop(string resourceGroupName, string networkWatcherName, NextHopParameters parameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (networkWatcherName == null)
            {
                throw new ArgumentNullException(nameof(networkWatcherName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("NetworkWatchersClient.StartGetNextHop");
            scope.Start();
            try
            {
                var originalResponse = RestClient.GetNextHop(resourceGroupName, networkWatcherName, parameters, cancellationToken);
                return new NetworkWatchersGetNextHopOperation(_clientDiagnostics, _pipeline, RestClient.CreateGetNextHopRequest(resourceGroupName, networkWatcherName, parameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the configured and effective security group rules on the specified VM. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="networkWatcherName"> The name of the network watcher. </param>
        /// <param name="parameters"> Parameters that define the VM to check security groups for. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async ValueTask<NetworkWatchersGetVMSecurityRulesOperation> StartGetVMSecurityRulesAsync(string resourceGroupName, string networkWatcherName, SecurityGroupViewParameters parameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (networkWatcherName == null)
            {
                throw new ArgumentNullException(nameof(networkWatcherName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("NetworkWatchersClient.StartGetVMSecurityRules");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.GetVMSecurityRulesAsync(resourceGroupName, networkWatcherName, parameters, cancellationToken).ConfigureAwait(false);
                return new NetworkWatchersGetVMSecurityRulesOperation(_clientDiagnostics, _pipeline, RestClient.CreateGetVMSecurityRulesRequest(resourceGroupName, networkWatcherName, parameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the configured and effective security group rules on the specified VM. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="networkWatcherName"> The name of the network watcher. </param>
        /// <param name="parameters"> Parameters that define the VM to check security groups for. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual NetworkWatchersGetVMSecurityRulesOperation StartGetVMSecurityRules(string resourceGroupName, string networkWatcherName, SecurityGroupViewParameters parameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (networkWatcherName == null)
            {
                throw new ArgumentNullException(nameof(networkWatcherName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("NetworkWatchersClient.StartGetVMSecurityRules");
            scope.Start();
            try
            {
                var originalResponse = RestClient.GetVMSecurityRules(resourceGroupName, networkWatcherName, parameters, cancellationToken);
                return new NetworkWatchersGetVMSecurityRulesOperation(_clientDiagnostics, _pipeline, RestClient.CreateGetVMSecurityRulesRequest(resourceGroupName, networkWatcherName, parameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Initiate troubleshooting on a specified resource. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="networkWatcherName"> The name of the network watcher resource. </param>
        /// <param name="parameters"> Parameters that define the resource to troubleshoot. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async ValueTask<NetworkWatchersGetTroubleshootingOperation> StartGetTroubleshootingAsync(string resourceGroupName, string networkWatcherName, TroubleshootingParameters parameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (networkWatcherName == null)
            {
                throw new ArgumentNullException(nameof(networkWatcherName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("NetworkWatchersClient.StartGetTroubleshooting");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.GetTroubleshootingAsync(resourceGroupName, networkWatcherName, parameters, cancellationToken).ConfigureAwait(false);
                return new NetworkWatchersGetTroubleshootingOperation(_clientDiagnostics, _pipeline, RestClient.CreateGetTroubleshootingRequest(resourceGroupName, networkWatcherName, parameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Initiate troubleshooting on a specified resource. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="networkWatcherName"> The name of the network watcher resource. </param>
        /// <param name="parameters"> Parameters that define the resource to troubleshoot. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual NetworkWatchersGetTroubleshootingOperation StartGetTroubleshooting(string resourceGroupName, string networkWatcherName, TroubleshootingParameters parameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (networkWatcherName == null)
            {
                throw new ArgumentNullException(nameof(networkWatcherName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("NetworkWatchersClient.StartGetTroubleshooting");
            scope.Start();
            try
            {
                var originalResponse = RestClient.GetTroubleshooting(resourceGroupName, networkWatcherName, parameters, cancellationToken);
                return new NetworkWatchersGetTroubleshootingOperation(_clientDiagnostics, _pipeline, RestClient.CreateGetTroubleshootingRequest(resourceGroupName, networkWatcherName, parameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the last completed troubleshooting result on a specified resource. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="networkWatcherName"> The name of the network watcher resource. </param>
        /// <param name="parameters"> Parameters that define the resource to query the troubleshooting result. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async ValueTask<NetworkWatchersGetTroubleshootingResultOperation> StartGetTroubleshootingResultAsync(string resourceGroupName, string networkWatcherName, QueryTroubleshootingParameters parameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (networkWatcherName == null)
            {
                throw new ArgumentNullException(nameof(networkWatcherName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("NetworkWatchersClient.StartGetTroubleshootingResult");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.GetTroubleshootingResultAsync(resourceGroupName, networkWatcherName, parameters, cancellationToken).ConfigureAwait(false);
                return new NetworkWatchersGetTroubleshootingResultOperation(_clientDiagnostics, _pipeline, RestClient.CreateGetTroubleshootingResultRequest(resourceGroupName, networkWatcherName, parameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the last completed troubleshooting result on a specified resource. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="networkWatcherName"> The name of the network watcher resource. </param>
        /// <param name="parameters"> Parameters that define the resource to query the troubleshooting result. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual NetworkWatchersGetTroubleshootingResultOperation StartGetTroubleshootingResult(string resourceGroupName, string networkWatcherName, QueryTroubleshootingParameters parameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (networkWatcherName == null)
            {
                throw new ArgumentNullException(nameof(networkWatcherName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("NetworkWatchersClient.StartGetTroubleshootingResult");
            scope.Start();
            try
            {
                var originalResponse = RestClient.GetTroubleshootingResult(resourceGroupName, networkWatcherName, parameters, cancellationToken);
                return new NetworkWatchersGetTroubleshootingResultOperation(_clientDiagnostics, _pipeline, RestClient.CreateGetTroubleshootingResultRequest(resourceGroupName, networkWatcherName, parameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Configures flow log and traffic analytics (optional) on a specified resource. </summary>
        /// <param name="resourceGroupName"> The name of the network watcher resource group. </param>
        /// <param name="networkWatcherName"> The name of the network watcher resource. </param>
        /// <param name="parameters"> Parameters that define the configuration of flow log. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async ValueTask<NetworkWatchersSetFlowLogConfigurationOperation> StartSetFlowLogConfigurationAsync(string resourceGroupName, string networkWatcherName, FlowLogInformation parameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (networkWatcherName == null)
            {
                throw new ArgumentNullException(nameof(networkWatcherName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("NetworkWatchersClient.StartSetFlowLogConfiguration");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.SetFlowLogConfigurationAsync(resourceGroupName, networkWatcherName, parameters, cancellationToken).ConfigureAwait(false);
                return new NetworkWatchersSetFlowLogConfigurationOperation(_clientDiagnostics, _pipeline, RestClient.CreateSetFlowLogConfigurationRequest(resourceGroupName, networkWatcherName, parameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Configures flow log and traffic analytics (optional) on a specified resource. </summary>
        /// <param name="resourceGroupName"> The name of the network watcher resource group. </param>
        /// <param name="networkWatcherName"> The name of the network watcher resource. </param>
        /// <param name="parameters"> Parameters that define the configuration of flow log. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual NetworkWatchersSetFlowLogConfigurationOperation StartSetFlowLogConfiguration(string resourceGroupName, string networkWatcherName, FlowLogInformation parameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (networkWatcherName == null)
            {
                throw new ArgumentNullException(nameof(networkWatcherName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("NetworkWatchersClient.StartSetFlowLogConfiguration");
            scope.Start();
            try
            {
                var originalResponse = RestClient.SetFlowLogConfiguration(resourceGroupName, networkWatcherName, parameters, cancellationToken);
                return new NetworkWatchersSetFlowLogConfigurationOperation(_clientDiagnostics, _pipeline, RestClient.CreateSetFlowLogConfigurationRequest(resourceGroupName, networkWatcherName, parameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Queries status of flow log and traffic analytics (optional) on a specified resource. </summary>
        /// <param name="resourceGroupName"> The name of the network watcher resource group. </param>
        /// <param name="networkWatcherName"> The name of the network watcher resource. </param>
        /// <param name="parameters"> Parameters that define a resource to query flow log and traffic analytics (optional) status. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async ValueTask<NetworkWatchersGetFlowLogStatusOperation> StartGetFlowLogStatusAsync(string resourceGroupName, string networkWatcherName, FlowLogStatusParameters parameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (networkWatcherName == null)
            {
                throw new ArgumentNullException(nameof(networkWatcherName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("NetworkWatchersClient.StartGetFlowLogStatus");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.GetFlowLogStatusAsync(resourceGroupName, networkWatcherName, parameters, cancellationToken).ConfigureAwait(false);
                return new NetworkWatchersGetFlowLogStatusOperation(_clientDiagnostics, _pipeline, RestClient.CreateGetFlowLogStatusRequest(resourceGroupName, networkWatcherName, parameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Queries status of flow log and traffic analytics (optional) on a specified resource. </summary>
        /// <param name="resourceGroupName"> The name of the network watcher resource group. </param>
        /// <param name="networkWatcherName"> The name of the network watcher resource. </param>
        /// <param name="parameters"> Parameters that define a resource to query flow log and traffic analytics (optional) status. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual NetworkWatchersGetFlowLogStatusOperation StartGetFlowLogStatus(string resourceGroupName, string networkWatcherName, FlowLogStatusParameters parameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (networkWatcherName == null)
            {
                throw new ArgumentNullException(nameof(networkWatcherName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("NetworkWatchersClient.StartGetFlowLogStatus");
            scope.Start();
            try
            {
                var originalResponse = RestClient.GetFlowLogStatus(resourceGroupName, networkWatcherName, parameters, cancellationToken);
                return new NetworkWatchersGetFlowLogStatusOperation(_clientDiagnostics, _pipeline, RestClient.CreateGetFlowLogStatusRequest(resourceGroupName, networkWatcherName, parameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Verifies the possibility of establishing a direct TCP connection from a virtual machine to a given endpoint including another VM or an arbitrary remote server. </summary>
        /// <param name="resourceGroupName"> The name of the network watcher resource group. </param>
        /// <param name="networkWatcherName"> The name of the network watcher resource. </param>
        /// <param name="parameters"> Parameters that determine how the connectivity check will be performed. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async ValueTask<NetworkWatchersCheckConnectivityOperation> StartCheckConnectivityAsync(string resourceGroupName, string networkWatcherName, ConnectivityParameters parameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (networkWatcherName == null)
            {
                throw new ArgumentNullException(nameof(networkWatcherName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("NetworkWatchersClient.StartCheckConnectivity");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.CheckConnectivityAsync(resourceGroupName, networkWatcherName, parameters, cancellationToken).ConfigureAwait(false);
                return new NetworkWatchersCheckConnectivityOperation(_clientDiagnostics, _pipeline, RestClient.CreateCheckConnectivityRequest(resourceGroupName, networkWatcherName, parameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Verifies the possibility of establishing a direct TCP connection from a virtual machine to a given endpoint including another VM or an arbitrary remote server. </summary>
        /// <param name="resourceGroupName"> The name of the network watcher resource group. </param>
        /// <param name="networkWatcherName"> The name of the network watcher resource. </param>
        /// <param name="parameters"> Parameters that determine how the connectivity check will be performed. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual NetworkWatchersCheckConnectivityOperation StartCheckConnectivity(string resourceGroupName, string networkWatcherName, ConnectivityParameters parameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (networkWatcherName == null)
            {
                throw new ArgumentNullException(nameof(networkWatcherName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("NetworkWatchersClient.StartCheckConnectivity");
            scope.Start();
            try
            {
                var originalResponse = RestClient.CheckConnectivity(resourceGroupName, networkWatcherName, parameters, cancellationToken);
                return new NetworkWatchersCheckConnectivityOperation(_clientDiagnostics, _pipeline, RestClient.CreateCheckConnectivityRequest(resourceGroupName, networkWatcherName, parameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> NOTE: This feature is currently in preview and still being tested for stability. Gets the relative latency score for internet service providers from a specified location to Azure regions. </summary>
        /// <param name="resourceGroupName"> The name of the network watcher resource group. </param>
        /// <param name="networkWatcherName"> The name of the network watcher resource. </param>
        /// <param name="parameters"> Parameters that determine Azure reachability report configuration. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async ValueTask<NetworkWatchersGetAzureReachabilityReportOperation> StartGetAzureReachabilityReportAsync(string resourceGroupName, string networkWatcherName, AzureReachabilityReportParameters parameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (networkWatcherName == null)
            {
                throw new ArgumentNullException(nameof(networkWatcherName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("NetworkWatchersClient.StartGetAzureReachabilityReport");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.GetAzureReachabilityReportAsync(resourceGroupName, networkWatcherName, parameters, cancellationToken).ConfigureAwait(false);
                return new NetworkWatchersGetAzureReachabilityReportOperation(_clientDiagnostics, _pipeline, RestClient.CreateGetAzureReachabilityReportRequest(resourceGroupName, networkWatcherName, parameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> NOTE: This feature is currently in preview and still being tested for stability. Gets the relative latency score for internet service providers from a specified location to Azure regions. </summary>
        /// <param name="resourceGroupName"> The name of the network watcher resource group. </param>
        /// <param name="networkWatcherName"> The name of the network watcher resource. </param>
        /// <param name="parameters"> Parameters that determine Azure reachability report configuration. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual NetworkWatchersGetAzureReachabilityReportOperation StartGetAzureReachabilityReport(string resourceGroupName, string networkWatcherName, AzureReachabilityReportParameters parameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (networkWatcherName == null)
            {
                throw new ArgumentNullException(nameof(networkWatcherName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("NetworkWatchersClient.StartGetAzureReachabilityReport");
            scope.Start();
            try
            {
                var originalResponse = RestClient.GetAzureReachabilityReport(resourceGroupName, networkWatcherName, parameters, cancellationToken);
                return new NetworkWatchersGetAzureReachabilityReportOperation(_clientDiagnostics, _pipeline, RestClient.CreateGetAzureReachabilityReportRequest(resourceGroupName, networkWatcherName, parameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> NOTE: This feature is currently in preview and still being tested for stability. Lists all available internet service providers for a specified Azure region. </summary>
        /// <param name="resourceGroupName"> The name of the network watcher resource group. </param>
        /// <param name="networkWatcherName"> The name of the network watcher resource. </param>
        /// <param name="parameters"> Parameters that scope the list of available providers. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async ValueTask<NetworkWatchersListAvailableProvidersOperation> StartListAvailableProvidersAsync(string resourceGroupName, string networkWatcherName, AvailableProvidersListParameters parameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (networkWatcherName == null)
            {
                throw new ArgumentNullException(nameof(networkWatcherName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("NetworkWatchersClient.StartListAvailableProviders");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.ListAvailableProvidersAsync(resourceGroupName, networkWatcherName, parameters, cancellationToken).ConfigureAwait(false);
                return new NetworkWatchersListAvailableProvidersOperation(_clientDiagnostics, _pipeline, RestClient.CreateListAvailableProvidersRequest(resourceGroupName, networkWatcherName, parameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> NOTE: This feature is currently in preview and still being tested for stability. Lists all available internet service providers for a specified Azure region. </summary>
        /// <param name="resourceGroupName"> The name of the network watcher resource group. </param>
        /// <param name="networkWatcherName"> The name of the network watcher resource. </param>
        /// <param name="parameters"> Parameters that scope the list of available providers. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual NetworkWatchersListAvailableProvidersOperation StartListAvailableProviders(string resourceGroupName, string networkWatcherName, AvailableProvidersListParameters parameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (networkWatcherName == null)
            {
                throw new ArgumentNullException(nameof(networkWatcherName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("NetworkWatchersClient.StartListAvailableProviders");
            scope.Start();
            try
            {
                var originalResponse = RestClient.ListAvailableProviders(resourceGroupName, networkWatcherName, parameters, cancellationToken);
                return new NetworkWatchersListAvailableProvidersOperation(_clientDiagnostics, _pipeline, RestClient.CreateListAvailableProvidersRequest(resourceGroupName, networkWatcherName, parameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets Network Configuration Diagnostic data to help customers understand and debug network behavior. It provides detailed information on what security rules were applied to a specified traffic flow and the result of evaluating these rules. Customers must provide details of a flow like source, destination, protocol, etc. The API returns whether traffic was allowed or denied, the rules evaluated for the specified flow and the evaluation results. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="networkWatcherName"> The name of the network watcher. </param>
        /// <param name="parameters"> Parameters to get network configuration diagnostic. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async ValueTask<NetworkWatchersGetNetworkConfigurationDiagnosticOperation> StartGetNetworkConfigurationDiagnosticAsync(string resourceGroupName, string networkWatcherName, NetworkConfigurationDiagnosticParameters parameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (networkWatcherName == null)
            {
                throw new ArgumentNullException(nameof(networkWatcherName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("NetworkWatchersClient.StartGetNetworkConfigurationDiagnostic");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.GetNetworkConfigurationDiagnosticAsync(resourceGroupName, networkWatcherName, parameters, cancellationToken).ConfigureAwait(false);
                return new NetworkWatchersGetNetworkConfigurationDiagnosticOperation(_clientDiagnostics, _pipeline, RestClient.CreateGetNetworkConfigurationDiagnosticRequest(resourceGroupName, networkWatcherName, parameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets Network Configuration Diagnostic data to help customers understand and debug network behavior. It provides detailed information on what security rules were applied to a specified traffic flow and the result of evaluating these rules. Customers must provide details of a flow like source, destination, protocol, etc. The API returns whether traffic was allowed or denied, the rules evaluated for the specified flow and the evaluation results. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="networkWatcherName"> The name of the network watcher. </param>
        /// <param name="parameters"> Parameters to get network configuration diagnostic. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual NetworkWatchersGetNetworkConfigurationDiagnosticOperation StartGetNetworkConfigurationDiagnostic(string resourceGroupName, string networkWatcherName, NetworkConfigurationDiagnosticParameters parameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (networkWatcherName == null)
            {
                throw new ArgumentNullException(nameof(networkWatcherName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("NetworkWatchersClient.StartGetNetworkConfigurationDiagnostic");
            scope.Start();
            try
            {
                var originalResponse = RestClient.GetNetworkConfigurationDiagnostic(resourceGroupName, networkWatcherName, parameters, cancellationToken);
                return new NetworkWatchersGetNetworkConfigurationDiagnosticOperation(_clientDiagnostics, _pipeline, RestClient.CreateGetNetworkConfigurationDiagnosticRequest(resourceGroupName, networkWatcherName, parameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
