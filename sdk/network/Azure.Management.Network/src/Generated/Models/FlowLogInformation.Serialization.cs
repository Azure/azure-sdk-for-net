// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.Management.Network.Models
{
    public partial class FlowLogInformation : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("targetResourceId");
            writer.WriteStringValue(TargetResourceId);
            if (FlowAnalyticsConfiguration != null)
            {
                writer.WritePropertyName("flowAnalyticsConfiguration");
                writer.WriteObjectValue(FlowAnalyticsConfiguration);
            }
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            writer.WritePropertyName("storageId");
            writer.WriteStringValue(StorageId);
            writer.WritePropertyName("enabled");
            writer.WriteBooleanValue(Enabled);
            if (RetentionPolicy != null)
            {
                writer.WritePropertyName("retentionPolicy");
                writer.WriteObjectValue(RetentionPolicy);
            }
            if (Format != null)
            {
                writer.WritePropertyName("format");
                writer.WriteObjectValue(Format);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static FlowLogInformation DeserializeFlowLogInformation(JsonElement element)
        {
            string targetResourceId = default;
            TrafficAnalyticsProperties flowAnalyticsConfiguration = default;
            string storageId = default;
            bool enabled = default;
            RetentionPolicyParameters retentionPolicy = default;
            FlowLogFormatParameters format = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("targetResourceId"))
                {
                    targetResourceId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("flowAnalyticsConfiguration"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    flowAnalyticsConfiguration = TrafficAnalyticsProperties.DeserializeTrafficAnalyticsProperties(property.Value);
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("storageId"))
                        {
                            storageId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("enabled"))
                        {
                            enabled = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("retentionPolicy"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            retentionPolicy = RetentionPolicyParameters.DeserializeRetentionPolicyParameters(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("format"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            format = FlowLogFormatParameters.DeserializeFlowLogFormatParameters(property0.Value);
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new FlowLogInformation(targetResourceId, flowAnalyticsConfiguration, storageId, enabled, retentionPolicy, format);
        }
    }
}
