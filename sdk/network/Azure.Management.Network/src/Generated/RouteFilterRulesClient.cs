// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.Management.Network.Models;

namespace Azure.Management.Network
{
    /// <summary> The RouteFilterRules service client. </summary>
    public partial class RouteFilterRulesClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal RouteFilterRulesRestClient RestClient { get; }
        /// <summary> Initializes a new instance of RouteFilterRulesClient for mocking. </summary>
        protected RouteFilterRulesClient()
        {
        }

        /// <summary> Initializes a new instance of RouteFilterRulesClient. </summary>
        public RouteFilterRulesClient(string subscriptionId, TokenCredential tokenCredential, NetworkManagementClientOptions options = null) : this(subscriptionId, "https://management.azure.com", tokenCredential, options)
        {
        }

        /// <summary> Initializes a new instance of RouteFilterRulesClient. </summary>
        public RouteFilterRulesClient(string subscriptionId, string host, TokenCredential tokenCredential, NetworkManagementClientOptions options = null)
        {
            options ??= new NetworkManagementClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            _pipeline = ManagementPipelineBuilder.Build(tokenCredential, host, options);
            RestClient = new RouteFilterRulesRestClient(_clientDiagnostics, _pipeline, subscriptionId: subscriptionId, host: host);
        }

        /// <summary> Gets the specified rule from a route filter. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="routeFilterName"> The name of the route filter. </param>
        /// <param name="ruleName"> The name of the rule. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<RouteFilterRule>> GetAsync(string resourceGroupName, string routeFilterName, string ruleName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("RouteFilterRulesClient.Get");
            scope.Start();
            try
            {
                return await RestClient.GetAsync(resourceGroupName, routeFilterName, ruleName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the specified rule from a route filter. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="routeFilterName"> The name of the route filter. </param>
        /// <param name="ruleName"> The name of the rule. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<RouteFilterRule> Get(string resourceGroupName, string routeFilterName, string ruleName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("RouteFilterRulesClient.Get");
            scope.Start();
            try
            {
                return RestClient.Get(resourceGroupName, routeFilterName, ruleName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets all RouteFilterRules in a route filter. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="routeFilterName"> The name of the route filter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<RouteFilterRule> ListByRouteFilterAsync(string resourceGroupName, string routeFilterName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (routeFilterName == null)
            {
                throw new ArgumentNullException(nameof(routeFilterName));
            }

            async Task<Page<RouteFilterRule>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("RouteFilterRulesClient.ListByRouteFilter");
                scope.Start();
                try
                {
                    var response = await RestClient.ListByRouteFilterAsync(resourceGroupName, routeFilterName, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<RouteFilterRule>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("RouteFilterRulesClient.ListByRouteFilter");
                scope.Start();
                try
                {
                    var response = await RestClient.ListByRouteFilterNextPageAsync(nextLink, resourceGroupName, routeFilterName, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets all RouteFilterRules in a route filter. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="routeFilterName"> The name of the route filter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<RouteFilterRule> ListByRouteFilter(string resourceGroupName, string routeFilterName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (routeFilterName == null)
            {
                throw new ArgumentNullException(nameof(routeFilterName));
            }

            Page<RouteFilterRule> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("RouteFilterRulesClient.ListByRouteFilter");
                scope.Start();
                try
                {
                    var response = RestClient.ListByRouteFilter(resourceGroupName, routeFilterName, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<RouteFilterRule> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("RouteFilterRulesClient.ListByRouteFilter");
                scope.Start();
                try
                {
                    var response = RestClient.ListByRouteFilterNextPage(nextLink, resourceGroupName, routeFilterName, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Deletes the specified rule from a route filter. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="routeFilterName"> The name of the route filter. </param>
        /// <param name="ruleName"> The name of the rule. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async ValueTask<RouteFilterRulesDeleteOperation> StartDeleteAsync(string resourceGroupName, string routeFilterName, string ruleName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (routeFilterName == null)
            {
                throw new ArgumentNullException(nameof(routeFilterName));
            }
            if (ruleName == null)
            {
                throw new ArgumentNullException(nameof(ruleName));
            }

            using var scope = _clientDiagnostics.CreateScope("RouteFilterRulesClient.StartDelete");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.DeleteAsync(resourceGroupName, routeFilterName, ruleName, cancellationToken).ConfigureAwait(false);
                return new RouteFilterRulesDeleteOperation(_clientDiagnostics, _pipeline, RestClient.CreateDeleteRequest(resourceGroupName, routeFilterName, ruleName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes the specified rule from a route filter. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="routeFilterName"> The name of the route filter. </param>
        /// <param name="ruleName"> The name of the rule. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual RouteFilterRulesDeleteOperation StartDelete(string resourceGroupName, string routeFilterName, string ruleName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (routeFilterName == null)
            {
                throw new ArgumentNullException(nameof(routeFilterName));
            }
            if (ruleName == null)
            {
                throw new ArgumentNullException(nameof(ruleName));
            }

            using var scope = _clientDiagnostics.CreateScope("RouteFilterRulesClient.StartDelete");
            scope.Start();
            try
            {
                var originalResponse = RestClient.Delete(resourceGroupName, routeFilterName, ruleName, cancellationToken);
                return new RouteFilterRulesDeleteOperation(_clientDiagnostics, _pipeline, RestClient.CreateDeleteRequest(resourceGroupName, routeFilterName, ruleName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates or updates a route in the specified route filter. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="routeFilterName"> The name of the route filter. </param>
        /// <param name="ruleName"> The name of the route filter rule. </param>
        /// <param name="routeFilterRuleParameters"> Parameters supplied to the create or update route filter rule operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async ValueTask<RouteFilterRulesCreateOrUpdateOperation> StartCreateOrUpdateAsync(string resourceGroupName, string routeFilterName, string ruleName, RouteFilterRule routeFilterRuleParameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (routeFilterName == null)
            {
                throw new ArgumentNullException(nameof(routeFilterName));
            }
            if (ruleName == null)
            {
                throw new ArgumentNullException(nameof(ruleName));
            }
            if (routeFilterRuleParameters == null)
            {
                throw new ArgumentNullException(nameof(routeFilterRuleParameters));
            }

            using var scope = _clientDiagnostics.CreateScope("RouteFilterRulesClient.StartCreateOrUpdate");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.CreateOrUpdateAsync(resourceGroupName, routeFilterName, ruleName, routeFilterRuleParameters, cancellationToken).ConfigureAwait(false);
                return new RouteFilterRulesCreateOrUpdateOperation(_clientDiagnostics, _pipeline, RestClient.CreateCreateOrUpdateRequest(resourceGroupName, routeFilterName, ruleName, routeFilterRuleParameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates or updates a route in the specified route filter. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="routeFilterName"> The name of the route filter. </param>
        /// <param name="ruleName"> The name of the route filter rule. </param>
        /// <param name="routeFilterRuleParameters"> Parameters supplied to the create or update route filter rule operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual RouteFilterRulesCreateOrUpdateOperation StartCreateOrUpdate(string resourceGroupName, string routeFilterName, string ruleName, RouteFilterRule routeFilterRuleParameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (routeFilterName == null)
            {
                throw new ArgumentNullException(nameof(routeFilterName));
            }
            if (ruleName == null)
            {
                throw new ArgumentNullException(nameof(ruleName));
            }
            if (routeFilterRuleParameters == null)
            {
                throw new ArgumentNullException(nameof(routeFilterRuleParameters));
            }

            using var scope = _clientDiagnostics.CreateScope("RouteFilterRulesClient.StartCreateOrUpdate");
            scope.Start();
            try
            {
                var originalResponse = RestClient.CreateOrUpdate(resourceGroupName, routeFilterName, ruleName, routeFilterRuleParameters, cancellationToken);
                return new RouteFilterRulesCreateOrUpdateOperation(_clientDiagnostics, _pipeline, RestClient.CreateCreateOrUpdateRequest(resourceGroupName, routeFilterName, ruleName, routeFilterRuleParameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
