// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.Network.Models;
using Azure.ResourceManager.Network.Tests.Helpers;
using NUnit.Framework;
using Azure.Core;
using System;
using Azure.Identity;
using Microsoft.Extensions.Logging;
using System.Reflection;
using System.Threading;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.Network.Tests.Helpers
{
    public static partial class NetworkManagerSecurityAdminConfigurationHelperExtensions
    {
        public static async Task<(SecurityAdminConfigurationResource Configuration, List<AdminRuleGroupResource> Collections, List<BaseAdminRuleResource> Rules)> CreateSecurityAdminConfigurationAsync(
            this NetworkManagerResource networkManager,
            List<ResourceIdentifier> networkGroupIds)
        {
            string securityAdminConfigurationName = "securityAdminConfiguration-1";

            SecurityAdminConfigurationData securityAdminConfigurationData = new()
            {
                Description = "My Test SecurityAdmin Configuration",
            };

            SecurityAdminConfigurationCollection securityAdminConfigurationResources = networkManager.GetSecurityAdminConfigurations();
            ArmOperation<SecurityAdminConfigurationResource> securityAdminConfigurationResource = await securityAdminConfigurationResources.CreateOrUpdateAsync(WaitUntil.Completed, securityAdminConfigurationName, securityAdminConfigurationData);

            // Create a rule collection
            List<AdminRuleGroupResource> collections = new();
            AdminRuleGroupResource securityAdminCollection = await securityAdminConfigurationResource.Value.CreateSecurityAdminRuleCollectionAsync(networkGroupIds);
            collections.Add(securityAdminCollection);

            // Create multiple rules in parallel
            List<Task<BaseAdminRuleResource>> securityAdminRuleTasks = new()
            {
                securityAdminCollection.CreateSecurityAdminRuleAsync("rule1", SecurityConfigurationRuleProtocol.Tcp, "10.1.1.1/32", new List<string> { "22" }, AddressPrefixType.IPPrefix, "20.1.1.1/32", new List<string> { "22" }, AddressPrefixType.IPPrefix, SecurityConfigurationRuleDirection.Inbound),
                securityAdminCollection.CreateSecurityAdminRuleAsync("rule2", SecurityConfigurationRuleProtocol.Any, "*", new List<string> { "0-65535" }, AddressPrefixType.IPPrefix, "*", new List<string> { "0-65535" }, AddressPrefixType.IPPrefix, SecurityConfigurationRuleDirection.Inbound)
            };

            List<BaseAdminRuleResource> securityRules = (await Task.WhenAll(securityAdminRuleTasks)).ToList();

            return (securityAdminConfigurationResource.Value, collections, securityRules);
        }

        public static async Task<AdminRuleGroupResource> CreateSecurityAdminRuleCollectionAsync(
            this SecurityAdminConfigurationResource securityAdminConfiguration,
            List<ResourceIdentifier> networkGroupIds)
        {
            string securityAdminCollectionName = "securityAdminCollection-1";

            AdminRuleGroupData securityAdminRuleCollectionData = new()
            {
                Description = "My Test SecurityAdmin Rule Collection",
                AppliesToGroups =
                {
                    new NetworkManagerSecurityGroupItem(networkGroupIds.First())
                },
            };

            foreach (ResourceIdentifier networkGroupId in networkGroupIds)
            {
                securityAdminRuleCollectionData.AppliesToGroups.Add(new NetworkManagerSecurityGroupItem() { NetworkGroupId = networkGroupId });
            }

            AdminRuleGroupCollection securityAdminRuleCollectionResources = securityAdminConfiguration.GetAdminRuleGroups();
            ArmOperation<AdminRuleGroupResource> securityAdminRuleCollectionResource = await securityAdminRuleCollectionResources.CreateOrUpdateAsync(WaitUntil.Completed, securityAdminCollectionName, securityAdminRuleCollectionData);
            return securityAdminRuleCollectionResource.Value;
        }

        public static async Task<BaseAdminRuleResource> CreateSecurityAdminRuleAsync(
            this AdminRuleGroupResource securityAdminRuleCollection,
            string securityAdminRuleName,
            SecurityConfigurationRuleProtocol protocol,
            string sourceAddress,
            List<string> sourcePorts,
            AddressPrefixType sourceAddressPrefixType,
            string destinationAddress,
            List<string> destinationPorts,
            AddressPrefixType destinationAddressPrefixType,
            SecurityConfigurationRuleDirection direction)
        {
            NetworkAdminRule data = new NetworkAdminRule
            {
                Description = "Sample User Rule",
                Protocol = protocol,
                Sources =
                {
                    new AddressPrefixItem()
                    {
                        AddressPrefix = sourceAddress,
                        AddressPrefixType = sourceAddressPrefixType,
                    }
                },
                Destinations =
                {
                    new AddressPrefixItem()
                    {
                        AddressPrefix = destinationAddress,
                        AddressPrefixType = destinationAddressPrefixType,
                    }
                },
                Direction = direction,
            };

            foreach (var port in sourcePorts)
            {
                data.SourcePortRanges.Add(port);
            }

            foreach (var port in destinationPorts)
            {
                data.DestinationPortRanges.Add(port);
            }

            AdminRuleGroupCollection ruleCollection = securityAdminRuleCollection.GetBaseAdminRules();
            ArmOperation<BaseAdminRuleResource> securityAdminRuleResource = await ruleCollection.CreateOrUpdateAsync(WaitUntil.Completed, securityUserRuleName, data);
            return securityAdminRuleResource.Value;
        }

        public static async Task DeleteSecurityAdminConfigurationAsync(
            this NetworkManagerResource networkManager,
            SecurityAdminConfigurationResource securityAdminConfiguration)
        {
            AdminRuleGroupCollection collections = securityAdminConfiguration.GetAdminRuleGroups();

            // Delete rules in parallel
            List<Task> deleteRuleTasks = new();
            await foreach (AdminRuleGroupCollection collection in collections.GetAllAsync())
            {
                await foreach (BaseAdminRuleResource rule in collection.GetAllAsync())
                {
                    deleteRuleTasks.Add(DeleteAndVerifyResourceAsync(collection.GetAllAsync(), rule.Data.Name));
                }
            }
            await Task.WhenAll(deleteRuleTasks);

            // Delete rule collections in parallel
            List<Task> deleteCollectionTasks = new();
            await foreach (AdminRuleGroupCollection collection in collections.GetAllAsync())
            {
                deleteCollectionTasks.Add(DeleteAndVerifyResourceAsync(collections, collection.Data.Name));
            }
            await Task.WhenAll(deleteCollectionTasks);

            // Delete the configuration
            await DeleteAndVerifyResourceAsync(networkManager.GetSecurityAdminConfigurations(), securityAdminConfiguration.Data.Name);
        }

        public static void ValidateSecurityAdminRule(BaseAdminRuleResource rule1, BaseAdminRuleResource rule2)
        {
            Assert.AreEqual(rule1.Id, rule2.Id);
            Assert.AreEqual(rule1.Data.Name, rule2.Data.Name);
        }

        private static void ValidateSecurityRules(IList<SecurityRuleData> securityRules)
        {
            foreach (SecurityRuleData securityRule in securityRules)
            {
                Assert.IsNotNull(securityRule.Name);
                Assert.IsNotNull(securityRule.Protocol);
                Assert.IsNotNull(securityRule.SourceAddressPrefixes);
                Assert.IsNotNull(securityRule.DestinationAddressPrefixes);
                Assert.IsNotNull(securityRule.SourcePortRanges);
                Assert.IsNotNull(securityRule.DestinationPortRanges);
                Assert.IsNotNull(securityRule.Direction);
            }
        }
    }
}
