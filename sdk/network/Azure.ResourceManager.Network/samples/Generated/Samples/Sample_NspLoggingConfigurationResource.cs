// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.Network.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.Network.Samples
{
    public partial class Sample_NspLoggingConfigurationResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_NspLoggingConfigurationGet()
        {
            // Generated from example definition: specification/network/resource-manager/Microsoft.Network/preview/2024-06-01-preview/examples/NspLoggingConfigurationGet.json
            // this example is just showing the usage of "NspLoggingConfigurations_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this NspLoggingConfigurationResource created on azure
            // for more information of creating NspLoggingConfigurationResource, please refer to the document of NspLoggingConfigurationResource
            string subscriptionId = "subId";
            string resourceGroupName = "rg1";
            string networkSecurityPerimeterName = "nsp1";
            string loggingConfigurationName = "instance";
            ResourceIdentifier nspLoggingConfigurationResourceId = NspLoggingConfigurationResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, networkSecurityPerimeterName, loggingConfigurationName);
            NspLoggingConfigurationResource nspLoggingConfiguration = client.GetNspLoggingConfigurationResource(nspLoggingConfigurationResourceId);

            // invoke the operation
            NspLoggingConfigurationResource result = await nspLoggingConfiguration.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            NspLoggingConfigurationData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_NspLoggingConfigurationDelete()
        {
            // Generated from example definition: specification/network/resource-manager/Microsoft.Network/preview/2024-06-01-preview/examples/NspLoggingConfigurationDelete.json
            // this example is just showing the usage of "NspLoggingConfigurations_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this NspLoggingConfigurationResource created on azure
            // for more information of creating NspLoggingConfigurationResource, please refer to the document of NspLoggingConfigurationResource
            string subscriptionId = "subId";
            string resourceGroupName = "rg1";
            string networkSecurityPerimeterName = "nsp1";
            string loggingConfigurationName = "instance";
            ResourceIdentifier nspLoggingConfigurationResourceId = NspLoggingConfigurationResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, networkSecurityPerimeterName, loggingConfigurationName);
            NspLoggingConfigurationResource nspLoggingConfiguration = client.GetNspLoggingConfigurationResource(nspLoggingConfigurationResourceId);

            // invoke the operation
            await nspLoggingConfiguration.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_NspLoggingConfigurationPut()
        {
            // Generated from example definition: specification/network/resource-manager/Microsoft.Network/preview/2024-06-01-preview/examples/NspLoggingConfigurationPut.json
            // this example is just showing the usage of "NspLoggingConfigurations_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this NspLoggingConfigurationResource created on azure
            // for more information of creating NspLoggingConfigurationResource, please refer to the document of NspLoggingConfigurationResource
            string subscriptionId = "subId";
            string resourceGroupName = "rg1";
            string networkSecurityPerimeterName = "nsp1";
            string loggingConfigurationName = "instance";
            ResourceIdentifier nspLoggingConfigurationResourceId = NspLoggingConfigurationResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, networkSecurityPerimeterName, loggingConfigurationName);
            NspLoggingConfigurationResource nspLoggingConfiguration = client.GetNspLoggingConfigurationResource(nspLoggingConfigurationResourceId);

            // invoke the operation
            NspLoggingConfigurationData data = new NspLoggingConfigurationData
            {
                Properties = new NspLoggingConfigurationProperties
                {
                    EnabledLogCategories = { "NspPublicInboundPerimeterRulesDenied", "NspPublicOutboundPerimeterRulesDenied" },
                },
            };
            ArmOperation<NspLoggingConfigurationResource> lro = await nspLoggingConfiguration.UpdateAsync(WaitUntil.Completed, data);
            NspLoggingConfigurationResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            NspLoggingConfigurationData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
