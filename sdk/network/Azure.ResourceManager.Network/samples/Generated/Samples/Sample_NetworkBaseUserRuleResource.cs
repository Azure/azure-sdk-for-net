// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.Network.Models;

namespace Azure.ResourceManager.Network.Samples
{
    public partial class Sample_NetworkBaseUserRuleResource
    {
        // Gets a default user rule
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetsADefaultUserRule()
        {
            // Generated from example definition: specification/network/resource-manager/Microsoft.Network/preview/2022-02-01-preview/examples/NetworkManagerDefaultUserRuleGet.json
            // this example is just showing the usage of "UserRules_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this NetworkBaseUserRuleResource created on azure
            // for more information of creating NetworkBaseUserRuleResource, please refer to the document of NetworkBaseUserRuleResource
            string subscriptionId = "subId";
            string resourceGroupName = "rg1";
            string networkManagerName = "testNetworkManager";
            string configurationName = "myTestSecurityConfig";
            string ruleCollectionName = "testRuleCollection";
            string ruleName = "SampleDefaultUserRule";
            ResourceIdentifier networkBaseUserRuleResourceId = NetworkBaseUserRuleResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, networkManagerName, configurationName, ruleCollectionName, ruleName);
            NetworkBaseUserRuleResource networkBaseUserRule = client.GetNetworkBaseUserRuleResource(networkBaseUserRuleResourceId);

            // invoke the operation
            NetworkBaseUserRuleResource result = await networkBaseUserRule.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            NetworkBaseUserRuleData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Gets a user rule
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetsAUserRule()
        {
            // Generated from example definition: specification/network/resource-manager/Microsoft.Network/preview/2022-02-01-preview/examples/NetworkManagerUserRuleGet.json
            // this example is just showing the usage of "UserRules_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this NetworkBaseUserRuleResource created on azure
            // for more information of creating NetworkBaseUserRuleResource, please refer to the document of NetworkBaseUserRuleResource
            string subscriptionId = "subId";
            string resourceGroupName = "rg1";
            string networkManagerName = "testNetworkManager";
            string configurationName = "myTestSecurityConfig";
            string ruleCollectionName = "testRuleCollection";
            string ruleName = "SampleUserRule";
            ResourceIdentifier networkBaseUserRuleResourceId = NetworkBaseUserRuleResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, networkManagerName, configurationName, ruleCollectionName, ruleName);
            NetworkBaseUserRuleResource networkBaseUserRule = client.GetNetworkBaseUserRuleResource(networkBaseUserRuleResourceId);

            // invoke the operation
            NetworkBaseUserRuleResource result = await networkBaseUserRule.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            NetworkBaseUserRuleData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Create a default user rule
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_CreateADefaultUserRule()
        {
            // Generated from example definition: specification/network/resource-manager/Microsoft.Network/preview/2022-02-01-preview/examples/NetworkManagerDefaultUserRulePut.json
            // this example is just showing the usage of "UserRules_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this NetworkBaseUserRuleResource created on azure
            // for more information of creating NetworkBaseUserRuleResource, please refer to the document of NetworkBaseUserRuleResource
            string subscriptionId = "subId";
            string resourceGroupName = "rg1";
            string networkManagerName = "testNetworkManager";
            string configurationName = "myTestSecurityConfig";
            string ruleCollectionName = "testRuleCollection";
            string ruleName = "SampleDefaultUserRule";
            ResourceIdentifier networkBaseUserRuleResourceId = NetworkBaseUserRuleResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, networkManagerName, configurationName, ruleCollectionName, ruleName);
            NetworkBaseUserRuleResource networkBaseUserRule = client.GetNetworkBaseUserRuleResource(networkBaseUserRuleResourceId);

            // invoke the operation
            NetworkBaseUserRuleData data = new NetworkSecurityDefaultUserRule()
            {
                Flag = "AllowVnetInbound",
            };
            ArmOperation<NetworkBaseUserRuleResource> lro = await networkBaseUserRule.UpdateAsync(WaitUntil.Completed, data);
            NetworkBaseUserRuleResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            NetworkBaseUserRuleData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Create a user rule
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_CreateAUserRule()
        {
            // Generated from example definition: specification/network/resource-manager/Microsoft.Network/preview/2022-02-01-preview/examples/NetworkManagerUserRulePut.json
            // this example is just showing the usage of "UserRules_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this NetworkBaseUserRuleResource created on azure
            // for more information of creating NetworkBaseUserRuleResource, please refer to the document of NetworkBaseUserRuleResource
            string subscriptionId = "subId";
            string resourceGroupName = "rg1";
            string networkManagerName = "testNetworkManager";
            string configurationName = "myTestSecurityConfig";
            string ruleCollectionName = "testRuleCollection";
            string ruleName = "SampleUserRule";
            ResourceIdentifier networkBaseUserRuleResourceId = NetworkBaseUserRuleResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, networkManagerName, configurationName, ruleCollectionName, ruleName);
            NetworkBaseUserRuleResource networkBaseUserRule = client.GetNetworkBaseUserRuleResource(networkBaseUserRuleResourceId);

            // invoke the operation
            NetworkBaseUserRuleData data = new NetworkSecurityUserRule()
            {
                Description = "Sample User Rule",
                Protocol = SecurityConfigurationRuleProtocol.Tcp,
                Sources =
{
new AddressPrefixItem()
{
AddressPrefix = "*",
AddressPrefixType = AddressPrefixType.IPPrefix,
}
},
                Destinations =
{
new AddressPrefixItem()
{
AddressPrefix = "*",
AddressPrefixType = AddressPrefixType.IPPrefix,
}
},
                SourcePortRanges =
{
"0-65535"
},
                DestinationPortRanges =
{
"22"
},
                Direction = SecurityConfigurationRuleDirection.Inbound,
            };
            ArmOperation<NetworkBaseUserRuleResource> lro = await networkBaseUserRule.UpdateAsync(WaitUntil.Completed, data);
            NetworkBaseUserRuleResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            NetworkBaseUserRuleData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Delete a user rule
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_DeleteAUserRule()
        {
            // Generated from example definition: specification/network/resource-manager/Microsoft.Network/preview/2022-02-01-preview/examples/NetworkManagerUserRuleDelete.json
            // this example is just showing the usage of "UserRules_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this NetworkBaseUserRuleResource created on azure
            // for more information of creating NetworkBaseUserRuleResource, please refer to the document of NetworkBaseUserRuleResource
            string subscriptionId = "subId";
            string resourceGroupName = "rg1";
            string networkManagerName = "testNetworkManager";
            string configurationName = "myTestSecurityConfig";
            string ruleCollectionName = "testRuleCollection";
            string ruleName = "SampleUserRule";
            ResourceIdentifier networkBaseUserRuleResourceId = NetworkBaseUserRuleResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, networkManagerName, configurationName, ruleCollectionName, ruleName);
            NetworkBaseUserRuleResource networkBaseUserRule = client.GetNetworkBaseUserRuleResource(networkBaseUserRuleResourceId);

            // invoke the operation
            await networkBaseUserRule.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }
    }
}
