namespace Azure.ResourceManager.Network
{
    public partial class ApplicationGatewaysBackendHealthOnDemandOperation : Azure.Operation<Azure.ResourceManager.Network.Models.ApplicationGatewayBackendHealthOnDemand>
    {
        protected ApplicationGatewaysBackendHealthOnDemandOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.ApplicationGatewayBackendHealthOnDemand Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.ApplicationGatewayBackendHealthOnDemand>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.ApplicationGatewayBackendHealthOnDemand>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class ApplicationGatewaysBackendHealthOperation : Azure.Operation<Azure.ResourceManager.Network.Models.ApplicationGatewayBackendHealth>
    {
        protected ApplicationGatewaysBackendHealthOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.ApplicationGatewayBackendHealth Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.ApplicationGatewayBackendHealth>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.ApplicationGatewayBackendHealth>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class ApplicationGatewaysCreateOrUpdateOperation : Azure.Operation<Azure.ResourceManager.Network.Models.ApplicationGateway>
    {
        protected ApplicationGatewaysCreateOrUpdateOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.ApplicationGateway Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.ApplicationGateway>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.ApplicationGateway>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class ApplicationGatewaysDeleteOperation : Azure.Operation<Azure.Response>
    {
        protected ApplicationGatewaysDeleteOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class ApplicationGatewaysOperations
    {
        protected ApplicationGatewaysOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.ApplicationGateway> Get(string resourceGroupName, string applicationGatewayName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.ApplicationGateway>> GetAsync(string resourceGroupName, string applicationGatewayName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.ApplicationGatewaySslPredefinedPolicy> GetSslPredefinedPolicy(string predefinedPolicyName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.ApplicationGatewaySslPredefinedPolicy>> GetSslPredefinedPolicyAsync(string predefinedPolicyName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.ApplicationGateway> List(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.ApplicationGateway> ListAll(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.ApplicationGateway> ListAllAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.ApplicationGateway> ListAsync(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Response<System.Collections.Generic.IReadOnlyList<string>> ListAvailableRequestHeaders(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<System.Collections.Generic.IReadOnlyList<string>>> ListAvailableRequestHeadersAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Response<System.Collections.Generic.IReadOnlyList<string>> ListAvailableResponseHeaders(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<System.Collections.Generic.IReadOnlyList<string>>> ListAvailableResponseHeadersAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Response<System.Collections.Generic.IReadOnlyList<string>> ListAvailableServerVariables(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<System.Collections.Generic.IReadOnlyList<string>>> ListAvailableServerVariablesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.ApplicationGatewayAvailableSslOptions> ListAvailableSslOptions(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.ApplicationGatewayAvailableSslOptions>> ListAvailableSslOptionsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.ApplicationGatewaySslPredefinedPolicy> ListAvailableSslPredefinedPolicies(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.ApplicationGatewaySslPredefinedPolicy> ListAvailableSslPredefinedPoliciesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.ApplicationGatewayAvailableWafRuleSetsResult> ListAvailableWafRuleSets(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.ApplicationGatewayAvailableWafRuleSetsResult>> ListAvailableWafRuleSetsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.ApplicationGatewaysBackendHealthOperation StartBackendHealth(string resourceGroupName, string applicationGatewayName, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.ApplicationGatewaysBackendHealthOperation> StartBackendHealthAsync(string resourceGroupName, string applicationGatewayName, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.ApplicationGatewaysBackendHealthOnDemandOperation StartBackendHealthOnDemand(string resourceGroupName, string applicationGatewayName, Azure.ResourceManager.Network.Models.ApplicationGatewayOnDemandProbe probeRequest, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.ApplicationGatewaysBackendHealthOnDemandOperation> StartBackendHealthOnDemandAsync(string resourceGroupName, string applicationGatewayName, Azure.ResourceManager.Network.Models.ApplicationGatewayOnDemandProbe probeRequest, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.ApplicationGatewaysCreateOrUpdateOperation StartCreateOrUpdate(string resourceGroupName, string applicationGatewayName, Azure.ResourceManager.Network.Models.ApplicationGateway parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.ApplicationGatewaysCreateOrUpdateOperation> StartCreateOrUpdateAsync(string resourceGroupName, string applicationGatewayName, Azure.ResourceManager.Network.Models.ApplicationGateway parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.ApplicationGatewaysDeleteOperation StartDelete(string resourceGroupName, string applicationGatewayName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.ApplicationGatewaysDeleteOperation> StartDeleteAsync(string resourceGroupName, string applicationGatewayName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.ApplicationGatewaysStartOperation StartStart(string resourceGroupName, string applicationGatewayName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.ApplicationGatewaysStartOperation> StartStartAsync(string resourceGroupName, string applicationGatewayName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.ApplicationGatewaysStopOperation StartStop(string resourceGroupName, string applicationGatewayName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.ApplicationGatewaysStopOperation> StartStopAsync(string resourceGroupName, string applicationGatewayName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.ApplicationGateway> UpdateTags(string resourceGroupName, string applicationGatewayName, Azure.ResourceManager.Network.Models.TagsObject parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.ApplicationGateway>> UpdateTagsAsync(string resourceGroupName, string applicationGatewayName, Azure.ResourceManager.Network.Models.TagsObject parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class ApplicationGatewaysStartOperation : Azure.Operation<Azure.Response>
    {
        protected ApplicationGatewaysStartOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class ApplicationGatewaysStopOperation : Azure.Operation<Azure.Response>
    {
        protected ApplicationGatewaysStopOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class ApplicationSecurityGroupsCreateOrUpdateOperation : Azure.Operation<Azure.ResourceManager.Network.Models.ApplicationSecurityGroup>
    {
        protected ApplicationSecurityGroupsCreateOrUpdateOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.ApplicationSecurityGroup Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.ApplicationSecurityGroup>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.ApplicationSecurityGroup>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class ApplicationSecurityGroupsDeleteOperation : Azure.Operation<Azure.Response>
    {
        protected ApplicationSecurityGroupsDeleteOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class ApplicationSecurityGroupsOperations
    {
        protected ApplicationSecurityGroupsOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.ApplicationSecurityGroup> Get(string resourceGroupName, string applicationSecurityGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.ApplicationSecurityGroup>> GetAsync(string resourceGroupName, string applicationSecurityGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.ApplicationSecurityGroup> List(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.ApplicationSecurityGroup> ListAll(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.ApplicationSecurityGroup> ListAllAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.ApplicationSecurityGroup> ListAsync(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.ApplicationSecurityGroupsCreateOrUpdateOperation StartCreateOrUpdate(string resourceGroupName, string applicationSecurityGroupName, Azure.ResourceManager.Network.Models.ApplicationSecurityGroup parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.ApplicationSecurityGroupsCreateOrUpdateOperation> StartCreateOrUpdateAsync(string resourceGroupName, string applicationSecurityGroupName, Azure.ResourceManager.Network.Models.ApplicationSecurityGroup parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.ApplicationSecurityGroupsDeleteOperation StartDelete(string resourceGroupName, string applicationSecurityGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.ApplicationSecurityGroupsDeleteOperation> StartDeleteAsync(string resourceGroupName, string applicationSecurityGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.ApplicationSecurityGroup> UpdateTags(string resourceGroupName, string applicationSecurityGroupName, Azure.ResourceManager.Network.Models.TagsObject parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.ApplicationSecurityGroup>> UpdateTagsAsync(string resourceGroupName, string applicationSecurityGroupName, Azure.ResourceManager.Network.Models.TagsObject parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class AvailableDelegationsOperations
    {
        protected AvailableDelegationsOperations() { }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.AvailableDelegation> List(string location, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.AvailableDelegation> ListAsync(string location, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class AvailableEndpointServicesOperations
    {
        protected AvailableEndpointServicesOperations() { }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.EndpointServiceResult> List(string location, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.EndpointServiceResult> ListAsync(string location, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class AvailablePrivateEndpointTypesOperations
    {
        protected AvailablePrivateEndpointTypesOperations() { }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.AvailablePrivateEndpointType> List(string location, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.AvailablePrivateEndpointType> ListAsync(string location, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.AvailablePrivateEndpointType> ListByResourceGroup(string location, string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.AvailablePrivateEndpointType> ListByResourceGroupAsync(string location, string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class AvailableResourceGroupDelegationsOperations
    {
        protected AvailableResourceGroupDelegationsOperations() { }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.AvailableDelegation> List(string location, string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.AvailableDelegation> ListAsync(string location, string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class AvailableServiceAliasesOperations
    {
        protected AvailableServiceAliasesOperations() { }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.AvailableServiceAlias> List(string location, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.AvailableServiceAlias> ListAsync(string location, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.AvailableServiceAlias> ListByResourceGroup(string resourceGroupName, string location, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.AvailableServiceAlias> ListByResourceGroupAsync(string resourceGroupName, string location, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class AzureFirewallFqdnTagsOperations
    {
        protected AzureFirewallFqdnTagsOperations() { }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.AzureFirewallFqdnTag> ListAll(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.AzureFirewallFqdnTag> ListAllAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class AzureFirewallsCreateOrUpdateOperation : Azure.Operation<Azure.ResourceManager.Network.Models.AzureFirewall>
    {
        protected AzureFirewallsCreateOrUpdateOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.AzureFirewall Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.AzureFirewall>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.AzureFirewall>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class AzureFirewallsDeleteOperation : Azure.Operation<Azure.Response>
    {
        protected AzureFirewallsDeleteOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class AzureFirewallsOperations
    {
        protected AzureFirewallsOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.AzureFirewall> Get(string resourceGroupName, string azureFirewallName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.AzureFirewall>> GetAsync(string resourceGroupName, string azureFirewallName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.AzureFirewall> List(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.AzureFirewall> ListAll(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.AzureFirewall> ListAllAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.AzureFirewall> ListAsync(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.AzureFirewallsCreateOrUpdateOperation StartCreateOrUpdate(string resourceGroupName, string azureFirewallName, Azure.ResourceManager.Network.Models.AzureFirewall parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.AzureFirewallsCreateOrUpdateOperation> StartCreateOrUpdateAsync(string resourceGroupName, string azureFirewallName, Azure.ResourceManager.Network.Models.AzureFirewall parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.AzureFirewallsDeleteOperation StartDelete(string resourceGroupName, string azureFirewallName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.AzureFirewallsDeleteOperation> StartDeleteAsync(string resourceGroupName, string azureFirewallName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.AzureFirewallsUpdateTagsOperation StartUpdateTags(string resourceGroupName, string azureFirewallName, Azure.ResourceManager.Network.Models.TagsObject parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.AzureFirewallsUpdateTagsOperation> StartUpdateTagsAsync(string resourceGroupName, string azureFirewallName, Azure.ResourceManager.Network.Models.TagsObject parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class AzureFirewallsUpdateTagsOperation : Azure.Operation<Azure.ResourceManager.Network.Models.AzureFirewall>
    {
        protected AzureFirewallsUpdateTagsOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.AzureFirewall Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.AzureFirewall>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.AzureFirewall>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class BastionHostsCreateOrUpdateOperation : Azure.Operation<Azure.ResourceManager.Network.Models.BastionHost>
    {
        protected BastionHostsCreateOrUpdateOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.BastionHost Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.BastionHost>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.BastionHost>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class BastionHostsDeleteOperation : Azure.Operation<Azure.Response>
    {
        protected BastionHostsDeleteOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class BastionHostsOperations
    {
        protected BastionHostsOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.BastionHost> Get(string resourceGroupName, string bastionHostName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.BastionHost>> GetAsync(string resourceGroupName, string bastionHostName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.BastionHost> List(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.BastionHost> ListAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.BastionHost> ListByResourceGroup(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.BastionHost> ListByResourceGroupAsync(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.BastionHostsCreateOrUpdateOperation StartCreateOrUpdate(string resourceGroupName, string bastionHostName, Azure.ResourceManager.Network.Models.BastionHost parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.BastionHostsCreateOrUpdateOperation> StartCreateOrUpdateAsync(string resourceGroupName, string bastionHostName, Azure.ResourceManager.Network.Models.BastionHost parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.BastionHostsDeleteOperation StartDelete(string resourceGroupName, string bastionHostName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.BastionHostsDeleteOperation> StartDeleteAsync(string resourceGroupName, string bastionHostName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class BgpServiceCommunitiesOperations
    {
        protected BgpServiceCommunitiesOperations() { }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.BgpServiceCommunity> List(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.BgpServiceCommunity> ListAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class ConnectionMonitorsCreateOrUpdateOperation : Azure.Operation<Azure.ResourceManager.Network.Models.ConnectionMonitorResult>
    {
        protected ConnectionMonitorsCreateOrUpdateOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.ConnectionMonitorResult Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.ConnectionMonitorResult>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.ConnectionMonitorResult>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class ConnectionMonitorsDeleteOperation : Azure.Operation<Azure.Response>
    {
        protected ConnectionMonitorsDeleteOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class ConnectionMonitorsOperations
    {
        protected ConnectionMonitorsOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.ConnectionMonitorResult> Get(string resourceGroupName, string networkWatcherName, string connectionMonitorName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.ConnectionMonitorResult>> GetAsync(string resourceGroupName, string networkWatcherName, string connectionMonitorName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.ConnectionMonitorResult> List(string resourceGroupName, string networkWatcherName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.ConnectionMonitorResult> ListAsync(string resourceGroupName, string networkWatcherName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.ConnectionMonitorsCreateOrUpdateOperation StartCreateOrUpdate(string resourceGroupName, string networkWatcherName, string connectionMonitorName, Azure.ResourceManager.Network.Models.ConnectionMonitor parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.ConnectionMonitorsCreateOrUpdateOperation> StartCreateOrUpdateAsync(string resourceGroupName, string networkWatcherName, string connectionMonitorName, Azure.ResourceManager.Network.Models.ConnectionMonitor parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.ConnectionMonitorsDeleteOperation StartDelete(string resourceGroupName, string networkWatcherName, string connectionMonitorName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.ConnectionMonitorsDeleteOperation> StartDeleteAsync(string resourceGroupName, string networkWatcherName, string connectionMonitorName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.ConnectionMonitorsQueryOperation StartQuery(string resourceGroupName, string networkWatcherName, string connectionMonitorName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.ConnectionMonitorsQueryOperation> StartQueryAsync(string resourceGroupName, string networkWatcherName, string connectionMonitorName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.ConnectionMonitorsStartOperation StartStart(string resourceGroupName, string networkWatcherName, string connectionMonitorName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.ConnectionMonitorsStartOperation> StartStartAsync(string resourceGroupName, string networkWatcherName, string connectionMonitorName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.ConnectionMonitorsStopOperation StartStop(string resourceGroupName, string networkWatcherName, string connectionMonitorName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.ConnectionMonitorsStopOperation> StartStopAsync(string resourceGroupName, string networkWatcherName, string connectionMonitorName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.ConnectionMonitorResult> UpdateTags(string resourceGroupName, string networkWatcherName, string connectionMonitorName, Azure.ResourceManager.Network.Models.TagsObject parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.ConnectionMonitorResult>> UpdateTagsAsync(string resourceGroupName, string networkWatcherName, string connectionMonitorName, Azure.ResourceManager.Network.Models.TagsObject parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class ConnectionMonitorsQueryOperation : Azure.Operation<Azure.ResourceManager.Network.Models.ConnectionMonitorQueryResult>
    {
        protected ConnectionMonitorsQueryOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.ConnectionMonitorQueryResult Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.ConnectionMonitorQueryResult>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.ConnectionMonitorQueryResult>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class ConnectionMonitorsStartOperation : Azure.Operation<Azure.Response>
    {
        protected ConnectionMonitorsStartOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class ConnectionMonitorsStopOperation : Azure.Operation<Azure.Response>
    {
        protected ConnectionMonitorsStopOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class DdosCustomPoliciesCreateOrUpdateOperation : Azure.Operation<Azure.ResourceManager.Network.Models.DdosCustomPolicy>
    {
        protected DdosCustomPoliciesCreateOrUpdateOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.DdosCustomPolicy Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.DdosCustomPolicy>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.DdosCustomPolicy>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class DdosCustomPoliciesDeleteOperation : Azure.Operation<Azure.Response>
    {
        protected DdosCustomPoliciesDeleteOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class DdosCustomPoliciesOperations
    {
        protected DdosCustomPoliciesOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.DdosCustomPolicy> Get(string resourceGroupName, string ddosCustomPolicyName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.DdosCustomPolicy>> GetAsync(string resourceGroupName, string ddosCustomPolicyName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.DdosCustomPoliciesCreateOrUpdateOperation StartCreateOrUpdate(string resourceGroupName, string ddosCustomPolicyName, Azure.ResourceManager.Network.Models.DdosCustomPolicy parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.DdosCustomPoliciesCreateOrUpdateOperation> StartCreateOrUpdateAsync(string resourceGroupName, string ddosCustomPolicyName, Azure.ResourceManager.Network.Models.DdosCustomPolicy parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.DdosCustomPoliciesDeleteOperation StartDelete(string resourceGroupName, string ddosCustomPolicyName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.DdosCustomPoliciesDeleteOperation> StartDeleteAsync(string resourceGroupName, string ddosCustomPolicyName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.DdosCustomPolicy> UpdateTags(string resourceGroupName, string ddosCustomPolicyName, Azure.ResourceManager.Network.Models.TagsObject parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.DdosCustomPolicy>> UpdateTagsAsync(string resourceGroupName, string ddosCustomPolicyName, Azure.ResourceManager.Network.Models.TagsObject parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class DdosProtectionPlansCreateOrUpdateOperation : Azure.Operation<Azure.ResourceManager.Network.Models.DdosProtectionPlan>
    {
        protected DdosProtectionPlansCreateOrUpdateOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.DdosProtectionPlan Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.DdosProtectionPlan>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.DdosProtectionPlan>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class DdosProtectionPlansDeleteOperation : Azure.Operation<Azure.Response>
    {
        protected DdosProtectionPlansDeleteOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class DdosProtectionPlansOperations
    {
        protected DdosProtectionPlansOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.DdosProtectionPlan> Get(string resourceGroupName, string ddosProtectionPlanName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.DdosProtectionPlan>> GetAsync(string resourceGroupName, string ddosProtectionPlanName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.DdosProtectionPlan> List(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.DdosProtectionPlan> ListAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.DdosProtectionPlan> ListByResourceGroup(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.DdosProtectionPlan> ListByResourceGroupAsync(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.DdosProtectionPlansCreateOrUpdateOperation StartCreateOrUpdate(string resourceGroupName, string ddosProtectionPlanName, Azure.ResourceManager.Network.Models.DdosProtectionPlan parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.DdosProtectionPlansCreateOrUpdateOperation> StartCreateOrUpdateAsync(string resourceGroupName, string ddosProtectionPlanName, Azure.ResourceManager.Network.Models.DdosProtectionPlan parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.DdosProtectionPlansDeleteOperation StartDelete(string resourceGroupName, string ddosProtectionPlanName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.DdosProtectionPlansDeleteOperation> StartDeleteAsync(string resourceGroupName, string ddosProtectionPlanName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.DdosProtectionPlan> UpdateTags(string resourceGroupName, string ddosProtectionPlanName, Azure.ResourceManager.Network.Models.TagsObject parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.DdosProtectionPlan>> UpdateTagsAsync(string resourceGroupName, string ddosProtectionPlanName, Azure.ResourceManager.Network.Models.TagsObject parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class DefaultSecurityRulesOperations
    {
        protected DefaultSecurityRulesOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.SecurityRule> Get(string resourceGroupName, string networkSecurityGroupName, string defaultSecurityRuleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.SecurityRule>> GetAsync(string resourceGroupName, string networkSecurityGroupName, string defaultSecurityRuleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.SecurityRule> List(string resourceGroupName, string networkSecurityGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.SecurityRule> ListAsync(string resourceGroupName, string networkSecurityGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class ExpressRouteCircuitAuthorizationsCreateOrUpdateOperation : Azure.Operation<Azure.ResourceManager.Network.Models.ExpressRouteCircuitAuthorization>
    {
        protected ExpressRouteCircuitAuthorizationsCreateOrUpdateOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.ExpressRouteCircuitAuthorization Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.ExpressRouteCircuitAuthorization>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.ExpressRouteCircuitAuthorization>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class ExpressRouteCircuitAuthorizationsDeleteOperation : Azure.Operation<Azure.Response>
    {
        protected ExpressRouteCircuitAuthorizationsDeleteOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class ExpressRouteCircuitAuthorizationsOperations
    {
        protected ExpressRouteCircuitAuthorizationsOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.ExpressRouteCircuitAuthorization> Get(string resourceGroupName, string circuitName, string authorizationName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.ExpressRouteCircuitAuthorization>> GetAsync(string resourceGroupName, string circuitName, string authorizationName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.ExpressRouteCircuitAuthorization> List(string resourceGroupName, string circuitName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.ExpressRouteCircuitAuthorization> ListAsync(string resourceGroupName, string circuitName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.ExpressRouteCircuitAuthorizationsCreateOrUpdateOperation StartCreateOrUpdate(string resourceGroupName, string circuitName, string authorizationName, Azure.ResourceManager.Network.Models.ExpressRouteCircuitAuthorization authorizationParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.ExpressRouteCircuitAuthorizationsCreateOrUpdateOperation> StartCreateOrUpdateAsync(string resourceGroupName, string circuitName, string authorizationName, Azure.ResourceManager.Network.Models.ExpressRouteCircuitAuthorization authorizationParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.ExpressRouteCircuitAuthorizationsDeleteOperation StartDelete(string resourceGroupName, string circuitName, string authorizationName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.ExpressRouteCircuitAuthorizationsDeleteOperation> StartDeleteAsync(string resourceGroupName, string circuitName, string authorizationName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class ExpressRouteCircuitConnectionsCreateOrUpdateOperation : Azure.Operation<Azure.ResourceManager.Network.Models.ExpressRouteCircuitConnection>
    {
        protected ExpressRouteCircuitConnectionsCreateOrUpdateOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.ExpressRouteCircuitConnection Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.ExpressRouteCircuitConnection>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.ExpressRouteCircuitConnection>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class ExpressRouteCircuitConnectionsDeleteOperation : Azure.Operation<Azure.Response>
    {
        protected ExpressRouteCircuitConnectionsDeleteOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class ExpressRouteCircuitConnectionsOperations
    {
        protected ExpressRouteCircuitConnectionsOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.ExpressRouteCircuitConnection> Get(string resourceGroupName, string circuitName, string peeringName, string connectionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.ExpressRouteCircuitConnection>> GetAsync(string resourceGroupName, string circuitName, string peeringName, string connectionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.ExpressRouteCircuitConnection> List(string resourceGroupName, string circuitName, string peeringName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.ExpressRouteCircuitConnection> ListAsync(string resourceGroupName, string circuitName, string peeringName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.ExpressRouteCircuitConnectionsCreateOrUpdateOperation StartCreateOrUpdate(string resourceGroupName, string circuitName, string peeringName, string connectionName, Azure.ResourceManager.Network.Models.ExpressRouteCircuitConnection expressRouteCircuitConnectionParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.ExpressRouteCircuitConnectionsCreateOrUpdateOperation> StartCreateOrUpdateAsync(string resourceGroupName, string circuitName, string peeringName, string connectionName, Azure.ResourceManager.Network.Models.ExpressRouteCircuitConnection expressRouteCircuitConnectionParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.ExpressRouteCircuitConnectionsDeleteOperation StartDelete(string resourceGroupName, string circuitName, string peeringName, string connectionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.ExpressRouteCircuitConnectionsDeleteOperation> StartDeleteAsync(string resourceGroupName, string circuitName, string peeringName, string connectionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class ExpressRouteCircuitPeeringsCreateOrUpdateOperation : Azure.Operation<Azure.ResourceManager.Network.Models.ExpressRouteCircuitPeering>
    {
        protected ExpressRouteCircuitPeeringsCreateOrUpdateOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.ExpressRouteCircuitPeering Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.ExpressRouteCircuitPeering>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.ExpressRouteCircuitPeering>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class ExpressRouteCircuitPeeringsDeleteOperation : Azure.Operation<Azure.Response>
    {
        protected ExpressRouteCircuitPeeringsDeleteOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class ExpressRouteCircuitPeeringsOperations
    {
        protected ExpressRouteCircuitPeeringsOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.ExpressRouteCircuitPeering> Get(string resourceGroupName, string circuitName, string peeringName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.ExpressRouteCircuitPeering>> GetAsync(string resourceGroupName, string circuitName, string peeringName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.ExpressRouteCircuitPeering> List(string resourceGroupName, string circuitName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.ExpressRouteCircuitPeering> ListAsync(string resourceGroupName, string circuitName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.ExpressRouteCircuitPeeringsCreateOrUpdateOperation StartCreateOrUpdate(string resourceGroupName, string circuitName, string peeringName, Azure.ResourceManager.Network.Models.ExpressRouteCircuitPeering peeringParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.ExpressRouteCircuitPeeringsCreateOrUpdateOperation> StartCreateOrUpdateAsync(string resourceGroupName, string circuitName, string peeringName, Azure.ResourceManager.Network.Models.ExpressRouteCircuitPeering peeringParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.ExpressRouteCircuitPeeringsDeleteOperation StartDelete(string resourceGroupName, string circuitName, string peeringName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.ExpressRouteCircuitPeeringsDeleteOperation> StartDeleteAsync(string resourceGroupName, string circuitName, string peeringName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class ExpressRouteCircuitsCreateOrUpdateOperation : Azure.Operation<Azure.ResourceManager.Network.Models.ExpressRouteCircuit>
    {
        protected ExpressRouteCircuitsCreateOrUpdateOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.ExpressRouteCircuit Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.ExpressRouteCircuit>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.ExpressRouteCircuit>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class ExpressRouteCircuitsDeleteOperation : Azure.Operation<Azure.Response>
    {
        protected ExpressRouteCircuitsDeleteOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class ExpressRouteCircuitsListArpTableOperation : Azure.Operation<Azure.ResourceManager.Network.Models.ExpressRouteCircuitsArpTableListResult>
    {
        protected ExpressRouteCircuitsListArpTableOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.ExpressRouteCircuitsArpTableListResult Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.ExpressRouteCircuitsArpTableListResult>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.ExpressRouteCircuitsArpTableListResult>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class ExpressRouteCircuitsListRoutesTableOperation : Azure.Operation<Azure.ResourceManager.Network.Models.ExpressRouteCircuitsRoutesTableListResult>
    {
        protected ExpressRouteCircuitsListRoutesTableOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.ExpressRouteCircuitsRoutesTableListResult Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.ExpressRouteCircuitsRoutesTableListResult>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.ExpressRouteCircuitsRoutesTableListResult>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class ExpressRouteCircuitsListRoutesTableSummaryOperation : Azure.Operation<Azure.ResourceManager.Network.Models.ExpressRouteCircuitsRoutesTableSummaryListResult>
    {
        protected ExpressRouteCircuitsListRoutesTableSummaryOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.ExpressRouteCircuitsRoutesTableSummaryListResult Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.ExpressRouteCircuitsRoutesTableSummaryListResult>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.ExpressRouteCircuitsRoutesTableSummaryListResult>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class ExpressRouteCircuitsOperations
    {
        protected ExpressRouteCircuitsOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.ExpressRouteCircuit> Get(string resourceGroupName, string circuitName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.ExpressRouteCircuit>> GetAsync(string resourceGroupName, string circuitName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.ExpressRouteCircuitStats> GetPeeringStats(string resourceGroupName, string circuitName, string peeringName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.ExpressRouteCircuitStats>> GetPeeringStatsAsync(string resourceGroupName, string circuitName, string peeringName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.ExpressRouteCircuitStats> GetStats(string resourceGroupName, string circuitName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.ExpressRouteCircuitStats>> GetStatsAsync(string resourceGroupName, string circuitName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.ExpressRouteCircuit> List(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.ExpressRouteCircuit> ListAll(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.ExpressRouteCircuit> ListAllAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.ExpressRouteCircuit> ListAsync(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.ExpressRouteCircuitsCreateOrUpdateOperation StartCreateOrUpdate(string resourceGroupName, string circuitName, Azure.ResourceManager.Network.Models.ExpressRouteCircuit parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.ExpressRouteCircuitsCreateOrUpdateOperation> StartCreateOrUpdateAsync(string resourceGroupName, string circuitName, Azure.ResourceManager.Network.Models.ExpressRouteCircuit parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.ExpressRouteCircuitsDeleteOperation StartDelete(string resourceGroupName, string circuitName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.ExpressRouteCircuitsDeleteOperation> StartDeleteAsync(string resourceGroupName, string circuitName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.ExpressRouteCircuitsListArpTableOperation StartListArpTable(string resourceGroupName, string circuitName, string peeringName, string devicePath, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.ExpressRouteCircuitsListArpTableOperation> StartListArpTableAsync(string resourceGroupName, string circuitName, string peeringName, string devicePath, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.ExpressRouteCircuitsListRoutesTableOperation StartListRoutesTable(string resourceGroupName, string circuitName, string peeringName, string devicePath, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.ExpressRouteCircuitsListRoutesTableOperation> StartListRoutesTableAsync(string resourceGroupName, string circuitName, string peeringName, string devicePath, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.ExpressRouteCircuitsListRoutesTableSummaryOperation StartListRoutesTableSummary(string resourceGroupName, string circuitName, string peeringName, string devicePath, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.ExpressRouteCircuitsListRoutesTableSummaryOperation> StartListRoutesTableSummaryAsync(string resourceGroupName, string circuitName, string peeringName, string devicePath, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.ExpressRouteCircuit> UpdateTags(string resourceGroupName, string circuitName, Azure.ResourceManager.Network.Models.TagsObject parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.ExpressRouteCircuit>> UpdateTagsAsync(string resourceGroupName, string circuitName, Azure.ResourceManager.Network.Models.TagsObject parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class ExpressRouteConnectionsCreateOrUpdateOperation : Azure.Operation<Azure.ResourceManager.Network.Models.ExpressRouteConnection>
    {
        protected ExpressRouteConnectionsCreateOrUpdateOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.ExpressRouteConnection Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.ExpressRouteConnection>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.ExpressRouteConnection>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class ExpressRouteConnectionsDeleteOperation : Azure.Operation<Azure.Response>
    {
        protected ExpressRouteConnectionsDeleteOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class ExpressRouteConnectionsOperations
    {
        protected ExpressRouteConnectionsOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.ExpressRouteConnection> Get(string resourceGroupName, string expressRouteGatewayName, string connectionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.ExpressRouteConnection>> GetAsync(string resourceGroupName, string expressRouteGatewayName, string connectionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.ExpressRouteConnectionList> List(string resourceGroupName, string expressRouteGatewayName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.ExpressRouteConnectionList>> ListAsync(string resourceGroupName, string expressRouteGatewayName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.ExpressRouteConnectionsCreateOrUpdateOperation StartCreateOrUpdate(string resourceGroupName, string expressRouteGatewayName, string connectionName, Azure.ResourceManager.Network.Models.ExpressRouteConnection putExpressRouteConnectionParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.ExpressRouteConnectionsCreateOrUpdateOperation> StartCreateOrUpdateAsync(string resourceGroupName, string expressRouteGatewayName, string connectionName, Azure.ResourceManager.Network.Models.ExpressRouteConnection putExpressRouteConnectionParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.ExpressRouteConnectionsDeleteOperation StartDelete(string resourceGroupName, string expressRouteGatewayName, string connectionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.ExpressRouteConnectionsDeleteOperation> StartDeleteAsync(string resourceGroupName, string expressRouteGatewayName, string connectionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class ExpressRouteCrossConnectionPeeringsCreateOrUpdateOperation : Azure.Operation<Azure.ResourceManager.Network.Models.ExpressRouteCrossConnectionPeering>
    {
        protected ExpressRouteCrossConnectionPeeringsCreateOrUpdateOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.ExpressRouteCrossConnectionPeering Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.ExpressRouteCrossConnectionPeering>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.ExpressRouteCrossConnectionPeering>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class ExpressRouteCrossConnectionPeeringsDeleteOperation : Azure.Operation<Azure.Response>
    {
        protected ExpressRouteCrossConnectionPeeringsDeleteOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class ExpressRouteCrossConnectionPeeringsOperations
    {
        protected ExpressRouteCrossConnectionPeeringsOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.ExpressRouteCrossConnectionPeering> Get(string resourceGroupName, string crossConnectionName, string peeringName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.ExpressRouteCrossConnectionPeering>> GetAsync(string resourceGroupName, string crossConnectionName, string peeringName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.ExpressRouteCrossConnectionPeering> List(string resourceGroupName, string crossConnectionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.ExpressRouteCrossConnectionPeering> ListAsync(string resourceGroupName, string crossConnectionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.ExpressRouteCrossConnectionPeeringsCreateOrUpdateOperation StartCreateOrUpdate(string resourceGroupName, string crossConnectionName, string peeringName, Azure.ResourceManager.Network.Models.ExpressRouteCrossConnectionPeering peeringParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.ExpressRouteCrossConnectionPeeringsCreateOrUpdateOperation> StartCreateOrUpdateAsync(string resourceGroupName, string crossConnectionName, string peeringName, Azure.ResourceManager.Network.Models.ExpressRouteCrossConnectionPeering peeringParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.ExpressRouteCrossConnectionPeeringsDeleteOperation StartDelete(string resourceGroupName, string crossConnectionName, string peeringName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.ExpressRouteCrossConnectionPeeringsDeleteOperation> StartDeleteAsync(string resourceGroupName, string crossConnectionName, string peeringName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class ExpressRouteCrossConnectionsCreateOrUpdateOperation : Azure.Operation<Azure.ResourceManager.Network.Models.ExpressRouteCrossConnection>
    {
        protected ExpressRouteCrossConnectionsCreateOrUpdateOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.ExpressRouteCrossConnection Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.ExpressRouteCrossConnection>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.ExpressRouteCrossConnection>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class ExpressRouteCrossConnectionsListArpTableOperation : Azure.Operation<Azure.ResourceManager.Network.Models.ExpressRouteCircuitsArpTableListResult>
    {
        protected ExpressRouteCrossConnectionsListArpTableOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.ExpressRouteCircuitsArpTableListResult Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.ExpressRouteCircuitsArpTableListResult>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.ExpressRouteCircuitsArpTableListResult>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class ExpressRouteCrossConnectionsListRoutesTableOperation : Azure.Operation<Azure.ResourceManager.Network.Models.ExpressRouteCircuitsRoutesTableListResult>
    {
        protected ExpressRouteCrossConnectionsListRoutesTableOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.ExpressRouteCircuitsRoutesTableListResult Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.ExpressRouteCircuitsRoutesTableListResult>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.ExpressRouteCircuitsRoutesTableListResult>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class ExpressRouteCrossConnectionsListRoutesTableSummaryOperation : Azure.Operation<Azure.ResourceManager.Network.Models.ExpressRouteCrossConnectionsRoutesTableSummaryListResult>
    {
        protected ExpressRouteCrossConnectionsListRoutesTableSummaryOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.ExpressRouteCrossConnectionsRoutesTableSummaryListResult Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.ExpressRouteCrossConnectionsRoutesTableSummaryListResult>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.ExpressRouteCrossConnectionsRoutesTableSummaryListResult>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class ExpressRouteCrossConnectionsOperations
    {
        protected ExpressRouteCrossConnectionsOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.ExpressRouteCrossConnection> Get(string resourceGroupName, string crossConnectionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.ExpressRouteCrossConnection>> GetAsync(string resourceGroupName, string crossConnectionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.ExpressRouteCrossConnection> List(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.ExpressRouteCrossConnection> ListAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.ExpressRouteCrossConnection> ListByResourceGroup(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.ExpressRouteCrossConnection> ListByResourceGroupAsync(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.ExpressRouteCrossConnectionsCreateOrUpdateOperation StartCreateOrUpdate(string resourceGroupName, string crossConnectionName, Azure.ResourceManager.Network.Models.ExpressRouteCrossConnection parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.ExpressRouteCrossConnectionsCreateOrUpdateOperation> StartCreateOrUpdateAsync(string resourceGroupName, string crossConnectionName, Azure.ResourceManager.Network.Models.ExpressRouteCrossConnection parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.ExpressRouteCrossConnectionsListArpTableOperation StartListArpTable(string resourceGroupName, string crossConnectionName, string peeringName, string devicePath, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.ExpressRouteCrossConnectionsListArpTableOperation> StartListArpTableAsync(string resourceGroupName, string crossConnectionName, string peeringName, string devicePath, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.ExpressRouteCrossConnectionsListRoutesTableOperation StartListRoutesTable(string resourceGroupName, string crossConnectionName, string peeringName, string devicePath, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.ExpressRouteCrossConnectionsListRoutesTableOperation> StartListRoutesTableAsync(string resourceGroupName, string crossConnectionName, string peeringName, string devicePath, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.ExpressRouteCrossConnectionsListRoutesTableSummaryOperation StartListRoutesTableSummary(string resourceGroupName, string crossConnectionName, string peeringName, string devicePath, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.ExpressRouteCrossConnectionsListRoutesTableSummaryOperation> StartListRoutesTableSummaryAsync(string resourceGroupName, string crossConnectionName, string peeringName, string devicePath, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.ExpressRouteCrossConnection> UpdateTags(string resourceGroupName, string crossConnectionName, Azure.ResourceManager.Network.Models.TagsObject crossConnectionParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.ExpressRouteCrossConnection>> UpdateTagsAsync(string resourceGroupName, string crossConnectionName, Azure.ResourceManager.Network.Models.TagsObject crossConnectionParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class ExpressRouteGatewaysCreateOrUpdateOperation : Azure.Operation<Azure.ResourceManager.Network.Models.ExpressRouteGateway>
    {
        protected ExpressRouteGatewaysCreateOrUpdateOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.ExpressRouteGateway Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.ExpressRouteGateway>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.ExpressRouteGateway>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class ExpressRouteGatewaysDeleteOperation : Azure.Operation<Azure.Response>
    {
        protected ExpressRouteGatewaysDeleteOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class ExpressRouteGatewaysOperations
    {
        protected ExpressRouteGatewaysOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.ExpressRouteGateway> Get(string resourceGroupName, string expressRouteGatewayName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.ExpressRouteGateway>> GetAsync(string resourceGroupName, string expressRouteGatewayName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.ExpressRouteGatewayList> ListByResourceGroup(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.ExpressRouteGatewayList>> ListByResourceGroupAsync(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.ExpressRouteGatewayList> ListBySubscription(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.ExpressRouteGatewayList>> ListBySubscriptionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.ExpressRouteGatewaysCreateOrUpdateOperation StartCreateOrUpdate(string resourceGroupName, string expressRouteGatewayName, Azure.ResourceManager.Network.Models.ExpressRouteGateway putExpressRouteGatewayParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.ExpressRouteGatewaysCreateOrUpdateOperation> StartCreateOrUpdateAsync(string resourceGroupName, string expressRouteGatewayName, Azure.ResourceManager.Network.Models.ExpressRouteGateway putExpressRouteGatewayParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.ExpressRouteGatewaysDeleteOperation StartDelete(string resourceGroupName, string expressRouteGatewayName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.ExpressRouteGatewaysDeleteOperation> StartDeleteAsync(string resourceGroupName, string expressRouteGatewayName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class ExpressRouteLinksOperations
    {
        protected ExpressRouteLinksOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.ExpressRouteLink> Get(string resourceGroupName, string expressRoutePortName, string linkName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.ExpressRouteLink>> GetAsync(string resourceGroupName, string expressRoutePortName, string linkName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.ExpressRouteLink> List(string resourceGroupName, string expressRoutePortName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.ExpressRouteLink> ListAsync(string resourceGroupName, string expressRoutePortName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class ExpressRoutePortsCreateOrUpdateOperation : Azure.Operation<Azure.ResourceManager.Network.Models.ExpressRoutePort>
    {
        protected ExpressRoutePortsCreateOrUpdateOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.ExpressRoutePort Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.ExpressRoutePort>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.ExpressRoutePort>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class ExpressRoutePortsDeleteOperation : Azure.Operation<Azure.Response>
    {
        protected ExpressRoutePortsDeleteOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class ExpressRoutePortsLocationsOperations
    {
        protected ExpressRoutePortsLocationsOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.ExpressRoutePortsLocation> Get(string locationName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.ExpressRoutePortsLocation>> GetAsync(string locationName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.ExpressRoutePortsLocation> List(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.ExpressRoutePortsLocation> ListAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class ExpressRoutePortsOperations
    {
        protected ExpressRoutePortsOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.ExpressRoutePort> Get(string resourceGroupName, string expressRoutePortName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.ExpressRoutePort>> GetAsync(string resourceGroupName, string expressRoutePortName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.ExpressRoutePort> List(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.ExpressRoutePort> ListAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.ExpressRoutePort> ListByResourceGroup(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.ExpressRoutePort> ListByResourceGroupAsync(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.ExpressRoutePortsCreateOrUpdateOperation StartCreateOrUpdate(string resourceGroupName, string expressRoutePortName, Azure.ResourceManager.Network.Models.ExpressRoutePort parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.ExpressRoutePortsCreateOrUpdateOperation> StartCreateOrUpdateAsync(string resourceGroupName, string expressRoutePortName, Azure.ResourceManager.Network.Models.ExpressRoutePort parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.ExpressRoutePortsDeleteOperation StartDelete(string resourceGroupName, string expressRoutePortName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.ExpressRoutePortsDeleteOperation> StartDeleteAsync(string resourceGroupName, string expressRoutePortName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.ExpressRoutePort> UpdateTags(string resourceGroupName, string expressRoutePortName, Azure.ResourceManager.Network.Models.TagsObject parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.ExpressRoutePort>> UpdateTagsAsync(string resourceGroupName, string expressRoutePortName, Azure.ResourceManager.Network.Models.TagsObject parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class ExpressRouteServiceProvidersOperations
    {
        protected ExpressRouteServiceProvidersOperations() { }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.ExpressRouteServiceProvider> List(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.ExpressRouteServiceProvider> ListAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class FirewallPoliciesCreateOrUpdateOperation : Azure.Operation<Azure.ResourceManager.Network.Models.FirewallPolicy>
    {
        protected FirewallPoliciesCreateOrUpdateOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.FirewallPolicy Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.FirewallPolicy>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.FirewallPolicy>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class FirewallPoliciesDeleteOperation : Azure.Operation<Azure.Response>
    {
        protected FirewallPoliciesDeleteOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class FirewallPoliciesOperations
    {
        protected FirewallPoliciesOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.FirewallPolicy> Get(string resourceGroupName, string firewallPolicyName, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.FirewallPolicy>> GetAsync(string resourceGroupName, string firewallPolicyName, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.FirewallPolicy> List(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.FirewallPolicy> ListAll(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.FirewallPolicy> ListAllAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.FirewallPolicy> ListAsync(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.FirewallPoliciesCreateOrUpdateOperation StartCreateOrUpdate(string resourceGroupName, string firewallPolicyName, Azure.ResourceManager.Network.Models.FirewallPolicy parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.FirewallPoliciesCreateOrUpdateOperation> StartCreateOrUpdateAsync(string resourceGroupName, string firewallPolicyName, Azure.ResourceManager.Network.Models.FirewallPolicy parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.FirewallPoliciesDeleteOperation StartDelete(string resourceGroupName, string firewallPolicyName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.FirewallPoliciesDeleteOperation> StartDeleteAsync(string resourceGroupName, string firewallPolicyName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class FirewallPolicyRuleGroupsCreateOrUpdateOperation : Azure.Operation<Azure.ResourceManager.Network.Models.FirewallPolicyRuleGroup>
    {
        protected FirewallPolicyRuleGroupsCreateOrUpdateOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.FirewallPolicyRuleGroup Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.FirewallPolicyRuleGroup>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.FirewallPolicyRuleGroup>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class FirewallPolicyRuleGroupsDeleteOperation : Azure.Operation<Azure.Response>
    {
        protected FirewallPolicyRuleGroupsDeleteOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class FirewallPolicyRuleGroupsOperations
    {
        protected FirewallPolicyRuleGroupsOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.FirewallPolicyRuleGroup> Get(string resourceGroupName, string firewallPolicyName, string ruleGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.FirewallPolicyRuleGroup>> GetAsync(string resourceGroupName, string firewallPolicyName, string ruleGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.FirewallPolicyRuleGroup> List(string resourceGroupName, string firewallPolicyName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.FirewallPolicyRuleGroup> ListAsync(string resourceGroupName, string firewallPolicyName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.FirewallPolicyRuleGroupsCreateOrUpdateOperation StartCreateOrUpdate(string resourceGroupName, string firewallPolicyName, string ruleGroupName, Azure.ResourceManager.Network.Models.FirewallPolicyRuleGroup parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.FirewallPolicyRuleGroupsCreateOrUpdateOperation> StartCreateOrUpdateAsync(string resourceGroupName, string firewallPolicyName, string ruleGroupName, Azure.ResourceManager.Network.Models.FirewallPolicyRuleGroup parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.FirewallPolicyRuleGroupsDeleteOperation StartDelete(string resourceGroupName, string firewallPolicyName, string ruleGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.FirewallPolicyRuleGroupsDeleteOperation> StartDeleteAsync(string resourceGroupName, string firewallPolicyName, string ruleGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class FlowLogsCreateOrUpdateOperation : Azure.Operation<Azure.ResourceManager.Network.Models.FlowLog>
    {
        protected FlowLogsCreateOrUpdateOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.FlowLog Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.FlowLog>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.FlowLog>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class FlowLogsDeleteOperation : Azure.Operation<Azure.Response>
    {
        protected FlowLogsDeleteOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class FlowLogsOperations
    {
        protected FlowLogsOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.FlowLog> Get(string resourceGroupName, string networkWatcherName, string flowLogName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.FlowLog>> GetAsync(string resourceGroupName, string networkWatcherName, string flowLogName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.FlowLog> List(string resourceGroupName, string networkWatcherName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.FlowLog> ListAsync(string resourceGroupName, string networkWatcherName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.FlowLogsCreateOrUpdateOperation StartCreateOrUpdate(string resourceGroupName, string networkWatcherName, string flowLogName, Azure.ResourceManager.Network.Models.FlowLog parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.FlowLogsCreateOrUpdateOperation> StartCreateOrUpdateAsync(string resourceGroupName, string networkWatcherName, string flowLogName, Azure.ResourceManager.Network.Models.FlowLog parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.FlowLogsDeleteOperation StartDelete(string resourceGroupName, string networkWatcherName, string flowLogName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.FlowLogsDeleteOperation> StartDeleteAsync(string resourceGroupName, string networkWatcherName, string flowLogName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class HubRouteTablesCreateOrUpdateOperation : Azure.Operation<Azure.ResourceManager.Network.Models.HubRouteTable>
    {
        protected HubRouteTablesCreateOrUpdateOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.HubRouteTable Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.HubRouteTable>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.HubRouteTable>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class HubRouteTablesDeleteOperation : Azure.Operation<Azure.Response>
    {
        protected HubRouteTablesDeleteOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class HubRouteTablesOperations
    {
        protected HubRouteTablesOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.HubRouteTable> Get(string resourceGroupName, string virtualHubName, string routeTableName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.HubRouteTable>> GetAsync(string resourceGroupName, string virtualHubName, string routeTableName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.HubRouteTable> List(string resourceGroupName, string virtualHubName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.HubRouteTable> ListAsync(string resourceGroupName, string virtualHubName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.HubRouteTablesCreateOrUpdateOperation StartCreateOrUpdate(string resourceGroupName, string virtualHubName, string routeTableName, Azure.ResourceManager.Network.Models.HubRouteTable routeTableParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.HubRouteTablesCreateOrUpdateOperation> StartCreateOrUpdateAsync(string resourceGroupName, string virtualHubName, string routeTableName, Azure.ResourceManager.Network.Models.HubRouteTable routeTableParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.HubRouteTablesDeleteOperation StartDelete(string resourceGroupName, string virtualHubName, string routeTableName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.HubRouteTablesDeleteOperation> StartDeleteAsync(string resourceGroupName, string virtualHubName, string routeTableName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class HubVirtualNetworkConnectionsOperations
    {
        protected HubVirtualNetworkConnectionsOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.HubVirtualNetworkConnection> Get(string resourceGroupName, string virtualHubName, string connectionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.HubVirtualNetworkConnection>> GetAsync(string resourceGroupName, string virtualHubName, string connectionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.HubVirtualNetworkConnection> List(string resourceGroupName, string virtualHubName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.HubVirtualNetworkConnection> ListAsync(string resourceGroupName, string virtualHubName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class InboundNatRulesCreateOrUpdateOperation : Azure.Operation<Azure.ResourceManager.Network.Models.InboundNatRule>
    {
        protected InboundNatRulesCreateOrUpdateOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.InboundNatRule Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.InboundNatRule>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.InboundNatRule>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class InboundNatRulesDeleteOperation : Azure.Operation<Azure.Response>
    {
        protected InboundNatRulesDeleteOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class InboundNatRulesOperations
    {
        protected InboundNatRulesOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.InboundNatRule> Get(string resourceGroupName, string loadBalancerName, string inboundNatRuleName, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.InboundNatRule>> GetAsync(string resourceGroupName, string loadBalancerName, string inboundNatRuleName, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.InboundNatRule> List(string resourceGroupName, string loadBalancerName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.InboundNatRule> ListAsync(string resourceGroupName, string loadBalancerName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.InboundNatRulesCreateOrUpdateOperation StartCreateOrUpdate(string resourceGroupName, string loadBalancerName, string inboundNatRuleName, Azure.ResourceManager.Network.Models.InboundNatRule inboundNatRuleParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.InboundNatRulesCreateOrUpdateOperation> StartCreateOrUpdateAsync(string resourceGroupName, string loadBalancerName, string inboundNatRuleName, Azure.ResourceManager.Network.Models.InboundNatRule inboundNatRuleParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.InboundNatRulesDeleteOperation StartDelete(string resourceGroupName, string loadBalancerName, string inboundNatRuleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.InboundNatRulesDeleteOperation> StartDeleteAsync(string resourceGroupName, string loadBalancerName, string inboundNatRuleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class IpAllocationsCreateOrUpdateOperation : Azure.Operation<Azure.ResourceManager.Network.Models.IpAllocation>
    {
        protected IpAllocationsCreateOrUpdateOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.IpAllocation Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.IpAllocation>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.IpAllocation>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class IpAllocationsDeleteOperation : Azure.Operation<Azure.Response>
    {
        protected IpAllocationsDeleteOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class IpAllocationsOperations
    {
        protected IpAllocationsOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.IpAllocation> Get(string resourceGroupName, string ipAllocationName, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.IpAllocation>> GetAsync(string resourceGroupName, string ipAllocationName, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.IpAllocation> List(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.IpAllocation> ListAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.IpAllocation> ListByResourceGroup(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.IpAllocation> ListByResourceGroupAsync(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.IpAllocationsCreateOrUpdateOperation StartCreateOrUpdate(string resourceGroupName, string ipAllocationName, Azure.ResourceManager.Network.Models.IpAllocation parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.IpAllocationsCreateOrUpdateOperation> StartCreateOrUpdateAsync(string resourceGroupName, string ipAllocationName, Azure.ResourceManager.Network.Models.IpAllocation parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.IpAllocationsDeleteOperation StartDelete(string resourceGroupName, string ipAllocationName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.IpAllocationsDeleteOperation> StartDeleteAsync(string resourceGroupName, string ipAllocationName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.IpAllocation> UpdateTags(string resourceGroupName, string ipAllocationName, Azure.ResourceManager.Network.Models.TagsObject parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.IpAllocation>> UpdateTagsAsync(string resourceGroupName, string ipAllocationName, Azure.ResourceManager.Network.Models.TagsObject parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class IpGroupsCreateOrUpdateOperation : Azure.Operation<Azure.ResourceManager.Network.Models.IpGroup>
    {
        protected IpGroupsCreateOrUpdateOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.IpGroup Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.IpGroup>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.IpGroup>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class IpGroupsDeleteOperation : Azure.Operation<Azure.Response>
    {
        protected IpGroupsDeleteOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class IpGroupsOperations
    {
        protected IpGroupsOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.IpGroup> Get(string resourceGroupName, string ipGroupsName, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.IpGroup>> GetAsync(string resourceGroupName, string ipGroupsName, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.IpGroup> List(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.IpGroup> ListAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.IpGroup> ListByResourceGroup(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.IpGroup> ListByResourceGroupAsync(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.IpGroupsCreateOrUpdateOperation StartCreateOrUpdate(string resourceGroupName, string ipGroupsName, Azure.ResourceManager.Network.Models.IpGroup parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.IpGroupsCreateOrUpdateOperation> StartCreateOrUpdateAsync(string resourceGroupName, string ipGroupsName, Azure.ResourceManager.Network.Models.IpGroup parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.IpGroupsDeleteOperation StartDelete(string resourceGroupName, string ipGroupsName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.IpGroupsDeleteOperation> StartDeleteAsync(string resourceGroupName, string ipGroupsName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.IpGroup> UpdateGroups(string resourceGroupName, string ipGroupsName, Azure.ResourceManager.Network.Models.TagsObject parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.IpGroup>> UpdateGroupsAsync(string resourceGroupName, string ipGroupsName, Azure.ResourceManager.Network.Models.TagsObject parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class LoadBalancerBackendAddressPoolsCreateOrUpdateOperation : Azure.Operation<Azure.ResourceManager.Network.Models.BackendAddressPool>
    {
        protected LoadBalancerBackendAddressPoolsCreateOrUpdateOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.BackendAddressPool Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.BackendAddressPool>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.BackendAddressPool>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class LoadBalancerBackendAddressPoolsDeleteOperation : Azure.Operation<Azure.Response>
    {
        protected LoadBalancerBackendAddressPoolsDeleteOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class LoadBalancerBackendAddressPoolsOperations
    {
        protected LoadBalancerBackendAddressPoolsOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.BackendAddressPool> Get(string resourceGroupName, string loadBalancerName, string backendAddressPoolName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.BackendAddressPool>> GetAsync(string resourceGroupName, string loadBalancerName, string backendAddressPoolName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.BackendAddressPool> List(string resourceGroupName, string loadBalancerName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.BackendAddressPool> ListAsync(string resourceGroupName, string loadBalancerName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.LoadBalancerBackendAddressPoolsCreateOrUpdateOperation StartCreateOrUpdate(string resourceGroupName, string loadBalancerName, string backendAddressPoolName, Azure.ResourceManager.Network.Models.BackendAddressPool parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.LoadBalancerBackendAddressPoolsCreateOrUpdateOperation> StartCreateOrUpdateAsync(string resourceGroupName, string loadBalancerName, string backendAddressPoolName, Azure.ResourceManager.Network.Models.BackendAddressPool parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.LoadBalancerBackendAddressPoolsDeleteOperation StartDelete(string resourceGroupName, string loadBalancerName, string backendAddressPoolName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.LoadBalancerBackendAddressPoolsDeleteOperation> StartDeleteAsync(string resourceGroupName, string loadBalancerName, string backendAddressPoolName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class LoadBalancerFrontendIPConfigurationsOperations
    {
        protected LoadBalancerFrontendIPConfigurationsOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.FrontendIPConfiguration> Get(string resourceGroupName, string loadBalancerName, string frontendIPConfigurationName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.FrontendIPConfiguration>> GetAsync(string resourceGroupName, string loadBalancerName, string frontendIPConfigurationName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.FrontendIPConfiguration> List(string resourceGroupName, string loadBalancerName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.FrontendIPConfiguration> ListAsync(string resourceGroupName, string loadBalancerName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class LoadBalancerLoadBalancingRulesOperations
    {
        protected LoadBalancerLoadBalancingRulesOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.LoadBalancingRule> Get(string resourceGroupName, string loadBalancerName, string loadBalancingRuleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.LoadBalancingRule>> GetAsync(string resourceGroupName, string loadBalancerName, string loadBalancingRuleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.LoadBalancingRule> List(string resourceGroupName, string loadBalancerName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.LoadBalancingRule> ListAsync(string resourceGroupName, string loadBalancerName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class LoadBalancerNetworkInterfacesOperations
    {
        protected LoadBalancerNetworkInterfacesOperations() { }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.NetworkInterface> List(string resourceGroupName, string loadBalancerName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.NetworkInterface> ListAsync(string resourceGroupName, string loadBalancerName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class LoadBalancerOutboundRulesOperations
    {
        protected LoadBalancerOutboundRulesOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.OutboundRule> Get(string resourceGroupName, string loadBalancerName, string outboundRuleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.OutboundRule>> GetAsync(string resourceGroupName, string loadBalancerName, string outboundRuleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.OutboundRule> List(string resourceGroupName, string loadBalancerName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.OutboundRule> ListAsync(string resourceGroupName, string loadBalancerName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class LoadBalancerProbesOperations
    {
        protected LoadBalancerProbesOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.Probe> Get(string resourceGroupName, string loadBalancerName, string probeName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.Probe>> GetAsync(string resourceGroupName, string loadBalancerName, string probeName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.Probe> List(string resourceGroupName, string loadBalancerName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.Probe> ListAsync(string resourceGroupName, string loadBalancerName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class LoadBalancersCreateOrUpdateOperation : Azure.Operation<Azure.ResourceManager.Network.Models.LoadBalancer>
    {
        protected LoadBalancersCreateOrUpdateOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.LoadBalancer Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.LoadBalancer>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.LoadBalancer>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class LoadBalancersDeleteOperation : Azure.Operation<Azure.Response>
    {
        protected LoadBalancersDeleteOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class LoadBalancersOperations
    {
        protected LoadBalancersOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.LoadBalancer> Get(string resourceGroupName, string loadBalancerName, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.LoadBalancer>> GetAsync(string resourceGroupName, string loadBalancerName, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.LoadBalancer> List(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.LoadBalancer> ListAll(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.LoadBalancer> ListAllAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.LoadBalancer> ListAsync(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.LoadBalancersCreateOrUpdateOperation StartCreateOrUpdate(string resourceGroupName, string loadBalancerName, Azure.ResourceManager.Network.Models.LoadBalancer parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.LoadBalancersCreateOrUpdateOperation> StartCreateOrUpdateAsync(string resourceGroupName, string loadBalancerName, Azure.ResourceManager.Network.Models.LoadBalancer parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.LoadBalancersDeleteOperation StartDelete(string resourceGroupName, string loadBalancerName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.LoadBalancersDeleteOperation> StartDeleteAsync(string resourceGroupName, string loadBalancerName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.LoadBalancer> UpdateTags(string resourceGroupName, string loadBalancerName, Azure.ResourceManager.Network.Models.TagsObject parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.LoadBalancer>> UpdateTagsAsync(string resourceGroupName, string loadBalancerName, Azure.ResourceManager.Network.Models.TagsObject parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class LocalNetworkGatewaysCreateOrUpdateOperation : Azure.Operation<Azure.ResourceManager.Network.Models.LocalNetworkGateway>
    {
        protected LocalNetworkGatewaysCreateOrUpdateOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.LocalNetworkGateway Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.LocalNetworkGateway>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.LocalNetworkGateway>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class LocalNetworkGatewaysDeleteOperation : Azure.Operation<Azure.Response>
    {
        protected LocalNetworkGatewaysDeleteOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class LocalNetworkGatewaysOperations
    {
        protected LocalNetworkGatewaysOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.LocalNetworkGateway> Get(string resourceGroupName, string localNetworkGatewayName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.LocalNetworkGateway>> GetAsync(string resourceGroupName, string localNetworkGatewayName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.LocalNetworkGateway> List(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.LocalNetworkGateway> ListAsync(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.LocalNetworkGatewaysCreateOrUpdateOperation StartCreateOrUpdate(string resourceGroupName, string localNetworkGatewayName, Azure.ResourceManager.Network.Models.LocalNetworkGateway parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.LocalNetworkGatewaysCreateOrUpdateOperation> StartCreateOrUpdateAsync(string resourceGroupName, string localNetworkGatewayName, Azure.ResourceManager.Network.Models.LocalNetworkGateway parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.LocalNetworkGatewaysDeleteOperation StartDelete(string resourceGroupName, string localNetworkGatewayName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.LocalNetworkGatewaysDeleteOperation> StartDeleteAsync(string resourceGroupName, string localNetworkGatewayName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.LocalNetworkGateway> UpdateTags(string resourceGroupName, string localNetworkGatewayName, Azure.ResourceManager.Network.Models.TagsObject parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.LocalNetworkGateway>> UpdateTagsAsync(string resourceGroupName, string localNetworkGatewayName, Azure.ResourceManager.Network.Models.TagsObject parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class NatGatewaysCreateOrUpdateOperation : Azure.Operation<Azure.ResourceManager.Network.Models.NatGateway>
    {
        protected NatGatewaysCreateOrUpdateOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.NatGateway Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.NatGateway>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.NatGateway>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class NatGatewaysDeleteOperation : Azure.Operation<Azure.Response>
    {
        protected NatGatewaysDeleteOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class NatGatewaysOperations
    {
        protected NatGatewaysOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.NatGateway> Get(string resourceGroupName, string natGatewayName, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.NatGateway>> GetAsync(string resourceGroupName, string natGatewayName, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.NatGateway> List(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.NatGateway> ListAll(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.NatGateway> ListAllAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.NatGateway> ListAsync(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.NatGatewaysCreateOrUpdateOperation StartCreateOrUpdate(string resourceGroupName, string natGatewayName, Azure.ResourceManager.Network.Models.NatGateway parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.NatGatewaysCreateOrUpdateOperation> StartCreateOrUpdateAsync(string resourceGroupName, string natGatewayName, Azure.ResourceManager.Network.Models.NatGateway parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.NatGatewaysDeleteOperation StartDelete(string resourceGroupName, string natGatewayName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.NatGatewaysDeleteOperation> StartDeleteAsync(string resourceGroupName, string natGatewayName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.NatGateway> UpdateTags(string resourceGroupName, string natGatewayName, Azure.ResourceManager.Network.Models.TagsObject parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.NatGateway>> UpdateTagsAsync(string resourceGroupName, string natGatewayName, Azure.ResourceManager.Network.Models.TagsObject parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class NetworkInterfaceIPConfigurationsOperations
    {
        protected NetworkInterfaceIPConfigurationsOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.NetworkInterfaceIPConfiguration> Get(string resourceGroupName, string networkInterfaceName, string ipConfigurationName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.NetworkInterfaceIPConfiguration>> GetAsync(string resourceGroupName, string networkInterfaceName, string ipConfigurationName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.NetworkInterfaceIPConfiguration> List(string resourceGroupName, string networkInterfaceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.NetworkInterfaceIPConfiguration> ListAsync(string resourceGroupName, string networkInterfaceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class NetworkInterfaceLoadBalancersOperations
    {
        protected NetworkInterfaceLoadBalancersOperations() { }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.LoadBalancer> List(string resourceGroupName, string networkInterfaceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.LoadBalancer> ListAsync(string resourceGroupName, string networkInterfaceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class NetworkInterfacesCreateOrUpdateOperation : Azure.Operation<Azure.ResourceManager.Network.Models.NetworkInterface>
    {
        protected NetworkInterfacesCreateOrUpdateOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.NetworkInterface Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.NetworkInterface>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.NetworkInterface>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class NetworkInterfacesDeleteOperation : Azure.Operation<Azure.Response>
    {
        protected NetworkInterfacesDeleteOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class NetworkInterfacesGetEffectiveRouteTableOperation : Azure.Operation<Azure.ResourceManager.Network.Models.EffectiveRouteListResult>
    {
        protected NetworkInterfacesGetEffectiveRouteTableOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.EffectiveRouteListResult Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.EffectiveRouteListResult>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.EffectiveRouteListResult>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class NetworkInterfacesListEffectiveNetworkSecurityGroupsOperation : Azure.Operation<Azure.ResourceManager.Network.Models.EffectiveNetworkSecurityGroupListResult>
    {
        protected NetworkInterfacesListEffectiveNetworkSecurityGroupsOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.EffectiveNetworkSecurityGroupListResult Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.EffectiveNetworkSecurityGroupListResult>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.EffectiveNetworkSecurityGroupListResult>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class NetworkInterfacesOperations
    {
        protected NetworkInterfacesOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.NetworkInterface> Get(string resourceGroupName, string networkInterfaceName, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.NetworkInterface>> GetAsync(string resourceGroupName, string networkInterfaceName, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.NetworkInterfaceIPConfiguration> GetVirtualMachineScaleSetIpConfiguration(string resourceGroupName, string virtualMachineScaleSetName, string virtualmachineIndex, string networkInterfaceName, string ipConfigurationName, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.NetworkInterfaceIPConfiguration>> GetVirtualMachineScaleSetIpConfigurationAsync(string resourceGroupName, string virtualMachineScaleSetName, string virtualmachineIndex, string networkInterfaceName, string ipConfigurationName, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.NetworkInterface> GetVirtualMachineScaleSetNetworkInterface(string resourceGroupName, string virtualMachineScaleSetName, string virtualmachineIndex, string networkInterfaceName, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.NetworkInterface>> GetVirtualMachineScaleSetNetworkInterfaceAsync(string resourceGroupName, string virtualMachineScaleSetName, string virtualmachineIndex, string networkInterfaceName, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.NetworkInterface> List(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.NetworkInterface> ListAll(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.NetworkInterface> ListAllAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.NetworkInterface> ListAsync(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.NetworkInterfaceIPConfiguration> ListVirtualMachineScaleSetIpConfigurations(string resourceGroupName, string virtualMachineScaleSetName, string virtualmachineIndex, string networkInterfaceName, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.NetworkInterfaceIPConfiguration> ListVirtualMachineScaleSetIpConfigurationsAsync(string resourceGroupName, string virtualMachineScaleSetName, string virtualmachineIndex, string networkInterfaceName, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.NetworkInterface> ListVirtualMachineScaleSetNetworkInterfaces(string resourceGroupName, string virtualMachineScaleSetName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.NetworkInterface> ListVirtualMachineScaleSetNetworkInterfacesAsync(string resourceGroupName, string virtualMachineScaleSetName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.NetworkInterface> ListVirtualMachineScaleSetVMNetworkInterfaces(string resourceGroupName, string virtualMachineScaleSetName, string virtualmachineIndex, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.NetworkInterface> ListVirtualMachineScaleSetVMNetworkInterfacesAsync(string resourceGroupName, string virtualMachineScaleSetName, string virtualmachineIndex, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.NetworkInterfacesCreateOrUpdateOperation StartCreateOrUpdate(string resourceGroupName, string networkInterfaceName, Azure.ResourceManager.Network.Models.NetworkInterface parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.NetworkInterfacesCreateOrUpdateOperation> StartCreateOrUpdateAsync(string resourceGroupName, string networkInterfaceName, Azure.ResourceManager.Network.Models.NetworkInterface parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.NetworkInterfacesDeleteOperation StartDelete(string resourceGroupName, string networkInterfaceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.NetworkInterfacesDeleteOperation> StartDeleteAsync(string resourceGroupName, string networkInterfaceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.NetworkInterfacesGetEffectiveRouteTableOperation StartGetEffectiveRouteTable(string resourceGroupName, string networkInterfaceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.NetworkInterfacesGetEffectiveRouteTableOperation> StartGetEffectiveRouteTableAsync(string resourceGroupName, string networkInterfaceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.NetworkInterfacesListEffectiveNetworkSecurityGroupsOperation StartListEffectiveNetworkSecurityGroups(string resourceGroupName, string networkInterfaceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.NetworkInterfacesListEffectiveNetworkSecurityGroupsOperation> StartListEffectiveNetworkSecurityGroupsAsync(string resourceGroupName, string networkInterfaceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.NetworkInterface> UpdateTags(string resourceGroupName, string networkInterfaceName, Azure.ResourceManager.Network.Models.TagsObject parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.NetworkInterface>> UpdateTagsAsync(string resourceGroupName, string networkInterfaceName, Azure.ResourceManager.Network.Models.TagsObject parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class NetworkInterfaceTapConfigurationsCreateOrUpdateOperation : Azure.Operation<Azure.ResourceManager.Network.Models.NetworkInterfaceTapConfiguration>
    {
        protected NetworkInterfaceTapConfigurationsCreateOrUpdateOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.NetworkInterfaceTapConfiguration Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.NetworkInterfaceTapConfiguration>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.NetworkInterfaceTapConfiguration>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class NetworkInterfaceTapConfigurationsDeleteOperation : Azure.Operation<Azure.Response>
    {
        protected NetworkInterfaceTapConfigurationsDeleteOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class NetworkInterfaceTapConfigurationsOperations
    {
        protected NetworkInterfaceTapConfigurationsOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.NetworkInterfaceTapConfiguration> Get(string resourceGroupName, string networkInterfaceName, string tapConfigurationName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.NetworkInterfaceTapConfiguration>> GetAsync(string resourceGroupName, string networkInterfaceName, string tapConfigurationName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.NetworkInterfaceTapConfiguration> List(string resourceGroupName, string networkInterfaceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.NetworkInterfaceTapConfiguration> ListAsync(string resourceGroupName, string networkInterfaceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.NetworkInterfaceTapConfigurationsCreateOrUpdateOperation StartCreateOrUpdate(string resourceGroupName, string networkInterfaceName, string tapConfigurationName, Azure.ResourceManager.Network.Models.NetworkInterfaceTapConfiguration tapConfigurationParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.NetworkInterfaceTapConfigurationsCreateOrUpdateOperation> StartCreateOrUpdateAsync(string resourceGroupName, string networkInterfaceName, string tapConfigurationName, Azure.ResourceManager.Network.Models.NetworkInterfaceTapConfiguration tapConfigurationParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.NetworkInterfaceTapConfigurationsDeleteOperation StartDelete(string resourceGroupName, string networkInterfaceName, string tapConfigurationName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.NetworkInterfaceTapConfigurationsDeleteOperation> StartDeleteAsync(string resourceGroupName, string networkInterfaceName, string tapConfigurationName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class NetworkManagementClient
    {
        protected NetworkManagementClient() { }
        public NetworkManagementClient(string subscriptionId, Azure.Core.TokenCredential tokenCredential, Azure.ResourceManager.Network.NetworkManagementClientOptions options = null) { }
        public NetworkManagementClient(string subscriptionId, System.Uri endpoint, Azure.Core.TokenCredential tokenCredential, Azure.ResourceManager.Network.NetworkManagementClientOptions options = null) { }
        public virtual Azure.ResourceManager.Network.ApplicationGatewaysOperations ApplicationGateways { get { throw null; } }
        public virtual Azure.ResourceManager.Network.ApplicationSecurityGroupsOperations ApplicationSecurityGroups { get { throw null; } }
        public virtual Azure.ResourceManager.Network.AvailableDelegationsOperations AvailableDelegations { get { throw null; } }
        public virtual Azure.ResourceManager.Network.AvailableEndpointServicesOperations AvailableEndpointServices { get { throw null; } }
        public virtual Azure.ResourceManager.Network.AvailablePrivateEndpointTypesOperations AvailablePrivateEndpointTypes { get { throw null; } }
        public virtual Azure.ResourceManager.Network.AvailableResourceGroupDelegationsOperations AvailableResourceGroupDelegations { get { throw null; } }
        public virtual Azure.ResourceManager.Network.AvailableServiceAliasesOperations AvailableServiceAliases { get { throw null; } }
        public virtual Azure.ResourceManager.Network.AzureFirewallFqdnTagsOperations AzureFirewallFqdnTags { get { throw null; } }
        public virtual Azure.ResourceManager.Network.AzureFirewallsOperations AzureFirewalls { get { throw null; } }
        public virtual Azure.ResourceManager.Network.BastionHostsOperations BastionHosts { get { throw null; } }
        public virtual Azure.ResourceManager.Network.BgpServiceCommunitiesOperations BgpServiceCommunities { get { throw null; } }
        public virtual Azure.ResourceManager.Network.ConnectionMonitorsOperations ConnectionMonitors { get { throw null; } }
        public virtual Azure.ResourceManager.Network.DdosCustomPoliciesOperations DdosCustomPolicies { get { throw null; } }
        public virtual Azure.ResourceManager.Network.DdosProtectionPlansOperations DdosProtectionPlans { get { throw null; } }
        public virtual Azure.ResourceManager.Network.DefaultSecurityRulesOperations DefaultSecurityRules { get { throw null; } }
        public virtual Azure.ResourceManager.Network.ExpressRouteCircuitAuthorizationsOperations ExpressRouteCircuitAuthorizations { get { throw null; } }
        public virtual Azure.ResourceManager.Network.ExpressRouteCircuitConnectionsOperations ExpressRouteCircuitConnections { get { throw null; } }
        public virtual Azure.ResourceManager.Network.ExpressRouteCircuitPeeringsOperations ExpressRouteCircuitPeerings { get { throw null; } }
        public virtual Azure.ResourceManager.Network.ExpressRouteCircuitsOperations ExpressRouteCircuits { get { throw null; } }
        public virtual Azure.ResourceManager.Network.ExpressRouteConnectionsOperations ExpressRouteConnections { get { throw null; } }
        public virtual Azure.ResourceManager.Network.ExpressRouteCrossConnectionPeeringsOperations ExpressRouteCrossConnectionPeerings { get { throw null; } }
        public virtual Azure.ResourceManager.Network.ExpressRouteCrossConnectionsOperations ExpressRouteCrossConnections { get { throw null; } }
        public virtual Azure.ResourceManager.Network.ExpressRouteGatewaysOperations ExpressRouteGateways { get { throw null; } }
        public virtual Azure.ResourceManager.Network.ExpressRouteLinksOperations ExpressRouteLinks { get { throw null; } }
        public virtual Azure.ResourceManager.Network.ExpressRoutePortsOperations ExpressRoutePorts { get { throw null; } }
        public virtual Azure.ResourceManager.Network.ExpressRoutePortsLocationsOperations ExpressRoutePortsLocations { get { throw null; } }
        public virtual Azure.ResourceManager.Network.ExpressRouteServiceProvidersOperations ExpressRouteServiceProviders { get { throw null; } }
        public virtual Azure.ResourceManager.Network.FirewallPoliciesOperations FirewallPolicies { get { throw null; } }
        public virtual Azure.ResourceManager.Network.FirewallPolicyRuleGroupsOperations FirewallPolicyRuleGroups { get { throw null; } }
        public virtual Azure.ResourceManager.Network.FlowLogsOperations FlowLogs { get { throw null; } }
        public virtual Azure.ResourceManager.Network.HubRouteTablesOperations HubRouteTables { get { throw null; } }
        public virtual Azure.ResourceManager.Network.HubVirtualNetworkConnectionsOperations HubVirtualNetworkConnections { get { throw null; } }
        public virtual Azure.ResourceManager.Network.InboundNatRulesOperations InboundNatRules { get { throw null; } }
        public virtual Azure.ResourceManager.Network.IpAllocationsOperations IpAllocations { get { throw null; } }
        public virtual Azure.ResourceManager.Network.IpGroupsOperations IpGroups { get { throw null; } }
        public virtual Azure.ResourceManager.Network.LoadBalancerBackendAddressPoolsOperations LoadBalancerBackendAddressPools { get { throw null; } }
        public virtual Azure.ResourceManager.Network.LoadBalancerFrontendIPConfigurationsOperations LoadBalancerFrontendIPConfigurations { get { throw null; } }
        public virtual Azure.ResourceManager.Network.LoadBalancerLoadBalancingRulesOperations LoadBalancerLoadBalancingRules { get { throw null; } }
        public virtual Azure.ResourceManager.Network.LoadBalancerNetworkInterfacesOperations LoadBalancerNetworkInterfaces { get { throw null; } }
        public virtual Azure.ResourceManager.Network.LoadBalancerOutboundRulesOperations LoadBalancerOutboundRules { get { throw null; } }
        public virtual Azure.ResourceManager.Network.LoadBalancerProbesOperations LoadBalancerProbes { get { throw null; } }
        public virtual Azure.ResourceManager.Network.LoadBalancersOperations LoadBalancers { get { throw null; } }
        public virtual Azure.ResourceManager.Network.LocalNetworkGatewaysOperations LocalNetworkGateways { get { throw null; } }
        public virtual Azure.ResourceManager.Network.NatGatewaysOperations NatGateways { get { throw null; } }
        public virtual Azure.ResourceManager.Network.NetworkInterfaceIPConfigurationsOperations NetworkInterfaceIPConfigurations { get { throw null; } }
        public virtual Azure.ResourceManager.Network.NetworkInterfaceLoadBalancersOperations NetworkInterfaceLoadBalancers { get { throw null; } }
        public virtual Azure.ResourceManager.Network.NetworkInterfacesOperations NetworkInterfaces { get { throw null; } }
        public virtual Azure.ResourceManager.Network.NetworkInterfaceTapConfigurationsOperations NetworkInterfaceTapConfigurations { get { throw null; } }
        public virtual Azure.ResourceManager.Network.NetworkManagementOperations NetworkManagement { get { throw null; } }
        public virtual Azure.ResourceManager.Network.NetworkProfilesOperations NetworkProfiles { get { throw null; } }
        public virtual Azure.ResourceManager.Network.NetworkSecurityGroupsOperations NetworkSecurityGroups { get { throw null; } }
        public virtual Azure.ResourceManager.Network.NetworkVirtualAppliancesOperations NetworkVirtualAppliances { get { throw null; } }
        public virtual Azure.ResourceManager.Network.NetworkWatchersOperations NetworkWatchers { get { throw null; } }
        public virtual Azure.ResourceManager.Network.Operations Operations { get { throw null; } }
        public virtual Azure.ResourceManager.Network.P2SVpnGatewaysOperations P2SVpnGateways { get { throw null; } }
        public virtual Azure.ResourceManager.Network.PacketCapturesOperations PacketCaptures { get { throw null; } }
        public virtual Azure.ResourceManager.Network.PeerExpressRouteCircuitConnectionsOperations PeerExpressRouteCircuitConnections { get { throw null; } }
        public virtual Azure.ResourceManager.Network.PrivateDnsZoneGroupsOperations PrivateDnsZoneGroups { get { throw null; } }
        public virtual Azure.ResourceManager.Network.PrivateEndpointsOperations PrivateEndpoints { get { throw null; } }
        public virtual Azure.ResourceManager.Network.PrivateLinkServicesOperations PrivateLinkServices { get { throw null; } }
        public virtual Azure.ResourceManager.Network.PublicIPAddressesOperations PublicIPAddresses { get { throw null; } }
        public virtual Azure.ResourceManager.Network.PublicIPPrefixesOperations PublicIPPrefixes { get { throw null; } }
        public virtual Azure.ResourceManager.Network.ResourceNavigationLinksOperations ResourceNavigationLinks { get { throw null; } }
        public virtual Azure.ResourceManager.Network.RouteFilterRulesOperations RouteFilterRules { get { throw null; } }
        public virtual Azure.ResourceManager.Network.RouteFiltersOperations RouteFilters { get { throw null; } }
        public virtual Azure.ResourceManager.Network.RoutesOperations Routes { get { throw null; } }
        public virtual Azure.ResourceManager.Network.RouteTablesOperations RouteTables { get { throw null; } }
        public virtual Azure.ResourceManager.Network.SecurityPartnerProvidersOperations SecurityPartnerProviders { get { throw null; } }
        public virtual Azure.ResourceManager.Network.SecurityRulesOperations SecurityRules { get { throw null; } }
        public virtual Azure.ResourceManager.Network.ServiceAssociationLinksOperations ServiceAssociationLinks { get { throw null; } }
        public virtual Azure.ResourceManager.Network.ServiceEndpointPoliciesOperations ServiceEndpointPolicies { get { throw null; } }
        public virtual Azure.ResourceManager.Network.ServiceEndpointPolicyDefinitionsOperations ServiceEndpointPolicyDefinitions { get { throw null; } }
        public virtual Azure.ResourceManager.Network.ServiceTagsOperations ServiceTags { get { throw null; } }
        public virtual Azure.ResourceManager.Network.SubnetsOperations Subnets { get { throw null; } }
        public virtual Azure.ResourceManager.Network.UsagesOperations Usages { get { throw null; } }
        public virtual Azure.ResourceManager.Network.VirtualHubRouteTableV2SOperations VirtualHubRouteTableV2S { get { throw null; } }
        public virtual Azure.ResourceManager.Network.VirtualHubsOperations VirtualHubs { get { throw null; } }
        public virtual Azure.ResourceManager.Network.VirtualNetworkGatewayConnectionsOperations VirtualNetworkGatewayConnections { get { throw null; } }
        public virtual Azure.ResourceManager.Network.VirtualNetworkGatewaysOperations VirtualNetworkGateways { get { throw null; } }
        public virtual Azure.ResourceManager.Network.VirtualNetworkPeeringsOperations VirtualNetworkPeerings { get { throw null; } }
        public virtual Azure.ResourceManager.Network.VirtualNetworksOperations VirtualNetworks { get { throw null; } }
        public virtual Azure.ResourceManager.Network.VirtualNetworkTapsOperations VirtualNetworkTaps { get { throw null; } }
        public virtual Azure.ResourceManager.Network.VirtualRouterPeeringsOperations VirtualRouterPeerings { get { throw null; } }
        public virtual Azure.ResourceManager.Network.VirtualRoutersOperations VirtualRouters { get { throw null; } }
        public virtual Azure.ResourceManager.Network.VirtualWansOperations VirtualWans { get { throw null; } }
        public virtual Azure.ResourceManager.Network.VpnConnectionsOperations VpnConnections { get { throw null; } }
        public virtual Azure.ResourceManager.Network.VpnGatewaysOperations VpnGateways { get { throw null; } }
        public virtual Azure.ResourceManager.Network.VpnLinkConnectionsOperations VpnLinkConnections { get { throw null; } }
        public virtual Azure.ResourceManager.Network.VpnServerConfigurationsOperations VpnServerConfigurations { get { throw null; } }
        public virtual Azure.ResourceManager.Network.VpnServerConfigurationsAssociatedWithVirtualWanOperations VpnServerConfigurationsAssociatedWithVirtualWan { get { throw null; } }
        public virtual Azure.ResourceManager.Network.VpnSiteLinkConnectionsOperations VpnSiteLinkConnections { get { throw null; } }
        public virtual Azure.ResourceManager.Network.VpnSiteLinksOperations VpnSiteLinks { get { throw null; } }
        public virtual Azure.ResourceManager.Network.VpnSitesOperations VpnSites { get { throw null; } }
        public virtual Azure.ResourceManager.Network.VpnSitesConfigurationOperations VpnSitesConfiguration { get { throw null; } }
        public virtual Azure.ResourceManager.Network.WebApplicationFirewallPoliciesOperations WebApplicationFirewallPolicies { get { throw null; } }
    }
    public partial class NetworkManagementClientOptions : Azure.Core.ClientOptions
    {
        public NetworkManagementClientOptions() { }
    }
    public partial class NetworkManagementDeleteBastionShareableLinkOperation : Azure.Operation<Azure.Response>
    {
        protected NetworkManagementDeleteBastionShareableLinkOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class NetworkManagementGeneratevirtualwanvpnserverconfigurationvpnprofileOperation : Azure.Operation<Azure.ResourceManager.Network.Models.VpnProfileResponse>
    {
        protected NetworkManagementGeneratevirtualwanvpnserverconfigurationvpnprofileOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.VpnProfileResponse Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.VpnProfileResponse>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.VpnProfileResponse>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class NetworkManagementGetActiveSessionsOperation : Azure.Operation<Azure.AsyncPageable<Azure.ResourceManager.Network.Models.BastionActiveSession>>
    {
        protected NetworkManagementGetActiveSessionsOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.AsyncPageable<Azure.ResourceManager.Network.Models.BastionActiveSession> Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.AsyncPageable<Azure.ResourceManager.Network.Models.BastionActiveSession>>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.AsyncPageable<Azure.ResourceManager.Network.Models.BastionActiveSession>>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class NetworkManagementOperations
    {
        protected NetworkManagementOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.DnsNameAvailabilityResult> CheckDnsNameAvailability(string location, string domainNameLabel, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.DnsNameAvailabilityResult>> CheckDnsNameAvailabilityAsync(string location, string domainNameLabel, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.BastionSessionState> DisconnectActiveSessions(string resourceGroupName, string bastionHostName, Azure.ResourceManager.Network.Models.SessionIds sessionIds, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.BastionSessionState> DisconnectActiveSessionsAsync(string resourceGroupName, string bastionHostName, Azure.ResourceManager.Network.Models.SessionIds sessionIds, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.BastionShareableLink> GetBastionShareableLink(string resourceGroupName, string bastionHostName, Azure.ResourceManager.Network.Models.BastionShareableLinkListRequest bslRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.BastionShareableLink> GetBastionShareableLinkAsync(string resourceGroupName, string bastionHostName, Azure.ResourceManager.Network.Models.BastionShareableLinkListRequest bslRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.NetworkManagementDeleteBastionShareableLinkOperation StartDeleteBastionShareableLink(string resourceGroupName, string bastionHostName, Azure.ResourceManager.Network.Models.BastionShareableLinkListRequest bslRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.NetworkManagementDeleteBastionShareableLinkOperation> StartDeleteBastionShareableLinkAsync(string resourceGroupName, string bastionHostName, Azure.ResourceManager.Network.Models.BastionShareableLinkListRequest bslRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.NetworkManagementGeneratevirtualwanvpnserverconfigurationvpnprofileOperation StartGeneratevirtualwanvpnserverconfigurationvpnprofile(string resourceGroupName, string virtualWANName, Azure.ResourceManager.Network.Models.VirtualWanVpnProfileParameters vpnClientParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.NetworkManagementGeneratevirtualwanvpnserverconfigurationvpnprofileOperation> StartGeneratevirtualwanvpnserverconfigurationvpnprofileAsync(string resourceGroupName, string virtualWANName, Azure.ResourceManager.Network.Models.VirtualWanVpnProfileParameters vpnClientParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.NetworkManagementGetActiveSessionsOperation StartGetActiveSessions(string resourceGroupName, string bastionHostName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.NetworkManagementGetActiveSessionsOperation> StartGetActiveSessionsAsync(string resourceGroupName, string bastionHostName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.NetworkManagementPutBastionShareableLinkOperation StartPutBastionShareableLink(string resourceGroupName, string bastionHostName, Azure.ResourceManager.Network.Models.BastionShareableLinkListRequest bslRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.NetworkManagementPutBastionShareableLinkOperation> StartPutBastionShareableLinkAsync(string resourceGroupName, string bastionHostName, Azure.ResourceManager.Network.Models.BastionShareableLinkListRequest bslRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.VirtualWanSecurityProviders> SupportedSecurityProviders(string resourceGroupName, string virtualWANName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.VirtualWanSecurityProviders>> SupportedSecurityProvidersAsync(string resourceGroupName, string virtualWANName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class NetworkManagementPutBastionShareableLinkOperation : Azure.Operation<Azure.AsyncPageable<Azure.ResourceManager.Network.Models.BastionShareableLink>>
    {
        protected NetworkManagementPutBastionShareableLinkOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.AsyncPageable<Azure.ResourceManager.Network.Models.BastionShareableLink> Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.AsyncPageable<Azure.ResourceManager.Network.Models.BastionShareableLink>>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.AsyncPageable<Azure.ResourceManager.Network.Models.BastionShareableLink>>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class NetworkProfilesDeleteOperation : Azure.Operation<Azure.Response>
    {
        protected NetworkProfilesDeleteOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class NetworkProfilesOperations
    {
        protected NetworkProfilesOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.NetworkProfile> CreateOrUpdate(string resourceGroupName, string networkProfileName, Azure.ResourceManager.Network.Models.NetworkProfile parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.NetworkProfile>> CreateOrUpdateAsync(string resourceGroupName, string networkProfileName, Azure.ResourceManager.Network.Models.NetworkProfile parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.NetworkProfile> Get(string resourceGroupName, string networkProfileName, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.NetworkProfile>> GetAsync(string resourceGroupName, string networkProfileName, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.NetworkProfile> List(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.NetworkProfile> ListAll(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.NetworkProfile> ListAllAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.NetworkProfile> ListAsync(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.NetworkProfilesDeleteOperation StartDelete(string resourceGroupName, string networkProfileName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.NetworkProfilesDeleteOperation> StartDeleteAsync(string resourceGroupName, string networkProfileName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.NetworkProfile> UpdateTags(string resourceGroupName, string networkProfileName, Azure.ResourceManager.Network.Models.TagsObject parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.NetworkProfile>> UpdateTagsAsync(string resourceGroupName, string networkProfileName, Azure.ResourceManager.Network.Models.TagsObject parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class NetworkSecurityGroupsCreateOrUpdateOperation : Azure.Operation<Azure.ResourceManager.Network.Models.NetworkSecurityGroup>
    {
        protected NetworkSecurityGroupsCreateOrUpdateOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.NetworkSecurityGroup Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.NetworkSecurityGroup>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.NetworkSecurityGroup>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class NetworkSecurityGroupsDeleteOperation : Azure.Operation<Azure.Response>
    {
        protected NetworkSecurityGroupsDeleteOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class NetworkSecurityGroupsOperations
    {
        protected NetworkSecurityGroupsOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.NetworkSecurityGroup> Get(string resourceGroupName, string networkSecurityGroupName, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.NetworkSecurityGroup>> GetAsync(string resourceGroupName, string networkSecurityGroupName, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.NetworkSecurityGroup> List(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.NetworkSecurityGroup> ListAll(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.NetworkSecurityGroup> ListAllAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.NetworkSecurityGroup> ListAsync(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.NetworkSecurityGroupsCreateOrUpdateOperation StartCreateOrUpdate(string resourceGroupName, string networkSecurityGroupName, Azure.ResourceManager.Network.Models.NetworkSecurityGroup parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.NetworkSecurityGroupsCreateOrUpdateOperation> StartCreateOrUpdateAsync(string resourceGroupName, string networkSecurityGroupName, Azure.ResourceManager.Network.Models.NetworkSecurityGroup parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.NetworkSecurityGroupsDeleteOperation StartDelete(string resourceGroupName, string networkSecurityGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.NetworkSecurityGroupsDeleteOperation> StartDeleteAsync(string resourceGroupName, string networkSecurityGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.NetworkSecurityGroup> UpdateTags(string resourceGroupName, string networkSecurityGroupName, Azure.ResourceManager.Network.Models.TagsObject parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.NetworkSecurityGroup>> UpdateTagsAsync(string resourceGroupName, string networkSecurityGroupName, Azure.ResourceManager.Network.Models.TagsObject parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class NetworkVirtualAppliancesCreateOrUpdateOperation : Azure.Operation<Azure.ResourceManager.Network.Models.NetworkVirtualAppliance>
    {
        protected NetworkVirtualAppliancesCreateOrUpdateOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.NetworkVirtualAppliance Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.NetworkVirtualAppliance>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.NetworkVirtualAppliance>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class NetworkVirtualAppliancesDeleteOperation : Azure.Operation<Azure.Response>
    {
        protected NetworkVirtualAppliancesDeleteOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class NetworkVirtualAppliancesOperations
    {
        protected NetworkVirtualAppliancesOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.NetworkVirtualAppliance> Get(string resourceGroupName, string networkVirtualApplianceName, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.NetworkVirtualAppliance>> GetAsync(string resourceGroupName, string networkVirtualApplianceName, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.NetworkVirtualAppliance> List(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.NetworkVirtualAppliance> ListAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.NetworkVirtualAppliance> ListByResourceGroup(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.NetworkVirtualAppliance> ListByResourceGroupAsync(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.NetworkVirtualAppliancesCreateOrUpdateOperation StartCreateOrUpdate(string resourceGroupName, string networkVirtualApplianceName, Azure.ResourceManager.Network.Models.NetworkVirtualAppliance parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.NetworkVirtualAppliancesCreateOrUpdateOperation> StartCreateOrUpdateAsync(string resourceGroupName, string networkVirtualApplianceName, Azure.ResourceManager.Network.Models.NetworkVirtualAppliance parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.NetworkVirtualAppliancesDeleteOperation StartDelete(string resourceGroupName, string networkVirtualApplianceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.NetworkVirtualAppliancesDeleteOperation> StartDeleteAsync(string resourceGroupName, string networkVirtualApplianceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.NetworkVirtualAppliance> UpdateTags(string resourceGroupName, string networkVirtualApplianceName, Azure.ResourceManager.Network.Models.TagsObject parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.NetworkVirtualAppliance>> UpdateTagsAsync(string resourceGroupName, string networkVirtualApplianceName, Azure.ResourceManager.Network.Models.TagsObject parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class NetworkWatchersCheckConnectivityOperation : Azure.Operation<Azure.ResourceManager.Network.Models.ConnectivityInformation>
    {
        protected NetworkWatchersCheckConnectivityOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.ConnectivityInformation Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.ConnectivityInformation>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.ConnectivityInformation>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class NetworkWatchersDeleteOperation : Azure.Operation<Azure.Response>
    {
        protected NetworkWatchersDeleteOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class NetworkWatchersGetAzureReachabilityReportOperation : Azure.Operation<Azure.ResourceManager.Network.Models.AzureReachabilityReport>
    {
        protected NetworkWatchersGetAzureReachabilityReportOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.AzureReachabilityReport Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.AzureReachabilityReport>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.AzureReachabilityReport>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class NetworkWatchersGetFlowLogStatusOperation : Azure.Operation<Azure.ResourceManager.Network.Models.FlowLogInformation>
    {
        protected NetworkWatchersGetFlowLogStatusOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.FlowLogInformation Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.FlowLogInformation>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.FlowLogInformation>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class NetworkWatchersGetNetworkConfigurationDiagnosticOperation : Azure.Operation<Azure.ResourceManager.Network.Models.NetworkConfigurationDiagnosticResponse>
    {
        protected NetworkWatchersGetNetworkConfigurationDiagnosticOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.NetworkConfigurationDiagnosticResponse Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.NetworkConfigurationDiagnosticResponse>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.NetworkConfigurationDiagnosticResponse>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class NetworkWatchersGetNextHopOperation : Azure.Operation<Azure.ResourceManager.Network.Models.NextHopResult>
    {
        protected NetworkWatchersGetNextHopOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.NextHopResult Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.NextHopResult>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.NextHopResult>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class NetworkWatchersGetTroubleshootingOperation : Azure.Operation<Azure.ResourceManager.Network.Models.TroubleshootingResult>
    {
        protected NetworkWatchersGetTroubleshootingOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.TroubleshootingResult Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.TroubleshootingResult>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.TroubleshootingResult>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class NetworkWatchersGetTroubleshootingResultOperation : Azure.Operation<Azure.ResourceManager.Network.Models.TroubleshootingResult>
    {
        protected NetworkWatchersGetTroubleshootingResultOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.TroubleshootingResult Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.TroubleshootingResult>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.TroubleshootingResult>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class NetworkWatchersGetVMSecurityRulesOperation : Azure.Operation<Azure.ResourceManager.Network.Models.SecurityGroupViewResult>
    {
        protected NetworkWatchersGetVMSecurityRulesOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.SecurityGroupViewResult Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.SecurityGroupViewResult>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.SecurityGroupViewResult>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class NetworkWatchersListAvailableProvidersOperation : Azure.Operation<Azure.ResourceManager.Network.Models.AvailableProvidersList>
    {
        protected NetworkWatchersListAvailableProvidersOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.AvailableProvidersList Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.AvailableProvidersList>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.AvailableProvidersList>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class NetworkWatchersOperations
    {
        protected NetworkWatchersOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.NetworkWatcher> CreateOrUpdate(string resourceGroupName, string networkWatcherName, Azure.ResourceManager.Network.Models.NetworkWatcher parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.NetworkWatcher>> CreateOrUpdateAsync(string resourceGroupName, string networkWatcherName, Azure.ResourceManager.Network.Models.NetworkWatcher parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.NetworkWatcher> Get(string resourceGroupName, string networkWatcherName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.NetworkWatcher>> GetAsync(string resourceGroupName, string networkWatcherName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.Topology> GetTopology(string resourceGroupName, string networkWatcherName, Azure.ResourceManager.Network.Models.TopologyParameters parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.Topology>> GetTopologyAsync(string resourceGroupName, string networkWatcherName, Azure.ResourceManager.Network.Models.TopologyParameters parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.NetworkWatcher> List(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.NetworkWatcher> ListAll(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.NetworkWatcher> ListAllAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.NetworkWatcher> ListAsync(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.NetworkWatchersCheckConnectivityOperation StartCheckConnectivity(string resourceGroupName, string networkWatcherName, Azure.ResourceManager.Network.Models.ConnectivityParameters parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.NetworkWatchersCheckConnectivityOperation> StartCheckConnectivityAsync(string resourceGroupName, string networkWatcherName, Azure.ResourceManager.Network.Models.ConnectivityParameters parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.NetworkWatchersDeleteOperation StartDelete(string resourceGroupName, string networkWatcherName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.NetworkWatchersDeleteOperation> StartDeleteAsync(string resourceGroupName, string networkWatcherName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.NetworkWatchersGetAzureReachabilityReportOperation StartGetAzureReachabilityReport(string resourceGroupName, string networkWatcherName, Azure.ResourceManager.Network.Models.AzureReachabilityReportParameters parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.NetworkWatchersGetAzureReachabilityReportOperation> StartGetAzureReachabilityReportAsync(string resourceGroupName, string networkWatcherName, Azure.ResourceManager.Network.Models.AzureReachabilityReportParameters parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.NetworkWatchersGetFlowLogStatusOperation StartGetFlowLogStatus(string resourceGroupName, string networkWatcherName, Azure.ResourceManager.Network.Models.FlowLogStatusParameters parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.NetworkWatchersGetFlowLogStatusOperation> StartGetFlowLogStatusAsync(string resourceGroupName, string networkWatcherName, Azure.ResourceManager.Network.Models.FlowLogStatusParameters parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.NetworkWatchersGetNetworkConfigurationDiagnosticOperation StartGetNetworkConfigurationDiagnostic(string resourceGroupName, string networkWatcherName, Azure.ResourceManager.Network.Models.NetworkConfigurationDiagnosticParameters parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.NetworkWatchersGetNetworkConfigurationDiagnosticOperation> StartGetNetworkConfigurationDiagnosticAsync(string resourceGroupName, string networkWatcherName, Azure.ResourceManager.Network.Models.NetworkConfigurationDiagnosticParameters parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.NetworkWatchersGetNextHopOperation StartGetNextHop(string resourceGroupName, string networkWatcherName, Azure.ResourceManager.Network.Models.NextHopParameters parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.NetworkWatchersGetNextHopOperation> StartGetNextHopAsync(string resourceGroupName, string networkWatcherName, Azure.ResourceManager.Network.Models.NextHopParameters parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.NetworkWatchersGetTroubleshootingOperation StartGetTroubleshooting(string resourceGroupName, string networkWatcherName, Azure.ResourceManager.Network.Models.TroubleshootingParameters parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.NetworkWatchersGetTroubleshootingOperation> StartGetTroubleshootingAsync(string resourceGroupName, string networkWatcherName, Azure.ResourceManager.Network.Models.TroubleshootingParameters parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.NetworkWatchersGetTroubleshootingResultOperation StartGetTroubleshootingResult(string resourceGroupName, string networkWatcherName, Azure.ResourceManager.Network.Models.QueryTroubleshootingParameters parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.NetworkWatchersGetTroubleshootingResultOperation> StartGetTroubleshootingResultAsync(string resourceGroupName, string networkWatcherName, Azure.ResourceManager.Network.Models.QueryTroubleshootingParameters parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.NetworkWatchersGetVMSecurityRulesOperation StartGetVMSecurityRules(string resourceGroupName, string networkWatcherName, Azure.ResourceManager.Network.Models.SecurityGroupViewParameters parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.NetworkWatchersGetVMSecurityRulesOperation> StartGetVMSecurityRulesAsync(string resourceGroupName, string networkWatcherName, Azure.ResourceManager.Network.Models.SecurityGroupViewParameters parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.NetworkWatchersListAvailableProvidersOperation StartListAvailableProviders(string resourceGroupName, string networkWatcherName, Azure.ResourceManager.Network.Models.AvailableProvidersListParameters parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.NetworkWatchersListAvailableProvidersOperation> StartListAvailableProvidersAsync(string resourceGroupName, string networkWatcherName, Azure.ResourceManager.Network.Models.AvailableProvidersListParameters parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.NetworkWatchersSetFlowLogConfigurationOperation StartSetFlowLogConfiguration(string resourceGroupName, string networkWatcherName, Azure.ResourceManager.Network.Models.FlowLogInformation parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.NetworkWatchersSetFlowLogConfigurationOperation> StartSetFlowLogConfigurationAsync(string resourceGroupName, string networkWatcherName, Azure.ResourceManager.Network.Models.FlowLogInformation parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.NetworkWatchersVerifyIPFlowOperation StartVerifyIPFlow(string resourceGroupName, string networkWatcherName, Azure.ResourceManager.Network.Models.VerificationIPFlowParameters parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.NetworkWatchersVerifyIPFlowOperation> StartVerifyIPFlowAsync(string resourceGroupName, string networkWatcherName, Azure.ResourceManager.Network.Models.VerificationIPFlowParameters parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.NetworkWatcher> UpdateTags(string resourceGroupName, string networkWatcherName, Azure.ResourceManager.Network.Models.TagsObject parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.NetworkWatcher>> UpdateTagsAsync(string resourceGroupName, string networkWatcherName, Azure.ResourceManager.Network.Models.TagsObject parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class NetworkWatchersSetFlowLogConfigurationOperation : Azure.Operation<Azure.ResourceManager.Network.Models.FlowLogInformation>
    {
        protected NetworkWatchersSetFlowLogConfigurationOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.FlowLogInformation Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.FlowLogInformation>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.FlowLogInformation>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class NetworkWatchersVerifyIPFlowOperation : Azure.Operation<Azure.ResourceManager.Network.Models.VerificationIPFlowResult>
    {
        protected NetworkWatchersVerifyIPFlowOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.VerificationIPFlowResult Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.VerificationIPFlowResult>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.VerificationIPFlowResult>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class Operations
    {
        protected Operations() { }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.Operation> List(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.Operation> ListAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class P2SVpnGatewaysCreateOrUpdateOperation : Azure.Operation<Azure.ResourceManager.Network.Models.P2SVpnGateway>
    {
        protected P2SVpnGatewaysCreateOrUpdateOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.P2SVpnGateway Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.P2SVpnGateway>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.P2SVpnGateway>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class P2SVpnGatewaysDeleteOperation : Azure.Operation<Azure.Response>
    {
        protected P2SVpnGatewaysDeleteOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class P2SVpnGatewaysDisconnectP2SVpnConnectionsOperation : Azure.Operation<Azure.Response>
    {
        protected P2SVpnGatewaysDisconnectP2SVpnConnectionsOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class P2SVpnGatewaysGenerateVpnProfileOperation : Azure.Operation<Azure.ResourceManager.Network.Models.VpnProfileResponse>
    {
        protected P2SVpnGatewaysGenerateVpnProfileOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.VpnProfileResponse Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.VpnProfileResponse>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.VpnProfileResponse>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class P2SVpnGatewaysGetP2SVpnConnectionHealthDetailedOperation : Azure.Operation<Azure.ResourceManager.Network.Models.P2SVpnConnectionHealth>
    {
        protected P2SVpnGatewaysGetP2SVpnConnectionHealthDetailedOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.P2SVpnConnectionHealth Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.P2SVpnConnectionHealth>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.P2SVpnConnectionHealth>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class P2SVpnGatewaysGetP2SVpnConnectionHealthOperation : Azure.Operation<Azure.ResourceManager.Network.Models.P2SVpnGateway>
    {
        protected P2SVpnGatewaysGetP2SVpnConnectionHealthOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.P2SVpnGateway Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.P2SVpnGateway>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.P2SVpnGateway>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class P2SVpnGatewaysOperations
    {
        protected P2SVpnGatewaysOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.P2SVpnGateway> Get(string resourceGroupName, string gatewayName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.P2SVpnGateway>> GetAsync(string resourceGroupName, string gatewayName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.P2SVpnGateway> List(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.P2SVpnGateway> ListAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.P2SVpnGateway> ListByResourceGroup(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.P2SVpnGateway> ListByResourceGroupAsync(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.P2SVpnGatewaysCreateOrUpdateOperation StartCreateOrUpdate(string resourceGroupName, string gatewayName, Azure.ResourceManager.Network.Models.P2SVpnGateway p2SVpnGatewayParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.P2SVpnGatewaysCreateOrUpdateOperation> StartCreateOrUpdateAsync(string resourceGroupName, string gatewayName, Azure.ResourceManager.Network.Models.P2SVpnGateway p2SVpnGatewayParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.P2SVpnGatewaysDeleteOperation StartDelete(string resourceGroupName, string gatewayName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.P2SVpnGatewaysDeleteOperation> StartDeleteAsync(string resourceGroupName, string gatewayName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.P2SVpnGatewaysDisconnectP2SVpnConnectionsOperation StartDisconnectP2SVpnConnections(string resourceGroupName, string p2SVpnGatewayName, Azure.ResourceManager.Network.Models.P2SVpnConnectionRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.P2SVpnGatewaysDisconnectP2SVpnConnectionsOperation> StartDisconnectP2SVpnConnectionsAsync(string resourceGroupName, string p2SVpnGatewayName, Azure.ResourceManager.Network.Models.P2SVpnConnectionRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.P2SVpnGatewaysGenerateVpnProfileOperation StartGenerateVpnProfile(string resourceGroupName, string gatewayName, Azure.ResourceManager.Network.Models.P2SVpnProfileParameters parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.P2SVpnGatewaysGenerateVpnProfileOperation> StartGenerateVpnProfileAsync(string resourceGroupName, string gatewayName, Azure.ResourceManager.Network.Models.P2SVpnProfileParameters parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.P2SVpnGatewaysGetP2SVpnConnectionHealthOperation StartGetP2SVpnConnectionHealth(string resourceGroupName, string gatewayName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.P2SVpnGatewaysGetP2SVpnConnectionHealthOperation> StartGetP2SVpnConnectionHealthAsync(string resourceGroupName, string gatewayName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.P2SVpnGatewaysGetP2SVpnConnectionHealthDetailedOperation StartGetP2SVpnConnectionHealthDetailed(string resourceGroupName, string gatewayName, Azure.ResourceManager.Network.Models.P2SVpnConnectionHealthRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.P2SVpnGatewaysGetP2SVpnConnectionHealthDetailedOperation> StartGetP2SVpnConnectionHealthDetailedAsync(string resourceGroupName, string gatewayName, Azure.ResourceManager.Network.Models.P2SVpnConnectionHealthRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.P2SVpnGateway> UpdateTags(string resourceGroupName, string gatewayName, Azure.ResourceManager.Network.Models.TagsObject p2SVpnGatewayParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.P2SVpnGateway>> UpdateTagsAsync(string resourceGroupName, string gatewayName, Azure.ResourceManager.Network.Models.TagsObject p2SVpnGatewayParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class PacketCapturesCreateOperation : Azure.Operation<Azure.ResourceManager.Network.Models.PacketCaptureResult>
    {
        protected PacketCapturesCreateOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.PacketCaptureResult Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.PacketCaptureResult>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.PacketCaptureResult>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class PacketCapturesDeleteOperation : Azure.Operation<Azure.Response>
    {
        protected PacketCapturesDeleteOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class PacketCapturesGetStatusOperation : Azure.Operation<Azure.ResourceManager.Network.Models.PacketCaptureQueryStatusResult>
    {
        protected PacketCapturesGetStatusOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.PacketCaptureQueryStatusResult Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.PacketCaptureQueryStatusResult>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.PacketCaptureQueryStatusResult>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class PacketCapturesOperations
    {
        protected PacketCapturesOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.PacketCaptureResult> Get(string resourceGroupName, string networkWatcherName, string packetCaptureName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.PacketCaptureResult>> GetAsync(string resourceGroupName, string networkWatcherName, string packetCaptureName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.PacketCaptureResult> List(string resourceGroupName, string networkWatcherName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.PacketCaptureResult> ListAsync(string resourceGroupName, string networkWatcherName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.PacketCapturesCreateOperation StartCreate(string resourceGroupName, string networkWatcherName, string packetCaptureName, Azure.ResourceManager.Network.Models.PacketCapture parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.PacketCapturesCreateOperation> StartCreateAsync(string resourceGroupName, string networkWatcherName, string packetCaptureName, Azure.ResourceManager.Network.Models.PacketCapture parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.PacketCapturesDeleteOperation StartDelete(string resourceGroupName, string networkWatcherName, string packetCaptureName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.PacketCapturesDeleteOperation> StartDeleteAsync(string resourceGroupName, string networkWatcherName, string packetCaptureName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.PacketCapturesGetStatusOperation StartGetStatus(string resourceGroupName, string networkWatcherName, string packetCaptureName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.PacketCapturesGetStatusOperation> StartGetStatusAsync(string resourceGroupName, string networkWatcherName, string packetCaptureName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.PacketCapturesStopOperation StartStop(string resourceGroupName, string networkWatcherName, string packetCaptureName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.PacketCapturesStopOperation> StartStopAsync(string resourceGroupName, string networkWatcherName, string packetCaptureName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class PacketCapturesStopOperation : Azure.Operation<Azure.Response>
    {
        protected PacketCapturesStopOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class PeerExpressRouteCircuitConnectionsOperations
    {
        protected PeerExpressRouteCircuitConnectionsOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.PeerExpressRouteCircuitConnection> Get(string resourceGroupName, string circuitName, string peeringName, string connectionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.PeerExpressRouteCircuitConnection>> GetAsync(string resourceGroupName, string circuitName, string peeringName, string connectionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.PeerExpressRouteCircuitConnection> List(string resourceGroupName, string circuitName, string peeringName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.PeerExpressRouteCircuitConnection> ListAsync(string resourceGroupName, string circuitName, string peeringName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class PrivateDnsZoneGroupsCreateOrUpdateOperation : Azure.Operation<Azure.ResourceManager.Network.Models.PrivateDnsZoneGroup>
    {
        protected PrivateDnsZoneGroupsCreateOrUpdateOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.PrivateDnsZoneGroup Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.PrivateDnsZoneGroup>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.PrivateDnsZoneGroup>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class PrivateDnsZoneGroupsDeleteOperation : Azure.Operation<Azure.Response>
    {
        protected PrivateDnsZoneGroupsDeleteOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class PrivateDnsZoneGroupsOperations
    {
        protected PrivateDnsZoneGroupsOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.PrivateDnsZoneGroup> Get(string resourceGroupName, string privateEndpointName, string privateDnsZoneGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.PrivateDnsZoneGroup>> GetAsync(string resourceGroupName, string privateEndpointName, string privateDnsZoneGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.PrivateDnsZoneGroup> List(string privateEndpointName, string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.PrivateDnsZoneGroup> ListAsync(string privateEndpointName, string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.PrivateDnsZoneGroupsCreateOrUpdateOperation StartCreateOrUpdate(string resourceGroupName, string privateEndpointName, string privateDnsZoneGroupName, Azure.ResourceManager.Network.Models.PrivateDnsZoneGroup parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.PrivateDnsZoneGroupsCreateOrUpdateOperation> StartCreateOrUpdateAsync(string resourceGroupName, string privateEndpointName, string privateDnsZoneGroupName, Azure.ResourceManager.Network.Models.PrivateDnsZoneGroup parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.PrivateDnsZoneGroupsDeleteOperation StartDelete(string resourceGroupName, string privateEndpointName, string privateDnsZoneGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.PrivateDnsZoneGroupsDeleteOperation> StartDeleteAsync(string resourceGroupName, string privateEndpointName, string privateDnsZoneGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class PrivateEndpointsCreateOrUpdateOperation : Azure.Operation<Azure.ResourceManager.Network.Models.PrivateEndpoint>
    {
        protected PrivateEndpointsCreateOrUpdateOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.PrivateEndpoint Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.PrivateEndpoint>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.PrivateEndpoint>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class PrivateEndpointsDeleteOperation : Azure.Operation<Azure.Response>
    {
        protected PrivateEndpointsDeleteOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class PrivateEndpointsOperations
    {
        protected PrivateEndpointsOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.PrivateEndpoint> Get(string resourceGroupName, string privateEndpointName, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.PrivateEndpoint>> GetAsync(string resourceGroupName, string privateEndpointName, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.PrivateEndpoint> List(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.PrivateEndpoint> ListAsync(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.PrivateEndpoint> ListBySubscription(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.PrivateEndpoint> ListBySubscriptionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.PrivateEndpointsCreateOrUpdateOperation StartCreateOrUpdate(string resourceGroupName, string privateEndpointName, Azure.ResourceManager.Network.Models.PrivateEndpoint parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.PrivateEndpointsCreateOrUpdateOperation> StartCreateOrUpdateAsync(string resourceGroupName, string privateEndpointName, Azure.ResourceManager.Network.Models.PrivateEndpoint parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.PrivateEndpointsDeleteOperation StartDelete(string resourceGroupName, string privateEndpointName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.PrivateEndpointsDeleteOperation> StartDeleteAsync(string resourceGroupName, string privateEndpointName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class PrivateLinkServicesCheckPrivateLinkServiceVisibilityByResourceGroupOperation : Azure.Operation<Azure.ResourceManager.Network.Models.PrivateLinkServiceVisibility>
    {
        protected PrivateLinkServicesCheckPrivateLinkServiceVisibilityByResourceGroupOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.PrivateLinkServiceVisibility Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.PrivateLinkServiceVisibility>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.PrivateLinkServiceVisibility>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class PrivateLinkServicesCheckPrivateLinkServiceVisibilityOperation : Azure.Operation<Azure.ResourceManager.Network.Models.PrivateLinkServiceVisibility>
    {
        protected PrivateLinkServicesCheckPrivateLinkServiceVisibilityOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.PrivateLinkServiceVisibility Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.PrivateLinkServiceVisibility>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.PrivateLinkServiceVisibility>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class PrivateLinkServicesCreateOrUpdateOperation : Azure.Operation<Azure.ResourceManager.Network.Models.PrivateLinkService>
    {
        protected PrivateLinkServicesCreateOrUpdateOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.PrivateLinkService Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.PrivateLinkService>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.PrivateLinkService>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class PrivateLinkServicesDeleteOperation : Azure.Operation<Azure.Response>
    {
        protected PrivateLinkServicesDeleteOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class PrivateLinkServicesDeletePrivateEndpointConnectionOperation : Azure.Operation<Azure.Response>
    {
        protected PrivateLinkServicesDeletePrivateEndpointConnectionOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class PrivateLinkServicesOperations
    {
        protected PrivateLinkServicesOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.PrivateLinkService> Get(string resourceGroupName, string serviceName, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.PrivateLinkService>> GetAsync(string resourceGroupName, string serviceName, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.PrivateEndpointConnection> GetPrivateEndpointConnection(string resourceGroupName, string serviceName, string peConnectionName, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.PrivateEndpointConnection>> GetPrivateEndpointConnectionAsync(string resourceGroupName, string serviceName, string peConnectionName, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.PrivateLinkService> List(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.PrivateLinkService> ListAsync(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.AutoApprovedPrivateLinkService> ListAutoApprovedPrivateLinkServices(string location, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.AutoApprovedPrivateLinkService> ListAutoApprovedPrivateLinkServicesAsync(string location, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.AutoApprovedPrivateLinkService> ListAutoApprovedPrivateLinkServicesByResourceGroup(string location, string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.AutoApprovedPrivateLinkService> ListAutoApprovedPrivateLinkServicesByResourceGroupAsync(string location, string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.PrivateLinkService> ListBySubscription(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.PrivateLinkService> ListBySubscriptionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.PrivateEndpointConnection> ListPrivateEndpointConnections(string resourceGroupName, string serviceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.PrivateEndpointConnection> ListPrivateEndpointConnectionsAsync(string resourceGroupName, string serviceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.PrivateLinkServicesCheckPrivateLinkServiceVisibilityOperation StartCheckPrivateLinkServiceVisibility(string location, Azure.ResourceManager.Network.Models.CheckPrivateLinkServiceVisibilityRequest parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.PrivateLinkServicesCheckPrivateLinkServiceVisibilityOperation> StartCheckPrivateLinkServiceVisibilityAsync(string location, Azure.ResourceManager.Network.Models.CheckPrivateLinkServiceVisibilityRequest parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.PrivateLinkServicesCheckPrivateLinkServiceVisibilityByResourceGroupOperation StartCheckPrivateLinkServiceVisibilityByResourceGroup(string location, string resourceGroupName, Azure.ResourceManager.Network.Models.CheckPrivateLinkServiceVisibilityRequest parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.PrivateLinkServicesCheckPrivateLinkServiceVisibilityByResourceGroupOperation> StartCheckPrivateLinkServiceVisibilityByResourceGroupAsync(string location, string resourceGroupName, Azure.ResourceManager.Network.Models.CheckPrivateLinkServiceVisibilityRequest parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.PrivateLinkServicesCreateOrUpdateOperation StartCreateOrUpdate(string resourceGroupName, string serviceName, Azure.ResourceManager.Network.Models.PrivateLinkService parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.PrivateLinkServicesCreateOrUpdateOperation> StartCreateOrUpdateAsync(string resourceGroupName, string serviceName, Azure.ResourceManager.Network.Models.PrivateLinkService parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.PrivateLinkServicesDeleteOperation StartDelete(string resourceGroupName, string serviceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.PrivateLinkServicesDeleteOperation> StartDeleteAsync(string resourceGroupName, string serviceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.PrivateLinkServicesDeletePrivateEndpointConnectionOperation StartDeletePrivateEndpointConnection(string resourceGroupName, string serviceName, string peConnectionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.PrivateLinkServicesDeletePrivateEndpointConnectionOperation> StartDeletePrivateEndpointConnectionAsync(string resourceGroupName, string serviceName, string peConnectionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.PrivateEndpointConnection> UpdatePrivateEndpointConnection(string resourceGroupName, string serviceName, string peConnectionName, Azure.ResourceManager.Network.Models.PrivateEndpointConnection parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.PrivateEndpointConnection>> UpdatePrivateEndpointConnectionAsync(string resourceGroupName, string serviceName, string peConnectionName, Azure.ResourceManager.Network.Models.PrivateEndpointConnection parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class PublicIPAddressesCreateOrUpdateOperation : Azure.Operation<Azure.ResourceManager.Network.Models.PublicIPAddress>
    {
        protected PublicIPAddressesCreateOrUpdateOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.PublicIPAddress Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.PublicIPAddress>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.PublicIPAddress>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class PublicIPAddressesDeleteOperation : Azure.Operation<Azure.Response>
    {
        protected PublicIPAddressesDeleteOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class PublicIPAddressesOperations
    {
        protected PublicIPAddressesOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.PublicIPAddress> Get(string resourceGroupName, string publicIpAddressName, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.PublicIPAddress>> GetAsync(string resourceGroupName, string publicIpAddressName, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.PublicIPAddress> GetVirtualMachineScaleSetPublicIPAddress(string resourceGroupName, string virtualMachineScaleSetName, string virtualmachineIndex, string networkInterfaceName, string ipConfigurationName, string publicIpAddressName, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.PublicIPAddress>> GetVirtualMachineScaleSetPublicIPAddressAsync(string resourceGroupName, string virtualMachineScaleSetName, string virtualmachineIndex, string networkInterfaceName, string ipConfigurationName, string publicIpAddressName, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.PublicIPAddress> List(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.PublicIPAddress> ListAll(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.PublicIPAddress> ListAllAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.PublicIPAddress> ListAsync(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.PublicIPAddress> ListVirtualMachineScaleSetPublicIPAddresses(string resourceGroupName, string virtualMachineScaleSetName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.PublicIPAddress> ListVirtualMachineScaleSetPublicIPAddressesAsync(string resourceGroupName, string virtualMachineScaleSetName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.PublicIPAddress> ListVirtualMachineScaleSetVMPublicIPAddresses(string resourceGroupName, string virtualMachineScaleSetName, string virtualmachineIndex, string networkInterfaceName, string ipConfigurationName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.PublicIPAddress> ListVirtualMachineScaleSetVMPublicIPAddressesAsync(string resourceGroupName, string virtualMachineScaleSetName, string virtualmachineIndex, string networkInterfaceName, string ipConfigurationName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.PublicIPAddressesCreateOrUpdateOperation StartCreateOrUpdate(string resourceGroupName, string publicIpAddressName, Azure.ResourceManager.Network.Models.PublicIPAddress parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.PublicIPAddressesCreateOrUpdateOperation> StartCreateOrUpdateAsync(string resourceGroupName, string publicIpAddressName, Azure.ResourceManager.Network.Models.PublicIPAddress parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.PublicIPAddressesDeleteOperation StartDelete(string resourceGroupName, string publicIpAddressName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.PublicIPAddressesDeleteOperation> StartDeleteAsync(string resourceGroupName, string publicIpAddressName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.PublicIPAddress> UpdateTags(string resourceGroupName, string publicIpAddressName, Azure.ResourceManager.Network.Models.TagsObject parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.PublicIPAddress>> UpdateTagsAsync(string resourceGroupName, string publicIpAddressName, Azure.ResourceManager.Network.Models.TagsObject parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class PublicIPPrefixesCreateOrUpdateOperation : Azure.Operation<Azure.ResourceManager.Network.Models.PublicIPPrefix>
    {
        protected PublicIPPrefixesCreateOrUpdateOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.PublicIPPrefix Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.PublicIPPrefix>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.PublicIPPrefix>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class PublicIPPrefixesDeleteOperation : Azure.Operation<Azure.Response>
    {
        protected PublicIPPrefixesDeleteOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class PublicIPPrefixesOperations
    {
        protected PublicIPPrefixesOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.PublicIPPrefix> Get(string resourceGroupName, string publicIpPrefixName, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.PublicIPPrefix>> GetAsync(string resourceGroupName, string publicIpPrefixName, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.PublicIPPrefix> List(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.PublicIPPrefix> ListAll(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.PublicIPPrefix> ListAllAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.PublicIPPrefix> ListAsync(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.PublicIPPrefixesCreateOrUpdateOperation StartCreateOrUpdate(string resourceGroupName, string publicIpPrefixName, Azure.ResourceManager.Network.Models.PublicIPPrefix parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.PublicIPPrefixesCreateOrUpdateOperation> StartCreateOrUpdateAsync(string resourceGroupName, string publicIpPrefixName, Azure.ResourceManager.Network.Models.PublicIPPrefix parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.PublicIPPrefixesDeleteOperation StartDelete(string resourceGroupName, string publicIpPrefixName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.PublicIPPrefixesDeleteOperation> StartDeleteAsync(string resourceGroupName, string publicIpPrefixName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.PublicIPPrefix> UpdateTags(string resourceGroupName, string publicIpPrefixName, Azure.ResourceManager.Network.Models.TagsObject parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.PublicIPPrefix>> UpdateTagsAsync(string resourceGroupName, string publicIpPrefixName, Azure.ResourceManager.Network.Models.TagsObject parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class ResourceNavigationLinksOperations
    {
        protected ResourceNavigationLinksOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.ResourceNavigationLinksListResult> List(string resourceGroupName, string virtualNetworkName, string subnetName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.ResourceNavigationLinksListResult>> ListAsync(string resourceGroupName, string virtualNetworkName, string subnetName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class RouteFilterRulesCreateOrUpdateOperation : Azure.Operation<Azure.ResourceManager.Network.Models.RouteFilterRule>
    {
        protected RouteFilterRulesCreateOrUpdateOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.RouteFilterRule Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.RouteFilterRule>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.RouteFilterRule>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class RouteFilterRulesDeleteOperation : Azure.Operation<Azure.Response>
    {
        protected RouteFilterRulesDeleteOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class RouteFilterRulesOperations
    {
        protected RouteFilterRulesOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.RouteFilterRule> Get(string resourceGroupName, string routeFilterName, string ruleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.RouteFilterRule>> GetAsync(string resourceGroupName, string routeFilterName, string ruleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.RouteFilterRule> ListByRouteFilter(string resourceGroupName, string routeFilterName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.RouteFilterRule> ListByRouteFilterAsync(string resourceGroupName, string routeFilterName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.RouteFilterRulesCreateOrUpdateOperation StartCreateOrUpdate(string resourceGroupName, string routeFilterName, string ruleName, Azure.ResourceManager.Network.Models.RouteFilterRule routeFilterRuleParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.RouteFilterRulesCreateOrUpdateOperation> StartCreateOrUpdateAsync(string resourceGroupName, string routeFilterName, string ruleName, Azure.ResourceManager.Network.Models.RouteFilterRule routeFilterRuleParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.RouteFilterRulesDeleteOperation StartDelete(string resourceGroupName, string routeFilterName, string ruleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.RouteFilterRulesDeleteOperation> StartDeleteAsync(string resourceGroupName, string routeFilterName, string ruleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class RouteFiltersCreateOrUpdateOperation : Azure.Operation<Azure.ResourceManager.Network.Models.RouteFilter>
    {
        protected RouteFiltersCreateOrUpdateOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.RouteFilter Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.RouteFilter>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.RouteFilter>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class RouteFiltersDeleteOperation : Azure.Operation<Azure.Response>
    {
        protected RouteFiltersDeleteOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class RouteFiltersOperations
    {
        protected RouteFiltersOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.RouteFilter> Get(string resourceGroupName, string routeFilterName, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.RouteFilter>> GetAsync(string resourceGroupName, string routeFilterName, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.RouteFilter> List(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.RouteFilter> ListAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.RouteFilter> ListByResourceGroup(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.RouteFilter> ListByResourceGroupAsync(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.RouteFiltersCreateOrUpdateOperation StartCreateOrUpdate(string resourceGroupName, string routeFilterName, Azure.ResourceManager.Network.Models.RouteFilter routeFilterParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.RouteFiltersCreateOrUpdateOperation> StartCreateOrUpdateAsync(string resourceGroupName, string routeFilterName, Azure.ResourceManager.Network.Models.RouteFilter routeFilterParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.RouteFiltersDeleteOperation StartDelete(string resourceGroupName, string routeFilterName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.RouteFiltersDeleteOperation> StartDeleteAsync(string resourceGroupName, string routeFilterName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.RouteFilter> UpdateTags(string resourceGroupName, string routeFilterName, Azure.ResourceManager.Network.Models.TagsObject parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.RouteFilter>> UpdateTagsAsync(string resourceGroupName, string routeFilterName, Azure.ResourceManager.Network.Models.TagsObject parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class RoutesCreateOrUpdateOperation : Azure.Operation<Azure.ResourceManager.Network.Models.Route>
    {
        protected RoutesCreateOrUpdateOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.Route Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.Route>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.Route>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class RoutesDeleteOperation : Azure.Operation<Azure.Response>
    {
        protected RoutesDeleteOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class RoutesOperations
    {
        protected RoutesOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.Route> Get(string resourceGroupName, string routeTableName, string routeName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.Route>> GetAsync(string resourceGroupName, string routeTableName, string routeName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.Route> List(string resourceGroupName, string routeTableName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.Route> ListAsync(string resourceGroupName, string routeTableName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.RoutesCreateOrUpdateOperation StartCreateOrUpdate(string resourceGroupName, string routeTableName, string routeName, Azure.ResourceManager.Network.Models.Route routeParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.RoutesCreateOrUpdateOperation> StartCreateOrUpdateAsync(string resourceGroupName, string routeTableName, string routeName, Azure.ResourceManager.Network.Models.Route routeParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.RoutesDeleteOperation StartDelete(string resourceGroupName, string routeTableName, string routeName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.RoutesDeleteOperation> StartDeleteAsync(string resourceGroupName, string routeTableName, string routeName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class RouteTablesCreateOrUpdateOperation : Azure.Operation<Azure.ResourceManager.Network.Models.RouteTable>
    {
        protected RouteTablesCreateOrUpdateOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.RouteTable Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.RouteTable>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.RouteTable>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class RouteTablesDeleteOperation : Azure.Operation<Azure.Response>
    {
        protected RouteTablesDeleteOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class RouteTablesOperations
    {
        protected RouteTablesOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.RouteTable> Get(string resourceGroupName, string routeTableName, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.RouteTable>> GetAsync(string resourceGroupName, string routeTableName, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.RouteTable> List(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.RouteTable> ListAll(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.RouteTable> ListAllAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.RouteTable> ListAsync(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.RouteTablesCreateOrUpdateOperation StartCreateOrUpdate(string resourceGroupName, string routeTableName, Azure.ResourceManager.Network.Models.RouteTable parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.RouteTablesCreateOrUpdateOperation> StartCreateOrUpdateAsync(string resourceGroupName, string routeTableName, Azure.ResourceManager.Network.Models.RouteTable parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.RouteTablesDeleteOperation StartDelete(string resourceGroupName, string routeTableName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.RouteTablesDeleteOperation> StartDeleteAsync(string resourceGroupName, string routeTableName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.RouteTable> UpdateTags(string resourceGroupName, string routeTableName, Azure.ResourceManager.Network.Models.TagsObject parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.RouteTable>> UpdateTagsAsync(string resourceGroupName, string routeTableName, Azure.ResourceManager.Network.Models.TagsObject parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class SecurityPartnerProvidersCreateOrUpdateOperation : Azure.Operation<Azure.ResourceManager.Network.Models.SecurityPartnerProvider>
    {
        protected SecurityPartnerProvidersCreateOrUpdateOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.SecurityPartnerProvider Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.SecurityPartnerProvider>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.SecurityPartnerProvider>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class SecurityPartnerProvidersDeleteOperation : Azure.Operation<Azure.Response>
    {
        protected SecurityPartnerProvidersDeleteOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class SecurityPartnerProvidersOperations
    {
        protected SecurityPartnerProvidersOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.SecurityPartnerProvider> Get(string resourceGroupName, string securityPartnerProviderName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.SecurityPartnerProvider>> GetAsync(string resourceGroupName, string securityPartnerProviderName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.SecurityPartnerProvider> List(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.SecurityPartnerProvider> ListAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.SecurityPartnerProvider> ListByResourceGroup(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.SecurityPartnerProvider> ListByResourceGroupAsync(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.SecurityPartnerProvidersCreateOrUpdateOperation StartCreateOrUpdate(string resourceGroupName, string securityPartnerProviderName, Azure.ResourceManager.Network.Models.SecurityPartnerProvider parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.SecurityPartnerProvidersCreateOrUpdateOperation> StartCreateOrUpdateAsync(string resourceGroupName, string securityPartnerProviderName, Azure.ResourceManager.Network.Models.SecurityPartnerProvider parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.SecurityPartnerProvidersDeleteOperation StartDelete(string resourceGroupName, string securityPartnerProviderName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.SecurityPartnerProvidersDeleteOperation> StartDeleteAsync(string resourceGroupName, string securityPartnerProviderName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.SecurityPartnerProvider> UpdateTags(string resourceGroupName, string securityPartnerProviderName, Azure.ResourceManager.Network.Models.TagsObject parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.SecurityPartnerProvider>> UpdateTagsAsync(string resourceGroupName, string securityPartnerProviderName, Azure.ResourceManager.Network.Models.TagsObject parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class SecurityRulesCreateOrUpdateOperation : Azure.Operation<Azure.ResourceManager.Network.Models.SecurityRule>
    {
        protected SecurityRulesCreateOrUpdateOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.SecurityRule Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.SecurityRule>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.SecurityRule>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class SecurityRulesDeleteOperation : Azure.Operation<Azure.Response>
    {
        protected SecurityRulesDeleteOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class SecurityRulesOperations
    {
        protected SecurityRulesOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.SecurityRule> Get(string resourceGroupName, string networkSecurityGroupName, string securityRuleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.SecurityRule>> GetAsync(string resourceGroupName, string networkSecurityGroupName, string securityRuleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.SecurityRule> List(string resourceGroupName, string networkSecurityGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.SecurityRule> ListAsync(string resourceGroupName, string networkSecurityGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.SecurityRulesCreateOrUpdateOperation StartCreateOrUpdate(string resourceGroupName, string networkSecurityGroupName, string securityRuleName, Azure.ResourceManager.Network.Models.SecurityRule securityRuleParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.SecurityRulesCreateOrUpdateOperation> StartCreateOrUpdateAsync(string resourceGroupName, string networkSecurityGroupName, string securityRuleName, Azure.ResourceManager.Network.Models.SecurityRule securityRuleParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.SecurityRulesDeleteOperation StartDelete(string resourceGroupName, string networkSecurityGroupName, string securityRuleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.SecurityRulesDeleteOperation> StartDeleteAsync(string resourceGroupName, string networkSecurityGroupName, string securityRuleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class ServiceAssociationLinksOperations
    {
        protected ServiceAssociationLinksOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.ServiceAssociationLinksListResult> List(string resourceGroupName, string virtualNetworkName, string subnetName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.ServiceAssociationLinksListResult>> ListAsync(string resourceGroupName, string virtualNetworkName, string subnetName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class ServiceEndpointPoliciesCreateOrUpdateOperation : Azure.Operation<Azure.ResourceManager.Network.Models.ServiceEndpointPolicy>
    {
        protected ServiceEndpointPoliciesCreateOrUpdateOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.ServiceEndpointPolicy Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.ServiceEndpointPolicy>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.ServiceEndpointPolicy>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class ServiceEndpointPoliciesDeleteOperation : Azure.Operation<Azure.Response>
    {
        protected ServiceEndpointPoliciesDeleteOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class ServiceEndpointPoliciesOperations
    {
        protected ServiceEndpointPoliciesOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.ServiceEndpointPolicy> Get(string resourceGroupName, string serviceEndpointPolicyName, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.ServiceEndpointPolicy>> GetAsync(string resourceGroupName, string serviceEndpointPolicyName, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.ServiceEndpointPolicy> List(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.ServiceEndpointPolicy> ListAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.ServiceEndpointPolicy> ListByResourceGroup(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.ServiceEndpointPolicy> ListByResourceGroupAsync(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.ServiceEndpointPoliciesCreateOrUpdateOperation StartCreateOrUpdate(string resourceGroupName, string serviceEndpointPolicyName, Azure.ResourceManager.Network.Models.ServiceEndpointPolicy parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.ServiceEndpointPoliciesCreateOrUpdateOperation> StartCreateOrUpdateAsync(string resourceGroupName, string serviceEndpointPolicyName, Azure.ResourceManager.Network.Models.ServiceEndpointPolicy parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.ServiceEndpointPoliciesDeleteOperation StartDelete(string resourceGroupName, string serviceEndpointPolicyName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.ServiceEndpointPoliciesDeleteOperation> StartDeleteAsync(string resourceGroupName, string serviceEndpointPolicyName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.ServiceEndpointPolicy> UpdateTags(string resourceGroupName, string serviceEndpointPolicyName, Azure.ResourceManager.Network.Models.TagsObject parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.ServiceEndpointPolicy>> UpdateTagsAsync(string resourceGroupName, string serviceEndpointPolicyName, Azure.ResourceManager.Network.Models.TagsObject parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class ServiceEndpointPolicyDefinitionsCreateOrUpdateOperation : Azure.Operation<Azure.ResourceManager.Network.Models.ServiceEndpointPolicyDefinition>
    {
        protected ServiceEndpointPolicyDefinitionsCreateOrUpdateOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.ServiceEndpointPolicyDefinition Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.ServiceEndpointPolicyDefinition>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.ServiceEndpointPolicyDefinition>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class ServiceEndpointPolicyDefinitionsDeleteOperation : Azure.Operation<Azure.Response>
    {
        protected ServiceEndpointPolicyDefinitionsDeleteOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class ServiceEndpointPolicyDefinitionsOperations
    {
        protected ServiceEndpointPolicyDefinitionsOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.ServiceEndpointPolicyDefinition> Get(string resourceGroupName, string serviceEndpointPolicyName, string serviceEndpointPolicyDefinitionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.ServiceEndpointPolicyDefinition>> GetAsync(string resourceGroupName, string serviceEndpointPolicyName, string serviceEndpointPolicyDefinitionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.ServiceEndpointPolicyDefinition> ListByResourceGroup(string resourceGroupName, string serviceEndpointPolicyName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.ServiceEndpointPolicyDefinition> ListByResourceGroupAsync(string resourceGroupName, string serviceEndpointPolicyName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.ServiceEndpointPolicyDefinitionsCreateOrUpdateOperation StartCreateOrUpdate(string resourceGroupName, string serviceEndpointPolicyName, string serviceEndpointPolicyDefinitionName, Azure.ResourceManager.Network.Models.ServiceEndpointPolicyDefinition serviceEndpointPolicyDefinitions, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.ServiceEndpointPolicyDefinitionsCreateOrUpdateOperation> StartCreateOrUpdateAsync(string resourceGroupName, string serviceEndpointPolicyName, string serviceEndpointPolicyDefinitionName, Azure.ResourceManager.Network.Models.ServiceEndpointPolicyDefinition serviceEndpointPolicyDefinitions, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.ServiceEndpointPolicyDefinitionsDeleteOperation StartDelete(string resourceGroupName, string serviceEndpointPolicyName, string serviceEndpointPolicyDefinitionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.ServiceEndpointPolicyDefinitionsDeleteOperation> StartDeleteAsync(string resourceGroupName, string serviceEndpointPolicyName, string serviceEndpointPolicyDefinitionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class ServiceTagsOperations
    {
        protected ServiceTagsOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.ServiceTagsListResult> List(string location, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.ServiceTagsListResult>> ListAsync(string location, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class SubnetsCreateOrUpdateOperation : Azure.Operation<Azure.ResourceManager.Network.Models.Subnet>
    {
        protected SubnetsCreateOrUpdateOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.Subnet Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.Subnet>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.Subnet>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class SubnetsDeleteOperation : Azure.Operation<Azure.Response>
    {
        protected SubnetsDeleteOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class SubnetsOperations
    {
        protected SubnetsOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.Subnet> Get(string resourceGroupName, string virtualNetworkName, string subnetName, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.Subnet>> GetAsync(string resourceGroupName, string virtualNetworkName, string subnetName, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.Subnet> List(string resourceGroupName, string virtualNetworkName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.Subnet> ListAsync(string resourceGroupName, string virtualNetworkName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.SubnetsCreateOrUpdateOperation StartCreateOrUpdate(string resourceGroupName, string virtualNetworkName, string subnetName, Azure.ResourceManager.Network.Models.Subnet subnetParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.SubnetsCreateOrUpdateOperation> StartCreateOrUpdateAsync(string resourceGroupName, string virtualNetworkName, string subnetName, Azure.ResourceManager.Network.Models.Subnet subnetParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.SubnetsDeleteOperation StartDelete(string resourceGroupName, string virtualNetworkName, string subnetName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.SubnetsDeleteOperation> StartDeleteAsync(string resourceGroupName, string virtualNetworkName, string subnetName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.SubnetsPrepareNetworkPoliciesOperation StartPrepareNetworkPolicies(string resourceGroupName, string virtualNetworkName, string subnetName, Azure.ResourceManager.Network.Models.PrepareNetworkPoliciesRequest prepareNetworkPoliciesRequestParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.SubnetsPrepareNetworkPoliciesOperation> StartPrepareNetworkPoliciesAsync(string resourceGroupName, string virtualNetworkName, string subnetName, Azure.ResourceManager.Network.Models.PrepareNetworkPoliciesRequest prepareNetworkPoliciesRequestParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.SubnetsUnprepareNetworkPoliciesOperation StartUnprepareNetworkPolicies(string resourceGroupName, string virtualNetworkName, string subnetName, Azure.ResourceManager.Network.Models.UnprepareNetworkPoliciesRequest unprepareNetworkPoliciesRequestParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.SubnetsUnprepareNetworkPoliciesOperation> StartUnprepareNetworkPoliciesAsync(string resourceGroupName, string virtualNetworkName, string subnetName, Azure.ResourceManager.Network.Models.UnprepareNetworkPoliciesRequest unprepareNetworkPoliciesRequestParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class SubnetsPrepareNetworkPoliciesOperation : Azure.Operation<Azure.Response>
    {
        protected SubnetsPrepareNetworkPoliciesOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class SubnetsUnprepareNetworkPoliciesOperation : Azure.Operation<Azure.Response>
    {
        protected SubnetsUnprepareNetworkPoliciesOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class UsagesOperations
    {
        protected UsagesOperations() { }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.Usage> List(string location, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.Usage> ListAsync(string location, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class VirtualHubRouteTableV2SCreateOrUpdateOperation : Azure.Operation<Azure.ResourceManager.Network.Models.VirtualHubRouteTableV2>
    {
        protected VirtualHubRouteTableV2SCreateOrUpdateOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.VirtualHubRouteTableV2 Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.VirtualHubRouteTableV2>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.VirtualHubRouteTableV2>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class VirtualHubRouteTableV2SDeleteOperation : Azure.Operation<Azure.Response>
    {
        protected VirtualHubRouteTableV2SDeleteOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class VirtualHubRouteTableV2SOperations
    {
        protected VirtualHubRouteTableV2SOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.VirtualHubRouteTableV2> Get(string resourceGroupName, string virtualHubName, string routeTableName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.VirtualHubRouteTableV2>> GetAsync(string resourceGroupName, string virtualHubName, string routeTableName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.VirtualHubRouteTableV2> List(string resourceGroupName, string virtualHubName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.VirtualHubRouteTableV2> ListAsync(string resourceGroupName, string virtualHubName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.VirtualHubRouteTableV2SCreateOrUpdateOperation StartCreateOrUpdate(string resourceGroupName, string virtualHubName, string routeTableName, Azure.ResourceManager.Network.Models.VirtualHubRouteTableV2 virtualHubRouteTableV2Parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.VirtualHubRouteTableV2SCreateOrUpdateOperation> StartCreateOrUpdateAsync(string resourceGroupName, string virtualHubName, string routeTableName, Azure.ResourceManager.Network.Models.VirtualHubRouteTableV2 virtualHubRouteTableV2Parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.VirtualHubRouteTableV2SDeleteOperation StartDelete(string resourceGroupName, string virtualHubName, string routeTableName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.VirtualHubRouteTableV2SDeleteOperation> StartDeleteAsync(string resourceGroupName, string virtualHubName, string routeTableName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class VirtualHubsCreateOrUpdateOperation : Azure.Operation<Azure.ResourceManager.Network.Models.VirtualHub>
    {
        protected VirtualHubsCreateOrUpdateOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.VirtualHub Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.VirtualHub>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.VirtualHub>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class VirtualHubsDeleteOperation : Azure.Operation<Azure.Response>
    {
        protected VirtualHubsDeleteOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class VirtualHubsOperations
    {
        protected VirtualHubsOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.VirtualHub> Get(string resourceGroupName, string virtualHubName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.VirtualHub>> GetAsync(string resourceGroupName, string virtualHubName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.VirtualHub> List(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.VirtualHub> ListAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.VirtualHub> ListByResourceGroup(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.VirtualHub> ListByResourceGroupAsync(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.VirtualHubsCreateOrUpdateOperation StartCreateOrUpdate(string resourceGroupName, string virtualHubName, Azure.ResourceManager.Network.Models.VirtualHub virtualHubParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.VirtualHubsCreateOrUpdateOperation> StartCreateOrUpdateAsync(string resourceGroupName, string virtualHubName, Azure.ResourceManager.Network.Models.VirtualHub virtualHubParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.VirtualHubsDeleteOperation StartDelete(string resourceGroupName, string virtualHubName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.VirtualHubsDeleteOperation> StartDeleteAsync(string resourceGroupName, string virtualHubName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.VirtualHub> UpdateTags(string resourceGroupName, string virtualHubName, Azure.ResourceManager.Network.Models.TagsObject virtualHubParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.VirtualHub>> UpdateTagsAsync(string resourceGroupName, string virtualHubName, Azure.ResourceManager.Network.Models.TagsObject virtualHubParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class VirtualNetworkGatewayConnectionsCreateOrUpdateOperation : Azure.Operation<Azure.ResourceManager.Network.Models.VirtualNetworkGatewayConnection>
    {
        protected VirtualNetworkGatewayConnectionsCreateOrUpdateOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.VirtualNetworkGatewayConnection Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.VirtualNetworkGatewayConnection>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.VirtualNetworkGatewayConnection>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class VirtualNetworkGatewayConnectionsDeleteOperation : Azure.Operation<Azure.Response>
    {
        protected VirtualNetworkGatewayConnectionsDeleteOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class VirtualNetworkGatewayConnectionsOperations
    {
        protected VirtualNetworkGatewayConnectionsOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.VirtualNetworkGatewayConnection> Get(string resourceGroupName, string virtualNetworkGatewayConnectionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.VirtualNetworkGatewayConnection>> GetAsync(string resourceGroupName, string virtualNetworkGatewayConnectionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.ConnectionSharedKey> GetSharedKey(string resourceGroupName, string virtualNetworkGatewayConnectionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.ConnectionSharedKey>> GetSharedKeyAsync(string resourceGroupName, string virtualNetworkGatewayConnectionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.VirtualNetworkGatewayConnection> List(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.VirtualNetworkGatewayConnection> ListAsync(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.VirtualNetworkGatewayConnectionsCreateOrUpdateOperation StartCreateOrUpdate(string resourceGroupName, string virtualNetworkGatewayConnectionName, Azure.ResourceManager.Network.Models.VirtualNetworkGatewayConnection parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.VirtualNetworkGatewayConnectionsCreateOrUpdateOperation> StartCreateOrUpdateAsync(string resourceGroupName, string virtualNetworkGatewayConnectionName, Azure.ResourceManager.Network.Models.VirtualNetworkGatewayConnection parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.VirtualNetworkGatewayConnectionsDeleteOperation StartDelete(string resourceGroupName, string virtualNetworkGatewayConnectionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.VirtualNetworkGatewayConnectionsDeleteOperation> StartDeleteAsync(string resourceGroupName, string virtualNetworkGatewayConnectionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.VirtualNetworkGatewayConnectionsResetSharedKeyOperation StartResetSharedKey(string resourceGroupName, string virtualNetworkGatewayConnectionName, Azure.ResourceManager.Network.Models.ConnectionResetSharedKey parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.VirtualNetworkGatewayConnectionsResetSharedKeyOperation> StartResetSharedKeyAsync(string resourceGroupName, string virtualNetworkGatewayConnectionName, Azure.ResourceManager.Network.Models.ConnectionResetSharedKey parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.VirtualNetworkGatewayConnectionsSetSharedKeyOperation StartSetSharedKey(string resourceGroupName, string virtualNetworkGatewayConnectionName, Azure.ResourceManager.Network.Models.ConnectionSharedKey parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.VirtualNetworkGatewayConnectionsSetSharedKeyOperation> StartSetSharedKeyAsync(string resourceGroupName, string virtualNetworkGatewayConnectionName, Azure.ResourceManager.Network.Models.ConnectionSharedKey parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.VirtualNetworkGatewayConnectionsStartPacketCaptureOperation StartStartPacketCapture(string resourceGroupName, string virtualNetworkGatewayConnectionName, Azure.ResourceManager.Network.Models.VpnPacketCaptureStartParameters parameters = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.VirtualNetworkGatewayConnectionsStartPacketCaptureOperation> StartStartPacketCaptureAsync(string resourceGroupName, string virtualNetworkGatewayConnectionName, Azure.ResourceManager.Network.Models.VpnPacketCaptureStartParameters parameters = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.VirtualNetworkGatewayConnectionsStopPacketCaptureOperation StartStopPacketCapture(string resourceGroupName, string virtualNetworkGatewayConnectionName, Azure.ResourceManager.Network.Models.VpnPacketCaptureStopParameters parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.VirtualNetworkGatewayConnectionsStopPacketCaptureOperation> StartStopPacketCaptureAsync(string resourceGroupName, string virtualNetworkGatewayConnectionName, Azure.ResourceManager.Network.Models.VpnPacketCaptureStopParameters parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.VirtualNetworkGatewayConnectionsUpdateTagsOperation StartUpdateTags(string resourceGroupName, string virtualNetworkGatewayConnectionName, Azure.ResourceManager.Network.Models.TagsObject parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.VirtualNetworkGatewayConnectionsUpdateTagsOperation> StartUpdateTagsAsync(string resourceGroupName, string virtualNetworkGatewayConnectionName, Azure.ResourceManager.Network.Models.TagsObject parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class VirtualNetworkGatewayConnectionsResetSharedKeyOperation : Azure.Operation<Azure.ResourceManager.Network.Models.ConnectionResetSharedKey>
    {
        protected VirtualNetworkGatewayConnectionsResetSharedKeyOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.ConnectionResetSharedKey Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.ConnectionResetSharedKey>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.ConnectionResetSharedKey>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class VirtualNetworkGatewayConnectionsSetSharedKeyOperation : Azure.Operation<Azure.ResourceManager.Network.Models.ConnectionSharedKey>
    {
        protected VirtualNetworkGatewayConnectionsSetSharedKeyOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.ConnectionSharedKey Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.ConnectionSharedKey>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.ConnectionSharedKey>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class VirtualNetworkGatewayConnectionsStartPacketCaptureOperation : Azure.Operation<string>
    {
        protected VirtualNetworkGatewayConnectionsStartPacketCaptureOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override string Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<string>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<string>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class VirtualNetworkGatewayConnectionsStopPacketCaptureOperation : Azure.Operation<string>
    {
        protected VirtualNetworkGatewayConnectionsStopPacketCaptureOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override string Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<string>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<string>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class VirtualNetworkGatewayConnectionsUpdateTagsOperation : Azure.Operation<Azure.ResourceManager.Network.Models.VirtualNetworkGatewayConnection>
    {
        protected VirtualNetworkGatewayConnectionsUpdateTagsOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.VirtualNetworkGatewayConnection Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.VirtualNetworkGatewayConnection>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.VirtualNetworkGatewayConnection>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class VirtualNetworkGatewaysCreateOrUpdateOperation : Azure.Operation<Azure.ResourceManager.Network.Models.VirtualNetworkGateway>
    {
        protected VirtualNetworkGatewaysCreateOrUpdateOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.VirtualNetworkGateway Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.VirtualNetworkGateway>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.VirtualNetworkGateway>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class VirtualNetworkGatewaysDeleteOperation : Azure.Operation<Azure.Response>
    {
        protected VirtualNetworkGatewaysDeleteOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class VirtualNetworkGatewaysDisconnectVirtualNetworkGatewayVpnConnectionsOperation : Azure.Operation<Azure.Response>
    {
        protected VirtualNetworkGatewaysDisconnectVirtualNetworkGatewayVpnConnectionsOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class VirtualNetworkGatewaysGeneratevpnclientpackageOperation : Azure.Operation<string>
    {
        protected VirtualNetworkGatewaysGeneratevpnclientpackageOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override string Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<string>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<string>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class VirtualNetworkGatewaysGenerateVpnProfileOperation : Azure.Operation<string>
    {
        protected VirtualNetworkGatewaysGenerateVpnProfileOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override string Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<string>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<string>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class VirtualNetworkGatewaysGetAdvertisedRoutesOperation : Azure.Operation<Azure.ResourceManager.Network.Models.GatewayRouteListResult>
    {
        protected VirtualNetworkGatewaysGetAdvertisedRoutesOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.GatewayRouteListResult Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.GatewayRouteListResult>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.GatewayRouteListResult>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class VirtualNetworkGatewaysGetBgpPeerStatusOperation : Azure.Operation<Azure.ResourceManager.Network.Models.BgpPeerStatusListResult>
    {
        protected VirtualNetworkGatewaysGetBgpPeerStatusOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.BgpPeerStatusListResult Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.BgpPeerStatusListResult>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.BgpPeerStatusListResult>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class VirtualNetworkGatewaysGetLearnedRoutesOperation : Azure.Operation<Azure.ResourceManager.Network.Models.GatewayRouteListResult>
    {
        protected VirtualNetworkGatewaysGetLearnedRoutesOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.GatewayRouteListResult Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.GatewayRouteListResult>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.GatewayRouteListResult>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class VirtualNetworkGatewaysGetVpnclientConnectionHealthOperation : Azure.Operation<Azure.ResourceManager.Network.Models.VpnClientConnectionHealthDetailListResult>
    {
        protected VirtualNetworkGatewaysGetVpnclientConnectionHealthOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.VpnClientConnectionHealthDetailListResult Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.VpnClientConnectionHealthDetailListResult>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.VpnClientConnectionHealthDetailListResult>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class VirtualNetworkGatewaysGetVpnclientIpsecParametersOperation : Azure.Operation<Azure.ResourceManager.Network.Models.VpnClientIPsecParameters>
    {
        protected VirtualNetworkGatewaysGetVpnclientIpsecParametersOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.VpnClientIPsecParameters Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.VpnClientIPsecParameters>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.VpnClientIPsecParameters>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class VirtualNetworkGatewaysGetVpnProfilePackageUrlOperation : Azure.Operation<string>
    {
        protected VirtualNetworkGatewaysGetVpnProfilePackageUrlOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override string Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<string>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<string>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class VirtualNetworkGatewaysOperations
    {
        protected VirtualNetworkGatewaysOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.VirtualNetworkGateway> Get(string resourceGroupName, string virtualNetworkGatewayName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.VirtualNetworkGateway>> GetAsync(string resourceGroupName, string virtualNetworkGatewayName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.VirtualNetworkGateway> List(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.VirtualNetworkGateway> ListAsync(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.VirtualNetworkGatewayConnectionListEntity> ListConnections(string resourceGroupName, string virtualNetworkGatewayName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.VirtualNetworkGatewayConnectionListEntity> ListConnectionsAsync(string resourceGroupName, string virtualNetworkGatewayName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.VirtualNetworkGatewaysCreateOrUpdateOperation StartCreateOrUpdate(string resourceGroupName, string virtualNetworkGatewayName, Azure.ResourceManager.Network.Models.VirtualNetworkGateway parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.VirtualNetworkGatewaysCreateOrUpdateOperation> StartCreateOrUpdateAsync(string resourceGroupName, string virtualNetworkGatewayName, Azure.ResourceManager.Network.Models.VirtualNetworkGateway parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.VirtualNetworkGatewaysDeleteOperation StartDelete(string resourceGroupName, string virtualNetworkGatewayName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.VirtualNetworkGatewaysDeleteOperation> StartDeleteAsync(string resourceGroupName, string virtualNetworkGatewayName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.VirtualNetworkGatewaysDisconnectVirtualNetworkGatewayVpnConnectionsOperation StartDisconnectVirtualNetworkGatewayVpnConnections(string resourceGroupName, string virtualNetworkGatewayName, Azure.ResourceManager.Network.Models.P2SVpnConnectionRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.VirtualNetworkGatewaysDisconnectVirtualNetworkGatewayVpnConnectionsOperation> StartDisconnectVirtualNetworkGatewayVpnConnectionsAsync(string resourceGroupName, string virtualNetworkGatewayName, Azure.ResourceManager.Network.Models.P2SVpnConnectionRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.VirtualNetworkGatewaysGeneratevpnclientpackageOperation StartGeneratevpnclientpackage(string resourceGroupName, string virtualNetworkGatewayName, Azure.ResourceManager.Network.Models.VpnClientParameters parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.VirtualNetworkGatewaysGeneratevpnclientpackageOperation> StartGeneratevpnclientpackageAsync(string resourceGroupName, string virtualNetworkGatewayName, Azure.ResourceManager.Network.Models.VpnClientParameters parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.VirtualNetworkGatewaysGenerateVpnProfileOperation StartGenerateVpnProfile(string resourceGroupName, string virtualNetworkGatewayName, Azure.ResourceManager.Network.Models.VpnClientParameters parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.VirtualNetworkGatewaysGenerateVpnProfileOperation> StartGenerateVpnProfileAsync(string resourceGroupName, string virtualNetworkGatewayName, Azure.ResourceManager.Network.Models.VpnClientParameters parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.VirtualNetworkGatewaysGetAdvertisedRoutesOperation StartGetAdvertisedRoutes(string resourceGroupName, string virtualNetworkGatewayName, string peer, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.VirtualNetworkGatewaysGetAdvertisedRoutesOperation> StartGetAdvertisedRoutesAsync(string resourceGroupName, string virtualNetworkGatewayName, string peer, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.VirtualNetworkGatewaysGetBgpPeerStatusOperation StartGetBgpPeerStatus(string resourceGroupName, string virtualNetworkGatewayName, string peer = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.VirtualNetworkGatewaysGetBgpPeerStatusOperation> StartGetBgpPeerStatusAsync(string resourceGroupName, string virtualNetworkGatewayName, string peer = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.VirtualNetworkGatewaysGetLearnedRoutesOperation StartGetLearnedRoutes(string resourceGroupName, string virtualNetworkGatewayName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.VirtualNetworkGatewaysGetLearnedRoutesOperation> StartGetLearnedRoutesAsync(string resourceGroupName, string virtualNetworkGatewayName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.VirtualNetworkGatewaysGetVpnclientConnectionHealthOperation StartGetVpnclientConnectionHealth(string resourceGroupName, string virtualNetworkGatewayName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.VirtualNetworkGatewaysGetVpnclientConnectionHealthOperation> StartGetVpnclientConnectionHealthAsync(string resourceGroupName, string virtualNetworkGatewayName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.VirtualNetworkGatewaysGetVpnclientIpsecParametersOperation StartGetVpnclientIpsecParameters(string resourceGroupName, string virtualNetworkGatewayName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.VirtualNetworkGatewaysGetVpnclientIpsecParametersOperation> StartGetVpnclientIpsecParametersAsync(string resourceGroupName, string virtualNetworkGatewayName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.VirtualNetworkGatewaysGetVpnProfilePackageUrlOperation StartGetVpnProfilePackageUrl(string resourceGroupName, string virtualNetworkGatewayName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.VirtualNetworkGatewaysGetVpnProfilePackageUrlOperation> StartGetVpnProfilePackageUrlAsync(string resourceGroupName, string virtualNetworkGatewayName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.VirtualNetworkGatewaysResetOperation StartReset(string resourceGroupName, string virtualNetworkGatewayName, string gatewayVip = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.VirtualNetworkGatewaysResetOperation> StartResetAsync(string resourceGroupName, string virtualNetworkGatewayName, string gatewayVip = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.VirtualNetworkGatewaysResetVpnClientSharedKeyOperation StartResetVpnClientSharedKey(string resourceGroupName, string virtualNetworkGatewayName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.VirtualNetworkGatewaysResetVpnClientSharedKeyOperation> StartResetVpnClientSharedKeyAsync(string resourceGroupName, string virtualNetworkGatewayName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.VirtualNetworkGatewaysSetVpnclientIpsecParametersOperation StartSetVpnclientIpsecParameters(string resourceGroupName, string virtualNetworkGatewayName, Azure.ResourceManager.Network.Models.VpnClientIPsecParameters vpnclientIpsecParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.VirtualNetworkGatewaysSetVpnclientIpsecParametersOperation> StartSetVpnclientIpsecParametersAsync(string resourceGroupName, string virtualNetworkGatewayName, Azure.ResourceManager.Network.Models.VpnClientIPsecParameters vpnclientIpsecParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.VirtualNetworkGatewaysStartPacketCaptureOperation StartStartPacketCapture(string resourceGroupName, string virtualNetworkGatewayName, Azure.ResourceManager.Network.Models.VpnPacketCaptureStartParameters parameters = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.VirtualNetworkGatewaysStartPacketCaptureOperation> StartStartPacketCaptureAsync(string resourceGroupName, string virtualNetworkGatewayName, Azure.ResourceManager.Network.Models.VpnPacketCaptureStartParameters parameters = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.VirtualNetworkGatewaysStopPacketCaptureOperation StartStopPacketCapture(string resourceGroupName, string virtualNetworkGatewayName, Azure.ResourceManager.Network.Models.VpnPacketCaptureStopParameters parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.VirtualNetworkGatewaysStopPacketCaptureOperation> StartStopPacketCaptureAsync(string resourceGroupName, string virtualNetworkGatewayName, Azure.ResourceManager.Network.Models.VpnPacketCaptureStopParameters parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.VirtualNetworkGatewaysUpdateTagsOperation StartUpdateTags(string resourceGroupName, string virtualNetworkGatewayName, Azure.ResourceManager.Network.Models.TagsObject parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.VirtualNetworkGatewaysUpdateTagsOperation> StartUpdateTagsAsync(string resourceGroupName, string virtualNetworkGatewayName, Azure.ResourceManager.Network.Models.TagsObject parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Response<string> SupportedVpnDevices(string resourceGroupName, string virtualNetworkGatewayName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<string>> SupportedVpnDevicesAsync(string resourceGroupName, string virtualNetworkGatewayName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Response<string> VpnDeviceConfigurationScript(string resourceGroupName, string virtualNetworkGatewayConnectionName, Azure.ResourceManager.Network.Models.VpnDeviceScriptParameters parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<string>> VpnDeviceConfigurationScriptAsync(string resourceGroupName, string virtualNetworkGatewayConnectionName, Azure.ResourceManager.Network.Models.VpnDeviceScriptParameters parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class VirtualNetworkGatewaysResetOperation : Azure.Operation<Azure.ResourceManager.Network.Models.VirtualNetworkGateway>
    {
        protected VirtualNetworkGatewaysResetOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.VirtualNetworkGateway Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.VirtualNetworkGateway>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.VirtualNetworkGateway>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class VirtualNetworkGatewaysResetVpnClientSharedKeyOperation : Azure.Operation<Azure.Response>
    {
        protected VirtualNetworkGatewaysResetVpnClientSharedKeyOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class VirtualNetworkGatewaysSetVpnclientIpsecParametersOperation : Azure.Operation<Azure.ResourceManager.Network.Models.VpnClientIPsecParameters>
    {
        protected VirtualNetworkGatewaysSetVpnclientIpsecParametersOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.VpnClientIPsecParameters Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.VpnClientIPsecParameters>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.VpnClientIPsecParameters>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class VirtualNetworkGatewaysStartPacketCaptureOperation : Azure.Operation<string>
    {
        protected VirtualNetworkGatewaysStartPacketCaptureOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override string Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<string>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<string>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class VirtualNetworkGatewaysStopPacketCaptureOperation : Azure.Operation<string>
    {
        protected VirtualNetworkGatewaysStopPacketCaptureOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override string Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<string>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<string>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class VirtualNetworkGatewaysUpdateTagsOperation : Azure.Operation<Azure.ResourceManager.Network.Models.VirtualNetworkGateway>
    {
        protected VirtualNetworkGatewaysUpdateTagsOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.VirtualNetworkGateway Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.VirtualNetworkGateway>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.VirtualNetworkGateway>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class VirtualNetworkPeeringsCreateOrUpdateOperation : Azure.Operation<Azure.ResourceManager.Network.Models.VirtualNetworkPeering>
    {
        protected VirtualNetworkPeeringsCreateOrUpdateOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.VirtualNetworkPeering Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.VirtualNetworkPeering>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.VirtualNetworkPeering>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class VirtualNetworkPeeringsDeleteOperation : Azure.Operation<Azure.Response>
    {
        protected VirtualNetworkPeeringsDeleteOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class VirtualNetworkPeeringsOperations
    {
        protected VirtualNetworkPeeringsOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.VirtualNetworkPeering> Get(string resourceGroupName, string virtualNetworkName, string virtualNetworkPeeringName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.VirtualNetworkPeering>> GetAsync(string resourceGroupName, string virtualNetworkName, string virtualNetworkPeeringName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.VirtualNetworkPeering> List(string resourceGroupName, string virtualNetworkName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.VirtualNetworkPeering> ListAsync(string resourceGroupName, string virtualNetworkName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.VirtualNetworkPeeringsCreateOrUpdateOperation StartCreateOrUpdate(string resourceGroupName, string virtualNetworkName, string virtualNetworkPeeringName, Azure.ResourceManager.Network.Models.VirtualNetworkPeering virtualNetworkPeeringParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.VirtualNetworkPeeringsCreateOrUpdateOperation> StartCreateOrUpdateAsync(string resourceGroupName, string virtualNetworkName, string virtualNetworkPeeringName, Azure.ResourceManager.Network.Models.VirtualNetworkPeering virtualNetworkPeeringParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.VirtualNetworkPeeringsDeleteOperation StartDelete(string resourceGroupName, string virtualNetworkName, string virtualNetworkPeeringName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.VirtualNetworkPeeringsDeleteOperation> StartDeleteAsync(string resourceGroupName, string virtualNetworkName, string virtualNetworkPeeringName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class VirtualNetworksCreateOrUpdateOperation : Azure.Operation<Azure.ResourceManager.Network.Models.VirtualNetwork>
    {
        protected VirtualNetworksCreateOrUpdateOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.VirtualNetwork Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.VirtualNetwork>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.VirtualNetwork>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class VirtualNetworksDeleteOperation : Azure.Operation<Azure.Response>
    {
        protected VirtualNetworksDeleteOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class VirtualNetworksOperations
    {
        protected VirtualNetworksOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.IPAddressAvailabilityResult> CheckIPAddressAvailability(string resourceGroupName, string virtualNetworkName, string ipAddress, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.IPAddressAvailabilityResult>> CheckIPAddressAvailabilityAsync(string resourceGroupName, string virtualNetworkName, string ipAddress, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.VirtualNetwork> Get(string resourceGroupName, string virtualNetworkName, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.VirtualNetwork>> GetAsync(string resourceGroupName, string virtualNetworkName, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.VirtualNetwork> List(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.VirtualNetwork> ListAll(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.VirtualNetwork> ListAllAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.VirtualNetwork> ListAsync(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.VirtualNetworkUsage> ListUsage(string resourceGroupName, string virtualNetworkName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.VirtualNetworkUsage> ListUsageAsync(string resourceGroupName, string virtualNetworkName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.VirtualNetworksCreateOrUpdateOperation StartCreateOrUpdate(string resourceGroupName, string virtualNetworkName, Azure.ResourceManager.Network.Models.VirtualNetwork parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.VirtualNetworksCreateOrUpdateOperation> StartCreateOrUpdateAsync(string resourceGroupName, string virtualNetworkName, Azure.ResourceManager.Network.Models.VirtualNetwork parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.VirtualNetworksDeleteOperation StartDelete(string resourceGroupName, string virtualNetworkName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.VirtualNetworksDeleteOperation> StartDeleteAsync(string resourceGroupName, string virtualNetworkName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.VirtualNetwork> UpdateTags(string resourceGroupName, string virtualNetworkName, Azure.ResourceManager.Network.Models.TagsObject parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.VirtualNetwork>> UpdateTagsAsync(string resourceGroupName, string virtualNetworkName, Azure.ResourceManager.Network.Models.TagsObject parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class VirtualNetworkTapsCreateOrUpdateOperation : Azure.Operation<Azure.ResourceManager.Network.Models.VirtualNetworkTap>
    {
        protected VirtualNetworkTapsCreateOrUpdateOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.VirtualNetworkTap Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.VirtualNetworkTap>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.VirtualNetworkTap>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class VirtualNetworkTapsDeleteOperation : Azure.Operation<Azure.Response>
    {
        protected VirtualNetworkTapsDeleteOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class VirtualNetworkTapsOperations
    {
        protected VirtualNetworkTapsOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.VirtualNetworkTap> Get(string resourceGroupName, string tapName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.VirtualNetworkTap>> GetAsync(string resourceGroupName, string tapName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.VirtualNetworkTap> ListAll(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.VirtualNetworkTap> ListAllAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.VirtualNetworkTap> ListByResourceGroup(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.VirtualNetworkTap> ListByResourceGroupAsync(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.VirtualNetworkTapsCreateOrUpdateOperation StartCreateOrUpdate(string resourceGroupName, string tapName, Azure.ResourceManager.Network.Models.VirtualNetworkTap parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.VirtualNetworkTapsCreateOrUpdateOperation> StartCreateOrUpdateAsync(string resourceGroupName, string tapName, Azure.ResourceManager.Network.Models.VirtualNetworkTap parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.VirtualNetworkTapsDeleteOperation StartDelete(string resourceGroupName, string tapName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.VirtualNetworkTapsDeleteOperation> StartDeleteAsync(string resourceGroupName, string tapName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.VirtualNetworkTap> UpdateTags(string resourceGroupName, string tapName, Azure.ResourceManager.Network.Models.TagsObject tapParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.VirtualNetworkTap>> UpdateTagsAsync(string resourceGroupName, string tapName, Azure.ResourceManager.Network.Models.TagsObject tapParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class VirtualRouterPeeringsCreateOrUpdateOperation : Azure.Operation<Azure.ResourceManager.Network.Models.VirtualRouterPeering>
    {
        protected VirtualRouterPeeringsCreateOrUpdateOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.VirtualRouterPeering Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.VirtualRouterPeering>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.VirtualRouterPeering>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class VirtualRouterPeeringsDeleteOperation : Azure.Operation<Azure.Response>
    {
        protected VirtualRouterPeeringsDeleteOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class VirtualRouterPeeringsOperations
    {
        protected VirtualRouterPeeringsOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.VirtualRouterPeering> Get(string resourceGroupName, string virtualRouterName, string peeringName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.VirtualRouterPeering>> GetAsync(string resourceGroupName, string virtualRouterName, string peeringName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.VirtualRouterPeering> List(string resourceGroupName, string virtualRouterName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.VirtualRouterPeering> ListAsync(string resourceGroupName, string virtualRouterName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.VirtualRouterPeeringsCreateOrUpdateOperation StartCreateOrUpdate(string resourceGroupName, string virtualRouterName, string peeringName, Azure.ResourceManager.Network.Models.VirtualRouterPeering parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.VirtualRouterPeeringsCreateOrUpdateOperation> StartCreateOrUpdateAsync(string resourceGroupName, string virtualRouterName, string peeringName, Azure.ResourceManager.Network.Models.VirtualRouterPeering parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.VirtualRouterPeeringsDeleteOperation StartDelete(string resourceGroupName, string virtualRouterName, string peeringName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.VirtualRouterPeeringsDeleteOperation> StartDeleteAsync(string resourceGroupName, string virtualRouterName, string peeringName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class VirtualRoutersCreateOrUpdateOperation : Azure.Operation<Azure.ResourceManager.Network.Models.VirtualRouter>
    {
        protected VirtualRoutersCreateOrUpdateOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.VirtualRouter Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.VirtualRouter>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.VirtualRouter>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class VirtualRoutersDeleteOperation : Azure.Operation<Azure.Response>
    {
        protected VirtualRoutersDeleteOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class VirtualRoutersOperations
    {
        protected VirtualRoutersOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.VirtualRouter> Get(string resourceGroupName, string virtualRouterName, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.VirtualRouter>> GetAsync(string resourceGroupName, string virtualRouterName, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.VirtualRouter> List(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.VirtualRouter> ListAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.VirtualRouter> ListByResourceGroup(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.VirtualRouter> ListByResourceGroupAsync(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.VirtualRoutersCreateOrUpdateOperation StartCreateOrUpdate(string resourceGroupName, string virtualRouterName, Azure.ResourceManager.Network.Models.VirtualRouter parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.VirtualRoutersCreateOrUpdateOperation> StartCreateOrUpdateAsync(string resourceGroupName, string virtualRouterName, Azure.ResourceManager.Network.Models.VirtualRouter parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.VirtualRoutersDeleteOperation StartDelete(string resourceGroupName, string virtualRouterName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.VirtualRoutersDeleteOperation> StartDeleteAsync(string resourceGroupName, string virtualRouterName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class VirtualWansCreateOrUpdateOperation : Azure.Operation<Azure.ResourceManager.Network.Models.VirtualWAN>
    {
        protected VirtualWansCreateOrUpdateOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.VirtualWAN Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.VirtualWAN>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.VirtualWAN>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class VirtualWansDeleteOperation : Azure.Operation<Azure.Response>
    {
        protected VirtualWansDeleteOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class VirtualWansOperations
    {
        protected VirtualWansOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.VirtualWAN> Get(string resourceGroupName, string virtualWANName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.VirtualWAN>> GetAsync(string resourceGroupName, string virtualWANName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.VirtualWAN> List(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.VirtualWAN> ListAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.VirtualWAN> ListByResourceGroup(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.VirtualWAN> ListByResourceGroupAsync(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.VirtualWansCreateOrUpdateOperation StartCreateOrUpdate(string resourceGroupName, string virtualWANName, Azure.ResourceManager.Network.Models.VirtualWAN wANParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.VirtualWansCreateOrUpdateOperation> StartCreateOrUpdateAsync(string resourceGroupName, string virtualWANName, Azure.ResourceManager.Network.Models.VirtualWAN wANParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.VirtualWansDeleteOperation StartDelete(string resourceGroupName, string virtualWANName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.VirtualWansDeleteOperation> StartDeleteAsync(string resourceGroupName, string virtualWANName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.VirtualWAN> UpdateTags(string resourceGroupName, string virtualWANName, Azure.ResourceManager.Network.Models.TagsObject wANParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.VirtualWAN>> UpdateTagsAsync(string resourceGroupName, string virtualWANName, Azure.ResourceManager.Network.Models.TagsObject wANParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class VpnConnectionsCreateOrUpdateOperation : Azure.Operation<Azure.ResourceManager.Network.Models.VpnConnection>
    {
        protected VpnConnectionsCreateOrUpdateOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.VpnConnection Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.VpnConnection>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.VpnConnection>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class VpnConnectionsDeleteOperation : Azure.Operation<Azure.Response>
    {
        protected VpnConnectionsDeleteOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class VpnConnectionsOperations
    {
        protected VpnConnectionsOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.VpnConnection> Get(string resourceGroupName, string gatewayName, string connectionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.VpnConnection>> GetAsync(string resourceGroupName, string gatewayName, string connectionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.VpnConnection> ListByVpnGateway(string resourceGroupName, string gatewayName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.VpnConnection> ListByVpnGatewayAsync(string resourceGroupName, string gatewayName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.VpnConnectionsCreateOrUpdateOperation StartCreateOrUpdate(string resourceGroupName, string gatewayName, string connectionName, Azure.ResourceManager.Network.Models.VpnConnection vpnConnectionParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.VpnConnectionsCreateOrUpdateOperation> StartCreateOrUpdateAsync(string resourceGroupName, string gatewayName, string connectionName, Azure.ResourceManager.Network.Models.VpnConnection vpnConnectionParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.VpnConnectionsDeleteOperation StartDelete(string resourceGroupName, string gatewayName, string connectionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.VpnConnectionsDeleteOperation> StartDeleteAsync(string resourceGroupName, string gatewayName, string connectionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class VpnGatewaysCreateOrUpdateOperation : Azure.Operation<Azure.ResourceManager.Network.Models.VpnGateway>
    {
        protected VpnGatewaysCreateOrUpdateOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.VpnGateway Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.VpnGateway>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.VpnGateway>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class VpnGatewaysDeleteOperation : Azure.Operation<Azure.Response>
    {
        protected VpnGatewaysDeleteOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class VpnGatewaysOperations
    {
        protected VpnGatewaysOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.VpnGateway> Get(string resourceGroupName, string gatewayName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.VpnGateway>> GetAsync(string resourceGroupName, string gatewayName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.VpnGateway> List(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.VpnGateway> ListAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.VpnGateway> ListByResourceGroup(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.VpnGateway> ListByResourceGroupAsync(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.VpnGatewaysCreateOrUpdateOperation StartCreateOrUpdate(string resourceGroupName, string gatewayName, Azure.ResourceManager.Network.Models.VpnGateway vpnGatewayParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.VpnGatewaysCreateOrUpdateOperation> StartCreateOrUpdateAsync(string resourceGroupName, string gatewayName, Azure.ResourceManager.Network.Models.VpnGateway vpnGatewayParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.VpnGatewaysDeleteOperation StartDelete(string resourceGroupName, string gatewayName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.VpnGatewaysDeleteOperation> StartDeleteAsync(string resourceGroupName, string gatewayName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.VpnGatewaysResetOperation StartReset(string resourceGroupName, string gatewayName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.VpnGatewaysResetOperation> StartResetAsync(string resourceGroupName, string gatewayName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.VpnGateway> UpdateTags(string resourceGroupName, string gatewayName, Azure.ResourceManager.Network.Models.TagsObject vpnGatewayParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.VpnGateway>> UpdateTagsAsync(string resourceGroupName, string gatewayName, Azure.ResourceManager.Network.Models.TagsObject vpnGatewayParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class VpnGatewaysResetOperation : Azure.Operation<Azure.ResourceManager.Network.Models.VpnGateway>
    {
        protected VpnGatewaysResetOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.VpnGateway Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.VpnGateway>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.VpnGateway>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class VpnLinkConnectionsOperations
    {
        protected VpnLinkConnectionsOperations() { }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.VpnSiteLinkConnection> ListByVpnConnection(string resourceGroupName, string gatewayName, string connectionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.VpnSiteLinkConnection> ListByVpnConnectionAsync(string resourceGroupName, string gatewayName, string connectionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class VpnServerConfigurationsAssociatedWithVirtualWanListOperation : Azure.Operation<Azure.ResourceManager.Network.Models.VpnServerConfigurationsResponse>
    {
        protected VpnServerConfigurationsAssociatedWithVirtualWanListOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.VpnServerConfigurationsResponse Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.VpnServerConfigurationsResponse>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.VpnServerConfigurationsResponse>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class VpnServerConfigurationsAssociatedWithVirtualWanOperations
    {
        protected VpnServerConfigurationsAssociatedWithVirtualWanOperations() { }
        public virtual Azure.ResourceManager.Network.VpnServerConfigurationsAssociatedWithVirtualWanListOperation StartList(string resourceGroupName, string virtualWANName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.VpnServerConfigurationsAssociatedWithVirtualWanListOperation> StartListAsync(string resourceGroupName, string virtualWANName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class VpnServerConfigurationsCreateOrUpdateOperation : Azure.Operation<Azure.ResourceManager.Network.Models.VpnServerConfiguration>
    {
        protected VpnServerConfigurationsCreateOrUpdateOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.VpnServerConfiguration Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.VpnServerConfiguration>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.VpnServerConfiguration>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class VpnServerConfigurationsDeleteOperation : Azure.Operation<Azure.Response>
    {
        protected VpnServerConfigurationsDeleteOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class VpnServerConfigurationsOperations
    {
        protected VpnServerConfigurationsOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.VpnServerConfiguration> Get(string resourceGroupName, string vpnServerConfigurationName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.VpnServerConfiguration>> GetAsync(string resourceGroupName, string vpnServerConfigurationName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.VpnServerConfiguration> List(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.VpnServerConfiguration> ListAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.VpnServerConfiguration> ListByResourceGroup(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.VpnServerConfiguration> ListByResourceGroupAsync(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.VpnServerConfigurationsCreateOrUpdateOperation StartCreateOrUpdate(string resourceGroupName, string vpnServerConfigurationName, Azure.ResourceManager.Network.Models.VpnServerConfiguration vpnServerConfigurationParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.VpnServerConfigurationsCreateOrUpdateOperation> StartCreateOrUpdateAsync(string resourceGroupName, string vpnServerConfigurationName, Azure.ResourceManager.Network.Models.VpnServerConfiguration vpnServerConfigurationParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.VpnServerConfigurationsDeleteOperation StartDelete(string resourceGroupName, string vpnServerConfigurationName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.VpnServerConfigurationsDeleteOperation> StartDeleteAsync(string resourceGroupName, string vpnServerConfigurationName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.VpnServerConfiguration> UpdateTags(string resourceGroupName, string vpnServerConfigurationName, Azure.ResourceManager.Network.Models.TagsObject vpnServerConfigurationParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.VpnServerConfiguration>> UpdateTagsAsync(string resourceGroupName, string vpnServerConfigurationName, Azure.ResourceManager.Network.Models.TagsObject vpnServerConfigurationParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class VpnSiteLinkConnectionsOperations
    {
        protected VpnSiteLinkConnectionsOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.VpnSiteLinkConnection> Get(string resourceGroupName, string gatewayName, string connectionName, string linkConnectionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.VpnSiteLinkConnection>> GetAsync(string resourceGroupName, string gatewayName, string connectionName, string linkConnectionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class VpnSiteLinksOperations
    {
        protected VpnSiteLinksOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.VpnSiteLink> Get(string resourceGroupName, string vpnSiteName, string vpnSiteLinkName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.VpnSiteLink>> GetAsync(string resourceGroupName, string vpnSiteName, string vpnSiteLinkName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.VpnSiteLink> ListByVpnSite(string resourceGroupName, string vpnSiteName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.VpnSiteLink> ListByVpnSiteAsync(string resourceGroupName, string vpnSiteName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class VpnSitesConfigurationDownloadOperation : Azure.Operation<Azure.Response>
    {
        protected VpnSitesConfigurationDownloadOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class VpnSitesConfigurationOperations
    {
        protected VpnSitesConfigurationOperations() { }
        public virtual Azure.ResourceManager.Network.VpnSitesConfigurationDownloadOperation StartDownload(string resourceGroupName, string virtualWANName, Azure.ResourceManager.Network.Models.GetVpnSitesConfigurationRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.VpnSitesConfigurationDownloadOperation> StartDownloadAsync(string resourceGroupName, string virtualWANName, Azure.ResourceManager.Network.Models.GetVpnSitesConfigurationRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class VpnSitesCreateOrUpdateOperation : Azure.Operation<Azure.ResourceManager.Network.Models.VpnSite>
    {
        protected VpnSitesCreateOrUpdateOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.ResourceManager.Network.Models.VpnSite Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.VpnSite>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.ResourceManager.Network.Models.VpnSite>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class VpnSitesDeleteOperation : Azure.Operation<Azure.Response>
    {
        protected VpnSitesDeleteOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class VpnSitesOperations
    {
        protected VpnSitesOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.VpnSite> Get(string resourceGroupName, string vpnSiteName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.VpnSite>> GetAsync(string resourceGroupName, string vpnSiteName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.VpnSite> List(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.VpnSite> ListAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.VpnSite> ListByResourceGroup(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.VpnSite> ListByResourceGroupAsync(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.VpnSitesCreateOrUpdateOperation StartCreateOrUpdate(string resourceGroupName, string vpnSiteName, Azure.ResourceManager.Network.Models.VpnSite vpnSiteParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.VpnSitesCreateOrUpdateOperation> StartCreateOrUpdateAsync(string resourceGroupName, string vpnSiteName, Azure.ResourceManager.Network.Models.VpnSite vpnSiteParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.VpnSitesDeleteOperation StartDelete(string resourceGroupName, string vpnSiteName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.VpnSitesDeleteOperation> StartDeleteAsync(string resourceGroupName, string vpnSiteName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.VpnSite> UpdateTags(string resourceGroupName, string vpnSiteName, Azure.ResourceManager.Network.Models.TagsObject vpnSiteParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.VpnSite>> UpdateTagsAsync(string resourceGroupName, string vpnSiteName, Azure.ResourceManager.Network.Models.TagsObject vpnSiteParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class WebApplicationFirewallPoliciesDeleteOperation : Azure.Operation<Azure.Response>
    {
        protected WebApplicationFirewallPoliciesDeleteOperation() { }
        public override bool HasCompleted { get { throw null; } }
        public override bool HasValue { get { throw null; } }
        public override string Id { get { throw null; } }
        public override Azure.Response Value { get { throw null; } }
        public override Azure.Response GetRawResponse() { throw null; }
        public override Azure.Response UpdateStatus(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response> UpdateStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public override System.Threading.Tasks.ValueTask<Azure.Response<Azure.Response>> WaitForCompletionAsync(System.TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
    public partial class WebApplicationFirewallPoliciesOperations
    {
        protected WebApplicationFirewallPoliciesOperations() { }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.WebApplicationFirewallPolicy> CreateOrUpdate(string resourceGroupName, string policyName, Azure.ResourceManager.Network.Models.WebApplicationFirewallPolicy parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.WebApplicationFirewallPolicy>> CreateOrUpdateAsync(string resourceGroupName, string policyName, Azure.ResourceManager.Network.Models.WebApplicationFirewallPolicy parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Response<Azure.ResourceManager.Network.Models.WebApplicationFirewallPolicy> Get(string resourceGroupName, string policyName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response<Azure.ResourceManager.Network.Models.WebApplicationFirewallPolicy>> GetAsync(string resourceGroupName, string policyName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.WebApplicationFirewallPolicy> List(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.Pageable<Azure.ResourceManager.Network.Models.WebApplicationFirewallPolicy> ListAll(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.WebApplicationFirewallPolicy> ListAllAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.AsyncPageable<Azure.ResourceManager.Network.Models.WebApplicationFirewallPolicy> ListAsync(string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual Azure.ResourceManager.Network.WebApplicationFirewallPoliciesDeleteOperation StartDelete(string resourceGroupName, string policyName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.ResourceManager.Network.WebApplicationFirewallPoliciesDeleteOperation> StartDeleteAsync(string resourceGroupName, string policyName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }
    }
}
namespace Azure.ResourceManager.Network.Models
{
    public partial class AadAuthenticationParameters
    {
        public AadAuthenticationParameters() { }
        public string AadAudience { get { throw null; } set { } }
        public string AadIssuer { get { throw null; } set { } }
        public string AadTenant { get { throw null; } set { } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct Access : System.IEquatable<Azure.ResourceManager.Network.Models.Access>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public Access(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.Access Allow { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.Access Deny { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.Access other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.Access left, Azure.ResourceManager.Network.Models.Access right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.Access (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.Access left, Azure.ResourceManager.Network.Models.Access right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class AddressSpace
    {
        public AddressSpace() { }
        public System.Collections.Generic.IList<string> AddressPrefixes { get { throw null; } }
    }
    public partial class ApplicationGateway : Azure.ResourceManager.Network.Models.Resource
    {
        public ApplicationGateway() { }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.ApplicationGatewayAuthenticationCertificate> AuthenticationCertificates { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ApplicationGatewayAutoscaleConfiguration AutoscaleConfiguration { get { throw null; } set { } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.ApplicationGatewayBackendAddressPool> BackendAddressPools { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.ApplicationGatewayBackendHttpSettings> BackendHttpSettingsCollection { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.ApplicationGatewayCustomError> CustomErrorConfigurations { get { throw null; } }
        public bool? EnableFips { get { throw null; } set { } }
        public bool? EnableHttp2 { get { throw null; } set { } }
        public string Etag { get { throw null; } }
        public Azure.ResourceManager.Network.Models.SubResource FirewallPolicy { get { throw null; } set { } }
        public bool? ForceFirewallPolicyAssociation { get { throw null; } set { } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.ApplicationGatewayFrontendIPConfiguration> FrontendIPConfigurations { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.ApplicationGatewayFrontendPort> FrontendPorts { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.ApplicationGatewayIPConfiguration> GatewayIPConfigurations { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.ApplicationGatewayHttpListener> HttpListeners { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ManagedServiceIdentity Identity { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ApplicationGatewayOperationalState? OperationalState { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.ApplicationGatewayProbe> Probes { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.ApplicationGatewayRedirectConfiguration> RedirectConfigurations { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.ApplicationGatewayRequestRoutingRule> RequestRoutingRules { get { throw null; } }
        public string ResourceGuid { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.ApplicationGatewayRewriteRuleSet> RewriteRuleSets { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ApplicationGatewaySku Sku { get { throw null; } set { } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.ApplicationGatewaySslCertificate> SslCertificates { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ApplicationGatewaySslPolicy SslPolicy { get { throw null; } set { } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.ApplicationGatewayTrustedRootCertificate> TrustedRootCertificates { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.ApplicationGatewayUrlPathMap> UrlPathMaps { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ApplicationGatewayWebApplicationFirewallConfiguration WebApplicationFirewallConfiguration { get { throw null; } set { } }
        public System.Collections.Generic.IList<string> Zones { get { throw null; } }
    }
    public partial class ApplicationGatewayAuthenticationCertificate : Azure.ResourceManager.Network.Models.SubResource
    {
        public ApplicationGatewayAuthenticationCertificate() { }
        public string Data { get { throw null; } set { } }
        public string Etag { get { throw null; } }
        public string Name { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public string Type { get { throw null; } }
    }
    public partial class ApplicationGatewayAutoscaleConfiguration
    {
        public ApplicationGatewayAutoscaleConfiguration(int minCapacity) { }
        public int? MaxCapacity { get { throw null; } set { } }
        public int MinCapacity { get { throw null; } set { } }
    }
    public partial class ApplicationGatewayAvailableSslOptions : Azure.ResourceManager.Network.Models.Resource
    {
        public ApplicationGatewayAvailableSslOptions() { }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.ApplicationGatewaySslCipherSuite> AvailableCipherSuites { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.ApplicationGatewaySslProtocol> AvailableProtocols { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ApplicationGatewaySslPolicyName? DefaultPolicy { get { throw null; } set { } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.SubResource> PredefinedPolicies { get { throw null; } }
    }
    public partial class ApplicationGatewayAvailableWafRuleSetsResult
    {
        internal ApplicationGatewayAvailableWafRuleSetsResult() { }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.ApplicationGatewayFirewallRuleSet> Value { get { throw null; } }
    }
    public partial class ApplicationGatewayBackendAddress
    {
        public ApplicationGatewayBackendAddress() { }
        public string Fqdn { get { throw null; } set { } }
        public string IpAddress { get { throw null; } set { } }
    }
    public partial class ApplicationGatewayBackendAddressPool : Azure.ResourceManager.Network.Models.SubResource
    {
        public ApplicationGatewayBackendAddressPool() { }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.ApplicationGatewayBackendAddress> BackendAddresses { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.NetworkInterfaceIPConfiguration> BackendIPConfigurations { get { throw null; } }
        public string Etag { get { throw null; } }
        public string Name { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public string Type { get { throw null; } }
    }
    public partial class ApplicationGatewayBackendHealth
    {
        internal ApplicationGatewayBackendHealth() { }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.ApplicationGatewayBackendHealthPool> BackendAddressPools { get { throw null; } }
    }
    public partial class ApplicationGatewayBackendHealthHttpSettings
    {
        internal ApplicationGatewayBackendHealthHttpSettings() { }
        public Azure.ResourceManager.Network.Models.ApplicationGatewayBackendHttpSettings BackendHttpSettings { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.ApplicationGatewayBackendHealthServer> Servers { get { throw null; } }
    }
    public partial class ApplicationGatewayBackendHealthOnDemand
    {
        internal ApplicationGatewayBackendHealthOnDemand() { }
        public Azure.ResourceManager.Network.Models.ApplicationGatewayBackendAddressPool BackendAddressPool { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ApplicationGatewayBackendHealthHttpSettings BackendHealthHttpSettings { get { throw null; } }
    }
    public partial class ApplicationGatewayBackendHealthPool
    {
        internal ApplicationGatewayBackendHealthPool() { }
        public Azure.ResourceManager.Network.Models.ApplicationGatewayBackendAddressPool BackendAddressPool { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.ApplicationGatewayBackendHealthHttpSettings> BackendHttpSettingsCollection { get { throw null; } }
    }
    public partial class ApplicationGatewayBackendHealthServer
    {
        internal ApplicationGatewayBackendHealthServer() { }
        public string Address { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ApplicationGatewayBackendHealthServerHealth? Health { get { throw null; } }
        public string HealthProbeLog { get { throw null; } }
        public Azure.ResourceManager.Network.Models.NetworkInterfaceIPConfiguration IpConfiguration { get { throw null; } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct ApplicationGatewayBackendHealthServerHealth : System.IEquatable<Azure.ResourceManager.Network.Models.ApplicationGatewayBackendHealthServerHealth>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public ApplicationGatewayBackendHealthServerHealth(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.ApplicationGatewayBackendHealthServerHealth Down { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ApplicationGatewayBackendHealthServerHealth Draining { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ApplicationGatewayBackendHealthServerHealth Partial { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ApplicationGatewayBackendHealthServerHealth Unknown { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ApplicationGatewayBackendHealthServerHealth Up { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.ApplicationGatewayBackendHealthServerHealth other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.ApplicationGatewayBackendHealthServerHealth left, Azure.ResourceManager.Network.Models.ApplicationGatewayBackendHealthServerHealth right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.ApplicationGatewayBackendHealthServerHealth (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.ApplicationGatewayBackendHealthServerHealth left, Azure.ResourceManager.Network.Models.ApplicationGatewayBackendHealthServerHealth right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class ApplicationGatewayBackendHttpSettings : Azure.ResourceManager.Network.Models.SubResource
    {
        public ApplicationGatewayBackendHttpSettings() { }
        public string AffinityCookieName { get { throw null; } set { } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.SubResource> AuthenticationCertificates { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ApplicationGatewayConnectionDraining ConnectionDraining { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ApplicationGatewayCookieBasedAffinity? CookieBasedAffinity { get { throw null; } set { } }
        public string Etag { get { throw null; } }
        public string HostName { get { throw null; } set { } }
        public string Name { get { throw null; } set { } }
        public string Path { get { throw null; } set { } }
        public bool? PickHostNameFromBackendAddress { get { throw null; } set { } }
        public int? Port { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.SubResource Probe { get { throw null; } set { } }
        public bool? ProbeEnabled { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ApplicationGatewayProtocol? Protocol { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public int? RequestTimeout { get { throw null; } set { } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.SubResource> TrustedRootCertificates { get { throw null; } }
        public string Type { get { throw null; } }
    }
    public partial class ApplicationGatewayConnectionDraining
    {
        public ApplicationGatewayConnectionDraining(bool enabled, int drainTimeoutInSec) { }
        public int DrainTimeoutInSec { get { throw null; } set { } }
        public bool Enabled { get { throw null; } set { } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct ApplicationGatewayCookieBasedAffinity : System.IEquatable<Azure.ResourceManager.Network.Models.ApplicationGatewayCookieBasedAffinity>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public ApplicationGatewayCookieBasedAffinity(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.ApplicationGatewayCookieBasedAffinity Disabled { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ApplicationGatewayCookieBasedAffinity Enabled { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.ApplicationGatewayCookieBasedAffinity other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.ApplicationGatewayCookieBasedAffinity left, Azure.ResourceManager.Network.Models.ApplicationGatewayCookieBasedAffinity right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.ApplicationGatewayCookieBasedAffinity (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.ApplicationGatewayCookieBasedAffinity left, Azure.ResourceManager.Network.Models.ApplicationGatewayCookieBasedAffinity right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class ApplicationGatewayCustomError
    {
        public ApplicationGatewayCustomError() { }
        public string CustomErrorPageUrl { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ApplicationGatewayCustomErrorStatusCode? StatusCode { get { throw null; } set { } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct ApplicationGatewayCustomErrorStatusCode : System.IEquatable<Azure.ResourceManager.Network.Models.ApplicationGatewayCustomErrorStatusCode>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public ApplicationGatewayCustomErrorStatusCode(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.ApplicationGatewayCustomErrorStatusCode HttpStatus403 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ApplicationGatewayCustomErrorStatusCode HttpStatus502 { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.ApplicationGatewayCustomErrorStatusCode other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.ApplicationGatewayCustomErrorStatusCode left, Azure.ResourceManager.Network.Models.ApplicationGatewayCustomErrorStatusCode right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.ApplicationGatewayCustomErrorStatusCode (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.ApplicationGatewayCustomErrorStatusCode left, Azure.ResourceManager.Network.Models.ApplicationGatewayCustomErrorStatusCode right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class ApplicationGatewayFirewallDisabledRuleGroup
    {
        public ApplicationGatewayFirewallDisabledRuleGroup(string ruleGroupName) { }
        public string RuleGroupName { get { throw null; } set { } }
        public System.Collections.Generic.IList<int> Rules { get { throw null; } }
    }
    public partial class ApplicationGatewayFirewallExclusion
    {
        public ApplicationGatewayFirewallExclusion(string matchVariable, string selectorMatchOperator, string selector) { }
        public string MatchVariable { get { throw null; } set { } }
        public string Selector { get { throw null; } set { } }
        public string SelectorMatchOperator { get { throw null; } set { } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct ApplicationGatewayFirewallMode : System.IEquatable<Azure.ResourceManager.Network.Models.ApplicationGatewayFirewallMode>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public ApplicationGatewayFirewallMode(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.ApplicationGatewayFirewallMode Detection { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ApplicationGatewayFirewallMode Prevention { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.ApplicationGatewayFirewallMode other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.ApplicationGatewayFirewallMode left, Azure.ResourceManager.Network.Models.ApplicationGatewayFirewallMode right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.ApplicationGatewayFirewallMode (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.ApplicationGatewayFirewallMode left, Azure.ResourceManager.Network.Models.ApplicationGatewayFirewallMode right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class ApplicationGatewayFirewallRule
    {
        public ApplicationGatewayFirewallRule(int ruleId) { }
        public string Description { get { throw null; } set { } }
        public int RuleId { get { throw null; } set { } }
    }
    public partial class ApplicationGatewayFirewallRuleGroup
    {
        public ApplicationGatewayFirewallRuleGroup(string ruleGroupName, System.Collections.Generic.IEnumerable<Azure.ResourceManager.Network.Models.ApplicationGatewayFirewallRule> rules) { }
        public string Description { get { throw null; } set { } }
        public string RuleGroupName { get { throw null; } set { } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.ApplicationGatewayFirewallRule> Rules { get { throw null; } }
    }
    public partial class ApplicationGatewayFirewallRuleSet : Azure.ResourceManager.Network.Models.Resource
    {
        public ApplicationGatewayFirewallRuleSet() { }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.ApplicationGatewayFirewallRuleGroup> RuleGroups { get { throw null; } }
        public string RuleSetType { get { throw null; } set { } }
        public string RuleSetVersion { get { throw null; } set { } }
    }
    public partial class ApplicationGatewayFrontendIPConfiguration : Azure.ResourceManager.Network.Models.SubResource
    {
        public ApplicationGatewayFrontendIPConfiguration() { }
        public string Etag { get { throw null; } }
        public string Name { get { throw null; } set { } }
        public string PrivateIPAddress { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.IPAllocationMethod? PrivateIPAllocationMethod { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public Azure.ResourceManager.Network.Models.SubResource PublicIPAddress { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.SubResource Subnet { get { throw null; } set { } }
        public string Type { get { throw null; } }
    }
    public partial class ApplicationGatewayFrontendPort : Azure.ResourceManager.Network.Models.SubResource
    {
        public ApplicationGatewayFrontendPort() { }
        public string Etag { get { throw null; } }
        public string Name { get { throw null; } set { } }
        public int? Port { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public string Type { get { throw null; } }
    }
    public partial class ApplicationGatewayHeaderConfiguration
    {
        public ApplicationGatewayHeaderConfiguration() { }
        public string HeaderName { get { throw null; } set { } }
        public string HeaderValue { get { throw null; } set { } }
    }
    public partial class ApplicationGatewayHttpListener : Azure.ResourceManager.Network.Models.SubResource
    {
        public ApplicationGatewayHttpListener() { }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.ApplicationGatewayCustomError> CustomErrorConfigurations { get { throw null; } }
        public string Etag { get { throw null; } }
        public Azure.ResourceManager.Network.Models.SubResource FirewallPolicy { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.SubResource FrontendIPConfiguration { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.SubResource FrontendPort { get { throw null; } set { } }
        public string HostName { get { throw null; } set { } }
        public System.Collections.Generic.IList<string> HostNames { get { throw null; } }
        public string Name { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ApplicationGatewayProtocol? Protocol { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public bool? RequireServerNameIndication { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.SubResource SslCertificate { get { throw null; } set { } }
        public string Type { get { throw null; } }
    }
    public partial class ApplicationGatewayIPConfiguration : Azure.ResourceManager.Network.Models.SubResource
    {
        public ApplicationGatewayIPConfiguration() { }
        public string Etag { get { throw null; } }
        public string Name { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public Azure.ResourceManager.Network.Models.SubResource Subnet { get { throw null; } set { } }
        public string Type { get { throw null; } }
    }
    public partial class ApplicationGatewayOnDemandProbe
    {
        public ApplicationGatewayOnDemandProbe() { }
        public Azure.ResourceManager.Network.Models.SubResource BackendAddressPool { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.SubResource BackendHttpSettings { get { throw null; } set { } }
        public string Host { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ApplicationGatewayProbeHealthResponseMatch Match { get { throw null; } set { } }
        public string Path { get { throw null; } set { } }
        public bool? PickHostNameFromBackendHttpSettings { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ApplicationGatewayProtocol? Protocol { get { throw null; } set { } }
        public int? Timeout { get { throw null; } set { } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct ApplicationGatewayOperationalState : System.IEquatable<Azure.ResourceManager.Network.Models.ApplicationGatewayOperationalState>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public ApplicationGatewayOperationalState(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.ApplicationGatewayOperationalState Running { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ApplicationGatewayOperationalState Starting { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ApplicationGatewayOperationalState Stopped { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ApplicationGatewayOperationalState Stopping { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.ApplicationGatewayOperationalState other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.ApplicationGatewayOperationalState left, Azure.ResourceManager.Network.Models.ApplicationGatewayOperationalState right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.ApplicationGatewayOperationalState (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.ApplicationGatewayOperationalState left, Azure.ResourceManager.Network.Models.ApplicationGatewayOperationalState right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class ApplicationGatewayPathRule : Azure.ResourceManager.Network.Models.SubResource
    {
        public ApplicationGatewayPathRule() { }
        public Azure.ResourceManager.Network.Models.SubResource BackendAddressPool { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.SubResource BackendHttpSettings { get { throw null; } set { } }
        public string Etag { get { throw null; } }
        public Azure.ResourceManager.Network.Models.SubResource FirewallPolicy { get { throw null; } set { } }
        public string Name { get { throw null; } set { } }
        public System.Collections.Generic.IList<string> Paths { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public Azure.ResourceManager.Network.Models.SubResource RedirectConfiguration { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.SubResource RewriteRuleSet { get { throw null; } set { } }
        public string Type { get { throw null; } }
    }
    public partial class ApplicationGatewayProbe : Azure.ResourceManager.Network.Models.SubResource
    {
        public ApplicationGatewayProbe() { }
        public string Etag { get { throw null; } }
        public string Host { get { throw null; } set { } }
        public int? Interval { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ApplicationGatewayProbeHealthResponseMatch Match { get { throw null; } set { } }
        public int? MinServers { get { throw null; } set { } }
        public string Name { get { throw null; } set { } }
        public string Path { get { throw null; } set { } }
        public bool? PickHostNameFromBackendHttpSettings { get { throw null; } set { } }
        public int? Port { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ApplicationGatewayProtocol? Protocol { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public int? Timeout { get { throw null; } set { } }
        public string Type { get { throw null; } }
        public int? UnhealthyThreshold { get { throw null; } set { } }
    }
    public partial class ApplicationGatewayProbeHealthResponseMatch
    {
        public ApplicationGatewayProbeHealthResponseMatch() { }
        public string Body { get { throw null; } set { } }
        public System.Collections.Generic.IList<string> StatusCodes { get { throw null; } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct ApplicationGatewayProtocol : System.IEquatable<Azure.ResourceManager.Network.Models.ApplicationGatewayProtocol>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public ApplicationGatewayProtocol(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.ApplicationGatewayProtocol Http { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ApplicationGatewayProtocol Https { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.ApplicationGatewayProtocol other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.ApplicationGatewayProtocol left, Azure.ResourceManager.Network.Models.ApplicationGatewayProtocol right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.ApplicationGatewayProtocol (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.ApplicationGatewayProtocol left, Azure.ResourceManager.Network.Models.ApplicationGatewayProtocol right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class ApplicationGatewayRedirectConfiguration : Azure.ResourceManager.Network.Models.SubResource
    {
        public ApplicationGatewayRedirectConfiguration() { }
        public string Etag { get { throw null; } }
        public bool? IncludePath { get { throw null; } set { } }
        public bool? IncludeQueryString { get { throw null; } set { } }
        public string Name { get { throw null; } set { } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.SubResource> PathRules { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ApplicationGatewayRedirectType? RedirectType { get { throw null; } set { } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.SubResource> RequestRoutingRules { get { throw null; } }
        public Azure.ResourceManager.Network.Models.SubResource TargetListener { get { throw null; } set { } }
        public string TargetUrl { get { throw null; } set { } }
        public string Type { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.SubResource> UrlPathMaps { get { throw null; } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct ApplicationGatewayRedirectType : System.IEquatable<Azure.ResourceManager.Network.Models.ApplicationGatewayRedirectType>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public ApplicationGatewayRedirectType(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.ApplicationGatewayRedirectType Found { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ApplicationGatewayRedirectType Permanent { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ApplicationGatewayRedirectType SeeOther { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ApplicationGatewayRedirectType Temporary { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.ApplicationGatewayRedirectType other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.ApplicationGatewayRedirectType left, Azure.ResourceManager.Network.Models.ApplicationGatewayRedirectType right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.ApplicationGatewayRedirectType (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.ApplicationGatewayRedirectType left, Azure.ResourceManager.Network.Models.ApplicationGatewayRedirectType right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class ApplicationGatewayRequestRoutingRule : Azure.ResourceManager.Network.Models.SubResource
    {
        public ApplicationGatewayRequestRoutingRule() { }
        public Azure.ResourceManager.Network.Models.SubResource BackendAddressPool { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.SubResource BackendHttpSettings { get { throw null; } set { } }
        public string Etag { get { throw null; } }
        public Azure.ResourceManager.Network.Models.SubResource HttpListener { get { throw null; } set { } }
        public string Name { get { throw null; } set { } }
        public int? Priority { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public Azure.ResourceManager.Network.Models.SubResource RedirectConfiguration { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.SubResource RewriteRuleSet { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ApplicationGatewayRequestRoutingRuleType? RuleType { get { throw null; } set { } }
        public string Type { get { throw null; } }
        public Azure.ResourceManager.Network.Models.SubResource UrlPathMap { get { throw null; } set { } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct ApplicationGatewayRequestRoutingRuleType : System.IEquatable<Azure.ResourceManager.Network.Models.ApplicationGatewayRequestRoutingRuleType>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public ApplicationGatewayRequestRoutingRuleType(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.ApplicationGatewayRequestRoutingRuleType Basic { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ApplicationGatewayRequestRoutingRuleType PathBasedRouting { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.ApplicationGatewayRequestRoutingRuleType other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.ApplicationGatewayRequestRoutingRuleType left, Azure.ResourceManager.Network.Models.ApplicationGatewayRequestRoutingRuleType right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.ApplicationGatewayRequestRoutingRuleType (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.ApplicationGatewayRequestRoutingRuleType left, Azure.ResourceManager.Network.Models.ApplicationGatewayRequestRoutingRuleType right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class ApplicationGatewayRewriteRule
    {
        public ApplicationGatewayRewriteRule() { }
        public Azure.ResourceManager.Network.Models.ApplicationGatewayRewriteRuleActionSet ActionSet { get { throw null; } set { } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.ApplicationGatewayRewriteRuleCondition> Conditions { get { throw null; } }
        public string Name { get { throw null; } set { } }
        public int? RuleSequence { get { throw null; } set { } }
    }
    public partial class ApplicationGatewayRewriteRuleActionSet
    {
        public ApplicationGatewayRewriteRuleActionSet() { }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.ApplicationGatewayHeaderConfiguration> RequestHeaderConfigurations { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.ApplicationGatewayHeaderConfiguration> ResponseHeaderConfigurations { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ApplicationGatewayUrlConfiguration UrlConfiguration { get { throw null; } set { } }
    }
    public partial class ApplicationGatewayRewriteRuleCondition
    {
        public ApplicationGatewayRewriteRuleCondition() { }
        public bool? IgnoreCase { get { throw null; } set { } }
        public bool? Negate { get { throw null; } set { } }
        public string Pattern { get { throw null; } set { } }
        public string Variable { get { throw null; } set { } }
    }
    public partial class ApplicationGatewayRewriteRuleSet : Azure.ResourceManager.Network.Models.SubResource
    {
        public ApplicationGatewayRewriteRuleSet() { }
        public string Etag { get { throw null; } }
        public string Name { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.ApplicationGatewayRewriteRule> RewriteRules { get { throw null; } }
    }
    public partial class ApplicationGatewaySku
    {
        public ApplicationGatewaySku() { }
        public int? Capacity { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ApplicationGatewaySkuName? Name { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ApplicationGatewayTier? Tier { get { throw null; } set { } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct ApplicationGatewaySkuName : System.IEquatable<Azure.ResourceManager.Network.Models.ApplicationGatewaySkuName>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public ApplicationGatewaySkuName(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.ApplicationGatewaySkuName StandardLarge { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ApplicationGatewaySkuName StandardMedium { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ApplicationGatewaySkuName StandardSmall { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ApplicationGatewaySkuName StandardV2 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ApplicationGatewaySkuName WAFLarge { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ApplicationGatewaySkuName WAFMedium { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ApplicationGatewaySkuName WAFV2 { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.ApplicationGatewaySkuName other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.ApplicationGatewaySkuName left, Azure.ResourceManager.Network.Models.ApplicationGatewaySkuName right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.ApplicationGatewaySkuName (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.ApplicationGatewaySkuName left, Azure.ResourceManager.Network.Models.ApplicationGatewaySkuName right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class ApplicationGatewaySslCertificate : Azure.ResourceManager.Network.Models.SubResource
    {
        public ApplicationGatewaySslCertificate() { }
        public string Data { get { throw null; } set { } }
        public string Etag { get { throw null; } }
        public string KeyVaultSecretId { get { throw null; } set { } }
        public string Name { get { throw null; } set { } }
        public string Password { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public string PublicCertData { get { throw null; } }
        public string Type { get { throw null; } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct ApplicationGatewaySslCipherSuite : System.IEquatable<Azure.ResourceManager.Network.Models.ApplicationGatewaySslCipherSuite>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public ApplicationGatewaySslCipherSuite(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.ApplicationGatewaySslCipherSuite TLSDHEDSSWith3DESEDECBCSHA { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ApplicationGatewaySslCipherSuite TLSDHEDSSWithAES128CBCSHA { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ApplicationGatewaySslCipherSuite TLSDHEDSSWithAES128CBCSHA256 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ApplicationGatewaySslCipherSuite TLSDHEDSSWithAES256CBCSHA { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ApplicationGatewaySslCipherSuite TLSDHEDSSWithAES256CBCSHA256 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ApplicationGatewaySslCipherSuite TLSDHERSAWithAES128CBCSHA { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ApplicationGatewaySslCipherSuite TLSDHERSAWithAES128GCMSHA256 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ApplicationGatewaySslCipherSuite TLSDHERSAWithAES256CBCSHA { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ApplicationGatewaySslCipherSuite TLSDHERSAWithAES256GCMSHA384 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ApplicationGatewaySslCipherSuite TLSEcdheEcdsaWithAES128CBCSHA { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ApplicationGatewaySslCipherSuite TLSEcdheEcdsaWithAES128CBCSHA256 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ApplicationGatewaySslCipherSuite TLSEcdheEcdsaWithAES128GCMSHA256 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ApplicationGatewaySslCipherSuite TLSEcdheEcdsaWithAES256CBCSHA { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ApplicationGatewaySslCipherSuite TLSEcdheEcdsaWithAES256CBCSHA384 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ApplicationGatewaySslCipherSuite TLSEcdheEcdsaWithAES256GCMSHA384 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ApplicationGatewaySslCipherSuite TLSEcdheRSAWithAES128CBCSHA { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ApplicationGatewaySslCipherSuite TLSEcdheRSAWithAES128CBCSHA256 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ApplicationGatewaySslCipherSuite TLSEcdheRSAWithAES128GCMSHA256 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ApplicationGatewaySslCipherSuite TLSEcdheRSAWithAES256CBCSHA { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ApplicationGatewaySslCipherSuite TLSEcdheRSAWithAES256CBCSHA384 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ApplicationGatewaySslCipherSuite TLSEcdheRSAWithAES256GCMSHA384 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ApplicationGatewaySslCipherSuite TLSRSAWith3DESEDECBCSHA { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ApplicationGatewaySslCipherSuite TLSRSAWithAES128CBCSHA { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ApplicationGatewaySslCipherSuite TLSRSAWithAES128CBCSHA256 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ApplicationGatewaySslCipherSuite TLSRSAWithAES128GCMSHA256 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ApplicationGatewaySslCipherSuite TLSRSAWithAES256CBCSHA { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ApplicationGatewaySslCipherSuite TLSRSAWithAES256CBCSHA256 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ApplicationGatewaySslCipherSuite TLSRSAWithAES256GCMSHA384 { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.ApplicationGatewaySslCipherSuite other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.ApplicationGatewaySslCipherSuite left, Azure.ResourceManager.Network.Models.ApplicationGatewaySslCipherSuite right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.ApplicationGatewaySslCipherSuite (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.ApplicationGatewaySslCipherSuite left, Azure.ResourceManager.Network.Models.ApplicationGatewaySslCipherSuite right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class ApplicationGatewaySslPolicy
    {
        public ApplicationGatewaySslPolicy() { }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.ApplicationGatewaySslCipherSuite> CipherSuites { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.ApplicationGatewaySslProtocol> DisabledSslProtocols { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ApplicationGatewaySslProtocol? MinProtocolVersion { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ApplicationGatewaySslPolicyName? PolicyName { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ApplicationGatewaySslPolicyType? PolicyType { get { throw null; } set { } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct ApplicationGatewaySslPolicyName : System.IEquatable<Azure.ResourceManager.Network.Models.ApplicationGatewaySslPolicyName>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public ApplicationGatewaySslPolicyName(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.ApplicationGatewaySslPolicyName AppGwSslPolicy20150501 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ApplicationGatewaySslPolicyName AppGwSslPolicy20170401 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ApplicationGatewaySslPolicyName AppGwSslPolicy20170401S { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.ApplicationGatewaySslPolicyName other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.ApplicationGatewaySslPolicyName left, Azure.ResourceManager.Network.Models.ApplicationGatewaySslPolicyName right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.ApplicationGatewaySslPolicyName (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.ApplicationGatewaySslPolicyName left, Azure.ResourceManager.Network.Models.ApplicationGatewaySslPolicyName right) { throw null; }
        public override string ToString() { throw null; }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct ApplicationGatewaySslPolicyType : System.IEquatable<Azure.ResourceManager.Network.Models.ApplicationGatewaySslPolicyType>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public ApplicationGatewaySslPolicyType(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.ApplicationGatewaySslPolicyType Custom { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ApplicationGatewaySslPolicyType Predefined { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.ApplicationGatewaySslPolicyType other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.ApplicationGatewaySslPolicyType left, Azure.ResourceManager.Network.Models.ApplicationGatewaySslPolicyType right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.ApplicationGatewaySslPolicyType (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.ApplicationGatewaySslPolicyType left, Azure.ResourceManager.Network.Models.ApplicationGatewaySslPolicyType right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class ApplicationGatewaySslPredefinedPolicy : Azure.ResourceManager.Network.Models.SubResource
    {
        public ApplicationGatewaySslPredefinedPolicy() { }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.ApplicationGatewaySslCipherSuite> CipherSuites { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ApplicationGatewaySslProtocol? MinProtocolVersion { get { throw null; } set { } }
        public string Name { get { throw null; } set { } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct ApplicationGatewaySslProtocol : System.IEquatable<Azure.ResourceManager.Network.Models.ApplicationGatewaySslProtocol>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public ApplicationGatewaySslProtocol(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.ApplicationGatewaySslProtocol TLSv10 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ApplicationGatewaySslProtocol TLSv11 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ApplicationGatewaySslProtocol TLSv12 { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.ApplicationGatewaySslProtocol other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.ApplicationGatewaySslProtocol left, Azure.ResourceManager.Network.Models.ApplicationGatewaySslProtocol right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.ApplicationGatewaySslProtocol (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.ApplicationGatewaySslProtocol left, Azure.ResourceManager.Network.Models.ApplicationGatewaySslProtocol right) { throw null; }
        public override string ToString() { throw null; }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct ApplicationGatewayTier : System.IEquatable<Azure.ResourceManager.Network.Models.ApplicationGatewayTier>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public ApplicationGatewayTier(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.ApplicationGatewayTier Standard { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ApplicationGatewayTier StandardV2 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ApplicationGatewayTier WAF { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ApplicationGatewayTier WAFV2 { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.ApplicationGatewayTier other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.ApplicationGatewayTier left, Azure.ResourceManager.Network.Models.ApplicationGatewayTier right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.ApplicationGatewayTier (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.ApplicationGatewayTier left, Azure.ResourceManager.Network.Models.ApplicationGatewayTier right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class ApplicationGatewayTrustedRootCertificate : Azure.ResourceManager.Network.Models.SubResource
    {
        public ApplicationGatewayTrustedRootCertificate() { }
        public string Data { get { throw null; } set { } }
        public string Etag { get { throw null; } }
        public string KeyVaultSecretId { get { throw null; } set { } }
        public string Name { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public string Type { get { throw null; } }
    }
    public partial class ApplicationGatewayUrlConfiguration
    {
        public ApplicationGatewayUrlConfiguration() { }
        public string ModifiedPath { get { throw null; } set { } }
        public string ModifiedQueryString { get { throw null; } set { } }
        public bool? Reroute { get { throw null; } set { } }
    }
    public partial class ApplicationGatewayUrlPathMap : Azure.ResourceManager.Network.Models.SubResource
    {
        public ApplicationGatewayUrlPathMap() { }
        public Azure.ResourceManager.Network.Models.SubResource DefaultBackendAddressPool { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.SubResource DefaultBackendHttpSettings { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.SubResource DefaultRedirectConfiguration { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.SubResource DefaultRewriteRuleSet { get { throw null; } set { } }
        public string Etag { get { throw null; } }
        public string Name { get { throw null; } set { } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.ApplicationGatewayPathRule> PathRules { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public string Type { get { throw null; } }
    }
    public partial class ApplicationGatewayWebApplicationFirewallConfiguration
    {
        public ApplicationGatewayWebApplicationFirewallConfiguration(bool enabled, Azure.ResourceManager.Network.Models.ApplicationGatewayFirewallMode firewallMode, string ruleSetType, string ruleSetVersion) { }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.ApplicationGatewayFirewallDisabledRuleGroup> DisabledRuleGroups { get { throw null; } }
        public bool Enabled { get { throw null; } set { } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.ApplicationGatewayFirewallExclusion> Exclusions { get { throw null; } }
        public int? FileUploadLimitInMb { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ApplicationGatewayFirewallMode FirewallMode { get { throw null; } set { } }
        public int? MaxRequestBodySize { get { throw null; } set { } }
        public int? MaxRequestBodySizeInKb { get { throw null; } set { } }
        public bool? RequestBodyCheck { get { throw null; } set { } }
        public string RuleSetType { get { throw null; } set { } }
        public string RuleSetVersion { get { throw null; } set { } }
    }
    public partial class ApplicationRuleCondition : Azure.ResourceManager.Network.Models.FirewallPolicyRuleCondition
    {
        public ApplicationRuleCondition() { }
        public System.Collections.Generic.IList<string> DestinationAddresses { get { throw null; } }
        public System.Collections.Generic.IList<string> FqdnTags { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.FirewallPolicyRuleConditionApplicationProtocol> Protocols { get { throw null; } }
        public System.Collections.Generic.IList<string> SourceAddresses { get { throw null; } }
        public System.Collections.Generic.IList<string> SourceIpGroups { get { throw null; } }
        public System.Collections.Generic.IList<string> TargetFqdns { get { throw null; } }
        public System.Collections.Generic.IList<string> TargetUrls { get { throw null; } }
    }
    public partial class ApplicationSecurityGroup : Azure.ResourceManager.Network.Models.Resource
    {
        public ApplicationSecurityGroup() { }
        public string Etag { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public string ResourceGuid { get { throw null; } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct AssociationType : System.IEquatable<Azure.ResourceManager.Network.Models.AssociationType>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public AssociationType(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.AssociationType Associated { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.AssociationType Contains { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.AssociationType other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.AssociationType left, Azure.ResourceManager.Network.Models.AssociationType right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.AssociationType (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.AssociationType left, Azure.ResourceManager.Network.Models.AssociationType right) { throw null; }
        public override string ToString() { throw null; }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct AuthenticationMethod : System.IEquatable<Azure.ResourceManager.Network.Models.AuthenticationMethod>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public AuthenticationMethod(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.AuthenticationMethod EapmschaPv2 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.AuthenticationMethod Eaptls { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.AuthenticationMethod other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.AuthenticationMethod left, Azure.ResourceManager.Network.Models.AuthenticationMethod right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.AuthenticationMethod (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.AuthenticationMethod left, Azure.ResourceManager.Network.Models.AuthenticationMethod right) { throw null; }
        public override string ToString() { throw null; }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct AuthorizationUseStatus : System.IEquatable<Azure.ResourceManager.Network.Models.AuthorizationUseStatus>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public AuthorizationUseStatus(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.AuthorizationUseStatus Available { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.AuthorizationUseStatus InUse { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.AuthorizationUseStatus other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.AuthorizationUseStatus left, Azure.ResourceManager.Network.Models.AuthorizationUseStatus right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.AuthorizationUseStatus (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.AuthorizationUseStatus left, Azure.ResourceManager.Network.Models.AuthorizationUseStatus right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class AutoApprovedPrivateLinkService
    {
        internal AutoApprovedPrivateLinkService() { }
        public string PrivateLinkService { get { throw null; } }
    }
    public partial class Availability
    {
        internal Availability() { }
        public string BlobDuration { get { throw null; } }
        public string Retention { get { throw null; } }
        public string TimeGrain { get { throw null; } }
    }
    public partial class AvailableDelegation
    {
        internal AvailableDelegation() { }
        public System.Collections.Generic.IReadOnlyList<string> Actions { get { throw null; } }
        public string Id { get { throw null; } }
        public string Name { get { throw null; } }
        public string ServiceName { get { throw null; } }
        public string Type { get { throw null; } }
    }
    public partial class AvailablePrivateEndpointType
    {
        internal AvailablePrivateEndpointType() { }
        public string Id { get { throw null; } }
        public string Name { get { throw null; } }
        public string ResourceName { get { throw null; } }
        public string Type { get { throw null; } }
    }
    public partial class AvailableProvidersList
    {
        internal AvailableProvidersList() { }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.AvailableProvidersListCountry> Countries { get { throw null; } }
    }
    public partial class AvailableProvidersListCity
    {
        internal AvailableProvidersListCity() { }
        public string CityName { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<string> Providers { get { throw null; } }
    }
    public partial class AvailableProvidersListCountry
    {
        internal AvailableProvidersListCountry() { }
        public string CountryName { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<string> Providers { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.AvailableProvidersListState> States { get { throw null; } }
    }
    public partial class AvailableProvidersListParameters
    {
        public AvailableProvidersListParameters() { }
        public System.Collections.Generic.IList<string> AzureLocations { get { throw null; } }
        public string City { get { throw null; } set { } }
        public string Country { get { throw null; } set { } }
        public string State { get { throw null; } set { } }
    }
    public partial class AvailableProvidersListState
    {
        internal AvailableProvidersListState() { }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.AvailableProvidersListCity> Cities { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<string> Providers { get { throw null; } }
        public string StateName { get { throw null; } }
    }
    public partial class AvailableServiceAlias
    {
        internal AvailableServiceAlias() { }
        public string Id { get { throw null; } }
        public string Name { get { throw null; } }
        public string ResourceName { get { throw null; } }
        public string Type { get { throw null; } }
    }
    public partial class AzureFirewall : Azure.ResourceManager.Network.Models.Resource
    {
        public AzureFirewall() { }
        public System.Collections.Generic.IDictionary<string, string> AdditionalProperties { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.AzureFirewallApplicationRuleCollection> ApplicationRuleCollections { get { throw null; } }
        public string Etag { get { throw null; } }
        public Azure.ResourceManager.Network.Models.SubResource FirewallPolicy { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.HubIPAddresses HubIpAddresses { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.AzureFirewallIPConfiguration> IpConfigurations { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.AzureFirewallIpGroups> IpGroups { get { throw null; } }
        public Azure.ResourceManager.Network.Models.AzureFirewallIPConfiguration ManagementIpConfiguration { get { throw null; } set { } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.AzureFirewallNatRuleCollection> NatRuleCollections { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.AzureFirewallNetworkRuleCollection> NetworkRuleCollections { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public Azure.ResourceManager.Network.Models.AzureFirewallSku Sku { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.AzureFirewallThreatIntelMode? ThreatIntelMode { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.SubResource VirtualHub { get { throw null; } set { } }
        public System.Collections.Generic.IList<string> Zones { get { throw null; } }
    }
    public partial class AzureFirewallApplicationRule
    {
        public AzureFirewallApplicationRule() { }
        public string Description { get { throw null; } set { } }
        public System.Collections.Generic.IList<string> FqdnTags { get { throw null; } }
        public string Name { get { throw null; } set { } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.AzureFirewallApplicationRuleProtocol> Protocols { get { throw null; } }
        public System.Collections.Generic.IList<string> SourceAddresses { get { throw null; } }
        public System.Collections.Generic.IList<string> SourceIpGroups { get { throw null; } }
        public System.Collections.Generic.IList<string> TargetFqdns { get { throw null; } }
    }
    public partial class AzureFirewallApplicationRuleCollection : Azure.ResourceManager.Network.Models.SubResource
    {
        public AzureFirewallApplicationRuleCollection() { }
        public Azure.ResourceManager.Network.Models.AzureFirewallRCAction Action { get { throw null; } set { } }
        public string Etag { get { throw null; } }
        public string Name { get { throw null; } set { } }
        public int? Priority { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.AzureFirewallApplicationRule> Rules { get { throw null; } }
    }
    public partial class AzureFirewallApplicationRuleProtocol
    {
        public AzureFirewallApplicationRuleProtocol() { }
        public int? Port { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.AzureFirewallApplicationRuleProtocolType? ProtocolType { get { throw null; } set { } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct AzureFirewallApplicationRuleProtocolType : System.IEquatable<Azure.ResourceManager.Network.Models.AzureFirewallApplicationRuleProtocolType>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public AzureFirewallApplicationRuleProtocolType(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.AzureFirewallApplicationRuleProtocolType Http { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.AzureFirewallApplicationRuleProtocolType Https { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.AzureFirewallApplicationRuleProtocolType Mssql { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.AzureFirewallApplicationRuleProtocolType other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.AzureFirewallApplicationRuleProtocolType left, Azure.ResourceManager.Network.Models.AzureFirewallApplicationRuleProtocolType right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.AzureFirewallApplicationRuleProtocolType (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.AzureFirewallApplicationRuleProtocolType left, Azure.ResourceManager.Network.Models.AzureFirewallApplicationRuleProtocolType right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class AzureFirewallFqdnTag : Azure.ResourceManager.Network.Models.Resource
    {
        public AzureFirewallFqdnTag() { }
        public string Etag { get { throw null; } }
        public string FqdnTagName { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
    }
    public partial class AzureFirewallIPConfiguration : Azure.ResourceManager.Network.Models.SubResource
    {
        public AzureFirewallIPConfiguration() { }
        public string Etag { get { throw null; } }
        public string Name { get { throw null; } set { } }
        public string PrivateIPAddress { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public Azure.ResourceManager.Network.Models.SubResource PublicIPAddress { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.SubResource Subnet { get { throw null; } set { } }
        public string Type { get { throw null; } }
    }
    public partial class AzureFirewallIpGroups
    {
        internal AzureFirewallIpGroups() { }
        public string ChangeNumber { get { throw null; } }
        public string Id { get { throw null; } }
    }
    public partial class AzureFirewallNatRCAction
    {
        public AzureFirewallNatRCAction() { }
        public Azure.ResourceManager.Network.Models.AzureFirewallNatRCActionType? Type { get { throw null; } set { } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct AzureFirewallNatRCActionType : System.IEquatable<Azure.ResourceManager.Network.Models.AzureFirewallNatRCActionType>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public AzureFirewallNatRCActionType(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.AzureFirewallNatRCActionType Dnat { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.AzureFirewallNatRCActionType Snat { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.AzureFirewallNatRCActionType other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.AzureFirewallNatRCActionType left, Azure.ResourceManager.Network.Models.AzureFirewallNatRCActionType right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.AzureFirewallNatRCActionType (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.AzureFirewallNatRCActionType left, Azure.ResourceManager.Network.Models.AzureFirewallNatRCActionType right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class AzureFirewallNatRule
    {
        public AzureFirewallNatRule() { }
        public string Description { get { throw null; } set { } }
        public System.Collections.Generic.IList<string> DestinationAddresses { get { throw null; } }
        public System.Collections.Generic.IList<string> DestinationPorts { get { throw null; } }
        public string Name { get { throw null; } set { } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.AzureFirewallNetworkRuleProtocol> Protocols { get { throw null; } }
        public System.Collections.Generic.IList<string> SourceAddresses { get { throw null; } }
        public System.Collections.Generic.IList<string> SourceIpGroups { get { throw null; } }
        public string TranslatedAddress { get { throw null; } set { } }
        public string TranslatedFqdn { get { throw null; } set { } }
        public string TranslatedPort { get { throw null; } set { } }
    }
    public partial class AzureFirewallNatRuleCollection : Azure.ResourceManager.Network.Models.SubResource
    {
        public AzureFirewallNatRuleCollection() { }
        public Azure.ResourceManager.Network.Models.AzureFirewallNatRCAction Action { get { throw null; } set { } }
        public string Etag { get { throw null; } }
        public string Name { get { throw null; } set { } }
        public int? Priority { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.AzureFirewallNatRule> Rules { get { throw null; } }
    }
    public partial class AzureFirewallNetworkRule
    {
        public AzureFirewallNetworkRule() { }
        public string Description { get { throw null; } set { } }
        public System.Collections.Generic.IList<string> DestinationAddresses { get { throw null; } }
        public System.Collections.Generic.IList<string> DestinationFqdns { get { throw null; } }
        public System.Collections.Generic.IList<string> DestinationIpGroups { get { throw null; } }
        public System.Collections.Generic.IList<string> DestinationPorts { get { throw null; } }
        public string Name { get { throw null; } set { } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.AzureFirewallNetworkRuleProtocol> Protocols { get { throw null; } }
        public System.Collections.Generic.IList<string> SourceAddresses { get { throw null; } }
        public System.Collections.Generic.IList<string> SourceIpGroups { get { throw null; } }
    }
    public partial class AzureFirewallNetworkRuleCollection : Azure.ResourceManager.Network.Models.SubResource
    {
        public AzureFirewallNetworkRuleCollection() { }
        public Azure.ResourceManager.Network.Models.AzureFirewallRCAction Action { get { throw null; } set { } }
        public string Etag { get { throw null; } }
        public string Name { get { throw null; } set { } }
        public int? Priority { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.AzureFirewallNetworkRule> Rules { get { throw null; } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct AzureFirewallNetworkRuleProtocol : System.IEquatable<Azure.ResourceManager.Network.Models.AzureFirewallNetworkRuleProtocol>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public AzureFirewallNetworkRuleProtocol(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.AzureFirewallNetworkRuleProtocol Any { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.AzureFirewallNetworkRuleProtocol Icmp { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.AzureFirewallNetworkRuleProtocol TCP { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.AzureFirewallNetworkRuleProtocol UDP { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.AzureFirewallNetworkRuleProtocol other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.AzureFirewallNetworkRuleProtocol left, Azure.ResourceManager.Network.Models.AzureFirewallNetworkRuleProtocol right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.AzureFirewallNetworkRuleProtocol (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.AzureFirewallNetworkRuleProtocol left, Azure.ResourceManager.Network.Models.AzureFirewallNetworkRuleProtocol right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class AzureFirewallPublicIPAddress
    {
        internal AzureFirewallPublicIPAddress() { }
        public string Address { get { throw null; } }
    }
    public partial class AzureFirewallRCAction
    {
        public AzureFirewallRCAction() { }
        public Azure.ResourceManager.Network.Models.AzureFirewallRCActionType? Type { get { throw null; } set { } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct AzureFirewallRCActionType : System.IEquatable<Azure.ResourceManager.Network.Models.AzureFirewallRCActionType>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public AzureFirewallRCActionType(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.AzureFirewallRCActionType Allow { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.AzureFirewallRCActionType Deny { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.AzureFirewallRCActionType other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.AzureFirewallRCActionType left, Azure.ResourceManager.Network.Models.AzureFirewallRCActionType right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.AzureFirewallRCActionType (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.AzureFirewallRCActionType left, Azure.ResourceManager.Network.Models.AzureFirewallRCActionType right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class AzureFirewallSku
    {
        public AzureFirewallSku() { }
        public Azure.ResourceManager.Network.Models.AzureFirewallSkuName? Name { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.AzureFirewallSkuTier? Tier { get { throw null; } set { } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct AzureFirewallSkuName : System.IEquatable<Azure.ResourceManager.Network.Models.AzureFirewallSkuName>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public AzureFirewallSkuName(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.AzureFirewallSkuName AzfwHub { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.AzureFirewallSkuName AzfwVnet { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.AzureFirewallSkuName other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.AzureFirewallSkuName left, Azure.ResourceManager.Network.Models.AzureFirewallSkuName right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.AzureFirewallSkuName (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.AzureFirewallSkuName left, Azure.ResourceManager.Network.Models.AzureFirewallSkuName right) { throw null; }
        public override string ToString() { throw null; }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct AzureFirewallSkuTier : System.IEquatable<Azure.ResourceManager.Network.Models.AzureFirewallSkuTier>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public AzureFirewallSkuTier(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.AzureFirewallSkuTier Premium { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.AzureFirewallSkuTier Standard { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.AzureFirewallSkuTier other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.AzureFirewallSkuTier left, Azure.ResourceManager.Network.Models.AzureFirewallSkuTier right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.AzureFirewallSkuTier (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.AzureFirewallSkuTier left, Azure.ResourceManager.Network.Models.AzureFirewallSkuTier right) { throw null; }
        public override string ToString() { throw null; }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct AzureFirewallThreatIntelMode : System.IEquatable<Azure.ResourceManager.Network.Models.AzureFirewallThreatIntelMode>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public AzureFirewallThreatIntelMode(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.AzureFirewallThreatIntelMode Alert { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.AzureFirewallThreatIntelMode Deny { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.AzureFirewallThreatIntelMode Off { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.AzureFirewallThreatIntelMode other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.AzureFirewallThreatIntelMode left, Azure.ResourceManager.Network.Models.AzureFirewallThreatIntelMode right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.AzureFirewallThreatIntelMode (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.AzureFirewallThreatIntelMode left, Azure.ResourceManager.Network.Models.AzureFirewallThreatIntelMode right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class AzureReachabilityReport
    {
        internal AzureReachabilityReport() { }
        public string AggregationLevel { get { throw null; } }
        public Azure.ResourceManager.Network.Models.AzureReachabilityReportLocation ProviderLocation { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.AzureReachabilityReportItem> ReachabilityReport { get { throw null; } }
    }
    public partial class AzureReachabilityReportItem
    {
        internal AzureReachabilityReportItem() { }
        public string AzureLocation { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.AzureReachabilityReportLatencyInfo> Latencies { get { throw null; } }
        public string Provider { get { throw null; } }
    }
    public partial class AzureReachabilityReportLatencyInfo
    {
        internal AzureReachabilityReportLatencyInfo() { }
        public int? Score { get { throw null; } }
        public System.DateTimeOffset? TimeStamp { get { throw null; } }
    }
    public partial class AzureReachabilityReportLocation
    {
        public AzureReachabilityReportLocation(string country) { }
        public string City { get { throw null; } set { } }
        public string Country { get { throw null; } set { } }
        public string State { get { throw null; } set { } }
    }
    public partial class AzureReachabilityReportParameters
    {
        public AzureReachabilityReportParameters(Azure.ResourceManager.Network.Models.AzureReachabilityReportLocation providerLocation, System.DateTimeOffset startTime, System.DateTimeOffset endTime) { }
        public System.Collections.Generic.IList<string> AzureLocations { get { throw null; } }
        public System.DateTimeOffset EndTime { get { throw null; } }
        public Azure.ResourceManager.Network.Models.AzureReachabilityReportLocation ProviderLocation { get { throw null; } }
        public System.Collections.Generic.IList<string> Providers { get { throw null; } }
        public System.DateTimeOffset StartTime { get { throw null; } }
    }
    public partial class BackendAddressPool : Azure.ResourceManager.Network.Models.SubResource
    {
        public BackendAddressPool() { }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.NetworkInterfaceIPConfiguration> BackendIPConfigurations { get { throw null; } }
        public string Etag { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.LoadBalancerBackendAddress> LoadBalancerBackendAddresses { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.SubResource> LoadBalancingRules { get { throw null; } }
        public string Name { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.SubResource OutboundRule { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.SubResource> OutboundRules { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public string Type { get { throw null; } }
    }
    public partial class BastionActiveSession
    {
        internal BastionActiveSession() { }
        public Azure.ResourceManager.Network.Models.BastionConnectProtocol? Protocol { get { throw null; } }
        public string ResourceType { get { throw null; } }
        public float? SessionDurationInMins { get { throw null; } }
        public string SessionId { get { throw null; } }
        public object StartTime { get { throw null; } }
        public string TargetHostName { get { throw null; } }
        public string TargetIpAddress { get { throw null; } }
        public string TargetResourceGroup { get { throw null; } }
        public string TargetResourceId { get { throw null; } }
        public string TargetSubscriptionId { get { throw null; } }
        public string UserName { get { throw null; } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct BastionConnectProtocol : System.IEquatable<Azure.ResourceManager.Network.Models.BastionConnectProtocol>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public BastionConnectProtocol(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.BastionConnectProtocol RDP { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.BastionConnectProtocol SSH { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.BastionConnectProtocol other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.BastionConnectProtocol left, Azure.ResourceManager.Network.Models.BastionConnectProtocol right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.BastionConnectProtocol (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.BastionConnectProtocol left, Azure.ResourceManager.Network.Models.BastionConnectProtocol right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class BastionHost : Azure.ResourceManager.Network.Models.Resource
    {
        public BastionHost() { }
        public string DnsName { get { throw null; } set { } }
        public string Etag { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.BastionHostIPConfiguration> IpConfigurations { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
    }
    public partial class BastionHostIPConfiguration : Azure.ResourceManager.Network.Models.SubResource
    {
        public BastionHostIPConfiguration() { }
        public string Etag { get { throw null; } }
        public string Name { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.IPAllocationMethod? PrivateIPAllocationMethod { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public Azure.ResourceManager.Network.Models.SubResource PublicIPAddress { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.SubResource Subnet { get { throw null; } set { } }
        public string Type { get { throw null; } }
    }
    public partial class BastionSessionState
    {
        internal BastionSessionState() { }
        public string Message { get { throw null; } }
        public string SessionId { get { throw null; } }
        public string State { get { throw null; } }
    }
    public partial class BastionShareableLink
    {
        public BastionShareableLink(Azure.ResourceManager.Network.Models.VM vm) { }
        public string Bsl { get { throw null; } }
        public string CreatedAt { get { throw null; } }
        public string Message { get { throw null; } }
        public Azure.ResourceManager.Network.Models.VM Vm { get { throw null; } set { } }
    }
    public partial class BastionShareableLinkListRequest
    {
        public BastionShareableLinkListRequest() { }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.BastionShareableLink> Vms { get { throw null; } }
    }
    public partial class BGPCommunity
    {
        public BGPCommunity() { }
        public string CommunityName { get { throw null; } set { } }
        public System.Collections.Generic.IList<string> CommunityPrefixes { get { throw null; } }
        public string CommunityValue { get { throw null; } set { } }
        public bool? IsAuthorizedToUse { get { throw null; } set { } }
        public string ServiceGroup { get { throw null; } set { } }
        public string ServiceSupportedRegion { get { throw null; } set { } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct BgpPeerState : System.IEquatable<Azure.ResourceManager.Network.Models.BgpPeerState>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public BgpPeerState(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.BgpPeerState Connected { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.BgpPeerState Connecting { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.BgpPeerState Idle { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.BgpPeerState Stopped { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.BgpPeerState Unknown { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.BgpPeerState other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.BgpPeerState left, Azure.ResourceManager.Network.Models.BgpPeerState right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.BgpPeerState (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.BgpPeerState left, Azure.ResourceManager.Network.Models.BgpPeerState right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class BgpPeerStatus
    {
        internal BgpPeerStatus() { }
        public long? Asn { get { throw null; } }
        public string ConnectedDuration { get { throw null; } }
        public string LocalAddress { get { throw null; } }
        public long? MessagesReceived { get { throw null; } }
        public long? MessagesSent { get { throw null; } }
        public string Neighbor { get { throw null; } }
        public long? RoutesReceived { get { throw null; } }
        public Azure.ResourceManager.Network.Models.BgpPeerState? State { get { throw null; } }
    }
    public partial class BgpPeerStatusListResult
    {
        internal BgpPeerStatusListResult() { }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.BgpPeerStatus> Value { get { throw null; } }
    }
    public partial class BgpServiceCommunity : Azure.ResourceManager.Network.Models.Resource
    {
        public BgpServiceCommunity() { }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.BGPCommunity> BgpCommunities { get { throw null; } }
        public string ServiceName { get { throw null; } set { } }
    }
    public partial class BgpSettings
    {
        public BgpSettings() { }
        public long? Asn { get { throw null; } set { } }
        public string BgpPeeringAddress { get { throw null; } set { } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.IPConfigurationBgpPeeringAddress> BgpPeeringAddresses { get { throw null; } }
        public int? PeerWeight { get { throw null; } set { } }
    }
    public partial class CheckPrivateLinkServiceVisibilityRequest
    {
        public CheckPrivateLinkServiceVisibilityRequest() { }
        public string PrivateLinkServiceAlias { get { throw null; } set { } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct CircuitConnectionStatus : System.IEquatable<Azure.ResourceManager.Network.Models.CircuitConnectionStatus>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public CircuitConnectionStatus(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.CircuitConnectionStatus Connected { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.CircuitConnectionStatus Connecting { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.CircuitConnectionStatus Disconnected { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.CircuitConnectionStatus other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.CircuitConnectionStatus left, Azure.ResourceManager.Network.Models.CircuitConnectionStatus right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.CircuitConnectionStatus (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.CircuitConnectionStatus left, Azure.ResourceManager.Network.Models.CircuitConnectionStatus right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties
    {
        public Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties() { }
        public string ClientId { get { throw null; } }
        public string PrincipalId { get { throw null; } }
    }
    public partial class ConnectionMonitor
    {
        public ConnectionMonitor() { }
        public bool? AutoStart { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ConnectionMonitorDestination Destination { get { throw null; } set { } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.ConnectionMonitorEndpoint> Endpoints { get { throw null; } }
        public string Location { get { throw null; } set { } }
        public int? MonitoringIntervalInSeconds { get { throw null; } set { } }
        public string Notes { get { throw null; } set { } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.ConnectionMonitorOutput> Outputs { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ConnectionMonitorSource Source { get { throw null; } set { } }
        public System.Collections.Generic.IDictionary<string, string> Tags { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.ConnectionMonitorTestConfiguration> TestConfigurations { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.ConnectionMonitorTestGroup> TestGroups { get { throw null; } }
    }
    public partial class ConnectionMonitorDestination
    {
        public ConnectionMonitorDestination() { }
        public string Address { get { throw null; } set { } }
        public int? Port { get { throw null; } set { } }
        public string ResourceId { get { throw null; } set { } }
    }
    public partial class ConnectionMonitorEndpoint
    {
        public ConnectionMonitorEndpoint(string name) { }
        public string Address { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ConnectionMonitorEndpointFilter Filter { get { throw null; } set { } }
        public string Name { get { throw null; } set { } }
        public string ResourceId { get { throw null; } set { } }
    }
    public partial class ConnectionMonitorEndpointFilter
    {
        public ConnectionMonitorEndpointFilter() { }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.ConnectionMonitorEndpointFilterItem> Items { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ConnectionMonitorEndpointFilterType? Type { get { throw null; } set { } }
    }
    public partial class ConnectionMonitorEndpointFilterItem
    {
        public ConnectionMonitorEndpointFilterItem() { }
        public string Address { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ConnectionMonitorEndpointFilterItemType? Type { get { throw null; } set { } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct ConnectionMonitorEndpointFilterItemType : System.IEquatable<Azure.ResourceManager.Network.Models.ConnectionMonitorEndpointFilterItemType>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public ConnectionMonitorEndpointFilterItemType(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.ConnectionMonitorEndpointFilterItemType AgentAddress { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.ConnectionMonitorEndpointFilterItemType other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.ConnectionMonitorEndpointFilterItemType left, Azure.ResourceManager.Network.Models.ConnectionMonitorEndpointFilterItemType right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.ConnectionMonitorEndpointFilterItemType (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.ConnectionMonitorEndpointFilterItemType left, Azure.ResourceManager.Network.Models.ConnectionMonitorEndpointFilterItemType right) { throw null; }
        public override string ToString() { throw null; }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct ConnectionMonitorEndpointFilterType : System.IEquatable<Azure.ResourceManager.Network.Models.ConnectionMonitorEndpointFilterType>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public ConnectionMonitorEndpointFilterType(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.ConnectionMonitorEndpointFilterType Include { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.ConnectionMonitorEndpointFilterType other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.ConnectionMonitorEndpointFilterType left, Azure.ResourceManager.Network.Models.ConnectionMonitorEndpointFilterType right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.ConnectionMonitorEndpointFilterType (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.ConnectionMonitorEndpointFilterType left, Azure.ResourceManager.Network.Models.ConnectionMonitorEndpointFilterType right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class ConnectionMonitorHttpConfiguration
    {
        public ConnectionMonitorHttpConfiguration() { }
        public Azure.ResourceManager.Network.Models.HttpConfigurationMethod? Method { get { throw null; } set { } }
        public string Path { get { throw null; } set { } }
        public int? Port { get { throw null; } set { } }
        public bool? PreferHttps { get { throw null; } set { } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.HttpHeader> RequestHeaders { get { throw null; } }
        public System.Collections.Generic.IList<string> ValidStatusCodeRanges { get { throw null; } }
    }
    public partial class ConnectionMonitorIcmpConfiguration
    {
        public ConnectionMonitorIcmpConfiguration() { }
        public bool? DisableTraceRoute { get { throw null; } set { } }
    }
    public partial class ConnectionMonitorOutput
    {
        public ConnectionMonitorOutput() { }
        public Azure.ResourceManager.Network.Models.OutputType? Type { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ConnectionMonitorWorkspaceSettings WorkspaceSettings { get { throw null; } set { } }
    }
    public partial class ConnectionMonitorQueryResult
    {
        internal ConnectionMonitorQueryResult() { }
        public Azure.ResourceManager.Network.Models.ConnectionMonitorSourceStatus? SourceStatus { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.ConnectionStateSnapshot> States { get { throw null; } }
    }
    public partial class ConnectionMonitorResult
    {
        internal ConnectionMonitorResult() { }
        public bool? AutoStart { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ConnectionMonitorType? ConnectionMonitorType { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ConnectionMonitorDestination Destination { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.ConnectionMonitorEndpoint> Endpoints { get { throw null; } }
        public string Etag { get { throw null; } }
        public string Id { get { throw null; } }
        public string Location { get { throw null; } }
        public int? MonitoringIntervalInSeconds { get { throw null; } }
        public string MonitoringStatus { get { throw null; } }
        public string Name { get { throw null; } }
        public string Notes { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.ConnectionMonitorOutput> Outputs { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ConnectionMonitorSource Source { get { throw null; } }
        public System.DateTimeOffset? StartTime { get { throw null; } }
        public System.Collections.Generic.IReadOnlyDictionary<string, string> Tags { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.ConnectionMonitorTestConfiguration> TestConfigurations { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.ConnectionMonitorTestGroup> TestGroups { get { throw null; } }
        public string Type { get { throw null; } }
    }
    public partial class ConnectionMonitorSource
    {
        public ConnectionMonitorSource(string resourceId) { }
        public int? Port { get { throw null; } set { } }
        public string ResourceId { get { throw null; } set { } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct ConnectionMonitorSourceStatus : System.IEquatable<Azure.ResourceManager.Network.Models.ConnectionMonitorSourceStatus>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public ConnectionMonitorSourceStatus(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.ConnectionMonitorSourceStatus Active { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ConnectionMonitorSourceStatus Inactive { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ConnectionMonitorSourceStatus Unknown { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.ConnectionMonitorSourceStatus other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.ConnectionMonitorSourceStatus left, Azure.ResourceManager.Network.Models.ConnectionMonitorSourceStatus right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.ConnectionMonitorSourceStatus (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.ConnectionMonitorSourceStatus left, Azure.ResourceManager.Network.Models.ConnectionMonitorSourceStatus right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class ConnectionMonitorSuccessThreshold
    {
        public ConnectionMonitorSuccessThreshold() { }
        public int? ChecksFailedPercent { get { throw null; } set { } }
        public float? RoundTripTimeMs { get { throw null; } set { } }
    }
    public partial class ConnectionMonitorTcpConfiguration
    {
        public ConnectionMonitorTcpConfiguration() { }
        public bool? DisableTraceRoute { get { throw null; } set { } }
        public int? Port { get { throw null; } set { } }
    }
    public partial class ConnectionMonitorTestConfiguration
    {
        public ConnectionMonitorTestConfiguration(string name, Azure.ResourceManager.Network.Models.ConnectionMonitorTestConfigurationProtocol protocol) { }
        public Azure.ResourceManager.Network.Models.ConnectionMonitorHttpConfiguration HttpConfiguration { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ConnectionMonitorIcmpConfiguration IcmpConfiguration { get { throw null; } set { } }
        public string Name { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.PreferredIPVersion? PreferredIPVersion { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ConnectionMonitorTestConfigurationProtocol Protocol { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ConnectionMonitorSuccessThreshold SuccessThreshold { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ConnectionMonitorTcpConfiguration TcpConfiguration { get { throw null; } set { } }
        public int? TestFrequencySec { get { throw null; } set { } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct ConnectionMonitorTestConfigurationProtocol : System.IEquatable<Azure.ResourceManager.Network.Models.ConnectionMonitorTestConfigurationProtocol>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public ConnectionMonitorTestConfigurationProtocol(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.ConnectionMonitorTestConfigurationProtocol Http { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ConnectionMonitorTestConfigurationProtocol Icmp { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ConnectionMonitorTestConfigurationProtocol Tcp { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.ConnectionMonitorTestConfigurationProtocol other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.ConnectionMonitorTestConfigurationProtocol left, Azure.ResourceManager.Network.Models.ConnectionMonitorTestConfigurationProtocol right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.ConnectionMonitorTestConfigurationProtocol (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.ConnectionMonitorTestConfigurationProtocol left, Azure.ResourceManager.Network.Models.ConnectionMonitorTestConfigurationProtocol right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class ConnectionMonitorTestGroup
    {
        public ConnectionMonitorTestGroup(string name, System.Collections.Generic.IEnumerable<string> testConfigurations, System.Collections.Generic.IEnumerable<string> sources, System.Collections.Generic.IEnumerable<string> destinations) { }
        public System.Collections.Generic.IList<string> Destinations { get { throw null; } }
        public bool? Disable { get { throw null; } set { } }
        public string Name { get { throw null; } set { } }
        public System.Collections.Generic.IList<string> Sources { get { throw null; } }
        public System.Collections.Generic.IList<string> TestConfigurations { get { throw null; } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct ConnectionMonitorType : System.IEquatable<Azure.ResourceManager.Network.Models.ConnectionMonitorType>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public ConnectionMonitorType(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.ConnectionMonitorType MultiEndpoint { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ConnectionMonitorType SingleSourceDestination { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.ConnectionMonitorType other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.ConnectionMonitorType left, Azure.ResourceManager.Network.Models.ConnectionMonitorType right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.ConnectionMonitorType (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.ConnectionMonitorType left, Azure.ResourceManager.Network.Models.ConnectionMonitorType right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class ConnectionMonitorWorkspaceSettings
    {
        public ConnectionMonitorWorkspaceSettings() { }
        public string WorkspaceResourceId { get { throw null; } set { } }
    }
    public partial class ConnectionResetSharedKey
    {
        public ConnectionResetSharedKey(int keyLength) { }
        public int KeyLength { get { throw null; } set { } }
    }
    public partial class ConnectionSharedKey : Azure.ResourceManager.Network.Models.SubResource
    {
        public ConnectionSharedKey(string value) { }
        public string Value { get { throw null; } set { } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct ConnectionState : System.IEquatable<Azure.ResourceManager.Network.Models.ConnectionState>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public ConnectionState(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.ConnectionState Reachable { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ConnectionState Unknown { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ConnectionState Unreachable { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.ConnectionState other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.ConnectionState left, Azure.ResourceManager.Network.Models.ConnectionState right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.ConnectionState (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.ConnectionState left, Azure.ResourceManager.Network.Models.ConnectionState right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class ConnectionStateSnapshot
    {
        internal ConnectionStateSnapshot() { }
        public int? AvgLatencyInMs { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ConnectionState? ConnectionState { get { throw null; } }
        public System.DateTimeOffset? EndTime { get { throw null; } }
        public Azure.ResourceManager.Network.Models.EvaluationState? EvaluationState { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.ConnectivityHop> Hops { get { throw null; } }
        public int? MaxLatencyInMs { get { throw null; } }
        public int? MinLatencyInMs { get { throw null; } }
        public int? ProbesFailed { get { throw null; } }
        public int? ProbesSent { get { throw null; } }
        public System.DateTimeOffset? StartTime { get { throw null; } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct ConnectionStatus : System.IEquatable<Azure.ResourceManager.Network.Models.ConnectionStatus>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public ConnectionStatus(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.ConnectionStatus Connected { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ConnectionStatus Degraded { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ConnectionStatus Disconnected { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ConnectionStatus Unknown { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.ConnectionStatus other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.ConnectionStatus left, Azure.ResourceManager.Network.Models.ConnectionStatus right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.ConnectionStatus (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.ConnectionStatus left, Azure.ResourceManager.Network.Models.ConnectionStatus right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class ConnectivityDestination
    {
        public ConnectivityDestination() { }
        public string Address { get { throw null; } set { } }
        public int? Port { get { throw null; } set { } }
        public string ResourceId { get { throw null; } set { } }
    }
    public partial class ConnectivityHop
    {
        internal ConnectivityHop() { }
        public string Address { get { throw null; } }
        public string Id { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.ConnectivityIssue> Issues { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<string> NextHopIds { get { throw null; } }
        public string ResourceId { get { throw null; } }
        public string Type { get { throw null; } }
    }
    public partial class ConnectivityInformation
    {
        internal ConnectivityInformation() { }
        public int? AvgLatencyInMs { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ConnectionStatus? ConnectionStatus { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.ConnectivityHop> Hops { get { throw null; } }
        public int? MaxLatencyInMs { get { throw null; } }
        public int? MinLatencyInMs { get { throw null; } }
        public int? ProbesFailed { get { throw null; } }
        public int? ProbesSent { get { throw null; } }
    }
    public partial class ConnectivityIssue
    {
        internal ConnectivityIssue() { }
        public System.Collections.Generic.IReadOnlyList<System.Collections.Generic.IDictionary<string, string>> Context { get { throw null; } }
        public Azure.ResourceManager.Network.Models.Origin? Origin { get { throw null; } }
        public Azure.ResourceManager.Network.Models.Severity? Severity { get { throw null; } }
        public Azure.ResourceManager.Network.Models.IssueType? Type { get { throw null; } }
    }
    public partial class ConnectivityParameters
    {
        public ConnectivityParameters(Azure.ResourceManager.Network.Models.ConnectivitySource source, Azure.ResourceManager.Network.Models.ConnectivityDestination destination) { }
        public Azure.ResourceManager.Network.Models.ConnectivityDestination Destination { get { throw null; } }
        public Azure.ResourceManager.Network.Models.IPVersion? PreferredIPVersion { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.Protocol? Protocol { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ProtocolConfiguration ProtocolConfiguration { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ConnectivitySource Source { get { throw null; } }
    }
    public partial class ConnectivitySource
    {
        public ConnectivitySource(string resourceId) { }
        public int? Port { get { throw null; } set { } }
        public string ResourceId { get { throw null; } }
    }
    public partial class Container : Azure.ResourceManager.Network.Models.SubResource
    {
        public Container() { }
    }
    public partial class ContainerNetworkInterface : Azure.ResourceManager.Network.Models.SubResource
    {
        public ContainerNetworkInterface() { }
        public Azure.ResourceManager.Network.Models.Container Container { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ContainerNetworkInterfaceConfiguration ContainerNetworkInterfaceConfiguration { get { throw null; } }
        public string Etag { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.ContainerNetworkInterfaceIpConfiguration> IpConfigurations { get { throw null; } }
        public string Name { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public string Type { get { throw null; } }
    }
    public partial class ContainerNetworkInterfaceConfiguration : Azure.ResourceManager.Network.Models.SubResource
    {
        public ContainerNetworkInterfaceConfiguration() { }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.SubResource> ContainerNetworkInterfaces { get { throw null; } }
        public string Etag { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.IPConfigurationProfile> IpConfigurations { get { throw null; } }
        public string Name { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public string Type { get { throw null; } }
    }
    public partial class ContainerNetworkInterfaceIpConfiguration
    {
        internal ContainerNetworkInterfaceIpConfiguration() { }
        public string Etag { get { throw null; } }
        public string Name { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public string Type { get { throw null; } }
    }
    public partial class CustomDnsConfigPropertiesFormat
    {
        public CustomDnsConfigPropertiesFormat() { }
        public string Fqdn { get { throw null; } set { } }
        public System.Collections.Generic.IList<string> IpAddresses { get { throw null; } }
    }
    public partial class DdosCustomPolicy : Azure.ResourceManager.Network.Models.Resource
    {
        public DdosCustomPolicy() { }
        public string Etag { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.ProtocolCustomSettingsFormat> ProtocolCustomSettings { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.SubResource> PublicIPAddresses { get { throw null; } }
        public string ResourceGuid { get { throw null; } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct DdosCustomPolicyProtocol : System.IEquatable<Azure.ResourceManager.Network.Models.DdosCustomPolicyProtocol>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public DdosCustomPolicyProtocol(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.DdosCustomPolicyProtocol Syn { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.DdosCustomPolicyProtocol Tcp { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.DdosCustomPolicyProtocol Udp { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.DdosCustomPolicyProtocol other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.DdosCustomPolicyProtocol left, Azure.ResourceManager.Network.Models.DdosCustomPolicyProtocol right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.DdosCustomPolicyProtocol (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.DdosCustomPolicyProtocol left, Azure.ResourceManager.Network.Models.DdosCustomPolicyProtocol right) { throw null; }
        public override string ToString() { throw null; }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct DdosCustomPolicyTriggerSensitivityOverride : System.IEquatable<Azure.ResourceManager.Network.Models.DdosCustomPolicyTriggerSensitivityOverride>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public DdosCustomPolicyTriggerSensitivityOverride(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.DdosCustomPolicyTriggerSensitivityOverride Default { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.DdosCustomPolicyTriggerSensitivityOverride High { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.DdosCustomPolicyTriggerSensitivityOverride Low { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.DdosCustomPolicyTriggerSensitivityOverride Relaxed { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.DdosCustomPolicyTriggerSensitivityOverride other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.DdosCustomPolicyTriggerSensitivityOverride left, Azure.ResourceManager.Network.Models.DdosCustomPolicyTriggerSensitivityOverride right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.DdosCustomPolicyTriggerSensitivityOverride (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.DdosCustomPolicyTriggerSensitivityOverride left, Azure.ResourceManager.Network.Models.DdosCustomPolicyTriggerSensitivityOverride right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class DdosProtectionPlan
    {
        public DdosProtectionPlan() { }
        public string Etag { get { throw null; } }
        public string Id { get { throw null; } }
        public string Location { get { throw null; } set { } }
        public string Name { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public string ResourceGuid { get { throw null; } }
        public System.Collections.Generic.IDictionary<string, string> Tags { get { throw null; } }
        public string Type { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.SubResource> VirtualNetworks { get { throw null; } }
    }
    public partial class DdosSettings
    {
        public DdosSettings() { }
        public Azure.ResourceManager.Network.Models.SubResource DdosCustomPolicy { get { throw null; } set { } }
        public bool? ProtectedIP { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.DdosSettingsProtectionCoverage? ProtectionCoverage { get { throw null; } set { } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct DdosSettingsProtectionCoverage : System.IEquatable<Azure.ResourceManager.Network.Models.DdosSettingsProtectionCoverage>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public DdosSettingsProtectionCoverage(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.DdosSettingsProtectionCoverage Basic { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.DdosSettingsProtectionCoverage Standard { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.DdosSettingsProtectionCoverage other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.DdosSettingsProtectionCoverage left, Azure.ResourceManager.Network.Models.DdosSettingsProtectionCoverage right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.DdosSettingsProtectionCoverage (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.DdosSettingsProtectionCoverage left, Azure.ResourceManager.Network.Models.DdosSettingsProtectionCoverage right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class Delegation : Azure.ResourceManager.Network.Models.SubResource
    {
        public Delegation() { }
        public System.Collections.Generic.IReadOnlyList<string> Actions { get { throw null; } }
        public string Etag { get { throw null; } }
        public string Name { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public string ServiceName { get { throw null; } set { } }
    }
    public partial class DeviceProperties
    {
        public DeviceProperties() { }
        public string DeviceModel { get { throw null; } set { } }
        public string DeviceVendor { get { throw null; } set { } }
        public int? LinkSpeedInMbps { get { throw null; } set { } }
    }
    public partial class DhcpOptions
    {
        public DhcpOptions() { }
        public System.Collections.Generic.IList<string> DnsServers { get { throw null; } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct DhGroup : System.IEquatable<Azure.ResourceManager.Network.Models.DhGroup>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public DhGroup(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.DhGroup DHGroup1 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.DhGroup DHGroup14 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.DhGroup DHGroup2 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.DhGroup DHGroup2048 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.DhGroup DHGroup24 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.DhGroup ECP256 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.DhGroup ECP384 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.DhGroup None { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.DhGroup other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.DhGroup left, Azure.ResourceManager.Network.Models.DhGroup right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.DhGroup (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.DhGroup left, Azure.ResourceManager.Network.Models.DhGroup right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class Dimension
    {
        internal Dimension() { }
        public string DisplayName { get { throw null; } }
        public string InternalName { get { throw null; } }
        public string Name { get { throw null; } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct Direction : System.IEquatable<Azure.ResourceManager.Network.Models.Direction>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public Direction(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.Direction Inbound { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.Direction Outbound { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.Direction other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.Direction left, Azure.ResourceManager.Network.Models.Direction right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.Direction (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.Direction left, Azure.ResourceManager.Network.Models.Direction right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class DnsNameAvailabilityResult
    {
        internal DnsNameAvailabilityResult() { }
        public bool? Available { get { throw null; } }
    }
    public partial class EffectiveNetworkSecurityGroup
    {
        internal EffectiveNetworkSecurityGroup() { }
        public Azure.ResourceManager.Network.Models.EffectiveNetworkSecurityGroupAssociation Association { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.EffectiveNetworkSecurityRule> EffectiveSecurityRules { get { throw null; } }
        public Azure.ResourceManager.Network.Models.SubResource NetworkSecurityGroup { get { throw null; } }
        public string TagMap { get { throw null; } }
    }
    public partial class EffectiveNetworkSecurityGroupAssociation
    {
        internal EffectiveNetworkSecurityGroupAssociation() { }
        public Azure.ResourceManager.Network.Models.SubResource NetworkInterface { get { throw null; } }
        public Azure.ResourceManager.Network.Models.SubResource Subnet { get { throw null; } }
    }
    public partial class EffectiveNetworkSecurityGroupListResult
    {
        internal EffectiveNetworkSecurityGroupListResult() { }
        public string NextLink { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.EffectiveNetworkSecurityGroup> Value { get { throw null; } }
    }
    public partial class EffectiveNetworkSecurityRule
    {
        internal EffectiveNetworkSecurityRule() { }
        public Azure.ResourceManager.Network.Models.SecurityRuleAccess? Access { get { throw null; } }
        public string DestinationAddressPrefix { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<string> DestinationAddressPrefixes { get { throw null; } }
        public string DestinationPortRange { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<string> DestinationPortRanges { get { throw null; } }
        public Azure.ResourceManager.Network.Models.SecurityRuleDirection? Direction { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<string> ExpandedDestinationAddressPrefix { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<string> ExpandedSourceAddressPrefix { get { throw null; } }
        public string Name { get { throw null; } }
        public int? Priority { get { throw null; } }
        public Azure.ResourceManager.Network.Models.EffectiveSecurityRuleProtocol? Protocol { get { throw null; } }
        public string SourceAddressPrefix { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<string> SourceAddressPrefixes { get { throw null; } }
        public string SourcePortRange { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<string> SourcePortRanges { get { throw null; } }
    }
    public partial class EffectiveRoute
    {
        internal EffectiveRoute() { }
        public System.Collections.Generic.IReadOnlyList<string> AddressPrefix { get { throw null; } }
        public bool? DisableBgpRoutePropagation { get { throw null; } }
        public string Name { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<string> NextHopIpAddress { get { throw null; } }
        public Azure.ResourceManager.Network.Models.RouteNextHopType? NextHopType { get { throw null; } }
        public Azure.ResourceManager.Network.Models.EffectiveRouteSource? Source { get { throw null; } }
        public Azure.ResourceManager.Network.Models.EffectiveRouteState? State { get { throw null; } }
    }
    public partial class EffectiveRouteListResult
    {
        internal EffectiveRouteListResult() { }
        public string NextLink { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.EffectiveRoute> Value { get { throw null; } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct EffectiveRouteSource : System.IEquatable<Azure.ResourceManager.Network.Models.EffectiveRouteSource>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public EffectiveRouteSource(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.EffectiveRouteSource Default { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.EffectiveRouteSource Unknown { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.EffectiveRouteSource User { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.EffectiveRouteSource VirtualNetworkGateway { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.EffectiveRouteSource other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.EffectiveRouteSource left, Azure.ResourceManager.Network.Models.EffectiveRouteSource right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.EffectiveRouteSource (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.EffectiveRouteSource left, Azure.ResourceManager.Network.Models.EffectiveRouteSource right) { throw null; }
        public override string ToString() { throw null; }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct EffectiveRouteState : System.IEquatable<Azure.ResourceManager.Network.Models.EffectiveRouteState>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public EffectiveRouteState(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.EffectiveRouteState Active { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.EffectiveRouteState Invalid { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.EffectiveRouteState other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.EffectiveRouteState left, Azure.ResourceManager.Network.Models.EffectiveRouteState right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.EffectiveRouteState (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.EffectiveRouteState left, Azure.ResourceManager.Network.Models.EffectiveRouteState right) { throw null; }
        public override string ToString() { throw null; }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct EffectiveSecurityRuleProtocol : System.IEquatable<Azure.ResourceManager.Network.Models.EffectiveSecurityRuleProtocol>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public EffectiveSecurityRuleProtocol(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.EffectiveSecurityRuleProtocol All { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.EffectiveSecurityRuleProtocol Tcp { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.EffectiveSecurityRuleProtocol Udp { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.EffectiveSecurityRuleProtocol other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.EffectiveSecurityRuleProtocol left, Azure.ResourceManager.Network.Models.EffectiveSecurityRuleProtocol right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.EffectiveSecurityRuleProtocol (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.EffectiveSecurityRuleProtocol left, Azure.ResourceManager.Network.Models.EffectiveSecurityRuleProtocol right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class EndpointServiceResult : Azure.ResourceManager.Network.Models.SubResource
    {
        public EndpointServiceResult() { }
        public string Name { get { throw null; } }
        public string Type { get { throw null; } }
    }
    public partial class EvaluatedNetworkSecurityGroup
    {
        internal EvaluatedNetworkSecurityGroup() { }
        public string AppliedTo { get { throw null; } }
        public Azure.ResourceManager.Network.Models.MatchedRule MatchedRule { get { throw null; } }
        public string NetworkSecurityGroupId { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.NetworkSecurityRulesEvaluationResult> RulesEvaluationResult { get { throw null; } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct EvaluationState : System.IEquatable<Azure.ResourceManager.Network.Models.EvaluationState>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public EvaluationState(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.EvaluationState Completed { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.EvaluationState InProgress { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.EvaluationState NotStarted { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.EvaluationState other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.EvaluationState left, Azure.ResourceManager.Network.Models.EvaluationState right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.EvaluationState (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.EvaluationState left, Azure.ResourceManager.Network.Models.EvaluationState right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class ExpressRouteCircuit : Azure.ResourceManager.Network.Models.Resource
    {
        public ExpressRouteCircuit() { }
        public bool? AllowClassicOperations { get { throw null; } set { } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.ExpressRouteCircuitAuthorization> Authorizations { get { throw null; } }
        public float? BandwidthInGbps { get { throw null; } set { } }
        public string CircuitProvisioningState { get { throw null; } set { } }
        public string Etag { get { throw null; } }
        public Azure.ResourceManager.Network.Models.SubResource ExpressRoutePort { get { throw null; } set { } }
        public string GatewayManagerEtag { get { throw null; } set { } }
        public bool? GlobalReachEnabled { get { throw null; } set { } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.ExpressRouteCircuitPeering> Peerings { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public string ServiceKey { get { throw null; } set { } }
        public string ServiceProviderNotes { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ExpressRouteCircuitServiceProviderProperties ServiceProviderProperties { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ServiceProviderProvisioningState? ServiceProviderProvisioningState { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ExpressRouteCircuitSku Sku { get { throw null; } set { } }
        public int? Stag { get { throw null; } }
    }
    public partial class ExpressRouteCircuitArpTable
    {
        internal ExpressRouteCircuitArpTable() { }
        public int? Age { get { throw null; } }
        public string Interface { get { throw null; } }
        public string IpAddress { get { throw null; } }
        public string MacAddress { get { throw null; } }
    }
    public partial class ExpressRouteCircuitAuthorization : Azure.ResourceManager.Network.Models.SubResource
    {
        public ExpressRouteCircuitAuthorization() { }
        public string AuthorizationKey { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.AuthorizationUseStatus? AuthorizationUseStatus { get { throw null; } set { } }
        public string Etag { get { throw null; } }
        public string Name { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public string Type { get { throw null; } }
    }
    public partial class ExpressRouteCircuitConnection : Azure.ResourceManager.Network.Models.SubResource
    {
        public ExpressRouteCircuitConnection() { }
        public string AddressPrefix { get { throw null; } set { } }
        public string AuthorizationKey { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.CircuitConnectionStatus? CircuitConnectionStatus { get { throw null; } }
        public string Etag { get { throw null; } }
        public Azure.ResourceManager.Network.Models.SubResource ExpressRouteCircuitPeering { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.Ipv6CircuitConnectionConfig Ipv6CircuitConnectionConfig { get { throw null; } set { } }
        public string Name { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.SubResource PeerExpressRouteCircuitPeering { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public string Type { get { throw null; } }
    }
    public partial class ExpressRouteCircuitPeering : Azure.ResourceManager.Network.Models.SubResource
    {
        public ExpressRouteCircuitPeering() { }
        public int? AzureASN { get { throw null; } set { } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.ExpressRouteCircuitConnection> Connections { get { throw null; } }
        public string Etag { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ExpressRouteConnectionId ExpressRouteConnection { get { throw null; } set { } }
        public string GatewayManagerEtag { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.Ipv6ExpressRouteCircuitPeeringConfig Ipv6PeeringConfig { get { throw null; } set { } }
        public string LastModifiedBy { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ExpressRouteCircuitPeeringConfig MicrosoftPeeringConfig { get { throw null; } set { } }
        public string Name { get { throw null; } set { } }
        public long? PeerASN { get { throw null; } set { } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.PeerExpressRouteCircuitConnection> PeeredConnections { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ExpressRoutePeeringType? PeeringType { get { throw null; } set { } }
        public string PrimaryAzurePort { get { throw null; } set { } }
        public string PrimaryPeerAddressPrefix { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public Azure.ResourceManager.Network.Models.SubResource RouteFilter { get { throw null; } set { } }
        public string SecondaryAzurePort { get { throw null; } set { } }
        public string SecondaryPeerAddressPrefix { get { throw null; } set { } }
        public string SharedKey { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ExpressRoutePeeringState? State { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ExpressRouteCircuitStats Stats { get { throw null; } set { } }
        public string Type { get { throw null; } }
        public int? VlanId { get { throw null; } set { } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct ExpressRouteCircuitPeeringAdvertisedPublicPrefixState : System.IEquatable<Azure.ResourceManager.Network.Models.ExpressRouteCircuitPeeringAdvertisedPublicPrefixState>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public ExpressRouteCircuitPeeringAdvertisedPublicPrefixState(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.ExpressRouteCircuitPeeringAdvertisedPublicPrefixState Configured { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ExpressRouteCircuitPeeringAdvertisedPublicPrefixState Configuring { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ExpressRouteCircuitPeeringAdvertisedPublicPrefixState NotConfigured { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ExpressRouteCircuitPeeringAdvertisedPublicPrefixState ValidationNeeded { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.ExpressRouteCircuitPeeringAdvertisedPublicPrefixState other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.ExpressRouteCircuitPeeringAdvertisedPublicPrefixState left, Azure.ResourceManager.Network.Models.ExpressRouteCircuitPeeringAdvertisedPublicPrefixState right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.ExpressRouteCircuitPeeringAdvertisedPublicPrefixState (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.ExpressRouteCircuitPeeringAdvertisedPublicPrefixState left, Azure.ResourceManager.Network.Models.ExpressRouteCircuitPeeringAdvertisedPublicPrefixState right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class ExpressRouteCircuitPeeringConfig
    {
        public ExpressRouteCircuitPeeringConfig() { }
        public System.Collections.Generic.IList<string> AdvertisedCommunities { get { throw null; } }
        public System.Collections.Generic.IList<string> AdvertisedPublicPrefixes { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ExpressRouteCircuitPeeringAdvertisedPublicPrefixState? AdvertisedPublicPrefixesState { get { throw null; } }
        public int? CustomerASN { get { throw null; } set { } }
        public int? LegacyMode { get { throw null; } set { } }
        public string RoutingRegistryName { get { throw null; } set { } }
    }
    public partial class ExpressRouteCircuitPeeringId
    {
        public ExpressRouteCircuitPeeringId() { }
        public string Id { get { throw null; } set { } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct ExpressRouteCircuitPeeringState : System.IEquatable<Azure.ResourceManager.Network.Models.ExpressRouteCircuitPeeringState>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public ExpressRouteCircuitPeeringState(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.ExpressRouteCircuitPeeringState Disabled { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ExpressRouteCircuitPeeringState Enabled { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.ExpressRouteCircuitPeeringState other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.ExpressRouteCircuitPeeringState left, Azure.ResourceManager.Network.Models.ExpressRouteCircuitPeeringState right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.ExpressRouteCircuitPeeringState (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.ExpressRouteCircuitPeeringState left, Azure.ResourceManager.Network.Models.ExpressRouteCircuitPeeringState right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class ExpressRouteCircuitReference
    {
        public ExpressRouteCircuitReference() { }
        public string Id { get { throw null; } set { } }
    }
    public partial class ExpressRouteCircuitRoutesTable
    {
        internal ExpressRouteCircuitRoutesTable() { }
        public string LocPrf { get { throw null; } }
        public string Network { get { throw null; } }
        public string NextHop { get { throw null; } }
        public string Path { get { throw null; } }
        public int? Weight { get { throw null; } }
    }
    public partial class ExpressRouteCircuitRoutesTableSummary
    {
        internal ExpressRouteCircuitRoutesTableSummary() { }
        public int? As { get { throw null; } }
        public string Neighbor { get { throw null; } }
        public string StatePfxRcd { get { throw null; } }
        public string UpDown { get { throw null; } }
        public int? V { get { throw null; } }
    }
    public partial class ExpressRouteCircuitsArpTableListResult
    {
        internal ExpressRouteCircuitsArpTableListResult() { }
        public string NextLink { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.ExpressRouteCircuitArpTable> Value { get { throw null; } }
    }
    public partial class ExpressRouteCircuitServiceProviderProperties
    {
        public ExpressRouteCircuitServiceProviderProperties() { }
        public int? BandwidthInMbps { get { throw null; } set { } }
        public string PeeringLocation { get { throw null; } set { } }
        public string ServiceProviderName { get { throw null; } set { } }
    }
    public partial class ExpressRouteCircuitSku
    {
        public ExpressRouteCircuitSku() { }
        public Azure.ResourceManager.Network.Models.ExpressRouteCircuitSkuFamily? Family { get { throw null; } set { } }
        public string Name { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ExpressRouteCircuitSkuTier? Tier { get { throw null; } set { } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct ExpressRouteCircuitSkuFamily : System.IEquatable<Azure.ResourceManager.Network.Models.ExpressRouteCircuitSkuFamily>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public ExpressRouteCircuitSkuFamily(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.ExpressRouteCircuitSkuFamily MeteredData { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ExpressRouteCircuitSkuFamily UnlimitedData { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.ExpressRouteCircuitSkuFamily other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.ExpressRouteCircuitSkuFamily left, Azure.ResourceManager.Network.Models.ExpressRouteCircuitSkuFamily right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.ExpressRouteCircuitSkuFamily (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.ExpressRouteCircuitSkuFamily left, Azure.ResourceManager.Network.Models.ExpressRouteCircuitSkuFamily right) { throw null; }
        public override string ToString() { throw null; }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct ExpressRouteCircuitSkuTier : System.IEquatable<Azure.ResourceManager.Network.Models.ExpressRouteCircuitSkuTier>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public ExpressRouteCircuitSkuTier(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.ExpressRouteCircuitSkuTier Basic { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ExpressRouteCircuitSkuTier Local { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ExpressRouteCircuitSkuTier Premium { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ExpressRouteCircuitSkuTier Standard { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.ExpressRouteCircuitSkuTier other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.ExpressRouteCircuitSkuTier left, Azure.ResourceManager.Network.Models.ExpressRouteCircuitSkuTier right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.ExpressRouteCircuitSkuTier (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.ExpressRouteCircuitSkuTier left, Azure.ResourceManager.Network.Models.ExpressRouteCircuitSkuTier right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class ExpressRouteCircuitsRoutesTableListResult
    {
        internal ExpressRouteCircuitsRoutesTableListResult() { }
        public string NextLink { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.ExpressRouteCircuitRoutesTable> Value { get { throw null; } }
    }
    public partial class ExpressRouteCircuitsRoutesTableSummaryListResult
    {
        internal ExpressRouteCircuitsRoutesTableSummaryListResult() { }
        public string NextLink { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.ExpressRouteCircuitRoutesTableSummary> Value { get { throw null; } }
    }
    public partial class ExpressRouteCircuitStats
    {
        public ExpressRouteCircuitStats() { }
        public long? PrimarybytesIn { get { throw null; } set { } }
        public long? PrimarybytesOut { get { throw null; } set { } }
        public long? SecondarybytesIn { get { throw null; } set { } }
        public long? SecondarybytesOut { get { throw null; } set { } }
    }
    public partial class ExpressRouteConnection : Azure.ResourceManager.Network.Models.SubResource
    {
        public ExpressRouteConnection(string name) { }
        public string AuthorizationKey { get { throw null; } set { } }
        public bool? EnableInternetSecurity { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ExpressRouteCircuitPeeringId ExpressRouteCircuitPeering { get { throw null; } set { } }
        public string Name { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public Azure.ResourceManager.Network.Models.RoutingConfiguration RoutingConfiguration { get { throw null; } set { } }
        public int? RoutingWeight { get { throw null; } set { } }
    }
    public partial class ExpressRouteConnectionId
    {
        public ExpressRouteConnectionId() { }
        public string Id { get { throw null; } }
    }
    public partial class ExpressRouteConnectionList
    {
        internal ExpressRouteConnectionList() { }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.ExpressRouteConnection> Value { get { throw null; } }
    }
    public partial class ExpressRouteCrossConnection : Azure.ResourceManager.Network.Models.Resource
    {
        public ExpressRouteCrossConnection() { }
        public int? BandwidthInMbps { get { throw null; } set { } }
        public string Etag { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ExpressRouteCircuitReference ExpressRouteCircuit { get { throw null; } set { } }
        public string PeeringLocation { get { throw null; } set { } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.ExpressRouteCrossConnectionPeering> Peerings { get { throw null; } }
        public string PrimaryAzurePort { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public string SecondaryAzurePort { get { throw null; } }
        public string ServiceProviderNotes { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ServiceProviderProvisioningState? ServiceProviderProvisioningState { get { throw null; } set { } }
        public int? STag { get { throw null; } }
    }
    public partial class ExpressRouteCrossConnectionPeering : Azure.ResourceManager.Network.Models.SubResource
    {
        public ExpressRouteCrossConnectionPeering() { }
        public int? AzureASN { get { throw null; } }
        public string Etag { get { throw null; } }
        public string GatewayManagerEtag { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.Ipv6ExpressRouteCircuitPeeringConfig Ipv6PeeringConfig { get { throw null; } set { } }
        public string LastModifiedBy { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ExpressRouteCircuitPeeringConfig MicrosoftPeeringConfig { get { throw null; } set { } }
        public string Name { get { throw null; } set { } }
        public long? PeerASN { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ExpressRoutePeeringType? PeeringType { get { throw null; } set { } }
        public string PrimaryAzurePort { get { throw null; } }
        public string PrimaryPeerAddressPrefix { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public string SecondaryAzurePort { get { throw null; } }
        public string SecondaryPeerAddressPrefix { get { throw null; } set { } }
        public string SharedKey { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ExpressRoutePeeringState? State { get { throw null; } set { } }
        public int? VlanId { get { throw null; } set { } }
    }
    public partial class ExpressRouteCrossConnectionRoutesTableSummary
    {
        internal ExpressRouteCrossConnectionRoutesTableSummary() { }
        public int? Asn { get { throw null; } }
        public string Neighbor { get { throw null; } }
        public string StateOrPrefixesReceived { get { throw null; } }
        public string UpDown { get { throw null; } }
    }
    public partial class ExpressRouteCrossConnectionsRoutesTableSummaryListResult
    {
        internal ExpressRouteCrossConnectionsRoutesTableSummaryListResult() { }
        public string NextLink { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.ExpressRouteCrossConnectionRoutesTableSummary> Value { get { throw null; } }
    }
    public partial class ExpressRouteGateway : Azure.ResourceManager.Network.Models.Resource
    {
        public ExpressRouteGateway() { }
        public Azure.ResourceManager.Network.Models.ExpressRouteGatewayPropertiesAutoScaleConfiguration AutoScaleConfiguration { get { throw null; } set { } }
        public string Etag { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.ExpressRouteConnection> ExpressRouteConnections { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public Azure.ResourceManager.Network.Models.VirtualHubId VirtualHub { get { throw null; } set { } }
    }
    public partial class ExpressRouteGatewayList
    {
        internal ExpressRouteGatewayList() { }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.ExpressRouteGateway> Value { get { throw null; } }
    }
    public partial class ExpressRouteGatewayPropertiesAutoScaleConfiguration
    {
        public ExpressRouteGatewayPropertiesAutoScaleConfiguration() { }
        public Azure.ResourceManager.Network.Models.ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds Bounds { get { throw null; } set { } }
    }
    public partial class ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds
    {
        public ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds() { }
        public int? Max { get { throw null; } set { } }
        public int? Min { get { throw null; } set { } }
    }
    public partial class ExpressRouteLink : Azure.ResourceManager.Network.Models.SubResource
    {
        public ExpressRouteLink() { }
        public Azure.ResourceManager.Network.Models.ExpressRouteLinkAdminState? AdminState { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ExpressRouteLinkConnectorType? ConnectorType { get { throw null; } }
        public string Etag { get { throw null; } }
        public string InterfaceName { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ExpressRouteLinkMacSecConfig MacSecConfig { get { throw null; } set { } }
        public string Name { get { throw null; } set { } }
        public string PatchPanelId { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public string RackId { get { throw null; } }
        public string RouterName { get { throw null; } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct ExpressRouteLinkAdminState : System.IEquatable<Azure.ResourceManager.Network.Models.ExpressRouteLinkAdminState>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public ExpressRouteLinkAdminState(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.ExpressRouteLinkAdminState Disabled { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ExpressRouteLinkAdminState Enabled { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.ExpressRouteLinkAdminState other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.ExpressRouteLinkAdminState left, Azure.ResourceManager.Network.Models.ExpressRouteLinkAdminState right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.ExpressRouteLinkAdminState (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.ExpressRouteLinkAdminState left, Azure.ResourceManager.Network.Models.ExpressRouteLinkAdminState right) { throw null; }
        public override string ToString() { throw null; }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct ExpressRouteLinkConnectorType : System.IEquatable<Azure.ResourceManager.Network.Models.ExpressRouteLinkConnectorType>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public ExpressRouteLinkConnectorType(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.ExpressRouteLinkConnectorType LC { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ExpressRouteLinkConnectorType SC { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.ExpressRouteLinkConnectorType other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.ExpressRouteLinkConnectorType left, Azure.ResourceManager.Network.Models.ExpressRouteLinkConnectorType right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.ExpressRouteLinkConnectorType (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.ExpressRouteLinkConnectorType left, Azure.ResourceManager.Network.Models.ExpressRouteLinkConnectorType right) { throw null; }
        public override string ToString() { throw null; }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct ExpressRouteLinkMacSecCipher : System.IEquatable<Azure.ResourceManager.Network.Models.ExpressRouteLinkMacSecCipher>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public ExpressRouteLinkMacSecCipher(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.ExpressRouteLinkMacSecCipher GcmAes128 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ExpressRouteLinkMacSecCipher GcmAes256 { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.ExpressRouteLinkMacSecCipher other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.ExpressRouteLinkMacSecCipher left, Azure.ResourceManager.Network.Models.ExpressRouteLinkMacSecCipher right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.ExpressRouteLinkMacSecCipher (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.ExpressRouteLinkMacSecCipher left, Azure.ResourceManager.Network.Models.ExpressRouteLinkMacSecCipher right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class ExpressRouteLinkMacSecConfig
    {
        public ExpressRouteLinkMacSecConfig() { }
        public string CakSecretIdentifier { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ExpressRouteLinkMacSecCipher? Cipher { get { throw null; } set { } }
        public string CknSecretIdentifier { get { throw null; } set { } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct ExpressRoutePeeringState : System.IEquatable<Azure.ResourceManager.Network.Models.ExpressRoutePeeringState>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public ExpressRoutePeeringState(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.ExpressRoutePeeringState Disabled { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ExpressRoutePeeringState Enabled { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.ExpressRoutePeeringState other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.ExpressRoutePeeringState left, Azure.ResourceManager.Network.Models.ExpressRoutePeeringState right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.ExpressRoutePeeringState (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.ExpressRoutePeeringState left, Azure.ResourceManager.Network.Models.ExpressRoutePeeringState right) { throw null; }
        public override string ToString() { throw null; }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct ExpressRoutePeeringType : System.IEquatable<Azure.ResourceManager.Network.Models.ExpressRoutePeeringType>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public ExpressRoutePeeringType(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.ExpressRoutePeeringType AzurePrivatePeering { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ExpressRoutePeeringType AzurePublicPeering { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ExpressRoutePeeringType MicrosoftPeering { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.ExpressRoutePeeringType other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.ExpressRoutePeeringType left, Azure.ResourceManager.Network.Models.ExpressRoutePeeringType right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.ExpressRoutePeeringType (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.ExpressRoutePeeringType left, Azure.ResourceManager.Network.Models.ExpressRoutePeeringType right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class ExpressRoutePort : Azure.ResourceManager.Network.Models.Resource
    {
        public ExpressRoutePort() { }
        public string AllocationDate { get { throw null; } }
        public int? BandwidthInGbps { get { throw null; } set { } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.SubResource> Circuits { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ExpressRoutePortsEncapsulation? Encapsulation { get { throw null; } set { } }
        public string Etag { get { throw null; } }
        public string EtherType { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ManagedServiceIdentity Identity { get { throw null; } set { } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.ExpressRouteLink> Links { get { throw null; } }
        public string Mtu { get { throw null; } }
        public string PeeringLocation { get { throw null; } set { } }
        public float? ProvisionedBandwidthInGbps { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public string ResourceGuid { get { throw null; } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct ExpressRoutePortsEncapsulation : System.IEquatable<Azure.ResourceManager.Network.Models.ExpressRoutePortsEncapsulation>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public ExpressRoutePortsEncapsulation(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.ExpressRoutePortsEncapsulation Dot1Q { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ExpressRoutePortsEncapsulation QinQ { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.ExpressRoutePortsEncapsulation other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.ExpressRoutePortsEncapsulation left, Azure.ResourceManager.Network.Models.ExpressRoutePortsEncapsulation right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.ExpressRoutePortsEncapsulation (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.ExpressRoutePortsEncapsulation left, Azure.ResourceManager.Network.Models.ExpressRoutePortsEncapsulation right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class ExpressRoutePortsLocation : Azure.ResourceManager.Network.Models.Resource
    {
        public ExpressRoutePortsLocation() { }
        public string Address { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.ExpressRoutePortsLocationBandwidths> AvailableBandwidths { get { throw null; } }
        public string Contact { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
    }
    public partial class ExpressRoutePortsLocationBandwidths
    {
        public ExpressRoutePortsLocationBandwidths() { }
        public string OfferName { get { throw null; } }
        public int? ValueInGbps { get { throw null; } }
    }
    public partial class ExpressRouteServiceProvider : Azure.ResourceManager.Network.Models.Resource
    {
        public ExpressRouteServiceProvider() { }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.ExpressRouteServiceProviderBandwidthsOffered> BandwidthsOffered { get { throw null; } }
        public System.Collections.Generic.IList<string> PeeringLocations { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
    }
    public partial class ExpressRouteServiceProviderBandwidthsOffered
    {
        public ExpressRouteServiceProviderBandwidthsOffered() { }
        public string OfferName { get { throw null; } set { } }
        public int? ValueInMbps { get { throw null; } set { } }
    }
    public partial class FirewallPolicy : Azure.ResourceManager.Network.Models.Resource
    {
        public FirewallPolicy() { }
        public Azure.ResourceManager.Network.Models.SubResource BasePolicy { get { throw null; } set { } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.SubResource> ChildPolicies { get { throw null; } }
        public string Etag { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.SubResource> Firewalls { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ManagedServiceIdentity Identity { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.FirewallPolicyIntrusionSystemMode? IntrusionSystemMode { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.SubResource> RuleGroups { get { throw null; } }
        public Azure.ResourceManager.Network.Models.AzureFirewallThreatIntelMode? ThreatIntelMode { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.FirewallPolicyThreatIntelWhitelist ThreatIntelWhitelist { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.FirewallPolicyTransportSecurity TransportSecurity { get { throw null; } set { } }
    }
    public partial class FirewallPolicyCertificateAuthority
    {
        public FirewallPolicyCertificateAuthority() { }
        public string KeyVaultSecretId { get { throw null; } set { } }
        public string Name { get { throw null; } set { } }
    }
    public partial class FirewallPolicyFilterRule : Azure.ResourceManager.Network.Models.FirewallPolicyRule
    {
        public FirewallPolicyFilterRule() { }
        public Azure.ResourceManager.Network.Models.FirewallPolicyFilterRuleAction Action { get { throw null; } set { } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.FirewallPolicyRuleCondition> RuleConditions { get { throw null; } }
    }
    public partial class FirewallPolicyFilterRuleAction
    {
        public FirewallPolicyFilterRuleAction() { }
        public Azure.ResourceManager.Network.Models.FirewallPolicyFilterRuleActionType? Type { get { throw null; } set { } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct FirewallPolicyFilterRuleActionType : System.IEquatable<Azure.ResourceManager.Network.Models.FirewallPolicyFilterRuleActionType>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public FirewallPolicyFilterRuleActionType(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.FirewallPolicyFilterRuleActionType Allow { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.FirewallPolicyFilterRuleActionType Deny { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.FirewallPolicyFilterRuleActionType other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.FirewallPolicyFilterRuleActionType left, Azure.ResourceManager.Network.Models.FirewallPolicyFilterRuleActionType right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.FirewallPolicyFilterRuleActionType (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.FirewallPolicyFilterRuleActionType left, Azure.ResourceManager.Network.Models.FirewallPolicyFilterRuleActionType right) { throw null; }
        public override string ToString() { throw null; }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct FirewallPolicyIntrusionSystemMode : System.IEquatable<Azure.ResourceManager.Network.Models.FirewallPolicyIntrusionSystemMode>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public FirewallPolicyIntrusionSystemMode(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.FirewallPolicyIntrusionSystemMode Disabled { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.FirewallPolicyIntrusionSystemMode Enabled { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.FirewallPolicyIntrusionSystemMode other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.FirewallPolicyIntrusionSystemMode left, Azure.ResourceManager.Network.Models.FirewallPolicyIntrusionSystemMode right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.FirewallPolicyIntrusionSystemMode (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.FirewallPolicyIntrusionSystemMode left, Azure.ResourceManager.Network.Models.FirewallPolicyIntrusionSystemMode right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class FirewallPolicyNatRule : Azure.ResourceManager.Network.Models.FirewallPolicyRule
    {
        public FirewallPolicyNatRule() { }
        public Azure.ResourceManager.Network.Models.FirewallPolicyNatRuleAction Action { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.FirewallPolicyRuleCondition RuleCondition { get { throw null; } set { } }
        public string TranslatedAddress { get { throw null; } set { } }
        public string TranslatedPort { get { throw null; } set { } }
    }
    public partial class FirewallPolicyNatRuleAction
    {
        public FirewallPolicyNatRuleAction() { }
        public Azure.ResourceManager.Network.Models.FirewallPolicyNatRuleActionType? Type { get { throw null; } set { } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct FirewallPolicyNatRuleActionType : System.IEquatable<Azure.ResourceManager.Network.Models.FirewallPolicyNatRuleActionType>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public FirewallPolicyNatRuleActionType(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.FirewallPolicyNatRuleActionType Dnat { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.FirewallPolicyNatRuleActionType other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.FirewallPolicyNatRuleActionType left, Azure.ResourceManager.Network.Models.FirewallPolicyNatRuleActionType right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.FirewallPolicyNatRuleActionType (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.FirewallPolicyNatRuleActionType left, Azure.ResourceManager.Network.Models.FirewallPolicyNatRuleActionType right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class FirewallPolicyRule
    {
        public FirewallPolicyRule() { }
        public string Name { get { throw null; } set { } }
        public int? Priority { get { throw null; } set { } }
    }
    public partial class FirewallPolicyRuleCondition
    {
        public FirewallPolicyRuleCondition() { }
        public string Description { get { throw null; } set { } }
        public string Name { get { throw null; } set { } }
    }
    public partial class FirewallPolicyRuleConditionApplicationProtocol
    {
        public FirewallPolicyRuleConditionApplicationProtocol() { }
        public int? Port { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.FirewallPolicyRuleConditionApplicationProtocolType? ProtocolType { get { throw null; } set { } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct FirewallPolicyRuleConditionApplicationProtocolType : System.IEquatable<Azure.ResourceManager.Network.Models.FirewallPolicyRuleConditionApplicationProtocolType>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public FirewallPolicyRuleConditionApplicationProtocolType(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.FirewallPolicyRuleConditionApplicationProtocolType Http { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.FirewallPolicyRuleConditionApplicationProtocolType Https { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.FirewallPolicyRuleConditionApplicationProtocolType other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.FirewallPolicyRuleConditionApplicationProtocolType left, Azure.ResourceManager.Network.Models.FirewallPolicyRuleConditionApplicationProtocolType right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.FirewallPolicyRuleConditionApplicationProtocolType (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.FirewallPolicyRuleConditionApplicationProtocolType left, Azure.ResourceManager.Network.Models.FirewallPolicyRuleConditionApplicationProtocolType right) { throw null; }
        public override string ToString() { throw null; }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct FirewallPolicyRuleConditionNetworkProtocol : System.IEquatable<Azure.ResourceManager.Network.Models.FirewallPolicyRuleConditionNetworkProtocol>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public FirewallPolicyRuleConditionNetworkProtocol(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.FirewallPolicyRuleConditionNetworkProtocol Any { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.FirewallPolicyRuleConditionNetworkProtocol Icmp { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.FirewallPolicyRuleConditionNetworkProtocol TCP { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.FirewallPolicyRuleConditionNetworkProtocol UDP { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.FirewallPolicyRuleConditionNetworkProtocol other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.FirewallPolicyRuleConditionNetworkProtocol left, Azure.ResourceManager.Network.Models.FirewallPolicyRuleConditionNetworkProtocol right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.FirewallPolicyRuleConditionNetworkProtocol (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.FirewallPolicyRuleConditionNetworkProtocol left, Azure.ResourceManager.Network.Models.FirewallPolicyRuleConditionNetworkProtocol right) { throw null; }
        public override string ToString() { throw null; }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct FirewallPolicyRuleConditionType : System.IEquatable<Azure.ResourceManager.Network.Models.FirewallPolicyRuleConditionType>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public FirewallPolicyRuleConditionType(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.FirewallPolicyRuleConditionType ApplicationRuleCondition { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.FirewallPolicyRuleConditionType NatRuleCondition { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.FirewallPolicyRuleConditionType NetworkRuleCondition { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.FirewallPolicyRuleConditionType other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.FirewallPolicyRuleConditionType left, Azure.ResourceManager.Network.Models.FirewallPolicyRuleConditionType right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.FirewallPolicyRuleConditionType (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.FirewallPolicyRuleConditionType left, Azure.ResourceManager.Network.Models.FirewallPolicyRuleConditionType right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class FirewallPolicyRuleGroup : Azure.ResourceManager.Network.Models.SubResource
    {
        public FirewallPolicyRuleGroup() { }
        public string Etag { get { throw null; } }
        public string Name { get { throw null; } set { } }
        public int? Priority { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.FirewallPolicyRule> Rules { get { throw null; } }
        public string Type { get { throw null; } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct FirewallPolicyRuleType : System.IEquatable<Azure.ResourceManager.Network.Models.FirewallPolicyRuleType>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public FirewallPolicyRuleType(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.FirewallPolicyRuleType FirewallPolicyFilterRule { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.FirewallPolicyRuleType FirewallPolicyNatRule { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.FirewallPolicyRuleType other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.FirewallPolicyRuleType left, Azure.ResourceManager.Network.Models.FirewallPolicyRuleType right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.FirewallPolicyRuleType (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.FirewallPolicyRuleType left, Azure.ResourceManager.Network.Models.FirewallPolicyRuleType right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class FirewallPolicyThreatIntelWhitelist
    {
        public FirewallPolicyThreatIntelWhitelist() { }
        public System.Collections.Generic.IList<string> Fqdns { get { throw null; } }
        public System.Collections.Generic.IList<string> IpAddresses { get { throw null; } }
    }
    public partial class FirewallPolicyTransportSecurity
    {
        public FirewallPolicyTransportSecurity() { }
        public Azure.ResourceManager.Network.Models.FirewallPolicyCertificateAuthority CertificateAuthority { get { throw null; } set { } }
        public System.Collections.Generic.IList<string> ExcludedDomains { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.FirewallPolicyTrustedRootCertificate> TrustedRootCertificates { get { throw null; } }
    }
    public partial class FirewallPolicyTrustedRootCertificate
    {
        public FirewallPolicyTrustedRootCertificate() { }
        public string KeyVaultSecretId { get { throw null; } set { } }
        public string Name { get { throw null; } set { } }
    }
    public partial class FlowLog : Azure.ResourceManager.Network.Models.Resource
    {
        public FlowLog() { }
        public bool? Enabled { get { throw null; } set { } }
        public string Etag { get { throw null; } }
        public Azure.ResourceManager.Network.Models.TrafficAnalyticsProperties FlowAnalyticsConfiguration { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.FlowLogFormatParameters Format { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public Azure.ResourceManager.Network.Models.RetentionPolicyParameters RetentionPolicy { get { throw null; } set { } }
        public string StorageId { get { throw null; } set { } }
        public string TargetResourceGuid { get { throw null; } }
        public string TargetResourceId { get { throw null; } set { } }
    }
    public partial class FlowLogFormatParameters
    {
        public FlowLogFormatParameters() { }
        public Azure.ResourceManager.Network.Models.FlowLogFormatType? Type { get { throw null; } set { } }
        public int? Version { get { throw null; } set { } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct FlowLogFormatType : System.IEquatable<Azure.ResourceManager.Network.Models.FlowLogFormatType>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public FlowLogFormatType(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.FlowLogFormatType Json { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.FlowLogFormatType other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.FlowLogFormatType left, Azure.ResourceManager.Network.Models.FlowLogFormatType right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.FlowLogFormatType (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.FlowLogFormatType left, Azure.ResourceManager.Network.Models.FlowLogFormatType right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class FlowLogInformation
    {
        public FlowLogInformation(string targetResourceId, string storageId, bool enabled) { }
        public bool Enabled { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.TrafficAnalyticsProperties FlowAnalyticsConfiguration { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.FlowLogFormatParameters Format { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.RetentionPolicyParameters RetentionPolicy { get { throw null; } set { } }
        public string StorageId { get { throw null; } set { } }
        public string TargetResourceId { get { throw null; } set { } }
    }
    public partial class FlowLogStatusParameters
    {
        public FlowLogStatusParameters(string targetResourceId) { }
        public string TargetResourceId { get { throw null; } }
    }
    public partial class FrontendIPConfiguration : Azure.ResourceManager.Network.Models.SubResource
    {
        public FrontendIPConfiguration() { }
        public string Etag { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.SubResource> InboundNatPools { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.SubResource> InboundNatRules { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.SubResource> LoadBalancingRules { get { throw null; } }
        public string Name { get { throw null; } set { } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.SubResource> OutboundRules { get { throw null; } }
        public string PrivateIPAddress { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.IPVersion? PrivateIPAddressVersion { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.IPAllocationMethod? PrivateIPAllocationMethod { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public Azure.ResourceManager.Network.Models.PublicIPAddress PublicIPAddress { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.SubResource PublicIPPrefix { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.Subnet Subnet { get { throw null; } set { } }
        public string Type { get { throw null; } }
        public System.Collections.Generic.IList<string> Zones { get { throw null; } }
    }
    public partial class GatewayRoute
    {
        internal GatewayRoute() { }
        public string AsPath { get { throw null; } }
        public string LocalAddress { get { throw null; } }
        public string Network { get { throw null; } }
        public string NextHop { get { throw null; } }
        public string Origin { get { throw null; } }
        public string SourcePeer { get { throw null; } }
        public int? Weight { get { throw null; } }
    }
    public partial class GatewayRouteListResult
    {
        internal GatewayRouteListResult() { }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.GatewayRoute> Value { get { throw null; } }
    }
    public partial class GetVpnSitesConfigurationRequest
    {
        public GetVpnSitesConfigurationRequest(string outputBlobSasUrl) { }
        public string OutputBlobSasUrl { get { throw null; } }
        public System.Collections.Generic.IList<string> VpnSites { get { throw null; } }
    }
    public partial class HttpConfiguration
    {
        public HttpConfiguration() { }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.HttpHeader> Headers { get { throw null; } }
        public Azure.ResourceManager.Network.Models.HttpMethod? Method { get { throw null; } set { } }
        public System.Collections.Generic.IList<int> ValidStatusCodes { get { throw null; } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct HttpConfigurationMethod : System.IEquatable<Azure.ResourceManager.Network.Models.HttpConfigurationMethod>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public HttpConfigurationMethod(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.HttpConfigurationMethod Get { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.HttpConfigurationMethod Post { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.HttpConfigurationMethod other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.HttpConfigurationMethod left, Azure.ResourceManager.Network.Models.HttpConfigurationMethod right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.HttpConfigurationMethod (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.HttpConfigurationMethod left, Azure.ResourceManager.Network.Models.HttpConfigurationMethod right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class HttpHeader
    {
        public HttpHeader() { }
        public string Name { get { throw null; } set { } }
        public string Value { get { throw null; } set { } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct HttpMethod : System.IEquatable<Azure.ResourceManager.Network.Models.HttpMethod>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public HttpMethod(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.HttpMethod Get { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.HttpMethod other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.HttpMethod left, Azure.ResourceManager.Network.Models.HttpMethod right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.HttpMethod (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.HttpMethod left, Azure.ResourceManager.Network.Models.HttpMethod right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class HubIPAddresses
    {
        internal HubIPAddresses() { }
        public string PrivateIPAddress { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.AzureFirewallPublicIPAddress> PublicIPAddresses { get { throw null; } }
    }
    public partial class HubRoute
    {
        public HubRoute(string name, string destinationType, System.Collections.Generic.IEnumerable<string> destinations, string nextHopType, string nextHop) { }
        public System.Collections.Generic.IList<string> Destinations { get { throw null; } }
        public string DestinationType { get { throw null; } set { } }
        public string Name { get { throw null; } set { } }
        public string NextHop { get { throw null; } set { } }
        public string NextHopType { get { throw null; } set { } }
    }
    public partial class HubRouteTable : Azure.ResourceManager.Network.Models.SubResource
    {
        public HubRouteTable() { }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.SubResource> AssociatedConnections { get { throw null; } }
        public string Etag { get { throw null; } }
        public System.Collections.Generic.IList<string> Labels { get { throw null; } }
        public string Name { get { throw null; } set { } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.SubResource> PropagatingConnections { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.HubRoute> Routes { get { throw null; } }
        public string Type { get { throw null; } }
    }
    public partial class HubVirtualNetworkConnection : Azure.ResourceManager.Network.Models.SubResource
    {
        public HubVirtualNetworkConnection() { }
        public bool? AllowHubToRemoteVnetTransit { get { throw null; } set { } }
        public bool? AllowRemoteVnetToUseHubVnetGateways { get { throw null; } set { } }
        public bool? EnableInternetSecurity { get { throw null; } set { } }
        public string Etag { get { throw null; } }
        public string Name { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public Azure.ResourceManager.Network.Models.SubResource RemoteVirtualNetwork { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.RoutingConfiguration RoutingConfiguration { get { throw null; } set { } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct IkeEncryption : System.IEquatable<Azure.ResourceManager.Network.Models.IkeEncryption>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public IkeEncryption(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.IkeEncryption AES128 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.IkeEncryption AES192 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.IkeEncryption AES256 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.IkeEncryption DES { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.IkeEncryption DES3 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.IkeEncryption Gcmaes128 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.IkeEncryption Gcmaes256 { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.IkeEncryption other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.IkeEncryption left, Azure.ResourceManager.Network.Models.IkeEncryption right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.IkeEncryption (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.IkeEncryption left, Azure.ResourceManager.Network.Models.IkeEncryption right) { throw null; }
        public override string ToString() { throw null; }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct IkeIntegrity : System.IEquatable<Azure.ResourceManager.Network.Models.IkeIntegrity>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public IkeIntegrity(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.IkeIntegrity Gcmaes128 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.IkeIntegrity Gcmaes256 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.IkeIntegrity MD5 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.IkeIntegrity SHA1 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.IkeIntegrity SHA256 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.IkeIntegrity SHA384 { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.IkeIntegrity other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.IkeIntegrity left, Azure.ResourceManager.Network.Models.IkeIntegrity right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.IkeIntegrity (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.IkeIntegrity left, Azure.ResourceManager.Network.Models.IkeIntegrity right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class InboundNatPool : Azure.ResourceManager.Network.Models.SubResource
    {
        public InboundNatPool() { }
        public int? BackendPort { get { throw null; } set { } }
        public bool? EnableFloatingIP { get { throw null; } set { } }
        public bool? EnableTcpReset { get { throw null; } set { } }
        public string Etag { get { throw null; } }
        public Azure.ResourceManager.Network.Models.SubResource FrontendIPConfiguration { get { throw null; } set { } }
        public int? FrontendPortRangeEnd { get { throw null; } set { } }
        public int? FrontendPortRangeStart { get { throw null; } set { } }
        public int? IdleTimeoutInMinutes { get { throw null; } set { } }
        public string Name { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.TransportProtocol? Protocol { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public string Type { get { throw null; } }
    }
    public partial class InboundNatRule : Azure.ResourceManager.Network.Models.SubResource
    {
        public InboundNatRule() { }
        public Azure.ResourceManager.Network.Models.NetworkInterfaceIPConfiguration BackendIPConfiguration { get { throw null; } }
        public int? BackendPort { get { throw null; } set { } }
        public bool? EnableFloatingIP { get { throw null; } set { } }
        public bool? EnableTcpReset { get { throw null; } set { } }
        public string Etag { get { throw null; } }
        public Azure.ResourceManager.Network.Models.SubResource FrontendIPConfiguration { get { throw null; } set { } }
        public int? FrontendPort { get { throw null; } set { } }
        public int? IdleTimeoutInMinutes { get { throw null; } set { } }
        public string Name { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.TransportProtocol? Protocol { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public string Type { get { throw null; } }
    }
    public partial class IPAddressAvailabilityResult
    {
        internal IPAddressAvailabilityResult() { }
        public bool? Available { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<string> AvailableIPAddresses { get { throw null; } }
    }
    public partial class IpAllocation : Azure.ResourceManager.Network.Models.Resource
    {
        public IpAllocation() { }
        public System.Collections.Generic.IDictionary<string, string> AllocationTags { get { throw null; } }
        public string Etag { get { throw null; } }
        public string IpamAllocationId { get { throw null; } set { } }
        public string Prefix { get { throw null; } set { } }
        public int? PrefixLength { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.IPVersion? PrefixType { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.SubResource Subnet { get { throw null; } }
        public Azure.ResourceManager.Network.Models.IpAllocationType? TypePropertiesType { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.SubResource VirtualNetwork { get { throw null; } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct IPAllocationMethod : System.IEquatable<Azure.ResourceManager.Network.Models.IPAllocationMethod>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public IPAllocationMethod(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.IPAllocationMethod Dynamic { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.IPAllocationMethod Static { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.IPAllocationMethod other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.IPAllocationMethod left, Azure.ResourceManager.Network.Models.IPAllocationMethod right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.IPAllocationMethod (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.IPAllocationMethod left, Azure.ResourceManager.Network.Models.IPAllocationMethod right) { throw null; }
        public override string ToString() { throw null; }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct IpAllocationType : System.IEquatable<Azure.ResourceManager.Network.Models.IpAllocationType>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public IpAllocationType(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.IpAllocationType Hypernet { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.IpAllocationType Undefined { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.IpAllocationType other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.IpAllocationType left, Azure.ResourceManager.Network.Models.IpAllocationType right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.IpAllocationType (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.IpAllocationType left, Azure.ResourceManager.Network.Models.IpAllocationType right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class IPConfiguration : Azure.ResourceManager.Network.Models.SubResource
    {
        public IPConfiguration() { }
        public string Etag { get { throw null; } }
        public string Name { get { throw null; } set { } }
        public string PrivateIPAddress { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.IPAllocationMethod? PrivateIPAllocationMethod { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public Azure.ResourceManager.Network.Models.PublicIPAddress PublicIPAddress { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.Subnet Subnet { get { throw null; } set { } }
    }
    public partial class IPConfigurationBgpPeeringAddress
    {
        public IPConfigurationBgpPeeringAddress() { }
        public System.Collections.Generic.IList<string> CustomBgpIpAddresses { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<string> DefaultBgpIpAddresses { get { throw null; } }
        public string IpconfigurationId { get { throw null; } set { } }
        public System.Collections.Generic.IReadOnlyList<string> TunnelIpAddresses { get { throw null; } }
    }
    public partial class IPConfigurationProfile : Azure.ResourceManager.Network.Models.SubResource
    {
        public IPConfigurationProfile() { }
        public string Etag { get { throw null; } }
        public string Name { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public Azure.ResourceManager.Network.Models.Subnet Subnet { get { throw null; } set { } }
        public string Type { get { throw null; } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct IpFlowProtocol : System.IEquatable<Azure.ResourceManager.Network.Models.IpFlowProtocol>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public IpFlowProtocol(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.IpFlowProtocol TCP { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.IpFlowProtocol UDP { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.IpFlowProtocol other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.IpFlowProtocol left, Azure.ResourceManager.Network.Models.IpFlowProtocol right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.IpFlowProtocol (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.IpFlowProtocol left, Azure.ResourceManager.Network.Models.IpFlowProtocol right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class IpGroup : Azure.ResourceManager.Network.Models.Resource
    {
        public IpGroup() { }
        public string Etag { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.SubResource> Firewalls { get { throw null; } }
        public System.Collections.Generic.IList<string> IpAddresses { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct IpsecEncryption : System.IEquatable<Azure.ResourceManager.Network.Models.IpsecEncryption>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public IpsecEncryption(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.IpsecEncryption AES128 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.IpsecEncryption AES192 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.IpsecEncryption AES256 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.IpsecEncryption DES { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.IpsecEncryption DES3 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.IpsecEncryption Gcmaes128 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.IpsecEncryption Gcmaes192 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.IpsecEncryption Gcmaes256 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.IpsecEncryption None { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.IpsecEncryption other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.IpsecEncryption left, Azure.ResourceManager.Network.Models.IpsecEncryption right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.IpsecEncryption (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.IpsecEncryption left, Azure.ResourceManager.Network.Models.IpsecEncryption right) { throw null; }
        public override string ToString() { throw null; }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct IpsecIntegrity : System.IEquatable<Azure.ResourceManager.Network.Models.IpsecIntegrity>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public IpsecIntegrity(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.IpsecIntegrity Gcmaes128 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.IpsecIntegrity Gcmaes192 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.IpsecIntegrity Gcmaes256 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.IpsecIntegrity MD5 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.IpsecIntegrity SHA1 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.IpsecIntegrity SHA256 { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.IpsecIntegrity other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.IpsecIntegrity left, Azure.ResourceManager.Network.Models.IpsecIntegrity right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.IpsecIntegrity (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.IpsecIntegrity left, Azure.ResourceManager.Network.Models.IpsecIntegrity right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class IpsecPolicy
    {
        public IpsecPolicy(int saLifeTimeSeconds, int saDataSizeKilobytes, Azure.ResourceManager.Network.Models.IpsecEncryption ipsecEncryption, Azure.ResourceManager.Network.Models.IpsecIntegrity ipsecIntegrity, Azure.ResourceManager.Network.Models.IkeEncryption ikeEncryption, Azure.ResourceManager.Network.Models.IkeIntegrity ikeIntegrity, Azure.ResourceManager.Network.Models.DhGroup dhGroup, Azure.ResourceManager.Network.Models.PfsGroup pfsGroup) { }
        public Azure.ResourceManager.Network.Models.DhGroup DhGroup { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.IkeEncryption IkeEncryption { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.IkeIntegrity IkeIntegrity { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.IpsecEncryption IpsecEncryption { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.IpsecIntegrity IpsecIntegrity { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.PfsGroup PfsGroup { get { throw null; } set { } }
        public int SaDataSizeKilobytes { get { throw null; } set { } }
        public int SaLifeTimeSeconds { get { throw null; } set { } }
    }
    public partial class IpTag
    {
        public IpTag() { }
        public string IpTagType { get { throw null; } set { } }
        public string Tag { get { throw null; } set { } }
    }
    public partial class Ipv6CircuitConnectionConfig
    {
        public Ipv6CircuitConnectionConfig() { }
        public string AddressPrefix { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.CircuitConnectionStatus? CircuitConnectionStatus { get { throw null; } }
    }
    public partial class Ipv6ExpressRouteCircuitPeeringConfig
    {
        public Ipv6ExpressRouteCircuitPeeringConfig() { }
        public Azure.ResourceManager.Network.Models.ExpressRouteCircuitPeeringConfig MicrosoftPeeringConfig { get { throw null; } set { } }
        public string PrimaryPeerAddressPrefix { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.SubResource RouteFilter { get { throw null; } set { } }
        public string SecondaryPeerAddressPrefix { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ExpressRouteCircuitPeeringState? State { get { throw null; } set { } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct IPVersion : System.IEquatable<Azure.ResourceManager.Network.Models.IPVersion>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public IPVersion(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.IPVersion IPv4 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.IPVersion IPv6 { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.IPVersion other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.IPVersion left, Azure.ResourceManager.Network.Models.IPVersion right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.IPVersion (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.IPVersion left, Azure.ResourceManager.Network.Models.IPVersion right) { throw null; }
        public override string ToString() { throw null; }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct IssueType : System.IEquatable<Azure.ResourceManager.Network.Models.IssueType>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public IssueType(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.IssueType AgentStopped { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.IssueType DnsResolution { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.IssueType GuestFirewall { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.IssueType NetworkSecurityRule { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.IssueType Platform { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.IssueType PortThrottled { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.IssueType SocketBind { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.IssueType Unknown { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.IssueType UserDefinedRoute { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.IssueType other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.IssueType left, Azure.ResourceManager.Network.Models.IssueType right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.IssueType (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.IssueType left, Azure.ResourceManager.Network.Models.IssueType right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class LoadBalancer : Azure.ResourceManager.Network.Models.Resource
    {
        public LoadBalancer() { }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.BackendAddressPool> BackendAddressPools { get { throw null; } }
        public string Etag { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.FrontendIPConfiguration> FrontendIPConfigurations { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.InboundNatPool> InboundNatPools { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.InboundNatRule> InboundNatRules { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.LoadBalancingRule> LoadBalancingRules { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.OutboundRule> OutboundRules { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.Probe> Probes { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public string ResourceGuid { get { throw null; } }
        public Azure.ResourceManager.Network.Models.LoadBalancerSku Sku { get { throw null; } set { } }
    }
    public partial class LoadBalancerBackendAddress
    {
        public LoadBalancerBackendAddress() { }
        public string IpAddress { get { throw null; } set { } }
        public string Name { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.NetworkInterfaceIPConfiguration NetworkInterfaceIPConfiguration { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.VirtualNetwork VirtualNetwork { get { throw null; } set { } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct LoadBalancerOutboundRuleProtocol : System.IEquatable<Azure.ResourceManager.Network.Models.LoadBalancerOutboundRuleProtocol>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public LoadBalancerOutboundRuleProtocol(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.LoadBalancerOutboundRuleProtocol All { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.LoadBalancerOutboundRuleProtocol Tcp { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.LoadBalancerOutboundRuleProtocol Udp { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.LoadBalancerOutboundRuleProtocol other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.LoadBalancerOutboundRuleProtocol left, Azure.ResourceManager.Network.Models.LoadBalancerOutboundRuleProtocol right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.LoadBalancerOutboundRuleProtocol (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.LoadBalancerOutboundRuleProtocol left, Azure.ResourceManager.Network.Models.LoadBalancerOutboundRuleProtocol right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class LoadBalancerSku
    {
        public LoadBalancerSku() { }
        public Azure.ResourceManager.Network.Models.LoadBalancerSkuName? Name { get { throw null; } set { } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct LoadBalancerSkuName : System.IEquatable<Azure.ResourceManager.Network.Models.LoadBalancerSkuName>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public LoadBalancerSkuName(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.LoadBalancerSkuName Basic { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.LoadBalancerSkuName Standard { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.LoadBalancerSkuName other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.LoadBalancerSkuName left, Azure.ResourceManager.Network.Models.LoadBalancerSkuName right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.LoadBalancerSkuName (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.LoadBalancerSkuName left, Azure.ResourceManager.Network.Models.LoadBalancerSkuName right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class LoadBalancingRule : Azure.ResourceManager.Network.Models.SubResource
    {
        public LoadBalancingRule() { }
        public Azure.ResourceManager.Network.Models.SubResource BackendAddressPool { get { throw null; } set { } }
        public int? BackendPort { get { throw null; } set { } }
        public bool? DisableOutboundSnat { get { throw null; } set { } }
        public bool? EnableFloatingIP { get { throw null; } set { } }
        public bool? EnableTcpReset { get { throw null; } set { } }
        public string Etag { get { throw null; } }
        public Azure.ResourceManager.Network.Models.SubResource FrontendIPConfiguration { get { throw null; } set { } }
        public int? FrontendPort { get { throw null; } set { } }
        public int? IdleTimeoutInMinutes { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.LoadDistribution? LoadDistribution { get { throw null; } set { } }
        public string Name { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.SubResource Probe { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.TransportProtocol? Protocol { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public string Type { get { throw null; } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct LoadDistribution : System.IEquatable<Azure.ResourceManager.Network.Models.LoadDistribution>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public LoadDistribution(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.LoadDistribution Default { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.LoadDistribution SourceIP { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.LoadDistribution SourceIPProtocol { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.LoadDistribution other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.LoadDistribution left, Azure.ResourceManager.Network.Models.LoadDistribution right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.LoadDistribution (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.LoadDistribution left, Azure.ResourceManager.Network.Models.LoadDistribution right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class LocalNetworkGateway : Azure.ResourceManager.Network.Models.Resource
    {
        public LocalNetworkGateway() { }
        public Azure.ResourceManager.Network.Models.BgpSettings BgpSettings { get { throw null; } set { } }
        public string Etag { get { throw null; } }
        public string Fqdn { get { throw null; } set { } }
        public string GatewayIpAddress { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.AddressSpace LocalNetworkAddressSpace { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public string ResourceGuid { get { throw null; } }
    }
    public partial class LogSpecification
    {
        internal LogSpecification() { }
        public string BlobDuration { get { throw null; } }
        public string DisplayName { get { throw null; } }
        public string Name { get { throw null; } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct ManagedRuleEnabledState : System.IEquatable<Azure.ResourceManager.Network.Models.ManagedRuleEnabledState>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public ManagedRuleEnabledState(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.ManagedRuleEnabledState Disabled { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.ManagedRuleEnabledState other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.ManagedRuleEnabledState left, Azure.ResourceManager.Network.Models.ManagedRuleEnabledState right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.ManagedRuleEnabledState (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.ManagedRuleEnabledState left, Azure.ResourceManager.Network.Models.ManagedRuleEnabledState right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class ManagedRuleGroupOverride
    {
        public ManagedRuleGroupOverride(string ruleGroupName) { }
        public string RuleGroupName { get { throw null; } set { } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.ManagedRuleOverride> Rules { get { throw null; } }
    }
    public partial class ManagedRuleOverride
    {
        public ManagedRuleOverride(string ruleId) { }
        public string RuleId { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ManagedRuleEnabledState? State { get { throw null; } set { } }
    }
    public partial class ManagedRulesDefinition
    {
        public ManagedRulesDefinition(System.Collections.Generic.IEnumerable<Azure.ResourceManager.Network.Models.ManagedRuleSet> managedRuleSets) { }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.OwaspCrsExclusionEntry> Exclusions { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.ManagedRuleSet> ManagedRuleSets { get { throw null; } }
    }
    public partial class ManagedRuleSet
    {
        public ManagedRuleSet(string ruleSetType, string ruleSetVersion) { }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.ManagedRuleGroupOverride> RuleGroupOverrides { get { throw null; } }
        public string RuleSetType { get { throw null; } set { } }
        public string RuleSetVersion { get { throw null; } set { } }
    }
    public partial class ManagedServiceIdentity
    {
        public ManagedServiceIdentity() { }
        public string PrincipalId { get { throw null; } }
        public string TenantId { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ResourceIdentityType? Type { get { throw null; } set { } }
        public System.Collections.Generic.IDictionary<string, Azure.ResourceManager.Network.Models.Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties> UserAssignedIdentities { get { throw null; } }
    }
    public partial class MatchCondition
    {
        public MatchCondition(System.Collections.Generic.IEnumerable<Azure.ResourceManager.Network.Models.MatchVariable> matchVariables, Azure.ResourceManager.Network.Models.WebApplicationFirewallOperator @operator, System.Collections.Generic.IEnumerable<string> matchValues) { }
        public System.Collections.Generic.IList<string> MatchValues { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.MatchVariable> MatchVariables { get { throw null; } }
        public bool? NegationConditon { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.WebApplicationFirewallOperator Operator { get { throw null; } set { } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.WebApplicationFirewallTransform> Transforms { get { throw null; } }
    }
    public partial class MatchedRule
    {
        internal MatchedRule() { }
        public string Action { get { throw null; } }
        public string RuleName { get { throw null; } }
    }
    public partial class MatchVariable
    {
        public MatchVariable(Azure.ResourceManager.Network.Models.WebApplicationFirewallMatchVariable variableName) { }
        public string Selector { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.WebApplicationFirewallMatchVariable VariableName { get { throw null; } set { } }
    }
    public partial class MetricSpecification
    {
        internal MetricSpecification() { }
        public string AggregationType { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.Availability> Availabilities { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.Dimension> Dimensions { get { throw null; } }
        public string DisplayDescription { get { throw null; } }
        public string DisplayName { get { throw null; } }
        public bool? EnableRegionalMdmAccount { get { throw null; } }
        public bool? FillGapWithZero { get { throw null; } }
        public bool? IsInternal { get { throw null; } }
        public string MetricFilterPattern { get { throw null; } }
        public string Name { get { throw null; } }
        public string ResourceIdDimensionNameOverride { get { throw null; } }
        public string SourceMdmAccount { get { throw null; } }
        public string SourceMdmNamespace { get { throw null; } }
        public string Unit { get { throw null; } }
    }
    public partial class NatGateway : Azure.ResourceManager.Network.Models.Resource
    {
        public NatGateway() { }
        public string Etag { get { throw null; } }
        public int? IdleTimeoutInMinutes { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.SubResource> PublicIpAddresses { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.SubResource> PublicIpPrefixes { get { throw null; } }
        public string ResourceGuid { get { throw null; } }
        public Azure.ResourceManager.Network.Models.NatGatewaySku Sku { get { throw null; } set { } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.SubResource> Subnets { get { throw null; } }
        public System.Collections.Generic.IList<string> Zones { get { throw null; } }
    }
    public partial class NatGatewaySku
    {
        public NatGatewaySku() { }
        public Azure.ResourceManager.Network.Models.NatGatewaySkuName? Name { get { throw null; } set { } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct NatGatewaySkuName : System.IEquatable<Azure.ResourceManager.Network.Models.NatGatewaySkuName>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public NatGatewaySkuName(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.NatGatewaySkuName Standard { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.NatGatewaySkuName other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.NatGatewaySkuName left, Azure.ResourceManager.Network.Models.NatGatewaySkuName right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.NatGatewaySkuName (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.NatGatewaySkuName left, Azure.ResourceManager.Network.Models.NatGatewaySkuName right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class NatRuleCondition : Azure.ResourceManager.Network.Models.FirewallPolicyRuleCondition
    {
        public NatRuleCondition() { }
        public System.Collections.Generic.IList<string> DestinationAddresses { get { throw null; } }
        public System.Collections.Generic.IList<string> DestinationPorts { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.FirewallPolicyRuleConditionNetworkProtocol> IpProtocols { get { throw null; } }
        public System.Collections.Generic.IList<string> SourceAddresses { get { throw null; } }
        public System.Collections.Generic.IList<string> SourceIpGroups { get { throw null; } }
        public bool? TerminateTLS { get { throw null; } set { } }
    }
    public partial class NetworkConfigurationDiagnosticParameters
    {
        public NetworkConfigurationDiagnosticParameters(string targetResourceId, System.Collections.Generic.IEnumerable<Azure.ResourceManager.Network.Models.NetworkConfigurationDiagnosticProfile> profiles) { }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.NetworkConfigurationDiagnosticProfile> Profiles { get { throw null; } }
        public string TargetResourceId { get { throw null; } }
        public Azure.ResourceManager.Network.Models.VerbosityLevel? VerbosityLevel { get { throw null; } set { } }
    }
    public partial class NetworkConfigurationDiagnosticProfile
    {
        public NetworkConfigurationDiagnosticProfile(Azure.ResourceManager.Network.Models.Direction direction, string protocol, string source, string destination, string destinationPort) { }
        public string Destination { get { throw null; } set { } }
        public string DestinationPort { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.Direction Direction { get { throw null; } set { } }
        public string Protocol { get { throw null; } set { } }
        public string Source { get { throw null; } set { } }
    }
    public partial class NetworkConfigurationDiagnosticResponse
    {
        internal NetworkConfigurationDiagnosticResponse() { }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.NetworkConfigurationDiagnosticResult> Results { get { throw null; } }
    }
    public partial class NetworkConfigurationDiagnosticResult
    {
        internal NetworkConfigurationDiagnosticResult() { }
        public Azure.ResourceManager.Network.Models.NetworkSecurityGroupResult NetworkSecurityGroupResult { get { throw null; } }
        public Azure.ResourceManager.Network.Models.NetworkConfigurationDiagnosticProfile Profile { get { throw null; } }
    }
    public partial class NetworkIntentPolicy : Azure.ResourceManager.Network.Models.Resource
    {
        public NetworkIntentPolicy() { }
        public string Etag { get { throw null; } }
    }
    public partial class NetworkIntentPolicyConfiguration
    {
        public NetworkIntentPolicyConfiguration() { }
        public string NetworkIntentPolicyName { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.NetworkIntentPolicy SourceNetworkIntentPolicy { get { throw null; } set { } }
    }
    public partial class NetworkInterface : Azure.ResourceManager.Network.Models.Resource
    {
        public NetworkInterface() { }
        public Azure.ResourceManager.Network.Models.NetworkInterfaceDnsSettings DnsSettings { get { throw null; } set { } }
        public bool? EnableAcceleratedNetworking { get { throw null; } set { } }
        public bool? EnableIPForwarding { get { throw null; } set { } }
        public string Etag { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<string> HostedWorkloads { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.NetworkInterfaceIPConfiguration> IpConfigurations { get { throw null; } }
        public string MacAddress { get { throw null; } }
        public Azure.ResourceManager.Network.Models.NetworkSecurityGroup NetworkSecurityGroup { get { throw null; } set { } }
        public bool? Primary { get { throw null; } }
        public Azure.ResourceManager.Network.Models.PrivateEndpoint PrivateEndpoint { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public string ResourceGuid { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.NetworkInterfaceTapConfiguration> TapConfigurations { get { throw null; } }
        public Azure.ResourceManager.Network.Models.SubResource VirtualMachine { get { throw null; } }
    }
    public partial class NetworkInterfaceAssociation
    {
        internal NetworkInterfaceAssociation() { }
        public string Id { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.SecurityRule> SecurityRules { get { throw null; } }
    }
    public partial class NetworkInterfaceDnsSettings
    {
        public NetworkInterfaceDnsSettings() { }
        public System.Collections.Generic.IReadOnlyList<string> AppliedDnsServers { get { throw null; } }
        public System.Collections.Generic.IList<string> DnsServers { get { throw null; } }
        public string InternalDnsNameLabel { get { throw null; } set { } }
        public string InternalDomainNameSuffix { get { throw null; } }
        public string InternalFqdn { get { throw null; } }
    }
    public partial class NetworkInterfaceIPConfiguration : Azure.ResourceManager.Network.Models.SubResource
    {
        public NetworkInterfaceIPConfiguration() { }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.ApplicationGatewayBackendAddressPool> ApplicationGatewayBackendAddressPools { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.ApplicationSecurityGroup> ApplicationSecurityGroups { get { throw null; } }
        public string Etag { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.BackendAddressPool> LoadBalancerBackendAddressPools { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.InboundNatRule> LoadBalancerInboundNatRules { get { throw null; } }
        public string Name { get { throw null; } set { } }
        public bool? Primary { get { throw null; } set { } }
        public string PrivateIPAddress { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.IPVersion? PrivateIPAddressVersion { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.IPAllocationMethod? PrivateIPAllocationMethod { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties PrivateLinkConnectionProperties { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public Azure.ResourceManager.Network.Models.PublicIPAddress PublicIPAddress { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.Subnet Subnet { get { throw null; } set { } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.VirtualNetworkTap> VirtualNetworkTaps { get { throw null; } }
    }
    public partial class NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties
    {
        internal NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties() { }
        public System.Collections.Generic.IReadOnlyList<string> Fqdns { get { throw null; } }
        public string GroupId { get { throw null; } }
        public string RequiredMemberName { get { throw null; } }
    }
    public partial class NetworkInterfaceTapConfiguration : Azure.ResourceManager.Network.Models.SubResource
    {
        public NetworkInterfaceTapConfiguration() { }
        public string Etag { get { throw null; } }
        public string Name { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public string Type { get { throw null; } }
        public Azure.ResourceManager.Network.Models.VirtualNetworkTap VirtualNetworkTap { get { throw null; } set { } }
    }
    public partial class NetworkProfile : Azure.ResourceManager.Network.Models.Resource
    {
        public NetworkProfile() { }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.ContainerNetworkInterfaceConfiguration> ContainerNetworkInterfaceConfigurations { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.ContainerNetworkInterface> ContainerNetworkInterfaces { get { throw null; } }
        public string Etag { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public string ResourceGuid { get { throw null; } }
    }
    public partial class NetworkRuleCondition : Azure.ResourceManager.Network.Models.FirewallPolicyRuleCondition
    {
        public NetworkRuleCondition() { }
        public System.Collections.Generic.IList<string> DestinationAddresses { get { throw null; } }
        public System.Collections.Generic.IList<string> DestinationIpGroups { get { throw null; } }
        public System.Collections.Generic.IList<string> DestinationPorts { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.FirewallPolicyRuleConditionNetworkProtocol> IpProtocols { get { throw null; } }
        public System.Collections.Generic.IList<string> SourceAddresses { get { throw null; } }
        public System.Collections.Generic.IList<string> SourceIpGroups { get { throw null; } }
    }
    public partial class NetworkSecurityGroup : Azure.ResourceManager.Network.Models.Resource
    {
        public NetworkSecurityGroup() { }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.SecurityRule> DefaultSecurityRules { get { throw null; } }
        public string Etag { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.FlowLog> FlowLogs { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.NetworkInterface> NetworkInterfaces { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public string ResourceGuid { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.SecurityRule> SecurityRules { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.Subnet> Subnets { get { throw null; } }
    }
    public partial class NetworkSecurityGroupResult
    {
        internal NetworkSecurityGroupResult() { }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.EvaluatedNetworkSecurityGroup> EvaluatedNetworkSecurityGroups { get { throw null; } }
        public Azure.ResourceManager.Network.Models.SecurityRuleAccess? SecurityRuleAccessResult { get { throw null; } }
    }
    public partial class NetworkSecurityRulesEvaluationResult
    {
        internal NetworkSecurityRulesEvaluationResult() { }
        public bool? DestinationMatched { get { throw null; } }
        public bool? DestinationPortMatched { get { throw null; } }
        public string Name { get { throw null; } }
        public bool? ProtocolMatched { get { throw null; } }
        public bool? SourceMatched { get { throw null; } }
        public bool? SourcePortMatched { get { throw null; } }
    }
    public partial class NetworkVirtualAppliance : Azure.ResourceManager.Network.Models.Resource
    {
        public NetworkVirtualAppliance() { }
        public System.Collections.Generic.IList<string> BootStrapConfigurationBlob { get { throw null; } }
        public System.Collections.Generic.IList<string> CloudInitConfigurationBlob { get { throw null; } }
        public string Etag { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ManagedServiceIdentity Identity { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public Azure.ResourceManager.Network.Models.VirtualApplianceSkuProperties Sku { get { throw null; } set { } }
        public long? VirtualApplianceAsn { get { throw null; } set { } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.VirtualApplianceNicProperties> VirtualApplianceNics { get { throw null; } }
        public Azure.ResourceManager.Network.Models.SubResource VirtualHub { get { throw null; } set { } }
    }
    public partial class NetworkWatcher : Azure.ResourceManager.Network.Models.Resource
    {
        public NetworkWatcher() { }
        public string Etag { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
    }
    public partial class NextHopParameters
    {
        public NextHopParameters(string targetResourceId, string sourceIPAddress, string destinationIPAddress) { }
        public string DestinationIPAddress { get { throw null; } }
        public string SourceIPAddress { get { throw null; } }
        public string TargetNicResourceId { get { throw null; } set { } }
        public string TargetResourceId { get { throw null; } }
    }
    public partial class NextHopResult
    {
        internal NextHopResult() { }
        public string NextHopIpAddress { get { throw null; } }
        public Azure.ResourceManager.Network.Models.NextHopType? NextHopType { get { throw null; } }
        public string RouteTableId { get { throw null; } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct NextHopType : System.IEquatable<Azure.ResourceManager.Network.Models.NextHopType>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public NextHopType(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.NextHopType HyperNetGateway { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.NextHopType Internet { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.NextHopType None { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.NextHopType VirtualAppliance { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.NextHopType VirtualNetworkGateway { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.NextHopType VnetLocal { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.NextHopType other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.NextHopType left, Azure.ResourceManager.Network.Models.NextHopType right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.NextHopType (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.NextHopType left, Azure.ResourceManager.Network.Models.NextHopType right) { throw null; }
        public override string ToString() { throw null; }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct OfficeTrafficCategory : System.IEquatable<Azure.ResourceManager.Network.Models.OfficeTrafficCategory>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public OfficeTrafficCategory(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.OfficeTrafficCategory All { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.OfficeTrafficCategory None { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.OfficeTrafficCategory Optimize { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.OfficeTrafficCategory OptimizeAndAllow { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.OfficeTrafficCategory other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.OfficeTrafficCategory left, Azure.ResourceManager.Network.Models.OfficeTrafficCategory right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.OfficeTrafficCategory (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.OfficeTrafficCategory left, Azure.ResourceManager.Network.Models.OfficeTrafficCategory right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class Operation
    {
        internal Operation() { }
        public Azure.ResourceManager.Network.Models.OperationDisplay Display { get { throw null; } }
        public string Name { get { throw null; } }
        public string Origin { get { throw null; } }
        public Azure.ResourceManager.Network.Models.OperationPropertiesFormatServiceSpecification ServiceSpecification { get { throw null; } }
    }
    public partial class OperationDisplay
    {
        internal OperationDisplay() { }
        public string Description { get { throw null; } }
        public string Operation { get { throw null; } }
        public string Provider { get { throw null; } }
        public string Resource { get { throw null; } }
    }
    public partial class OperationPropertiesFormatServiceSpecification
    {
        internal OperationPropertiesFormatServiceSpecification() { }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.LogSpecification> LogSpecifications { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.MetricSpecification> MetricSpecifications { get { throw null; } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct Origin : System.IEquatable<Azure.ResourceManager.Network.Models.Origin>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public Origin(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.Origin Inbound { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.Origin Local { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.Origin Outbound { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.Origin other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.Origin left, Azure.ResourceManager.Network.Models.Origin right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.Origin (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.Origin left, Azure.ResourceManager.Network.Models.Origin right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class OutboundRule : Azure.ResourceManager.Network.Models.SubResource
    {
        public OutboundRule() { }
        public int? AllocatedOutboundPorts { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.SubResource BackendAddressPool { get { throw null; } set { } }
        public bool? EnableTcpReset { get { throw null; } set { } }
        public string Etag { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.SubResource> FrontendIPConfigurations { get { throw null; } }
        public int? IdleTimeoutInMinutes { get { throw null; } set { } }
        public string Name { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.LoadBalancerOutboundRuleProtocol? Protocol { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public string Type { get { throw null; } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct OutputType : System.IEquatable<Azure.ResourceManager.Network.Models.OutputType>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public OutputType(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.OutputType Workspace { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.OutputType other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.OutputType left, Azure.ResourceManager.Network.Models.OutputType right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.OutputType (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.OutputType left, Azure.ResourceManager.Network.Models.OutputType right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class OwaspCrsExclusionEntry
    {
        public OwaspCrsExclusionEntry(Azure.ResourceManager.Network.Models.OwaspCrsExclusionEntryMatchVariable matchVariable, Azure.ResourceManager.Network.Models.OwaspCrsExclusionEntrySelectorMatchOperator selectorMatchOperator, string selector) { }
        public Azure.ResourceManager.Network.Models.OwaspCrsExclusionEntryMatchVariable MatchVariable { get { throw null; } set { } }
        public string Selector { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.OwaspCrsExclusionEntrySelectorMatchOperator SelectorMatchOperator { get { throw null; } set { } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct OwaspCrsExclusionEntryMatchVariable : System.IEquatable<Azure.ResourceManager.Network.Models.OwaspCrsExclusionEntryMatchVariable>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public OwaspCrsExclusionEntryMatchVariable(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.OwaspCrsExclusionEntryMatchVariable RequestArgNames { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.OwaspCrsExclusionEntryMatchVariable RequestCookieNames { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.OwaspCrsExclusionEntryMatchVariable RequestHeaderNames { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.OwaspCrsExclusionEntryMatchVariable other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.OwaspCrsExclusionEntryMatchVariable left, Azure.ResourceManager.Network.Models.OwaspCrsExclusionEntryMatchVariable right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.OwaspCrsExclusionEntryMatchVariable (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.OwaspCrsExclusionEntryMatchVariable left, Azure.ResourceManager.Network.Models.OwaspCrsExclusionEntryMatchVariable right) { throw null; }
        public override string ToString() { throw null; }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct OwaspCrsExclusionEntrySelectorMatchOperator : System.IEquatable<Azure.ResourceManager.Network.Models.OwaspCrsExclusionEntrySelectorMatchOperator>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public OwaspCrsExclusionEntrySelectorMatchOperator(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.OwaspCrsExclusionEntrySelectorMatchOperator Contains { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.OwaspCrsExclusionEntrySelectorMatchOperator EndsWith { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.OwaspCrsExclusionEntrySelectorMatchOperator EqualsAny { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.OwaspCrsExclusionEntrySelectorMatchOperator EqualsValue { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.OwaspCrsExclusionEntrySelectorMatchOperator StartsWith { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.OwaspCrsExclusionEntrySelectorMatchOperator other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.OwaspCrsExclusionEntrySelectorMatchOperator left, Azure.ResourceManager.Network.Models.OwaspCrsExclusionEntrySelectorMatchOperator right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.OwaspCrsExclusionEntrySelectorMatchOperator (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.OwaspCrsExclusionEntrySelectorMatchOperator left, Azure.ResourceManager.Network.Models.OwaspCrsExclusionEntrySelectorMatchOperator right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class P2SConnectionConfiguration : Azure.ResourceManager.Network.Models.SubResource
    {
        public P2SConnectionConfiguration() { }
        public string Etag { get { throw null; } }
        public string Name { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public Azure.ResourceManager.Network.Models.RoutingConfiguration RoutingConfiguration { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.AddressSpace VpnClientAddressPool { get { throw null; } set { } }
    }
    public partial class P2SVpnConnectionHealth
    {
        internal P2SVpnConnectionHealth() { }
        public string SasUrl { get { throw null; } }
    }
    public partial class P2SVpnConnectionHealthRequest
    {
        public P2SVpnConnectionHealthRequest() { }
        public string OutputBlobSasUrl { get { throw null; } set { } }
        public System.Collections.Generic.IList<string> VpnUserNamesFilter { get { throw null; } }
    }
    public partial class P2SVpnConnectionRequest
    {
        public P2SVpnConnectionRequest() { }
        public System.Collections.Generic.IList<string> VpnConnectionIds { get { throw null; } }
    }
    public partial class P2SVpnGateway : Azure.ResourceManager.Network.Models.Resource
    {
        public P2SVpnGateway() { }
        public string Etag { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.P2SConnectionConfiguration> P2SConnectionConfigurations { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public Azure.ResourceManager.Network.Models.SubResource VirtualHub { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.VpnClientConnectionHealth VpnClientConnectionHealth { get { throw null; } }
        public int? VpnGatewayScaleUnit { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.SubResource VpnServerConfiguration { get { throw null; } set { } }
    }
    public partial class P2SVpnProfileParameters
    {
        public P2SVpnProfileParameters() { }
        public Azure.ResourceManager.Network.Models.AuthenticationMethod? AuthenticationMethod { get { throw null; } set { } }
    }
    public partial class PacketCapture
    {
        public PacketCapture(string target, Azure.ResourceManager.Network.Models.PacketCaptureStorageLocation storageLocation) { }
        public int? BytesToCapturePerPacket { get { throw null; } set { } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.PacketCaptureFilter> Filters { get { throw null; } }
        public Azure.ResourceManager.Network.Models.PacketCaptureStorageLocation StorageLocation { get { throw null; } }
        public string Target { get { throw null; } }
        public int? TimeLimitInSeconds { get { throw null; } set { } }
        public int? TotalBytesPerSession { get { throw null; } set { } }
    }
    public partial class PacketCaptureFilter
    {
        public PacketCaptureFilter() { }
        public string LocalIPAddress { get { throw null; } set { } }
        public string LocalPort { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.PcProtocol? Protocol { get { throw null; } set { } }
        public string RemoteIPAddress { get { throw null; } set { } }
        public string RemotePort { get { throw null; } set { } }
    }
    public partial class PacketCaptureQueryStatusResult
    {
        internal PacketCaptureQueryStatusResult() { }
        public System.DateTimeOffset? CaptureStartTime { get { throw null; } }
        public string Id { get { throw null; } }
        public string Name { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.PcError> PacketCaptureError { get { throw null; } }
        public Azure.ResourceManager.Network.Models.PcStatus? PacketCaptureStatus { get { throw null; } }
        public string StopReason { get { throw null; } }
    }
    public partial class PacketCaptureResult
    {
        internal PacketCaptureResult() { }
        public int? BytesToCapturePerPacket { get { throw null; } }
        public string Etag { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.PacketCaptureFilter> Filters { get { throw null; } }
        public string Id { get { throw null; } }
        public string Name { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public Azure.ResourceManager.Network.Models.PacketCaptureStorageLocation StorageLocation { get { throw null; } }
        public string Target { get { throw null; } }
        public int? TimeLimitInSeconds { get { throw null; } }
        public int? TotalBytesPerSession { get { throw null; } }
    }
    public partial class PacketCaptureStorageLocation
    {
        public PacketCaptureStorageLocation() { }
        public string FilePath { get { throw null; } set { } }
        public string StorageId { get { throw null; } set { } }
        public string StoragePath { get { throw null; } set { } }
    }
    public partial class PatchRouteFilter : Azure.ResourceManager.Network.Models.SubResource
    {
        public PatchRouteFilter() { }
        public string Etag { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.ExpressRouteCircuitPeering> Ipv6Peerings { get { throw null; } }
        public string Name { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.ExpressRouteCircuitPeering> Peerings { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.RouteFilterRule> Rules { get { throw null; } }
        public System.Collections.Generic.IDictionary<string, string> Tags { get { throw null; } }
        public string Type { get { throw null; } }
    }
    public partial class PatchRouteFilterRule : Azure.ResourceManager.Network.Models.SubResource
    {
        public PatchRouteFilterRule() { }
        public Azure.ResourceManager.Network.Models.Access? Access { get { throw null; } set { } }
        public System.Collections.Generic.IList<string> Communities { get { throw null; } }
        public string Etag { get { throw null; } }
        public string Name { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public Azure.ResourceManager.Network.Models.RouteFilterRuleType? RouteFilterRuleType { get { throw null; } set { } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct PcError : System.IEquatable<Azure.ResourceManager.Network.Models.PcError>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public PcError(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.PcError AgentStopped { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.PcError CaptureFailed { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.PcError InternalError { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.PcError LocalFileFailed { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.PcError StorageFailed { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.PcError other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.PcError left, Azure.ResourceManager.Network.Models.PcError right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.PcError (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.PcError left, Azure.ResourceManager.Network.Models.PcError right) { throw null; }
        public override string ToString() { throw null; }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct PcProtocol : System.IEquatable<Azure.ResourceManager.Network.Models.PcProtocol>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public PcProtocol(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.PcProtocol Any { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.PcProtocol TCP { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.PcProtocol UDP { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.PcProtocol other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.PcProtocol left, Azure.ResourceManager.Network.Models.PcProtocol right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.PcProtocol (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.PcProtocol left, Azure.ResourceManager.Network.Models.PcProtocol right) { throw null; }
        public override string ToString() { throw null; }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct PcStatus : System.IEquatable<Azure.ResourceManager.Network.Models.PcStatus>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public PcStatus(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.PcStatus Error { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.PcStatus NotStarted { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.PcStatus Running { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.PcStatus Stopped { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.PcStatus Unknown { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.PcStatus other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.PcStatus left, Azure.ResourceManager.Network.Models.PcStatus right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.PcStatus (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.PcStatus left, Azure.ResourceManager.Network.Models.PcStatus right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class PeerExpressRouteCircuitConnection : Azure.ResourceManager.Network.Models.SubResource
    {
        public PeerExpressRouteCircuitConnection() { }
        public string AddressPrefix { get { throw null; } set { } }
        public string AuthResourceGuid { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.CircuitConnectionStatus? CircuitConnectionStatus { get { throw null; } }
        public string ConnectionName { get { throw null; } set { } }
        public string Etag { get { throw null; } }
        public Azure.ResourceManager.Network.Models.SubResource ExpressRouteCircuitPeering { get { throw null; } set { } }
        public string Name { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.SubResource PeerExpressRouteCircuitPeering { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public string Type { get { throw null; } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct PfsGroup : System.IEquatable<Azure.ResourceManager.Network.Models.PfsGroup>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public PfsGroup(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.PfsGroup ECP256 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.PfsGroup ECP384 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.PfsGroup None { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.PfsGroup PFS1 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.PfsGroup PFS14 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.PfsGroup PFS2 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.PfsGroup PFS2048 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.PfsGroup PFS24 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.PfsGroup Pfsmm { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.PfsGroup other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.PfsGroup left, Azure.ResourceManager.Network.Models.PfsGroup right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.PfsGroup (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.PfsGroup left, Azure.ResourceManager.Network.Models.PfsGroup right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class PolicySettings
    {
        public PolicySettings() { }
        public int? FileUploadLimitInMb { get { throw null; } set { } }
        public int? MaxRequestBodySizeInKb { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.WebApplicationFirewallMode? Mode { get { throw null; } set { } }
        public bool? RequestBodyCheck { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.WebApplicationFirewallEnabledState? State { get { throw null; } set { } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct PreferredIPVersion : System.IEquatable<Azure.ResourceManager.Network.Models.PreferredIPVersion>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public PreferredIPVersion(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.PreferredIPVersion IPv4 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.PreferredIPVersion IPv6 { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.PreferredIPVersion other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.PreferredIPVersion left, Azure.ResourceManager.Network.Models.PreferredIPVersion right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.PreferredIPVersion (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.PreferredIPVersion left, Azure.ResourceManager.Network.Models.PreferredIPVersion right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class PrepareNetworkPoliciesRequest
    {
        public PrepareNetworkPoliciesRequest() { }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.NetworkIntentPolicyConfiguration> NetworkIntentPolicyConfigurations { get { throw null; } }
        public string ServiceName { get { throw null; } set { } }
    }
    public partial class PrivateDnsZoneConfig
    {
        public PrivateDnsZoneConfig() { }
        public string Name { get { throw null; } set { } }
        public string PrivateDnsZoneId { get { throw null; } set { } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.RecordSet> RecordSets { get { throw null; } }
    }
    public partial class PrivateDnsZoneGroup : Azure.ResourceManager.Network.Models.SubResource
    {
        public PrivateDnsZoneGroup() { }
        public string Etag { get { throw null; } }
        public string Name { get { throw null; } set { } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.PrivateDnsZoneConfig> PrivateDnsZoneConfigs { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
    }
    public partial class PrivateEndpoint : Azure.ResourceManager.Network.Models.Resource
    {
        public PrivateEndpoint() { }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.CustomDnsConfigPropertiesFormat> CustomDnsConfigs { get { throw null; } }
        public string Etag { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.PrivateLinkServiceConnection> ManualPrivateLinkServiceConnections { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.NetworkInterface> NetworkInterfaces { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.PrivateLinkServiceConnection> PrivateLinkServiceConnections { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public Azure.ResourceManager.Network.Models.Subnet Subnet { get { throw null; } set { } }
    }
    public partial class PrivateEndpointConnection : Azure.ResourceManager.Network.Models.SubResource
    {
        public PrivateEndpointConnection() { }
        public string Etag { get { throw null; } }
        public string LinkIdentifier { get { throw null; } }
        public string Name { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.PrivateEndpoint PrivateEndpoint { get { throw null; } }
        public Azure.ResourceManager.Network.Models.PrivateLinkServiceConnectionState PrivateLinkServiceConnectionState { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public string Type { get { throw null; } }
    }
    public partial class PrivateLinkService : Azure.ResourceManager.Network.Models.Resource
    {
        public PrivateLinkService() { }
        public string Alias { get { throw null; } }
        public Azure.ResourceManager.Network.Models.PrivateLinkServicePropertiesAutoApproval AutoApproval { get { throw null; } set { } }
        public bool? EnableProxyProtocol { get { throw null; } set { } }
        public string Etag { get { throw null; } }
        public System.Collections.Generic.IList<string> Fqdns { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.PrivateLinkServiceIpConfiguration> IpConfigurations { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.FrontendIPConfiguration> LoadBalancerFrontendIpConfigurations { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.NetworkInterface> NetworkInterfaces { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.PrivateEndpointConnection> PrivateEndpointConnections { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public Azure.ResourceManager.Network.Models.PrivateLinkServicePropertiesVisibility Visibility { get { throw null; } set { } }
    }
    public partial class PrivateLinkServiceConnection : Azure.ResourceManager.Network.Models.SubResource
    {
        public PrivateLinkServiceConnection() { }
        public string Etag { get { throw null; } }
        public System.Collections.Generic.IList<string> GroupIds { get { throw null; } }
        public string Name { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.PrivateLinkServiceConnectionState PrivateLinkServiceConnectionState { get { throw null; } set { } }
        public string PrivateLinkServiceId { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public string RequestMessage { get { throw null; } set { } }
        public string Type { get { throw null; } }
    }
    public partial class PrivateLinkServiceConnectionState
    {
        public PrivateLinkServiceConnectionState() { }
        public string ActionsRequired { get { throw null; } set { } }
        public string Description { get { throw null; } set { } }
        public string Status { get { throw null; } set { } }
    }
    public partial class PrivateLinkServiceIpConfiguration : Azure.ResourceManager.Network.Models.SubResource
    {
        public PrivateLinkServiceIpConfiguration() { }
        public string Etag { get { throw null; } }
        public string Name { get { throw null; } set { } }
        public bool? Primary { get { throw null; } set { } }
        public string PrivateIPAddress { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.IPVersion? PrivateIPAddressVersion { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.IPAllocationMethod? PrivateIPAllocationMethod { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public Azure.ResourceManager.Network.Models.Subnet Subnet { get { throw null; } set { } }
        public string Type { get { throw null; } }
    }
    public partial class PrivateLinkServicePropertiesAutoApproval : Azure.ResourceManager.Network.Models.ResourceSet
    {
        public PrivateLinkServicePropertiesAutoApproval() { }
    }
    public partial class PrivateLinkServicePropertiesVisibility : Azure.ResourceManager.Network.Models.ResourceSet
    {
        public PrivateLinkServicePropertiesVisibility() { }
    }
    public partial class PrivateLinkServiceVisibility
    {
        internal PrivateLinkServiceVisibility() { }
        public bool? Visible { get { throw null; } }
    }
    public partial class Probe : Azure.ResourceManager.Network.Models.SubResource
    {
        public Probe() { }
        public string Etag { get { throw null; } }
        public int? IntervalInSeconds { get { throw null; } set { } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.SubResource> LoadBalancingRules { get { throw null; } }
        public string Name { get { throw null; } set { } }
        public int? NumberOfProbes { get { throw null; } set { } }
        public int? Port { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ProbeProtocol? Protocol { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public string RequestPath { get { throw null; } set { } }
        public string Type { get { throw null; } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct ProbeProtocol : System.IEquatable<Azure.ResourceManager.Network.Models.ProbeProtocol>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public ProbeProtocol(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.ProbeProtocol Http { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ProbeProtocol Https { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ProbeProtocol Tcp { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.ProbeProtocol other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.ProbeProtocol left, Azure.ResourceManager.Network.Models.ProbeProtocol right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.ProbeProtocol (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.ProbeProtocol left, Azure.ResourceManager.Network.Models.ProbeProtocol right) { throw null; }
        public override string ToString() { throw null; }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct ProcessorArchitecture : System.IEquatable<Azure.ResourceManager.Network.Models.ProcessorArchitecture>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public ProcessorArchitecture(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.ProcessorArchitecture Amd64 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ProcessorArchitecture X86 { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.ProcessorArchitecture other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.ProcessorArchitecture left, Azure.ResourceManager.Network.Models.ProcessorArchitecture right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.ProcessorArchitecture (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.ProcessorArchitecture left, Azure.ResourceManager.Network.Models.ProcessorArchitecture right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class PropagatedRouteTable
    {
        public PropagatedRouteTable() { }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.SubResource> Ids { get { throw null; } }
        public System.Collections.Generic.IList<string> Labels { get { throw null; } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct Protocol : System.IEquatable<Azure.ResourceManager.Network.Models.Protocol>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public Protocol(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.Protocol Http { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.Protocol Https { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.Protocol Icmp { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.Protocol Tcp { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.Protocol other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.Protocol left, Azure.ResourceManager.Network.Models.Protocol right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.Protocol (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.Protocol left, Azure.ResourceManager.Network.Models.Protocol right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class ProtocolConfiguration
    {
        public ProtocolConfiguration() { }
        public Azure.ResourceManager.Network.Models.HttpConfiguration HttpConfiguration { get { throw null; } set { } }
    }
    public partial class ProtocolCustomSettingsFormat
    {
        public ProtocolCustomSettingsFormat() { }
        public Azure.ResourceManager.Network.Models.DdosCustomPolicyProtocol? Protocol { get { throw null; } set { } }
        public string SourceRateOverride { get { throw null; } set { } }
        public string TriggerRateOverride { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.DdosCustomPolicyTriggerSensitivityOverride? TriggerSensitivityOverride { get { throw null; } set { } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct ProvisioningState : System.IEquatable<Azure.ResourceManager.Network.Models.ProvisioningState>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public ProvisioningState(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.ProvisioningState Deleting { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ProvisioningState Failed { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ProvisioningState Succeeded { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ProvisioningState Updating { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.ProvisioningState other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.ProvisioningState left, Azure.ResourceManager.Network.Models.ProvisioningState right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.ProvisioningState (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.ProvisioningState left, Azure.ResourceManager.Network.Models.ProvisioningState right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class PublicIPAddress : Azure.ResourceManager.Network.Models.Resource
    {
        public PublicIPAddress() { }
        public Azure.ResourceManager.Network.Models.DdosSettings DdosSettings { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.PublicIPAddressDnsSettings DnsSettings { get { throw null; } set { } }
        public string Etag { get { throw null; } }
        public int? IdleTimeoutInMinutes { get { throw null; } set { } }
        public string IpAddress { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.IPConfiguration IpConfiguration { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.IpTag> IpTags { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public Azure.ResourceManager.Network.Models.IPVersion? PublicIPAddressVersion { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.IPAllocationMethod? PublicIPAllocationMethod { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.SubResource PublicIPPrefix { get { throw null; } set { } }
        public string ResourceGuid { get { throw null; } }
        public Azure.ResourceManager.Network.Models.PublicIPAddressSku Sku { get { throw null; } set { } }
        public System.Collections.Generic.IList<string> Zones { get { throw null; } }
    }
    public partial class PublicIPAddressDnsSettings
    {
        public PublicIPAddressDnsSettings() { }
        public string DomainNameLabel { get { throw null; } set { } }
        public string Fqdn { get { throw null; } set { } }
        public string ReverseFqdn { get { throw null; } set { } }
    }
    public partial class PublicIPAddressSku
    {
        public PublicIPAddressSku() { }
        public Azure.ResourceManager.Network.Models.PublicIPAddressSkuName? Name { get { throw null; } set { } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct PublicIPAddressSkuName : System.IEquatable<Azure.ResourceManager.Network.Models.PublicIPAddressSkuName>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public PublicIPAddressSkuName(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.PublicIPAddressSkuName Basic { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.PublicIPAddressSkuName Standard { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.PublicIPAddressSkuName other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.PublicIPAddressSkuName left, Azure.ResourceManager.Network.Models.PublicIPAddressSkuName right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.PublicIPAddressSkuName (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.PublicIPAddressSkuName left, Azure.ResourceManager.Network.Models.PublicIPAddressSkuName right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class PublicIPPrefix : Azure.ResourceManager.Network.Models.Resource
    {
        public PublicIPPrefix() { }
        public string Etag { get { throw null; } }
        public string IpPrefix { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.IpTag> IpTags { get { throw null; } }
        public Azure.ResourceManager.Network.Models.SubResource LoadBalancerFrontendIpConfiguration { get { throw null; } }
        public int? PrefixLength { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.ReferencedPublicIpAddress> PublicIPAddresses { get { throw null; } }
        public Azure.ResourceManager.Network.Models.IPVersion? PublicIPAddressVersion { get { throw null; } set { } }
        public string ResourceGuid { get { throw null; } }
        public Azure.ResourceManager.Network.Models.PublicIPPrefixSku Sku { get { throw null; } set { } }
        public System.Collections.Generic.IList<string> Zones { get { throw null; } }
    }
    public partial class PublicIPPrefixSku
    {
        public PublicIPPrefixSku() { }
        public Azure.ResourceManager.Network.Models.PublicIPPrefixSkuName? Name { get { throw null; } set { } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct PublicIPPrefixSkuName : System.IEquatable<Azure.ResourceManager.Network.Models.PublicIPPrefixSkuName>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public PublicIPPrefixSkuName(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.PublicIPPrefixSkuName Standard { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.PublicIPPrefixSkuName other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.PublicIPPrefixSkuName left, Azure.ResourceManager.Network.Models.PublicIPPrefixSkuName right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.PublicIPPrefixSkuName (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.PublicIPPrefixSkuName left, Azure.ResourceManager.Network.Models.PublicIPPrefixSkuName right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class QueryTroubleshootingParameters
    {
        public QueryTroubleshootingParameters(string targetResourceId) { }
        public string TargetResourceId { get { throw null; } }
    }
    public partial class RadiusServer
    {
        public RadiusServer(string radiusServerAddress) { }
        public string RadiusServerAddress { get { throw null; } set { } }
        public long? RadiusServerScore { get { throw null; } set { } }
        public string RadiusServerSecret { get { throw null; } set { } }
    }
    public partial class RecordSet
    {
        internal RecordSet() { }
        public string Fqdn { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<string> IpAddresses { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public string RecordSetName { get { throw null; } }
        public string RecordType { get { throw null; } }
        public int? Ttl { get { throw null; } }
    }
    public partial class ReferencedPublicIpAddress
    {
        internal ReferencedPublicIpAddress() { }
        public string Id { get { throw null; } }
    }
    public partial class Resource
    {
        public Resource() { }
        public string Id { get { throw null; } set { } }
        public string Location { get { throw null; } set { } }
        public string Name { get { throw null; } }
        public System.Collections.Generic.IDictionary<string, string> Tags { get { throw null; } }
        public string Type { get { throw null; } }
    }
    public enum ResourceIdentityType
    {
        SystemAssigned = 0,
        UserAssigned = 1,
        SystemAssignedUserAssigned = 2,
        None = 3,
    }
    public partial class ResourceNavigationLink : Azure.ResourceManager.Network.Models.SubResource
    {
        public ResourceNavigationLink() { }
        public string Etag { get { throw null; } }
        public string Link { get { throw null; } set { } }
        public string LinkedResourceType { get { throw null; } set { } }
        public string Name { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public string Type { get { throw null; } }
    }
    public partial class ResourceNavigationLinksListResult
    {
        internal ResourceNavigationLinksListResult() { }
        public string NextLink { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.ResourceNavigationLink> Value { get { throw null; } }
    }
    public partial class ResourceSet
    {
        public ResourceSet() { }
        public System.Collections.Generic.IList<string> Subscriptions { get { throw null; } }
    }
    public partial class RetentionPolicyParameters
    {
        public RetentionPolicyParameters() { }
        public int? Days { get { throw null; } set { } }
        public bool? Enabled { get { throw null; } set { } }
    }
    public partial class Route : Azure.ResourceManager.Network.Models.SubResource
    {
        public Route() { }
        public string AddressPrefix { get { throw null; } set { } }
        public string Etag { get { throw null; } }
        public string Name { get { throw null; } set { } }
        public string NextHopIpAddress { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.RouteNextHopType? NextHopType { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
    }
    public partial class RouteFilter : Azure.ResourceManager.Network.Models.Resource
    {
        public RouteFilter() { }
        public string Etag { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.ExpressRouteCircuitPeering> Ipv6Peerings { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.ExpressRouteCircuitPeering> Peerings { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.RouteFilterRule> Rules { get { throw null; } }
    }
    public partial class RouteFilterRule : Azure.ResourceManager.Network.Models.SubResource
    {
        public RouteFilterRule() { }
        public Azure.ResourceManager.Network.Models.Access? Access { get { throw null; } set { } }
        public System.Collections.Generic.IList<string> Communities { get { throw null; } }
        public string Etag { get { throw null; } }
        public string Location { get { throw null; } set { } }
        public string Name { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public Azure.ResourceManager.Network.Models.RouteFilterRuleType? RouteFilterRuleType { get { throw null; } set { } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct RouteFilterRuleType : System.IEquatable<Azure.ResourceManager.Network.Models.RouteFilterRuleType>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public RouteFilterRuleType(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.RouteFilterRuleType Community { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.RouteFilterRuleType other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.RouteFilterRuleType left, Azure.ResourceManager.Network.Models.RouteFilterRuleType right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.RouteFilterRuleType (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.RouteFilterRuleType left, Azure.ResourceManager.Network.Models.RouteFilterRuleType right) { throw null; }
        public override string ToString() { throw null; }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct RouteNextHopType : System.IEquatable<Azure.ResourceManager.Network.Models.RouteNextHopType>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public RouteNextHopType(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.RouteNextHopType Internet { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.RouteNextHopType None { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.RouteNextHopType VirtualAppliance { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.RouteNextHopType VirtualNetworkGateway { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.RouteNextHopType VnetLocal { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.RouteNextHopType other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.RouteNextHopType left, Azure.ResourceManager.Network.Models.RouteNextHopType right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.RouteNextHopType (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.RouteNextHopType left, Azure.ResourceManager.Network.Models.RouteNextHopType right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class RouteTable : Azure.ResourceManager.Network.Models.Resource
    {
        public RouteTable() { }
        public bool? DisableBgpRoutePropagation { get { throw null; } set { } }
        public string Etag { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.Route> Routes { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.Subnet> Subnets { get { throw null; } }
    }
    public partial class RoutingConfiguration
    {
        public RoutingConfiguration() { }
        public Azure.ResourceManager.Network.Models.SubResource AssociatedRouteTable { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.PropagatedRouteTable PropagatedRouteTables { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.VnetRoute VnetRoutes { get { throw null; } set { } }
    }
    public partial class SecurityGroupNetworkInterface
    {
        internal SecurityGroupNetworkInterface() { }
        public string Id { get { throw null; } }
        public Azure.ResourceManager.Network.Models.SecurityRuleAssociations SecurityRuleAssociations { get { throw null; } }
    }
    public partial class SecurityGroupViewParameters
    {
        public SecurityGroupViewParameters(string targetResourceId) { }
        public string TargetResourceId { get { throw null; } }
    }
    public partial class SecurityGroupViewResult
    {
        internal SecurityGroupViewResult() { }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.SecurityGroupNetworkInterface> NetworkInterfaces { get { throw null; } }
    }
    public partial class SecurityPartnerProvider : Azure.ResourceManager.Network.Models.Resource
    {
        public SecurityPartnerProvider() { }
        public Azure.ResourceManager.Network.Models.SecurityPartnerProviderConnectionStatus? ConnectionStatus { get { throw null; } }
        public string Etag { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public Azure.ResourceManager.Network.Models.SecurityProviderName? SecurityProviderName { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.SubResource VirtualHub { get { throw null; } set { } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct SecurityPartnerProviderConnectionStatus : System.IEquatable<Azure.ResourceManager.Network.Models.SecurityPartnerProviderConnectionStatus>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public SecurityPartnerProviderConnectionStatus(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.SecurityPartnerProviderConnectionStatus Connected { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.SecurityPartnerProviderConnectionStatus NotConnected { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.SecurityPartnerProviderConnectionStatus PartiallyConnected { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.SecurityPartnerProviderConnectionStatus Unknown { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.SecurityPartnerProviderConnectionStatus other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.SecurityPartnerProviderConnectionStatus left, Azure.ResourceManager.Network.Models.SecurityPartnerProviderConnectionStatus right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.SecurityPartnerProviderConnectionStatus (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.SecurityPartnerProviderConnectionStatus left, Azure.ResourceManager.Network.Models.SecurityPartnerProviderConnectionStatus right) { throw null; }
        public override string ToString() { throw null; }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct SecurityProviderName : System.IEquatable<Azure.ResourceManager.Network.Models.SecurityProviderName>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public SecurityProviderName(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.SecurityProviderName Checkpoint { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.SecurityProviderName IBoss { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.SecurityProviderName ZScaler { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.SecurityProviderName other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.SecurityProviderName left, Azure.ResourceManager.Network.Models.SecurityProviderName right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.SecurityProviderName (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.SecurityProviderName left, Azure.ResourceManager.Network.Models.SecurityProviderName right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class SecurityRule : Azure.ResourceManager.Network.Models.SubResource
    {
        public SecurityRule() { }
        public Azure.ResourceManager.Network.Models.SecurityRuleAccess? Access { get { throw null; } set { } }
        public string Description { get { throw null; } set { } }
        public string DestinationAddressPrefix { get { throw null; } set { } }
        public System.Collections.Generic.IList<string> DestinationAddressPrefixes { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.ApplicationSecurityGroup> DestinationApplicationSecurityGroups { get { throw null; } }
        public string DestinationPortRange { get { throw null; } set { } }
        public System.Collections.Generic.IList<string> DestinationPortRanges { get { throw null; } }
        public Azure.ResourceManager.Network.Models.SecurityRuleDirection? Direction { get { throw null; } set { } }
        public string Etag { get { throw null; } }
        public string Name { get { throw null; } set { } }
        public int? Priority { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.SecurityRuleProtocol? Protocol { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public string SourceAddressPrefix { get { throw null; } set { } }
        public System.Collections.Generic.IList<string> SourceAddressPrefixes { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.ApplicationSecurityGroup> SourceApplicationSecurityGroups { get { throw null; } }
        public string SourcePortRange { get { throw null; } set { } }
        public System.Collections.Generic.IList<string> SourcePortRanges { get { throw null; } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct SecurityRuleAccess : System.IEquatable<Azure.ResourceManager.Network.Models.SecurityRuleAccess>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public SecurityRuleAccess(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.SecurityRuleAccess Allow { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.SecurityRuleAccess Deny { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.SecurityRuleAccess other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.SecurityRuleAccess left, Azure.ResourceManager.Network.Models.SecurityRuleAccess right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.SecurityRuleAccess (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.SecurityRuleAccess left, Azure.ResourceManager.Network.Models.SecurityRuleAccess right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class SecurityRuleAssociations
    {
        internal SecurityRuleAssociations() { }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.SecurityRule> DefaultSecurityRules { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.EffectiveNetworkSecurityRule> EffectiveSecurityRules { get { throw null; } }
        public Azure.ResourceManager.Network.Models.NetworkInterfaceAssociation NetworkInterfaceAssociation { get { throw null; } }
        public Azure.ResourceManager.Network.Models.SubnetAssociation SubnetAssociation { get { throw null; } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct SecurityRuleDirection : System.IEquatable<Azure.ResourceManager.Network.Models.SecurityRuleDirection>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public SecurityRuleDirection(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.SecurityRuleDirection Inbound { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.SecurityRuleDirection Outbound { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.SecurityRuleDirection other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.SecurityRuleDirection left, Azure.ResourceManager.Network.Models.SecurityRuleDirection right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.SecurityRuleDirection (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.SecurityRuleDirection left, Azure.ResourceManager.Network.Models.SecurityRuleDirection right) { throw null; }
        public override string ToString() { throw null; }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct SecurityRuleProtocol : System.IEquatable<Azure.ResourceManager.Network.Models.SecurityRuleProtocol>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public SecurityRuleProtocol(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.SecurityRuleProtocol Ah { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.SecurityRuleProtocol Asterisk { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.SecurityRuleProtocol Esp { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.SecurityRuleProtocol Icmp { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.SecurityRuleProtocol Tcp { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.SecurityRuleProtocol Udp { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.SecurityRuleProtocol other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.SecurityRuleProtocol left, Azure.ResourceManager.Network.Models.SecurityRuleProtocol right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.SecurityRuleProtocol (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.SecurityRuleProtocol left, Azure.ResourceManager.Network.Models.SecurityRuleProtocol right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class ServiceAssociationLink : Azure.ResourceManager.Network.Models.SubResource
    {
        public ServiceAssociationLink() { }
        public bool? AllowDelete { get { throw null; } set { } }
        public string Etag { get { throw null; } }
        public string Link { get { throw null; } set { } }
        public string LinkedResourceType { get { throw null; } set { } }
        public System.Collections.Generic.IList<string> Locations { get { throw null; } }
        public string Name { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public string Type { get { throw null; } }
    }
    public partial class ServiceAssociationLinksListResult
    {
        internal ServiceAssociationLinksListResult() { }
        public string NextLink { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.ServiceAssociationLink> Value { get { throw null; } }
    }
    public partial class ServiceEndpointPolicy : Azure.ResourceManager.Network.Models.Resource
    {
        public ServiceEndpointPolicy() { }
        public string Etag { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public string ResourceGuid { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.ServiceEndpointPolicyDefinition> ServiceEndpointPolicyDefinitions { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.Subnet> Subnets { get { throw null; } }
    }
    public partial class ServiceEndpointPolicyDefinition : Azure.ResourceManager.Network.Models.SubResource
    {
        public ServiceEndpointPolicyDefinition() { }
        public string Description { get { throw null; } set { } }
        public string Etag { get { throw null; } }
        public string Name { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public string Service { get { throw null; } set { } }
        public System.Collections.Generic.IList<string> ServiceResources { get { throw null; } }
    }
    public partial class ServiceEndpointPropertiesFormat
    {
        public ServiceEndpointPropertiesFormat() { }
        public System.Collections.Generic.IList<string> Locations { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public string Service { get { throw null; } set { } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct ServiceProviderProvisioningState : System.IEquatable<Azure.ResourceManager.Network.Models.ServiceProviderProvisioningState>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public ServiceProviderProvisioningState(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.ServiceProviderProvisioningState Deprovisioning { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ServiceProviderProvisioningState NotProvisioned { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ServiceProviderProvisioningState Provisioned { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.ServiceProviderProvisioningState Provisioning { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.ServiceProviderProvisioningState other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.ServiceProviderProvisioningState left, Azure.ResourceManager.Network.Models.ServiceProviderProvisioningState right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.ServiceProviderProvisioningState (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.ServiceProviderProvisioningState left, Azure.ResourceManager.Network.Models.ServiceProviderProvisioningState right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class ServiceTagInformation
    {
        internal ServiceTagInformation() { }
        public string Id { get { throw null; } }
        public string Name { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ServiceTagInformationPropertiesFormat Properties { get { throw null; } }
    }
    public partial class ServiceTagInformationPropertiesFormat
    {
        internal ServiceTagInformationPropertiesFormat() { }
        public System.Collections.Generic.IReadOnlyList<string> AddressPrefixes { get { throw null; } }
        public string ChangeNumber { get { throw null; } }
        public string Region { get { throw null; } }
        public string SystemService { get { throw null; } }
    }
    public partial class ServiceTagsListResult
    {
        internal ServiceTagsListResult() { }
        public string ChangeNumber { get { throw null; } }
        public string Cloud { get { throw null; } }
        public string Id { get { throw null; } }
        public string Name { get { throw null; } }
        public string Type { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.ServiceTagInformation> Values { get { throw null; } }
    }
    public partial class SessionIds
    {
        public SessionIds() { }
        public System.Collections.Generic.IList<string> SessionIdsValue { get { throw null; } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct Severity : System.IEquatable<Azure.ResourceManager.Network.Models.Severity>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public Severity(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.Severity Error { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.Severity Warning { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.Severity other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.Severity left, Azure.ResourceManager.Network.Models.Severity right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.Severity (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.Severity left, Azure.ResourceManager.Network.Models.Severity right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class StaticRoute
    {
        public StaticRoute() { }
        public System.Collections.Generic.IList<string> AddressPrefixes { get { throw null; } }
        public string Name { get { throw null; } set { } }
        public string NextHopIpAddress { get { throw null; } set { } }
    }
    public partial class Subnet : Azure.ResourceManager.Network.Models.SubResource
    {
        public Subnet() { }
        public string AddressPrefix { get { throw null; } set { } }
        public System.Collections.Generic.IList<string> AddressPrefixes { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.Delegation> Delegations { get { throw null; } }
        public string Etag { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.SubResource> IpAllocations { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.IPConfigurationProfile> IpConfigurationProfiles { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.IPConfiguration> IpConfigurations { get { throw null; } }
        public string Name { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.SubResource NatGateway { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.NetworkSecurityGroup NetworkSecurityGroup { get { throw null; } set { } }
        public string PrivateEndpointNetworkPolicies { get { throw null; } set { } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.PrivateEndpoint> PrivateEndpoints { get { throw null; } }
        public string PrivateLinkServiceNetworkPolicies { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public string Purpose { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.ResourceNavigationLink> ResourceNavigationLinks { get { throw null; } }
        public Azure.ResourceManager.Network.Models.RouteTable RouteTable { get { throw null; } set { } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.ServiceAssociationLink> ServiceAssociationLinks { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.ServiceEndpointPolicy> ServiceEndpointPolicies { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.ServiceEndpointPropertiesFormat> ServiceEndpoints { get { throw null; } }
    }
    public partial class SubnetAssociation
    {
        internal SubnetAssociation() { }
        public string Id { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.SecurityRule> SecurityRules { get { throw null; } }
    }
    public partial class SubResource
    {
        public SubResource() { }
        public string Id { get { throw null; } set { } }
    }
    public partial class TagsObject
    {
        public TagsObject() { }
        public System.Collections.Generic.IDictionary<string, string> Tags { get { throw null; } }
    }
    public partial class Topology
    {
        internal Topology() { }
        public System.DateTimeOffset? CreatedDateTime { get { throw null; } }
        public string Id { get { throw null; } }
        public System.DateTimeOffset? LastModified { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.TopologyResource> Resources { get { throw null; } }
    }
    public partial class TopologyAssociation
    {
        internal TopologyAssociation() { }
        public Azure.ResourceManager.Network.Models.AssociationType? AssociationType { get { throw null; } }
        public string Name { get { throw null; } }
        public string ResourceId { get { throw null; } }
    }
    public partial class TopologyParameters
    {
        public TopologyParameters() { }
        public string TargetResourceGroupName { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.SubResource TargetSubnet { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.SubResource TargetVirtualNetwork { get { throw null; } set { } }
    }
    public partial class TopologyResource
    {
        internal TopologyResource() { }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.TopologyAssociation> Associations { get { throw null; } }
        public string Id { get { throw null; } }
        public string Location { get { throw null; } }
        public string Name { get { throw null; } }
    }
    public partial class TrafficAnalyticsConfigurationProperties
    {
        public TrafficAnalyticsConfigurationProperties() { }
        public bool? Enabled { get { throw null; } set { } }
        public int? TrafficAnalyticsInterval { get { throw null; } set { } }
        public string WorkspaceId { get { throw null; } set { } }
        public string WorkspaceRegion { get { throw null; } set { } }
        public string WorkspaceResourceId { get { throw null; } set { } }
    }
    public partial class TrafficAnalyticsProperties
    {
        public TrafficAnalyticsProperties() { }
        public Azure.ResourceManager.Network.Models.TrafficAnalyticsConfigurationProperties NetworkWatcherFlowAnalyticsConfiguration { get { throw null; } set { } }
    }
    public partial class TrafficSelectorPolicy
    {
        public TrafficSelectorPolicy(System.Collections.Generic.IEnumerable<string> localAddressRanges, System.Collections.Generic.IEnumerable<string> remoteAddressRanges) { }
        public System.Collections.Generic.IList<string> LocalAddressRanges { get { throw null; } }
        public System.Collections.Generic.IList<string> RemoteAddressRanges { get { throw null; } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct TransportProtocol : System.IEquatable<Azure.ResourceManager.Network.Models.TransportProtocol>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public TransportProtocol(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.TransportProtocol All { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.TransportProtocol Tcp { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.TransportProtocol Udp { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.TransportProtocol other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.TransportProtocol left, Azure.ResourceManager.Network.Models.TransportProtocol right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.TransportProtocol (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.TransportProtocol left, Azure.ResourceManager.Network.Models.TransportProtocol right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class TroubleshootingDetails
    {
        internal TroubleshootingDetails() { }
        public string Detail { get { throw null; } }
        public string Id { get { throw null; } }
        public string ReasonType { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.TroubleshootingRecommendedActions> RecommendedActions { get { throw null; } }
        public string Summary { get { throw null; } }
    }
    public partial class TroubleshootingParameters
    {
        public TroubleshootingParameters(string targetResourceId, string storageId, string storagePath) { }
        public string StorageId { get { throw null; } }
        public string StoragePath { get { throw null; } }
        public string TargetResourceId { get { throw null; } }
    }
    public partial class TroubleshootingRecommendedActions
    {
        internal TroubleshootingRecommendedActions() { }
        public string ActionId { get { throw null; } }
        public string ActionText { get { throw null; } }
        public string ActionUri { get { throw null; } }
        public string ActionUriText { get { throw null; } }
    }
    public partial class TroubleshootingResult
    {
        internal TroubleshootingResult() { }
        public string Code { get { throw null; } }
        public System.DateTimeOffset? EndTime { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.TroubleshootingDetails> Results { get { throw null; } }
        public System.DateTimeOffset? StartTime { get { throw null; } }
    }
    public partial class TunnelConnectionHealth
    {
        internal TunnelConnectionHealth() { }
        public Azure.ResourceManager.Network.Models.VirtualNetworkGatewayConnectionStatus? ConnectionStatus { get { throw null; } }
        public long? EgressBytesTransferred { get { throw null; } }
        public long? IngressBytesTransferred { get { throw null; } }
        public string LastConnectionEstablishedUtcTime { get { throw null; } }
        public string Tunnel { get { throw null; } }
    }
    public partial class UnprepareNetworkPoliciesRequest
    {
        public UnprepareNetworkPoliciesRequest() { }
        public string ServiceName { get { throw null; } set { } }
    }
    public partial class Usage
    {
        internal Usage() { }
        public long CurrentValue { get { throw null; } }
        public string Id { get { throw null; } }
        public long Limit { get { throw null; } }
        public Azure.ResourceManager.Network.Models.UsageName Name { get { throw null; } }
        public Azure.ResourceManager.Network.Models.UsageUnit Unit { get { throw null; } }
    }
    public partial class UsageName
    {
        internal UsageName() { }
        public string LocalizedValue { get { throw null; } }
        public string Value { get { throw null; } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct UsageUnit : System.IEquatable<Azure.ResourceManager.Network.Models.UsageUnit>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public UsageUnit(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.UsageUnit Count { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.UsageUnit other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.UsageUnit left, Azure.ResourceManager.Network.Models.UsageUnit right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.UsageUnit (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.UsageUnit left, Azure.ResourceManager.Network.Models.UsageUnit right) { throw null; }
        public override string ToString() { throw null; }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct VerbosityLevel : System.IEquatable<Azure.ResourceManager.Network.Models.VerbosityLevel>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public VerbosityLevel(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.VerbosityLevel Full { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.VerbosityLevel Minimum { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.VerbosityLevel Normal { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.VerbosityLevel other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.VerbosityLevel left, Azure.ResourceManager.Network.Models.VerbosityLevel right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.VerbosityLevel (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.VerbosityLevel left, Azure.ResourceManager.Network.Models.VerbosityLevel right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class VerificationIPFlowParameters
    {
        public VerificationIPFlowParameters(string targetResourceId, Azure.ResourceManager.Network.Models.Direction direction, Azure.ResourceManager.Network.Models.IpFlowProtocol protocol, string localPort, string remotePort, string localIPAddress, string remoteIPAddress) { }
        public Azure.ResourceManager.Network.Models.Direction Direction { get { throw null; } }
        public string LocalIPAddress { get { throw null; } }
        public string LocalPort { get { throw null; } }
        public Azure.ResourceManager.Network.Models.IpFlowProtocol Protocol { get { throw null; } }
        public string RemoteIPAddress { get { throw null; } }
        public string RemotePort { get { throw null; } }
        public string TargetNicResourceId { get { throw null; } set { } }
        public string TargetResourceId { get { throw null; } }
    }
    public partial class VerificationIPFlowResult
    {
        internal VerificationIPFlowResult() { }
        public Azure.ResourceManager.Network.Models.Access? Access { get { throw null; } }
        public string RuleName { get { throw null; } }
    }
    public partial class VirtualApplianceNicProperties
    {
        internal VirtualApplianceNicProperties() { }
        public string Name { get { throw null; } }
        public string PrivateIpAddress { get { throw null; } }
        public string PublicIpAddress { get { throw null; } }
    }
    public partial class VirtualApplianceSkuProperties
    {
        public VirtualApplianceSkuProperties() { }
        public string BundledScaleUnit { get { throw null; } set { } }
        public string MarketPlaceVersion { get { throw null; } set { } }
        public string Vendor { get { throw null; } set { } }
    }
    public partial class VirtualHub : Azure.ResourceManager.Network.Models.Resource
    {
        public VirtualHub() { }
        public string AddressPrefix { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.SubResource AzureFirewall { get { throw null; } set { } }
        public string Etag { get { throw null; } }
        public Azure.ResourceManager.Network.Models.SubResource ExpressRouteGateway { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.SubResource P2SVpnGateway { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public Azure.ResourceManager.Network.Models.VirtualHubRouteTable RouteTable { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.SubResource SecurityPartnerProvider { get { throw null; } set { } }
        public string SecurityProviderName { get { throw null; } set { } }
        public string Sku { get { throw null; } set { } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.VirtualHubRouteTableV2> VirtualHubRouteTableV2S { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.HubVirtualNetworkConnection> VirtualNetworkConnections { get { throw null; } }
        public Azure.ResourceManager.Network.Models.SubResource VirtualWan { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.SubResource VpnGateway { get { throw null; } set { } }
    }
    public partial class VirtualHubId
    {
        public VirtualHubId() { }
        public string Id { get { throw null; } set { } }
    }
    public partial class VirtualHubRoute
    {
        public VirtualHubRoute() { }
        public System.Collections.Generic.IList<string> AddressPrefixes { get { throw null; } }
        public string NextHopIpAddress { get { throw null; } set { } }
    }
    public partial class VirtualHubRouteTable
    {
        public VirtualHubRouteTable() { }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.VirtualHubRoute> Routes { get { throw null; } }
    }
    public partial class VirtualHubRouteTableV2 : Azure.ResourceManager.Network.Models.SubResource
    {
        public VirtualHubRouteTableV2() { }
        public System.Collections.Generic.IList<string> AttachedConnections { get { throw null; } }
        public string Etag { get { throw null; } }
        public string Name { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.VirtualHubRouteV2> Routes { get { throw null; } }
    }
    public partial class VirtualHubRouteV2
    {
        public VirtualHubRouteV2() { }
        public System.Collections.Generic.IList<string> Destinations { get { throw null; } }
        public string DestinationType { get { throw null; } set { } }
        public System.Collections.Generic.IList<string> NextHops { get { throw null; } }
        public string NextHopType { get { throw null; } set { } }
    }
    public partial class VirtualNetwork : Azure.ResourceManager.Network.Models.Resource
    {
        public VirtualNetwork() { }
        public Azure.ResourceManager.Network.Models.AddressSpace AddressSpace { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.VirtualNetworkBgpCommunities BgpCommunities { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.SubResource DdosProtectionPlan { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.DhcpOptions DhcpOptions { get { throw null; } set { } }
        public bool? EnableDdosProtection { get { throw null; } set { } }
        public bool? EnableVmProtection { get { throw null; } set { } }
        public string Etag { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.SubResource> IpAllocations { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public string ResourceGuid { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.Subnet> Subnets { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.VirtualNetworkPeering> VirtualNetworkPeerings { get { throw null; } }
    }
    public partial class VirtualNetworkBgpCommunities
    {
        public VirtualNetworkBgpCommunities(string virtualNetworkCommunity) { }
        public string RegionalCommunity { get { throw null; } }
        public string VirtualNetworkCommunity { get { throw null; } set { } }
    }
    public partial class VirtualNetworkConnectionGatewayReference
    {
        public VirtualNetworkConnectionGatewayReference(string id) { }
        public string Id { get { throw null; } set { } }
    }
    public partial class VirtualNetworkGateway : Azure.ResourceManager.Network.Models.Resource
    {
        public VirtualNetworkGateway() { }
        public bool? Active { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.BgpSettings BgpSettings { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.AddressSpace CustomRoutes { get { throw null; } set { } }
        public bool? EnableBgp { get { throw null; } set { } }
        public bool? EnableDnsForwarding { get { throw null; } set { } }
        public bool? EnablePrivateIpAddress { get { throw null; } set { } }
        public string Etag { get { throw null; } }
        public Azure.ResourceManager.Network.Models.SubResource GatewayDefaultSite { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.VirtualNetworkGatewayType? GatewayType { get { throw null; } set { } }
        public string InboundDnsForwardingEndpoint { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.VirtualNetworkGatewayIPConfiguration> IpConfigurations { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public string ResourceGuid { get { throw null; } }
        public Azure.ResourceManager.Network.Models.VirtualNetworkGatewaySku Sku { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.VpnClientConfiguration VpnClientConfiguration { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.VpnGatewayGeneration? VpnGatewayGeneration { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.VpnType? VpnType { get { throw null; } set { } }
    }
    public partial class VirtualNetworkGatewayConnection : Azure.ResourceManager.Network.Models.Resource
    {
        public VirtualNetworkGatewayConnection(Azure.ResourceManager.Network.Models.VirtualNetworkGateway virtualNetworkGateway1, Azure.ResourceManager.Network.Models.VirtualNetworkGatewayConnectionType connectionType) { }
        public string AuthorizationKey { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.VirtualNetworkGatewayConnectionProtocol? ConnectionProtocol { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.VirtualNetworkGatewayConnectionStatus? ConnectionStatus { get { throw null; } }
        public Azure.ResourceManager.Network.Models.VirtualNetworkGatewayConnectionType ConnectionType { get { throw null; } set { } }
        public int? DpdTimeoutSeconds { get { throw null; } set { } }
        public long? EgressBytesTransferred { get { throw null; } }
        public bool? EnableBgp { get { throw null; } set { } }
        public string Etag { get { throw null; } }
        public bool? ExpressRouteGatewayBypass { get { throw null; } set { } }
        public long? IngressBytesTransferred { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.IpsecPolicy> IpsecPolicies { get { throw null; } }
        public Azure.ResourceManager.Network.Models.LocalNetworkGateway LocalNetworkGateway2 { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.SubResource Peer { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public string ResourceGuid { get { throw null; } }
        public int? RoutingWeight { get { throw null; } set { } }
        public string SharedKey { get { throw null; } set { } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.TrafficSelectorPolicy> TrafficSelectorPolicies { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.TunnelConnectionHealth> TunnelConnectionStatus { get { throw null; } }
        public bool? UseLocalAzureIpAddress { get { throw null; } set { } }
        public bool? UsePolicyBasedTrafficSelectors { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.VirtualNetworkGateway VirtualNetworkGateway1 { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.VirtualNetworkGateway VirtualNetworkGateway2 { get { throw null; } set { } }
    }
    public partial class VirtualNetworkGatewayConnectionListEntity : Azure.ResourceManager.Network.Models.Resource
    {
        public VirtualNetworkGatewayConnectionListEntity(Azure.ResourceManager.Network.Models.VirtualNetworkConnectionGatewayReference virtualNetworkGateway1, Azure.ResourceManager.Network.Models.VirtualNetworkGatewayConnectionType connectionType) { }
        public string AuthorizationKey { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.VirtualNetworkGatewayConnectionProtocol? ConnectionProtocol { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.VirtualNetworkGatewayConnectionStatus? ConnectionStatus { get { throw null; } }
        public Azure.ResourceManager.Network.Models.VirtualNetworkGatewayConnectionType ConnectionType { get { throw null; } set { } }
        public long? EgressBytesTransferred { get { throw null; } }
        public bool? EnableBgp { get { throw null; } set { } }
        public string Etag { get { throw null; } }
        public bool? ExpressRouteGatewayBypass { get { throw null; } set { } }
        public long? IngressBytesTransferred { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.IpsecPolicy> IpsecPolicies { get { throw null; } }
        public Azure.ResourceManager.Network.Models.VirtualNetworkConnectionGatewayReference LocalNetworkGateway2 { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.SubResource Peer { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public string ResourceGuid { get { throw null; } }
        public int? RoutingWeight { get { throw null; } set { } }
        public string SharedKey { get { throw null; } set { } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.TrafficSelectorPolicy> TrafficSelectorPolicies { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.TunnelConnectionHealth> TunnelConnectionStatus { get { throw null; } }
        public bool? UsePolicyBasedTrafficSelectors { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.VirtualNetworkConnectionGatewayReference VirtualNetworkGateway1 { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.VirtualNetworkConnectionGatewayReference VirtualNetworkGateway2 { get { throw null; } set { } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct VirtualNetworkGatewayConnectionProtocol : System.IEquatable<Azure.ResourceManager.Network.Models.VirtualNetworkGatewayConnectionProtocol>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public VirtualNetworkGatewayConnectionProtocol(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.VirtualNetworkGatewayConnectionProtocol IKEv1 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.VirtualNetworkGatewayConnectionProtocol IKEv2 { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.VirtualNetworkGatewayConnectionProtocol other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.VirtualNetworkGatewayConnectionProtocol left, Azure.ResourceManager.Network.Models.VirtualNetworkGatewayConnectionProtocol right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.VirtualNetworkGatewayConnectionProtocol (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.VirtualNetworkGatewayConnectionProtocol left, Azure.ResourceManager.Network.Models.VirtualNetworkGatewayConnectionProtocol right) { throw null; }
        public override string ToString() { throw null; }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct VirtualNetworkGatewayConnectionStatus : System.IEquatable<Azure.ResourceManager.Network.Models.VirtualNetworkGatewayConnectionStatus>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public VirtualNetworkGatewayConnectionStatus(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.VirtualNetworkGatewayConnectionStatus Connected { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.VirtualNetworkGatewayConnectionStatus Connecting { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.VirtualNetworkGatewayConnectionStatus NotConnected { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.VirtualNetworkGatewayConnectionStatus Unknown { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.VirtualNetworkGatewayConnectionStatus other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.VirtualNetworkGatewayConnectionStatus left, Azure.ResourceManager.Network.Models.VirtualNetworkGatewayConnectionStatus right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.VirtualNetworkGatewayConnectionStatus (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.VirtualNetworkGatewayConnectionStatus left, Azure.ResourceManager.Network.Models.VirtualNetworkGatewayConnectionStatus right) { throw null; }
        public override string ToString() { throw null; }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct VirtualNetworkGatewayConnectionType : System.IEquatable<Azure.ResourceManager.Network.Models.VirtualNetworkGatewayConnectionType>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public VirtualNetworkGatewayConnectionType(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.VirtualNetworkGatewayConnectionType ExpressRoute { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.VirtualNetworkGatewayConnectionType IPsec { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.VirtualNetworkGatewayConnectionType Vnet2Vnet { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.VirtualNetworkGatewayConnectionType VPNClient { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.VirtualNetworkGatewayConnectionType other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.VirtualNetworkGatewayConnectionType left, Azure.ResourceManager.Network.Models.VirtualNetworkGatewayConnectionType right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.VirtualNetworkGatewayConnectionType (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.VirtualNetworkGatewayConnectionType left, Azure.ResourceManager.Network.Models.VirtualNetworkGatewayConnectionType right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class VirtualNetworkGatewayIPConfiguration : Azure.ResourceManager.Network.Models.SubResource
    {
        public VirtualNetworkGatewayIPConfiguration() { }
        public string Etag { get { throw null; } }
        public string Name { get { throw null; } set { } }
        public string PrivateIPAddress { get { throw null; } }
        public Azure.ResourceManager.Network.Models.IPAllocationMethod? PrivateIPAllocationMethod { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public Azure.ResourceManager.Network.Models.SubResource PublicIPAddress { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.SubResource Subnet { get { throw null; } set { } }
    }
    public partial class VirtualNetworkGatewaySku
    {
        public VirtualNetworkGatewaySku() { }
        public int? Capacity { get { throw null; } }
        public Azure.ResourceManager.Network.Models.VirtualNetworkGatewaySkuName? Name { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.VirtualNetworkGatewaySkuTier? Tier { get { throw null; } set { } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct VirtualNetworkGatewaySkuName : System.IEquatable<Azure.ResourceManager.Network.Models.VirtualNetworkGatewaySkuName>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public VirtualNetworkGatewaySkuName(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.VirtualNetworkGatewaySkuName Basic { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.VirtualNetworkGatewaySkuName ErGw1AZ { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.VirtualNetworkGatewaySkuName ErGw2AZ { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.VirtualNetworkGatewaySkuName ErGw3AZ { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.VirtualNetworkGatewaySkuName HighPerformance { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.VirtualNetworkGatewaySkuName Standard { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.VirtualNetworkGatewaySkuName UltraPerformance { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.VirtualNetworkGatewaySkuName VpnGw1 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.VirtualNetworkGatewaySkuName VpnGw1AZ { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.VirtualNetworkGatewaySkuName VpnGw2 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.VirtualNetworkGatewaySkuName VpnGw2AZ { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.VirtualNetworkGatewaySkuName VpnGw3 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.VirtualNetworkGatewaySkuName VpnGw3AZ { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.VirtualNetworkGatewaySkuName VpnGw4 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.VirtualNetworkGatewaySkuName VpnGw4AZ { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.VirtualNetworkGatewaySkuName VpnGw5 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.VirtualNetworkGatewaySkuName VpnGw5AZ { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.VirtualNetworkGatewaySkuName other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.VirtualNetworkGatewaySkuName left, Azure.ResourceManager.Network.Models.VirtualNetworkGatewaySkuName right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.VirtualNetworkGatewaySkuName (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.VirtualNetworkGatewaySkuName left, Azure.ResourceManager.Network.Models.VirtualNetworkGatewaySkuName right) { throw null; }
        public override string ToString() { throw null; }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct VirtualNetworkGatewaySkuTier : System.IEquatable<Azure.ResourceManager.Network.Models.VirtualNetworkGatewaySkuTier>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public VirtualNetworkGatewaySkuTier(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.VirtualNetworkGatewaySkuTier Basic { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.VirtualNetworkGatewaySkuTier ErGw1AZ { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.VirtualNetworkGatewaySkuTier ErGw2AZ { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.VirtualNetworkGatewaySkuTier ErGw3AZ { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.VirtualNetworkGatewaySkuTier HighPerformance { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.VirtualNetworkGatewaySkuTier Standard { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.VirtualNetworkGatewaySkuTier UltraPerformance { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.VirtualNetworkGatewaySkuTier VpnGw1 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.VirtualNetworkGatewaySkuTier VpnGw1AZ { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.VirtualNetworkGatewaySkuTier VpnGw2 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.VirtualNetworkGatewaySkuTier VpnGw2AZ { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.VirtualNetworkGatewaySkuTier VpnGw3 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.VirtualNetworkGatewaySkuTier VpnGw3AZ { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.VirtualNetworkGatewaySkuTier VpnGw4 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.VirtualNetworkGatewaySkuTier VpnGw4AZ { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.VirtualNetworkGatewaySkuTier VpnGw5 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.VirtualNetworkGatewaySkuTier VpnGw5AZ { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.VirtualNetworkGatewaySkuTier other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.VirtualNetworkGatewaySkuTier left, Azure.ResourceManager.Network.Models.VirtualNetworkGatewaySkuTier right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.VirtualNetworkGatewaySkuTier (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.VirtualNetworkGatewaySkuTier left, Azure.ResourceManager.Network.Models.VirtualNetworkGatewaySkuTier right) { throw null; }
        public override string ToString() { throw null; }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct VirtualNetworkGatewayType : System.IEquatable<Azure.ResourceManager.Network.Models.VirtualNetworkGatewayType>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public VirtualNetworkGatewayType(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.VirtualNetworkGatewayType ExpressRoute { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.VirtualNetworkGatewayType Vpn { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.VirtualNetworkGatewayType other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.VirtualNetworkGatewayType left, Azure.ResourceManager.Network.Models.VirtualNetworkGatewayType right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.VirtualNetworkGatewayType (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.VirtualNetworkGatewayType left, Azure.ResourceManager.Network.Models.VirtualNetworkGatewayType right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class VirtualNetworkPeering : Azure.ResourceManager.Network.Models.SubResource
    {
        public VirtualNetworkPeering() { }
        public bool? AllowForwardedTraffic { get { throw null; } set { } }
        public bool? AllowGatewayTransit { get { throw null; } set { } }
        public bool? AllowVirtualNetworkAccess { get { throw null; } set { } }
        public string Etag { get { throw null; } }
        public string Name { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.VirtualNetworkPeeringState? PeeringState { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public Azure.ResourceManager.Network.Models.AddressSpace RemoteAddressSpace { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.SubResource RemoteVirtualNetwork { get { throw null; } set { } }
        public bool? UseRemoteGateways { get { throw null; } set { } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct VirtualNetworkPeeringState : System.IEquatable<Azure.ResourceManager.Network.Models.VirtualNetworkPeeringState>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public VirtualNetworkPeeringState(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.VirtualNetworkPeeringState Connected { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.VirtualNetworkPeeringState Disconnected { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.VirtualNetworkPeeringState Initiated { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.VirtualNetworkPeeringState other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.VirtualNetworkPeeringState left, Azure.ResourceManager.Network.Models.VirtualNetworkPeeringState right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.VirtualNetworkPeeringState (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.VirtualNetworkPeeringState left, Azure.ResourceManager.Network.Models.VirtualNetworkPeeringState right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class VirtualNetworkTap : Azure.ResourceManager.Network.Models.Resource
    {
        public VirtualNetworkTap() { }
        public Azure.ResourceManager.Network.Models.FrontendIPConfiguration DestinationLoadBalancerFrontEndIPConfiguration { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.NetworkInterfaceIPConfiguration DestinationNetworkInterfaceIPConfiguration { get { throw null; } set { } }
        public int? DestinationPort { get { throw null; } set { } }
        public string Etag { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.NetworkInterfaceTapConfiguration> NetworkInterfaceTapConfigurations { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public string ResourceGuid { get { throw null; } }
    }
    public partial class VirtualNetworkUsage
    {
        internal VirtualNetworkUsage() { }
        public double? CurrentValue { get { throw null; } }
        public string Id { get { throw null; } }
        public double? Limit { get { throw null; } }
        public Azure.ResourceManager.Network.Models.VirtualNetworkUsageName Name { get { throw null; } }
        public string Unit { get { throw null; } }
    }
    public partial class VirtualNetworkUsageName
    {
        internal VirtualNetworkUsageName() { }
        public string LocalizedValue { get { throw null; } }
        public string Value { get { throw null; } }
    }
    public partial class VirtualRouter : Azure.ResourceManager.Network.Models.Resource
    {
        public VirtualRouter() { }
        public string Etag { get { throw null; } }
        public Azure.ResourceManager.Network.Models.SubResource HostedGateway { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.SubResource HostedSubnet { get { throw null; } set { } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.SubResource> Peerings { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public long? VirtualRouterAsn { get { throw null; } set { } }
        public System.Collections.Generic.IList<string> VirtualRouterIps { get { throw null; } }
    }
    public partial class VirtualRouterPeering : Azure.ResourceManager.Network.Models.SubResource
    {
        public VirtualRouterPeering() { }
        public string Etag { get { throw null; } }
        public string Name { get { throw null; } set { } }
        public long? PeerAsn { get { throw null; } set { } }
        public string PeerIp { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public string Type { get { throw null; } }
    }
    public partial class VirtualWAN : Azure.ResourceManager.Network.Models.Resource
    {
        public VirtualWAN() { }
        public bool? AllowBranchToBranchTraffic { get { throw null; } set { } }
        public bool? AllowVnetToVnetTraffic { get { throw null; } set { } }
        public bool? DisableVpnEncryption { get { throw null; } set { } }
        public string Etag { get { throw null; } }
        public Azure.ResourceManager.Network.Models.OfficeTrafficCategory? Office365LocalBreakoutCategory { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public string TypePropertiesType { get { throw null; } set { } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.SubResource> VirtualHubs { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.SubResource> VpnSites { get { throw null; } }
    }
    public partial class VirtualWanSecurityProvider
    {
        internal VirtualWanSecurityProvider() { }
        public string Name { get { throw null; } }
        public Azure.ResourceManager.Network.Models.VirtualWanSecurityProviderType? Type { get { throw null; } }
        public string Url { get { throw null; } }
    }
    public partial class VirtualWanSecurityProviders
    {
        internal VirtualWanSecurityProviders() { }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.VirtualWanSecurityProvider> SupportedProviders { get { throw null; } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct VirtualWanSecurityProviderType : System.IEquatable<Azure.ResourceManager.Network.Models.VirtualWanSecurityProviderType>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public VirtualWanSecurityProviderType(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.VirtualWanSecurityProviderType External { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.VirtualWanSecurityProviderType Native { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.VirtualWanSecurityProviderType other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.VirtualWanSecurityProviderType left, Azure.ResourceManager.Network.Models.VirtualWanSecurityProviderType right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.VirtualWanSecurityProviderType (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.VirtualWanSecurityProviderType left, Azure.ResourceManager.Network.Models.VirtualWanSecurityProviderType right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class VirtualWanVpnProfileParameters
    {
        public VirtualWanVpnProfileParameters() { }
        public Azure.ResourceManager.Network.Models.AuthenticationMethod? AuthenticationMethod { get { throw null; } set { } }
        public string VpnServerConfigurationResourceId { get { throw null; } set { } }
    }
    public partial class VM : Azure.ResourceManager.Network.Models.Resource
    {
        public VM() { }
    }
    public partial class VnetRoute
    {
        public VnetRoute() { }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.StaticRoute> StaticRoutes { get { throw null; } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct VpnAuthenticationType : System.IEquatable<Azure.ResourceManager.Network.Models.VpnAuthenticationType>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public VpnAuthenticationType(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.VpnAuthenticationType AAD { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.VpnAuthenticationType Certificate { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.VpnAuthenticationType Radius { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.VpnAuthenticationType other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.VpnAuthenticationType left, Azure.ResourceManager.Network.Models.VpnAuthenticationType right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.VpnAuthenticationType (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.VpnAuthenticationType left, Azure.ResourceManager.Network.Models.VpnAuthenticationType right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class VpnClientConfiguration
    {
        public VpnClientConfiguration() { }
        public string AadAudience { get { throw null; } set { } }
        public string AadIssuer { get { throw null; } set { } }
        public string AadTenant { get { throw null; } set { } }
        public string RadiusServerAddress { get { throw null; } set { } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.RadiusServer> RadiusServers { get { throw null; } }
        public string RadiusServerSecret { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.AddressSpace VpnClientAddressPool { get { throw null; } set { } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.IpsecPolicy> VpnClientIpsecPolicies { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.VpnClientProtocol> VpnClientProtocols { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.VpnClientRevokedCertificate> VpnClientRevokedCertificates { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.VpnClientRootCertificate> VpnClientRootCertificates { get { throw null; } }
    }
    public partial class VpnClientConnectionHealth
    {
        internal VpnClientConnectionHealth() { }
        public System.Collections.Generic.IReadOnlyList<string> AllocatedIpAddresses { get { throw null; } }
        public long? TotalEgressBytesTransferred { get { throw null; } }
        public long? TotalIngressBytesTransferred { get { throw null; } }
        public int? VpnClientConnectionsCount { get { throw null; } }
    }
    public partial class VpnClientConnectionHealthDetail
    {
        internal VpnClientConnectionHealthDetail() { }
        public long? EgressBytesTransferred { get { throw null; } }
        public long? EgressPacketsTransferred { get { throw null; } }
        public long? IngressBytesTransferred { get { throw null; } }
        public long? IngressPacketsTransferred { get { throw null; } }
        public long? MaxBandwidth { get { throw null; } }
        public long? MaxPacketsPerSecond { get { throw null; } }
        public string PrivateIpAddress { get { throw null; } }
        public string PublicIpAddress { get { throw null; } }
        public long? VpnConnectionDuration { get { throw null; } }
        public string VpnConnectionId { get { throw null; } }
        public string VpnConnectionTime { get { throw null; } }
        public string VpnUserName { get { throw null; } }
    }
    public partial class VpnClientConnectionHealthDetailListResult
    {
        internal VpnClientConnectionHealthDetailListResult() { }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.VpnClientConnectionHealthDetail> Value { get { throw null; } }
    }
    public partial class VpnClientIPsecParameters
    {
        public VpnClientIPsecParameters(int saLifeTimeSeconds, int saDataSizeKilobytes, Azure.ResourceManager.Network.Models.IpsecEncryption ipsecEncryption, Azure.ResourceManager.Network.Models.IpsecIntegrity ipsecIntegrity, Azure.ResourceManager.Network.Models.IkeEncryption ikeEncryption, Azure.ResourceManager.Network.Models.IkeIntegrity ikeIntegrity, Azure.ResourceManager.Network.Models.DhGroup dhGroup, Azure.ResourceManager.Network.Models.PfsGroup pfsGroup) { }
        public Azure.ResourceManager.Network.Models.DhGroup DhGroup { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.IkeEncryption IkeEncryption { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.IkeIntegrity IkeIntegrity { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.IpsecEncryption IpsecEncryption { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.IpsecIntegrity IpsecIntegrity { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.PfsGroup PfsGroup { get { throw null; } set { } }
        public int SaDataSizeKilobytes { get { throw null; } set { } }
        public int SaLifeTimeSeconds { get { throw null; } set { } }
    }
    public partial class VpnClientParameters
    {
        public VpnClientParameters() { }
        public Azure.ResourceManager.Network.Models.AuthenticationMethod? AuthenticationMethod { get { throw null; } set { } }
        public System.Collections.Generic.IList<string> ClientRootCertificates { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ProcessorArchitecture? ProcessorArchitecture { get { throw null; } set { } }
        public string RadiusServerAuthCertificate { get { throw null; } set { } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct VpnClientProtocol : System.IEquatable<Azure.ResourceManager.Network.Models.VpnClientProtocol>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public VpnClientProtocol(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.VpnClientProtocol IkeV2 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.VpnClientProtocol OpenVPN { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.VpnClientProtocol Sstp { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.VpnClientProtocol other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.VpnClientProtocol left, Azure.ResourceManager.Network.Models.VpnClientProtocol right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.VpnClientProtocol (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.VpnClientProtocol left, Azure.ResourceManager.Network.Models.VpnClientProtocol right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class VpnClientRevokedCertificate : Azure.ResourceManager.Network.Models.SubResource
    {
        public VpnClientRevokedCertificate() { }
        public string Etag { get { throw null; } }
        public string Name { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public string Thumbprint { get { throw null; } set { } }
    }
    public partial class VpnClientRootCertificate : Azure.ResourceManager.Network.Models.SubResource
    {
        public VpnClientRootCertificate(string publicCertData) { }
        public string Etag { get { throw null; } }
        public string Name { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public string PublicCertData { get { throw null; } set { } }
    }
    public partial class VpnConnection : Azure.ResourceManager.Network.Models.SubResource
    {
        public VpnConnection() { }
        public int? ConnectionBandwidth { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.VpnConnectionStatus? ConnectionStatus { get { throw null; } }
        public int? DpdTimeoutSeconds { get { throw null; } set { } }
        public long? EgressBytesTransferred { get { throw null; } }
        public bool? EnableBgp { get { throw null; } set { } }
        public bool? EnableInternetSecurity { get { throw null; } set { } }
        public bool? EnableRateLimiting { get { throw null; } set { } }
        public string Etag { get { throw null; } }
        public long? IngressBytesTransferred { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.IpsecPolicy> IpsecPolicies { get { throw null; } }
        public string Name { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public Azure.ResourceManager.Network.Models.SubResource RemoteVpnSite { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.RoutingConfiguration RoutingConfiguration { get { throw null; } set { } }
        public int? RoutingWeight { get { throw null; } set { } }
        public string SharedKey { get { throw null; } set { } }
        public bool? UseLocalAzureIpAddress { get { throw null; } set { } }
        public bool? UsePolicyBasedTrafficSelectors { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.VirtualNetworkGatewayConnectionProtocol? VpnConnectionProtocolType { get { throw null; } set { } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.VpnSiteLinkConnection> VpnLinkConnections { get { throw null; } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct VpnConnectionStatus : System.IEquatable<Azure.ResourceManager.Network.Models.VpnConnectionStatus>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public VpnConnectionStatus(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.VpnConnectionStatus Connected { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.VpnConnectionStatus Connecting { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.VpnConnectionStatus NotConnected { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.VpnConnectionStatus Unknown { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.VpnConnectionStatus other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.VpnConnectionStatus left, Azure.ResourceManager.Network.Models.VpnConnectionStatus right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.VpnConnectionStatus (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.VpnConnectionStatus left, Azure.ResourceManager.Network.Models.VpnConnectionStatus right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class VpnDeviceScriptParameters
    {
        public VpnDeviceScriptParameters() { }
        public string DeviceFamily { get { throw null; } set { } }
        public string FirmwareVersion { get { throw null; } set { } }
        public string Vendor { get { throw null; } set { } }
    }
    public partial class VpnGateway : Azure.ResourceManager.Network.Models.Resource
    {
        public VpnGateway() { }
        public Azure.ResourceManager.Network.Models.BgpSettings BgpSettings { get { throw null; } set { } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.VpnConnection> Connections { get { throw null; } }
        public string Etag { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public Azure.ResourceManager.Network.Models.SubResource VirtualHub { get { throw null; } set { } }
        public int? VpnGatewayScaleUnit { get { throw null; } set { } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct VpnGatewayGeneration : System.IEquatable<Azure.ResourceManager.Network.Models.VpnGatewayGeneration>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public VpnGatewayGeneration(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.VpnGatewayGeneration Generation1 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.VpnGatewayGeneration Generation2 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.VpnGatewayGeneration None { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.VpnGatewayGeneration other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.VpnGatewayGeneration left, Azure.ResourceManager.Network.Models.VpnGatewayGeneration right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.VpnGatewayGeneration (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.VpnGatewayGeneration left, Azure.ResourceManager.Network.Models.VpnGatewayGeneration right) { throw null; }
        public override string ToString() { throw null; }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct VpnGatewayTunnelingProtocol : System.IEquatable<Azure.ResourceManager.Network.Models.VpnGatewayTunnelingProtocol>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public VpnGatewayTunnelingProtocol(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.VpnGatewayTunnelingProtocol IkeV2 { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.VpnGatewayTunnelingProtocol OpenVPN { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.VpnGatewayTunnelingProtocol other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.VpnGatewayTunnelingProtocol left, Azure.ResourceManager.Network.Models.VpnGatewayTunnelingProtocol right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.VpnGatewayTunnelingProtocol (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.VpnGatewayTunnelingProtocol left, Azure.ResourceManager.Network.Models.VpnGatewayTunnelingProtocol right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class VpnLinkBgpSettings
    {
        public VpnLinkBgpSettings() { }
        public long? Asn { get { throw null; } set { } }
        public string BgpPeeringAddress { get { throw null; } set { } }
    }
    public partial class VpnLinkProviderProperties
    {
        public VpnLinkProviderProperties() { }
        public string LinkProviderName { get { throw null; } set { } }
        public int? LinkSpeedInMbps { get { throw null; } set { } }
    }
    public partial class VpnPacketCaptureStartParameters
    {
        public VpnPacketCaptureStartParameters() { }
        public string FilterData { get { throw null; } set { } }
    }
    public partial class VpnPacketCaptureStopParameters
    {
        public VpnPacketCaptureStopParameters() { }
        public string SasUrl { get { throw null; } set { } }
    }
    public partial class VpnProfileResponse
    {
        internal VpnProfileResponse() { }
        public string ProfileUrl { get { throw null; } }
    }
    public partial class VpnServerConfigRadiusClientRootCertificate
    {
        public VpnServerConfigRadiusClientRootCertificate() { }
        public string Name { get { throw null; } set { } }
        public string Thumbprint { get { throw null; } set { } }
    }
    public partial class VpnServerConfigRadiusServerRootCertificate
    {
        public VpnServerConfigRadiusServerRootCertificate() { }
        public string Name { get { throw null; } set { } }
        public string PublicCertData { get { throw null; } set { } }
    }
    public partial class VpnServerConfiguration : Azure.ResourceManager.Network.Models.Resource
    {
        public VpnServerConfiguration() { }
        public Azure.ResourceManager.Network.Models.AadAuthenticationParameters AadAuthenticationParameters { get { throw null; } set { } }
        public string Etag { get { throw null; } }
        public string EtagPropertiesEtag { get { throw null; } }
        public string NamePropertiesName { get { throw null; } set { } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.P2SVpnGateway> P2SVpnGateways { get { throw null; } }
        public string ProvisioningState { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.VpnServerConfigRadiusClientRootCertificate> RadiusClientRootCertificates { get { throw null; } }
        public string RadiusServerAddress { get { throw null; } set { } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.VpnServerConfigRadiusServerRootCertificate> RadiusServerRootCertificates { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.RadiusServer> RadiusServers { get { throw null; } }
        public string RadiusServerSecret { get { throw null; } set { } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.VpnAuthenticationType> VpnAuthenticationTypes { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.IpsecPolicy> VpnClientIpsecPolicies { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.VpnServerConfigVpnClientRevokedCertificate> VpnClientRevokedCertificates { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.VpnServerConfigVpnClientRootCertificate> VpnClientRootCertificates { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.VpnGatewayTunnelingProtocol> VpnProtocols { get { throw null; } }
    }
    public partial class VpnServerConfigurationsResponse
    {
        internal VpnServerConfigurationsResponse() { }
        public System.Collections.Generic.IReadOnlyList<string> VpnServerConfigurationResourceIds { get { throw null; } }
    }
    public partial class VpnServerConfigVpnClientRevokedCertificate
    {
        public VpnServerConfigVpnClientRevokedCertificate() { }
        public string Name { get { throw null; } set { } }
        public string Thumbprint { get { throw null; } set { } }
    }
    public partial class VpnServerConfigVpnClientRootCertificate
    {
        public VpnServerConfigVpnClientRootCertificate() { }
        public string Name { get { throw null; } set { } }
        public string PublicCertData { get { throw null; } set { } }
    }
    public partial class VpnSite : Azure.ResourceManager.Network.Models.Resource
    {
        public VpnSite() { }
        public Azure.ResourceManager.Network.Models.AddressSpace AddressSpace { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.BgpSettings BgpProperties { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.DeviceProperties DeviceProperties { get { throw null; } set { } }
        public string Etag { get { throw null; } }
        public string IpAddress { get { throw null; } set { } }
        public bool? IsSecuritySite { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public string SiteKey { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.SubResource VirtualWan { get { throw null; } set { } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.VpnSiteLink> VpnSiteLinks { get { throw null; } }
    }
    public partial class VpnSiteLink : Azure.ResourceManager.Network.Models.SubResource
    {
        public VpnSiteLink() { }
        public Azure.ResourceManager.Network.Models.VpnLinkBgpSettings BgpProperties { get { throw null; } set { } }
        public string Etag { get { throw null; } }
        public string Fqdn { get { throw null; } set { } }
        public string IpAddress { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.VpnLinkProviderProperties LinkProperties { get { throw null; } set { } }
        public string Name { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public string Type { get { throw null; } }
    }
    public partial class VpnSiteLinkConnection : Azure.ResourceManager.Network.Models.SubResource
    {
        public VpnSiteLinkConnection() { }
        public int? ConnectionBandwidth { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.VpnConnectionStatus? ConnectionStatus { get { throw null; } }
        public long? EgressBytesTransferred { get { throw null; } }
        public bool? EnableBgp { get { throw null; } set { } }
        public bool? EnableRateLimiting { get { throw null; } set { } }
        public string Etag { get { throw null; } }
        public long? IngressBytesTransferred { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.IpsecPolicy> IpsecPolicies { get { throw null; } }
        public string Name { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public int? RoutingWeight { get { throw null; } set { } }
        public string SharedKey { get { throw null; } set { } }
        public string Type { get { throw null; } }
        public bool? UseLocalAzureIpAddress { get { throw null; } set { } }
        public bool? UsePolicyBasedTrafficSelectors { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.VirtualNetworkGatewayConnectionProtocol? VpnConnectionProtocolType { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.SubResource VpnSiteLink { get { throw null; } set { } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct VpnType : System.IEquatable<Azure.ResourceManager.Network.Models.VpnType>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public VpnType(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.VpnType PolicyBased { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.VpnType RouteBased { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.VpnType other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.VpnType left, Azure.ResourceManager.Network.Models.VpnType right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.VpnType (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.VpnType left, Azure.ResourceManager.Network.Models.VpnType right) { throw null; }
        public override string ToString() { throw null; }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct WebApplicationFirewallAction : System.IEquatable<Azure.ResourceManager.Network.Models.WebApplicationFirewallAction>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public WebApplicationFirewallAction(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.WebApplicationFirewallAction Allow { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.WebApplicationFirewallAction Block { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.WebApplicationFirewallAction Log { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.WebApplicationFirewallAction other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.WebApplicationFirewallAction left, Azure.ResourceManager.Network.Models.WebApplicationFirewallAction right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.WebApplicationFirewallAction (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.WebApplicationFirewallAction left, Azure.ResourceManager.Network.Models.WebApplicationFirewallAction right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class WebApplicationFirewallCustomRule
    {
        public WebApplicationFirewallCustomRule(int priority, Azure.ResourceManager.Network.Models.WebApplicationFirewallRuleType ruleType, System.Collections.Generic.IEnumerable<Azure.ResourceManager.Network.Models.MatchCondition> matchConditions, Azure.ResourceManager.Network.Models.WebApplicationFirewallAction action) { }
        public Azure.ResourceManager.Network.Models.WebApplicationFirewallAction Action { get { throw null; } set { } }
        public string Etag { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.MatchCondition> MatchConditions { get { throw null; } }
        public string Name { get { throw null; } set { } }
        public int Priority { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.WebApplicationFirewallRuleType RuleType { get { throw null; } set { } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct WebApplicationFirewallEnabledState : System.IEquatable<Azure.ResourceManager.Network.Models.WebApplicationFirewallEnabledState>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public WebApplicationFirewallEnabledState(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.WebApplicationFirewallEnabledState Disabled { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.WebApplicationFirewallEnabledState Enabled { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.WebApplicationFirewallEnabledState other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.WebApplicationFirewallEnabledState left, Azure.ResourceManager.Network.Models.WebApplicationFirewallEnabledState right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.WebApplicationFirewallEnabledState (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.WebApplicationFirewallEnabledState left, Azure.ResourceManager.Network.Models.WebApplicationFirewallEnabledState right) { throw null; }
        public override string ToString() { throw null; }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct WebApplicationFirewallMatchVariable : System.IEquatable<Azure.ResourceManager.Network.Models.WebApplicationFirewallMatchVariable>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public WebApplicationFirewallMatchVariable(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.WebApplicationFirewallMatchVariable PostArgs { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.WebApplicationFirewallMatchVariable QueryString { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.WebApplicationFirewallMatchVariable RemoteAddr { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.WebApplicationFirewallMatchVariable RequestBody { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.WebApplicationFirewallMatchVariable RequestCookies { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.WebApplicationFirewallMatchVariable RequestHeaders { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.WebApplicationFirewallMatchVariable RequestMethod { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.WebApplicationFirewallMatchVariable RequestUri { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.WebApplicationFirewallMatchVariable other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.WebApplicationFirewallMatchVariable left, Azure.ResourceManager.Network.Models.WebApplicationFirewallMatchVariable right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.WebApplicationFirewallMatchVariable (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.WebApplicationFirewallMatchVariable left, Azure.ResourceManager.Network.Models.WebApplicationFirewallMatchVariable right) { throw null; }
        public override string ToString() { throw null; }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct WebApplicationFirewallMode : System.IEquatable<Azure.ResourceManager.Network.Models.WebApplicationFirewallMode>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public WebApplicationFirewallMode(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.WebApplicationFirewallMode Detection { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.WebApplicationFirewallMode Prevention { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.WebApplicationFirewallMode other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.WebApplicationFirewallMode left, Azure.ResourceManager.Network.Models.WebApplicationFirewallMode right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.WebApplicationFirewallMode (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.WebApplicationFirewallMode left, Azure.ResourceManager.Network.Models.WebApplicationFirewallMode right) { throw null; }
        public override string ToString() { throw null; }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct WebApplicationFirewallOperator : System.IEquatable<Azure.ResourceManager.Network.Models.WebApplicationFirewallOperator>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public WebApplicationFirewallOperator(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.WebApplicationFirewallOperator BeginsWith { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.WebApplicationFirewallOperator Contains { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.WebApplicationFirewallOperator EndsWith { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.WebApplicationFirewallOperator Equal { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.WebApplicationFirewallOperator GeoMatch { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.WebApplicationFirewallOperator GreaterThan { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.WebApplicationFirewallOperator GreaterThanOrEqual { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.WebApplicationFirewallOperator IPMatch { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.WebApplicationFirewallOperator LessThan { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.WebApplicationFirewallOperator LessThanOrEqual { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.WebApplicationFirewallOperator Regex { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.WebApplicationFirewallOperator other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.WebApplicationFirewallOperator left, Azure.ResourceManager.Network.Models.WebApplicationFirewallOperator right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.WebApplicationFirewallOperator (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.WebApplicationFirewallOperator left, Azure.ResourceManager.Network.Models.WebApplicationFirewallOperator right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class WebApplicationFirewallPolicy : Azure.ResourceManager.Network.Models.Resource
    {
        public WebApplicationFirewallPolicy() { }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.ApplicationGateway> ApplicationGateways { get { throw null; } }
        public System.Collections.Generic.IList<Azure.ResourceManager.Network.Models.WebApplicationFirewallCustomRule> CustomRules { get { throw null; } }
        public string Etag { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.SubResource> HttpListeners { get { throw null; } }
        public Azure.ResourceManager.Network.Models.ManagedRulesDefinition ManagedRules { get { throw null; } set { } }
        public System.Collections.Generic.IReadOnlyList<Azure.ResourceManager.Network.Models.SubResource> PathBasedRules { get { throw null; } }
        public Azure.ResourceManager.Network.Models.PolicySettings PolicySettings { get { throw null; } set { } }
        public Azure.ResourceManager.Network.Models.ProvisioningState? ProvisioningState { get { throw null; } }
        public Azure.ResourceManager.Network.Models.WebApplicationFirewallPolicyResourceState? ResourceState { get { throw null; } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct WebApplicationFirewallPolicyResourceState : System.IEquatable<Azure.ResourceManager.Network.Models.WebApplicationFirewallPolicyResourceState>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public WebApplicationFirewallPolicyResourceState(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.WebApplicationFirewallPolicyResourceState Creating { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.WebApplicationFirewallPolicyResourceState Deleting { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.WebApplicationFirewallPolicyResourceState Disabled { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.WebApplicationFirewallPolicyResourceState Disabling { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.WebApplicationFirewallPolicyResourceState Enabled { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.WebApplicationFirewallPolicyResourceState Enabling { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.WebApplicationFirewallPolicyResourceState other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.WebApplicationFirewallPolicyResourceState left, Azure.ResourceManager.Network.Models.WebApplicationFirewallPolicyResourceState right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.WebApplicationFirewallPolicyResourceState (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.WebApplicationFirewallPolicyResourceState left, Azure.ResourceManager.Network.Models.WebApplicationFirewallPolicyResourceState right) { throw null; }
        public override string ToString() { throw null; }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct WebApplicationFirewallRuleType : System.IEquatable<Azure.ResourceManager.Network.Models.WebApplicationFirewallRuleType>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public WebApplicationFirewallRuleType(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.WebApplicationFirewallRuleType Invalid { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.WebApplicationFirewallRuleType MatchRule { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.WebApplicationFirewallRuleType other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.WebApplicationFirewallRuleType left, Azure.ResourceManager.Network.Models.WebApplicationFirewallRuleType right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.WebApplicationFirewallRuleType (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.WebApplicationFirewallRuleType left, Azure.ResourceManager.Network.Models.WebApplicationFirewallRuleType right) { throw null; }
        public override string ToString() { throw null; }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public readonly partial struct WebApplicationFirewallTransform : System.IEquatable<Azure.ResourceManager.Network.Models.WebApplicationFirewallTransform>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public WebApplicationFirewallTransform(string value) { throw null; }
        public static Azure.ResourceManager.Network.Models.WebApplicationFirewallTransform HtmlEntityDecode { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.WebApplicationFirewallTransform Lowercase { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.WebApplicationFirewallTransform RemoveNulls { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.WebApplicationFirewallTransform Trim { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.WebApplicationFirewallTransform UrlDecode { get { throw null; } }
        public static Azure.ResourceManager.Network.Models.WebApplicationFirewallTransform UrlEncode { get { throw null; } }
        public bool Equals(Azure.ResourceManager.Network.Models.WebApplicationFirewallTransform other) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Azure.ResourceManager.Network.Models.WebApplicationFirewallTransform left, Azure.ResourceManager.Network.Models.WebApplicationFirewallTransform right) { throw null; }
        public static implicit operator Azure.ResourceManager.Network.Models.WebApplicationFirewallTransform (string value) { throw null; }
        public static bool operator !=(Azure.ResourceManager.Network.Models.WebApplicationFirewallTransform left, Azure.ResourceManager.Network.Models.WebApplicationFirewallTransform right) { throw null; }
        public override string ToString() { throw null; }
    }
}
