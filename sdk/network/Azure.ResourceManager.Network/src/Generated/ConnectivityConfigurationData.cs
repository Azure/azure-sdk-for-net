// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Network.Models;

namespace Azure.ResourceManager.Network
{
    /// <summary>
    /// A class representing the ConnectivityConfiguration data model.
    /// The network manager connectivity configuration resource
    /// </summary>
    public partial class ConnectivityConfigurationData : ResourceData
    {
        /// <summary> Initializes a new instance of <see cref="ConnectivityConfigurationData"/>. </summary>
        public ConnectivityConfigurationData()
        {
            Hubs = new ChangeTrackingList<ConnectivityHub>();
            AppliesToGroups = new ChangeTrackingList<ConnectivityGroupItem>();
        }

        /// <summary> Initializes a new instance of <see cref="ConnectivityConfigurationData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="description"> A description of the connectivity configuration. </param>
        /// <param name="connectivityTopology"> Connectivity topology type. </param>
        /// <param name="hubs"> List of hubItems. </param>
        /// <param name="isGlobal"> Flag if global mesh is supported. </param>
        /// <param name="appliesToGroups"> Groups for configuration. </param>
        /// <param name="provisioningState"> The provisioning state of the connectivity configuration resource. </param>
        /// <param name="deleteExistingPeering"> Flag if need to remove current existing peerings. </param>
        /// <param name="resourceGuid"> Unique identifier for this resource. </param>
        /// <param name="etag"> A unique read-only string that changes whenever the resource is updated. </param>
        internal ConnectivityConfigurationData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, string description, ConnectivityTopology? connectivityTopology, IList<ConnectivityHub> hubs, GlobalMeshSupportFlag? isGlobal, IList<ConnectivityGroupItem> appliesToGroups, NetworkProvisioningState? provisioningState, DeleteExistingPeering? deleteExistingPeering, Guid? resourceGuid, ETag? etag) : base(id, name, resourceType, systemData)
        {
            Description = description;
            ConnectivityTopology = connectivityTopology;
            Hubs = hubs;
            IsGlobal = isGlobal;
            AppliesToGroups = appliesToGroups;
            ProvisioningState = provisioningState;
            DeleteExistingPeering = deleteExistingPeering;
            ResourceGuid = resourceGuid;
            ETag = etag;
        }

        /// <summary> A description of the connectivity configuration. </summary>
        public string Description { get; set; }
        /// <summary> Connectivity topology type. </summary>
        public ConnectivityTopology? ConnectivityTopology { get; set; }
        /// <summary> List of hubItems. </summary>
        public IList<ConnectivityHub> Hubs { get; }
        /// <summary> Flag if global mesh is supported. </summary>
        public GlobalMeshSupportFlag? IsGlobal { get; set; }
        /// <summary> Groups for configuration. </summary>
        public IList<ConnectivityGroupItem> AppliesToGroups { get; }
        /// <summary> The provisioning state of the connectivity configuration resource. </summary>
        public NetworkProvisioningState? ProvisioningState { get; }
        /// <summary> Flag if need to remove current existing peerings. </summary>
        public DeleteExistingPeering? DeleteExistingPeering { get; set; }
        /// <summary> Unique identifier for this resource. </summary>
        public Guid? ResourceGuid { get; }
        /// <summary> A unique read-only string that changes whenever the resource is updated. </summary>
        public ETag? ETag { get; }
    }
}
