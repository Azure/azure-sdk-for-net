// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Core;
using Azure.ResourceManager.Network.Models;
using Azure.ResourceManager.Resources.Models;

namespace Azure.ResourceManager.Network
{
    /// <summary> A class representing the operations that can be performed over a specific P2SVpnGateway. </summary>
    public partial class P2SVpnGatewayOperations : ResourceOperations
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private P2SVpnGatewaysRestOperations _restClient { get; }

        /// <summary> Initializes a new instance of the <see cref="P2SVpnGatewayOperations"/> class for mocking. </summary>
        protected P2SVpnGatewayOperations()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="P2SVpnGatewayOperations"/> class. </summary>
        /// <param name="options"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        protected internal P2SVpnGatewayOperations(ResourceOperations options, ResourceIdentifier id) : base(options, id)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _restClient = new P2SVpnGatewaysRestOperations(_clientDiagnostics, Pipeline, Id.SubscriptionId, BaseUri);
        }

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.Network/p2svpnGateways";
        /// <summary> Gets the valid resource type for the operations. </summary>
        protected override ResourceType ValidResourceType => ResourceType;

        /// <summary> Retrieves the details of a virtual wan p2s vpn gateway. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<P2SVpnGateway>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("P2SVpnGatewayOperations.Get");
            scope.Start();
            try
            {
                var response = await _restClient.GetAsync(Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new P2SVpnGateway(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Retrieves the details of a virtual wan p2s vpn gateway. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<P2SVpnGateway> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("P2SVpnGatewayOperations.Get");
            scope.Start();
            try
            {
                var response = _restClient.Get(Id.ResourceGroupName, Id.Name, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new P2SVpnGateway(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists all available geo-locations. </summary>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        /// <returns> A collection of locations that may take multiple service requests to iterate over. </returns>
        public async virtual Task<IEnumerable<Location>> GetAvailableLocationsAsync(CancellationToken cancellationToken = default)
        {
            return await ListAvailableLocationsAsync(ResourceType, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Lists all available geo-locations. </summary>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        /// <returns> A collection of locations that may take multiple service requests to iterate over. </returns>
        public virtual IEnumerable<Location> GetAvailableLocations(CancellationToken cancellationToken = default)
        {
            return ListAvailableLocations(ResourceType, cancellationToken);
        }

        /// <summary> Deletes a virtual wan p2s vpn gateway. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response> DeleteAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("P2SVpnGatewayOperations.Delete");
            scope.Start();
            try
            {
                var operation = await StartDeleteAsync(cancellationToken).ConfigureAwait(false);
                return await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a virtual wan p2s vpn gateway. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response Delete(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("P2SVpnGatewayOperations.Delete");
            scope.Start();
            try
            {
                var operation = StartDelete(cancellationToken);
                return operation.WaitForCompletion(cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a virtual wan p2s vpn gateway. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<P2SVpnGatewaysDeleteOperation> StartDeleteAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("P2SVpnGatewayOperations.StartDelete");
            scope.Start();
            try
            {
                var response = await _restClient.DeleteAsync(Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                return new P2SVpnGatewaysDeleteOperation(_clientDiagnostics, Pipeline, _restClient.CreateDeleteRequest(Id.ResourceGroupName, Id.Name).Request, response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a virtual wan p2s vpn gateway. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual P2SVpnGatewaysDeleteOperation StartDelete(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("P2SVpnGatewayOperations.StartDelete");
            scope.Start();
            try
            {
                var response = _restClient.Delete(Id.ResourceGroupName, Id.Name, cancellationToken);
                return new P2SVpnGatewaysDeleteOperation(_clientDiagnostics, Pipeline, _restClient.CreateDeleteRequest(Id.ResourceGroupName, Id.Name).Request, response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates virtual wan p2s vpn gateway tags. </summary>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<P2SVpnGateway>> UpdateTagsAsync(IDictionary<string, string> tags = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("P2SVpnGatewayOperations.UpdateTags");
            scope.Start();
            try
            {
                var operation = await StartUpdateTagsAsync(tags, cancellationToken).ConfigureAwait(false);
                return await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates virtual wan p2s vpn gateway tags. </summary>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<P2SVpnGateway> UpdateTags(IDictionary<string, string> tags = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("P2SVpnGatewayOperations.UpdateTags");
            scope.Start();
            try
            {
                var operation = StartUpdateTags(tags, cancellationToken);
                return operation.WaitForCompletion(cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates virtual wan p2s vpn gateway tags. </summary>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<P2SVpnGatewaysUpdateTagsOperation> StartUpdateTagsAsync(IDictionary<string, string> tags = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("P2SVpnGatewayOperations.StartUpdateTags");
            scope.Start();
            try
            {
                var response = await _restClient.UpdateTagsAsync(Id.ResourceGroupName, Id.Name, tags, cancellationToken).ConfigureAwait(false);
                return new P2SVpnGatewaysUpdateTagsOperation(this, _clientDiagnostics, Pipeline, _restClient.CreateUpdateTagsRequest(Id.ResourceGroupName, Id.Name, tags).Request, response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates virtual wan p2s vpn gateway tags. </summary>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual P2SVpnGatewaysUpdateTagsOperation StartUpdateTags(IDictionary<string, string> tags = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("P2SVpnGatewayOperations.StartUpdateTags");
            scope.Start();
            try
            {
                var response = _restClient.UpdateTags(Id.ResourceGroupName, Id.Name, tags, cancellationToken);
                return new P2SVpnGatewaysUpdateTagsOperation(this, _clientDiagnostics, Pipeline, _restClient.CreateUpdateTagsRequest(Id.ResourceGroupName, Id.Name, tags).Request, response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Resets the primary of the p2s vpn gateway in the specified resource group. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<P2SVpnGatewayData>> ResetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("P2SVpnGatewayOperations.Reset");
            scope.Start();
            try
            {
                var operation = await StartResetAsync(cancellationToken).ConfigureAwait(false);
                return await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Resets the primary of the p2s vpn gateway in the specified resource group. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<P2SVpnGatewayData> Reset(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("P2SVpnGatewayOperations.Reset");
            scope.Start();
            try
            {
                var operation = StartReset(cancellationToken);
                return operation.WaitForCompletion(cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Resets the primary of the p2s vpn gateway in the specified resource group. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<P2SVpnGatewaysResetOperation> StartResetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("P2SVpnGatewayOperations.StartReset");
            scope.Start();
            try
            {
                var response = await _restClient.ResetAsync(Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                return new P2SVpnGatewaysResetOperation(_clientDiagnostics, Pipeline, _restClient.CreateResetRequest(Id.ResourceGroupName, Id.Name).Request, response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Resets the primary of the p2s vpn gateway in the specified resource group. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual P2SVpnGatewaysResetOperation StartReset(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("P2SVpnGatewayOperations.StartReset");
            scope.Start();
            try
            {
                var response = _restClient.Reset(Id.ResourceGroupName, Id.Name, cancellationToken);
                return new P2SVpnGatewaysResetOperation(_clientDiagnostics, Pipeline, _restClient.CreateResetRequest(Id.ResourceGroupName, Id.Name).Request, response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Generates VPN profile for P2S client of the P2SVpnGateway in the specified resource group. </summary>
        /// <param name="authenticationMethod"> VPN client authentication method. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<VpnProfileResponse>> GenerateVpnProfileAsync(AuthenticationMethod? authenticationMethod = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("P2SVpnGatewayOperations.GenerateVpnProfile");
            scope.Start();
            try
            {
                var operation = await StartGenerateVpnProfileAsync(authenticationMethod, cancellationToken).ConfigureAwait(false);
                return await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Generates VPN profile for P2S client of the P2SVpnGateway in the specified resource group. </summary>
        /// <param name="authenticationMethod"> VPN client authentication method. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<VpnProfileResponse> GenerateVpnProfile(AuthenticationMethod? authenticationMethod = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("P2SVpnGatewayOperations.GenerateVpnProfile");
            scope.Start();
            try
            {
                var operation = StartGenerateVpnProfile(authenticationMethod, cancellationToken);
                return operation.WaitForCompletion(cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Generates VPN profile for P2S client of the P2SVpnGateway in the specified resource group. </summary>
        /// <param name="authenticationMethod"> VPN client authentication method. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<P2SVpnGatewaysGenerateVpnProfileOperation> StartGenerateVpnProfileAsync(AuthenticationMethod? authenticationMethod = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("P2SVpnGatewayOperations.StartGenerateVpnProfile");
            scope.Start();
            try
            {
                var response = await _restClient.GenerateVpnProfileAsync(Id.ResourceGroupName, Id.Name, authenticationMethod, cancellationToken).ConfigureAwait(false);
                return new P2SVpnGatewaysGenerateVpnProfileOperation(_clientDiagnostics, Pipeline, _restClient.CreateGenerateVpnProfileRequest(Id.ResourceGroupName, Id.Name, authenticationMethod).Request, response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Generates VPN profile for P2S client of the P2SVpnGateway in the specified resource group. </summary>
        /// <param name="authenticationMethod"> VPN client authentication method. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual P2SVpnGatewaysGenerateVpnProfileOperation StartGenerateVpnProfile(AuthenticationMethod? authenticationMethod = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("P2SVpnGatewayOperations.StartGenerateVpnProfile");
            scope.Start();
            try
            {
                var response = _restClient.GenerateVpnProfile(Id.ResourceGroupName, Id.Name, authenticationMethod, cancellationToken);
                return new P2SVpnGatewaysGenerateVpnProfileOperation(_clientDiagnostics, Pipeline, _restClient.CreateGenerateVpnProfileRequest(Id.ResourceGroupName, Id.Name, authenticationMethod).Request, response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the connection health of P2S clients of the virtual wan P2SVpnGateway in the specified resource group. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<P2SVpnGatewayData>> GetP2SVpnConnectionHealthAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("P2SVpnGatewayOperations.GetP2SVpnConnectionHealth");
            scope.Start();
            try
            {
                var operation = await StartGetP2SVpnConnectionHealthAsync(cancellationToken).ConfigureAwait(false);
                return await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the connection health of P2S clients of the virtual wan P2SVpnGateway in the specified resource group. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<P2SVpnGatewayData> GetP2SVpnConnectionHealth(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("P2SVpnGatewayOperations.GetP2SVpnConnectionHealth");
            scope.Start();
            try
            {
                var operation = StartGetP2SVpnConnectionHealth(cancellationToken);
                return operation.WaitForCompletion(cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the connection health of P2S clients of the virtual wan P2SVpnGateway in the specified resource group. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<P2SVpnGatewaysGetP2SVpnConnectionHealthOperation> StartGetP2SVpnConnectionHealthAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("P2SVpnGatewayOperations.StartGetP2SVpnConnectionHealth");
            scope.Start();
            try
            {
                var response = await _restClient.GetP2SVpnConnectionHealthAsync(Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                return new P2SVpnGatewaysGetP2SVpnConnectionHealthOperation(_clientDiagnostics, Pipeline, _restClient.CreateGetP2SVpnConnectionHealthRequest(Id.ResourceGroupName, Id.Name).Request, response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the connection health of P2S clients of the virtual wan P2SVpnGateway in the specified resource group. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual P2SVpnGatewaysGetP2SVpnConnectionHealthOperation StartGetP2SVpnConnectionHealth(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("P2SVpnGatewayOperations.StartGetP2SVpnConnectionHealth");
            scope.Start();
            try
            {
                var response = _restClient.GetP2SVpnConnectionHealth(Id.ResourceGroupName, Id.Name, cancellationToken);
                return new P2SVpnGatewaysGetP2SVpnConnectionHealthOperation(_clientDiagnostics, Pipeline, _restClient.CreateGetP2SVpnConnectionHealthRequest(Id.ResourceGroupName, Id.Name).Request, response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the sas url to get the connection health detail of P2S clients of the virtual wan P2SVpnGateway in the specified resource group. </summary>
        /// <param name="vpnUserNamesFilter"> The list of p2s vpn user names whose p2s vpn connection detailed health to retrieve for. </param>
        /// <param name="outputBlobSasUrl"> The sas-url to download the P2S Vpn connection health detail. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<P2SVpnConnectionHealth>> GetP2SVpnConnectionHealthDetailedAsync(IEnumerable<string> vpnUserNamesFilter = null, string outputBlobSasUrl = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("P2SVpnGatewayOperations.GetP2SVpnConnectionHealthDetailed");
            scope.Start();
            try
            {
                var operation = await StartGetP2SVpnConnectionHealthDetailedAsync(vpnUserNamesFilter, outputBlobSasUrl, cancellationToken).ConfigureAwait(false);
                return await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the sas url to get the connection health detail of P2S clients of the virtual wan P2SVpnGateway in the specified resource group. </summary>
        /// <param name="vpnUserNamesFilter"> The list of p2s vpn user names whose p2s vpn connection detailed health to retrieve for. </param>
        /// <param name="outputBlobSasUrl"> The sas-url to download the P2S Vpn connection health detail. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<P2SVpnConnectionHealth> GetP2SVpnConnectionHealthDetailed(IEnumerable<string> vpnUserNamesFilter = null, string outputBlobSasUrl = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("P2SVpnGatewayOperations.GetP2SVpnConnectionHealthDetailed");
            scope.Start();
            try
            {
                var operation = StartGetP2SVpnConnectionHealthDetailed(vpnUserNamesFilter, outputBlobSasUrl, cancellationToken);
                return operation.WaitForCompletion(cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the sas url to get the connection health detail of P2S clients of the virtual wan P2SVpnGateway in the specified resource group. </summary>
        /// <param name="vpnUserNamesFilter"> The list of p2s vpn user names whose p2s vpn connection detailed health to retrieve for. </param>
        /// <param name="outputBlobSasUrl"> The sas-url to download the P2S Vpn connection health detail. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<P2SVpnGatewaysGetP2SVpnConnectionHealthDetailedOperation> StartGetP2SVpnConnectionHealthDetailedAsync(IEnumerable<string> vpnUserNamesFilter = null, string outputBlobSasUrl = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("P2SVpnGatewayOperations.StartGetP2SVpnConnectionHealthDetailed");
            scope.Start();
            try
            {
                var response = await _restClient.GetP2SVpnConnectionHealthDetailedAsync(Id.ResourceGroupName, Id.Name, vpnUserNamesFilter, outputBlobSasUrl, cancellationToken).ConfigureAwait(false);
                return new P2SVpnGatewaysGetP2SVpnConnectionHealthDetailedOperation(_clientDiagnostics, Pipeline, _restClient.CreateGetP2SVpnConnectionHealthDetailedRequest(Id.ResourceGroupName, Id.Name, vpnUserNamesFilter, outputBlobSasUrl).Request, response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the sas url to get the connection health detail of P2S clients of the virtual wan P2SVpnGateway in the specified resource group. </summary>
        /// <param name="vpnUserNamesFilter"> The list of p2s vpn user names whose p2s vpn connection detailed health to retrieve for. </param>
        /// <param name="outputBlobSasUrl"> The sas-url to download the P2S Vpn connection health detail. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual P2SVpnGatewaysGetP2SVpnConnectionHealthDetailedOperation StartGetP2SVpnConnectionHealthDetailed(IEnumerable<string> vpnUserNamesFilter = null, string outputBlobSasUrl = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("P2SVpnGatewayOperations.StartGetP2SVpnConnectionHealthDetailed");
            scope.Start();
            try
            {
                var response = _restClient.GetP2SVpnConnectionHealthDetailed(Id.ResourceGroupName, Id.Name, vpnUserNamesFilter, outputBlobSasUrl, cancellationToken);
                return new P2SVpnGatewaysGetP2SVpnConnectionHealthDetailedOperation(_clientDiagnostics, Pipeline, _restClient.CreateGetP2SVpnConnectionHealthDetailedRequest(Id.ResourceGroupName, Id.Name, vpnUserNamesFilter, outputBlobSasUrl).Request, response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Disconnect P2S vpn connections of the virtual wan P2SVpnGateway in the specified resource group. </summary>
        /// <param name="vpnConnectionIds"> List of p2s vpn connection Ids. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response> DisconnectP2SVpnConnectionsAsync(IEnumerable<string> vpnConnectionIds = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("P2SVpnGatewayOperations.DisconnectP2SVpnConnections");
            scope.Start();
            try
            {
                var operation = await StartDisconnectP2SVpnConnectionsAsync(vpnConnectionIds, cancellationToken).ConfigureAwait(false);
                return await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Disconnect P2S vpn connections of the virtual wan P2SVpnGateway in the specified resource group. </summary>
        /// <param name="vpnConnectionIds"> List of p2s vpn connection Ids. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DisconnectP2SVpnConnections(IEnumerable<string> vpnConnectionIds = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("P2SVpnGatewayOperations.DisconnectP2SVpnConnections");
            scope.Start();
            try
            {
                var operation = StartDisconnectP2SVpnConnections(vpnConnectionIds, cancellationToken);
                return operation.WaitForCompletion(cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Disconnect P2S vpn connections of the virtual wan P2SVpnGateway in the specified resource group. </summary>
        /// <param name="vpnConnectionIds"> List of p2s vpn connection Ids. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<P2SVpnGatewaysDisconnectP2SVpnConnectionsOperation> StartDisconnectP2SVpnConnectionsAsync(IEnumerable<string> vpnConnectionIds = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("P2SVpnGatewayOperations.StartDisconnectP2SVpnConnections");
            scope.Start();
            try
            {
                var response = await _restClient.DisconnectP2SVpnConnectionsAsync(Id.ResourceGroupName, Id.Name, vpnConnectionIds, cancellationToken).ConfigureAwait(false);
                return new P2SVpnGatewaysDisconnectP2SVpnConnectionsOperation(_clientDiagnostics, Pipeline, _restClient.CreateDisconnectP2SVpnConnectionsRequest(Id.ResourceGroupName, Id.Name, vpnConnectionIds).Request, response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Disconnect P2S vpn connections of the virtual wan P2SVpnGateway in the specified resource group. </summary>
        /// <param name="vpnConnectionIds"> List of p2s vpn connection Ids. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual P2SVpnGatewaysDisconnectP2SVpnConnectionsOperation StartDisconnectP2SVpnConnections(IEnumerable<string> vpnConnectionIds = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("P2SVpnGatewayOperations.StartDisconnectP2SVpnConnections");
            scope.Start();
            try
            {
                var response = _restClient.DisconnectP2SVpnConnections(Id.ResourceGroupName, Id.Name, vpnConnectionIds, cancellationToken);
                return new P2SVpnGatewaysDisconnectP2SVpnConnectionsOperation(_clientDiagnostics, Pipeline, _restClient.CreateDisconnectP2SVpnConnectionsRequest(Id.ResourceGroupName, Id.Name, vpnConnectionIds).Request, response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
