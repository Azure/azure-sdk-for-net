// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.Network
{
    /// <summary>
    /// A class representing a collection of <see cref="ApplicationGatewayWafDynamicManifestResultResource" /> and their operations.
    /// Each <see cref="ApplicationGatewayWafDynamicManifestResultResource" /> in the collection will belong to the same instance of <see cref="SubscriptionResource" />.
    /// To get an <see cref="ApplicationGatewayWafDynamicManifestResultCollection" /> instance call the GetApplicationGatewayWafDynamicManifestResults method from an instance of <see cref="SubscriptionResource" />.
    /// </summary>
    public partial class ApplicationGatewayWafDynamicManifestResultCollection : ArmCollection, IEnumerable<ApplicationGatewayWafDynamicManifestResultResource>, IAsyncEnumerable<ApplicationGatewayWafDynamicManifestResultResource>
    {
        private readonly ClientDiagnostics _applicationGatewayWafDynamicManifestResultApplicationGatewayWafDynamicManifestsDefaultClientDiagnostics;
        private readonly ApplicationGatewayWafDynamicManifestsDefaultRestOperations _applicationGatewayWafDynamicManifestResultApplicationGatewayWafDynamicManifestsDefaultRestClient;
        private readonly ClientDiagnostics _applicationGatewayWafDynamicManifestResultApplicationGatewayWafDynamicManifestsClientDiagnostics;
        private readonly ApplicationGatewayWafDynamicManifestsRestOperations _applicationGatewayWafDynamicManifestResultApplicationGatewayWafDynamicManifestsRestClient;
        private readonly AzureLocation _location;

        /// <summary> Initializes a new instance of the <see cref="ApplicationGatewayWafDynamicManifestResultCollection"/> class for mocking. </summary>
        protected ApplicationGatewayWafDynamicManifestResultCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="ApplicationGatewayWafDynamicManifestResultCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        /// <param name="location"> The region where the nrp are located at. </param>
        internal ApplicationGatewayWafDynamicManifestResultCollection(ArmClient client, ResourceIdentifier id, AzureLocation location) : base(client, id)
        {
            _location = location;
            _applicationGatewayWafDynamicManifestResultApplicationGatewayWafDynamicManifestsDefaultClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Network", ApplicationGatewayWafDynamicManifestResultResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ApplicationGatewayWafDynamicManifestResultResource.ResourceType, out string applicationGatewayWafDynamicManifestResultApplicationGatewayWafDynamicManifestsDefaultApiVersion);
            _applicationGatewayWafDynamicManifestResultApplicationGatewayWafDynamicManifestsDefaultRestClient = new ApplicationGatewayWafDynamicManifestsDefaultRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, applicationGatewayWafDynamicManifestResultApplicationGatewayWafDynamicManifestsDefaultApiVersion);
            _applicationGatewayWafDynamicManifestResultApplicationGatewayWafDynamicManifestsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Network", ApplicationGatewayWafDynamicManifestResultResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ApplicationGatewayWafDynamicManifestResultResource.ResourceType, out string applicationGatewayWafDynamicManifestResultApplicationGatewayWafDynamicManifestsApiVersion);
            _applicationGatewayWafDynamicManifestResultApplicationGatewayWafDynamicManifestsRestClient = new ApplicationGatewayWafDynamicManifestsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, applicationGatewayWafDynamicManifestResultApplicationGatewayWafDynamicManifestsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != SubscriptionResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, SubscriptionResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Gets the regional application gateway waf manifest.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Network/locations/{location}/applicationGatewayWafDynamicManifests/dafault</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ApplicationGatewayWafDynamicManifestsDefault_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ApplicationGatewayWafDynamicManifestResultResource>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _applicationGatewayWafDynamicManifestResultApplicationGatewayWafDynamicManifestsDefaultClientDiagnostics.CreateScope("ApplicationGatewayWafDynamicManifestResultCollection.Get");
            scope.Start();
            try
            {
                var response = await _applicationGatewayWafDynamicManifestResultApplicationGatewayWafDynamicManifestsDefaultRestClient.GetAsync(Id.SubscriptionId, new AzureLocation(_location), cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ApplicationGatewayWafDynamicManifestResultResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets the regional application gateway waf manifest.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Network/locations/{location}/applicationGatewayWafDynamicManifests/dafault</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ApplicationGatewayWafDynamicManifestsDefault_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ApplicationGatewayWafDynamicManifestResultResource> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _applicationGatewayWafDynamicManifestResultApplicationGatewayWafDynamicManifestsDefaultClientDiagnostics.CreateScope("ApplicationGatewayWafDynamicManifestResultCollection.Get");
            scope.Start();
            try
            {
                var response = _applicationGatewayWafDynamicManifestResultApplicationGatewayWafDynamicManifestsDefaultRestClient.Get(Id.SubscriptionId, new AzureLocation(_location), cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ApplicationGatewayWafDynamicManifestResultResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets the regional application gateway waf manifest.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Network/locations/{location}/applicationGatewayWafDynamicManifests</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ApplicationGatewayWafDynamicManifests_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ApplicationGatewayWafDynamicManifestResultResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ApplicationGatewayWafDynamicManifestResultResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _applicationGatewayWafDynamicManifestResultApplicationGatewayWafDynamicManifestsRestClient.CreateGetRequest(Id.SubscriptionId, new AzureLocation(_location));
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _applicationGatewayWafDynamicManifestResultApplicationGatewayWafDynamicManifestsRestClient.CreateGetNextPageRequest(nextLink, Id.SubscriptionId, new AzureLocation(_location));
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new ApplicationGatewayWafDynamicManifestResultResource(Client, ApplicationGatewayWafDynamicManifestResultData.DeserializeApplicationGatewayWafDynamicManifestResultData(e)), _applicationGatewayWafDynamicManifestResultApplicationGatewayWafDynamicManifestsClientDiagnostics, Pipeline, "ApplicationGatewayWafDynamicManifestResultCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Gets the regional application gateway waf manifest.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Network/locations/{location}/applicationGatewayWafDynamicManifests</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ApplicationGatewayWafDynamicManifests_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ApplicationGatewayWafDynamicManifestResultResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ApplicationGatewayWafDynamicManifestResultResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _applicationGatewayWafDynamicManifestResultApplicationGatewayWafDynamicManifestsRestClient.CreateGetRequest(Id.SubscriptionId, new AzureLocation(_location));
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _applicationGatewayWafDynamicManifestResultApplicationGatewayWafDynamicManifestsRestClient.CreateGetNextPageRequest(nextLink, Id.SubscriptionId, new AzureLocation(_location));
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new ApplicationGatewayWafDynamicManifestResultResource(Client, ApplicationGatewayWafDynamicManifestResultData.DeserializeApplicationGatewayWafDynamicManifestResultData(e)), _applicationGatewayWafDynamicManifestResultApplicationGatewayWafDynamicManifestsClientDiagnostics, Pipeline, "ApplicationGatewayWafDynamicManifestResultCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Network/locations/{location}/applicationGatewayWafDynamicManifests/dafault</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ApplicationGatewayWafDynamicManifestsDefault_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<bool>> ExistsAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _applicationGatewayWafDynamicManifestResultApplicationGatewayWafDynamicManifestsDefaultClientDiagnostics.CreateScope("ApplicationGatewayWafDynamicManifestResultCollection.Exists");
            scope.Start();
            try
            {
                var response = await _applicationGatewayWafDynamicManifestResultApplicationGatewayWafDynamicManifestsDefaultRestClient.GetAsync(Id.SubscriptionId, new AzureLocation(_location), cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Network/locations/{location}/applicationGatewayWafDynamicManifests/dafault</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ApplicationGatewayWafDynamicManifestsDefault_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<bool> Exists(CancellationToken cancellationToken = default)
        {
            using var scope = _applicationGatewayWafDynamicManifestResultApplicationGatewayWafDynamicManifestsDefaultClientDiagnostics.CreateScope("ApplicationGatewayWafDynamicManifestResultCollection.Exists");
            scope.Start();
            try
            {
                var response = _applicationGatewayWafDynamicManifestResultApplicationGatewayWafDynamicManifestsDefaultRestClient.Get(Id.SubscriptionId, new AzureLocation(_location), cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<ApplicationGatewayWafDynamicManifestResultResource> IEnumerable<ApplicationGatewayWafDynamicManifestResultResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<ApplicationGatewayWafDynamicManifestResultResource> IAsyncEnumerable<ApplicationGatewayWafDynamicManifestResultResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
