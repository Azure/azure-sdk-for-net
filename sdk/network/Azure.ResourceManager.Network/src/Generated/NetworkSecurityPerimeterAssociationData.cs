// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Network.Models;
using Azure.ResourceManager.Resources.Models;

namespace Azure.ResourceManager.Network
{
    /// <summary>
    /// A class representing the NetworkSecurityPerimeterAssociation data model.
    /// The NSP resource association resource
    /// </summary>
    public partial class NetworkSecurityPerimeterAssociationData : TrackedResourceData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="NetworkSecurityPerimeterAssociationData"/>. </summary>
        /// <param name="location"> The location. </param>
        public NetworkSecurityPerimeterAssociationData(AzureLocation location) : base(location)
        {
        }

        /// <summary> Initializes a new instance of <see cref="NetworkSecurityPerimeterAssociationData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="provisioningState"> The provisioning state of the resource  association resource. </param>
        /// <param name="privateLinkResource"> The PaaS resource to be associated. </param>
        /// <param name="profile"> Profile id to which the PaaS resource is associated. </param>
        /// <param name="accessMode"> Access mode on the association. </param>
        /// <param name="hasProvisioningIssues"> Specifies if there are provisioning issues. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal NetworkSecurityPerimeterAssociationData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, IDictionary<string, string> tags, AzureLocation location, NetworkSecurityPerimeterProvisioningState? provisioningState, WritableSubResource privateLinkResource, WritableSubResource profile, NetworkSecurityPerimeterAssociationAccessMode? accessMode, string hasProvisioningIssues, IDictionary<string, BinaryData> serializedAdditionalRawData) : base(id, name, resourceType, systemData, tags, location)
        {
            ProvisioningState = provisioningState;
            PrivateLinkResource = privateLinkResource;
            Profile = profile;
            AccessMode = accessMode;
            HasProvisioningIssues = hasProvisioningIssues;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="NetworkSecurityPerimeterAssociationData"/> for deserialization. </summary>
        internal NetworkSecurityPerimeterAssociationData()
        {
        }

        /// <summary> The provisioning state of the resource  association resource. </summary>
        public NetworkSecurityPerimeterProvisioningState? ProvisioningState { get; }
        /// <summary> The PaaS resource to be associated. </summary>
        internal WritableSubResource PrivateLinkResource { get; set; }
        /// <summary> Gets or sets Id. </summary>
        public ResourceIdentifier PrivateLinkResourceId
        {
            get => PrivateLinkResource is null ? default : PrivateLinkResource.Id;
            set
            {
                if (PrivateLinkResource is null)
                    PrivateLinkResource = new WritableSubResource();
                PrivateLinkResource.Id = value;
            }
        }

        /// <summary> Profile id to which the PaaS resource is associated. </summary>
        internal WritableSubResource Profile { get; set; }
        /// <summary> Gets or sets Id. </summary>
        public ResourceIdentifier ProfileId
        {
            get => Profile is null ? default : Profile.Id;
            set
            {
                if (Profile is null)
                    Profile = new WritableSubResource();
                Profile.Id = value;
            }
        }

        /// <summary> Access mode on the association. </summary>
        public NetworkSecurityPerimeterAssociationAccessMode? AccessMode { get; set; }
        /// <summary> Specifies if there are provisioning issues. </summary>
        public string HasProvisioningIssues { get; }
    }
}
