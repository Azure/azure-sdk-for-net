// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.ResourceManager.Network
{
    /// <summary>
    /// A class representing a collection of <see cref="StaticCidrResource"/> and their operations.
    /// Each <see cref="StaticCidrResource"/> in the collection will belong to the same instance of <see cref="IpamPoolResource"/>.
    /// To get a <see cref="StaticCidrCollection"/> instance call the GetStaticCidrs method from an instance of <see cref="IpamPoolResource"/>.
    /// </summary>
    public partial class StaticCidrCollection : ArmCollection, IEnumerable<StaticCidrResource>, IAsyncEnumerable<StaticCidrResource>
    {
        private readonly ClientDiagnostics _staticCidrClientDiagnostics;
        private readonly StaticCidrsRestOperations _staticCidrRestClient;

        /// <summary> Initializes a new instance of the <see cref="StaticCidrCollection"/> class for mocking. </summary>
        protected StaticCidrCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="StaticCidrCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal StaticCidrCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _staticCidrClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Network", StaticCidrResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(StaticCidrResource.ResourceType, out string staticCidrApiVersion);
            _staticCidrRestClient = new StaticCidrsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, staticCidrApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != IpamPoolResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, IpamPoolResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Creates/Updates the Static CIDR resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkManagers/{networkManagerName}/ipamPools/{poolName}/staticCidrs/{staticCidrName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>StaticCidrs_Create</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-01-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="StaticCidrResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="staticCidrName"> Static Cidr allocation name. </param>
        /// <param name="data"> StaticCidr resource object to create/update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="staticCidrName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="staticCidrName"/> or <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<StaticCidrResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string staticCidrName, StaticCidrData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(staticCidrName, nameof(staticCidrName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _staticCidrClientDiagnostics.CreateScope("StaticCidrCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _staticCidrRestClient.CreateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, staticCidrName, data, cancellationToken).ConfigureAwait(false);
                var uri = _staticCidrRestClient.CreateCreateRequestUri(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, staticCidrName, data);
                var rehydrationToken = NextLinkOperationImplementation.GetRehydrationToken(RequestMethod.Put, uri.ToUri(), uri.ToString(), "None", null, OperationFinalStateVia.OriginalUri.ToString());
                var operation = new NetworkArmOperation<StaticCidrResource>(Response.FromValue(new StaticCidrResource(Client, response), response.GetRawResponse()), rehydrationToken);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Creates/Updates the Static CIDR resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkManagers/{networkManagerName}/ipamPools/{poolName}/staticCidrs/{staticCidrName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>StaticCidrs_Create</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-01-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="StaticCidrResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="staticCidrName"> Static Cidr allocation name. </param>
        /// <param name="data"> StaticCidr resource object to create/update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="staticCidrName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="staticCidrName"/> or <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<StaticCidrResource> CreateOrUpdate(WaitUntil waitUntil, string staticCidrName, StaticCidrData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(staticCidrName, nameof(staticCidrName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _staticCidrClientDiagnostics.CreateScope("StaticCidrCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _staticCidrRestClient.Create(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, staticCidrName, data, cancellationToken);
                var uri = _staticCidrRestClient.CreateCreateRequestUri(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, staticCidrName, data);
                var rehydrationToken = NextLinkOperationImplementation.GetRehydrationToken(RequestMethod.Put, uri.ToUri(), uri.ToString(), "None", null, OperationFinalStateVia.OriginalUri.ToString());
                var operation = new NetworkArmOperation<StaticCidrResource>(Response.FromValue(new StaticCidrResource(Client, response), response.GetRawResponse()), rehydrationToken);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets the specific Static CIDR resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkManagers/{networkManagerName}/ipamPools/{poolName}/staticCidrs/{staticCidrName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>StaticCidrs_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-01-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="StaticCidrResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="staticCidrName"> StaticCidr resource name to retrieve. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="staticCidrName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="staticCidrName"/> is null. </exception>
        public virtual async Task<Response<StaticCidrResource>> GetAsync(string staticCidrName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(staticCidrName, nameof(staticCidrName));

            using var scope = _staticCidrClientDiagnostics.CreateScope("StaticCidrCollection.Get");
            scope.Start();
            try
            {
                var response = await _staticCidrRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, staticCidrName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new StaticCidrResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets the specific Static CIDR resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkManagers/{networkManagerName}/ipamPools/{poolName}/staticCidrs/{staticCidrName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>StaticCidrs_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-01-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="StaticCidrResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="staticCidrName"> StaticCidr resource name to retrieve. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="staticCidrName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="staticCidrName"/> is null. </exception>
        public virtual Response<StaticCidrResource> Get(string staticCidrName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(staticCidrName, nameof(staticCidrName));

            using var scope = _staticCidrClientDiagnostics.CreateScope("StaticCidrCollection.Get");
            scope.Start();
            try
            {
                var response = _staticCidrRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, staticCidrName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new StaticCidrResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets list of Static CIDR resources at Network Manager level.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkManagers/{networkManagerName}/ipamPools/{poolName}/staticCidrs</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>StaticCidrs_List</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-01-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="StaticCidrResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="skipToken"> Optional skip token. </param>
        /// <param name="skip"> Optional num entries to skip. </param>
        /// <param name="top"> Optional num entries to show. </param>
        /// <param name="sortKey"> Optional key by which to sort. </param>
        /// <param name="sortValue"> Optional sort value for pagination. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="StaticCidrResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<StaticCidrResource> GetAllAsync(string skipToken = null, int? skip = null, int? top = null, string sortKey = null, string sortValue = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _staticCidrRestClient.CreateListRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, skipToken, skip, top, sortKey, sortValue);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _staticCidrRestClient.CreateListNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, skipToken, skip, top, sortKey, sortValue);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new StaticCidrResource(Client, StaticCidrData.DeserializeStaticCidrData(e)), _staticCidrClientDiagnostics, Pipeline, "StaticCidrCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Gets list of Static CIDR resources at Network Manager level.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkManagers/{networkManagerName}/ipamPools/{poolName}/staticCidrs</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>StaticCidrs_List</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-01-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="StaticCidrResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="skipToken"> Optional skip token. </param>
        /// <param name="skip"> Optional num entries to skip. </param>
        /// <param name="top"> Optional num entries to show. </param>
        /// <param name="sortKey"> Optional key by which to sort. </param>
        /// <param name="sortValue"> Optional sort value for pagination. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="StaticCidrResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<StaticCidrResource> GetAll(string skipToken = null, int? skip = null, int? top = null, string sortKey = null, string sortValue = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _staticCidrRestClient.CreateListRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, skipToken, skip, top, sortKey, sortValue);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _staticCidrRestClient.CreateListNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, skipToken, skip, top, sortKey, sortValue);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new StaticCidrResource(Client, StaticCidrData.DeserializeStaticCidrData(e)), _staticCidrClientDiagnostics, Pipeline, "StaticCidrCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkManagers/{networkManagerName}/ipamPools/{poolName}/staticCidrs/{staticCidrName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>StaticCidrs_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-01-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="StaticCidrResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="staticCidrName"> StaticCidr resource name to retrieve. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="staticCidrName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="staticCidrName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string staticCidrName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(staticCidrName, nameof(staticCidrName));

            using var scope = _staticCidrClientDiagnostics.CreateScope("StaticCidrCollection.Exists");
            scope.Start();
            try
            {
                var response = await _staticCidrRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, staticCidrName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkManagers/{networkManagerName}/ipamPools/{poolName}/staticCidrs/{staticCidrName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>StaticCidrs_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-01-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="StaticCidrResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="staticCidrName"> StaticCidr resource name to retrieve. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="staticCidrName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="staticCidrName"/> is null. </exception>
        public virtual Response<bool> Exists(string staticCidrName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(staticCidrName, nameof(staticCidrName));

            using var scope = _staticCidrClientDiagnostics.CreateScope("StaticCidrCollection.Exists");
            scope.Start();
            try
            {
                var response = _staticCidrRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, staticCidrName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkManagers/{networkManagerName}/ipamPools/{poolName}/staticCidrs/{staticCidrName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>StaticCidrs_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-01-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="StaticCidrResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="staticCidrName"> StaticCidr resource name to retrieve. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="staticCidrName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="staticCidrName"/> is null. </exception>
        public virtual async Task<NullableResponse<StaticCidrResource>> GetIfExistsAsync(string staticCidrName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(staticCidrName, nameof(staticCidrName));

            using var scope = _staticCidrClientDiagnostics.CreateScope("StaticCidrCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _staticCidrRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, staticCidrName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<StaticCidrResource>(response.GetRawResponse());
                return Response.FromValue(new StaticCidrResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkManagers/{networkManagerName}/ipamPools/{poolName}/staticCidrs/{staticCidrName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>StaticCidrs_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-01-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="StaticCidrResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="staticCidrName"> StaticCidr resource name to retrieve. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="staticCidrName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="staticCidrName"/> is null. </exception>
        public virtual NullableResponse<StaticCidrResource> GetIfExists(string staticCidrName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(staticCidrName, nameof(staticCidrName));

            using var scope = _staticCidrClientDiagnostics.CreateScope("StaticCidrCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _staticCidrRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, staticCidrName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<StaticCidrResource>(response.GetRawResponse());
                return Response.FromValue(new StaticCidrResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<StaticCidrResource> IEnumerable<StaticCidrResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<StaticCidrResource> IAsyncEnumerable<StaticCidrResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
