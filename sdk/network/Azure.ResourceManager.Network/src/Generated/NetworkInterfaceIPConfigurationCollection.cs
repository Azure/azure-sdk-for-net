// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Core;

namespace Azure.ResourceManager.Network
{
    /// <summary> A class representing collection of NetworkInterfaceIpConfiguration and their operations over its parent. </summary>
    public partial class NetworkInterfaceIpConfigurationCollection : ArmCollection, IEnumerable<NetworkInterfaceIpConfiguration>, IAsyncEnumerable<NetworkInterfaceIpConfiguration>
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly NetworkInterfaceIPConfigurationsRestOperations _networkInterfaceIPConfigurationsRestClient;

        /// <summary> Initializes a new instance of the <see cref="NetworkInterfaceIpConfigurationCollection"/> class for mocking. </summary>
        protected NetworkInterfaceIpConfigurationCollection()
        {
        }

        /// <summary> Initializes a new instance of NetworkInterfaceIpConfigurationCollection class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal NetworkInterfaceIpConfigurationCollection(ArmResource parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _networkInterfaceIPConfigurationsRestClient = new NetworkInterfaceIPConfigurationsRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
        }

        /// <summary> Gets the valid resource type for this object. </summary>
        protected override ResourceType ValidResourceType => NetworkInterface.ResourceType;

        // Collection level operations.

        /// RequestPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}/ipConfigurations/{ipConfigurationName}
        /// ContextualPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}
        /// OperationId: NetworkInterfaceIPConfigurations_Get
        /// <summary> Gets the specified network interface ip configuration. </summary>
        /// <param name="ipConfigurationName"> The name of the ip configuration name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="ipConfigurationName"/> is null. </exception>
        public virtual Response<NetworkInterfaceIpConfiguration> Get(string ipConfigurationName, CancellationToken cancellationToken = default)
        {
            if (ipConfigurationName == null)
            {
                throw new ArgumentNullException(nameof(ipConfigurationName));
            }

            using var scope = _clientDiagnostics.CreateScope("NetworkInterfaceIpConfigurationCollection.Get");
            scope.Start();
            try
            {
                var response = _networkInterfaceIPConfigurationsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, ipConfigurationName, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new NetworkInterfaceIpConfiguration(Parent, new ResourceIdentifier(response.Value.Id), response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}/ipConfigurations/{ipConfigurationName}
        /// ContextualPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}
        /// OperationId: NetworkInterfaceIPConfigurations_Get
        /// <summary> Gets the specified network interface ip configuration. </summary>
        /// <param name="ipConfigurationName"> The name of the ip configuration name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="ipConfigurationName"/> is null. </exception>
        public async virtual Task<Response<NetworkInterfaceIpConfiguration>> GetAsync(string ipConfigurationName, CancellationToken cancellationToken = default)
        {
            if (ipConfigurationName == null)
            {
                throw new ArgumentNullException(nameof(ipConfigurationName));
            }

            using var scope = _clientDiagnostics.CreateScope("NetworkInterfaceIpConfigurationCollection.Get");
            scope.Start();
            try
            {
                var response = await _networkInterfaceIPConfigurationsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, ipConfigurationName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new NetworkInterfaceIpConfiguration(Parent, new ResourceIdentifier(response.Value.Id), response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="ipConfigurationName"> The name of the ip configuration name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="ipConfigurationName"/> is null. </exception>
        public virtual Response<NetworkInterfaceIpConfiguration> GetIfExists(string ipConfigurationName, CancellationToken cancellationToken = default)
        {
            if (ipConfigurationName == null)
            {
                throw new ArgumentNullException(nameof(ipConfigurationName));
            }

            using var scope = _clientDiagnostics.CreateScope("NetworkInterfaceIpConfigurationCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _networkInterfaceIPConfigurationsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, ipConfigurationName, cancellationToken: cancellationToken);
                return response.Value == null
                    ? Response.FromValue<NetworkInterfaceIpConfiguration>(null, response.GetRawResponse())
                    : Response.FromValue(new NetworkInterfaceIpConfiguration(this, new ResourceIdentifier(response.Value.Id), response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="ipConfigurationName"> The name of the ip configuration name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="ipConfigurationName"/> is null. </exception>
        public async virtual Task<Response<NetworkInterfaceIpConfiguration>> GetIfExistsAsync(string ipConfigurationName, CancellationToken cancellationToken = default)
        {
            if (ipConfigurationName == null)
            {
                throw new ArgumentNullException(nameof(ipConfigurationName));
            }

            using var scope = _clientDiagnostics.CreateScope("NetworkInterfaceIpConfigurationCollection.GetIfExistsAsync");
            scope.Start();
            try
            {
                var response = await _networkInterfaceIPConfigurationsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, ipConfigurationName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return response.Value == null
                    ? Response.FromValue<NetworkInterfaceIpConfiguration>(null, response.GetRawResponse())
                    : Response.FromValue(new NetworkInterfaceIpConfiguration(this, new ResourceIdentifier(response.Value.Id), response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="ipConfigurationName"> The name of the ip configuration name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="ipConfigurationName"/> is null. </exception>
        public virtual Response<bool> Exists(string ipConfigurationName, CancellationToken cancellationToken = default)
        {
            if (ipConfigurationName == null)
            {
                throw new ArgumentNullException(nameof(ipConfigurationName));
            }

            using var scope = _clientDiagnostics.CreateScope("NetworkInterfaceIpConfigurationCollection.Exists");
            scope.Start();
            try
            {
                var response = GetIfExists(ipConfigurationName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="ipConfigurationName"> The name of the ip configuration name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="ipConfigurationName"/> is null. </exception>
        public async virtual Task<Response<bool>> ExistsAsync(string ipConfigurationName, CancellationToken cancellationToken = default)
        {
            if (ipConfigurationName == null)
            {
                throw new ArgumentNullException(nameof(ipConfigurationName));
            }

            using var scope = _clientDiagnostics.CreateScope("NetworkInterfaceIpConfigurationCollection.ExistsAsync");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(ipConfigurationName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}/ipConfigurations
        /// ContextualPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}
        /// OperationId: NetworkInterfaceIPConfigurations_List
        /// <summary> Get all ip configurations in a network interface. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="NetworkInterfaceIpConfiguration" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<NetworkInterfaceIpConfiguration> GetAll(CancellationToken cancellationToken = default)
        {
            Page<NetworkInterfaceIpConfiguration> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("NetworkInterfaceIpConfigurationCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _networkInterfaceIPConfigurationsRestClient.List(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new NetworkInterfaceIpConfiguration(Parent, new ResourceIdentifier(value.Id), value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<NetworkInterfaceIpConfiguration> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("NetworkInterfaceIpConfigurationCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _networkInterfaceIPConfigurationsRestClient.ListNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new NetworkInterfaceIpConfiguration(Parent, new ResourceIdentifier(value.Id), value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}/ipConfigurations
        /// ContextualPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}
        /// OperationId: NetworkInterfaceIPConfigurations_List
        /// <summary> Get all ip configurations in a network interface. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="NetworkInterfaceIpConfiguration" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<NetworkInterfaceIpConfiguration> GetAllAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<NetworkInterfaceIpConfiguration>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("NetworkInterfaceIpConfigurationCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _networkInterfaceIPConfigurationsRestClient.ListAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new NetworkInterfaceIpConfiguration(Parent, new ResourceIdentifier(value.Id), value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<NetworkInterfaceIpConfiguration>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("NetworkInterfaceIpConfigurationCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _networkInterfaceIPConfigurationsRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new NetworkInterfaceIpConfiguration(Parent, new ResourceIdentifier(value.Id), value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        IEnumerator<NetworkInterfaceIpConfiguration> IEnumerable<NetworkInterfaceIpConfiguration>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<NetworkInterfaceIpConfiguration> IAsyncEnumerable<NetworkInterfaceIpConfiguration>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }

        // Builders.
        // public ArmBuilder<Azure.Core.ResourceIdentifier, NetworkInterfaceIpConfiguration, NetworkInterfaceIpConfigurationData> Construct() { }
    }
}
