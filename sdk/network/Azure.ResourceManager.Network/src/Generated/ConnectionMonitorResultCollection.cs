// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Network.Models;

namespace Azure.ResourceManager.Network
{
    /// <summary>
    /// A class representing a collection of <see cref="ConnectionMonitorResultResource" /> and their operations.
    /// Each <see cref="ConnectionMonitorResultResource" /> in the collection will belong to the same instance of <see cref="NetworkWatcherResource" />.
    /// To get a <see cref="ConnectionMonitorResultCollection" /> instance call the GetConnectionMonitorResults method from an instance of <see cref="NetworkWatcherResource" />.
    /// </summary>
    public partial class ConnectionMonitorResultCollection : ArmCollection, IEnumerable<ConnectionMonitorResultResource>, IAsyncEnumerable<ConnectionMonitorResultResource>
    {
        private readonly ClientDiagnostics _connectionMonitorResultConnectionMonitorsClientDiagnostics;
        private readonly ConnectionMonitorsRestOperations _connectionMonitorResultConnectionMonitorsRestClient;

        /// <summary> Initializes a new instance of the <see cref="ConnectionMonitorResultCollection"/> class for mocking. </summary>
        protected ConnectionMonitorResultCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="ConnectionMonitorResultCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal ConnectionMonitorResultCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _connectionMonitorResultConnectionMonitorsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Network", ConnectionMonitorResultResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ConnectionMonitorResultResource.ResourceType, out string connectionMonitorResultConnectionMonitorsApiVersion);
            _connectionMonitorResultConnectionMonitorsRestClient = new ConnectionMonitorsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, connectionMonitorResultConnectionMonitorsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != NetworkWatcherResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, NetworkWatcherResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Create or update a connection monitor.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/connectionMonitors/{connectionMonitorName}
        /// Operation Id: ConnectionMonitors_CreateOrUpdate
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="connectionMonitorName"> The name of the connection monitor. </param>
        /// <param name="content"> Parameters that define the operation to create a connection monitor. </param>
        /// <param name="migrate"> Value indicating whether connection monitor V1 should be migrated to V2 format. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="connectionMonitorName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="connectionMonitorName"/> or <paramref name="content"/> is null. </exception>
        public virtual async Task<ArmOperation<ConnectionMonitorResultResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string connectionMonitorName, ConnectionMonitorResultCreateOrUpdateContent content, string migrate = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(connectionMonitorName, nameof(connectionMonitorName));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = _connectionMonitorResultConnectionMonitorsClientDiagnostics.CreateScope("ConnectionMonitorResultCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _connectionMonitorResultConnectionMonitorsRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, connectionMonitorName, content, migrate, cancellationToken).ConfigureAwait(false);
                var operation = new NetworkArmOperation<ConnectionMonitorResultResource>(new ConnectionMonitorResultOperationSource(Client), _connectionMonitorResultConnectionMonitorsClientDiagnostics, Pipeline, _connectionMonitorResultConnectionMonitorsRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, connectionMonitorName, content, migrate).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create or update a connection monitor.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/connectionMonitors/{connectionMonitorName}
        /// Operation Id: ConnectionMonitors_CreateOrUpdate
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="connectionMonitorName"> The name of the connection monitor. </param>
        /// <param name="content"> Parameters that define the operation to create a connection monitor. </param>
        /// <param name="migrate"> Value indicating whether connection monitor V1 should be migrated to V2 format. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="connectionMonitorName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="connectionMonitorName"/> or <paramref name="content"/> is null. </exception>
        public virtual ArmOperation<ConnectionMonitorResultResource> CreateOrUpdate(WaitUntil waitUntil, string connectionMonitorName, ConnectionMonitorResultCreateOrUpdateContent content, string migrate = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(connectionMonitorName, nameof(connectionMonitorName));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = _connectionMonitorResultConnectionMonitorsClientDiagnostics.CreateScope("ConnectionMonitorResultCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _connectionMonitorResultConnectionMonitorsRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, connectionMonitorName, content, migrate, cancellationToken);
                var operation = new NetworkArmOperation<ConnectionMonitorResultResource>(new ConnectionMonitorResultOperationSource(Client), _connectionMonitorResultConnectionMonitorsClientDiagnostics, Pipeline, _connectionMonitorResultConnectionMonitorsRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, connectionMonitorName, content, migrate).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets a connection monitor by name.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/connectionMonitors/{connectionMonitorName}
        /// Operation Id: ConnectionMonitors_Get
        /// </summary>
        /// <param name="connectionMonitorName"> The name of the connection monitor. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="connectionMonitorName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="connectionMonitorName"/> is null. </exception>
        public virtual async Task<Response<ConnectionMonitorResultResource>> GetAsync(string connectionMonitorName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(connectionMonitorName, nameof(connectionMonitorName));

            using var scope = _connectionMonitorResultConnectionMonitorsClientDiagnostics.CreateScope("ConnectionMonitorResultCollection.Get");
            scope.Start();
            try
            {
                var response = await _connectionMonitorResultConnectionMonitorsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, connectionMonitorName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ConnectionMonitorResultResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets a connection monitor by name.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/connectionMonitors/{connectionMonitorName}
        /// Operation Id: ConnectionMonitors_Get
        /// </summary>
        /// <param name="connectionMonitorName"> The name of the connection monitor. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="connectionMonitorName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="connectionMonitorName"/> is null. </exception>
        public virtual Response<ConnectionMonitorResultResource> Get(string connectionMonitorName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(connectionMonitorName, nameof(connectionMonitorName));

            using var scope = _connectionMonitorResultConnectionMonitorsClientDiagnostics.CreateScope("ConnectionMonitorResultCollection.Get");
            scope.Start();
            try
            {
                var response = _connectionMonitorResultConnectionMonitorsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, connectionMonitorName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ConnectionMonitorResultResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Lists all connection monitors for the specified Network Watcher.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/connectionMonitors
        /// Operation Id: ConnectionMonitors_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ConnectionMonitorResultResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ConnectionMonitorResultResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<ConnectionMonitorResultResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _connectionMonitorResultConnectionMonitorsClientDiagnostics.CreateScope("ConnectionMonitorResultCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _connectionMonitorResultConnectionMonitorsRestClient.ListAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ConnectionMonitorResultResource(Client, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Lists all connection monitors for the specified Network Watcher.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/connectionMonitors
        /// Operation Id: ConnectionMonitors_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ConnectionMonitorResultResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ConnectionMonitorResultResource> GetAll(CancellationToken cancellationToken = default)
        {
            Page<ConnectionMonitorResultResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _connectionMonitorResultConnectionMonitorsClientDiagnostics.CreateScope("ConnectionMonitorResultCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _connectionMonitorResultConnectionMonitorsRestClient.List(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ConnectionMonitorResultResource(Client, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/connectionMonitors/{connectionMonitorName}
        /// Operation Id: ConnectionMonitors_Get
        /// </summary>
        /// <param name="connectionMonitorName"> The name of the connection monitor. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="connectionMonitorName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="connectionMonitorName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string connectionMonitorName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(connectionMonitorName, nameof(connectionMonitorName));

            using var scope = _connectionMonitorResultConnectionMonitorsClientDiagnostics.CreateScope("ConnectionMonitorResultCollection.Exists");
            scope.Start();
            try
            {
                var response = await _connectionMonitorResultConnectionMonitorsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, connectionMonitorName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/connectionMonitors/{connectionMonitorName}
        /// Operation Id: ConnectionMonitors_Get
        /// </summary>
        /// <param name="connectionMonitorName"> The name of the connection monitor. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="connectionMonitorName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="connectionMonitorName"/> is null. </exception>
        public virtual Response<bool> Exists(string connectionMonitorName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(connectionMonitorName, nameof(connectionMonitorName));

            using var scope = _connectionMonitorResultConnectionMonitorsClientDiagnostics.CreateScope("ConnectionMonitorResultCollection.Exists");
            scope.Start();
            try
            {
                var response = _connectionMonitorResultConnectionMonitorsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, connectionMonitorName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<ConnectionMonitorResultResource> IEnumerable<ConnectionMonitorResultResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<ConnectionMonitorResultResource> IAsyncEnumerable<ConnectionMonitorResultResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
