// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Network.Models
{
    public partial class ExpressRouteFailoverSingleTestDetails : IUtf8JsonSerializable, IJsonModel<ExpressRouteFailoverSingleTestDetails>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<ExpressRouteFailoverSingleTestDetails>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<ExpressRouteFailoverSingleTestDetails>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ExpressRouteFailoverSingleTestDetails>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ExpressRouteFailoverSingleTestDetails)} does not support writing '{format}' format.");
            }

            if (Optional.IsDefined(PeeringLocation))
            {
                writer.WritePropertyName("peeringLocation"u8);
                writer.WriteStringValue(PeeringLocation);
            }
            if (Optional.IsDefined(Status))
            {
                writer.WritePropertyName("status"u8);
                writer.WriteStringValue(Status.Value.ToString());
            }
            if (Optional.IsDefined(StartTimeUtc))
            {
                writer.WritePropertyName("startTimeUtc"u8);
                writer.WriteStringValue(StartTimeUtc);
            }
            if (Optional.IsDefined(EndTimeUtc))
            {
                writer.WritePropertyName("endTimeUtc"u8);
                writer.WriteStringValue(EndTimeUtc);
            }
            if (Optional.IsCollectionDefined(RedundantRoutes))
            {
                writer.WritePropertyName("redundantRoutes"u8);
                writer.WriteStartArray();
                foreach (var item in RedundantRoutes)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(NonRedundantRoutes))
            {
                writer.WritePropertyName("nonRedundantRoutes"u8);
                writer.WriteStartArray();
                foreach (var item in NonRedundantRoutes)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(WasSimulationSuccessful))
            {
                writer.WritePropertyName("wasSimulationSuccessful"u8);
                writer.WriteBooleanValue(WasSimulationSuccessful.Value);
            }
            if (Optional.IsCollectionDefined(FailoverConnectionDetails))
            {
                writer.WritePropertyName("failoverConnectionDetails"u8);
                writer.WriteStartArray();
                foreach (var item in FailoverConnectionDetails)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        ExpressRouteFailoverSingleTestDetails IJsonModel<ExpressRouteFailoverSingleTestDetails>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ExpressRouteFailoverSingleTestDetails>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ExpressRouteFailoverSingleTestDetails)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeExpressRouteFailoverSingleTestDetails(document.RootElement, options);
        }

        internal static ExpressRouteFailoverSingleTestDetails DeserializeExpressRouteFailoverSingleTestDetails(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string peeringLocation = default;
            FailoverTestStatusForSingleTest? status = default;
            string startTimeUtc = default;
            string endTimeUtc = default;
            IReadOnlyList<ExpressRouteFailoverRedundantRoute> redundantRoutes = default;
            IReadOnlyList<string> nonRedundantRoutes = default;
            bool? wasSimulationSuccessful = default;
            IReadOnlyList<FailoverConnectionDetails> failoverConnectionDetails = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("peeringLocation"u8))
                {
                    peeringLocation = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("status"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    status = new FailoverTestStatusForSingleTest(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("startTimeUtc"u8))
                {
                    startTimeUtc = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("endTimeUtc"u8))
                {
                    endTimeUtc = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("redundantRoutes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ExpressRouteFailoverRedundantRoute> array = new List<ExpressRouteFailoverRedundantRoute>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ExpressRouteFailoverRedundantRoute.DeserializeExpressRouteFailoverRedundantRoute(item, options));
                    }
                    redundantRoutes = array;
                    continue;
                }
                if (property.NameEquals("nonRedundantRoutes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    nonRedundantRoutes = array;
                    continue;
                }
                if (property.NameEquals("wasSimulationSuccessful"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    wasSimulationSuccessful = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("failoverConnectionDetails"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<FailoverConnectionDetails> array = new List<FailoverConnectionDetails>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Models.FailoverConnectionDetails.DeserializeFailoverConnectionDetails(item, options));
                    }
                    failoverConnectionDetails = array;
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new ExpressRouteFailoverSingleTestDetails(
                peeringLocation,
                status,
                startTimeUtc,
                endTimeUtc,
                redundantRoutes ?? new ChangeTrackingList<ExpressRouteFailoverRedundantRoute>(),
                nonRedundantRoutes ?? new ChangeTrackingList<string>(),
                wasSimulationSuccessful,
                failoverConnectionDetails ?? new ChangeTrackingList<FailoverConnectionDetails>(),
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<ExpressRouteFailoverSingleTestDetails>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ExpressRouteFailoverSingleTestDetails>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(ExpressRouteFailoverSingleTestDetails)} does not support writing '{options.Format}' format.");
            }
        }

        ExpressRouteFailoverSingleTestDetails IPersistableModel<ExpressRouteFailoverSingleTestDetails>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ExpressRouteFailoverSingleTestDetails>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeExpressRouteFailoverSingleTestDetails(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ExpressRouteFailoverSingleTestDetails)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<ExpressRouteFailoverSingleTestDetails>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
