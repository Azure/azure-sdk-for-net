// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.ResourceManager.Network.Models
{
    /// <summary> IP traffic information. </summary>
    public partial class IPTraffic
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="IPTraffic"/>. </summary>
        /// <param name="sourceIPs"> List of source IP addresses of the traffic.. </param>
        /// <param name="destinationIPs"> List of destination IP addresses of the traffic.. </param>
        /// <param name="sourcePorts"> The source ports of the traffic. </param>
        /// <param name="destinationPorts"> The destination ports of the traffic. </param>
        /// <param name="protocols"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="sourceIPs"/>, <paramref name="destinationIPs"/>, <paramref name="sourcePorts"/>, <paramref name="destinationPorts"/> or <paramref name="protocols"/> is null. </exception>
        public IPTraffic(IEnumerable<string> sourceIPs, IEnumerable<string> destinationIPs, IEnumerable<string> sourcePorts, IEnumerable<string> destinationPorts, IEnumerable<NetworkProtocol> protocols)
        {
            Argument.AssertNotNull(sourceIPs, nameof(sourceIPs));
            Argument.AssertNotNull(destinationIPs, nameof(destinationIPs));
            Argument.AssertNotNull(sourcePorts, nameof(sourcePorts));
            Argument.AssertNotNull(destinationPorts, nameof(destinationPorts));
            Argument.AssertNotNull(protocols, nameof(protocols));

            SourceIPs = sourceIPs.ToList();
            DestinationIPs = destinationIPs.ToList();
            SourcePorts = sourcePorts.ToList();
            DestinationPorts = destinationPorts.ToList();
            Protocols = protocols.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="IPTraffic"/>. </summary>
        /// <param name="sourceIPs"> List of source IP addresses of the traffic.. </param>
        /// <param name="destinationIPs"> List of destination IP addresses of the traffic.. </param>
        /// <param name="sourcePorts"> The source ports of the traffic. </param>
        /// <param name="destinationPorts"> The destination ports of the traffic. </param>
        /// <param name="protocols"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal IPTraffic(IList<string> sourceIPs, IList<string> destinationIPs, IList<string> sourcePorts, IList<string> destinationPorts, IList<NetworkProtocol> protocols, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            SourceIPs = sourceIPs;
            DestinationIPs = destinationIPs;
            SourcePorts = sourcePorts;
            DestinationPorts = destinationPorts;
            Protocols = protocols;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="IPTraffic"/> for deserialization. </summary>
        internal IPTraffic()
        {
        }

        /// <summary> List of source IP addresses of the traffic.. </summary>
        public IList<string> SourceIPs { get; }
        /// <summary> List of destination IP addresses of the traffic.. </summary>
        public IList<string> DestinationIPs { get; }
        /// <summary> The source ports of the traffic. </summary>
        public IList<string> SourcePorts { get; }
        /// <summary> The destination ports of the traffic. </summary>
        public IList<string> DestinationPorts { get; }
        /// <summary> Gets the protocols. </summary>
        public IList<NetworkProtocol> Protocols { get; }
    }
}
