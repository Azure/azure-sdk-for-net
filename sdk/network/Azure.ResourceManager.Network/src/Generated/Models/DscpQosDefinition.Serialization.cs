// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Network.Models
{
    public partial class DscpQosDefinition : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(Markings))
            {
                writer.WritePropertyName("markings"u8);
                writer.WriteStartArray();
                foreach (var item in Markings)
                {
                    writer.WriteNumberValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(SourceIPRanges))
            {
                writer.WritePropertyName("sourceIpRanges"u8);
                writer.WriteStartArray();
                foreach (var item in SourceIPRanges)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(DestinationIPRanges))
            {
                writer.WritePropertyName("destinationIpRanges"u8);
                writer.WriteStartArray();
                foreach (var item in DestinationIPRanges)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(SourcePortRanges))
            {
                writer.WritePropertyName("sourcePortRanges"u8);
                writer.WriteStartArray();
                foreach (var item in SourcePortRanges)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(DestinationPortRanges))
            {
                writer.WritePropertyName("destinationPortRanges"u8);
                writer.WriteStartArray();
                foreach (var item in DestinationPortRanges)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Protocol))
            {
                writer.WritePropertyName("protocol"u8);
                writer.WriteStringValue(Protocol.Value.ToString());
            }
            writer.WriteEndObject();
        }

        internal static DscpQosDefinition DeserializeDscpQosDefinition(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<IList<int>> markings = default;
            Optional<IList<QosIPRange>> sourceIPRanges = default;
            Optional<IList<QosIPRange>> destinationIPRanges = default;
            Optional<IList<QosPortRange>> sourcePortRanges = default;
            Optional<IList<QosPortRange>> destinationPortRanges = default;
            Optional<ProtocolType> protocol = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("markings"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<int> array = new List<int>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetInt32());
                    }
                    markings = array;
                    continue;
                }
                if (property.NameEquals("sourceIpRanges"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<QosIPRange> array = new List<QosIPRange>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(QosIPRange.DeserializeQosIPRange(item));
                    }
                    sourceIPRanges = array;
                    continue;
                }
                if (property.NameEquals("destinationIpRanges"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<QosIPRange> array = new List<QosIPRange>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(QosIPRange.DeserializeQosIPRange(item));
                    }
                    destinationIPRanges = array;
                    continue;
                }
                if (property.NameEquals("sourcePortRanges"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<QosPortRange> array = new List<QosPortRange>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(QosPortRange.DeserializeQosPortRange(item));
                    }
                    sourcePortRanges = array;
                    continue;
                }
                if (property.NameEquals("destinationPortRanges"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<QosPortRange> array = new List<QosPortRange>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(QosPortRange.DeserializeQosPortRange(item));
                    }
                    destinationPortRanges = array;
                    continue;
                }
                if (property.NameEquals("protocol"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    protocol = new ProtocolType(property.Value.GetString());
                    continue;
                }
            }
            return new DscpQosDefinition(Optional.ToList(markings), Optional.ToList(sourceIPRanges), Optional.ToList(destinationIPRanges), Optional.ToList(sourcePortRanges), Optional.ToList(destinationPortRanges), Optional.ToNullable(protocol));
        }
    }
}
