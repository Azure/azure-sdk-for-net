// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Network.Models
{
    public partial class VpnClientConnectionHealthDetail
    {
        internal static VpnClientConnectionHealthDetail DeserializeVpnClientConnectionHealthDetail(JsonElement element)
        {
            Optional<string> vpnConnectionId = default;
            Optional<long> vpnConnectionDuration = default;
            Optional<string> vpnConnectionTime = default;
            Optional<string> publicIpAddress = default;
            Optional<string> privateIpAddress = default;
            Optional<string> vpnUserName = default;
            Optional<long> maxBandwidth = default;
            Optional<long> egressPacketsTransferred = default;
            Optional<long> egressBytesTransferred = default;
            Optional<long> ingressPacketsTransferred = default;
            Optional<long> ingressBytesTransferred = default;
            Optional<long> maxPacketsPerSecond = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("vpnConnectionId"))
                {
                    vpnConnectionId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("vpnConnectionDuration"))
                {
                    vpnConnectionDuration = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("vpnConnectionTime"))
                {
                    vpnConnectionTime = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("publicIpAddress"))
                {
                    publicIpAddress = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("privateIpAddress"))
                {
                    privateIpAddress = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("vpnUserName"))
                {
                    vpnUserName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("maxBandwidth"))
                {
                    maxBandwidth = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("egressPacketsTransferred"))
                {
                    egressPacketsTransferred = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("egressBytesTransferred"))
                {
                    egressBytesTransferred = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("ingressPacketsTransferred"))
                {
                    ingressPacketsTransferred = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("ingressBytesTransferred"))
                {
                    ingressBytesTransferred = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("maxPacketsPerSecond"))
                {
                    maxPacketsPerSecond = property.Value.GetInt64();
                    continue;
                }
            }
            return new VpnClientConnectionHealthDetail(vpnConnectionId.Value, Optional.ToNullable(vpnConnectionDuration), vpnConnectionTime.Value, publicIpAddress.Value, privateIpAddress.Value, vpnUserName.Value, Optional.ToNullable(maxBandwidth), Optional.ToNullable(egressPacketsTransferred), Optional.ToNullable(egressBytesTransferred), Optional.ToNullable(ingressPacketsTransferred), Optional.ToNullable(ingressBytesTransferred), Optional.ToNullable(maxPacketsPerSecond));
        }
    }
}
