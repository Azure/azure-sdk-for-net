// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Network.Models
{
    public partial class VpnClientConnectionHealthDetail
    {
        internal static VpnClientConnectionHealthDetail DeserializeVpnClientConnectionHealthDetail(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> vpnConnectionId = default;
            Optional<long> vpnConnectionDuration = default;
            Optional<DateTimeOffset> vpnConnectionTime = default;
            Optional<string> publicIPAddress = default;
            Optional<string> privateIPAddress = default;
            Optional<string> vpnUserName = default;
            Optional<long> maxBandwidth = default;
            Optional<long> egressPacketsTransferred = default;
            Optional<long> egressBytesTransferred = default;
            Optional<long> ingressPacketsTransferred = default;
            Optional<long> ingressBytesTransferred = default;
            Optional<long> maxPacketsPerSecond = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("vpnConnectionId"u8))
                {
                    vpnConnectionId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("vpnConnectionDuration"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    vpnConnectionDuration = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("vpnConnectionTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    vpnConnectionTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("publicIpAddress"u8))
                {
                    publicIPAddress = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("privateIpAddress"u8))
                {
                    privateIPAddress = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("vpnUserName"u8))
                {
                    vpnUserName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("maxBandwidth"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    maxBandwidth = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("egressPacketsTransferred"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    egressPacketsTransferred = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("egressBytesTransferred"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    egressBytesTransferred = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("ingressPacketsTransferred"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    ingressPacketsTransferred = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("ingressBytesTransferred"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    ingressBytesTransferred = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("maxPacketsPerSecond"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    maxPacketsPerSecond = property.Value.GetInt64();
                    continue;
                }
            }
            return new VpnClientConnectionHealthDetail(vpnConnectionId.Value, Optional.ToNullable(vpnConnectionDuration), Optional.ToNullable(vpnConnectionTime), publicIPAddress.Value, privateIPAddress.Value, vpnUserName.Value, Optional.ToNullable(maxBandwidth), Optional.ToNullable(egressPacketsTransferred), Optional.ToNullable(egressBytesTransferred), Optional.ToNullable(ingressPacketsTransferred), Optional.ToNullable(ingressBytesTransferred), Optional.ToNullable(maxPacketsPerSecond));
        }
    }
}
