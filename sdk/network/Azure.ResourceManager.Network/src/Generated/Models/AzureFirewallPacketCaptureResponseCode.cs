// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Network.Models
{
    /// <summary> The packet capture operation response codes. </summary>
    public readonly partial struct AzureFirewallPacketCaptureResponseCode : IEquatable<AzureFirewallPacketCaptureResponseCode>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AzureFirewallPacketCaptureResponseCode"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AzureFirewallPacketCaptureResponseCode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NotImplementedValue = "NotImplemented";
        private const string AzureFirewallPacketCaptureStartSucceededValue = "AzureFirewallPacketCaptureStartSucceeded";
        private const string AzureFirewallPacketCaptureStartFailedValue = "AzureFirewallPacketCaptureStartFailed";
        private const string AzureFirewallPacketCaptureStartFailedToUploadValue = "AzureFirewallPacketCaptureStartFailedToUpload";
        private const string AzureFirewallPacketCaptureStartFailureValue = "AzureFirewallPacketCaptureStartFailure";
        private const string AzureFirewallPacketCaptureInProgressValue = "AzureFirewallPacketCaptureInProgress";
        private const string AzureFirewallPacketCaptureNotInProgressValue = "AzureFirewallPacketCaptureNotInProgress";
        private const string AzureFirewallPacketCaptureStopSucceededValue = "AzureFirewallPacketCaptureStopSucceeded";
        private const string AzureFirewallPacketCaptureFailedValue = "AzureFirewallPacketCaptureFailed";
        private const string AzureFirewallPacketCaptureCompletedValue = "AzureFirewallPacketCaptureCompleted";

        /// <summary> NotImplemented. </summary>
        public static AzureFirewallPacketCaptureResponseCode NotImplemented { get; } = new AzureFirewallPacketCaptureResponseCode(NotImplementedValue);
        /// <summary> AzureFirewallPacketCaptureStartSucceeded. </summary>
        public static AzureFirewallPacketCaptureResponseCode AzureFirewallPacketCaptureStartSucceeded { get; } = new AzureFirewallPacketCaptureResponseCode(AzureFirewallPacketCaptureStartSucceededValue);
        /// <summary> AzureFirewallPacketCaptureStartFailed. </summary>
        public static AzureFirewallPacketCaptureResponseCode AzureFirewallPacketCaptureStartFailed { get; } = new AzureFirewallPacketCaptureResponseCode(AzureFirewallPacketCaptureStartFailedValue);
        /// <summary> AzureFirewallPacketCaptureStartFailedToUpload. </summary>
        public static AzureFirewallPacketCaptureResponseCode AzureFirewallPacketCaptureStartFailedToUpload { get; } = new AzureFirewallPacketCaptureResponseCode(AzureFirewallPacketCaptureStartFailedToUploadValue);
        /// <summary> AzureFirewallPacketCaptureStartFailure. </summary>
        public static AzureFirewallPacketCaptureResponseCode AzureFirewallPacketCaptureStartFailure { get; } = new AzureFirewallPacketCaptureResponseCode(AzureFirewallPacketCaptureStartFailureValue);
        /// <summary> AzureFirewallPacketCaptureInProgress. </summary>
        public static AzureFirewallPacketCaptureResponseCode AzureFirewallPacketCaptureInProgress { get; } = new AzureFirewallPacketCaptureResponseCode(AzureFirewallPacketCaptureInProgressValue);
        /// <summary> AzureFirewallPacketCaptureNotInProgress. </summary>
        public static AzureFirewallPacketCaptureResponseCode AzureFirewallPacketCaptureNotInProgress { get; } = new AzureFirewallPacketCaptureResponseCode(AzureFirewallPacketCaptureNotInProgressValue);
        /// <summary> AzureFirewallPacketCaptureStopSucceeded. </summary>
        public static AzureFirewallPacketCaptureResponseCode AzureFirewallPacketCaptureStopSucceeded { get; } = new AzureFirewallPacketCaptureResponseCode(AzureFirewallPacketCaptureStopSucceededValue);
        /// <summary> AzureFirewallPacketCaptureFailed. </summary>
        public static AzureFirewallPacketCaptureResponseCode AzureFirewallPacketCaptureFailed { get; } = new AzureFirewallPacketCaptureResponseCode(AzureFirewallPacketCaptureFailedValue);
        /// <summary> AzureFirewallPacketCaptureCompleted. </summary>
        public static AzureFirewallPacketCaptureResponseCode AzureFirewallPacketCaptureCompleted { get; } = new AzureFirewallPacketCaptureResponseCode(AzureFirewallPacketCaptureCompletedValue);
        /// <summary> Determines if two <see cref="AzureFirewallPacketCaptureResponseCode"/> values are the same. </summary>
        public static bool operator ==(AzureFirewallPacketCaptureResponseCode left, AzureFirewallPacketCaptureResponseCode right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AzureFirewallPacketCaptureResponseCode"/> values are not the same. </summary>
        public static bool operator !=(AzureFirewallPacketCaptureResponseCode left, AzureFirewallPacketCaptureResponseCode right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="AzureFirewallPacketCaptureResponseCode"/>. </summary>
        public static implicit operator AzureFirewallPacketCaptureResponseCode(string value) => new AzureFirewallPacketCaptureResponseCode(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AzureFirewallPacketCaptureResponseCode other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AzureFirewallPacketCaptureResponseCode other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
