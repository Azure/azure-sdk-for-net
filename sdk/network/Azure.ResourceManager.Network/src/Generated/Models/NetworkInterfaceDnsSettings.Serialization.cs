// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Network.Models
{
    public partial class NetworkInterfaceDnsSettings : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(DnsServers))
            {
                writer.WritePropertyName("dnsServers");
                writer.WriteStartArray();
                foreach (var item in DnsServers)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(AppliedDnsServers))
            {
                writer.WritePropertyName("appliedDnsServers");
                writer.WriteStartArray();
                foreach (var item in AppliedDnsServers)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(InternalDnsNameLabel))
            {
                writer.WritePropertyName("internalDnsNameLabel");
                writer.WriteStringValue(InternalDnsNameLabel);
            }
            if (Optional.IsDefined(InternalFqdn))
            {
                writer.WritePropertyName("internalFqdn");
                writer.WriteStringValue(InternalFqdn);
            }
            if (Optional.IsDefined(InternalDomainNameSuffix))
            {
                writer.WritePropertyName("internalDomainNameSuffix");
                writer.WriteStringValue(InternalDomainNameSuffix);
            }
            writer.WriteEndObject();
        }

        internal static NetworkInterfaceDnsSettings DeserializeNetworkInterfaceDnsSettings(JsonElement element)
        {
            Optional<IList<string>> dnsServers = default;
            Optional<IList<string>> appliedDnsServers = default;
            Optional<string> internalDnsNameLabel = default;
            Optional<string> internalFqdn = default;
            Optional<string> internalDomainNameSuffix = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("dnsServers"))
                {
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(item.GetString());
                        }
                    }
                    dnsServers = array;
                    continue;
                }
                if (property.NameEquals("appliedDnsServers"))
                {
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(item.GetString());
                        }
                    }
                    appliedDnsServers = array;
                    continue;
                }
                if (property.NameEquals("internalDnsNameLabel"))
                {
                    internalDnsNameLabel = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("internalFqdn"))
                {
                    internalFqdn = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("internalDomainNameSuffix"))
                {
                    internalDomainNameSuffix = property.Value.GetString();
                    continue;
                }
            }
            return new NetworkInterfaceDnsSettings(new ChangeTrackingList<string>(dnsServers), new ChangeTrackingList<string>(appliedDnsServers), internalDnsNameLabel.HasValue ? internalDnsNameLabel.Value : null, internalFqdn.HasValue ? internalFqdn.Value : null, internalDomainNameSuffix.HasValue ? internalDomainNameSuffix.Value : null);
        }
    }
}
