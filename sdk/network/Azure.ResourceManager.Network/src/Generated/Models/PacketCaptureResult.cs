// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.Network.Models
{
    /// <summary> Information about packet capture session. </summary>
    public partial class PacketCaptureResult
    {
        /// <summary> Initializes a new instance of PacketCaptureResult. </summary>
        internal PacketCaptureResult()
        {
            Filters = new ChangeTrackingList<PacketCaptureFilter>();
        }

        /// <summary> Initializes a new instance of PacketCaptureResult. </summary>
        /// <param name="name"> Name of the packet capture session. </param>
        /// <param name="id"> ID of the packet capture operation. </param>
        /// <param name="etag"> A unique read-only string that changes whenever the resource is updated. </param>
        /// <param name="target"> The ID of the targeted resource, only VM is currently supported. </param>
        /// <param name="bytesToCapturePerPacket"> Number of bytes captured per packet, the remaining bytes are truncated. </param>
        /// <param name="totalBytesPerSession"> Maximum size of the capture output. </param>
        /// <param name="timeLimitInSeconds"> Maximum duration of the capture session in seconds. </param>
        /// <param name="storageLocation"> The storage location for a packet capture session. </param>
        /// <param name="filters"> A list of packet capture filters. </param>
        /// <param name="provisioningState"> The provisioning state of the packet capture session. </param>
        internal PacketCaptureResult(string name, string id, string etag, string target, int? bytesToCapturePerPacket, int? totalBytesPerSession, int? timeLimitInSeconds, PacketCaptureStorageLocation storageLocation, IReadOnlyList<PacketCaptureFilter> filters, ProvisioningState? provisioningState)
        {
            Name = name;
            Id = id;
            Etag = etag;
            Target = target;
            BytesToCapturePerPacket = bytesToCapturePerPacket;
            TotalBytesPerSession = totalBytesPerSession;
            TimeLimitInSeconds = timeLimitInSeconds;
            StorageLocation = storageLocation;
            Filters = filters;
            ProvisioningState = provisioningState;
        }

        /// <summary> Name of the packet capture session. </summary>
        public string Name { get; }
        /// <summary> ID of the packet capture operation. </summary>
        public string Id { get; }
        /// <summary> A unique read-only string that changes whenever the resource is updated. </summary>
        public string Etag { get; }
        /// <summary> The ID of the targeted resource, only VM is currently supported. </summary>
        public string Target { get; }
        /// <summary> Number of bytes captured per packet, the remaining bytes are truncated. </summary>
        public int? BytesToCapturePerPacket { get; }
        /// <summary> Maximum size of the capture output. </summary>
        public int? TotalBytesPerSession { get; }
        /// <summary> Maximum duration of the capture session in seconds. </summary>
        public int? TimeLimitInSeconds { get; }
        /// <summary> The storage location for a packet capture session. </summary>
        public PacketCaptureStorageLocation StorageLocation { get; }
        /// <summary> A list of packet capture filters. </summary>
        public IReadOnlyList<PacketCaptureFilter> Filters { get; }
        /// <summary> The provisioning state of the packet capture session. </summary>
        public ProvisioningState? ProvisioningState { get; }
    }
}
