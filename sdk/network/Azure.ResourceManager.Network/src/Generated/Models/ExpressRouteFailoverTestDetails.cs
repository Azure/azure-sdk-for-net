// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.Network.Models
{
    /// <summary> ExpressRoute failover test details. </summary>
    public partial class ExpressRouteFailoverTestDetails
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ExpressRouteFailoverTestDetails"/>. </summary>
        internal ExpressRouteFailoverTestDetails()
        {
            Circuits = new ChangeTrackingList<ExpressRouteFailoverCircuitResourceDetails>();
            Connections = new ChangeTrackingList<ExpressRouteFailoverConnectionResourceDetails>();
            Issues = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of <see cref="ExpressRouteFailoverTestDetails"/>. </summary>
        /// <param name="peeringLocation"> Peering location of the test. </param>
        /// <param name="circuits"> All circuits in the peering location. </param>
        /// <param name="status"> The current status of the test. </param>
        /// <param name="startOn"> Time when the test was started. </param>
        /// <param name="endOn"> Time when the test was completed. </param>
        /// <param name="connections"> All connections to the circuits in the peering location. </param>
        /// <param name="testGuid"> The unique GUID associated with the test. </param>
        /// <param name="testType"> The type of failover test. </param>
        /// <param name="issues"> A list of all issues with the test. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ExpressRouteFailoverTestDetails(string peeringLocation, IReadOnlyList<ExpressRouteFailoverCircuitResourceDetails> circuits, FailoverTestStatus? status, DateTimeOffset? startOn, DateTimeOffset? endOn, IReadOnlyList<ExpressRouteFailoverConnectionResourceDetails> connections, Guid? testGuid, FailoverTestType? testType, IReadOnlyList<string> issues, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            PeeringLocation = peeringLocation;
            Circuits = circuits;
            Status = status;
            StartOn = startOn;
            EndOn = endOn;
            Connections = connections;
            TestGuid = testGuid;
            TestType = testType;
            Issues = issues;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Peering location of the test. </summary>
        public string PeeringLocation { get; }
        /// <summary> All circuits in the peering location. </summary>
        public IReadOnlyList<ExpressRouteFailoverCircuitResourceDetails> Circuits { get; }
        /// <summary> The current status of the test. </summary>
        public FailoverTestStatus? Status { get; }
        /// <summary> Time when the test was started. </summary>
        public DateTimeOffset? StartOn { get; }
        /// <summary> Time when the test was completed. </summary>
        public DateTimeOffset? EndOn { get; }
        /// <summary> All connections to the circuits in the peering location. </summary>
        public IReadOnlyList<ExpressRouteFailoverConnectionResourceDetails> Connections { get; }
        /// <summary> The unique GUID associated with the test. </summary>
        public Guid? TestGuid { get; }
        /// <summary> The type of failover test. </summary>
        public FailoverTestType? TestType { get; }
        /// <summary> A list of all issues with the test. </summary>
        public IReadOnlyList<string> Issues { get; }
    }
}
