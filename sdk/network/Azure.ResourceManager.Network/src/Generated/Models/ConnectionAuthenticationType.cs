// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Network.Models
{
    /// <summary> Gateway connection authentication type. </summary>
    public readonly partial struct ConnectionAuthenticationType : IEquatable<ConnectionAuthenticationType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ConnectionAuthenticationType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ConnectionAuthenticationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PSKValue = "PSK";
        private const string CertificateValue = "Certificate";

        /// <summary> Pre-shared key authentication method for VPN gateway connections. </summary>
        public static ConnectionAuthenticationType PSK { get; } = new ConnectionAuthenticationType(PSKValue);
        /// <summary> Certificate-based authentication method for VPN gateway connections. </summary>
        public static ConnectionAuthenticationType Certificate { get; } = new ConnectionAuthenticationType(CertificateValue);
        /// <summary> Determines if two <see cref="ConnectionAuthenticationType"/> values are the same. </summary>
        public static bool operator ==(ConnectionAuthenticationType left, ConnectionAuthenticationType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ConnectionAuthenticationType"/> values are not the same. </summary>
        public static bool operator !=(ConnectionAuthenticationType left, ConnectionAuthenticationType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ConnectionAuthenticationType"/>. </summary>
        public static implicit operator ConnectionAuthenticationType(string value) => new ConnectionAuthenticationType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ConnectionAuthenticationType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ConnectionAuthenticationType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
