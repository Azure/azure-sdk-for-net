// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Network.Models
{
    public partial class LoadBalancerBackendAddress : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Name != null)
            {
                writer.WritePropertyName("name");
                writer.WriteStringValue(Name);
            }
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            if (VirtualNetwork != null)
            {
                writer.WritePropertyName("virtualNetwork");
                writer.WriteObjectValue(VirtualNetwork);
            }
            if (IpAddress != null)
            {
                writer.WritePropertyName("ipAddress");
                writer.WriteStringValue(IpAddress);
            }
            if (NetworkInterfaceIPConfiguration != null)
            {
                writer.WritePropertyName("networkInterfaceIPConfiguration");
                writer.WriteObjectValue(NetworkInterfaceIPConfiguration);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static LoadBalancerBackendAddress DeserializeLoadBalancerBackendAddress(JsonElement element)
        {
            string name = default;
            VirtualNetwork virtualNetwork = default;
            string ipAddress = default;
            NetworkInterfaceIPConfiguration networkInterfaceIPConfiguration = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("name"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("virtualNetwork"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            virtualNetwork = VirtualNetwork.DeserializeVirtualNetwork(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("ipAddress"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            ipAddress = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("networkInterfaceIPConfiguration"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            networkInterfaceIPConfiguration = NetworkInterfaceIPConfiguration.DeserializeNetworkInterfaceIPConfiguration(property0.Value);
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new LoadBalancerBackendAddress(name, virtualNetwork, ipAddress, networkInterfaceIPConfiguration);
        }
    }
}
