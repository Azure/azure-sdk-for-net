// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.ResourceManager.Network.Models;
using Azure.ResourceManager.Resources.Models;

namespace Azure.ResourceManager.Network
{
    public partial class VirtualNetworkGatewayData : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(ExtendedLocation))
            {
                writer.WritePropertyName("extendedLocation"u8);
                JsonSerializer.Serialize(writer, ExtendedLocation);
            }
            if (Core.Optional.IsDefined(Id))
            {
                writer.WritePropertyName("id"u8);
                writer.WriteStringValue(Id);
            }
            if (Core.Optional.IsDefined(Location))
            {
                writer.WritePropertyName("location"u8);
                writer.WriteStringValue(Location.Value);
            }
            if (Core.Optional.IsCollectionDefined(Tags))
            {
                writer.WritePropertyName("tags"u8);
                writer.WriteStartObject();
                foreach (var item in Tags)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (Core.Optional.IsCollectionDefined(IPConfigurations))
            {
                writer.WritePropertyName("ipConfigurations"u8);
                writer.WriteStartArray();
                foreach (var item in IPConfigurations)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Core.Optional.IsDefined(GatewayType))
            {
                writer.WritePropertyName("gatewayType"u8);
                writer.WriteStringValue(GatewayType.Value.ToString());
            }
            if (Core.Optional.IsDefined(VpnType))
            {
                writer.WritePropertyName("vpnType"u8);
                writer.WriteStringValue(VpnType.Value.ToString());
            }
            if (Core.Optional.IsDefined(VpnGatewayGeneration))
            {
                writer.WritePropertyName("vpnGatewayGeneration"u8);
                writer.WriteStringValue(VpnGatewayGeneration.Value.ToString());
            }
            if (Core.Optional.IsDefined(EnableBgp))
            {
                writer.WritePropertyName("enableBgp"u8);
                writer.WriteBooleanValue(EnableBgp.Value);
            }
            if (Core.Optional.IsDefined(EnablePrivateIPAddress))
            {
                writer.WritePropertyName("enablePrivateIpAddress"u8);
                writer.WriteBooleanValue(EnablePrivateIPAddress.Value);
            }
            if (Core.Optional.IsDefined(Active))
            {
                writer.WritePropertyName("activeActive"u8);
                writer.WriteBooleanValue(Active.Value);
            }
            if (Core.Optional.IsDefined(DisableIPSecReplayProtection))
            {
                writer.WritePropertyName("disableIPSecReplayProtection"u8);
                writer.WriteBooleanValue(DisableIPSecReplayProtection.Value);
            }
            if (Core.Optional.IsDefined(GatewayDefaultSite))
            {
                writer.WritePropertyName("gatewayDefaultSite"u8);
                JsonSerializer.Serialize(writer, GatewayDefaultSite);
            }
            if (Core.Optional.IsDefined(Sku))
            {
                writer.WritePropertyName("sku"u8);
                writer.WriteObjectValue(Sku);
            }
            if (Core.Optional.IsDefined(VpnClientConfiguration))
            {
                writer.WritePropertyName("vpnClientConfiguration"u8);
                writer.WriteObjectValue(VpnClientConfiguration);
            }
            if (Core.Optional.IsCollectionDefined(VirtualNetworkGatewayPolicyGroups))
            {
                writer.WritePropertyName("virtualNetworkGatewayPolicyGroups"u8);
                writer.WriteStartArray();
                foreach (var item in VirtualNetworkGatewayPolicyGroups)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Core.Optional.IsDefined(BgpSettings))
            {
                writer.WritePropertyName("bgpSettings"u8);
                writer.WriteObjectValue(BgpSettings);
            }
            if (Core.Optional.IsDefined(CustomRoutes))
            {
                writer.WritePropertyName("customRoutes"u8);
                writer.WriteObjectValue(CustomRoutes);
            }
            if (Core.Optional.IsDefined(EnableDnsForwarding))
            {
                writer.WritePropertyName("enableDnsForwarding"u8);
                writer.WriteBooleanValue(EnableDnsForwarding.Value);
            }
            if (Core.Optional.IsDefined(VNetExtendedLocationResourceId))
            {
                writer.WritePropertyName("vNetExtendedLocationResourceId"u8);
                writer.WriteStringValue(VNetExtendedLocationResourceId);
            }
            if (Core.Optional.IsCollectionDefined(NatRules))
            {
                writer.WritePropertyName("natRules"u8);
                writer.WriteStartArray();
                foreach (var item in NatRules)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Core.Optional.IsDefined(EnableBgpRouteTranslationForNat))
            {
                writer.WritePropertyName("enableBgpRouteTranslationForNat"u8);
                writer.WriteBooleanValue(EnableBgpRouteTranslationForNat.Value);
            }
            if (Core.Optional.IsDefined(AllowVirtualWanTraffic))
            {
                writer.WritePropertyName("allowVirtualWanTraffic"u8);
                writer.WriteBooleanValue(AllowVirtualWanTraffic.Value);
            }
            if (Core.Optional.IsDefined(AllowRemoteVnetTraffic))
            {
                writer.WritePropertyName("allowRemoteVnetTraffic"u8);
                writer.WriteBooleanValue(AllowRemoteVnetTraffic.Value);
            }
            if (Core.Optional.IsDefined(AdminState))
            {
                writer.WritePropertyName("adminState"u8);
                writer.WriteStringValue(AdminState.Value.ToString());
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static VirtualNetworkGatewayData DeserializeVirtualNetworkGatewayData(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<ExtendedLocation> extendedLocation = default;
            Core.Optional<ETag> etag = default;
            Core.Optional<ResourceIdentifier> id = default;
            Core.Optional<string> name = default;
            Core.Optional<ResourceType> type = default;
            Core.Optional<AzureLocation> location = default;
            Core.Optional<IDictionary<string, string>> tags = default;
            Core.Optional<IList<VirtualNetworkGatewayIPConfiguration>> ipConfigurations = default;
            Core.Optional<VirtualNetworkGatewayType> gatewayType = default;
            Core.Optional<VpnType> vpnType = default;
            Core.Optional<VpnGatewayGeneration> vpnGatewayGeneration = default;
            Core.Optional<bool> enableBgp = default;
            Core.Optional<bool> enablePrivateIPAddress = default;
            Core.Optional<bool> activeActive = default;
            Core.Optional<bool> disableIPSecReplayProtection = default;
            Core.Optional<WritableSubResource> gatewayDefaultSite = default;
            Core.Optional<VirtualNetworkGatewaySku> sku = default;
            Core.Optional<VpnClientConfiguration> vpnClientConfiguration = default;
            Core.Optional<IList<VirtualNetworkGatewayPolicyGroup>> virtualNetworkGatewayPolicyGroups = default;
            Core.Optional<BgpSettings> bgpSettings = default;
            Core.Optional<AddressSpace> customRoutes = default;
            Core.Optional<Guid> resourceGuid = default;
            Core.Optional<NetworkProvisioningState> provisioningState = default;
            Core.Optional<bool> enableDnsForwarding = default;
            Core.Optional<string> inboundDnsForwardingEndpoint = default;
            Core.Optional<ResourceIdentifier> vNetExtendedLocationResourceId = default;
            Core.Optional<IList<VirtualNetworkGatewayNatRuleData>> natRules = default;
            Core.Optional<bool> enableBgpRouteTranslationForNat = default;
            Core.Optional<bool> allowVirtualWanTraffic = default;
            Core.Optional<bool> allowRemoteVnetTraffic = default;
            Core.Optional<ExpressRouteGatewayAdminState> adminState = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("extendedLocation"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    extendedLocation = JsonSerializer.Deserialize<ExtendedLocation>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("etag"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    etag = new ETag(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("location"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    location = new AzureLocation(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("tags"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    tags = dictionary;
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("ipConfigurations"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<VirtualNetworkGatewayIPConfiguration> array = new List<VirtualNetworkGatewayIPConfiguration>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(VirtualNetworkGatewayIPConfiguration.DeserializeVirtualNetworkGatewayIPConfiguration(item));
                            }
                            ipConfigurations = array;
                            continue;
                        }
                        if (property0.NameEquals("gatewayType"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            gatewayType = new VirtualNetworkGatewayType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("vpnType"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            vpnType = new VpnType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("vpnGatewayGeneration"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            vpnGatewayGeneration = new VpnGatewayGeneration(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("enableBgp"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            enableBgp = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("enablePrivateIpAddress"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            enablePrivateIPAddress = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("activeActive"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            activeActive = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("disableIPSecReplayProtection"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            disableIPSecReplayProtection = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("gatewayDefaultSite"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            gatewayDefaultSite = JsonSerializer.Deserialize<WritableSubResource>(property0.Value.GetRawText());
                            continue;
                        }
                        if (property0.NameEquals("sku"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            sku = VirtualNetworkGatewaySku.DeserializeVirtualNetworkGatewaySku(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("vpnClientConfiguration"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            vpnClientConfiguration = VpnClientConfiguration.DeserializeVpnClientConfiguration(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("virtualNetworkGatewayPolicyGroups"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<VirtualNetworkGatewayPolicyGroup> array = new List<VirtualNetworkGatewayPolicyGroup>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(VirtualNetworkGatewayPolicyGroup.DeserializeVirtualNetworkGatewayPolicyGroup(item));
                            }
                            virtualNetworkGatewayPolicyGroups = array;
                            continue;
                        }
                        if (property0.NameEquals("bgpSettings"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            bgpSettings = BgpSettings.DeserializeBgpSettings(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("customRoutes"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            customRoutes = AddressSpace.DeserializeAddressSpace(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("resourceGuid"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            resourceGuid = property0.Value.GetGuid();
                            continue;
                        }
                        if (property0.NameEquals("provisioningState"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            provisioningState = new NetworkProvisioningState(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("enableDnsForwarding"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            enableDnsForwarding = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("inboundDnsForwardingEndpoint"u8))
                        {
                            inboundDnsForwardingEndpoint = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("vNetExtendedLocationResourceId"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            vNetExtendedLocationResourceId = new ResourceIdentifier(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("natRules"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<VirtualNetworkGatewayNatRuleData> array = new List<VirtualNetworkGatewayNatRuleData>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(VirtualNetworkGatewayNatRuleData.DeserializeVirtualNetworkGatewayNatRuleData(item));
                            }
                            natRules = array;
                            continue;
                        }
                        if (property0.NameEquals("enableBgpRouteTranslationForNat"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            enableBgpRouteTranslationForNat = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("allowVirtualWanTraffic"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            allowVirtualWanTraffic = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("allowRemoteVnetTraffic"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            allowRemoteVnetTraffic = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("adminState"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            adminState = new ExpressRouteGatewayAdminState(property0.Value.GetString());
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new VirtualNetworkGatewayData(id.Value, name.Value, Core.Optional.ToNullable(type), Core.Optional.ToNullable(location), Core.Optional.ToDictionary(tags), extendedLocation, Core.Optional.ToNullable(etag), Core.Optional.ToList(ipConfigurations), Core.Optional.ToNullable(gatewayType), Core.Optional.ToNullable(vpnType), Core.Optional.ToNullable(vpnGatewayGeneration), Core.Optional.ToNullable(enableBgp), Core.Optional.ToNullable(enablePrivateIPAddress), Core.Optional.ToNullable(activeActive), Core.Optional.ToNullable(disableIPSecReplayProtection), gatewayDefaultSite, sku.Value, vpnClientConfiguration.Value, Core.Optional.ToList(virtualNetworkGatewayPolicyGroups), bgpSettings.Value, customRoutes.Value, Core.Optional.ToNullable(resourceGuid), Core.Optional.ToNullable(provisioningState), Core.Optional.ToNullable(enableDnsForwarding), inboundDnsForwardingEndpoint.Value, vNetExtendedLocationResourceId.Value, Core.Optional.ToList(natRules), Core.Optional.ToNullable(enableBgpRouteTranslationForNat), Core.Optional.ToNullable(allowVirtualWanTraffic), Core.Optional.ToNullable(allowRemoteVnetTraffic), Core.Optional.ToNullable(adminState));
        }
    }
}
