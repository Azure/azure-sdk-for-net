// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.Network.Models
{
    /// <summary> A common class for general resource information. </summary>
    public partial class VirtualNetworkGatewayConnectionListEntity : Resource
    {
        /// <summary> Initializes a new instance of VirtualNetworkGatewayConnectionListEntity. </summary>
        /// <param name="virtualNetworkGateway1"> The reference to virtual network gateway resource. </param>
        /// <param name="connectionType"> Gateway connection type. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="virtualNetworkGateway1"/> is null. </exception>
        public VirtualNetworkGatewayConnectionListEntity(VirtualNetworkConnectionGatewayReference virtualNetworkGateway1, VirtualNetworkGatewayConnectionType connectionType)
        {
            if (virtualNetworkGateway1 == null)
            {
                throw new ArgumentNullException(nameof(virtualNetworkGateway1));
            }

            VirtualNetworkGateway1 = virtualNetworkGateway1;
            ConnectionType = connectionType;
            TunnelConnectionStatus = new ChangeTrackingList<TunnelConnectionHealth>();
            IpsecPolicies = new ChangeTrackingList<IpsecPolicy>();
            TrafficSelectorPolicies = new ChangeTrackingList<TrafficSelectorPolicy>();
        }

        /// <summary> Initializes a new instance of VirtualNetworkGatewayConnectionListEntity. </summary>
        /// <param name="id"> Resource ID. </param>
        /// <param name="name"> Resource name. </param>
        /// <param name="type"> Resource type. </param>
        /// <param name="location"> Resource location. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="etag"> A unique read-only string that changes whenever the resource is updated. </param>
        /// <param name="authorizationKey"> The authorizationKey. </param>
        /// <param name="virtualNetworkGateway1"> The reference to virtual network gateway resource. </param>
        /// <param name="virtualNetworkGateway2"> The reference to virtual network gateway resource. </param>
        /// <param name="localNetworkGateway2"> The reference to local network gateway resource. </param>
        /// <param name="connectionType"> Gateway connection type. </param>
        /// <param name="connectionProtocol"> Connection protocol used for this connection. </param>
        /// <param name="routingWeight"> The routing weight. </param>
        /// <param name="sharedKey"> The IPSec shared key. </param>
        /// <param name="connectionStatus"> Virtual Network Gateway connection status. </param>
        /// <param name="tunnelConnectionStatus"> Collection of all tunnels&apos; connection health status. </param>
        /// <param name="egressBytesTransferred"> The egress bytes transferred in this connection. </param>
        /// <param name="ingressBytesTransferred"> The ingress bytes transferred in this connection. </param>
        /// <param name="peer"> The reference to peerings resource. </param>
        /// <param name="enableBgp"> EnableBgp flag. </param>
        /// <param name="usePolicyBasedTrafficSelectors"> Enable policy-based traffic selectors. </param>
        /// <param name="ipsecPolicies"> The IPSec Policies to be considered by this connection. </param>
        /// <param name="trafficSelectorPolicies"> The Traffic Selector Policies to be considered by this connection. </param>
        /// <param name="resourceGuid"> The resource GUID property of the virtual network gateway connection resource. </param>
        /// <param name="provisioningState"> The provisioning state of the virtual network gateway connection resource. </param>
        /// <param name="expressRouteGatewayBypass"> Bypass ExpressRoute Gateway for data forwarding. </param>
        internal VirtualNetworkGatewayConnectionListEntity(string id, string name, string type, string location, IDictionary<string, string> tags, string etag, string authorizationKey, VirtualNetworkConnectionGatewayReference virtualNetworkGateway1, VirtualNetworkConnectionGatewayReference virtualNetworkGateway2, VirtualNetworkConnectionGatewayReference localNetworkGateway2, VirtualNetworkGatewayConnectionType connectionType, VirtualNetworkGatewayConnectionProtocol? connectionProtocol, int? routingWeight, string sharedKey, VirtualNetworkGatewayConnectionStatus? connectionStatus, IReadOnlyList<TunnelConnectionHealth> tunnelConnectionStatus, long? egressBytesTransferred, long? ingressBytesTransferred, SubResource peer, bool? enableBgp, bool? usePolicyBasedTrafficSelectors, IList<IpsecPolicy> ipsecPolicies, IList<TrafficSelectorPolicy> trafficSelectorPolicies, string resourceGuid, ProvisioningState? provisioningState, bool? expressRouteGatewayBypass) : base(id, name, type, location, tags)
        {
            Etag = etag;
            AuthorizationKey = authorizationKey;
            VirtualNetworkGateway1 = virtualNetworkGateway1;
            VirtualNetworkGateway2 = virtualNetworkGateway2;
            LocalNetworkGateway2 = localNetworkGateway2;
            ConnectionType = connectionType;
            ConnectionProtocol = connectionProtocol;
            RoutingWeight = routingWeight;
            SharedKey = sharedKey;
            ConnectionStatus = connectionStatus;
            TunnelConnectionStatus = tunnelConnectionStatus;
            EgressBytesTransferred = egressBytesTransferred;
            IngressBytesTransferred = ingressBytesTransferred;
            Peer = peer;
            EnableBgp = enableBgp;
            UsePolicyBasedTrafficSelectors = usePolicyBasedTrafficSelectors;
            IpsecPolicies = ipsecPolicies;
            TrafficSelectorPolicies = trafficSelectorPolicies;
            ResourceGuid = resourceGuid;
            ProvisioningState = provisioningState;
            ExpressRouteGatewayBypass = expressRouteGatewayBypass;
        }

        /// <summary> A unique read-only string that changes whenever the resource is updated. </summary>
        public string Etag { get; }
        /// <summary> The authorizationKey. </summary>
        public string AuthorizationKey { get; set; }
        /// <summary> The reference to virtual network gateway resource. </summary>
        public VirtualNetworkConnectionGatewayReference VirtualNetworkGateway1 { get; set; }
        /// <summary> The reference to virtual network gateway resource. </summary>
        public VirtualNetworkConnectionGatewayReference VirtualNetworkGateway2 { get; set; }
        /// <summary> The reference to local network gateway resource. </summary>
        public VirtualNetworkConnectionGatewayReference LocalNetworkGateway2 { get; set; }
        /// <summary> Gateway connection type. </summary>
        public VirtualNetworkGatewayConnectionType ConnectionType { get; set; }
        /// <summary> Connection protocol used for this connection. </summary>
        public VirtualNetworkGatewayConnectionProtocol? ConnectionProtocol { get; set; }
        /// <summary> The routing weight. </summary>
        public int? RoutingWeight { get; set; }
        /// <summary> The IPSec shared key. </summary>
        public string SharedKey { get; set; }
        /// <summary> Virtual Network Gateway connection status. </summary>
        public VirtualNetworkGatewayConnectionStatus? ConnectionStatus { get; }
        /// <summary> Collection of all tunnels&apos; connection health status. </summary>
        public IReadOnlyList<TunnelConnectionHealth> TunnelConnectionStatus { get; }
        /// <summary> The egress bytes transferred in this connection. </summary>
        public long? EgressBytesTransferred { get; }
        /// <summary> The ingress bytes transferred in this connection. </summary>
        public long? IngressBytesTransferred { get; }
        /// <summary> The reference to peerings resource. </summary>
        public SubResource Peer { get; set; }
        /// <summary> EnableBgp flag. </summary>
        public bool? EnableBgp { get; set; }
        /// <summary> Enable policy-based traffic selectors. </summary>
        public bool? UsePolicyBasedTrafficSelectors { get; set; }
        /// <summary> The IPSec Policies to be considered by this connection. </summary>
        public IList<IpsecPolicy> IpsecPolicies { get; }
        /// <summary> The Traffic Selector Policies to be considered by this connection. </summary>
        public IList<TrafficSelectorPolicy> TrafficSelectorPolicies { get; }
        /// <summary> The resource GUID property of the virtual network gateway connection resource. </summary>
        public string ResourceGuid { get; }
        /// <summary> The provisioning state of the virtual network gateway connection resource. </summary>
        public ProvisioningState? ProvisioningState { get; }
        /// <summary> Bypass ExpressRoute Gateway for data forwarding. </summary>
        public bool? ExpressRouteGatewayBypass { get; set; }
    }
}
