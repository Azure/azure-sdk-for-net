// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.Network.Models
{
    public partial class ExpressRouteCircuitPeeringConfig : IUtf8JsonSerializable, IModelJsonSerializable<ExpressRouteCircuitPeeringConfig>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<ExpressRouteCircuitPeeringConfig>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<ExpressRouteCircuitPeeringConfig>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<ExpressRouteCircuitPeeringConfig>(this, options.Format);

            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(AdvertisedPublicPrefixes))
            {
                writer.WritePropertyName("advertisedPublicPrefixes"u8);
                writer.WriteStartArray();
                foreach (var item in AdvertisedPublicPrefixes)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(AdvertisedCommunities))
            {
                writer.WritePropertyName("advertisedCommunities"u8);
                writer.WriteStartArray();
                foreach (var item in AdvertisedCommunities)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(LegacyMode))
            {
                writer.WritePropertyName("legacyMode"u8);
                writer.WriteNumberValue(LegacyMode.Value);
            }
            if (Optional.IsDefined(CustomerASN))
            {
                writer.WritePropertyName("customerASN"u8);
                writer.WriteNumberValue(CustomerASN.Value);
            }
            if (Optional.IsDefined(RoutingRegistryName))
            {
                writer.WritePropertyName("routingRegistryName"u8);
                writer.WriteStringValue(RoutingRegistryName);
            }
            if (_rawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _rawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static ExpressRouteCircuitPeeringConfig DeserializeExpressRouteCircuitPeeringConfig(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<IList<string>> advertisedPublicPrefixes = default;
            Optional<IList<string>> advertisedCommunities = default;
            Optional<ExpressRouteCircuitPeeringAdvertisedPublicPrefixState> advertisedPublicPrefixesState = default;
            Optional<int> legacyMode = default;
            Optional<int> customerASN = default;
            Optional<string> routingRegistryName = default;
            Dictionary<string, BinaryData> rawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("advertisedPublicPrefixes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    advertisedPublicPrefixes = array;
                    continue;
                }
                if (property.NameEquals("advertisedCommunities"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    advertisedCommunities = array;
                    continue;
                }
                if (property.NameEquals("advertisedPublicPrefixesState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    advertisedPublicPrefixesState = new ExpressRouteCircuitPeeringAdvertisedPublicPrefixState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("legacyMode"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    legacyMode = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("customerASN"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    customerASN = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("routingRegistryName"u8))
                {
                    routingRegistryName = property.Value.GetString();
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    rawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new ExpressRouteCircuitPeeringConfig(Optional.ToList(advertisedPublicPrefixes), Optional.ToList(advertisedCommunities), Optional.ToNullable(advertisedPublicPrefixesState), Optional.ToNullable(legacyMode), Optional.ToNullable(customerASN), routingRegistryName.Value, rawData);
        }

        ExpressRouteCircuitPeeringConfig IModelJsonSerializable<ExpressRouteCircuitPeeringConfig>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<ExpressRouteCircuitPeeringConfig>(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeExpressRouteCircuitPeeringConfig(doc.RootElement, options);
        }

        BinaryData IModelSerializable<ExpressRouteCircuitPeeringConfig>.Serialize(ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<ExpressRouteCircuitPeeringConfig>(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        ExpressRouteCircuitPeeringConfig IModelSerializable<ExpressRouteCircuitPeeringConfig>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<ExpressRouteCircuitPeeringConfig>(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeExpressRouteCircuitPeeringConfig(doc.RootElement, options);
        }

        /// <summary> Converts a <see cref="ExpressRouteCircuitPeeringConfig"/> into a <see cref="RequestContent"/>. </summary>
        /// <param name="model"> The <see cref="ExpressRouteCircuitPeeringConfig"/> to convert. </param>
        public static implicit operator RequestContent(ExpressRouteCircuitPeeringConfig model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        /// <summary> Converts a <see cref="Response"/> into a <see cref="ExpressRouteCircuitPeeringConfig"/>. </summary>
        /// <param name="response"> The <see cref="Response"/> to convert. </param>
        public static explicit operator ExpressRouteCircuitPeeringConfig(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeExpressRouteCircuitPeeringConfig(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
