// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Network.Models
{
    public partial class PacketCaptureStorageLocation : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(StorageId))
            {
                writer.WritePropertyName("storageId"u8);
                writer.WriteStringValue(StorageId);
            }
            if (Core.Optional.IsDefined(StoragePath))
            {
                writer.WritePropertyName("storagePath"u8);
                writer.WriteStringValue(StoragePath);
            }
            if (Core.Optional.IsDefined(FilePath))
            {
                writer.WritePropertyName("filePath"u8);
                writer.WriteStringValue(FilePath);
            }
            writer.WriteEndObject();
        }

        internal static PacketCaptureStorageLocation DeserializePacketCaptureStorageLocation(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<ResourceIdentifier> storageId = default;
            Core.Optional<string> storagePath = default;
            Core.Optional<string> filePath = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("storageId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    storageId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("storagePath"u8))
                {
                    storagePath = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("filePath"u8))
                {
                    filePath = property.Value.GetString();
                    continue;
                }
            }
            return new PacketCaptureStorageLocation(storageId.Value, storagePath.Value, filePath.Value);
        }
    }
}
