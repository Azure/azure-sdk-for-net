// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.ResourceManager.Network.Models
{
    /// <summary> Parameters that define the IP flow to be verified. </summary>
    public partial class VerificationIPFlowParameters
    {
        /// <summary> Initializes a new instance of VerificationIPFlowParameters. </summary>
        /// <param name="targetResourceId"> The ID of the target resource to perform next-hop on. </param>
        /// <param name="direction"> The direction of the packet represented as a 5-tuple. </param>
        /// <param name="protocol"> Protocol to be verified on. </param>
        /// <param name="localPort"> The local port. Acceptable values are a single integer in the range (0-65535). Support for * for the source port, which depends on the direction. </param>
        /// <param name="remotePort"> The remote port. Acceptable values are a single integer in the range (0-65535). Support for * for the source port, which depends on the direction. </param>
        /// <param name="localIPAddress"> The local IP address. Acceptable values are valid IPv4 addresses. </param>
        /// <param name="remoteIPAddress"> The remote IP address. Acceptable values are valid IPv4 addresses. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="targetResourceId"/>, <paramref name="localPort"/>, <paramref name="remotePort"/>, <paramref name="localIPAddress"/>, or <paramref name="remoteIPAddress"/> is null. </exception>
        public VerificationIPFlowParameters(string targetResourceId, Direction direction, IpFlowProtocol protocol, string localPort, string remotePort, string localIPAddress, string remoteIPAddress)
        {
            if (targetResourceId == null)
            {
                throw new ArgumentNullException(nameof(targetResourceId));
            }
            if (localPort == null)
            {
                throw new ArgumentNullException(nameof(localPort));
            }
            if (remotePort == null)
            {
                throw new ArgumentNullException(nameof(remotePort));
            }
            if (localIPAddress == null)
            {
                throw new ArgumentNullException(nameof(localIPAddress));
            }
            if (remoteIPAddress == null)
            {
                throw new ArgumentNullException(nameof(remoteIPAddress));
            }

            TargetResourceId = targetResourceId;
            Direction = direction;
            Protocol = protocol;
            LocalPort = localPort;
            RemotePort = remotePort;
            LocalIPAddress = localIPAddress;
            RemoteIPAddress = remoteIPAddress;
        }

        /// <summary> The ID of the target resource to perform next-hop on. </summary>
        public string TargetResourceId { get; }
        /// <summary> The direction of the packet represented as a 5-tuple. </summary>
        public Direction Direction { get; }
        /// <summary> Protocol to be verified on. </summary>
        public IpFlowProtocol Protocol { get; }
        /// <summary> The local port. Acceptable values are a single integer in the range (0-65535). Support for * for the source port, which depends on the direction. </summary>
        public string LocalPort { get; }
        /// <summary> The remote port. Acceptable values are a single integer in the range (0-65535). Support for * for the source port, which depends on the direction. </summary>
        public string RemotePort { get; }
        /// <summary> The local IP address. Acceptable values are valid IPv4 addresses. </summary>
        public string LocalIPAddress { get; }
        /// <summary> The remote IP address. Acceptable values are valid IPv4 addresses. </summary>
        public string RemoteIPAddress { get; }
        /// <summary> The NIC ID. (If VM has multiple NICs and IP forwarding is enabled on any of them, then this parameter must be specified. Otherwise optional). </summary>
        public string TargetNicResourceId { get; set; }
    }
}
