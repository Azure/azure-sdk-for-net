// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.Network.Models
{
    /// <summary> NVA Inbound Security Rule resource. </summary>
    public partial class InboundSecurityRule : SubResource
    {
        /// <summary> Initializes a new instance of InboundSecurityRule. </summary>
        public InboundSecurityRule()
        {
            Rules = new ChangeTrackingList<InboundSecurityRules>();
        }

        /// <summary> Initializes a new instance of InboundSecurityRule. </summary>
        /// <param name="id"> Resource ID. </param>
        /// <param name="name"> Name of security rule collection. </param>
        /// <param name="etag"> A unique read-only string that changes whenever the resource is updated. </param>
        /// <param name="type"> NVA inbound security rule type. </param>
        /// <param name="rules"> List of allowed rules. </param>
        /// <param name="provisioningState"> The provisioning state of the resource. </param>
        internal InboundSecurityRule(string id, string name, string etag, string type, IList<InboundSecurityRules> rules, ProvisioningState? provisioningState) : base(id)
        {
            Name = name;
            Etag = etag;
            Type = type;
            Rules = rules;
            ProvisioningState = provisioningState;
        }

        /// <summary> Name of security rule collection. </summary>
        public string Name { get; set; }
        /// <summary> A unique read-only string that changes whenever the resource is updated. </summary>
        public string Etag { get; }
        /// <summary> NVA inbound security rule type. </summary>
        public string Type { get; }
        /// <summary> List of allowed rules. </summary>
        public IList<InboundSecurityRules> Rules { get; }
        /// <summary> The provisioning state of the resource. </summary>
        public ProvisioningState? ProvisioningState { get; }
    }
}
