// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Network.Models
{
    /// <summary> The Network protocol of a Rule condition. </summary>
    public readonly partial struct FirewallPolicyRuleConditionNetworkProtocol : IEquatable<FirewallPolicyRuleConditionNetworkProtocol>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="FirewallPolicyRuleConditionNetworkProtocol"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public FirewallPolicyRuleConditionNetworkProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string TCPValue = "TCP";
        private const string UDPValue = "UDP";
        private const string AnyValue = "Any";
        private const string IcmpValue = "ICMP";

        /// <summary> TCP. </summary>
        public static FirewallPolicyRuleConditionNetworkProtocol TCP { get; } = new FirewallPolicyRuleConditionNetworkProtocol(TCPValue);
        /// <summary> UDP. </summary>
        public static FirewallPolicyRuleConditionNetworkProtocol UDP { get; } = new FirewallPolicyRuleConditionNetworkProtocol(UDPValue);
        /// <summary> Any. </summary>
        public static FirewallPolicyRuleConditionNetworkProtocol Any { get; } = new FirewallPolicyRuleConditionNetworkProtocol(AnyValue);
        /// <summary> ICMP. </summary>
        public static FirewallPolicyRuleConditionNetworkProtocol Icmp { get; } = new FirewallPolicyRuleConditionNetworkProtocol(IcmpValue);
        /// <summary> Determines if two <see cref="FirewallPolicyRuleConditionNetworkProtocol"/> values are the same. </summary>
        public static bool operator ==(FirewallPolicyRuleConditionNetworkProtocol left, FirewallPolicyRuleConditionNetworkProtocol right) => left.Equals(right);
        /// <summary> Determines if two <see cref="FirewallPolicyRuleConditionNetworkProtocol"/> values are not the same. </summary>
        public static bool operator !=(FirewallPolicyRuleConditionNetworkProtocol left, FirewallPolicyRuleConditionNetworkProtocol right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="FirewallPolicyRuleConditionNetworkProtocol"/>. </summary>
        public static implicit operator FirewallPolicyRuleConditionNetworkProtocol(string value) => new FirewallPolicyRuleConditionNetworkProtocol(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is FirewallPolicyRuleConditionNetworkProtocol other && Equals(other);
        /// <inheritdoc />
        public bool Equals(FirewallPolicyRuleConditionNetworkProtocol other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
