// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Network.Models
{
    public partial class ConnectionMonitorTestConfiguration : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("name");
            writer.WriteStringValue(Name);
            if (Optional.IsDefined(TestFrequencySec))
            {
                writer.WritePropertyName("testFrequencySec");
                writer.WriteNumberValue(TestFrequencySec.Value);
            }
            writer.WritePropertyName("protocol");
            writer.WriteStringValue(Protocol.ToString());
            if (Optional.IsDefined(PreferredIPVersion))
            {
                writer.WritePropertyName("preferredIPVersion");
                writer.WriteStringValue(PreferredIPVersion.Value.ToString());
            }
            if (Optional.IsDefined(HttpConfiguration))
            {
                writer.WritePropertyName("httpConfiguration");
                writer.WriteObjectValue(HttpConfiguration);
            }
            if (Optional.IsDefined(TcpConfiguration))
            {
                writer.WritePropertyName("tcpConfiguration");
                writer.WriteObjectValue(TcpConfiguration);
            }
            if (Optional.IsDefined(IcmpConfiguration))
            {
                writer.WritePropertyName("icmpConfiguration");
                writer.WriteObjectValue(IcmpConfiguration);
            }
            if (Optional.IsDefined(SuccessThreshold))
            {
                writer.WritePropertyName("successThreshold");
                writer.WriteObjectValue(SuccessThreshold);
            }
            writer.WriteEndObject();
        }

        internal static ConnectionMonitorTestConfiguration DeserializeConnectionMonitorTestConfiguration(JsonElement element)
        {
            string name = default;
            Optional<int> testFrequencySec = default;
            ConnectionMonitorTestConfigurationProtocol protocol = default;
            Optional<PreferredIPVersion> preferredIPVersion = default;
            Optional<ConnectionMonitorHttpConfiguration> httpConfiguration = default;
            Optional<ConnectionMonitorTcpConfiguration> tcpConfiguration = default;
            Optional<ConnectionMonitorIcmpConfiguration> icmpConfiguration = default;
            Optional<ConnectionMonitorSuccessThreshold> successThreshold = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("testFrequencySec"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    testFrequencySec = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("protocol"))
                {
                    protocol = new ConnectionMonitorTestConfigurationProtocol(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("preferredIPVersion"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    preferredIPVersion = new PreferredIPVersion(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("httpConfiguration"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    httpConfiguration = ConnectionMonitorHttpConfiguration.DeserializeConnectionMonitorHttpConfiguration(property.Value);
                    continue;
                }
                if (property.NameEquals("tcpConfiguration"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    tcpConfiguration = ConnectionMonitorTcpConfiguration.DeserializeConnectionMonitorTcpConfiguration(property.Value);
                    continue;
                }
                if (property.NameEquals("icmpConfiguration"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    icmpConfiguration = ConnectionMonitorIcmpConfiguration.DeserializeConnectionMonitorIcmpConfiguration(property.Value);
                    continue;
                }
                if (property.NameEquals("successThreshold"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    successThreshold = ConnectionMonitorSuccessThreshold.DeserializeConnectionMonitorSuccessThreshold(property.Value);
                    continue;
                }
            }
            return new ConnectionMonitorTestConfiguration(name, Optional.ToNullable(testFrequencySec), protocol, Optional.ToNullable(preferredIPVersion), httpConfiguration.Value, tcpConfiguration.Value, icmpConfiguration.Value, successThreshold.Value);
        }
    }
}
