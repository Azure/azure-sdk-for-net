// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Network.Models
{
    /// <summary> Advertised Public Prefix State that denotes if the prefix is validated or not. </summary>
    public readonly partial struct AdvertisedPublicPrefixPropertiesValidationState : IEquatable<AdvertisedPublicPrefixPropertiesValidationState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AdvertisedPublicPrefixPropertiesValidationState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AdvertisedPublicPrefixPropertiesValidationState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NotConfiguredValue = "NotConfigured";
        private const string ConfiguringValue = "Configuring";
        private const string ConfiguredValue = "Configured";
        private const string ValidationNeededValue = "ValidationNeeded";
        private const string ValidationFailedValue = "ValidationFailed";
        private const string ManualValidationNeededValue = "ManualValidationNeeded";
        private const string AsnValidationFailedValue = "AsnValidationFailed";
        private const string CertificateMissingInRoutingRegistryValue = "CertificateMissingInRoutingRegistry";
        private const string InvalidSignatureEncodingValue = "InvalidSignatureEncoding";
        private const string SignatureVerificationFailedValue = "SignatureVerificationFailed";

        /// <summary> NotConfigured. </summary>
        public static AdvertisedPublicPrefixPropertiesValidationState NotConfigured { get; } = new AdvertisedPublicPrefixPropertiesValidationState(NotConfiguredValue);
        /// <summary> Configuring. </summary>
        public static AdvertisedPublicPrefixPropertiesValidationState Configuring { get; } = new AdvertisedPublicPrefixPropertiesValidationState(ConfiguringValue);
        /// <summary> Configured. </summary>
        public static AdvertisedPublicPrefixPropertiesValidationState Configured { get; } = new AdvertisedPublicPrefixPropertiesValidationState(ConfiguredValue);
        /// <summary> ValidationNeeded. </summary>
        public static AdvertisedPublicPrefixPropertiesValidationState ValidationNeeded { get; } = new AdvertisedPublicPrefixPropertiesValidationState(ValidationNeededValue);
        /// <summary> ValidationFailed. </summary>
        public static AdvertisedPublicPrefixPropertiesValidationState ValidationFailed { get; } = new AdvertisedPublicPrefixPropertiesValidationState(ValidationFailedValue);
        /// <summary> ManualValidationNeeded. </summary>
        public static AdvertisedPublicPrefixPropertiesValidationState ManualValidationNeeded { get; } = new AdvertisedPublicPrefixPropertiesValidationState(ManualValidationNeededValue);
        /// <summary> AsnValidationFailed. </summary>
        public static AdvertisedPublicPrefixPropertiesValidationState AsnValidationFailed { get; } = new AdvertisedPublicPrefixPropertiesValidationState(AsnValidationFailedValue);
        /// <summary> CertificateMissingInRoutingRegistry. </summary>
        public static AdvertisedPublicPrefixPropertiesValidationState CertificateMissingInRoutingRegistry { get; } = new AdvertisedPublicPrefixPropertiesValidationState(CertificateMissingInRoutingRegistryValue);
        /// <summary> InvalidSignatureEncoding. </summary>
        public static AdvertisedPublicPrefixPropertiesValidationState InvalidSignatureEncoding { get; } = new AdvertisedPublicPrefixPropertiesValidationState(InvalidSignatureEncodingValue);
        /// <summary> SignatureVerificationFailed. </summary>
        public static AdvertisedPublicPrefixPropertiesValidationState SignatureVerificationFailed { get; } = new AdvertisedPublicPrefixPropertiesValidationState(SignatureVerificationFailedValue);
        /// <summary> Determines if two <see cref="AdvertisedPublicPrefixPropertiesValidationState"/> values are the same. </summary>
        public static bool operator ==(AdvertisedPublicPrefixPropertiesValidationState left, AdvertisedPublicPrefixPropertiesValidationState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AdvertisedPublicPrefixPropertiesValidationState"/> values are not the same. </summary>
        public static bool operator !=(AdvertisedPublicPrefixPropertiesValidationState left, AdvertisedPublicPrefixPropertiesValidationState right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="AdvertisedPublicPrefixPropertiesValidationState"/>. </summary>
        public static implicit operator AdvertisedPublicPrefixPropertiesValidationState(string value) => new AdvertisedPublicPrefixPropertiesValidationState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AdvertisedPublicPrefixPropertiesValidationState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AdvertisedPublicPrefixPropertiesValidationState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
