// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Network.Models
{
    /// <summary> The NvaNicType. </summary>
    public readonly partial struct NvaNicType : IEquatable<NvaNicType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="NvaNicType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public NvaNicType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PrivateNicValue = "PrivateNic";
        private const string PublicNicValue = "PublicNic";
        private const string AdditionalPrivateNicValue = "AdditionalPrivateNic";
        private const string AdditionalPublicNicValue = "AdditionalPublicNic";

        /// <summary> The private NIC type. </summary>
        public static NvaNicType PrivateNic { get; } = new NvaNicType(PrivateNicValue);
        /// <summary> The public NIC type. </summary>
        public static NvaNicType PublicNic { get; } = new NvaNicType(PublicNicValue);
        /// <summary> An additional private NIC type. </summary>
        public static NvaNicType AdditionalPrivateNic { get; } = new NvaNicType(AdditionalPrivateNicValue);
        /// <summary> An additional public NIC type. </summary>
        public static NvaNicType AdditionalPublicNic { get; } = new NvaNicType(AdditionalPublicNicValue);
        /// <summary> Determines if two <see cref="NvaNicType"/> values are the same. </summary>
        public static bool operator ==(NvaNicType left, NvaNicType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="NvaNicType"/> values are not the same. </summary>
        public static bool operator !=(NvaNicType left, NvaNicType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="NvaNicType"/>. </summary>
        public static implicit operator NvaNicType(string value) => new NvaNicType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is NvaNicType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(NvaNicType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
