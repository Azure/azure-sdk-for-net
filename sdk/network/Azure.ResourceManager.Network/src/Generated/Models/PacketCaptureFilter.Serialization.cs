// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net.ClientModel;
using System.Net.ClientModel.Core;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Network.Models
{
    public partial class PacketCaptureFilter : IUtf8JsonSerializable, IJsonModel<PacketCaptureFilter>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<PacketCaptureFilter>)this).Write(writer, ModelReaderWriterOptions.Wire);

        void IJsonModel<PacketCaptureFilter>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            if ((options.Format != "W" || ((IPersistableModel<PacketCaptureFilter>)this).GetWireFormat(options) != "J") && options.Format != "J")
            {
                throw new InvalidOperationException($"Must use 'J' format when calling the {nameof(IJsonModel<PacketCaptureFilter>)} interface");
            }

            writer.WriteStartObject();
            if (Optional.IsDefined(Protocol))
            {
                writer.WritePropertyName("protocol"u8);
                writer.WriteStringValue(Protocol.Value.ToString());
            }
            if (Optional.IsDefined(LocalIPAddress))
            {
                writer.WritePropertyName("localIPAddress"u8);
                writer.WriteStringValue(LocalIPAddress);
            }
            if (Optional.IsDefined(RemoteIPAddress))
            {
                writer.WritePropertyName("remoteIPAddress"u8);
                writer.WriteStringValue(RemoteIPAddress);
            }
            if (Optional.IsDefined(LocalPort))
            {
                writer.WritePropertyName("localPort"u8);
                writer.WriteStringValue(LocalPort);
            }
            if (Optional.IsDefined(RemotePort))
            {
                writer.WritePropertyName("remotePort"u8);
                writer.WriteStringValue(RemotePort);
            }
            if (_serializedAdditionalRawData != null && options.Format == "J")
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        PacketCaptureFilter IJsonModel<PacketCaptureFilter>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(PacketCaptureFilter)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializePacketCaptureFilter(document.RootElement, options);
        }

        internal static PacketCaptureFilter DeserializePacketCaptureFilter(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelReaderWriterOptions.Wire;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<PcProtocol> protocol = default;
            Optional<string> localIPAddress = default;
            Optional<string> remoteIPAddress = default;
            Optional<string> localPort = default;
            Optional<string> remotePort = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("protocol"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    protocol = new PcProtocol(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("localIPAddress"u8))
                {
                    localIPAddress = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("remoteIPAddress"u8))
                {
                    remoteIPAddress = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("localPort"u8))
                {
                    localPort = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("remotePort"u8))
                {
                    remotePort = property.Value.GetString();
                    continue;
                }
                if (options.Format == "J")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new PacketCaptureFilter(Optional.ToNullable(protocol), localIPAddress.Value, remoteIPAddress.Value, localPort.Value, remotePort.Value, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<PacketCaptureFilter>.Write(ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(PacketCaptureFilter)} does not support '{options.Format}' format.");
            }

            return ModelReaderWriter.Write(this, options);
        }

        PacketCaptureFilter IPersistableModel<PacketCaptureFilter>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(PacketCaptureFilter)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.Parse(data);
            return DeserializePacketCaptureFilter(document.RootElement, options);
        }

        string IPersistableModel<PacketCaptureFilter>.GetWireFormat(ModelReaderWriterOptions options) => "J";
    }
}
