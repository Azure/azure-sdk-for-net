// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Network.Models
{
    /// <summary> The IKE integrity algorithm (IKE phase 2). </summary>
    public readonly partial struct IkeIntegrity : IEquatable<IkeIntegrity>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="IkeIntegrity"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public IkeIntegrity(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string MD5Value = "MD5";
        private const string SHA1Value = "SHA1";
        private const string SHA256Value = "SHA256";
        private const string SHA384Value = "SHA384";
        private const string Gcmaes256Value = "GCMAES256";
        private const string Gcmaes128Value = "GCMAES128";

        /// <summary> MD5. </summary>
        public static IkeIntegrity MD5 { get; } = new IkeIntegrity(MD5Value);
        /// <summary> SHA1. </summary>
        public static IkeIntegrity SHA1 { get; } = new IkeIntegrity(SHA1Value);
        /// <summary> SHA256. </summary>
        public static IkeIntegrity SHA256 { get; } = new IkeIntegrity(SHA256Value);
        /// <summary> SHA384. </summary>
        public static IkeIntegrity SHA384 { get; } = new IkeIntegrity(SHA384Value);
        /// <summary> GCMAES256. </summary>
        public static IkeIntegrity Gcmaes256 { get; } = new IkeIntegrity(Gcmaes256Value);
        /// <summary> GCMAES128. </summary>
        public static IkeIntegrity Gcmaes128 { get; } = new IkeIntegrity(Gcmaes128Value);
        /// <summary> Determines if two <see cref="IkeIntegrity"/> values are the same. </summary>
        public static bool operator ==(IkeIntegrity left, IkeIntegrity right) => left.Equals(right);
        /// <summary> Determines if two <see cref="IkeIntegrity"/> values are not the same. </summary>
        public static bool operator !=(IkeIntegrity left, IkeIntegrity right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="IkeIntegrity"/>. </summary>
        public static implicit operator IkeIntegrity(string value) => new IkeIntegrity(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is IkeIntegrity other && Equals(other);
        /// <inheritdoc />
        public bool Equals(IkeIntegrity other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
