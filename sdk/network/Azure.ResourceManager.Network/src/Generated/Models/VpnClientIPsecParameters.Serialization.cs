// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Network.Models
{
    public partial class VpnClientIPsecParameters : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("saLifeTimeSeconds"u8);
            writer.WriteNumberValue(SaLifeTimeSeconds);
            writer.WritePropertyName("saDataSizeKilobytes"u8);
            writer.WriteNumberValue(SaDataSizeKilobytes);
            writer.WritePropertyName("ipsecEncryption"u8);
            writer.WriteStringValue(IPsecEncryption.ToString());
            writer.WritePropertyName("ipsecIntegrity"u8);
            writer.WriteStringValue(IPsecIntegrity.ToString());
            writer.WritePropertyName("ikeEncryption"u8);
            writer.WriteStringValue(IkeEncryption.ToString());
            writer.WritePropertyName("ikeIntegrity"u8);
            writer.WriteStringValue(IkeIntegrity.ToString());
            writer.WritePropertyName("dhGroup"u8);
            writer.WriteStringValue(DhGroup.ToString());
            writer.WritePropertyName("pfsGroup"u8);
            writer.WriteStringValue(PfsGroup.ToString());
            writer.WriteEndObject();
        }

        internal static VpnClientIPsecParameters DeserializeVpnClientIPsecParameters(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            int saLifeTimeSeconds = default;
            int saDataSizeKilobytes = default;
            IPsecEncryption ipsecEncryption = default;
            IPsecIntegrity ipsecIntegrity = default;
            IkeEncryption ikeEncryption = default;
            IkeIntegrity ikeIntegrity = default;
            DHGroup dhGroup = default;
            PfsGroup pfsGroup = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("saLifeTimeSeconds"u8))
                {
                    saLifeTimeSeconds = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("saDataSizeKilobytes"u8))
                {
                    saDataSizeKilobytes = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("ipsecEncryption"u8))
                {
                    ipsecEncryption = new IPsecEncryption(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("ipsecIntegrity"u8))
                {
                    ipsecIntegrity = new IPsecIntegrity(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("ikeEncryption"u8))
                {
                    ikeEncryption = new IkeEncryption(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("ikeIntegrity"u8))
                {
                    ikeIntegrity = new IkeIntegrity(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("dhGroup"u8))
                {
                    dhGroup = new DHGroup(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("pfsGroup"u8))
                {
                    pfsGroup = new PfsGroup(property.Value.GetString());
                    continue;
                }
            }
            return new VpnClientIPsecParameters(saLifeTimeSeconds, saDataSizeKilobytes, ipsecEncryption, ipsecIntegrity, ikeEncryption, ikeIntegrity, dhGroup, pfsGroup);
        }
    }
}
