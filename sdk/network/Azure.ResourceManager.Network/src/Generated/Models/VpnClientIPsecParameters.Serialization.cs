// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Network.Models
{
    public partial class VpnClientIPsecParameters : IUtf8JsonSerializable, IJsonModel<VpnClientIPsecParameters>, IPersistableModel<VpnClientIPsecParameters>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<VpnClientIPsecParameters>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<VpnClientIPsecParameters>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<VpnClientIPsecParameters>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(VpnClientIPsecParameters)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            writer.WritePropertyName("saLifeTimeSeconds"u8);
            writer.WriteNumberValue(SaLifeTimeSeconds);
            writer.WritePropertyName("saDataSizeKilobytes"u8);
            writer.WriteNumberValue(SaDataSizeKilobytes);
            writer.WritePropertyName("ipsecEncryption"u8);
            writer.WriteStringValue(IPsecEncryption.ToString());
            writer.WritePropertyName("ipsecIntegrity"u8);
            writer.WriteStringValue(IPsecIntegrity.ToString());
            writer.WritePropertyName("ikeEncryption"u8);
            writer.WriteStringValue(IkeEncryption.ToString());
            writer.WritePropertyName("ikeIntegrity"u8);
            writer.WriteStringValue(IkeIntegrity.ToString());
            writer.WritePropertyName("dhGroup"u8);
            writer.WriteStringValue(DhGroup.ToString());
            writer.WritePropertyName("pfsGroup"u8);
            writer.WriteStringValue(PfsGroup.ToString());
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        VpnClientIPsecParameters IJsonModel<VpnClientIPsecParameters>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<VpnClientIPsecParameters>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(VpnClientIPsecParameters)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeVpnClientIPsecParameters(document.RootElement, options);
        }

        internal static VpnClientIPsecParameters DeserializeVpnClientIPsecParameters(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            int saLifeTimeSeconds = default;
            int saDataSizeKilobytes = default;
            IPsecEncryption ipsecEncryption = default;
            IPsecIntegrity ipsecIntegrity = default;
            IkeEncryption ikeEncryption = default;
            IkeIntegrity ikeIntegrity = default;
            DHGroup dhGroup = default;
            PfsGroup pfsGroup = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("saLifeTimeSeconds"u8))
                {
                    saLifeTimeSeconds = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("saDataSizeKilobytes"u8))
                {
                    saDataSizeKilobytes = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("ipsecEncryption"u8))
                {
                    ipsecEncryption = new IPsecEncryption(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("ipsecIntegrity"u8))
                {
                    ipsecIntegrity = new IPsecIntegrity(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("ikeEncryption"u8))
                {
                    ikeEncryption = new IkeEncryption(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("ikeIntegrity"u8))
                {
                    ikeIntegrity = new IkeIntegrity(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("dhGroup"u8))
                {
                    dhGroup = new DHGroup(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("pfsGroup"u8))
                {
                    pfsGroup = new PfsGroup(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new VpnClientIPsecParameters(saLifeTimeSeconds, saDataSizeKilobytes, ipsecEncryption, ipsecIntegrity, ikeEncryption, ikeIntegrity, dhGroup, pfsGroup, serializedAdditionalRawData);
        }

        private BinaryData SerializeBicep(ModelReaderWriterOptions options)
        {
            StringBuilder builder = new StringBuilder();
            builder.AppendLine("{");

            if (Optional.IsDefined(SaLifeTimeSeconds))
            {
                builder.Append("  saLifeTimeSeconds:");
                builder.AppendLine($" '{SaLifeTimeSeconds.ToString()}'");
            }

            if (Optional.IsDefined(SaDataSizeKilobytes))
            {
                builder.Append("  saDataSizeKilobytes:");
                builder.AppendLine($" '{SaDataSizeKilobytes.ToString()}'");
            }

            if (Optional.IsDefined(IPsecEncryption))
            {
                builder.Append("  ipsecEncryption:");
                builder.AppendLine($" '{IPsecEncryption.ToString()}'");
            }

            if (Optional.IsDefined(IPsecIntegrity))
            {
                builder.Append("  ipsecIntegrity:");
                builder.AppendLine($" '{IPsecIntegrity.ToString()}'");
            }

            if (Optional.IsDefined(IkeEncryption))
            {
                builder.Append("  ikeEncryption:");
                builder.AppendLine($" '{IkeEncryption.ToString()}'");
            }

            if (Optional.IsDefined(IkeIntegrity))
            {
                builder.Append("  ikeIntegrity:");
                builder.AppendLine($" '{IkeIntegrity.ToString()}'");
            }

            if (Optional.IsDefined(DhGroup))
            {
                builder.Append("  dhGroup:");
                builder.AppendLine($" '{DhGroup.ToString()}'");
            }

            if (Optional.IsDefined(PfsGroup))
            {
                builder.Append("  pfsGroup:");
                builder.AppendLine($" '{PfsGroup.ToString()}'");
            }

            builder.AppendLine("}");
            return BinaryData.FromString(builder.ToString());
        }

        private void AppendChildObject(StringBuilder stringBuilder, object childObject, ModelReaderWriterOptions options, int spaces)
        {
            string indent = new string(' ', spaces);
            BinaryData data = ModelReaderWriter.Write(childObject, options);
            string[] lines = data.ToString().Split(Environment.NewLine.ToCharArray(), StringSplitOptions.RemoveEmptyEntries);
            foreach (var line in lines)
            {
                stringBuilder.AppendLine($"{indent}{line}");
            }
        }

        BinaryData IPersistableModel<VpnClientIPsecParameters>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<VpnClientIPsecParameters>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                case "B":
                    return SerializeBicep(options);
                default:
                    throw new FormatException($"The model {nameof(VpnClientIPsecParameters)} does not support '{options.Format}' format.");
            }
        }

        VpnClientIPsecParameters IPersistableModel<VpnClientIPsecParameters>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<VpnClientIPsecParameters>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeVpnClientIPsecParameters(document.RootElement, options);
                    }
                case "B":
                    throw new InvalidOperationException("Bicep deserialization is not supported for this type.");
                default:
                    throw new FormatException($"The model {nameof(VpnClientIPsecParameters)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<VpnClientIPsecParameters>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
