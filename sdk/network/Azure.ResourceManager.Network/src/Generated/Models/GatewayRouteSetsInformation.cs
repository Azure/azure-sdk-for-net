// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.Network.Models
{
    /// <summary> Gateway Route Sets Information. </summary>
    public partial class GatewayRouteSetsInformation
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="GatewayRouteSetsInformation"/>. </summary>
        internal GatewayRouteSetsInformation()
        {
            RouteSets = new ChangeTrackingList<GatewayRouteSet>();
            CircuitsMetadataMap = new ChangeTrackingDictionary<string, CircuitMetadataMap>();
        }

        /// <summary> Initializes a new instance of <see cref="GatewayRouteSetsInformation"/>. </summary>
        /// <param name="lastComputedOn"> Timestamp denoting the last time when the route sets were computed for the gateway. </param>
        /// <param name="nextEligibleComputeOn"> Timestamp denoting the next eligible time to re-compute the route sets for the gateway. </param>
        /// <param name="routeSetVersion"> Version for the route set. </param>
        /// <param name="routeSets"> List of Gateway Route Sets. </param>
        /// <param name="circuitsMetadataMap"> Dictionary containing map of the circuit id and circuit details. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal GatewayRouteSetsInformation(DateTimeOffset? lastComputedOn, DateTimeOffset? nextEligibleComputeOn, string routeSetVersion, IReadOnlyList<GatewayRouteSet> routeSets, IReadOnlyDictionary<string, CircuitMetadataMap> circuitsMetadataMap, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            LastComputedOn = lastComputedOn;
            NextEligibleComputeOn = nextEligibleComputeOn;
            RouteSetVersion = routeSetVersion;
            RouteSets = routeSets;
            CircuitsMetadataMap = circuitsMetadataMap;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Timestamp denoting the last time when the route sets were computed for the gateway. </summary>
        public DateTimeOffset? LastComputedOn { get; }
        /// <summary> Timestamp denoting the next eligible time to re-compute the route sets for the gateway. </summary>
        public DateTimeOffset? NextEligibleComputeOn { get; }
        /// <summary> Version for the route set. </summary>
        public string RouteSetVersion { get; }
        /// <summary> List of Gateway Route Sets. </summary>
        public IReadOnlyList<GatewayRouteSet> RouteSets { get; }
        /// <summary> Dictionary containing map of the circuit id and circuit details. </summary>
        public IReadOnlyDictionary<string, CircuitMetadataMap> CircuitsMetadataMap { get; }
    }
}
