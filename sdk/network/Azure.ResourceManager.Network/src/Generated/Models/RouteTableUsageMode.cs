// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Network.Models
{
    /// <summary> Route table usage mode defines which route table will be used by the configuration. If not defined, this will default to 'ManagedOnly'. </summary>
    public readonly partial struct RouteTableUsageMode : IEquatable<RouteTableUsageMode>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="RouteTableUsageMode"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public RouteTableUsageMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ManagedOnlyValue = "ManagedOnly";
        private const string UseExistingValue = "UseExisting";

        /// <summary> Only route tables managed by the routing configuration will be used. </summary>
        public static RouteTableUsageMode ManagedOnly { get; } = new RouteTableUsageMode(ManagedOnlyValue);
        /// <summary> Use existing user-defined route tables already associated with resources. </summary>
        public static RouteTableUsageMode UseExisting { get; } = new RouteTableUsageMode(UseExistingValue);
        /// <summary> Determines if two <see cref="RouteTableUsageMode"/> values are the same. </summary>
        public static bool operator ==(RouteTableUsageMode left, RouteTableUsageMode right) => left.Equals(right);
        /// <summary> Determines if two <see cref="RouteTableUsageMode"/> values are not the same. </summary>
        public static bool operator !=(RouteTableUsageMode left, RouteTableUsageMode right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="RouteTableUsageMode"/>. </summary>
        public static implicit operator RouteTableUsageMode(string value) => new RouteTableUsageMode(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is RouteTableUsageMode other && Equals(other);
        /// <inheritdoc />
        public bool Equals(RouteTableUsageMode other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
