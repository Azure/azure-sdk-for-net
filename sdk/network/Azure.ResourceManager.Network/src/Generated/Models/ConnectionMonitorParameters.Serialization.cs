// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Network.Models
{
    public partial class ConnectionMonitorParameters : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Source != null)
            {
                writer.WritePropertyName("source");
                writer.WriteObjectValue(Source);
            }
            if (Destination != null)
            {
                writer.WritePropertyName("destination");
                writer.WriteObjectValue(Destination);
            }
            if (AutoStart != null)
            {
                writer.WritePropertyName("autoStart");
                writer.WriteBooleanValue(AutoStart.Value);
            }
            if (MonitoringIntervalInSeconds != null)
            {
                writer.WritePropertyName("monitoringIntervalInSeconds");
                writer.WriteNumberValue(MonitoringIntervalInSeconds.Value);
            }
            if (Endpoints != null)
            {
                writer.WritePropertyName("endpoints");
                writer.WriteStartArray();
                foreach (var item in Endpoints)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (TestConfigurations != null)
            {
                writer.WritePropertyName("testConfigurations");
                writer.WriteStartArray();
                foreach (var item in TestConfigurations)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (TestGroups != null)
            {
                writer.WritePropertyName("testGroups");
                writer.WriteStartArray();
                foreach (var item in TestGroups)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Outputs != null)
            {
                writer.WritePropertyName("outputs");
                writer.WriteStartArray();
                foreach (var item in Outputs)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Notes != null)
            {
                writer.WritePropertyName("notes");
                writer.WriteStringValue(Notes);
            }
            writer.WriteEndObject();
        }

        internal static ConnectionMonitorParameters DeserializeConnectionMonitorParameters(JsonElement element)
        {
            ConnectionMonitorSource source = default;
            ConnectionMonitorDestination destination = default;
            bool? autoStart = default;
            int? monitoringIntervalInSeconds = default;
            IList<ConnectionMonitorEndpoint> endpoints = default;
            IList<ConnectionMonitorTestConfiguration> testConfigurations = default;
            IList<ConnectionMonitorTestGroup> testGroups = default;
            IList<ConnectionMonitorOutput> outputs = default;
            string notes = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("source"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    source = ConnectionMonitorSource.DeserializeConnectionMonitorSource(property.Value);
                    continue;
                }
                if (property.NameEquals("destination"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    destination = ConnectionMonitorDestination.DeserializeConnectionMonitorDestination(property.Value);
                    continue;
                }
                if (property.NameEquals("autoStart"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    autoStart = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("monitoringIntervalInSeconds"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    monitoringIntervalInSeconds = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("endpoints"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ConnectionMonitorEndpoint> array = new List<ConnectionMonitorEndpoint>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(ConnectionMonitorEndpoint.DeserializeConnectionMonitorEndpoint(item));
                        }
                    }
                    endpoints = array;
                    continue;
                }
                if (property.NameEquals("testConfigurations"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ConnectionMonitorTestConfiguration> array = new List<ConnectionMonitorTestConfiguration>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(ConnectionMonitorTestConfiguration.DeserializeConnectionMonitorTestConfiguration(item));
                        }
                    }
                    testConfigurations = array;
                    continue;
                }
                if (property.NameEquals("testGroups"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ConnectionMonitorTestGroup> array = new List<ConnectionMonitorTestGroup>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(ConnectionMonitorTestGroup.DeserializeConnectionMonitorTestGroup(item));
                        }
                    }
                    testGroups = array;
                    continue;
                }
                if (property.NameEquals("outputs"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ConnectionMonitorOutput> array = new List<ConnectionMonitorOutput>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(ConnectionMonitorOutput.DeserializeConnectionMonitorOutput(item));
                        }
                    }
                    outputs = array;
                    continue;
                }
                if (property.NameEquals("notes"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    notes = property.Value.GetString();
                    continue;
                }
            }
            return new ConnectionMonitorParameters(source, destination, autoStart, monitoringIntervalInSeconds, endpoints, testConfigurations, testGroups, outputs, notes);
        }
    }
}
