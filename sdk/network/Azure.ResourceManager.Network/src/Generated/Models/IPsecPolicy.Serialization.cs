// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.Network.Models
{
    public partial class IPsecPolicy : IUtf8JsonSerializable, IModelJsonSerializable<IPsecPolicy>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<IPsecPolicy>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<IPsecPolicy>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            writer.WriteStartObject();
            writer.WritePropertyName("saLifeTimeSeconds"u8);
            writer.WriteNumberValue(SaLifeTimeSeconds);
            writer.WritePropertyName("saDataSizeKilobytes"u8);
            writer.WriteNumberValue(SaDataSizeKilobytes);
            writer.WritePropertyName("ipsecEncryption"u8);
            writer.WriteStringValue(IPsecEncryption.ToString());
            writer.WritePropertyName("ipsecIntegrity"u8);
            writer.WriteStringValue(IPsecIntegrity.ToString());
            writer.WritePropertyName("ikeEncryption"u8);
            writer.WriteStringValue(IkeEncryption.ToString());
            writer.WritePropertyName("ikeIntegrity"u8);
            writer.WriteStringValue(IkeIntegrity.ToString());
            writer.WritePropertyName("dhGroup"u8);
            writer.WriteStringValue(DhGroup.ToString());
            writer.WritePropertyName("pfsGroup"u8);
            writer.WriteStringValue(PfsGroup.ToString());
            if (_rawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _rawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static IPsecPolicy DeserializeIPsecPolicy(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            int saLifeTimeSeconds = default;
            int saDataSizeKilobytes = default;
            IPsecEncryption ipsecEncryption = default;
            IPsecIntegrity ipsecIntegrity = default;
            IkeEncryption ikeEncryption = default;
            IkeIntegrity ikeIntegrity = default;
            DHGroup dhGroup = default;
            PfsGroup pfsGroup = default;
            Dictionary<string, BinaryData> rawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("saLifeTimeSeconds"u8))
                {
                    saLifeTimeSeconds = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("saDataSizeKilobytes"u8))
                {
                    saDataSizeKilobytes = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("ipsecEncryption"u8))
                {
                    ipsecEncryption = new IPsecEncryption(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("ipsecIntegrity"u8))
                {
                    ipsecIntegrity = new IPsecIntegrity(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("ikeEncryption"u8))
                {
                    ikeEncryption = new IkeEncryption(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("ikeIntegrity"u8))
                {
                    ikeIntegrity = new IkeIntegrity(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("dhGroup"u8))
                {
                    dhGroup = new DHGroup(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("pfsGroup"u8))
                {
                    pfsGroup = new PfsGroup(property.Value.GetString());
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    rawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new IPsecPolicy(saLifeTimeSeconds, saDataSizeKilobytes, ipsecEncryption, ipsecIntegrity, ikeEncryption, ikeIntegrity, dhGroup, pfsGroup, rawData);
        }

        IPsecPolicy IModelJsonSerializable<IPsecPolicy>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeIPsecPolicy(doc.RootElement, options);
        }

        BinaryData IModelSerializable<IPsecPolicy>.Serialize(ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        IPsecPolicy IModelSerializable<IPsecPolicy>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeIPsecPolicy(doc.RootElement, options);
        }

        public static implicit operator RequestContent(IPsecPolicy model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        public static explicit operator IPsecPolicy(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeIPsecPolicy(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
