// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Network.Models
{
    /// <summary> The origin of the issue. </summary>
    public readonly partial struct ConnectivityIssueOrigin : IEquatable<ConnectivityIssueOrigin>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ConnectivityIssueOrigin"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ConnectivityIssueOrigin(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string LocalValue = "Local";
        private const string InboundValue = "Inbound";
        private const string OutboundValue = "Outbound";

        /// <summary> Local. </summary>
        public static ConnectivityIssueOrigin Local { get; } = new ConnectivityIssueOrigin(LocalValue);
        /// <summary> Inbound. </summary>
        public static ConnectivityIssueOrigin Inbound { get; } = new ConnectivityIssueOrigin(InboundValue);
        /// <summary> Outbound. </summary>
        public static ConnectivityIssueOrigin Outbound { get; } = new ConnectivityIssueOrigin(OutboundValue);
        /// <summary> Determines if two <see cref="ConnectivityIssueOrigin"/> values are the same. </summary>
        public static bool operator ==(ConnectivityIssueOrigin left, ConnectivityIssueOrigin right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ConnectivityIssueOrigin"/> values are not the same. </summary>
        public static bool operator !=(ConnectivityIssueOrigin left, ConnectivityIssueOrigin right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ConnectivityIssueOrigin"/>. </summary>
        public static implicit operator ConnectivityIssueOrigin(string value) => new ConnectivityIssueOrigin(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ConnectivityIssueOrigin other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ConnectivityIssueOrigin other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
