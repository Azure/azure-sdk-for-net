// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Network.Models
{
    public partial class ConnectionMonitorResultProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState");
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (Optional.IsDefined(StartTime))
            {
                writer.WritePropertyName("startTime");
                writer.WriteStringValue(StartTime.Value, "O");
            }
            if (Optional.IsDefined(MonitoringStatus))
            {
                writer.WritePropertyName("monitoringStatus");
                writer.WriteStringValue(MonitoringStatus);
            }
            if (Optional.IsDefined(ConnectionMonitorType))
            {
                writer.WritePropertyName("connectionMonitorType");
                writer.WriteStringValue(ConnectionMonitorType.Value.ToString());
            }
            if (Optional.IsDefined(Source))
            {
                writer.WritePropertyName("source");
                writer.WriteObjectValue(Source);
            }
            if (Optional.IsDefined(Destination))
            {
                writer.WritePropertyName("destination");
                writer.WriteObjectValue(Destination);
            }
            if (Optional.IsDefined(AutoStart))
            {
                writer.WritePropertyName("autoStart");
                writer.WriteBooleanValue(AutoStart.Value);
            }
            if (Optional.IsDefined(MonitoringIntervalInSeconds))
            {
                writer.WritePropertyName("monitoringIntervalInSeconds");
                writer.WriteNumberValue(MonitoringIntervalInSeconds.Value);
            }
            if (Optional.IsCollectionDefined(Endpoints))
            {
                writer.WritePropertyName("endpoints");
                writer.WriteStartArray();
                foreach (var item in Endpoints)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(TestConfigurations))
            {
                writer.WritePropertyName("testConfigurations");
                writer.WriteStartArray();
                foreach (var item in TestConfigurations)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(TestGroups))
            {
                writer.WritePropertyName("testGroups");
                writer.WriteStartArray();
                foreach (var item in TestGroups)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Outputs))
            {
                writer.WritePropertyName("outputs");
                writer.WriteStartArray();
                foreach (var item in Outputs)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Notes))
            {
                writer.WritePropertyName("notes");
                writer.WriteStringValue(Notes);
            }
            writer.WriteEndObject();
        }

        internal static ConnectionMonitorResultProperties DeserializeConnectionMonitorResultProperties(JsonElement element)
        {
            Optional<ProvisioningState> provisioningState = default;
            Optional<DateTimeOffset> startTime = default;
            Optional<string> monitoringStatus = default;
            Optional<ConnectionMonitorType> connectionMonitorType = default;
            Optional<ConnectionMonitorSource> source = default;
            Optional<ConnectionMonitorDestination> destination = default;
            Optional<bool> autoStart = default;
            Optional<int> monitoringIntervalInSeconds = default;
            Optional<IList<ConnectionMonitorEndpoint>> endpoints = default;
            Optional<IList<ConnectionMonitorTestConfiguration>> testConfigurations = default;
            Optional<IList<ConnectionMonitorTestGroup>> testGroups = default;
            Optional<IList<ConnectionMonitorOutput>> outputs = default;
            Optional<string> notes = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("provisioningState"))
                {
                    provisioningState = new ProvisioningState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("startTime"))
                {
                    startTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("monitoringStatus"))
                {
                    monitoringStatus = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("connectionMonitorType"))
                {
                    connectionMonitorType = new ConnectionMonitorType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("source"))
                {
                    source = ConnectionMonitorSource.DeserializeConnectionMonitorSource(property.Value);
                    continue;
                }
                if (property.NameEquals("destination"))
                {
                    destination = ConnectionMonitorDestination.DeserializeConnectionMonitorDestination(property.Value);
                    continue;
                }
                if (property.NameEquals("autoStart"))
                {
                    autoStart = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("monitoringIntervalInSeconds"))
                {
                    monitoringIntervalInSeconds = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("endpoints"))
                {
                    List<ConnectionMonitorEndpoint> array = new List<ConnectionMonitorEndpoint>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ConnectionMonitorEndpoint.DeserializeConnectionMonitorEndpoint(item));
                    }
                    endpoints = array;
                    continue;
                }
                if (property.NameEquals("testConfigurations"))
                {
                    List<ConnectionMonitorTestConfiguration> array = new List<ConnectionMonitorTestConfiguration>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ConnectionMonitorTestConfiguration.DeserializeConnectionMonitorTestConfiguration(item));
                    }
                    testConfigurations = array;
                    continue;
                }
                if (property.NameEquals("testGroups"))
                {
                    List<ConnectionMonitorTestGroup> array = new List<ConnectionMonitorTestGroup>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ConnectionMonitorTestGroup.DeserializeConnectionMonitorTestGroup(item));
                    }
                    testGroups = array;
                    continue;
                }
                if (property.NameEquals("outputs"))
                {
                    List<ConnectionMonitorOutput> array = new List<ConnectionMonitorOutput>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ConnectionMonitorOutput.DeserializeConnectionMonitorOutput(item));
                    }
                    outputs = array;
                    continue;
                }
                if (property.NameEquals("notes"))
                {
                    notes = property.Value.GetString();
                    continue;
                }
            }
            return new ConnectionMonitorResultProperties(source.Value, destination.Value, Optional.ToNullable(autoStart), Optional.ToNullable(monitoringIntervalInSeconds), Optional.ToList(endpoints), Optional.ToList(testConfigurations), Optional.ToList(testGroups), Optional.ToList(outputs), notes.Value, Optional.ToNullable(provisioningState), Optional.ToNullable(startTime), monitoringStatus.Value, Optional.ToNullable(connectionMonitorType));
        }
    }
}
