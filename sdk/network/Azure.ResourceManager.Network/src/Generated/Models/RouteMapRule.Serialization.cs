// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Network.Models
{
    public partial class RouteMapRule : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Name))
            {
                writer.WritePropertyName("name"u8);
                writer.WriteStringValue(Name);
            }
            if (Optional.IsCollectionDefined(MatchCriteria))
            {
                writer.WritePropertyName("matchCriteria"u8);
                writer.WriteStartArray();
                foreach (var item in MatchCriteria)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Actions))
            {
                writer.WritePropertyName("actions"u8);
                writer.WriteStartArray();
                foreach (var item in Actions)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(NextStepIfMatched))
            {
                writer.WritePropertyName("nextStepIfMatched"u8);
                writer.WriteStringValue(NextStepIfMatched.Value.ToString());
            }
            writer.WriteEndObject();
        }

        internal static RouteMapRule DeserializeRouteMapRule(JsonElement element)
        {
            Optional<string> name = default;
            Optional<IList<Criterion>> matchCriteria = default;
            Optional<IList<Action>> actions = default;
            Optional<NextStep> nextStepIfMatched = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("matchCriteria"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<Criterion> array = new List<Criterion>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Criterion.DeserializeCriterion(item));
                    }
                    matchCriteria = array;
                    continue;
                }
                if (property.NameEquals("actions"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<Action> array = new List<Action>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Action.DeserializeAction(item));
                    }
                    actions = array;
                    continue;
                }
                if (property.NameEquals("nextStepIfMatched"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    nextStepIfMatched = new NextStep(property.Value.GetString());
                    continue;
                }
            }
            return new RouteMapRule(name.Value, Optional.ToList(matchCriteria), Optional.ToList(actions), Optional.ToNullable(nextStepIfMatched));
        }
    }
}
