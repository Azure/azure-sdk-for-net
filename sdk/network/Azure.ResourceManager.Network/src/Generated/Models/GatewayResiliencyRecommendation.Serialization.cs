// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Network.Models
{
    public partial class GatewayResiliencyRecommendation : IUtf8JsonSerializable, IJsonModel<GatewayResiliencyRecommendation>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<GatewayResiliencyRecommendation>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<GatewayResiliencyRecommendation>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<GatewayResiliencyRecommendation>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(GatewayResiliencyRecommendation)} does not support writing '{format}' format.");
            }

            if (Optional.IsDefined(RecommendationTitle))
            {
                writer.WritePropertyName("recommendationTitle"u8);
                writer.WriteStringValue(RecommendationTitle);
            }
            if (Optional.IsDefined(RecommendationId))
            {
                writer.WritePropertyName("recommendationId"u8);
                writer.WriteStringValue(RecommendationId);
            }
            if (Optional.IsDefined(Severity))
            {
                writer.WritePropertyName("severity"u8);
                writer.WriteStringValue(Severity);
            }
            if (Optional.IsDefined(RecommendationText))
            {
                writer.WritePropertyName("recommendationText"u8);
                writer.WriteStringValue(RecommendationText);
            }
            if (Optional.IsDefined(CallToActionText))
            {
                writer.WritePropertyName("callToActionText"u8);
                writer.WriteStringValue(CallToActionText);
            }
            if (Optional.IsDefined(CallToActionLink))
            {
                writer.WritePropertyName("callToActionLink"u8);
                writer.WriteStringValue(CallToActionLink);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        GatewayResiliencyRecommendation IJsonModel<GatewayResiliencyRecommendation>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<GatewayResiliencyRecommendation>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(GatewayResiliencyRecommendation)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeGatewayResiliencyRecommendation(document.RootElement, options);
        }

        internal static GatewayResiliencyRecommendation DeserializeGatewayResiliencyRecommendation(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string recommendationTitle = default;
            string recommendationId = default;
            string severity = default;
            string recommendationText = default;
            string callToActionText = default;
            string callToActionLink = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("recommendationTitle"u8))
                {
                    recommendationTitle = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("recommendationId"u8))
                {
                    recommendationId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("severity"u8))
                {
                    severity = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("recommendationText"u8))
                {
                    recommendationText = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("callToActionText"u8))
                {
                    callToActionText = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("callToActionLink"u8))
                {
                    callToActionLink = property.Value.GetString();
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new GatewayResiliencyRecommendation(
                recommendationTitle,
                recommendationId,
                severity,
                recommendationText,
                callToActionText,
                callToActionLink,
                serializedAdditionalRawData);
        }

        private BinaryData SerializeBicep(ModelReaderWriterOptions options)
        {
            StringBuilder builder = new StringBuilder();
            BicepModelReaderWriterOptions bicepOptions = options as BicepModelReaderWriterOptions;
            IDictionary<string, string> propertyOverrides = null;
            bool hasObjectOverride = bicepOptions != null && bicepOptions.PropertyOverrides.TryGetValue(this, out propertyOverrides);
            bool hasPropertyOverride = false;
            string propertyOverride = null;

            builder.AppendLine("{");

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(RecommendationTitle), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  recommendationTitle: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(RecommendationTitle))
                {
                    builder.Append("  recommendationTitle: ");
                    if (RecommendationTitle.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{RecommendationTitle}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{RecommendationTitle}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(RecommendationId), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  recommendationId: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(RecommendationId))
                {
                    builder.Append("  recommendationId: ");
                    if (RecommendationId.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{RecommendationId}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{RecommendationId}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(Severity), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  severity: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(Severity))
                {
                    builder.Append("  severity: ");
                    if (Severity.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{Severity}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{Severity}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(RecommendationText), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  recommendationText: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(RecommendationText))
                {
                    builder.Append("  recommendationText: ");
                    if (RecommendationText.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{RecommendationText}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{RecommendationText}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(CallToActionText), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  callToActionText: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(CallToActionText))
                {
                    builder.Append("  callToActionText: ");
                    if (CallToActionText.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{CallToActionText}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{CallToActionText}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(CallToActionLink), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  callToActionLink: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(CallToActionLink))
                {
                    builder.Append("  callToActionLink: ");
                    if (CallToActionLink.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{CallToActionLink}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{CallToActionLink}'");
                    }
                }
            }

            builder.AppendLine("}");
            return BinaryData.FromString(builder.ToString());
        }

        BinaryData IPersistableModel<GatewayResiliencyRecommendation>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<GatewayResiliencyRecommendation>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerNetworkContext.Default);
                case "bicep":
                    return SerializeBicep(options);
                default:
                    throw new FormatException($"The model {nameof(GatewayResiliencyRecommendation)} does not support writing '{options.Format}' format.");
            }
        }

        GatewayResiliencyRecommendation IPersistableModel<GatewayResiliencyRecommendation>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<GatewayResiliencyRecommendation>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeGatewayResiliencyRecommendation(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(GatewayResiliencyRecommendation)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<GatewayResiliencyRecommendation>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
