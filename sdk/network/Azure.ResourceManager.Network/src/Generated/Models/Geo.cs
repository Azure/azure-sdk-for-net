// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Network.Models
{
    /// <summary> The Geo for CIDR advertising. Should be an Geo code. </summary>
    public readonly partial struct Geo : IEquatable<Geo>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="Geo"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Geo(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string GlobalValue = "GLOBAL";
        private const string AfriValue = "AFRI";
        private const string ApacValue = "APAC";
        private const string EuroValue = "EURO";
        private const string LatamValue = "LATAM";
        private const string NAMValue = "NAM";
        private const string MEValue = "ME";
        private const string OceaniaValue = "OCEANIA";
        private const string AQValue = "AQ";

        /// <summary> GLOBAL. </summary>
        public static Geo Global { get; } = new Geo(GlobalValue);
        /// <summary> AFRI. </summary>
        public static Geo Afri { get; } = new Geo(AfriValue);
        /// <summary> APAC. </summary>
        public static Geo Apac { get; } = new Geo(ApacValue);
        /// <summary> EURO. </summary>
        public static Geo Euro { get; } = new Geo(EuroValue);
        /// <summary> LATAM. </summary>
        public static Geo Latam { get; } = new Geo(LatamValue);
        /// <summary> NAM. </summary>
        public static Geo NAM { get; } = new Geo(NAMValue);
        /// <summary> ME. </summary>
        public static Geo ME { get; } = new Geo(MEValue);
        /// <summary> OCEANIA. </summary>
        public static Geo Oceania { get; } = new Geo(OceaniaValue);
        /// <summary> AQ. </summary>
        public static Geo AQ { get; } = new Geo(AQValue);
        /// <summary> Determines if two <see cref="Geo"/> values are the same. </summary>
        public static bool operator ==(Geo left, Geo right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Geo"/> values are not the same. </summary>
        public static bool operator !=(Geo left, Geo right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="Geo"/>. </summary>
        public static implicit operator Geo(string value) => new Geo(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Geo other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Geo other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
