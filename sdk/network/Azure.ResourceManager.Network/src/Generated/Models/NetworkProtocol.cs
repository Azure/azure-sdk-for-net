// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Network.Models
{
    /// <summary> Network Protocol. </summary>
    public readonly partial struct NetworkProtocol : IEquatable<NetworkProtocol>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="NetworkProtocol"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public NetworkProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AnyValue = "Any";
        private const string TcpValue = "TCP";
        private const string UdpValue = "UDP";
        private const string IcmpValue = "ICMP";

        /// <summary> Any. </summary>
        public static NetworkProtocol Any { get; } = new NetworkProtocol(AnyValue);
        /// <summary> TCP. </summary>
        public static NetworkProtocol Tcp { get; } = new NetworkProtocol(TcpValue);
        /// <summary> UDP. </summary>
        public static NetworkProtocol Udp { get; } = new NetworkProtocol(UdpValue);
        /// <summary> ICMP. </summary>
        public static NetworkProtocol Icmp { get; } = new NetworkProtocol(IcmpValue);
        /// <summary> Determines if two <see cref="NetworkProtocol"/> values are the same. </summary>
        public static bool operator ==(NetworkProtocol left, NetworkProtocol right) => left.Equals(right);
        /// <summary> Determines if two <see cref="NetworkProtocol"/> values are not the same. </summary>
        public static bool operator !=(NetworkProtocol left, NetworkProtocol right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="NetworkProtocol"/>. </summary>
        public static implicit operator NetworkProtocol(string value) => new NetworkProtocol(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is NetworkProtocol other && Equals(other);
        /// <inheritdoc />
        public bool Equals(NetworkProtocol other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
