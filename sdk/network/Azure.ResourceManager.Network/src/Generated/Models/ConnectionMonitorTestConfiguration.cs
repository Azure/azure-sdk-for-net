// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.ResourceManager.Network.Models
{
    /// <summary> Describes a connection monitor test configuration. </summary>
    public partial class ConnectionMonitorTestConfiguration
    {
        /// <summary> Initializes a new instance of ConnectionMonitorTestConfiguration. </summary>
        /// <param name="name"> The name of the connection monitor test configuration. </param>
        /// <param name="protocol"> The protocol to use in test evaluation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        public ConnectionMonitorTestConfiguration(string name, ConnectionMonitorTestConfigurationProtocol protocol)
        {
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }

            Name = name;
            Protocol = protocol;
        }

        /// <summary> Initializes a new instance of ConnectionMonitorTestConfiguration. </summary>
        /// <param name="name"> The name of the connection monitor test configuration. </param>
        /// <param name="testFrequencySec"> The frequency of test evaluation, in seconds. </param>
        /// <param name="protocol"> The protocol to use in test evaluation. </param>
        /// <param name="preferredIPVersion"> The preferred IP version to use in test evaluation. The connection monitor may choose to use a different version depending on other parameters. </param>
        /// <param name="httpConfiguration"> The parameters used to perform test evaluation over HTTP. </param>
        /// <param name="tcpConfiguration"> The parameters used to perform test evaluation over TCP. </param>
        /// <param name="icmpConfiguration"> The parameters used to perform test evaluation over ICMP. </param>
        /// <param name="successThreshold"> The threshold for declaring a test successful. </param>
        internal ConnectionMonitorTestConfiguration(string name, int? testFrequencySec, ConnectionMonitorTestConfigurationProtocol protocol, PreferredIPVersion? preferredIPVersion, ConnectionMonitorHttpConfiguration httpConfiguration, ConnectionMonitorTcpConfiguration tcpConfiguration, ConnectionMonitorIcmpConfiguration icmpConfiguration, ConnectionMonitorSuccessThreshold successThreshold)
        {
            Name = name;
            TestFrequencySec = testFrequencySec;
            Protocol = protocol;
            PreferredIPVersion = preferredIPVersion;
            HttpConfiguration = httpConfiguration;
            TcpConfiguration = tcpConfiguration;
            IcmpConfiguration = icmpConfiguration;
            SuccessThreshold = successThreshold;
        }

        /// <summary> The name of the connection monitor test configuration. </summary>
        public string Name { get; set; }
        /// <summary> The frequency of test evaluation, in seconds. </summary>
        public int? TestFrequencySec { get; set; }
        /// <summary> The protocol to use in test evaluation. </summary>
        public ConnectionMonitorTestConfigurationProtocol Protocol { get; set; }
        /// <summary> The preferred IP version to use in test evaluation. The connection monitor may choose to use a different version depending on other parameters. </summary>
        public PreferredIPVersion? PreferredIPVersion { get; set; }
        /// <summary> The parameters used to perform test evaluation over HTTP. </summary>
        public ConnectionMonitorHttpConfiguration HttpConfiguration { get; set; }
        /// <summary> The parameters used to perform test evaluation over TCP. </summary>
        public ConnectionMonitorTcpConfiguration TcpConfiguration { get; set; }
        /// <summary> The parameters used to perform test evaluation over ICMP. </summary>
        public ConnectionMonitorIcmpConfiguration IcmpConfiguration { get; set; }
        /// <summary> The threshold for declaring a test successful. </summary>
        public ConnectionMonitorSuccessThreshold SuccessThreshold { get; set; }
    }
}
