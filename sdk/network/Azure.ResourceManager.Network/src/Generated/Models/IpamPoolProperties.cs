// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.Network.Models
{
    /// <summary> The IpamPoolProperties. </summary>
    public partial class IpamPoolProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="IpamPoolProperties"/>. </summary>
        public IpamPoolProperties()
        {
            IPAddressType = new ChangeTrackingList<IPType>();
            AddressPrefixes = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of <see cref="IpamPoolProperties"/>. </summary>
        /// <param name="description"></param>
        /// <param name="displayName"></param>
        /// <param name="ipAddressType"></param>
        /// <param name="parentPoolName"></param>
        /// <param name="addressPrefixes"></param>
        /// <param name="provisioningState"> The current provisioning state. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal IpamPoolProperties(string description, string displayName, IReadOnlyList<IPType> ipAddressType, string parentPoolName, IList<string> addressPrefixes, NetworkProvisioningState? provisioningState, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Description = description;
            DisplayName = displayName;
            IPAddressType = ipAddressType;
            ParentPoolName = parentPoolName;
            AddressPrefixes = addressPrefixes;
            ProvisioningState = provisioningState;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Gets or sets the description. </summary>
        public string Description { get; set; }
        /// <summary> Gets or sets the display name. </summary>
        public string DisplayName { get; set; }
        /// <summary> Gets the ip address type. </summary>
        public IReadOnlyList<IPType> IPAddressType { get; }
        /// <summary> Gets or sets the parent pool name. </summary>
        public string ParentPoolName { get; set; }
        /// <summary> Gets the address prefixes. </summary>
        public IList<string> AddressPrefixes { get; set; }
        /// <summary> The current provisioning state. </summary>
        public NetworkProvisioningState? ProvisioningState { get; set; }
    }
}
