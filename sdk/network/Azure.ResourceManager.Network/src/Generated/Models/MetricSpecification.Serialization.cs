// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Network.Models
{
    public partial class MetricSpecification
    {
        internal static MetricSpecification DeserializeMetricSpecification(JsonElement element)
        {
            Optional<string> name = default;
            Optional<string> displayName = default;
            Optional<string> displayDescription = default;
            Optional<string> unit = default;
            Optional<string> aggregationType = default;
            Optional<IReadOnlyList<Availability>> availabilities = default;
            Optional<bool> enableRegionalMdmAccount = default;
            Optional<bool> fillGapWithZero = default;
            Optional<string> metricFilterPattern = default;
            Optional<IReadOnlyList<Dimension>> dimensions = default;
            Optional<bool> isInternal = default;
            Optional<string> sourceMdmAccount = default;
            Optional<string> sourceMdmNamespace = default;
            Optional<string> resourceIdDimensionNameOverride = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("displayName"))
                {
                    displayName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("displayDescription"))
                {
                    displayDescription = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("unit"))
                {
                    unit = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("aggregationType"))
                {
                    aggregationType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("availabilities"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<Availability> array = new List<Availability>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Availability.DeserializeAvailability(item));
                    }
                    availabilities = array;
                    continue;
                }
                if (property.NameEquals("enableRegionalMdmAccount"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    enableRegionalMdmAccount = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("fillGapWithZero"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    fillGapWithZero = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("metricFilterPattern"))
                {
                    metricFilterPattern = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("dimensions"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<Dimension> array = new List<Dimension>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Dimension.DeserializeDimension(item));
                    }
                    dimensions = array;
                    continue;
                }
                if (property.NameEquals("isInternal"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    isInternal = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("sourceMdmAccount"))
                {
                    sourceMdmAccount = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sourceMdmNamespace"))
                {
                    sourceMdmNamespace = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("resourceIdDimensionNameOverride"))
                {
                    resourceIdDimensionNameOverride = property.Value.GetString();
                    continue;
                }
            }
            return new MetricSpecification(name.Value, displayName.Value, displayDescription.Value, unit.Value, aggregationType.Value, Optional.ToList(availabilities), Optional.ToNullable(enableRegionalMdmAccount), Optional.ToNullable(fillGapWithZero), metricFilterPattern.Value, Optional.ToList(dimensions), Optional.ToNullable(isInternal), sourceMdmAccount.Value, sourceMdmNamespace.Value, resourceIdDimensionNameOverride.Value);
        }
    }
}
