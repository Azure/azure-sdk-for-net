// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Network.Models
{
    /// <summary> Property to indicate if the Express Route Gateway has resiliency model of MultiHomed or SingleHomed. </summary>
    public readonly partial struct ResiliencyModel : IEquatable<ResiliencyModel>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ResiliencyModel"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ResiliencyModel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SingleHomedValue = "SingleHomed";
        private const string MultiHomedValue = "MultiHomed";

        /// <summary> SingleHomed. </summary>
        public static ResiliencyModel SingleHomed { get; } = new ResiliencyModel(SingleHomedValue);
        /// <summary> MultiHomed. </summary>
        public static ResiliencyModel MultiHomed { get; } = new ResiliencyModel(MultiHomedValue);
        /// <summary> Determines if two <see cref="ResiliencyModel"/> values are the same. </summary>
        public static bool operator ==(ResiliencyModel left, ResiliencyModel right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ResiliencyModel"/> values are not the same. </summary>
        public static bool operator !=(ResiliencyModel left, ResiliencyModel right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ResiliencyModel"/>. </summary>
        public static implicit operator ResiliencyModel(string value) => new ResiliencyModel(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ResiliencyModel other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ResiliencyModel other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
