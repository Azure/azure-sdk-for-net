// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Network.Models
{
    public partial class TrafficAnalyticsConfigurationProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Enabled))
            {
                writer.WritePropertyName("enabled");
                writer.WriteBooleanValue(Enabled.Value);
            }
            if (Optional.IsDefined(WorkspaceId))
            {
                writer.WritePropertyName("workspaceId");
                writer.WriteStringValue(WorkspaceId);
            }
            if (Optional.IsDefined(WorkspaceRegion))
            {
                writer.WritePropertyName("workspaceRegion");
                writer.WriteStringValue(WorkspaceRegion);
            }
            if (Optional.IsDefined(WorkspaceResourceId))
            {
                writer.WritePropertyName("workspaceResourceId");
                writer.WriteStringValue(WorkspaceResourceId);
            }
            if (Optional.IsDefined(TrafficAnalyticsInterval))
            {
                writer.WritePropertyName("trafficAnalyticsInterval");
                writer.WriteNumberValue(TrafficAnalyticsInterval.Value);
            }
            writer.WriteEndObject();
        }

        internal static TrafficAnalyticsConfigurationProperties DeserializeTrafficAnalyticsConfigurationProperties(JsonElement element)
        {
            Optional<bool> enabled = default;
            Optional<string> workspaceId = default;
            Optional<string> workspaceRegion = default;
            Optional<string> workspaceResourceId = default;
            Optional<int> trafficAnalyticsInterval = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("enabled"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    enabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("workspaceId"))
                {
                    workspaceId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("workspaceRegion"))
                {
                    workspaceRegion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("workspaceResourceId"))
                {
                    workspaceResourceId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("trafficAnalyticsInterval"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    trafficAnalyticsInterval = property.Value.GetInt32();
                    continue;
                }
            }
            return new TrafficAnalyticsConfigurationProperties(Optional.ToNullable(enabled), workspaceId.Value, workspaceRegion.Value, workspaceResourceId.Value, Optional.ToNullable(trafficAnalyticsInterval));
        }
    }
}
