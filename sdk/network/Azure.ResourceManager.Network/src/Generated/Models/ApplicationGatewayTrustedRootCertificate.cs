// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure;
using Azure.Core;

namespace Azure.ResourceManager.Network.Models
{
    /// <summary> Trusted Root certificates of an application gateway. </summary>
    public partial class ApplicationGatewayTrustedRootCertificate : NetworkResourceData
    {
        /// <summary> Initializes a new instance of ApplicationGatewayTrustedRootCertificate. </summary>
        public ApplicationGatewayTrustedRootCertificate()
        {
        }

        /// <summary> Initializes a new instance of ApplicationGatewayTrustedRootCertificate. </summary>
        /// <param name="id"> Resource ID. </param>
        /// <param name="name"> Resource name. </param>
        /// <param name="resourceType"> Resource type. </param>
        /// <param name="etag"> A unique read-only string that changes whenever the resource is updated. </param>
        /// <param name="data"> Certificate public data. </param>
        /// <param name="keyVaultSecretId"> Secret Id of (base-64 encoded unencrypted pfx) &apos;Secret&apos; or &apos;Certificate&apos; object stored in KeyVault. </param>
        /// <param name="provisioningState"> The provisioning state of the trusted root certificate resource. </param>
        internal ApplicationGatewayTrustedRootCertificate(ResourceIdentifier id, string name, ResourceType? resourceType, ETag? etag, BinaryData data, string keyVaultSecretId, NetworkProvisioningState? provisioningState) : base(id, name, resourceType)
        {
            ETag = etag;
            Data = data;
            KeyVaultSecretId = keyVaultSecretId;
            ProvisioningState = provisioningState;
        }

        /// <summary> A unique read-only string that changes whenever the resource is updated. </summary>
        public ETag? ETag { get; }
        /// <summary> Certificate public data. </summary>
        public BinaryData Data { get; set; }
        /// <summary> Secret Id of (base-64 encoded unencrypted pfx) &apos;Secret&apos; or &apos;Certificate&apos; object stored in KeyVault. </summary>
        public string KeyVaultSecretId { get; set; }
        /// <summary> The provisioning state of the trusted root certificate resource. </summary>
        public NetworkProvisioningState? ProvisioningState { get; }
    }
}
