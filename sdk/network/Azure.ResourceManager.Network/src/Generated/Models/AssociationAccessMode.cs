// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Network.Models
{
    /// <summary> Access mode on the association. </summary>
    public readonly partial struct AssociationAccessMode : IEquatable<AssociationAccessMode>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AssociationAccessMode"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AssociationAccessMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string LearningValue = "Learning";
        private const string EnforcedValue = "Enforced";
        private const string AuditValue = "Audit";

        /// <summary> Learning. </summary>
        public static AssociationAccessMode Learning { get; } = new AssociationAccessMode(LearningValue);
        /// <summary> Enforced. </summary>
        public static AssociationAccessMode Enforced { get; } = new AssociationAccessMode(EnforcedValue);
        /// <summary> Audit. </summary>
        public static AssociationAccessMode Audit { get; } = new AssociationAccessMode(AuditValue);
        /// <summary> Determines if two <see cref="AssociationAccessMode"/> values are the same. </summary>
        public static bool operator ==(AssociationAccessMode left, AssociationAccessMode right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AssociationAccessMode"/> values are not the same. </summary>
        public static bool operator !=(AssociationAccessMode left, AssociationAccessMode right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="AssociationAccessMode"/>. </summary>
        public static implicit operator AssociationAccessMode(string value) => new AssociationAccessMode(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AssociationAccessMode other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AssociationAccessMode other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
