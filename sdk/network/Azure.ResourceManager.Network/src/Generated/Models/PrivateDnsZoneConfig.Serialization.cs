// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Network.Models
{
    public partial class PrivateDnsZoneConfig : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Name))
            {
                writer.WritePropertyName("name");
                writer.WriteStringValue(Name);
            }
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            if (Optional.IsDefined(PrivateDnsZoneId))
            {
                writer.WritePropertyName("privateDnsZoneId");
                writer.WriteStringValue(PrivateDnsZoneId);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static PrivateDnsZoneConfig DeserializePrivateDnsZoneConfig(JsonElement element)
        {
            Optional<string> name = default;
            Optional<string> id = default;
            Optional<string> type = default;
            Optional<string> etag = default;
            Optional<string> privateDnsZoneId = default;
            Optional<ProvisioningState> provisioningState = default;
            Optional<IReadOnlyList<RecordSet>> recordSets = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("id"))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("etag"))
                {
                    etag = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("privateDnsZoneId"))
                        {
                            privateDnsZoneId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("provisioningState"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            provisioningState = new ProvisioningState(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("recordSets"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<RecordSet> array = new List<RecordSet>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(RecordSet.DeserializeRecordSet(item));
                            }
                            recordSets = array;
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new PrivateDnsZoneConfig(name.Value, id.Value, type.Value, etag.Value, privateDnsZoneId.Value, Optional.ToNullable(provisioningState), Optional.ToList(recordSets));
        }
    }
}
