// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Network.Models
{
    /// <summary> The current provisioning state of NSP Link/LinkReference. </summary>
    public readonly partial struct NspLinkProvisioningState : IEquatable<NspLinkProvisioningState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="NspLinkProvisioningState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public NspLinkProvisioningState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SucceededValue = "Succeeded";
        private const string CreatingValue = "Creating";
        private const string UpdatingValue = "Updating";
        private const string DeletingValue = "Deleting";
        private const string AcceptedValue = "Accepted";
        private const string FailedValue = "Failed";
        private const string WaitForRemoteCompletionValue = "WaitForRemoteCompletion";

        /// <summary> Succeeded. </summary>
        public static NspLinkProvisioningState Succeeded { get; } = new NspLinkProvisioningState(SucceededValue);
        /// <summary> Creating. </summary>
        public static NspLinkProvisioningState Creating { get; } = new NspLinkProvisioningState(CreatingValue);
        /// <summary> Updating. </summary>
        public static NspLinkProvisioningState Updating { get; } = new NspLinkProvisioningState(UpdatingValue);
        /// <summary> Deleting. </summary>
        public static NspLinkProvisioningState Deleting { get; } = new NspLinkProvisioningState(DeletingValue);
        /// <summary> Accepted. </summary>
        public static NspLinkProvisioningState Accepted { get; } = new NspLinkProvisioningState(AcceptedValue);
        /// <summary> Failed. </summary>
        public static NspLinkProvisioningState Failed { get; } = new NspLinkProvisioningState(FailedValue);
        /// <summary> WaitForRemoteCompletion. </summary>
        public static NspLinkProvisioningState WaitForRemoteCompletion { get; } = new NspLinkProvisioningState(WaitForRemoteCompletionValue);
        /// <summary> Determines if two <see cref="NspLinkProvisioningState"/> values are the same. </summary>
        public static bool operator ==(NspLinkProvisioningState left, NspLinkProvisioningState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="NspLinkProvisioningState"/> values are not the same. </summary>
        public static bool operator !=(NspLinkProvisioningState left, NspLinkProvisioningState right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="NspLinkProvisioningState"/>. </summary>
        public static implicit operator NspLinkProvisioningState(string value) => new NspLinkProvisioningState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is NspLinkProvisioningState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(NspLinkProvisioningState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
