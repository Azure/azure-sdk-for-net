// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Network.Models
{
    public partial class ExpressRouteLink : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Name))
            {
                writer.WritePropertyName("name");
                writer.WriteStringValue(Name);
            }
            if (Optional.IsDefined(Etag))
            {
                writer.WritePropertyName("etag");
                writer.WriteStringValue(Etag);
            }
            if (Optional.IsDefined(Id))
            {
                writer.WritePropertyName("id");
                writer.WriteStringValue(Id);
            }
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            if (Optional.IsDefined(RouterName))
            {
                writer.WritePropertyName("routerName");
                writer.WriteStringValue(RouterName);
            }
            if (Optional.IsDefined(InterfaceName))
            {
                writer.WritePropertyName("interfaceName");
                writer.WriteStringValue(InterfaceName);
            }
            if (Optional.IsDefined(PatchPanelId))
            {
                writer.WritePropertyName("patchPanelId");
                writer.WriteStringValue(PatchPanelId);
            }
            if (Optional.IsDefined(RackId))
            {
                writer.WritePropertyName("rackId");
                writer.WriteStringValue(RackId);
            }
            if (Optional.IsDefined(ConnectorType))
            {
                writer.WritePropertyName("connectorType");
                writer.WriteStringValue(ConnectorType.Value.ToString());
            }
            if (Optional.IsDefined(AdminState))
            {
                writer.WritePropertyName("adminState");
                writer.WriteStringValue(AdminState.Value.ToString());
            }
            if (Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState");
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (Optional.IsDefined(MacSecConfig))
            {
                writer.WritePropertyName("macSecConfig");
                writer.WriteObjectValue(MacSecConfig);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static ExpressRouteLink DeserializeExpressRouteLink(JsonElement element)
        {
            Optional<string> name = default;
            Optional<string> etag = default;
            Optional<string> id = default;
            Optional<string> routerName = default;
            Optional<string> interfaceName = default;
            Optional<string> patchPanelId = default;
            Optional<string> rackId = default;
            Optional<ExpressRouteLinkConnectorType> connectorType = default;
            Optional<ExpressRouteLinkAdminState> adminState = default;
            Optional<ProvisioningState> provisioningState = default;
            Optional<ExpressRouteLinkMacSecConfig> macSecConfig = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("etag"))
                {
                    etag = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("id"))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("routerName"))
                        {
                            routerName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("interfaceName"))
                        {
                            interfaceName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("patchPanelId"))
                        {
                            patchPanelId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("rackId"))
                        {
                            rackId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("connectorType"))
                        {
                            connectorType = new ExpressRouteLinkConnectorType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("adminState"))
                        {
                            adminState = new ExpressRouteLinkAdminState(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("provisioningState"))
                        {
                            provisioningState = new ProvisioningState(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("macSecConfig"))
                        {
                            macSecConfig = ExpressRouteLinkMacSecConfig.DeserializeExpressRouteLinkMacSecConfig(property0.Value);
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new ExpressRouteLink(id.HasValue ? id.Value : null, name.HasValue ? name.Value : null, etag.HasValue ? etag.Value : null, routerName.HasValue ? routerName.Value : null, interfaceName.HasValue ? interfaceName.Value : null, patchPanelId.HasValue ? patchPanelId.Value : null, rackId.HasValue ? rackId.Value : null, connectorType.HasValue ? connectorType.Value : (ExpressRouteLinkConnectorType?)null, adminState.HasValue ? adminState.Value : (ExpressRouteLinkAdminState?)null, provisioningState.HasValue ? provisioningState.Value : (ProvisioningState?)null, macSecConfig.HasValue ? macSecConfig.Value : null);
        }
    }
}
