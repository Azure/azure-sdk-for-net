// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Network.Models
{
    public partial class ConnectionMonitorHttpConfiguration : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Port))
            {
                writer.WritePropertyName("port");
                writer.WriteNumberValue(Port.Value);
            }
            if (Optional.IsDefined(Method))
            {
                writer.WritePropertyName("method");
                writer.WriteStringValue(Method.Value.ToString());
            }
            if (Optional.IsDefined(Path))
            {
                writer.WritePropertyName("path");
                writer.WriteStringValue(Path);
            }
            if (Optional.IsCollectionDefined(RequestHeaders))
            {
                writer.WritePropertyName("requestHeaders");
                writer.WriteStartArray();
                foreach (var item in RequestHeaders)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(ValidStatusCodeRanges))
            {
                writer.WritePropertyName("validStatusCodeRanges");
                writer.WriteStartArray();
                foreach (var item in ValidStatusCodeRanges)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(PreferHttps))
            {
                writer.WritePropertyName("preferHTTPS");
                writer.WriteBooleanValue(PreferHttps.Value);
            }
            writer.WriteEndObject();
        }

        internal static ConnectionMonitorHttpConfiguration DeserializeConnectionMonitorHttpConfiguration(JsonElement element)
        {
            Optional<int> port = default;
            Optional<HttpConfigurationMethod> method = default;
            Optional<string> path = default;
            Optional<IList<HttpHeader>> requestHeaders = default;
            Optional<IList<string>> validStatusCodeRanges = default;
            Optional<bool> preferHTTPS = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("port"))
                {
                    port = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("method"))
                {
                    method = new HttpConfigurationMethod(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("path"))
                {
                    path = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("requestHeaders"))
                {
                    List<HttpHeader> array = new List<HttpHeader>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(HttpHeader.DeserializeHttpHeader(item));
                    }
                    requestHeaders = array;
                    continue;
                }
                if (property.NameEquals("validStatusCodeRanges"))
                {
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    validStatusCodeRanges = array;
                    continue;
                }
                if (property.NameEquals("preferHTTPS"))
                {
                    preferHTTPS = property.Value.GetBoolean();
                    continue;
                }
            }
            return new ConnectionMonitorHttpConfiguration(Optional.ToNullable(port), Optional.ToNullable(method), path.Value, Optional.ToList(requestHeaders), Optional.ToList(validStatusCodeRanges), Optional.ToNullable(preferHTTPS));
        }
    }
}
