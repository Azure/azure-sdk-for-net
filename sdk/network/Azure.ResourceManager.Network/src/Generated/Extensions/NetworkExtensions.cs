// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.Network.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.Network
{
    /// <summary> A class to add extension methods to Azure.ResourceManager.Network. </summary>
    public static partial class NetworkExtensions
    {
        private static SubscriptionExtensionClient GetExtensionClient(Subscription subscription)
        {
            return subscription.GetCachedClient((client) =>
            {
                return new SubscriptionExtensionClient(client, subscription.Id);
            }
            );
        }

        /// <summary> Gets a collection of AzureWebCategories in the AzureWebCategory. </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of AzureWebCategories and their operations over a AzureWebCategory. </returns>
        public static AzureWebCategoryCollection GetAzureWebCategories(this Subscription subscription)
        {
            return GetExtensionClient(subscription).GetAzureWebCategories();
        }

        /// <summary>
        /// Gets the specified Azure Web Category.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/azureWebCategories/{name}
        /// Operation Id: WebCategories_Get
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="name"> The name of the azureWebCategory. </param>
        /// <param name="expand"> Expands resourceIds back referenced by the azureWebCategory resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        public static async Task<Response<AzureWebCategory>> GetAzureWebCategoryAsync(this Subscription subscription, string name, string expand = null, CancellationToken cancellationToken = default)
        {
            return await subscription.GetAzureWebCategories().GetAsync(name, expand, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets the specified Azure Web Category.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/azureWebCategories/{name}
        /// Operation Id: WebCategories_Get
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="name"> The name of the azureWebCategory. </param>
        /// <param name="expand"> Expands resourceIds back referenced by the azureWebCategory resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        public static Response<AzureWebCategory> GetAzureWebCategory(this Subscription subscription, string name, string expand = null, CancellationToken cancellationToken = default)
        {
            return subscription.GetAzureWebCategories().Get(name, expand, cancellationToken);
        }

        /// <summary> Gets a collection of ExpressRoutePortsLocations in the ExpressRoutePortsLocation. </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of ExpressRoutePortsLocations and their operations over a ExpressRoutePortsLocation. </returns>
        public static ExpressRoutePortsLocationCollection GetExpressRoutePortsLocations(this Subscription subscription)
        {
            return GetExtensionClient(subscription).GetExpressRoutePortsLocations();
        }

        /// <summary>
        /// Retrieves a single ExpressRoutePort peering location, including the list of available bandwidths available at said peering location.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/ExpressRoutePortsLocations/{locationName}
        /// Operation Id: ExpressRoutePortsLocations_Get
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="locationName"> Name of the requested ExpressRoutePort peering location. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="locationName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="locationName"/> is null. </exception>
        public static async Task<Response<ExpressRoutePortsLocation>> GetExpressRoutePortsLocationAsync(this Subscription subscription, string locationName, CancellationToken cancellationToken = default)
        {
            return await subscription.GetExpressRoutePortsLocations().GetAsync(locationName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Retrieves a single ExpressRoutePort peering location, including the list of available bandwidths available at said peering location.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/ExpressRoutePortsLocations/{locationName}
        /// Operation Id: ExpressRoutePortsLocations_Get
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="locationName"> Name of the requested ExpressRoutePort peering location. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="locationName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="locationName"/> is null. </exception>
        public static Response<ExpressRoutePortsLocation> GetExpressRoutePortsLocation(this Subscription subscription, string locationName, CancellationToken cancellationToken = default)
        {
            return subscription.GetExpressRoutePortsLocations().Get(locationName, cancellationToken);
        }

        /// <summary> Gets a collection of NetworkVirtualApplianceSkus in the NetworkVirtualApplianceSku. </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of NetworkVirtualApplianceSkus and their operations over a NetworkVirtualApplianceSku. </returns>
        public static NetworkVirtualApplianceSkuCollection GetNetworkVirtualApplianceSkus(this Subscription subscription)
        {
            return GetExtensionClient(subscription).GetNetworkVirtualApplianceSkus();
        }

        /// <summary>
        /// Retrieves a single available sku for network virtual appliance.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/networkVirtualApplianceSkus/{skuName}
        /// Operation Id: VirtualApplianceSkus_Get
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="skuName"> Name of the Sku. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="skuName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="skuName"/> is null. </exception>
        public static async Task<Response<NetworkVirtualApplianceSku>> GetNetworkVirtualApplianceSkuAsync(this Subscription subscription, string skuName, CancellationToken cancellationToken = default)
        {
            return await subscription.GetNetworkVirtualApplianceSkus().GetAsync(skuName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Retrieves a single available sku for network virtual appliance.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/networkVirtualApplianceSkus/{skuName}
        /// Operation Id: VirtualApplianceSkus_Get
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="skuName"> Name of the Sku. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="skuName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="skuName"/> is null. </exception>
        public static Response<NetworkVirtualApplianceSku> GetNetworkVirtualApplianceSku(this Subscription subscription, string skuName, CancellationToken cancellationToken = default)
        {
            return subscription.GetNetworkVirtualApplianceSkus().Get(skuName, cancellationToken);
        }

        /// <summary>
        /// Gets all the application gateways in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/applicationGateways
        /// Operation Id: ApplicationGateways_ListAll
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ApplicationGateway" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<ApplicationGateway> GetApplicationGatewaysAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetApplicationGatewaysAsync(cancellationToken);
        }

        /// <summary>
        /// Gets all the application gateways in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/applicationGateways
        /// Operation Id: ApplicationGateways_ListAll
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ApplicationGateway" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<ApplicationGateway> GetApplicationGateways(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetApplicationGateways(cancellationToken);
        }

        /// <summary>
        /// Lists all available server variables.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/applicationGatewayAvailableServerVariables
        /// Operation Id: ApplicationGateways_ListAvailableServerVariables
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="string" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<string> GetAvailableServerVariablesApplicationGatewaysAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetAvailableServerVariablesApplicationGatewaysAsync(cancellationToken);
        }

        /// <summary>
        /// Lists all available server variables.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/applicationGatewayAvailableServerVariables
        /// Operation Id: ApplicationGateways_ListAvailableServerVariables
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="string" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<string> GetAvailableServerVariablesApplicationGateways(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetAvailableServerVariablesApplicationGateways(cancellationToken);
        }

        /// <summary>
        /// Lists all available request headers.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/applicationGatewayAvailableRequestHeaders
        /// Operation Id: ApplicationGateways_ListAvailableRequestHeaders
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="string" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<string> GetAvailableRequestHeadersApplicationGatewaysAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetAvailableRequestHeadersApplicationGatewaysAsync(cancellationToken);
        }

        /// <summary>
        /// Lists all available request headers.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/applicationGatewayAvailableRequestHeaders
        /// Operation Id: ApplicationGateways_ListAvailableRequestHeaders
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="string" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<string> GetAvailableRequestHeadersApplicationGateways(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetAvailableRequestHeadersApplicationGateways(cancellationToken);
        }

        /// <summary>
        /// Lists all available response headers.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/applicationGatewayAvailableResponseHeaders
        /// Operation Id: ApplicationGateways_ListAvailableResponseHeaders
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="string" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<string> GetAvailableResponseHeadersApplicationGatewaysAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetAvailableResponseHeadersApplicationGatewaysAsync(cancellationToken);
        }

        /// <summary>
        /// Lists all available response headers.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/applicationGatewayAvailableResponseHeaders
        /// Operation Id: ApplicationGateways_ListAvailableResponseHeaders
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="string" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<string> GetAvailableResponseHeadersApplicationGateways(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetAvailableResponseHeadersApplicationGateways(cancellationToken);
        }

        /// <summary>
        /// Lists all available web application firewall rule sets.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/applicationGatewayAvailableWafRuleSets
        /// Operation Id: ApplicationGateways_ListAvailableWafRuleSets
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ApplicationGatewayFirewallRuleSet" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<ApplicationGatewayFirewallRuleSet> GetApplicationGatewayAvailableWafRuleSetsAsyncAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetApplicationGatewayAvailableWafRuleSetsAsyncAsync(cancellationToken);
        }

        /// <summary>
        /// Lists all available web application firewall rule sets.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/applicationGatewayAvailableWafRuleSets
        /// Operation Id: ApplicationGateways_ListAvailableWafRuleSets
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ApplicationGatewayFirewallRuleSet" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<ApplicationGatewayFirewallRuleSet> GetApplicationGatewayAvailableWafRuleSetsAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetApplicationGatewayAvailableWafRuleSetsAsync(cancellationToken);
        }

        /// <summary>
        /// Gets all application security groups in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/applicationSecurityGroups
        /// Operation Id: ApplicationSecurityGroups_ListAll
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ApplicationSecurityGroup" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<ApplicationSecurityGroup> GetApplicationSecurityGroupsAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetApplicationSecurityGroupsAsync(cancellationToken);
        }

        /// <summary>
        /// Gets all application security groups in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/applicationSecurityGroups
        /// Operation Id: ApplicationSecurityGroups_ListAll
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ApplicationSecurityGroup" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<ApplicationSecurityGroup> GetApplicationSecurityGroups(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetApplicationSecurityGroups(cancellationToken);
        }

        /// <summary>
        /// Gets all of the available subnet delegations for this subscription in this region.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/locations/{location}/availableDelegations
        /// Operation Id: AvailableDelegations_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="location"> The location of the subnet. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="location"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="location"/> is null. </exception>
        /// <returns> An async collection of <see cref="AvailableDelegation" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<AvailableDelegation> GetAvailableDelegationsAsync(this Subscription subscription, string location, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(location, nameof(location));

            return GetExtensionClient(subscription).GetAvailableDelegationsAsync(location, cancellationToken);
        }

        /// <summary>
        /// Gets all of the available subnet delegations for this subscription in this region.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/locations/{location}/availableDelegations
        /// Operation Id: AvailableDelegations_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="location"> The location of the subnet. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="location"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="location"/> is null. </exception>
        /// <returns> A collection of <see cref="AvailableDelegation" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<AvailableDelegation> GetAvailableDelegations(this Subscription subscription, string location, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(location, nameof(location));

            return GetExtensionClient(subscription).GetAvailableDelegations(location, cancellationToken);
        }

        /// <summary>
        /// Gets all available service aliases for this subscription in this region.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/locations/{location}/availableServiceAliases
        /// Operation Id: AvailableServiceAliases_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="location"> The location. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="location"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="location"/> is null. </exception>
        /// <returns> An async collection of <see cref="AvailableServiceAlias" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<AvailableServiceAlias> GetAvailableServiceAliasesAsync(this Subscription subscription, string location, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(location, nameof(location));

            return GetExtensionClient(subscription).GetAvailableServiceAliasesAsync(location, cancellationToken);
        }

        /// <summary>
        /// Gets all available service aliases for this subscription in this region.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/locations/{location}/availableServiceAliases
        /// Operation Id: AvailableServiceAliases_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="location"> The location. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="location"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="location"/> is null. </exception>
        /// <returns> A collection of <see cref="AvailableServiceAlias" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<AvailableServiceAlias> GetAvailableServiceAliases(this Subscription subscription, string location, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(location, nameof(location));

            return GetExtensionClient(subscription).GetAvailableServiceAliases(location, cancellationToken);
        }

        /// <summary>
        /// Gets all the Azure Firewalls in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/azureFirewalls
        /// Operation Id: AzureFirewalls_ListAll
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="AzureFirewall" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<AzureFirewall> GetAzureFirewallsAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetAzureFirewallsAsync(cancellationToken);
        }

        /// <summary>
        /// Gets all the Azure Firewalls in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/azureFirewalls
        /// Operation Id: AzureFirewalls_ListAll
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AzureFirewall" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<AzureFirewall> GetAzureFirewalls(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetAzureFirewalls(cancellationToken);
        }

        /// <summary>
        /// Gets all the Azure Firewall FQDN Tags in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/azureFirewallFqdnTags
        /// Operation Id: AzureFirewallFqdnTags_ListAll
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="AzureFirewallFqdnTag" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<AzureFirewallFqdnTag> GetAzureFirewallFqdnTagsAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetAzureFirewallFqdnTagsAsync(cancellationToken);
        }

        /// <summary>
        /// Gets all the Azure Firewall FQDN Tags in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/azureFirewallFqdnTags
        /// Operation Id: AzureFirewallFqdnTags_ListAll
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AzureFirewallFqdnTag" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<AzureFirewallFqdnTag> GetAzureFirewallFqdnTags(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetAzureFirewallFqdnTags(cancellationToken);
        }

        /// <summary>
        /// Lists all Bastion Hosts in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/bastionHosts
        /// Operation Id: BastionHosts_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="BastionHost" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<BastionHost> GetBastionHostsAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetBastionHostsAsync(cancellationToken);
        }

        /// <summary>
        /// Lists all Bastion Hosts in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/bastionHosts
        /// Operation Id: BastionHosts_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="BastionHost" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<BastionHost> GetBastionHosts(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetBastionHosts(cancellationToken);
        }

        /// <summary>
        /// Checks whether a domain name in the cloudapp.azure.com zone is available for use.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/locations/{location}/CheckDnsNameAvailability
        /// Operation Id: CheckDnsNameAvailability
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="location"> The location of the domain name. </param>
        /// <param name="domainNameLabel"> The domain name to be verified. It must conform to the following regular expression: ^[a-z][a-z0-9-]{1,61}[a-z0-9]$. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="location"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="location"/> or <paramref name="domainNameLabel"/> is null. </exception>
        public static async Task<Response<DnsNameAvailabilityResult>> CheckDnsNameAvailabilityAsync(this Subscription subscription, string location, string domainNameLabel, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(location, nameof(location));
            Argument.AssertNotNull(domainNameLabel, nameof(domainNameLabel));

            return await GetExtensionClient(subscription).CheckDnsNameAvailabilityAsync(location, domainNameLabel, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Checks whether a domain name in the cloudapp.azure.com zone is available for use.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/locations/{location}/CheckDnsNameAvailability
        /// Operation Id: CheckDnsNameAvailability
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="location"> The location of the domain name. </param>
        /// <param name="domainNameLabel"> The domain name to be verified. It must conform to the following regular expression: ^[a-z][a-z0-9-]{1,61}[a-z0-9]$. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="location"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="location"/> or <paramref name="domainNameLabel"/> is null. </exception>
        public static Response<DnsNameAvailabilityResult> CheckDnsNameAvailability(this Subscription subscription, string location, string domainNameLabel, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(location, nameof(location));
            Argument.AssertNotNull(domainNameLabel, nameof(domainNameLabel));

            return GetExtensionClient(subscription).CheckDnsNameAvailability(location, domainNameLabel, cancellationToken);
        }

        /// <summary>
        /// Gets all the custom IP prefixes in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/customIpPrefixes
        /// Operation Id: CustomIPPrefixes_ListAll
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="CustomIPPrefix" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<CustomIPPrefix> GetCustomIPPrefixesAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetCustomIPPrefixesAsync(cancellationToken);
        }

        /// <summary>
        /// Gets all the custom IP prefixes in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/customIpPrefixes
        /// Operation Id: CustomIPPrefixes_ListAll
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="CustomIPPrefix" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<CustomIPPrefix> GetCustomIPPrefixes(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetCustomIPPrefixes(cancellationToken);
        }

        /// <summary>
        /// Gets all DDoS protection plans in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/ddosProtectionPlans
        /// Operation Id: DdosProtectionPlans_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="DdosProtectionPlan" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<DdosProtectionPlan> GetDdosProtectionPlansAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetDdosProtectionPlansAsync(cancellationToken);
        }

        /// <summary>
        /// Gets all DDoS protection plans in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/ddosProtectionPlans
        /// Operation Id: DdosProtectionPlans_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="DdosProtectionPlan" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<DdosProtectionPlan> GetDdosProtectionPlans(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetDdosProtectionPlans(cancellationToken);
        }

        /// <summary>
        /// Gets all dscp configurations in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/dscpConfigurations
        /// Operation Id: DscpConfiguration_ListAll
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="DscpConfiguration" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<DscpConfiguration> GetDscpConfigurationsAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetDscpConfigurationsAsync(cancellationToken);
        }

        /// <summary>
        /// Gets all dscp configurations in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/dscpConfigurations
        /// Operation Id: DscpConfiguration_ListAll
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="DscpConfiguration" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<DscpConfiguration> GetDscpConfigurations(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetDscpConfigurations(cancellationToken);
        }

        /// <summary>
        /// List what values of endpoint services are available for use.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/locations/{location}/virtualNetworkAvailableEndpointServices
        /// Operation Id: AvailableEndpointServices_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="location"> The location to check available endpoint services. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="location"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="location"/> is null. </exception>
        /// <returns> An async collection of <see cref="EndpointServiceResult" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<EndpointServiceResult> GetAvailableEndpointServicesAsync(this Subscription subscription, string location, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(location, nameof(location));

            return GetExtensionClient(subscription).GetAvailableEndpointServicesAsync(location, cancellationToken);
        }

        /// <summary>
        /// List what values of endpoint services are available for use.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/locations/{location}/virtualNetworkAvailableEndpointServices
        /// Operation Id: AvailableEndpointServices_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="location"> The location to check available endpoint services. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="location"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="location"/> is null. </exception>
        /// <returns> A collection of <see cref="EndpointServiceResult" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<EndpointServiceResult> GetAvailableEndpointServices(this Subscription subscription, string location, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(location, nameof(location));

            return GetExtensionClient(subscription).GetAvailableEndpointServices(location, cancellationToken);
        }

        /// <summary>
        /// Gets all the express route circuits in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/expressRouteCircuits
        /// Operation Id: ExpressRouteCircuits_ListAll
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ExpressRouteCircuit" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<ExpressRouteCircuit> GetExpressRouteCircuitsAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetExpressRouteCircuitsAsync(cancellationToken);
        }

        /// <summary>
        /// Gets all the express route circuits in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/expressRouteCircuits
        /// Operation Id: ExpressRouteCircuits_ListAll
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ExpressRouteCircuit" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<ExpressRouteCircuit> GetExpressRouteCircuits(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetExpressRouteCircuits(cancellationToken);
        }

        /// <summary>
        /// Gets all the available express route service providers.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/expressRouteServiceProviders
        /// Operation Id: ExpressRouteServiceProviders_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ExpressRouteServiceProvider" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<ExpressRouteServiceProvider> GetExpressRouteServiceProvidersAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetExpressRouteServiceProvidersAsync(cancellationToken);
        }

        /// <summary>
        /// Gets all the available express route service providers.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/expressRouteServiceProviders
        /// Operation Id: ExpressRouteServiceProviders_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ExpressRouteServiceProvider" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<ExpressRouteServiceProvider> GetExpressRouteServiceProviders(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetExpressRouteServiceProviders(cancellationToken);
        }

        /// <summary>
        /// Retrieves all the ExpressRouteCrossConnections in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/expressRouteCrossConnections
        /// Operation Id: ExpressRouteCrossConnections_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ExpressRouteCrossConnection" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<ExpressRouteCrossConnection> GetExpressRouteCrossConnectionsAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetExpressRouteCrossConnectionsAsync(cancellationToken);
        }

        /// <summary>
        /// Retrieves all the ExpressRouteCrossConnections in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/expressRouteCrossConnections
        /// Operation Id: ExpressRouteCrossConnections_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ExpressRouteCrossConnection" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<ExpressRouteCrossConnection> GetExpressRouteCrossConnections(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetExpressRouteCrossConnections(cancellationToken);
        }

        /// <summary>
        /// List all the ExpressRoutePort resources in the specified subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/ExpressRoutePorts
        /// Operation Id: ExpressRoutePorts_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ExpressRoutePort" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<ExpressRoutePort> GetExpressRoutePortsAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetExpressRoutePortsAsync(cancellationToken);
        }

        /// <summary>
        /// List all the ExpressRoutePort resources in the specified subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/ExpressRoutePorts
        /// Operation Id: ExpressRoutePorts_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ExpressRoutePort" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<ExpressRoutePort> GetExpressRoutePorts(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetExpressRoutePorts(cancellationToken);
        }

        /// <summary>
        /// Gets all the Firewall Policies in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/firewallPolicies
        /// Operation Id: FirewallPolicies_ListAll
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="FirewallPolicy" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<FirewallPolicy> GetFirewallPoliciesAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetFirewallPoliciesAsync(cancellationToken);
        }

        /// <summary>
        /// Gets all the Firewall Policies in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/firewallPolicies
        /// Operation Id: FirewallPolicies_ListAll
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="FirewallPolicy" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<FirewallPolicy> GetFirewallPolicies(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetFirewallPolicies(cancellationToken);
        }

        /// <summary>
        /// Gets all IpAllocations in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/IpAllocations
        /// Operation Id: IpAllocations_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="IPAllocation" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<IPAllocation> GetIPAllocationsAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetIPAllocationsAsync(cancellationToken);
        }

        /// <summary>
        /// Gets all IpAllocations in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/IpAllocations
        /// Operation Id: IpAllocations_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="IPAllocation" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<IPAllocation> GetIPAllocations(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetIPAllocations(cancellationToken);
        }

        /// <summary>
        /// Gets all IpGroups in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/ipGroups
        /// Operation Id: IpGroups_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="IPGroup" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<IPGroup> GetIPGroupsAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetIPGroupsAsync(cancellationToken);
        }

        /// <summary>
        /// Gets all IpGroups in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/ipGroups
        /// Operation Id: IpGroups_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="IPGroup" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<IPGroup> GetIPGroups(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetIPGroups(cancellationToken);
        }

        /// <summary>
        /// Gets all the load balancers in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/loadBalancers
        /// Operation Id: LoadBalancers_ListAll
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="LoadBalancer" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<LoadBalancer> GetLoadBalancersAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetLoadBalancersAsync(cancellationToken);
        }

        /// <summary>
        /// Gets all the load balancers in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/loadBalancers
        /// Operation Id: LoadBalancers_ListAll
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="LoadBalancer" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<LoadBalancer> GetLoadBalancers(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetLoadBalancers(cancellationToken);
        }

        /// <summary>
        /// Swaps VIPs between two load balancers.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/locations/{location}/setLoadBalancerFrontendPublicIpAddresses
        /// Operation Id: LoadBalancers_SwapPublicIPAddresses
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="waitUntil"> "F:Azure.WaitUntil.Completed" if the method should wait to return until the long-running operation has completed on the service; "F:Azure.WaitUntil.Started" if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="location"> The region where load balancers are located at. </param>
        /// <param name="parameters"> Parameters that define which VIPs should be swapped. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="location"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="location"/> or <paramref name="parameters"/> is null. </exception>
        public static async Task<ArmOperation> SwapPublicIPAddressesLoadBalancerAsync(this Subscription subscription, WaitUntil waitUntil, string location, LoadBalancerVipSwapRequest parameters, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(location, nameof(location));
            Argument.AssertNotNull(parameters, nameof(parameters));

            return await GetExtensionClient(subscription).SwapPublicIPAddressesLoadBalancerAsync(waitUntil, location, parameters, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Swaps VIPs between two load balancers.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/locations/{location}/setLoadBalancerFrontendPublicIpAddresses
        /// Operation Id: LoadBalancers_SwapPublicIPAddresses
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="waitUntil"> "F:Azure.WaitUntil.Completed" if the method should wait to return until the long-running operation has completed on the service; "F:Azure.WaitUntil.Started" if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="location"> The region where load balancers are located at. </param>
        /// <param name="parameters"> Parameters that define which VIPs should be swapped. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="location"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="location"/> or <paramref name="parameters"/> is null. </exception>
        public static ArmOperation SwapPublicIPAddressesLoadBalancer(this Subscription subscription, WaitUntil waitUntil, string location, LoadBalancerVipSwapRequest parameters, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(location, nameof(location));
            Argument.AssertNotNull(parameters, nameof(parameters));

            return GetExtensionClient(subscription).SwapPublicIPAddressesLoadBalancer(waitUntil, location, parameters, cancellationToken);
        }

        /// <summary>
        /// Gets all the Nat Gateways in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/natGateways
        /// Operation Id: NatGateways_ListAll
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="NatGateway" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<NatGateway> GetNatGatewaysAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetNatGatewaysAsync(cancellationToken);
        }

        /// <summary>
        /// Gets all the Nat Gateways in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/natGateways
        /// Operation Id: NatGateways_ListAll
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="NatGateway" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<NatGateway> GetNatGateways(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetNatGateways(cancellationToken);
        }

        /// <summary>
        /// Gets all network interfaces in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/networkInterfaces
        /// Operation Id: NetworkInterfaces_ListAll
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="NetworkInterface" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<NetworkInterface> GetNetworkInterfacesAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetNetworkInterfacesAsync(cancellationToken);
        }

        /// <summary>
        /// Gets all network interfaces in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/networkInterfaces
        /// Operation Id: NetworkInterfaces_ListAll
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="NetworkInterface" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<NetworkInterface> GetNetworkInterfaces(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetNetworkInterfaces(cancellationToken);
        }

        /// <summary>
        /// Gets all the network profiles in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/networkProfiles
        /// Operation Id: NetworkProfiles_ListAll
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="NetworkProfile" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<NetworkProfile> GetNetworkProfilesAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetNetworkProfilesAsync(cancellationToken);
        }

        /// <summary>
        /// Gets all the network profiles in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/networkProfiles
        /// Operation Id: NetworkProfiles_ListAll
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="NetworkProfile" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<NetworkProfile> GetNetworkProfiles(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetNetworkProfiles(cancellationToken);
        }

        /// <summary>
        /// Gets all network security groups in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/networkSecurityGroups
        /// Operation Id: NetworkSecurityGroups_ListAll
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="NetworkSecurityGroup" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<NetworkSecurityGroup> GetNetworkSecurityGroupsAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetNetworkSecurityGroupsAsync(cancellationToken);
        }

        /// <summary>
        /// Gets all network security groups in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/networkSecurityGroups
        /// Operation Id: NetworkSecurityGroups_ListAll
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="NetworkSecurityGroup" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<NetworkSecurityGroup> GetNetworkSecurityGroups(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetNetworkSecurityGroups(cancellationToken);
        }

        /// <summary>
        /// Gets all Network Virtual Appliances in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/networkVirtualAppliances
        /// Operation Id: NetworkVirtualAppliances_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="NetworkVirtualAppliance" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<NetworkVirtualAppliance> GetNetworkVirtualAppliancesAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetNetworkVirtualAppliancesAsync(cancellationToken);
        }

        /// <summary>
        /// Gets all Network Virtual Appliances in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/networkVirtualAppliances
        /// Operation Id: NetworkVirtualAppliances_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="NetworkVirtualAppliance" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<NetworkVirtualAppliance> GetNetworkVirtualAppliances(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetNetworkVirtualAppliances(cancellationToken);
        }

        /// <summary>
        /// Gets all network watchers by subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/networkWatchers
        /// Operation Id: NetworkWatchers_ListAll
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="NetworkWatcher" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<NetworkWatcher> GetNetworkWatchersAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetNetworkWatchersAsync(cancellationToken);
        }

        /// <summary>
        /// Gets all network watchers by subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/networkWatchers
        /// Operation Id: NetworkWatchers_ListAll
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="NetworkWatcher" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<NetworkWatcher> GetNetworkWatchers(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetNetworkWatchers(cancellationToken);
        }

        /// <summary>
        /// Gets all private endpoints in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/privateEndpoints
        /// Operation Id: PrivateEndpoints_ListBySubscription
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="PrivateEndpoint" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<PrivateEndpoint> GetPrivateEndpointsAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetPrivateEndpointsAsync(cancellationToken);
        }

        /// <summary>
        /// Gets all private endpoints in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/privateEndpoints
        /// Operation Id: PrivateEndpoints_ListBySubscription
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="PrivateEndpoint" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<PrivateEndpoint> GetPrivateEndpoints(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetPrivateEndpoints(cancellationToken);
        }

        /// <summary>
        /// Returns all of the resource types that can be linked to a Private Endpoint in this subscription in this region.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/locations/{location}/availablePrivateEndpointTypes
        /// Operation Id: AvailablePrivateEndpointTypes_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="location"> The location of the domain name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="location"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="location"/> is null. </exception>
        /// <returns> An async collection of <see cref="AvailablePrivateEndpointType" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<AvailablePrivateEndpointType> GetAvailablePrivateEndpointTypesAsync(this Subscription subscription, string location, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(location, nameof(location));

            return GetExtensionClient(subscription).GetAvailablePrivateEndpointTypesAsync(location, cancellationToken);
        }

        /// <summary>
        /// Returns all of the resource types that can be linked to a Private Endpoint in this subscription in this region.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/locations/{location}/availablePrivateEndpointTypes
        /// Operation Id: AvailablePrivateEndpointTypes_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="location"> The location of the domain name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="location"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="location"/> is null. </exception>
        /// <returns> A collection of <see cref="AvailablePrivateEndpointType" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<AvailablePrivateEndpointType> GetAvailablePrivateEndpointTypes(this Subscription subscription, string location, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(location, nameof(location));

            return GetExtensionClient(subscription).GetAvailablePrivateEndpointTypes(location, cancellationToken);
        }

        /// <summary>
        /// Gets all private link service in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/privateLinkServices
        /// Operation Id: PrivateLinkServices_ListBySubscription
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="PrivateLinkService" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<PrivateLinkService> GetPrivateLinkServicesAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetPrivateLinkServicesAsync(cancellationToken);
        }

        /// <summary>
        /// Gets all private link service in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/privateLinkServices
        /// Operation Id: PrivateLinkServices_ListBySubscription
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="PrivateLinkService" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<PrivateLinkService> GetPrivateLinkServices(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetPrivateLinkServices(cancellationToken);
        }

        /// <summary>
        /// Checks whether the subscription is visible to private link service.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/locations/{location}/checkPrivateLinkServiceVisibility
        /// Operation Id: PrivateLinkServices_CheckPrivateLinkServiceVisibility
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="waitUntil"> "F:Azure.WaitUntil.Completed" if the method should wait to return until the long-running operation has completed on the service; "F:Azure.WaitUntil.Started" if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="location"> The location of the domain name. </param>
        /// <param name="parameters"> The request body of CheckPrivateLinkService API call. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="location"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="location"/> or <paramref name="parameters"/> is null. </exception>
        public static async Task<ArmOperation<PrivateLinkServiceVisibility>> CheckPrivateLinkServiceVisibilityPrivateLinkServiceAsync(this Subscription subscription, WaitUntil waitUntil, string location, CheckPrivateLinkServiceVisibilityRequest parameters, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(location, nameof(location));
            Argument.AssertNotNull(parameters, nameof(parameters));

            return await GetExtensionClient(subscription).CheckPrivateLinkServiceVisibilityPrivateLinkServiceAsync(waitUntil, location, parameters, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Checks whether the subscription is visible to private link service.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/locations/{location}/checkPrivateLinkServiceVisibility
        /// Operation Id: PrivateLinkServices_CheckPrivateLinkServiceVisibility
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="waitUntil"> "F:Azure.WaitUntil.Completed" if the method should wait to return until the long-running operation has completed on the service; "F:Azure.WaitUntil.Started" if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="location"> The location of the domain name. </param>
        /// <param name="parameters"> The request body of CheckPrivateLinkService API call. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="location"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="location"/> or <paramref name="parameters"/> is null. </exception>
        public static ArmOperation<PrivateLinkServiceVisibility> CheckPrivateLinkServiceVisibilityPrivateLinkService(this Subscription subscription, WaitUntil waitUntil, string location, CheckPrivateLinkServiceVisibilityRequest parameters, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(location, nameof(location));
            Argument.AssertNotNull(parameters, nameof(parameters));

            return GetExtensionClient(subscription).CheckPrivateLinkServiceVisibilityPrivateLinkService(waitUntil, location, parameters, cancellationToken);
        }

        /// <summary>
        /// Returns all of the private link service ids that can be linked to a Private Endpoint with auto approved in this subscription in this region.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/locations/{location}/autoApprovedPrivateLinkServices
        /// Operation Id: PrivateLinkServices_ListAutoApprovedPrivateLinkServices
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="location"> The location of the domain name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="location"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="location"/> is null. </exception>
        /// <returns> An async collection of <see cref="AutoApprovedPrivateLinkService" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<AutoApprovedPrivateLinkService> GetAutoApprovedPrivateLinkServicesPrivateLinkServicesAsync(this Subscription subscription, string location, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(location, nameof(location));

            return GetExtensionClient(subscription).GetAutoApprovedPrivateLinkServicesPrivateLinkServicesAsync(location, cancellationToken);
        }

        /// <summary>
        /// Returns all of the private link service ids that can be linked to a Private Endpoint with auto approved in this subscription in this region.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/locations/{location}/autoApprovedPrivateLinkServices
        /// Operation Id: PrivateLinkServices_ListAutoApprovedPrivateLinkServices
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="location"> The location of the domain name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="location"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="location"/> is null. </exception>
        /// <returns> A collection of <see cref="AutoApprovedPrivateLinkService" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<AutoApprovedPrivateLinkService> GetAutoApprovedPrivateLinkServicesPrivateLinkServices(this Subscription subscription, string location, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(location, nameof(location));

            return GetExtensionClient(subscription).GetAutoApprovedPrivateLinkServicesPrivateLinkServices(location, cancellationToken);
        }

        /// <summary>
        /// Gets all the public IP addresses in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/publicIPAddresses
        /// Operation Id: PublicIPAddresses_ListAll
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="PublicIPAddress" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<PublicIPAddress> GetPublicIPAddressesAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetPublicIPAddressesAsync(cancellationToken);
        }

        /// <summary>
        /// Gets all the public IP addresses in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/publicIPAddresses
        /// Operation Id: PublicIPAddresses_ListAll
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="PublicIPAddress" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<PublicIPAddress> GetPublicIPAddresses(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetPublicIPAddresses(cancellationToken);
        }

        /// <summary>
        /// Gets all the public IP prefixes in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/publicIPPrefixes
        /// Operation Id: PublicIPPrefixes_ListAll
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="PublicIPPrefix" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<PublicIPPrefix> GetPublicIPPrefixesAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetPublicIPPrefixesAsync(cancellationToken);
        }

        /// <summary>
        /// Gets all the public IP prefixes in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/publicIPPrefixes
        /// Operation Id: PublicIPPrefixes_ListAll
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="PublicIPPrefix" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<PublicIPPrefix> GetPublicIPPrefixes(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetPublicIPPrefixes(cancellationToken);
        }

        /// <summary>
        /// Gets all route filters in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/routeFilters
        /// Operation Id: RouteFilters_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="RouteFilter" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<RouteFilter> GetRouteFiltersAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetRouteFiltersAsync(cancellationToken);
        }

        /// <summary>
        /// Gets all route filters in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/routeFilters
        /// Operation Id: RouteFilters_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="RouteFilter" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<RouteFilter> GetRouteFilters(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetRouteFilters(cancellationToken);
        }

        /// <summary>
        /// Gets all route tables in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/routeTables
        /// Operation Id: RouteTables_ListAll
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="RouteTable" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<RouteTable> GetRouteTablesAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetRouteTablesAsync(cancellationToken);
        }

        /// <summary>
        /// Gets all route tables in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/routeTables
        /// Operation Id: RouteTables_ListAll
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="RouteTable" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<RouteTable> GetRouteTables(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetRouteTables(cancellationToken);
        }

        /// <summary>
        /// Gets all the Security Partner Providers in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/securityPartnerProviders
        /// Operation Id: SecurityPartnerProviders_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SecurityPartnerProvider" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<SecurityPartnerProvider> GetSecurityPartnerProvidersAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetSecurityPartnerProvidersAsync(cancellationToken);
        }

        /// <summary>
        /// Gets all the Security Partner Providers in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/securityPartnerProviders
        /// Operation Id: SecurityPartnerProviders_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SecurityPartnerProvider" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<SecurityPartnerProvider> GetSecurityPartnerProviders(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetSecurityPartnerProviders(cancellationToken);
        }

        /// <summary>
        /// Gets all the available bgp service communities.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/bgpServiceCommunities
        /// Operation Id: BgpServiceCommunities_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="BgpServiceCommunity" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<BgpServiceCommunity> GetBgpServiceCommunitiesAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetBgpServiceCommunitiesAsync(cancellationToken);
        }

        /// <summary>
        /// Gets all the available bgp service communities.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/bgpServiceCommunities
        /// Operation Id: BgpServiceCommunities_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="BgpServiceCommunity" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<BgpServiceCommunity> GetBgpServiceCommunities(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetBgpServiceCommunities(cancellationToken);
        }

        /// <summary>
        /// Gets all the service endpoint policies in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/ServiceEndpointPolicies
        /// Operation Id: ServiceEndpointPolicies_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ServiceEndpointPolicy" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<ServiceEndpointPolicy> GetServiceEndpointPoliciesByServiceEndpointPolicyAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetServiceEndpointPoliciesByServiceEndpointPolicyAsync(cancellationToken);
        }

        /// <summary>
        /// Gets all the service endpoint policies in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/ServiceEndpointPolicies
        /// Operation Id: ServiceEndpointPolicies_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ServiceEndpointPolicy" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<ServiceEndpointPolicy> GetServiceEndpointPoliciesByServiceEndpointPolicy(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetServiceEndpointPoliciesByServiceEndpointPolicy(cancellationToken);
        }

        /// <summary>
        /// Gets a list of service tag information resources.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/locations/{location}/serviceTags
        /// Operation Id: ServiceTags_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="location"> The location that will be used as a reference for version (not as a filter based on location, you will get the list of service tags with prefix details across all regions but limited to the cloud that your subscription belongs to). </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="location"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="location"/> is null. </exception>
        public static async Task<Response<ServiceTagsListResult>> GetServiceTagAsync(this Subscription subscription, string location, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(location, nameof(location));

            return await GetExtensionClient(subscription).GetServiceTagAsync(location, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets a list of service tag information resources.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/locations/{location}/serviceTags
        /// Operation Id: ServiceTags_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="location"> The location that will be used as a reference for version (not as a filter based on location, you will get the list of service tags with prefix details across all regions but limited to the cloud that your subscription belongs to). </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="location"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="location"/> is null. </exception>
        public static Response<ServiceTagsListResult> GetServiceTag(this Subscription subscription, string location, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(location, nameof(location));

            return GetExtensionClient(subscription).GetServiceTag(location, cancellationToken);
        }

        /// <summary>
        /// List network usages for a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/locations/{location}/usages
        /// Operation Id: Usages_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="location"> The location where resource usage is queried. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="location"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="location"/> is null. </exception>
        /// <returns> An async collection of <see cref="NetworkUsage" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<NetworkUsage> GetUsagesAsync(this Subscription subscription, string location, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(location, nameof(location));

            return GetExtensionClient(subscription).GetUsagesAsync(location, cancellationToken);
        }

        /// <summary>
        /// List network usages for a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/locations/{location}/usages
        /// Operation Id: Usages_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="location"> The location where resource usage is queried. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="location"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="location"/> is null. </exception>
        /// <returns> A collection of <see cref="NetworkUsage" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<NetworkUsage> GetUsages(this Subscription subscription, string location, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(location, nameof(location));

            return GetExtensionClient(subscription).GetUsages(location, cancellationToken);
        }

        /// <summary>
        /// Gets all virtual networks in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/virtualNetworks
        /// Operation Id: VirtualNetworks_ListAll
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="VirtualNetwork" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<VirtualNetwork> GetVirtualNetworksAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetVirtualNetworksAsync(cancellationToken);
        }

        /// <summary>
        /// Gets all virtual networks in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/virtualNetworks
        /// Operation Id: VirtualNetworks_ListAll
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="VirtualNetwork" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<VirtualNetwork> GetVirtualNetworks(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetVirtualNetworks(cancellationToken);
        }

        /// <summary>
        /// Gets all the VirtualNetworkTaps in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/virtualNetworkTaps
        /// Operation Id: VirtualNetworkTaps_ListAll
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="VirtualNetworkTap" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<VirtualNetworkTap> GetVirtualNetworkTapsAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetVirtualNetworkTapsAsync(cancellationToken);
        }

        /// <summary>
        /// Gets all the VirtualNetworkTaps in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/virtualNetworkTaps
        /// Operation Id: VirtualNetworkTaps_ListAll
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="VirtualNetworkTap" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<VirtualNetworkTap> GetVirtualNetworkTaps(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetVirtualNetworkTaps(cancellationToken);
        }

        /// <summary>
        /// Gets all the Virtual Routers in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/virtualRouters
        /// Operation Id: VirtualRouters_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="VirtualRouter" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<VirtualRouter> GetVirtualRoutersAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetVirtualRoutersAsync(cancellationToken);
        }

        /// <summary>
        /// Gets all the Virtual Routers in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/virtualRouters
        /// Operation Id: VirtualRouters_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="VirtualRouter" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<VirtualRouter> GetVirtualRouters(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetVirtualRouters(cancellationToken);
        }

        /// <summary>
        /// Lists all the VirtualWANs in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/virtualWans
        /// Operation Id: VirtualWans_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="VirtualWan" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<VirtualWan> GetVirtualWansAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetVirtualWansAsync(cancellationToken);
        }

        /// <summary>
        /// Lists all the VirtualWANs in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/virtualWans
        /// Operation Id: VirtualWans_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="VirtualWan" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<VirtualWan> GetVirtualWans(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetVirtualWans(cancellationToken);
        }

        /// <summary>
        /// Lists all the VpnSites in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/vpnSites
        /// Operation Id: VpnSites_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="VpnSite" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<VpnSite> GetVpnSitesAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetVpnSitesAsync(cancellationToken);
        }

        /// <summary>
        /// Lists all the VpnSites in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/vpnSites
        /// Operation Id: VpnSites_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="VpnSite" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<VpnSite> GetVpnSites(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetVpnSites(cancellationToken);
        }

        /// <summary>
        /// Lists all the VpnServerConfigurations in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/vpnServerConfigurations
        /// Operation Id: VpnServerConfigurations_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="VpnServerConfiguration" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<VpnServerConfiguration> GetVpnServerConfigurationsAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetVpnServerConfigurationsAsync(cancellationToken);
        }

        /// <summary>
        /// Lists all the VpnServerConfigurations in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/vpnServerConfigurations
        /// Operation Id: VpnServerConfigurations_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="VpnServerConfiguration" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<VpnServerConfiguration> GetVpnServerConfigurations(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetVpnServerConfigurations(cancellationToken);
        }

        /// <summary>
        /// Lists all the VirtualHubs in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/virtualHubs
        /// Operation Id: VirtualHubs_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="VirtualHub" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<VirtualHub> GetVirtualHubsAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetVirtualHubsAsync(cancellationToken);
        }

        /// <summary>
        /// Lists all the VirtualHubs in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/virtualHubs
        /// Operation Id: VirtualHubs_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="VirtualHub" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<VirtualHub> GetVirtualHubs(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetVirtualHubs(cancellationToken);
        }

        /// <summary>
        /// Lists all the VpnGateways in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/vpnGateways
        /// Operation Id: VpnGateways_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="VpnGateway" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<VpnGateway> GetVpnGatewaysAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetVpnGatewaysAsync(cancellationToken);
        }

        /// <summary>
        /// Lists all the VpnGateways in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/vpnGateways
        /// Operation Id: VpnGateways_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="VpnGateway" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<VpnGateway> GetVpnGateways(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetVpnGateways(cancellationToken);
        }

        /// <summary>
        /// Lists all the P2SVpnGateways in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/p2svpnGateways
        /// Operation Id: P2sVpnGateways_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="P2SVpnGateway" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<P2SVpnGateway> GetP2SVpnGatewaysAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetP2SVpnGatewaysAsync(cancellationToken);
        }

        /// <summary>
        /// Lists all the P2SVpnGateways in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/p2svpnGateways
        /// Operation Id: P2sVpnGateways_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="P2SVpnGateway" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<P2SVpnGateway> GetP2SVpnGateways(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetP2SVpnGateways(cancellationToken);
        }

        /// <summary>
        /// Lists ExpressRoute gateways under a given subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/expressRouteGateways
        /// Operation Id: ExpressRouteGateways_ListBySubscription
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ExpressRouteGateway" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<ExpressRouteGateway> GetExpressRouteGatewaysAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetExpressRouteGatewaysAsync(cancellationToken);
        }

        /// <summary>
        /// Lists ExpressRoute gateways under a given subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/expressRouteGateways
        /// Operation Id: ExpressRouteGateways_ListBySubscription
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ExpressRouteGateway" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<ExpressRouteGateway> GetExpressRouteGateways(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetExpressRouteGateways(cancellationToken);
        }

        /// <summary>
        /// Gets all the WAF policies in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/ApplicationGatewayWebApplicationFirewallPolicies
        /// Operation Id: WebApplicationFirewallPolicies_ListAll
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="WebApplicationFirewallPolicy" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<WebApplicationFirewallPolicy> GetWebApplicationFirewallPoliciesAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetWebApplicationFirewallPoliciesAsync(cancellationToken);
        }

        /// <summary>
        /// Gets all the WAF policies in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/ApplicationGatewayWebApplicationFirewallPolicies
        /// Operation Id: WebApplicationFirewallPolicies_ListAll
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="WebApplicationFirewallPolicy" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<WebApplicationFirewallPolicy> GetWebApplicationFirewallPolicies(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetWebApplicationFirewallPolicies(cancellationToken);
        }

        private static ResourceGroupExtensionClient GetExtensionClient(ResourceGroup resourceGroup)
        {
            return resourceGroup.GetCachedClient((client) =>
            {
                return new ResourceGroupExtensionClient(client, resourceGroup.Id);
            }
            );
        }

        /// <summary> Gets a collection of ApplicationGateways in the ApplicationGateway. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of ApplicationGateways and their operations over a ApplicationGateway. </returns>
        public static ApplicationGatewayCollection GetApplicationGateways(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetApplicationGateways();
        }

        /// <summary>
        /// Gets the specified application gateway.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}
        /// Operation Id: ApplicationGateways_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="applicationGatewayName"> The name of the application gateway. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="applicationGatewayName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="applicationGatewayName"/> is null. </exception>
        public static async Task<Response<ApplicationGateway>> GetApplicationGatewayAsync(this ResourceGroup resourceGroup, string applicationGatewayName, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetApplicationGateways().GetAsync(applicationGatewayName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets the specified application gateway.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}
        /// Operation Id: ApplicationGateways_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="applicationGatewayName"> The name of the application gateway. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="applicationGatewayName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="applicationGatewayName"/> is null. </exception>
        public static Response<ApplicationGateway> GetApplicationGateway(this ResourceGroup resourceGroup, string applicationGatewayName, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetApplicationGateways().Get(applicationGatewayName, cancellationToken);
        }

        /// <summary> Gets a collection of ApplicationSecurityGroups in the ApplicationSecurityGroup. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of ApplicationSecurityGroups and their operations over a ApplicationSecurityGroup. </returns>
        public static ApplicationSecurityGroupCollection GetApplicationSecurityGroups(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetApplicationSecurityGroups();
        }

        /// <summary>
        /// Gets information about the specified application security group.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationSecurityGroups/{applicationSecurityGroupName}
        /// Operation Id: ApplicationSecurityGroups_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="applicationSecurityGroupName"> The name of the application security group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="applicationSecurityGroupName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="applicationSecurityGroupName"/> is null. </exception>
        public static async Task<Response<ApplicationSecurityGroup>> GetApplicationSecurityGroupAsync(this ResourceGroup resourceGroup, string applicationSecurityGroupName, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetApplicationSecurityGroups().GetAsync(applicationSecurityGroupName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets information about the specified application security group.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationSecurityGroups/{applicationSecurityGroupName}
        /// Operation Id: ApplicationSecurityGroups_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="applicationSecurityGroupName"> The name of the application security group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="applicationSecurityGroupName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="applicationSecurityGroupName"/> is null. </exception>
        public static Response<ApplicationSecurityGroup> GetApplicationSecurityGroup(this ResourceGroup resourceGroup, string applicationSecurityGroupName, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetApplicationSecurityGroups().Get(applicationSecurityGroupName, cancellationToken);
        }

        /// <summary> Gets a collection of AzureFirewalls in the AzureFirewall. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of AzureFirewalls and their operations over a AzureFirewall. </returns>
        public static AzureFirewallCollection GetAzureFirewalls(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetAzureFirewalls();
        }

        /// <summary>
        /// Gets the specified Azure Firewall.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/azureFirewalls/{azureFirewallName}
        /// Operation Id: AzureFirewalls_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="azureFirewallName"> The name of the Azure Firewall. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="azureFirewallName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="azureFirewallName"/> is null. </exception>
        public static async Task<Response<AzureFirewall>> GetAzureFirewallAsync(this ResourceGroup resourceGroup, string azureFirewallName, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetAzureFirewalls().GetAsync(azureFirewallName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets the specified Azure Firewall.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/azureFirewalls/{azureFirewallName}
        /// Operation Id: AzureFirewalls_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="azureFirewallName"> The name of the Azure Firewall. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="azureFirewallName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="azureFirewallName"/> is null. </exception>
        public static Response<AzureFirewall> GetAzureFirewall(this ResourceGroup resourceGroup, string azureFirewallName, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetAzureFirewalls().Get(azureFirewallName, cancellationToken);
        }

        /// <summary> Gets a collection of BastionHosts in the BastionHost. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of BastionHosts and their operations over a BastionHost. </returns>
        public static BastionHostCollection GetBastionHosts(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetBastionHosts();
        }

        /// <summary>
        /// Gets the specified Bastion Host.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/bastionHosts/{bastionHostName}
        /// Operation Id: BastionHosts_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="bastionHostName"> The name of the Bastion Host. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="bastionHostName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="bastionHostName"/> is null. </exception>
        public static async Task<Response<BastionHost>> GetBastionHostAsync(this ResourceGroup resourceGroup, string bastionHostName, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetBastionHosts().GetAsync(bastionHostName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets the specified Bastion Host.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/bastionHosts/{bastionHostName}
        /// Operation Id: BastionHosts_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="bastionHostName"> The name of the Bastion Host. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="bastionHostName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="bastionHostName"/> is null. </exception>
        public static Response<BastionHost> GetBastionHost(this ResourceGroup resourceGroup, string bastionHostName, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetBastionHosts().Get(bastionHostName, cancellationToken);
        }

        /// <summary> Gets a collection of CustomIPPrefixes in the CustomIPPrefix. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of CustomIPPrefixes and their operations over a CustomIPPrefix. </returns>
        public static CustomIPPrefixCollection GetCustomIPPrefixes(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetCustomIPPrefixes();
        }

        /// <summary>
        /// Gets the specified custom IP prefix in a specified resource group.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/customIpPrefixes/{customIpPrefixName}
        /// Operation Id: CustomIPPrefixes_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="customIPPrefixName"> The name of the custom IP prefix. </param>
        /// <param name="expand"> Expands referenced resources. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="customIPPrefixName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="customIPPrefixName"/> is null. </exception>
        public static async Task<Response<CustomIPPrefix>> GetCustomIPPrefixAsync(this ResourceGroup resourceGroup, string customIPPrefixName, string expand = null, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetCustomIPPrefixes().GetAsync(customIPPrefixName, expand, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets the specified custom IP prefix in a specified resource group.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/customIpPrefixes/{customIpPrefixName}
        /// Operation Id: CustomIPPrefixes_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="customIPPrefixName"> The name of the custom IP prefix. </param>
        /// <param name="expand"> Expands referenced resources. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="customIPPrefixName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="customIPPrefixName"/> is null. </exception>
        public static Response<CustomIPPrefix> GetCustomIPPrefix(this ResourceGroup resourceGroup, string customIPPrefixName, string expand = null, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetCustomIPPrefixes().Get(customIPPrefixName, expand, cancellationToken);
        }

        /// <summary> Gets a collection of DdosCustomPolicies in the DdosCustomPolicy. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of DdosCustomPolicies and their operations over a DdosCustomPolicy. </returns>
        public static DdosCustomPolicyCollection GetDdosCustomPolicies(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetDdosCustomPolicies();
        }

        /// <summary>
        /// Gets information about the specified DDoS custom policy.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/ddosCustomPolicies/{ddosCustomPolicyName}
        /// Operation Id: DdosCustomPolicies_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="ddosCustomPolicyName"> The name of the DDoS custom policy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="ddosCustomPolicyName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="ddosCustomPolicyName"/> is null. </exception>
        public static async Task<Response<DdosCustomPolicy>> GetDdosCustomPolicyAsync(this ResourceGroup resourceGroup, string ddosCustomPolicyName, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetDdosCustomPolicies().GetAsync(ddosCustomPolicyName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets information about the specified DDoS custom policy.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/ddosCustomPolicies/{ddosCustomPolicyName}
        /// Operation Id: DdosCustomPolicies_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="ddosCustomPolicyName"> The name of the DDoS custom policy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="ddosCustomPolicyName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="ddosCustomPolicyName"/> is null. </exception>
        public static Response<DdosCustomPolicy> GetDdosCustomPolicy(this ResourceGroup resourceGroup, string ddosCustomPolicyName, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetDdosCustomPolicies().Get(ddosCustomPolicyName, cancellationToken);
        }

        /// <summary> Gets a collection of DdosProtectionPlans in the DdosProtectionPlan. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of DdosProtectionPlans and their operations over a DdosProtectionPlan. </returns>
        public static DdosProtectionPlanCollection GetDdosProtectionPlans(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetDdosProtectionPlans();
        }

        /// <summary>
        /// Gets information about the specified DDoS protection plan.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/ddosProtectionPlans/{ddosProtectionPlanName}
        /// Operation Id: DdosProtectionPlans_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="ddosProtectionPlanName"> The name of the DDoS protection plan. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="ddosProtectionPlanName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="ddosProtectionPlanName"/> is null. </exception>
        public static async Task<Response<DdosProtectionPlan>> GetDdosProtectionPlanAsync(this ResourceGroup resourceGroup, string ddosProtectionPlanName, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetDdosProtectionPlans().GetAsync(ddosProtectionPlanName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets information about the specified DDoS protection plan.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/ddosProtectionPlans/{ddosProtectionPlanName}
        /// Operation Id: DdosProtectionPlans_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="ddosProtectionPlanName"> The name of the DDoS protection plan. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="ddosProtectionPlanName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="ddosProtectionPlanName"/> is null. </exception>
        public static Response<DdosProtectionPlan> GetDdosProtectionPlan(this ResourceGroup resourceGroup, string ddosProtectionPlanName, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetDdosProtectionPlans().Get(ddosProtectionPlanName, cancellationToken);
        }

        /// <summary> Gets a collection of DscpConfigurations in the DscpConfiguration. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of DscpConfigurations and their operations over a DscpConfiguration. </returns>
        public static DscpConfigurationCollection GetDscpConfigurations(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetDscpConfigurations();
        }

        /// <summary>
        /// Gets a DSCP Configuration.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dscpConfigurations/{dscpConfigurationName}
        /// Operation Id: DscpConfiguration_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="dscpConfigurationName"> The name of the resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dscpConfigurationName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dscpConfigurationName"/> is null. </exception>
        public static async Task<Response<DscpConfiguration>> GetDscpConfigurationAsync(this ResourceGroup resourceGroup, string dscpConfigurationName, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetDscpConfigurations().GetAsync(dscpConfigurationName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets a DSCP Configuration.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dscpConfigurations/{dscpConfigurationName}
        /// Operation Id: DscpConfiguration_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="dscpConfigurationName"> The name of the resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dscpConfigurationName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dscpConfigurationName"/> is null. </exception>
        public static Response<DscpConfiguration> GetDscpConfiguration(this ResourceGroup resourceGroup, string dscpConfigurationName, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetDscpConfigurations().Get(dscpConfigurationName, cancellationToken);
        }

        /// <summary> Gets a collection of ExpressRouteCircuits in the ExpressRouteCircuit. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of ExpressRouteCircuits and their operations over a ExpressRouteCircuit. </returns>
        public static ExpressRouteCircuitCollection GetExpressRouteCircuits(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetExpressRouteCircuits();
        }

        /// <summary>
        /// Gets information about the specified express route circuit.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}
        /// Operation Id: ExpressRouteCircuits_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="circuitName"> The name of express route circuit. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="circuitName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="circuitName"/> is null. </exception>
        public static async Task<Response<ExpressRouteCircuit>> GetExpressRouteCircuitAsync(this ResourceGroup resourceGroup, string circuitName, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetExpressRouteCircuits().GetAsync(circuitName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets information about the specified express route circuit.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}
        /// Operation Id: ExpressRouteCircuits_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="circuitName"> The name of express route circuit. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="circuitName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="circuitName"/> is null. </exception>
        public static Response<ExpressRouteCircuit> GetExpressRouteCircuit(this ResourceGroup resourceGroup, string circuitName, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetExpressRouteCircuits().Get(circuitName, cancellationToken);
        }

        /// <summary> Gets a collection of ExpressRouteCrossConnections in the ExpressRouteCrossConnection. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of ExpressRouteCrossConnections and their operations over a ExpressRouteCrossConnection. </returns>
        public static ExpressRouteCrossConnectionCollection GetExpressRouteCrossConnections(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetExpressRouteCrossConnections();
        }

        /// <summary>
        /// Gets details about the specified ExpressRouteCrossConnection.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCrossConnections/{crossConnectionName}
        /// Operation Id: ExpressRouteCrossConnections_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="crossConnectionName"> The name of the ExpressRouteCrossConnection (service key of the circuit). </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="crossConnectionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="crossConnectionName"/> is null. </exception>
        public static async Task<Response<ExpressRouteCrossConnection>> GetExpressRouteCrossConnectionAsync(this ResourceGroup resourceGroup, string crossConnectionName, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetExpressRouteCrossConnections().GetAsync(crossConnectionName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets details about the specified ExpressRouteCrossConnection.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCrossConnections/{crossConnectionName}
        /// Operation Id: ExpressRouteCrossConnections_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="crossConnectionName"> The name of the ExpressRouteCrossConnection (service key of the circuit). </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="crossConnectionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="crossConnectionName"/> is null. </exception>
        public static Response<ExpressRouteCrossConnection> GetExpressRouteCrossConnection(this ResourceGroup resourceGroup, string crossConnectionName, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetExpressRouteCrossConnections().Get(crossConnectionName, cancellationToken);
        }

        /// <summary> Gets a collection of ExpressRoutePorts in the ExpressRoutePort. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of ExpressRoutePorts and their operations over a ExpressRoutePort. </returns>
        public static ExpressRoutePortCollection GetExpressRoutePorts(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetExpressRoutePorts();
        }

        /// <summary>
        /// Retrieves the requested ExpressRoutePort resource.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/ExpressRoutePorts/{expressRoutePortName}
        /// Operation Id: ExpressRoutePorts_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="expressRoutePortName"> The name of ExpressRoutePort. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="expressRoutePortName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="expressRoutePortName"/> is null. </exception>
        public static async Task<Response<ExpressRoutePort>> GetExpressRoutePortAsync(this ResourceGroup resourceGroup, string expressRoutePortName, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetExpressRoutePorts().GetAsync(expressRoutePortName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Retrieves the requested ExpressRoutePort resource.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/ExpressRoutePorts/{expressRoutePortName}
        /// Operation Id: ExpressRoutePorts_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="expressRoutePortName"> The name of ExpressRoutePort. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="expressRoutePortName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="expressRoutePortName"/> is null. </exception>
        public static Response<ExpressRoutePort> GetExpressRoutePort(this ResourceGroup resourceGroup, string expressRoutePortName, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetExpressRoutePorts().Get(expressRoutePortName, cancellationToken);
        }

        /// <summary> Gets a collection of FirewallPolicies in the FirewallPolicy. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of FirewallPolicies and their operations over a FirewallPolicy. </returns>
        public static FirewallPolicyCollection GetFirewallPolicies(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetFirewallPolicies();
        }

        /// <summary>
        /// Gets the specified Firewall Policy.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/firewallPolicies/{firewallPolicyName}
        /// Operation Id: FirewallPolicies_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="firewallPolicyName"> The name of the Firewall Policy. </param>
        /// <param name="expand"> Expands referenced resources. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="firewallPolicyName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="firewallPolicyName"/> is null. </exception>
        public static async Task<Response<FirewallPolicy>> GetFirewallPolicyAsync(this ResourceGroup resourceGroup, string firewallPolicyName, string expand = null, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetFirewallPolicies().GetAsync(firewallPolicyName, expand, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets the specified Firewall Policy.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/firewallPolicies/{firewallPolicyName}
        /// Operation Id: FirewallPolicies_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="firewallPolicyName"> The name of the Firewall Policy. </param>
        /// <param name="expand"> Expands referenced resources. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="firewallPolicyName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="firewallPolicyName"/> is null. </exception>
        public static Response<FirewallPolicy> GetFirewallPolicy(this ResourceGroup resourceGroup, string firewallPolicyName, string expand = null, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetFirewallPolicies().Get(firewallPolicyName, expand, cancellationToken);
        }

        /// <summary> Gets a collection of IPAllocations in the IPAllocation. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of IPAllocations and their operations over a IPAllocation. </returns>
        public static IPAllocationCollection GetIPAllocations(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetIPAllocations();
        }

        /// <summary>
        /// Gets the specified IpAllocation by resource group.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/IpAllocations/{ipAllocationName}
        /// Operation Id: IpAllocations_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="ipAllocationName"> The name of the IpAllocation. </param>
        /// <param name="expand"> Expands referenced resources. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="ipAllocationName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="ipAllocationName"/> is null. </exception>
        public static async Task<Response<IPAllocation>> GetIPAllocationAsync(this ResourceGroup resourceGroup, string ipAllocationName, string expand = null, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetIPAllocations().GetAsync(ipAllocationName, expand, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets the specified IpAllocation by resource group.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/IpAllocations/{ipAllocationName}
        /// Operation Id: IpAllocations_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="ipAllocationName"> The name of the IpAllocation. </param>
        /// <param name="expand"> Expands referenced resources. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="ipAllocationName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="ipAllocationName"/> is null. </exception>
        public static Response<IPAllocation> GetIPAllocation(this ResourceGroup resourceGroup, string ipAllocationName, string expand = null, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetIPAllocations().Get(ipAllocationName, expand, cancellationToken);
        }

        /// <summary> Gets a collection of IPGroups in the IPGroup. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of IPGroups and their operations over a IPGroup. </returns>
        public static IPGroupCollection GetIPGroups(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetIPGroups();
        }

        /// <summary>
        /// Gets the specified ipGroups.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/ipGroups/{ipGroupsName}
        /// Operation Id: IpGroups_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="ipGroupsName"> The name of the ipGroups. </param>
        /// <param name="expand"> Expands resourceIds (of Firewalls/Network Security Groups etc.) back referenced by the IpGroups resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="ipGroupsName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="ipGroupsName"/> is null. </exception>
        public static async Task<Response<IPGroup>> GetIPGroupAsync(this ResourceGroup resourceGroup, string ipGroupsName, string expand = null, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetIPGroups().GetAsync(ipGroupsName, expand, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets the specified ipGroups.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/ipGroups/{ipGroupsName}
        /// Operation Id: IpGroups_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="ipGroupsName"> The name of the ipGroups. </param>
        /// <param name="expand"> Expands resourceIds (of Firewalls/Network Security Groups etc.) back referenced by the IpGroups resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="ipGroupsName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="ipGroupsName"/> is null. </exception>
        public static Response<IPGroup> GetIPGroup(this ResourceGroup resourceGroup, string ipGroupsName, string expand = null, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetIPGroups().Get(ipGroupsName, expand, cancellationToken);
        }

        /// <summary> Gets a collection of LoadBalancers in the LoadBalancer. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of LoadBalancers and their operations over a LoadBalancer. </returns>
        public static LoadBalancerCollection GetLoadBalancers(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetLoadBalancers();
        }

        /// <summary>
        /// Gets the specified load balancer.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}
        /// Operation Id: LoadBalancers_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="loadBalancerName"> The name of the load balancer. </param>
        /// <param name="expand"> Expands referenced resources. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="loadBalancerName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="loadBalancerName"/> is null. </exception>
        public static async Task<Response<LoadBalancer>> GetLoadBalancerAsync(this ResourceGroup resourceGroup, string loadBalancerName, string expand = null, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetLoadBalancers().GetAsync(loadBalancerName, expand, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets the specified load balancer.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}
        /// Operation Id: LoadBalancers_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="loadBalancerName"> The name of the load balancer. </param>
        /// <param name="expand"> Expands referenced resources. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="loadBalancerName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="loadBalancerName"/> is null. </exception>
        public static Response<LoadBalancer> GetLoadBalancer(this ResourceGroup resourceGroup, string loadBalancerName, string expand = null, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetLoadBalancers().Get(loadBalancerName, expand, cancellationToken);
        }

        /// <summary> Gets a collection of NatGateways in the NatGateway. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of NatGateways and their operations over a NatGateway. </returns>
        public static NatGatewayCollection GetNatGateways(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetNatGateways();
        }

        /// <summary>
        /// Gets the specified nat gateway in a specified resource group.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/natGateways/{natGatewayName}
        /// Operation Id: NatGateways_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="natGatewayName"> The name of the nat gateway. </param>
        /// <param name="expand"> Expands referenced resources. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="natGatewayName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="natGatewayName"/> is null. </exception>
        public static async Task<Response<NatGateway>> GetNatGatewayAsync(this ResourceGroup resourceGroup, string natGatewayName, string expand = null, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetNatGateways().GetAsync(natGatewayName, expand, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets the specified nat gateway in a specified resource group.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/natGateways/{natGatewayName}
        /// Operation Id: NatGateways_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="natGatewayName"> The name of the nat gateway. </param>
        /// <param name="expand"> Expands referenced resources. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="natGatewayName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="natGatewayName"/> is null. </exception>
        public static Response<NatGateway> GetNatGateway(this ResourceGroup resourceGroup, string natGatewayName, string expand = null, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetNatGateways().Get(natGatewayName, expand, cancellationToken);
        }

        /// <summary> Gets a collection of NetworkInterfaces in the NetworkInterface. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of NetworkInterfaces and their operations over a NetworkInterface. </returns>
        public static NetworkInterfaceCollection GetNetworkInterfaces(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetNetworkInterfaces();
        }

        /// <summary>
        /// Gets information about the specified network interface.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}
        /// Operation Id: NetworkInterfaces_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="networkInterfaceName"> The name of the network interface. </param>
        /// <param name="expand"> Expands referenced resources. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="networkInterfaceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="networkInterfaceName"/> is null. </exception>
        public static async Task<Response<NetworkInterface>> GetNetworkInterfaceAsync(this ResourceGroup resourceGroup, string networkInterfaceName, string expand = null, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetNetworkInterfaces().GetAsync(networkInterfaceName, expand, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets information about the specified network interface.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}
        /// Operation Id: NetworkInterfaces_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="networkInterfaceName"> The name of the network interface. </param>
        /// <param name="expand"> Expands referenced resources. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="networkInterfaceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="networkInterfaceName"/> is null. </exception>
        public static Response<NetworkInterface> GetNetworkInterface(this ResourceGroup resourceGroup, string networkInterfaceName, string expand = null, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetNetworkInterfaces().Get(networkInterfaceName, expand, cancellationToken);
        }

        /// <summary> Gets a collection of NetworkProfiles in the NetworkProfile. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of NetworkProfiles and their operations over a NetworkProfile. </returns>
        public static NetworkProfileCollection GetNetworkProfiles(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetNetworkProfiles();
        }

        /// <summary>
        /// Gets the specified network profile in a specified resource group.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkProfiles/{networkProfileName}
        /// Operation Id: NetworkProfiles_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="networkProfileName"> The name of the public IP prefix. </param>
        /// <param name="expand"> Expands referenced resources. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="networkProfileName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="networkProfileName"/> is null. </exception>
        public static async Task<Response<NetworkProfile>> GetNetworkProfileAsync(this ResourceGroup resourceGroup, string networkProfileName, string expand = null, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetNetworkProfiles().GetAsync(networkProfileName, expand, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets the specified network profile in a specified resource group.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkProfiles/{networkProfileName}
        /// Operation Id: NetworkProfiles_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="networkProfileName"> The name of the public IP prefix. </param>
        /// <param name="expand"> Expands referenced resources. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="networkProfileName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="networkProfileName"/> is null. </exception>
        public static Response<NetworkProfile> GetNetworkProfile(this ResourceGroup resourceGroup, string networkProfileName, string expand = null, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetNetworkProfiles().Get(networkProfileName, expand, cancellationToken);
        }

        /// <summary> Gets a collection of NetworkSecurityGroups in the NetworkSecurityGroup. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of NetworkSecurityGroups and their operations over a NetworkSecurityGroup. </returns>
        public static NetworkSecurityGroupCollection GetNetworkSecurityGroups(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetNetworkSecurityGroups();
        }

        /// <summary>
        /// Gets the specified network security group.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityGroups/{networkSecurityGroupName}
        /// Operation Id: NetworkSecurityGroups_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="networkSecurityGroupName"> The name of the network security group. </param>
        /// <param name="expand"> Expands referenced resources. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="networkSecurityGroupName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="networkSecurityGroupName"/> is null. </exception>
        public static async Task<Response<NetworkSecurityGroup>> GetNetworkSecurityGroupAsync(this ResourceGroup resourceGroup, string networkSecurityGroupName, string expand = null, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetNetworkSecurityGroups().GetAsync(networkSecurityGroupName, expand, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets the specified network security group.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityGroups/{networkSecurityGroupName}
        /// Operation Id: NetworkSecurityGroups_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="networkSecurityGroupName"> The name of the network security group. </param>
        /// <param name="expand"> Expands referenced resources. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="networkSecurityGroupName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="networkSecurityGroupName"/> is null. </exception>
        public static Response<NetworkSecurityGroup> GetNetworkSecurityGroup(this ResourceGroup resourceGroup, string networkSecurityGroupName, string expand = null, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetNetworkSecurityGroups().Get(networkSecurityGroupName, expand, cancellationToken);
        }

        /// <summary> Gets a collection of NetworkVirtualAppliances in the NetworkVirtualAppliance. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of NetworkVirtualAppliances and their operations over a NetworkVirtualAppliance. </returns>
        public static NetworkVirtualApplianceCollection GetNetworkVirtualAppliances(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetNetworkVirtualAppliances();
        }

        /// <summary>
        /// Gets the specified Network Virtual Appliance.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkVirtualAppliances/{networkVirtualApplianceName}
        /// Operation Id: NetworkVirtualAppliances_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="networkVirtualApplianceName"> The name of Network Virtual Appliance. </param>
        /// <param name="expand"> Expands referenced resources. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="networkVirtualApplianceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="networkVirtualApplianceName"/> is null. </exception>
        public static async Task<Response<NetworkVirtualAppliance>> GetNetworkVirtualApplianceAsync(this ResourceGroup resourceGroup, string networkVirtualApplianceName, string expand = null, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetNetworkVirtualAppliances().GetAsync(networkVirtualApplianceName, expand, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets the specified Network Virtual Appliance.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkVirtualAppliances/{networkVirtualApplianceName}
        /// Operation Id: NetworkVirtualAppliances_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="networkVirtualApplianceName"> The name of Network Virtual Appliance. </param>
        /// <param name="expand"> Expands referenced resources. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="networkVirtualApplianceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="networkVirtualApplianceName"/> is null. </exception>
        public static Response<NetworkVirtualAppliance> GetNetworkVirtualAppliance(this ResourceGroup resourceGroup, string networkVirtualApplianceName, string expand = null, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetNetworkVirtualAppliances().Get(networkVirtualApplianceName, expand, cancellationToken);
        }

        /// <summary> Gets a collection of NetworkWatchers in the NetworkWatcher. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of NetworkWatchers and their operations over a NetworkWatcher. </returns>
        public static NetworkWatcherCollection GetNetworkWatchers(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetNetworkWatchers();
        }

        /// <summary>
        /// Gets the specified network watcher by resource group.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}
        /// Operation Id: NetworkWatchers_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="networkWatcherName"> The name of the network watcher. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="networkWatcherName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="networkWatcherName"/> is null. </exception>
        public static async Task<Response<NetworkWatcher>> GetNetworkWatcherAsync(this ResourceGroup resourceGroup, string networkWatcherName, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetNetworkWatchers().GetAsync(networkWatcherName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets the specified network watcher by resource group.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}
        /// Operation Id: NetworkWatchers_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="networkWatcherName"> The name of the network watcher. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="networkWatcherName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="networkWatcherName"/> is null. </exception>
        public static Response<NetworkWatcher> GetNetworkWatcher(this ResourceGroup resourceGroup, string networkWatcherName, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetNetworkWatchers().Get(networkWatcherName, cancellationToken);
        }

        /// <summary> Gets a collection of PrivateEndpoints in the PrivateEndpoint. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of PrivateEndpoints and their operations over a PrivateEndpoint. </returns>
        public static PrivateEndpointCollection GetPrivateEndpoints(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetPrivateEndpoints();
        }

        /// <summary>
        /// Gets the specified private endpoint by resource group.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/privateEndpoints/{privateEndpointName}
        /// Operation Id: PrivateEndpoints_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="privateEndpointName"> The name of the private endpoint. </param>
        /// <param name="expand"> Expands referenced resources. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="privateEndpointName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="privateEndpointName"/> is null. </exception>
        public static async Task<Response<PrivateEndpoint>> GetPrivateEndpointAsync(this ResourceGroup resourceGroup, string privateEndpointName, string expand = null, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetPrivateEndpoints().GetAsync(privateEndpointName, expand, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets the specified private endpoint by resource group.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/privateEndpoints/{privateEndpointName}
        /// Operation Id: PrivateEndpoints_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="privateEndpointName"> The name of the private endpoint. </param>
        /// <param name="expand"> Expands referenced resources. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="privateEndpointName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="privateEndpointName"/> is null. </exception>
        public static Response<PrivateEndpoint> GetPrivateEndpoint(this ResourceGroup resourceGroup, string privateEndpointName, string expand = null, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetPrivateEndpoints().Get(privateEndpointName, expand, cancellationToken);
        }

        /// <summary> Gets a collection of PrivateLinkServices in the PrivateLinkService. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of PrivateLinkServices and their operations over a PrivateLinkService. </returns>
        public static PrivateLinkServiceCollection GetPrivateLinkServices(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetPrivateLinkServices();
        }

        /// <summary>
        /// Gets the specified private link service by resource group.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/privateLinkServices/{serviceName}
        /// Operation Id: PrivateLinkServices_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="serviceName"> The name of the private link service. </param>
        /// <param name="expand"> Expands referenced resources. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="serviceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="serviceName"/> is null. </exception>
        public static async Task<Response<PrivateLinkService>> GetPrivateLinkServiceAsync(this ResourceGroup resourceGroup, string serviceName, string expand = null, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetPrivateLinkServices().GetAsync(serviceName, expand, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets the specified private link service by resource group.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/privateLinkServices/{serviceName}
        /// Operation Id: PrivateLinkServices_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="serviceName"> The name of the private link service. </param>
        /// <param name="expand"> Expands referenced resources. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="serviceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="serviceName"/> is null. </exception>
        public static Response<PrivateLinkService> GetPrivateLinkService(this ResourceGroup resourceGroup, string serviceName, string expand = null, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetPrivateLinkServices().Get(serviceName, expand, cancellationToken);
        }

        /// <summary> Gets a collection of PublicIPAddresses in the PublicIPAddress. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of PublicIPAddresses and their operations over a PublicIPAddress. </returns>
        public static PublicIPAddressCollection GetPublicIPAddresses(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetPublicIPAddresses();
        }

        /// <summary>
        /// Gets the specified public IP address in a specified resource group.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/publicIPAddresses/{publicIpAddressName}
        /// Operation Id: PublicIPAddresses_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="publicIPAddressName"> The name of the public IP address. </param>
        /// <param name="expand"> Expands referenced resources. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="publicIPAddressName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="publicIPAddressName"/> is null. </exception>
        public static async Task<Response<PublicIPAddress>> GetPublicIPAddressAsync(this ResourceGroup resourceGroup, string publicIPAddressName, string expand = null, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetPublicIPAddresses().GetAsync(publicIPAddressName, expand, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets the specified public IP address in a specified resource group.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/publicIPAddresses/{publicIpAddressName}
        /// Operation Id: PublicIPAddresses_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="publicIPAddressName"> The name of the public IP address. </param>
        /// <param name="expand"> Expands referenced resources. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="publicIPAddressName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="publicIPAddressName"/> is null. </exception>
        public static Response<PublicIPAddress> GetPublicIPAddress(this ResourceGroup resourceGroup, string publicIPAddressName, string expand = null, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetPublicIPAddresses().Get(publicIPAddressName, expand, cancellationToken);
        }

        /// <summary> Gets a collection of PublicIPPrefixes in the PublicIPPrefix. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of PublicIPPrefixes and their operations over a PublicIPPrefix. </returns>
        public static PublicIPPrefixCollection GetPublicIPPrefixes(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetPublicIPPrefixes();
        }

        /// <summary>
        /// Gets the specified public IP prefix in a specified resource group.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/publicIPPrefixes/{publicIpPrefixName}
        /// Operation Id: PublicIPPrefixes_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="publicIPPrefixName"> The name of the public IP prefix. </param>
        /// <param name="expand"> Expands referenced resources. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="publicIPPrefixName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="publicIPPrefixName"/> is null. </exception>
        public static async Task<Response<PublicIPPrefix>> GetPublicIPPrefixAsync(this ResourceGroup resourceGroup, string publicIPPrefixName, string expand = null, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetPublicIPPrefixes().GetAsync(publicIPPrefixName, expand, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets the specified public IP prefix in a specified resource group.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/publicIPPrefixes/{publicIpPrefixName}
        /// Operation Id: PublicIPPrefixes_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="publicIPPrefixName"> The name of the public IP prefix. </param>
        /// <param name="expand"> Expands referenced resources. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="publicIPPrefixName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="publicIPPrefixName"/> is null. </exception>
        public static Response<PublicIPPrefix> GetPublicIPPrefix(this ResourceGroup resourceGroup, string publicIPPrefixName, string expand = null, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetPublicIPPrefixes().Get(publicIPPrefixName, expand, cancellationToken);
        }

        /// <summary> Gets a collection of RouteFilters in the RouteFilter. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of RouteFilters and their operations over a RouteFilter. </returns>
        public static RouteFilterCollection GetRouteFilters(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetRouteFilters();
        }

        /// <summary>
        /// Gets the specified route filter.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeFilters/{routeFilterName}
        /// Operation Id: RouteFilters_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="routeFilterName"> The name of the route filter. </param>
        /// <param name="expand"> Expands referenced express route bgp peering resources. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="routeFilterName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="routeFilterName"/> is null. </exception>
        public static async Task<Response<RouteFilter>> GetRouteFilterAsync(this ResourceGroup resourceGroup, string routeFilterName, string expand = null, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetRouteFilters().GetAsync(routeFilterName, expand, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets the specified route filter.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeFilters/{routeFilterName}
        /// Operation Id: RouteFilters_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="routeFilterName"> The name of the route filter. </param>
        /// <param name="expand"> Expands referenced express route bgp peering resources. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="routeFilterName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="routeFilterName"/> is null. </exception>
        public static Response<RouteFilter> GetRouteFilter(this ResourceGroup resourceGroup, string routeFilterName, string expand = null, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetRouteFilters().Get(routeFilterName, expand, cancellationToken);
        }

        /// <summary> Gets a collection of RouteTables in the RouteTable. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of RouteTables and their operations over a RouteTable. </returns>
        public static RouteTableCollection GetRouteTables(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetRouteTables();
        }

        /// <summary>
        /// Gets the specified route table.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeTables/{routeTableName}
        /// Operation Id: RouteTables_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="routeTableName"> The name of the route table. </param>
        /// <param name="expand"> Expands referenced resources. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="routeTableName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="routeTableName"/> is null. </exception>
        public static async Task<Response<RouteTable>> GetRouteTableAsync(this ResourceGroup resourceGroup, string routeTableName, string expand = null, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetRouteTables().GetAsync(routeTableName, expand, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets the specified route table.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeTables/{routeTableName}
        /// Operation Id: RouteTables_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="routeTableName"> The name of the route table. </param>
        /// <param name="expand"> Expands referenced resources. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="routeTableName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="routeTableName"/> is null. </exception>
        public static Response<RouteTable> GetRouteTable(this ResourceGroup resourceGroup, string routeTableName, string expand = null, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetRouteTables().Get(routeTableName, expand, cancellationToken);
        }

        /// <summary> Gets a collection of SecurityPartnerProviders in the SecurityPartnerProvider. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of SecurityPartnerProviders and their operations over a SecurityPartnerProvider. </returns>
        public static SecurityPartnerProviderCollection GetSecurityPartnerProviders(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetSecurityPartnerProviders();
        }

        /// <summary>
        /// Gets the specified Security Partner Provider.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/securityPartnerProviders/{securityPartnerProviderName}
        /// Operation Id: SecurityPartnerProviders_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="securityPartnerProviderName"> The name of the Security Partner Provider. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="securityPartnerProviderName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="securityPartnerProviderName"/> is null. </exception>
        public static async Task<Response<SecurityPartnerProvider>> GetSecurityPartnerProviderAsync(this ResourceGroup resourceGroup, string securityPartnerProviderName, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetSecurityPartnerProviders().GetAsync(securityPartnerProviderName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets the specified Security Partner Provider.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/securityPartnerProviders/{securityPartnerProviderName}
        /// Operation Id: SecurityPartnerProviders_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="securityPartnerProviderName"> The name of the Security Partner Provider. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="securityPartnerProviderName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="securityPartnerProviderName"/> is null. </exception>
        public static Response<SecurityPartnerProvider> GetSecurityPartnerProvider(this ResourceGroup resourceGroup, string securityPartnerProviderName, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetSecurityPartnerProviders().Get(securityPartnerProviderName, cancellationToken);
        }

        /// <summary> Gets a collection of ServiceEndpointPolicies in the ServiceEndpointPolicy. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of ServiceEndpointPolicies and their operations over a ServiceEndpointPolicy. </returns>
        public static ServiceEndpointPolicyCollection GetServiceEndpointPolicies(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetServiceEndpointPolicies();
        }

        /// <summary>
        /// Gets the specified service Endpoint Policies in a specified resource group.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/serviceEndpointPolicies/{serviceEndpointPolicyName}
        /// Operation Id: ServiceEndpointPolicies_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="serviceEndpointPolicyName"> The name of the service endpoint policy. </param>
        /// <param name="expand"> Expands referenced resources. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="serviceEndpointPolicyName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="serviceEndpointPolicyName"/> is null. </exception>
        public static async Task<Response<ServiceEndpointPolicy>> GetServiceEndpointPolicyAsync(this ResourceGroup resourceGroup, string serviceEndpointPolicyName, string expand = null, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetServiceEndpointPolicies().GetAsync(serviceEndpointPolicyName, expand, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets the specified service Endpoint Policies in a specified resource group.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/serviceEndpointPolicies/{serviceEndpointPolicyName}
        /// Operation Id: ServiceEndpointPolicies_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="serviceEndpointPolicyName"> The name of the service endpoint policy. </param>
        /// <param name="expand"> Expands referenced resources. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="serviceEndpointPolicyName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="serviceEndpointPolicyName"/> is null. </exception>
        public static Response<ServiceEndpointPolicy> GetServiceEndpointPolicy(this ResourceGroup resourceGroup, string serviceEndpointPolicyName, string expand = null, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetServiceEndpointPolicies().Get(serviceEndpointPolicyName, expand, cancellationToken);
        }

        /// <summary> Gets a collection of VirtualNetworks in the VirtualNetwork. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of VirtualNetworks and their operations over a VirtualNetwork. </returns>
        public static VirtualNetworkCollection GetVirtualNetworks(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetVirtualNetworks();
        }

        /// <summary>
        /// Gets the specified virtual network by resource group.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}
        /// Operation Id: VirtualNetworks_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="virtualNetworkName"> The name of the virtual network. </param>
        /// <param name="expand"> Expands referenced resources. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="virtualNetworkName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="virtualNetworkName"/> is null. </exception>
        public static async Task<Response<VirtualNetwork>> GetVirtualNetworkAsync(this ResourceGroup resourceGroup, string virtualNetworkName, string expand = null, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetVirtualNetworks().GetAsync(virtualNetworkName, expand, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets the specified virtual network by resource group.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}
        /// Operation Id: VirtualNetworks_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="virtualNetworkName"> The name of the virtual network. </param>
        /// <param name="expand"> Expands referenced resources. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="virtualNetworkName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="virtualNetworkName"/> is null. </exception>
        public static Response<VirtualNetwork> GetVirtualNetwork(this ResourceGroup resourceGroup, string virtualNetworkName, string expand = null, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetVirtualNetworks().Get(virtualNetworkName, expand, cancellationToken);
        }

        /// <summary> Gets a collection of VirtualNetworkGateways in the VirtualNetworkGateway. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of VirtualNetworkGateways and their operations over a VirtualNetworkGateway. </returns>
        public static VirtualNetworkGatewayCollection GetVirtualNetworkGateways(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetVirtualNetworkGateways();
        }

        /// <summary>
        /// Gets the specified virtual network gateway by resource group.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}
        /// Operation Id: VirtualNetworkGateways_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="virtualNetworkGatewayName"> The name of the virtual network gateway. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="virtualNetworkGatewayName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="virtualNetworkGatewayName"/> is null. </exception>
        public static async Task<Response<VirtualNetworkGateway>> GetVirtualNetworkGatewayAsync(this ResourceGroup resourceGroup, string virtualNetworkGatewayName, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetVirtualNetworkGateways().GetAsync(virtualNetworkGatewayName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets the specified virtual network gateway by resource group.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}
        /// Operation Id: VirtualNetworkGateways_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="virtualNetworkGatewayName"> The name of the virtual network gateway. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="virtualNetworkGatewayName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="virtualNetworkGatewayName"/> is null. </exception>
        public static Response<VirtualNetworkGateway> GetVirtualNetworkGateway(this ResourceGroup resourceGroup, string virtualNetworkGatewayName, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetVirtualNetworkGateways().Get(virtualNetworkGatewayName, cancellationToken);
        }

        /// <summary> Gets a collection of VirtualNetworkGatewayConnections in the VirtualNetworkGatewayConnection. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of VirtualNetworkGatewayConnections and their operations over a VirtualNetworkGatewayConnection. </returns>
        public static VirtualNetworkGatewayConnectionCollection GetVirtualNetworkGatewayConnections(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetVirtualNetworkGatewayConnections();
        }

        /// <summary>
        /// Gets the specified virtual network gateway connection by resource group.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/connections/{virtualNetworkGatewayConnectionName}
        /// Operation Id: VirtualNetworkGatewayConnections_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="virtualNetworkGatewayConnectionName"> The name of the virtual network gateway connection. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="virtualNetworkGatewayConnectionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="virtualNetworkGatewayConnectionName"/> is null. </exception>
        public static async Task<Response<VirtualNetworkGatewayConnection>> GetVirtualNetworkGatewayConnectionAsync(this ResourceGroup resourceGroup, string virtualNetworkGatewayConnectionName, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetVirtualNetworkGatewayConnections().GetAsync(virtualNetworkGatewayConnectionName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets the specified virtual network gateway connection by resource group.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/connections/{virtualNetworkGatewayConnectionName}
        /// Operation Id: VirtualNetworkGatewayConnections_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="virtualNetworkGatewayConnectionName"> The name of the virtual network gateway connection. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="virtualNetworkGatewayConnectionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="virtualNetworkGatewayConnectionName"/> is null. </exception>
        public static Response<VirtualNetworkGatewayConnection> GetVirtualNetworkGatewayConnection(this ResourceGroup resourceGroup, string virtualNetworkGatewayConnectionName, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetVirtualNetworkGatewayConnections().Get(virtualNetworkGatewayConnectionName, cancellationToken);
        }

        /// <summary> Gets a collection of LocalNetworkGateways in the LocalNetworkGateway. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of LocalNetworkGateways and their operations over a LocalNetworkGateway. </returns>
        public static LocalNetworkGatewayCollection GetLocalNetworkGateways(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetLocalNetworkGateways();
        }

        /// <summary>
        /// Gets the specified local network gateway in a resource group.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/localNetworkGateways/{localNetworkGatewayName}
        /// Operation Id: LocalNetworkGateways_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="localNetworkGatewayName"> The name of the local network gateway. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="localNetworkGatewayName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="localNetworkGatewayName"/> is null. </exception>
        public static async Task<Response<LocalNetworkGateway>> GetLocalNetworkGatewayAsync(this ResourceGroup resourceGroup, string localNetworkGatewayName, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetLocalNetworkGateways().GetAsync(localNetworkGatewayName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets the specified local network gateway in a resource group.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/localNetworkGateways/{localNetworkGatewayName}
        /// Operation Id: LocalNetworkGateways_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="localNetworkGatewayName"> The name of the local network gateway. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="localNetworkGatewayName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="localNetworkGatewayName"/> is null. </exception>
        public static Response<LocalNetworkGateway> GetLocalNetworkGateway(this ResourceGroup resourceGroup, string localNetworkGatewayName, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetLocalNetworkGateways().Get(localNetworkGatewayName, cancellationToken);
        }

        /// <summary> Gets a collection of VirtualNetworkTaps in the VirtualNetworkTap. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of VirtualNetworkTaps and their operations over a VirtualNetworkTap. </returns>
        public static VirtualNetworkTapCollection GetVirtualNetworkTaps(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetVirtualNetworkTaps();
        }

        /// <summary>
        /// Gets information about the specified virtual network tap.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkTaps/{tapName}
        /// Operation Id: VirtualNetworkTaps_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="tapName"> The name of virtual network tap. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="tapName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="tapName"/> is null. </exception>
        public static async Task<Response<VirtualNetworkTap>> GetVirtualNetworkTapAsync(this ResourceGroup resourceGroup, string tapName, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetVirtualNetworkTaps().GetAsync(tapName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets information about the specified virtual network tap.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkTaps/{tapName}
        /// Operation Id: VirtualNetworkTaps_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="tapName"> The name of virtual network tap. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="tapName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="tapName"/> is null. </exception>
        public static Response<VirtualNetworkTap> GetVirtualNetworkTap(this ResourceGroup resourceGroup, string tapName, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetVirtualNetworkTaps().Get(tapName, cancellationToken);
        }

        /// <summary> Gets a collection of VirtualRouters in the VirtualRouter. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of VirtualRouters and their operations over a VirtualRouter. </returns>
        public static VirtualRouterCollection GetVirtualRouters(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetVirtualRouters();
        }

        /// <summary>
        /// Gets the specified Virtual Router.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualRouters/{virtualRouterName}
        /// Operation Id: VirtualRouters_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="virtualRouterName"> The name of the Virtual Router. </param>
        /// <param name="expand"> Expands referenced resources. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="virtualRouterName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="virtualRouterName"/> is null. </exception>
        public static async Task<Response<VirtualRouter>> GetVirtualRouterAsync(this ResourceGroup resourceGroup, string virtualRouterName, string expand = null, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetVirtualRouters().GetAsync(virtualRouterName, expand, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets the specified Virtual Router.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualRouters/{virtualRouterName}
        /// Operation Id: VirtualRouters_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="virtualRouterName"> The name of the Virtual Router. </param>
        /// <param name="expand"> Expands referenced resources. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="virtualRouterName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="virtualRouterName"/> is null. </exception>
        public static Response<VirtualRouter> GetVirtualRouter(this ResourceGroup resourceGroup, string virtualRouterName, string expand = null, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetVirtualRouters().Get(virtualRouterName, expand, cancellationToken);
        }

        /// <summary> Gets a collection of VirtualWans in the VirtualWan. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of VirtualWans and their operations over a VirtualWan. </returns>
        public static VirtualWanCollection GetVirtualWans(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetVirtualWans();
        }

        /// <summary>
        /// Retrieves the details of a VirtualWAN.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualWans/{VirtualWANName}
        /// Operation Id: VirtualWans_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="virtualWanName"> The name of the VirtualWAN being retrieved. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="virtualWanName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="virtualWanName"/> is null. </exception>
        public static async Task<Response<VirtualWan>> GetVirtualWanAsync(this ResourceGroup resourceGroup, string virtualWanName, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetVirtualWans().GetAsync(virtualWanName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Retrieves the details of a VirtualWAN.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualWans/{VirtualWANName}
        /// Operation Id: VirtualWans_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="virtualWanName"> The name of the VirtualWAN being retrieved. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="virtualWanName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="virtualWanName"/> is null. </exception>
        public static Response<VirtualWan> GetVirtualWan(this ResourceGroup resourceGroup, string virtualWanName, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetVirtualWans().Get(virtualWanName, cancellationToken);
        }

        /// <summary> Gets a collection of VpnSites in the VpnSite. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of VpnSites and their operations over a VpnSite. </returns>
        public static VpnSiteCollection GetVpnSites(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetVpnSites();
        }

        /// <summary>
        /// Retrieves the details of a VPN site.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnSites/{vpnSiteName}
        /// Operation Id: VpnSites_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="vpnSiteName"> The name of the VpnSite being retrieved. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="vpnSiteName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="vpnSiteName"/> is null. </exception>
        public static async Task<Response<VpnSite>> GetVpnSiteAsync(this ResourceGroup resourceGroup, string vpnSiteName, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetVpnSites().GetAsync(vpnSiteName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Retrieves the details of a VPN site.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnSites/{vpnSiteName}
        /// Operation Id: VpnSites_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="vpnSiteName"> The name of the VpnSite being retrieved. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="vpnSiteName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="vpnSiteName"/> is null. </exception>
        public static Response<VpnSite> GetVpnSite(this ResourceGroup resourceGroup, string vpnSiteName, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetVpnSites().Get(vpnSiteName, cancellationToken);
        }

        /// <summary> Gets a collection of VpnServerConfigurations in the VpnServerConfiguration. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of VpnServerConfigurations and their operations over a VpnServerConfiguration. </returns>
        public static VpnServerConfigurationCollection GetVpnServerConfigurations(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetVpnServerConfigurations();
        }

        /// <summary>
        /// Retrieves the details of a VpnServerConfiguration.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnServerConfigurations/{vpnServerConfigurationName}
        /// Operation Id: VpnServerConfigurations_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="vpnServerConfigurationName"> The name of the VpnServerConfiguration being retrieved. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="vpnServerConfigurationName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="vpnServerConfigurationName"/> is null. </exception>
        public static async Task<Response<VpnServerConfiguration>> GetVpnServerConfigurationAsync(this ResourceGroup resourceGroup, string vpnServerConfigurationName, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetVpnServerConfigurations().GetAsync(vpnServerConfigurationName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Retrieves the details of a VpnServerConfiguration.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnServerConfigurations/{vpnServerConfigurationName}
        /// Operation Id: VpnServerConfigurations_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="vpnServerConfigurationName"> The name of the VpnServerConfiguration being retrieved. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="vpnServerConfigurationName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="vpnServerConfigurationName"/> is null. </exception>
        public static Response<VpnServerConfiguration> GetVpnServerConfiguration(this ResourceGroup resourceGroup, string vpnServerConfigurationName, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetVpnServerConfigurations().Get(vpnServerConfigurationName, cancellationToken);
        }

        /// <summary> Gets a collection of VirtualHubs in the VirtualHub. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of VirtualHubs and their operations over a VirtualHub. </returns>
        public static VirtualHubCollection GetVirtualHubs(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetVirtualHubs();
        }

        /// <summary>
        /// Retrieves the details of a VirtualHub.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualHubs/{virtualHubName}
        /// Operation Id: VirtualHubs_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="virtualHubName"> The name of the VirtualHub. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="virtualHubName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="virtualHubName"/> is null. </exception>
        public static async Task<Response<VirtualHub>> GetVirtualHubAsync(this ResourceGroup resourceGroup, string virtualHubName, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetVirtualHubs().GetAsync(virtualHubName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Retrieves the details of a VirtualHub.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualHubs/{virtualHubName}
        /// Operation Id: VirtualHubs_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="virtualHubName"> The name of the VirtualHub. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="virtualHubName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="virtualHubName"/> is null. </exception>
        public static Response<VirtualHub> GetVirtualHub(this ResourceGroup resourceGroup, string virtualHubName, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetVirtualHubs().Get(virtualHubName, cancellationToken);
        }

        /// <summary> Gets a collection of VpnGateways in the VpnGateway. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of VpnGateways and their operations over a VpnGateway. </returns>
        public static VpnGatewayCollection GetVpnGateways(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetVpnGateways();
        }

        /// <summary>
        /// Retrieves the details of a virtual wan vpn gateway.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnGateways/{gatewayName}
        /// Operation Id: VpnGateways_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="gatewayName"> The name of the gateway. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="gatewayName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="gatewayName"/> is null. </exception>
        public static async Task<Response<VpnGateway>> GetVpnGatewayAsync(this ResourceGroup resourceGroup, string gatewayName, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetVpnGateways().GetAsync(gatewayName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Retrieves the details of a virtual wan vpn gateway.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnGateways/{gatewayName}
        /// Operation Id: VpnGateways_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="gatewayName"> The name of the gateway. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="gatewayName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="gatewayName"/> is null. </exception>
        public static Response<VpnGateway> GetVpnGateway(this ResourceGroup resourceGroup, string gatewayName, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetVpnGateways().Get(gatewayName, cancellationToken);
        }

        /// <summary> Gets a collection of P2SVpnGateways in the P2SVpnGateway. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of P2SVpnGateways and their operations over a P2SVpnGateway. </returns>
        public static P2SVpnGatewayCollection GetP2SVpnGateways(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetP2SVpnGateways();
        }

        /// <summary>
        /// Retrieves the details of a virtual wan p2s vpn gateway.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/p2svpnGateways/{gatewayName}
        /// Operation Id: P2sVpnGateways_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="gatewayName"> The name of the gateway. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="gatewayName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="gatewayName"/> is null. </exception>
        public static async Task<Response<P2SVpnGateway>> GetP2SVpnGatewayAsync(this ResourceGroup resourceGroup, string gatewayName, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetP2SVpnGateways().GetAsync(gatewayName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Retrieves the details of a virtual wan p2s vpn gateway.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/p2svpnGateways/{gatewayName}
        /// Operation Id: P2sVpnGateways_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="gatewayName"> The name of the gateway. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="gatewayName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="gatewayName"/> is null. </exception>
        public static Response<P2SVpnGateway> GetP2SVpnGateway(this ResourceGroup resourceGroup, string gatewayName, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetP2SVpnGateways().Get(gatewayName, cancellationToken);
        }

        /// <summary> Gets a collection of ExpressRouteGateways in the ExpressRouteGateway. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of ExpressRouteGateways and their operations over a ExpressRouteGateway. </returns>
        public static ExpressRouteGatewayCollection GetExpressRouteGateways(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetExpressRouteGateways();
        }

        /// <summary>
        /// Fetches the details of a ExpressRoute gateway in a resource group.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteGateways/{expressRouteGatewayName}
        /// Operation Id: ExpressRouteGateways_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="expressRouteGatewayName"> The name of the ExpressRoute gateway. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="expressRouteGatewayName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="expressRouteGatewayName"/> is null. </exception>
        public static async Task<Response<ExpressRouteGateway>> GetExpressRouteGatewayAsync(this ResourceGroup resourceGroup, string expressRouteGatewayName, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetExpressRouteGateways().GetAsync(expressRouteGatewayName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Fetches the details of a ExpressRoute gateway in a resource group.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteGateways/{expressRouteGatewayName}
        /// Operation Id: ExpressRouteGateways_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="expressRouteGatewayName"> The name of the ExpressRoute gateway. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="expressRouteGatewayName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="expressRouteGatewayName"/> is null. </exception>
        public static Response<ExpressRouteGateway> GetExpressRouteGateway(this ResourceGroup resourceGroup, string expressRouteGatewayName, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetExpressRouteGateways().Get(expressRouteGatewayName, cancellationToken);
        }

        /// <summary> Gets a collection of WebApplicationFirewallPolicies in the WebApplicationFirewallPolicy. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of WebApplicationFirewallPolicies and their operations over a WebApplicationFirewallPolicy. </returns>
        public static WebApplicationFirewallPolicyCollection GetWebApplicationFirewallPolicies(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetWebApplicationFirewallPolicies();
        }

        /// <summary>
        /// Retrieve protection policy with specified name within a resource group.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/ApplicationGatewayWebApplicationFirewallPolicies/{policyName}
        /// Operation Id: WebApplicationFirewallPolicies_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="policyName"> The name of the policy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="policyName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="policyName"/> is null. </exception>
        public static async Task<Response<WebApplicationFirewallPolicy>> GetWebApplicationFirewallPolicyAsync(this ResourceGroup resourceGroup, string policyName, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetWebApplicationFirewallPolicies().GetAsync(policyName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Retrieve protection policy with specified name within a resource group.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/ApplicationGatewayWebApplicationFirewallPolicies/{policyName}
        /// Operation Id: WebApplicationFirewallPolicies_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="policyName"> The name of the policy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="policyName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="policyName"/> is null. </exception>
        public static Response<WebApplicationFirewallPolicy> GetWebApplicationFirewallPolicy(this ResourceGroup resourceGroup, string policyName, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetWebApplicationFirewallPolicies().Get(policyName, cancellationToken);
        }

        /// <summary>
        /// Gets all of the available subnet delegations for this resource group in this region.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/locations/{location}/availableDelegations
        /// Operation Id: AvailableResourceGroupDelegations_List
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="location"> The location of the domain name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="location"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="location"/> is null. </exception>
        /// <returns> An async collection of <see cref="AvailableDelegation" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<AvailableDelegation> GetAvailableResourceGroupDelegationsAsync(this ResourceGroup resourceGroup, string location, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(location, nameof(location));

            return GetExtensionClient(resourceGroup).GetAvailableResourceGroupDelegationsAsync(location, cancellationToken);
        }

        /// <summary>
        /// Gets all of the available subnet delegations for this resource group in this region.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/locations/{location}/availableDelegations
        /// Operation Id: AvailableResourceGroupDelegations_List
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="location"> The location of the domain name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="location"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="location"/> is null. </exception>
        /// <returns> A collection of <see cref="AvailableDelegation" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<AvailableDelegation> GetAvailableResourceGroupDelegations(this ResourceGroup resourceGroup, string location, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(location, nameof(location));

            return GetExtensionClient(resourceGroup).GetAvailableResourceGroupDelegations(location, cancellationToken);
        }

        /// <summary>
        /// Gets all available service aliases for this resource group in this region.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/locations/{location}/availableServiceAliases
        /// Operation Id: AvailableServiceAliases_ListByResourceGroup
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="location"> The location. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="location"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="location"/> is null. </exception>
        /// <returns> An async collection of <see cref="AvailableServiceAlias" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<AvailableServiceAlias> GetAvailableServiceAliasesAsync(this ResourceGroup resourceGroup, string location, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(location, nameof(location));

            return GetExtensionClient(resourceGroup).GetAvailableServiceAliasesAsync(location, cancellationToken);
        }

        /// <summary>
        /// Gets all available service aliases for this resource group in this region.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/locations/{location}/availableServiceAliases
        /// Operation Id: AvailableServiceAliases_ListByResourceGroup
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="location"> The location. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="location"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="location"/> is null. </exception>
        /// <returns> A collection of <see cref="AvailableServiceAlias" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<AvailableServiceAlias> GetAvailableServiceAliases(this ResourceGroup resourceGroup, string location, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(location, nameof(location));

            return GetExtensionClient(resourceGroup).GetAvailableServiceAliases(location, cancellationToken);
        }

        /// <summary>
        /// Returns all of the resource types that can be linked to a Private Endpoint in this subscription in this region.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/locations/{location}/availablePrivateEndpointTypes
        /// Operation Id: AvailablePrivateEndpointTypes_ListByResourceGroup
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="location"> The location of the domain name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="location"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="location"/> is null. </exception>
        /// <returns> An async collection of <see cref="AvailablePrivateEndpointType" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<AvailablePrivateEndpointType> GetAvailablePrivateEndpointTypesAsync(this ResourceGroup resourceGroup, string location, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(location, nameof(location));

            return GetExtensionClient(resourceGroup).GetAvailablePrivateEndpointTypesAsync(location, cancellationToken);
        }

        /// <summary>
        /// Returns all of the resource types that can be linked to a Private Endpoint in this subscription in this region.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/locations/{location}/availablePrivateEndpointTypes
        /// Operation Id: AvailablePrivateEndpointTypes_ListByResourceGroup
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="location"> The location of the domain name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="location"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="location"/> is null. </exception>
        /// <returns> A collection of <see cref="AvailablePrivateEndpointType" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<AvailablePrivateEndpointType> GetAvailablePrivateEndpointTypes(this ResourceGroup resourceGroup, string location, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(location, nameof(location));

            return GetExtensionClient(resourceGroup).GetAvailablePrivateEndpointTypes(location, cancellationToken);
        }

        /// <summary>
        /// Checks whether the subscription is visible to private link service in the specified resource group.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/locations/{location}/checkPrivateLinkServiceVisibility
        /// Operation Id: PrivateLinkServices_CheckPrivateLinkServiceVisibilityByResourceGroup
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="waitUntil"> "F:Azure.WaitUntil.Completed" if the method should wait to return until the long-running operation has completed on the service; "F:Azure.WaitUntil.Started" if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="location"> The location of the domain name. </param>
        /// <param name="parameters"> The request body of CheckPrivateLinkService API call. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="location"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="location"/> or <paramref name="parameters"/> is null. </exception>
        public static async Task<ArmOperation<PrivateLinkServiceVisibility>> CheckPrivateLinkServiceVisibilityByResourceGroupPrivateLinkServiceAsync(this ResourceGroup resourceGroup, WaitUntil waitUntil, string location, CheckPrivateLinkServiceVisibilityRequest parameters, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(location, nameof(location));
            Argument.AssertNotNull(parameters, nameof(parameters));

            return await GetExtensionClient(resourceGroup).CheckPrivateLinkServiceVisibilityByResourceGroupPrivateLinkServiceAsync(waitUntil, location, parameters, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Checks whether the subscription is visible to private link service in the specified resource group.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/locations/{location}/checkPrivateLinkServiceVisibility
        /// Operation Id: PrivateLinkServices_CheckPrivateLinkServiceVisibilityByResourceGroup
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="waitUntil"> "F:Azure.WaitUntil.Completed" if the method should wait to return until the long-running operation has completed on the service; "F:Azure.WaitUntil.Started" if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="location"> The location of the domain name. </param>
        /// <param name="parameters"> The request body of CheckPrivateLinkService API call. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="location"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="location"/> or <paramref name="parameters"/> is null. </exception>
        public static ArmOperation<PrivateLinkServiceVisibility> CheckPrivateLinkServiceVisibilityByResourceGroupPrivateLinkService(this ResourceGroup resourceGroup, WaitUntil waitUntil, string location, CheckPrivateLinkServiceVisibilityRequest parameters, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(location, nameof(location));
            Argument.AssertNotNull(parameters, nameof(parameters));

            return GetExtensionClient(resourceGroup).CheckPrivateLinkServiceVisibilityByResourceGroupPrivateLinkService(waitUntil, location, parameters, cancellationToken);
        }

        /// <summary>
        /// Returns all of the private link service ids that can be linked to a Private Endpoint with auto approved in this subscription in this region.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/locations/{location}/autoApprovedPrivateLinkServices
        /// Operation Id: PrivateLinkServices_ListAutoApprovedPrivateLinkServicesByResourceGroup
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="location"> The location of the domain name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="location"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="location"/> is null. </exception>
        /// <returns> An async collection of <see cref="AutoApprovedPrivateLinkService" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<AutoApprovedPrivateLinkService> GetAutoApprovedPrivateLinkServicesPrivateLinkServicesAsync(this ResourceGroup resourceGroup, string location, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(location, nameof(location));

            return GetExtensionClient(resourceGroup).GetAutoApprovedPrivateLinkServicesPrivateLinkServicesAsync(location, cancellationToken);
        }

        /// <summary>
        /// Returns all of the private link service ids that can be linked to a Private Endpoint with auto approved in this subscription in this region.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/locations/{location}/autoApprovedPrivateLinkServices
        /// Operation Id: PrivateLinkServices_ListAutoApprovedPrivateLinkServicesByResourceGroup
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="location"> The location of the domain name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="location"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="location"/> is null. </exception>
        /// <returns> A collection of <see cref="AutoApprovedPrivateLinkService" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<AutoApprovedPrivateLinkService> GetAutoApprovedPrivateLinkServicesPrivateLinkServices(this ResourceGroup resourceGroup, string location, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(location, nameof(location));

            return GetExtensionClient(resourceGroup).GetAutoApprovedPrivateLinkServicesPrivateLinkServices(location, cancellationToken);
        }

        #region ApplicationGateway
        /// <summary>
        /// Gets an object representing an <see cref="ApplicationGateway" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ApplicationGateway.CreateResourceIdentifier" /> to create an <see cref="ApplicationGateway" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ApplicationGateway" /> object. </returns>
        public static ApplicationGateway GetApplicationGateway(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ApplicationGateway.ValidateResourceId(id);
                return new ApplicationGateway(client, id);
            }
            );
        }
        #endregion

        #region ApplicationGatewayPrivateEndpointConnection
        /// <summary>
        /// Gets an object representing an <see cref="ApplicationGatewayPrivateEndpointConnection" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ApplicationGatewayPrivateEndpointConnection.CreateResourceIdentifier" /> to create an <see cref="ApplicationGatewayPrivateEndpointConnection" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ApplicationGatewayPrivateEndpointConnection" /> object. </returns>
        public static ApplicationGatewayPrivateEndpointConnection GetApplicationGatewayPrivateEndpointConnection(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ApplicationGatewayPrivateEndpointConnection.ValidateResourceId(id);
                return new ApplicationGatewayPrivateEndpointConnection(client, id);
            }
            );
        }
        #endregion

        #region ApplicationSecurityGroup
        /// <summary>
        /// Gets an object representing an <see cref="ApplicationSecurityGroup" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ApplicationSecurityGroup.CreateResourceIdentifier" /> to create an <see cref="ApplicationSecurityGroup" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ApplicationSecurityGroup" /> object. </returns>
        public static ApplicationSecurityGroup GetApplicationSecurityGroup(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ApplicationSecurityGroup.ValidateResourceId(id);
                return new ApplicationSecurityGroup(client, id);
            }
            );
        }
        #endregion

        #region AzureFirewall
        /// <summary>
        /// Gets an object representing an <see cref="AzureFirewall" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="AzureFirewall.CreateResourceIdentifier" /> to create an <see cref="AzureFirewall" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="AzureFirewall" /> object. </returns>
        public static AzureFirewall GetAzureFirewall(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                AzureFirewall.ValidateResourceId(id);
                return new AzureFirewall(client, id);
            }
            );
        }
        #endregion

        #region AzureWebCategory
        /// <summary>
        /// Gets an object representing an <see cref="AzureWebCategory" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="AzureWebCategory.CreateResourceIdentifier" /> to create an <see cref="AzureWebCategory" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="AzureWebCategory" /> object. </returns>
        public static AzureWebCategory GetAzureWebCategory(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                AzureWebCategory.ValidateResourceId(id);
                return new AzureWebCategory(client, id);
            }
            );
        }
        #endregion

        #region BastionHost
        /// <summary>
        /// Gets an object representing a <see cref="BastionHost" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="BastionHost.CreateResourceIdentifier" /> to create a <see cref="BastionHost" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="BastionHost" /> object. </returns>
        public static BastionHost GetBastionHost(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                BastionHost.ValidateResourceId(id);
                return new BastionHost(client, id);
            }
            );
        }
        #endregion

        #region CustomIPPrefix
        /// <summary>
        /// Gets an object representing a <see cref="CustomIPPrefix" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="CustomIPPrefix.CreateResourceIdentifier" /> to create a <see cref="CustomIPPrefix" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="CustomIPPrefix" /> object. </returns>
        public static CustomIPPrefix GetCustomIPPrefix(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                CustomIPPrefix.ValidateResourceId(id);
                return new CustomIPPrefix(client, id);
            }
            );
        }
        #endregion

        #region DdosCustomPolicy
        /// <summary>
        /// Gets an object representing a <see cref="DdosCustomPolicy" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DdosCustomPolicy.CreateResourceIdentifier" /> to create a <see cref="DdosCustomPolicy" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="DdosCustomPolicy" /> object. </returns>
        public static DdosCustomPolicy GetDdosCustomPolicy(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                DdosCustomPolicy.ValidateResourceId(id);
                return new DdosCustomPolicy(client, id);
            }
            );
        }
        #endregion

        #region DdosProtectionPlan
        /// <summary>
        /// Gets an object representing a <see cref="DdosProtectionPlan" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DdosProtectionPlan.CreateResourceIdentifier" /> to create a <see cref="DdosProtectionPlan" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="DdosProtectionPlan" /> object. </returns>
        public static DdosProtectionPlan GetDdosProtectionPlan(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                DdosProtectionPlan.ValidateResourceId(id);
                return new DdosProtectionPlan(client, id);
            }
            );
        }
        #endregion

        #region DscpConfiguration
        /// <summary>
        /// Gets an object representing a <see cref="DscpConfiguration" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DscpConfiguration.CreateResourceIdentifier" /> to create a <see cref="DscpConfiguration" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="DscpConfiguration" /> object. </returns>
        public static DscpConfiguration GetDscpConfiguration(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                DscpConfiguration.ValidateResourceId(id);
                return new DscpConfiguration(client, id);
            }
            );
        }
        #endregion

        #region ExpressRouteCircuitAuthorization
        /// <summary>
        /// Gets an object representing an <see cref="ExpressRouteCircuitAuthorization" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ExpressRouteCircuitAuthorization.CreateResourceIdentifier" /> to create an <see cref="ExpressRouteCircuitAuthorization" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ExpressRouteCircuitAuthorization" /> object. </returns>
        public static ExpressRouteCircuitAuthorization GetExpressRouteCircuitAuthorization(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ExpressRouteCircuitAuthorization.ValidateResourceId(id);
                return new ExpressRouteCircuitAuthorization(client, id);
            }
            );
        }
        #endregion

        #region ExpressRouteCircuitPeering
        /// <summary>
        /// Gets an object representing an <see cref="ExpressRouteCircuitPeering" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ExpressRouteCircuitPeering.CreateResourceIdentifier" /> to create an <see cref="ExpressRouteCircuitPeering" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ExpressRouteCircuitPeering" /> object. </returns>
        public static ExpressRouteCircuitPeering GetExpressRouteCircuitPeering(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ExpressRouteCircuitPeering.ValidateResourceId(id);
                return new ExpressRouteCircuitPeering(client, id);
            }
            );
        }
        #endregion

        #region ExpressRouteCircuitConnection
        /// <summary>
        /// Gets an object representing an <see cref="ExpressRouteCircuitConnection" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ExpressRouteCircuitConnection.CreateResourceIdentifier" /> to create an <see cref="ExpressRouteCircuitConnection" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ExpressRouteCircuitConnection" /> object. </returns>
        public static ExpressRouteCircuitConnection GetExpressRouteCircuitConnection(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ExpressRouteCircuitConnection.ValidateResourceId(id);
                return new ExpressRouteCircuitConnection(client, id);
            }
            );
        }
        #endregion

        #region PeerExpressRouteCircuitConnection
        /// <summary>
        /// Gets an object representing a <see cref="PeerExpressRouteCircuitConnection" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="PeerExpressRouteCircuitConnection.CreateResourceIdentifier" /> to create a <see cref="PeerExpressRouteCircuitConnection" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="PeerExpressRouteCircuitConnection" /> object. </returns>
        public static PeerExpressRouteCircuitConnection GetPeerExpressRouteCircuitConnection(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                PeerExpressRouteCircuitConnection.ValidateResourceId(id);
                return new PeerExpressRouteCircuitConnection(client, id);
            }
            );
        }
        #endregion

        #region ExpressRouteCircuit
        /// <summary>
        /// Gets an object representing an <see cref="ExpressRouteCircuit" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ExpressRouteCircuit.CreateResourceIdentifier" /> to create an <see cref="ExpressRouteCircuit" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ExpressRouteCircuit" /> object. </returns>
        public static ExpressRouteCircuit GetExpressRouteCircuit(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ExpressRouteCircuit.ValidateResourceId(id);
                return new ExpressRouteCircuit(client, id);
            }
            );
        }
        #endregion

        #region ExpressRouteCrossConnection
        /// <summary>
        /// Gets an object representing an <see cref="ExpressRouteCrossConnection" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ExpressRouteCrossConnection.CreateResourceIdentifier" /> to create an <see cref="ExpressRouteCrossConnection" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ExpressRouteCrossConnection" /> object. </returns>
        public static ExpressRouteCrossConnection GetExpressRouteCrossConnection(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ExpressRouteCrossConnection.ValidateResourceId(id);
                return new ExpressRouteCrossConnection(client, id);
            }
            );
        }
        #endregion

        #region ExpressRouteCrossConnectionPeering
        /// <summary>
        /// Gets an object representing an <see cref="ExpressRouteCrossConnectionPeering" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ExpressRouteCrossConnectionPeering.CreateResourceIdentifier" /> to create an <see cref="ExpressRouteCrossConnectionPeering" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ExpressRouteCrossConnectionPeering" /> object. </returns>
        public static ExpressRouteCrossConnectionPeering GetExpressRouteCrossConnectionPeering(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ExpressRouteCrossConnectionPeering.ValidateResourceId(id);
                return new ExpressRouteCrossConnectionPeering(client, id);
            }
            );
        }
        #endregion

        #region ExpressRoutePortsLocation
        /// <summary>
        /// Gets an object representing an <see cref="ExpressRoutePortsLocation" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ExpressRoutePortsLocation.CreateResourceIdentifier" /> to create an <see cref="ExpressRoutePortsLocation" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ExpressRoutePortsLocation" /> object. </returns>
        public static ExpressRoutePortsLocation GetExpressRoutePortsLocation(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ExpressRoutePortsLocation.ValidateResourceId(id);
                return new ExpressRoutePortsLocation(client, id);
            }
            );
        }
        #endregion

        #region ExpressRoutePort
        /// <summary>
        /// Gets an object representing an <see cref="ExpressRoutePort" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ExpressRoutePort.CreateResourceIdentifier" /> to create an <see cref="ExpressRoutePort" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ExpressRoutePort" /> object. </returns>
        public static ExpressRoutePort GetExpressRoutePort(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ExpressRoutePort.ValidateResourceId(id);
                return new ExpressRoutePort(client, id);
            }
            );
        }
        #endregion

        #region ExpressRouteLink
        /// <summary>
        /// Gets an object representing an <see cref="ExpressRouteLink" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ExpressRouteLink.CreateResourceIdentifier" /> to create an <see cref="ExpressRouteLink" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ExpressRouteLink" /> object. </returns>
        public static ExpressRouteLink GetExpressRouteLink(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ExpressRouteLink.ValidateResourceId(id);
                return new ExpressRouteLink(client, id);
            }
            );
        }
        #endregion

        #region FirewallPolicy
        /// <summary>
        /// Gets an object representing a <see cref="FirewallPolicy" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="FirewallPolicy.CreateResourceIdentifier" /> to create a <see cref="FirewallPolicy" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="FirewallPolicy" /> object. </returns>
        public static FirewallPolicy GetFirewallPolicy(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                FirewallPolicy.ValidateResourceId(id);
                return new FirewallPolicy(client, id);
            }
            );
        }
        #endregion

        #region FirewallPolicyRuleCollectionGroup
        /// <summary>
        /// Gets an object representing a <see cref="FirewallPolicyRuleCollectionGroup" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="FirewallPolicyRuleCollectionGroup.CreateResourceIdentifier" /> to create a <see cref="FirewallPolicyRuleCollectionGroup" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="FirewallPolicyRuleCollectionGroup" /> object. </returns>
        public static FirewallPolicyRuleCollectionGroup GetFirewallPolicyRuleCollectionGroup(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                FirewallPolicyRuleCollectionGroup.ValidateResourceId(id);
                return new FirewallPolicyRuleCollectionGroup(client, id);
            }
            );
        }
        #endregion

        #region IPAllocation
        /// <summary>
        /// Gets an object representing an <see cref="IPAllocation" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="IPAllocation.CreateResourceIdentifier" /> to create an <see cref="IPAllocation" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="IPAllocation" /> object. </returns>
        public static IPAllocation GetIPAllocation(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                IPAllocation.ValidateResourceId(id);
                return new IPAllocation(client, id);
            }
            );
        }
        #endregion

        #region IPGroup
        /// <summary>
        /// Gets an object representing an <see cref="IPGroup" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="IPGroup.CreateResourceIdentifier" /> to create an <see cref="IPGroup" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="IPGroup" /> object. </returns>
        public static IPGroup GetIPGroup(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                IPGroup.ValidateResourceId(id);
                return new IPGroup(client, id);
            }
            );
        }
        #endregion

        #region LoadBalancer
        /// <summary>
        /// Gets an object representing a <see cref="LoadBalancer" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="LoadBalancer.CreateResourceIdentifier" /> to create a <see cref="LoadBalancer" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="LoadBalancer" /> object. </returns>
        public static LoadBalancer GetLoadBalancer(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                LoadBalancer.ValidateResourceId(id);
                return new LoadBalancer(client, id);
            }
            );
        }
        #endregion

        #region BackendAddressPool
        /// <summary>
        /// Gets an object representing a <see cref="BackendAddressPool" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="BackendAddressPool.CreateResourceIdentifier" /> to create a <see cref="BackendAddressPool" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="BackendAddressPool" /> object. </returns>
        public static BackendAddressPool GetBackendAddressPool(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                BackendAddressPool.ValidateResourceId(id);
                return new BackendAddressPool(client, id);
            }
            );
        }
        #endregion

        #region FrontendIPConfiguration
        /// <summary>
        /// Gets an object representing a <see cref="FrontendIPConfiguration" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="FrontendIPConfiguration.CreateResourceIdentifier" /> to create a <see cref="FrontendIPConfiguration" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="FrontendIPConfiguration" /> object. </returns>
        public static FrontendIPConfiguration GetFrontendIPConfiguration(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                FrontendIPConfiguration.ValidateResourceId(id);
                return new FrontendIPConfiguration(client, id);
            }
            );
        }
        #endregion

        #region InboundNatRule
        /// <summary>
        /// Gets an object representing an <see cref="InboundNatRule" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="InboundNatRule.CreateResourceIdentifier" /> to create an <see cref="InboundNatRule" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="InboundNatRule" /> object. </returns>
        public static InboundNatRule GetInboundNatRule(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                InboundNatRule.ValidateResourceId(id);
                return new InboundNatRule(client, id);
            }
            );
        }
        #endregion

        #region LoadBalancingRule
        /// <summary>
        /// Gets an object representing a <see cref="LoadBalancingRule" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="LoadBalancingRule.CreateResourceIdentifier" /> to create a <see cref="LoadBalancingRule" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="LoadBalancingRule" /> object. </returns>
        public static LoadBalancingRule GetLoadBalancingRule(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                LoadBalancingRule.ValidateResourceId(id);
                return new LoadBalancingRule(client, id);
            }
            );
        }
        #endregion

        #region OutboundRule
        /// <summary>
        /// Gets an object representing an <see cref="OutboundRule" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="OutboundRule.CreateResourceIdentifier" /> to create an <see cref="OutboundRule" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="OutboundRule" /> object. </returns>
        public static OutboundRule GetOutboundRule(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                OutboundRule.ValidateResourceId(id);
                return new OutboundRule(client, id);
            }
            );
        }
        #endregion

        #region Probe
        /// <summary>
        /// Gets an object representing a <see cref="Probe" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="Probe.CreateResourceIdentifier" /> to create a <see cref="Probe" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="Probe" /> object. </returns>
        public static Probe GetProbe(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                Probe.ValidateResourceId(id);
                return new Probe(client, id);
            }
            );
        }
        #endregion

        #region NatGateway
        /// <summary>
        /// Gets an object representing a <see cref="NatGateway" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="NatGateway.CreateResourceIdentifier" /> to create a <see cref="NatGateway" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="NatGateway" /> object. </returns>
        public static NatGateway GetNatGateway(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                NatGateway.ValidateResourceId(id);
                return new NatGateway(client, id);
            }
            );
        }
        #endregion

        #region NetworkInterface
        /// <summary>
        /// Gets an object representing a <see cref="NetworkInterface" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="NetworkInterface.CreateResourceIdentifier" /> to create a <see cref="NetworkInterface" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="NetworkInterface" /> object. </returns>
        public static NetworkInterface GetNetworkInterface(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                NetworkInterface.ValidateResourceId(id);
                return new NetworkInterface(client, id);
            }
            );
        }
        #endregion

        #region NetworkInterfaceIPConfiguration
        /// <summary>
        /// Gets an object representing a <see cref="NetworkInterfaceIPConfiguration" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="NetworkInterfaceIPConfiguration.CreateResourceIdentifier" /> to create a <see cref="NetworkInterfaceIPConfiguration" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="NetworkInterfaceIPConfiguration" /> object. </returns>
        public static NetworkInterfaceIPConfiguration GetNetworkInterfaceIPConfiguration(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                NetworkInterfaceIPConfiguration.ValidateResourceId(id);
                return new NetworkInterfaceIPConfiguration(client, id);
            }
            );
        }
        #endregion

        #region NetworkInterfaceTapConfiguration
        /// <summary>
        /// Gets an object representing a <see cref="NetworkInterfaceTapConfiguration" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="NetworkInterfaceTapConfiguration.CreateResourceIdentifier" /> to create a <see cref="NetworkInterfaceTapConfiguration" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="NetworkInterfaceTapConfiguration" /> object. </returns>
        public static NetworkInterfaceTapConfiguration GetNetworkInterfaceTapConfiguration(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                NetworkInterfaceTapConfiguration.ValidateResourceId(id);
                return new NetworkInterfaceTapConfiguration(client, id);
            }
            );
        }
        #endregion

        #region NetworkProfile
        /// <summary>
        /// Gets an object representing a <see cref="NetworkProfile" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="NetworkProfile.CreateResourceIdentifier" /> to create a <see cref="NetworkProfile" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="NetworkProfile" /> object. </returns>
        public static NetworkProfile GetNetworkProfile(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                NetworkProfile.ValidateResourceId(id);
                return new NetworkProfile(client, id);
            }
            );
        }
        #endregion

        #region NetworkSecurityGroup
        /// <summary>
        /// Gets an object representing a <see cref="NetworkSecurityGroup" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="NetworkSecurityGroup.CreateResourceIdentifier" /> to create a <see cref="NetworkSecurityGroup" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="NetworkSecurityGroup" /> object. </returns>
        public static NetworkSecurityGroup GetNetworkSecurityGroup(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                NetworkSecurityGroup.ValidateResourceId(id);
                return new NetworkSecurityGroup(client, id);
            }
            );
        }
        #endregion

        #region SecurityRule
        /// <summary>
        /// Gets an object representing a <see cref="SecurityRule" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SecurityRule.CreateResourceIdentifier" /> to create a <see cref="SecurityRule" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SecurityRule" /> object. </returns>
        public static SecurityRule GetSecurityRule(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SecurityRule.ValidateResourceId(id);
                return new SecurityRule(client, id);
            }
            );
        }
        #endregion

        #region DefaultSecurityRule
        /// <summary>
        /// Gets an object representing a <see cref="DefaultSecurityRule" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DefaultSecurityRule.CreateResourceIdentifier" /> to create a <see cref="DefaultSecurityRule" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="DefaultSecurityRule" /> object. </returns>
        public static DefaultSecurityRule GetDefaultSecurityRule(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                DefaultSecurityRule.ValidateResourceId(id);
                return new DefaultSecurityRule(client, id);
            }
            );
        }
        #endregion

        #region NetworkVirtualAppliance
        /// <summary>
        /// Gets an object representing a <see cref="NetworkVirtualAppliance" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="NetworkVirtualAppliance.CreateResourceIdentifier" /> to create a <see cref="NetworkVirtualAppliance" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="NetworkVirtualAppliance" /> object. </returns>
        public static NetworkVirtualAppliance GetNetworkVirtualAppliance(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                NetworkVirtualAppliance.ValidateResourceId(id);
                return new NetworkVirtualAppliance(client, id);
            }
            );
        }
        #endregion

        #region VirtualApplianceSite
        /// <summary>
        /// Gets an object representing a <see cref="VirtualApplianceSite" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="VirtualApplianceSite.CreateResourceIdentifier" /> to create a <see cref="VirtualApplianceSite" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="VirtualApplianceSite" /> object. </returns>
        public static VirtualApplianceSite GetVirtualApplianceSite(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                VirtualApplianceSite.ValidateResourceId(id);
                return new VirtualApplianceSite(client, id);
            }
            );
        }
        #endregion

        #region NetworkVirtualApplianceSku
        /// <summary>
        /// Gets an object representing a <see cref="NetworkVirtualApplianceSku" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="NetworkVirtualApplianceSku.CreateResourceIdentifier" /> to create a <see cref="NetworkVirtualApplianceSku" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="NetworkVirtualApplianceSku" /> object. </returns>
        public static NetworkVirtualApplianceSku GetNetworkVirtualApplianceSku(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                NetworkVirtualApplianceSku.ValidateResourceId(id);
                return new NetworkVirtualApplianceSku(client, id);
            }
            );
        }
        #endregion

        #region NetworkWatcher
        /// <summary>
        /// Gets an object representing a <see cref="NetworkWatcher" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="NetworkWatcher.CreateResourceIdentifier" /> to create a <see cref="NetworkWatcher" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="NetworkWatcher" /> object. </returns>
        public static NetworkWatcher GetNetworkWatcher(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                NetworkWatcher.ValidateResourceId(id);
                return new NetworkWatcher(client, id);
            }
            );
        }
        #endregion

        #region PacketCapture
        /// <summary>
        /// Gets an object representing a <see cref="PacketCapture" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="PacketCapture.CreateResourceIdentifier" /> to create a <see cref="PacketCapture" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="PacketCapture" /> object. </returns>
        public static PacketCapture GetPacketCapture(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                PacketCapture.ValidateResourceId(id);
                return new PacketCapture(client, id);
            }
            );
        }
        #endregion

        #region ConnectionMonitor
        /// <summary>
        /// Gets an object representing a <see cref="ConnectionMonitor" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ConnectionMonitor.CreateResourceIdentifier" /> to create a <see cref="ConnectionMonitor" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ConnectionMonitor" /> object. </returns>
        public static ConnectionMonitor GetConnectionMonitor(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ConnectionMonitor.ValidateResourceId(id);
                return new ConnectionMonitor(client, id);
            }
            );
        }
        #endregion

        #region FlowLog
        /// <summary>
        /// Gets an object representing a <see cref="FlowLog" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="FlowLog.CreateResourceIdentifier" /> to create a <see cref="FlowLog" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="FlowLog" /> object. </returns>
        public static FlowLog GetFlowLog(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                FlowLog.ValidateResourceId(id);
                return new FlowLog(client, id);
            }
            );
        }
        #endregion

        #region PrivateEndpoint
        /// <summary>
        /// Gets an object representing a <see cref="PrivateEndpoint" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="PrivateEndpoint.CreateResourceIdentifier" /> to create a <see cref="PrivateEndpoint" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="PrivateEndpoint" /> object. </returns>
        public static PrivateEndpoint GetPrivateEndpoint(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                PrivateEndpoint.ValidateResourceId(id);
                return new PrivateEndpoint(client, id);
            }
            );
        }
        #endregion

        #region PrivateDnsZoneGroup
        /// <summary>
        /// Gets an object representing a <see cref="PrivateDnsZoneGroup" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="PrivateDnsZoneGroup.CreateResourceIdentifier" /> to create a <see cref="PrivateDnsZoneGroup" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="PrivateDnsZoneGroup" /> object. </returns>
        public static PrivateDnsZoneGroup GetPrivateDnsZoneGroup(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                PrivateDnsZoneGroup.ValidateResourceId(id);
                return new PrivateDnsZoneGroup(client, id);
            }
            );
        }
        #endregion

        #region PrivateLinkService
        /// <summary>
        /// Gets an object representing a <see cref="PrivateLinkService" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="PrivateLinkService.CreateResourceIdentifier" /> to create a <see cref="PrivateLinkService" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="PrivateLinkService" /> object. </returns>
        public static PrivateLinkService GetPrivateLinkService(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                PrivateLinkService.ValidateResourceId(id);
                return new PrivateLinkService(client, id);
            }
            );
        }
        #endregion

        #region PrivateEndpointConnection
        /// <summary>
        /// Gets an object representing a <see cref="PrivateEndpointConnection" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="PrivateEndpointConnection.CreateResourceIdentifier" /> to create a <see cref="PrivateEndpointConnection" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="PrivateEndpointConnection" /> object. </returns>
        public static PrivateEndpointConnection GetPrivateEndpointConnection(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                PrivateEndpointConnection.ValidateResourceId(id);
                return new PrivateEndpointConnection(client, id);
            }
            );
        }
        #endregion

        #region PublicIPAddress
        /// <summary>
        /// Gets an object representing a <see cref="PublicIPAddress" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="PublicIPAddress.CreateResourceIdentifier" /> to create a <see cref="PublicIPAddress" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="PublicIPAddress" /> object. </returns>
        public static PublicIPAddress GetPublicIPAddress(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                PublicIPAddress.ValidateResourceId(id);
                return new PublicIPAddress(client, id);
            }
            );
        }
        #endregion

        #region PublicIPPrefix
        /// <summary>
        /// Gets an object representing a <see cref="PublicIPPrefix" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="PublicIPPrefix.CreateResourceIdentifier" /> to create a <see cref="PublicIPPrefix" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="PublicIPPrefix" /> object. </returns>
        public static PublicIPPrefix GetPublicIPPrefix(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                PublicIPPrefix.ValidateResourceId(id);
                return new PublicIPPrefix(client, id);
            }
            );
        }
        #endregion

        #region RouteFilter
        /// <summary>
        /// Gets an object representing a <see cref="RouteFilter" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="RouteFilter.CreateResourceIdentifier" /> to create a <see cref="RouteFilter" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="RouteFilter" /> object. </returns>
        public static RouteFilter GetRouteFilter(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                RouteFilter.ValidateResourceId(id);
                return new RouteFilter(client, id);
            }
            );
        }
        #endregion

        #region RouteFilterRule
        /// <summary>
        /// Gets an object representing a <see cref="RouteFilterRule" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="RouteFilterRule.CreateResourceIdentifier" /> to create a <see cref="RouteFilterRule" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="RouteFilterRule" /> object. </returns>
        public static RouteFilterRule GetRouteFilterRule(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                RouteFilterRule.ValidateResourceId(id);
                return new RouteFilterRule(client, id);
            }
            );
        }
        #endregion

        #region RouteTable
        /// <summary>
        /// Gets an object representing a <see cref="RouteTable" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="RouteTable.CreateResourceIdentifier" /> to create a <see cref="RouteTable" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="RouteTable" /> object. </returns>
        public static RouteTable GetRouteTable(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                RouteTable.ValidateResourceId(id);
                return new RouteTable(client, id);
            }
            );
        }
        #endregion

        #region Route
        /// <summary>
        /// Gets an object representing a <see cref="Route" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="Route.CreateResourceIdentifier" /> to create a <see cref="Route" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="Route" /> object. </returns>
        public static Route GetRoute(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                Route.ValidateResourceId(id);
                return new Route(client, id);
            }
            );
        }
        #endregion

        #region SecurityPartnerProvider
        /// <summary>
        /// Gets an object representing a <see cref="SecurityPartnerProvider" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SecurityPartnerProvider.CreateResourceIdentifier" /> to create a <see cref="SecurityPartnerProvider" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SecurityPartnerProvider" /> object. </returns>
        public static SecurityPartnerProvider GetSecurityPartnerProvider(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SecurityPartnerProvider.ValidateResourceId(id);
                return new SecurityPartnerProvider(client, id);
            }
            );
        }
        #endregion

        #region ServiceEndpointPolicy
        /// <summary>
        /// Gets an object representing a <see cref="ServiceEndpointPolicy" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ServiceEndpointPolicy.CreateResourceIdentifier" /> to create a <see cref="ServiceEndpointPolicy" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ServiceEndpointPolicy" /> object. </returns>
        public static ServiceEndpointPolicy GetServiceEndpointPolicy(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ServiceEndpointPolicy.ValidateResourceId(id);
                return new ServiceEndpointPolicy(client, id);
            }
            );
        }
        #endregion

        #region ServiceEndpointPolicyDefinition
        /// <summary>
        /// Gets an object representing a <see cref="ServiceEndpointPolicyDefinition" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ServiceEndpointPolicyDefinition.CreateResourceIdentifier" /> to create a <see cref="ServiceEndpointPolicyDefinition" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ServiceEndpointPolicyDefinition" /> object. </returns>
        public static ServiceEndpointPolicyDefinition GetServiceEndpointPolicyDefinition(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ServiceEndpointPolicyDefinition.ValidateResourceId(id);
                return new ServiceEndpointPolicyDefinition(client, id);
            }
            );
        }
        #endregion

        #region VirtualNetwork
        /// <summary>
        /// Gets an object representing a <see cref="VirtualNetwork" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="VirtualNetwork.CreateResourceIdentifier" /> to create a <see cref="VirtualNetwork" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="VirtualNetwork" /> object. </returns>
        public static VirtualNetwork GetVirtualNetwork(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                VirtualNetwork.ValidateResourceId(id);
                return new VirtualNetwork(client, id);
            }
            );
        }
        #endregion

        #region Subnet
        /// <summary>
        /// Gets an object representing a <see cref="Subnet" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="Subnet.CreateResourceIdentifier" /> to create a <see cref="Subnet" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="Subnet" /> object. </returns>
        public static Subnet GetSubnet(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                Subnet.ValidateResourceId(id);
                return new Subnet(client, id);
            }
            );
        }
        #endregion

        #region VirtualNetworkPeering
        /// <summary>
        /// Gets an object representing a <see cref="VirtualNetworkPeering" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="VirtualNetworkPeering.CreateResourceIdentifier" /> to create a <see cref="VirtualNetworkPeering" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="VirtualNetworkPeering" /> object. </returns>
        public static VirtualNetworkPeering GetVirtualNetworkPeering(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                VirtualNetworkPeering.ValidateResourceId(id);
                return new VirtualNetworkPeering(client, id);
            }
            );
        }
        #endregion

        #region VirtualNetworkGateway
        /// <summary>
        /// Gets an object representing a <see cref="VirtualNetworkGateway" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="VirtualNetworkGateway.CreateResourceIdentifier" /> to create a <see cref="VirtualNetworkGateway" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="VirtualNetworkGateway" /> object. </returns>
        public static VirtualNetworkGateway GetVirtualNetworkGateway(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                VirtualNetworkGateway.ValidateResourceId(id);
                return new VirtualNetworkGateway(client, id);
            }
            );
        }
        #endregion

        #region VirtualNetworkGatewayConnection
        /// <summary>
        /// Gets an object representing a <see cref="VirtualNetworkGatewayConnection" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="VirtualNetworkGatewayConnection.CreateResourceIdentifier" /> to create a <see cref="VirtualNetworkGatewayConnection" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="VirtualNetworkGatewayConnection" /> object. </returns>
        public static VirtualNetworkGatewayConnection GetVirtualNetworkGatewayConnection(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                VirtualNetworkGatewayConnection.ValidateResourceId(id);
                return new VirtualNetworkGatewayConnection(client, id);
            }
            );
        }
        #endregion

        #region LocalNetworkGateway
        /// <summary>
        /// Gets an object representing a <see cref="LocalNetworkGateway" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="LocalNetworkGateway.CreateResourceIdentifier" /> to create a <see cref="LocalNetworkGateway" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="LocalNetworkGateway" /> object. </returns>
        public static LocalNetworkGateway GetLocalNetworkGateway(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                LocalNetworkGateway.ValidateResourceId(id);
                return new LocalNetworkGateway(client, id);
            }
            );
        }
        #endregion

        #region VirtualNetworkGatewayNatRule
        /// <summary>
        /// Gets an object representing a <see cref="VirtualNetworkGatewayNatRule" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="VirtualNetworkGatewayNatRule.CreateResourceIdentifier" /> to create a <see cref="VirtualNetworkGatewayNatRule" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="VirtualNetworkGatewayNatRule" /> object. </returns>
        public static VirtualNetworkGatewayNatRule GetVirtualNetworkGatewayNatRule(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                VirtualNetworkGatewayNatRule.ValidateResourceId(id);
                return new VirtualNetworkGatewayNatRule(client, id);
            }
            );
        }
        #endregion

        #region VirtualNetworkTap
        /// <summary>
        /// Gets an object representing a <see cref="VirtualNetworkTap" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="VirtualNetworkTap.CreateResourceIdentifier" /> to create a <see cref="VirtualNetworkTap" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="VirtualNetworkTap" /> object. </returns>
        public static VirtualNetworkTap GetVirtualNetworkTap(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                VirtualNetworkTap.ValidateResourceId(id);
                return new VirtualNetworkTap(client, id);
            }
            );
        }
        #endregion

        #region VirtualRouter
        /// <summary>
        /// Gets an object representing a <see cref="VirtualRouter" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="VirtualRouter.CreateResourceIdentifier" /> to create a <see cref="VirtualRouter" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="VirtualRouter" /> object. </returns>
        public static VirtualRouter GetVirtualRouter(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                VirtualRouter.ValidateResourceId(id);
                return new VirtualRouter(client, id);
            }
            );
        }
        #endregion

        #region VirtualRouterPeering
        /// <summary>
        /// Gets an object representing a <see cref="VirtualRouterPeering" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="VirtualRouterPeering.CreateResourceIdentifier" /> to create a <see cref="VirtualRouterPeering" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="VirtualRouterPeering" /> object. </returns>
        public static VirtualRouterPeering GetVirtualRouterPeering(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                VirtualRouterPeering.ValidateResourceId(id);
                return new VirtualRouterPeering(client, id);
            }
            );
        }
        #endregion

        #region VirtualWan
        /// <summary>
        /// Gets an object representing a <see cref="VirtualWan" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="VirtualWan.CreateResourceIdentifier" /> to create a <see cref="VirtualWan" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="VirtualWan" /> object. </returns>
        public static VirtualWan GetVirtualWan(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                VirtualWan.ValidateResourceId(id);
                return new VirtualWan(client, id);
            }
            );
        }
        #endregion

        #region VpnSite
        /// <summary>
        /// Gets an object representing a <see cref="VpnSite" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="VpnSite.CreateResourceIdentifier" /> to create a <see cref="VpnSite" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="VpnSite" /> object. </returns>
        public static VpnSite GetVpnSite(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                VpnSite.ValidateResourceId(id);
                return new VpnSite(client, id);
            }
            );
        }
        #endregion

        #region VpnSiteLink
        /// <summary>
        /// Gets an object representing a <see cref="VpnSiteLink" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="VpnSiteLink.CreateResourceIdentifier" /> to create a <see cref="VpnSiteLink" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="VpnSiteLink" /> object. </returns>
        public static VpnSiteLink GetVpnSiteLink(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                VpnSiteLink.ValidateResourceId(id);
                return new VpnSiteLink(client, id);
            }
            );
        }
        #endregion

        #region VpnServerConfiguration
        /// <summary>
        /// Gets an object representing a <see cref="VpnServerConfiguration" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="VpnServerConfiguration.CreateResourceIdentifier" /> to create a <see cref="VpnServerConfiguration" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="VpnServerConfiguration" /> object. </returns>
        public static VpnServerConfiguration GetVpnServerConfiguration(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                VpnServerConfiguration.ValidateResourceId(id);
                return new VpnServerConfiguration(client, id);
            }
            );
        }
        #endregion

        #region VirtualHub
        /// <summary>
        /// Gets an object representing a <see cref="VirtualHub" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="VirtualHub.CreateResourceIdentifier" /> to create a <see cref="VirtualHub" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="VirtualHub" /> object. </returns>
        public static VirtualHub GetVirtualHub(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                VirtualHub.ValidateResourceId(id);
                return new VirtualHub(client, id);
            }
            );
        }
        #endregion

        #region HubVirtualNetworkConnection
        /// <summary>
        /// Gets an object representing a <see cref="HubVirtualNetworkConnection" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="HubVirtualNetworkConnection.CreateResourceIdentifier" /> to create a <see cref="HubVirtualNetworkConnection" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="HubVirtualNetworkConnection" /> object. </returns>
        public static HubVirtualNetworkConnection GetHubVirtualNetworkConnection(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                HubVirtualNetworkConnection.ValidateResourceId(id);
                return new HubVirtualNetworkConnection(client, id);
            }
            );
        }
        #endregion

        #region VpnGateway
        /// <summary>
        /// Gets an object representing a <see cref="VpnGateway" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="VpnGateway.CreateResourceIdentifier" /> to create a <see cref="VpnGateway" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="VpnGateway" /> object. </returns>
        public static VpnGateway GetVpnGateway(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                VpnGateway.ValidateResourceId(id);
                return new VpnGateway(client, id);
            }
            );
        }
        #endregion

        #region VpnConnection
        /// <summary>
        /// Gets an object representing a <see cref="VpnConnection" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="VpnConnection.CreateResourceIdentifier" /> to create a <see cref="VpnConnection" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="VpnConnection" /> object. </returns>
        public static VpnConnection GetVpnConnection(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                VpnConnection.ValidateResourceId(id);
                return new VpnConnection(client, id);
            }
            );
        }
        #endregion

        #region VpnSiteLinkConnection
        /// <summary>
        /// Gets an object representing a <see cref="VpnSiteLinkConnection" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="VpnSiteLinkConnection.CreateResourceIdentifier" /> to create a <see cref="VpnSiteLinkConnection" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="VpnSiteLinkConnection" /> object. </returns>
        public static VpnSiteLinkConnection GetVpnSiteLinkConnection(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                VpnSiteLinkConnection.ValidateResourceId(id);
                return new VpnSiteLinkConnection(client, id);
            }
            );
        }
        #endregion

        #region VpnGatewayNatRule
        /// <summary>
        /// Gets an object representing a <see cref="VpnGatewayNatRule" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="VpnGatewayNatRule.CreateResourceIdentifier" /> to create a <see cref="VpnGatewayNatRule" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="VpnGatewayNatRule" /> object. </returns>
        public static VpnGatewayNatRule GetVpnGatewayNatRule(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                VpnGatewayNatRule.ValidateResourceId(id);
                return new VpnGatewayNatRule(client, id);
            }
            );
        }
        #endregion

        #region P2SVpnGateway
        /// <summary>
        /// Gets an object representing a <see cref="P2SVpnGateway" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="P2SVpnGateway.CreateResourceIdentifier" /> to create a <see cref="P2SVpnGateway" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="P2SVpnGateway" /> object. </returns>
        public static P2SVpnGateway GetP2SVpnGateway(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                P2SVpnGateway.ValidateResourceId(id);
                return new P2SVpnGateway(client, id);
            }
            );
        }
        #endregion

        #region VirtualHubRouteTableV2
        /// <summary>
        /// Gets an object representing a <see cref="VirtualHubRouteTableV2" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="VirtualHubRouteTableV2.CreateResourceIdentifier" /> to create a <see cref="VirtualHubRouteTableV2" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="VirtualHubRouteTableV2" /> object. </returns>
        public static VirtualHubRouteTableV2 GetVirtualHubRouteTableV2(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                VirtualHubRouteTableV2.ValidateResourceId(id);
                return new VirtualHubRouteTableV2(client, id);
            }
            );
        }
        #endregion

        #region ExpressRouteGateway
        /// <summary>
        /// Gets an object representing an <see cref="ExpressRouteGateway" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ExpressRouteGateway.CreateResourceIdentifier" /> to create an <see cref="ExpressRouteGateway" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ExpressRouteGateway" /> object. </returns>
        public static ExpressRouteGateway GetExpressRouteGateway(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ExpressRouteGateway.ValidateResourceId(id);
                return new ExpressRouteGateway(client, id);
            }
            );
        }
        #endregion

        #region ExpressRouteConnection
        /// <summary>
        /// Gets an object representing an <see cref="ExpressRouteConnection" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ExpressRouteConnection.CreateResourceIdentifier" /> to create an <see cref="ExpressRouteConnection" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ExpressRouteConnection" /> object. </returns>
        public static ExpressRouteConnection GetExpressRouteConnection(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ExpressRouteConnection.ValidateResourceId(id);
                return new ExpressRouteConnection(client, id);
            }
            );
        }
        #endregion

        #region BgpConnection
        /// <summary>
        /// Gets an object representing a <see cref="BgpConnection" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="BgpConnection.CreateResourceIdentifier" /> to create a <see cref="BgpConnection" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="BgpConnection" /> object. </returns>
        public static BgpConnection GetBgpConnection(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                BgpConnection.ValidateResourceId(id);
                return new BgpConnection(client, id);
            }
            );
        }
        #endregion

        #region HubIPConfiguration
        /// <summary>
        /// Gets an object representing a <see cref="HubIPConfiguration" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="HubIPConfiguration.CreateResourceIdentifier" /> to create a <see cref="HubIPConfiguration" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="HubIPConfiguration" /> object. </returns>
        public static HubIPConfiguration GetHubIPConfiguration(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                HubIPConfiguration.ValidateResourceId(id);
                return new HubIPConfiguration(client, id);
            }
            );
        }
        #endregion

        #region HubRouteTable
        /// <summary>
        /// Gets an object representing a <see cref="HubRouteTable" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="HubRouteTable.CreateResourceIdentifier" /> to create a <see cref="HubRouteTable" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="HubRouteTable" /> object. </returns>
        public static HubRouteTable GetHubRouteTable(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                HubRouteTable.ValidateResourceId(id);
                return new HubRouteTable(client, id);
            }
            );
        }
        #endregion

        #region WebApplicationFirewallPolicy
        /// <summary>
        /// Gets an object representing a <see cref="WebApplicationFirewallPolicy" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="WebApplicationFirewallPolicy.CreateResourceIdentifier" /> to create a <see cref="WebApplicationFirewallPolicy" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="WebApplicationFirewallPolicy" /> object. </returns>
        public static WebApplicationFirewallPolicy GetWebApplicationFirewallPolicy(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                WebApplicationFirewallPolicy.ValidateResourceId(id);
                return new WebApplicationFirewallPolicy(client, id);
            }
            );
        }
        #endregion
    }
}
