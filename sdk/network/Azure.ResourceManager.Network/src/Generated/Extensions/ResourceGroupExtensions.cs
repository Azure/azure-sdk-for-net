// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.ResourceManager.Network.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.Network
{
    /// <summary> A class to add extension methods to ResourceGroup. </summary>
    public static partial class ResourceGroupExtensions
    {
        private static ResourceGroupExtensionClient GetExtensionClient(ResourceGroup resourceGroup)
        {
            return resourceGroup.GetCachedClient((client) =>
            {
                return new ResourceGroupExtensionClient(client, resourceGroup.Id);
            }
            );
        }

        /// <summary> Gets a collection of ApplicationGateways in the ApplicationGateway. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of ApplicationGateways and their operations over a ApplicationGateway. </returns>
        public static ApplicationGatewayCollection GetApplicationGateways(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetApplicationGateways();
        }

        /// <summary> Gets a collection of ApplicationSecurityGroups in the ApplicationSecurityGroup. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of ApplicationSecurityGroups and their operations over a ApplicationSecurityGroup. </returns>
        public static ApplicationSecurityGroupCollection GetApplicationSecurityGroups(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetApplicationSecurityGroups();
        }

        /// <summary> Gets a collection of AzureFirewalls in the AzureFirewall. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of AzureFirewalls and their operations over a AzureFirewall. </returns>
        public static AzureFirewallCollection GetAzureFirewalls(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetAzureFirewalls();
        }

        /// <summary> Gets a collection of BastionHosts in the BastionHost. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of BastionHosts and their operations over a BastionHost. </returns>
        public static BastionHostCollection GetBastionHosts(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetBastionHosts();
        }

        /// <summary> Gets a collection of CustomIpPrefixes in the CustomIpPrefix. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of CustomIpPrefixes and their operations over a CustomIpPrefix. </returns>
        public static CustomIpPrefixCollection GetCustomIpPrefixes(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetCustomIpPrefixes();
        }

        /// <summary> Gets a collection of DdosCustomPolicies in the DdosCustomPolicy. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of DdosCustomPolicies and their operations over a DdosCustomPolicy. </returns>
        public static DdosCustomPolicyCollection GetDdosCustomPolicies(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetDdosCustomPolicies();
        }

        /// <summary> Gets a collection of DdosProtectionPlans in the DdosProtectionPlan. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of DdosProtectionPlans and their operations over a DdosProtectionPlan. </returns>
        public static DdosProtectionPlanCollection GetDdosProtectionPlans(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetDdosProtectionPlans();
        }

        /// <summary> Gets a collection of DscpConfigurations in the DscpConfiguration. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of DscpConfigurations and their operations over a DscpConfiguration. </returns>
        public static DscpConfigurationCollection GetDscpConfigurations(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetDscpConfigurations();
        }

        /// <summary> Gets a collection of ExpressRouteCircuits in the ExpressRouteCircuit. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of ExpressRouteCircuits and their operations over a ExpressRouteCircuit. </returns>
        public static ExpressRouteCircuitCollection GetExpressRouteCircuits(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetExpressRouteCircuits();
        }

        /// <summary> Gets a collection of ExpressRouteCrossConnections in the ExpressRouteCrossConnection. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of ExpressRouteCrossConnections and their operations over a ExpressRouteCrossConnection. </returns>
        public static ExpressRouteCrossConnectionCollection GetExpressRouteCrossConnections(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetExpressRouteCrossConnections();
        }

        /// <summary> Gets a collection of ExpressRoutePorts in the ExpressRoutePort. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of ExpressRoutePorts and their operations over a ExpressRoutePort. </returns>
        public static ExpressRoutePortCollection GetExpressRoutePorts(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetExpressRoutePorts();
        }

        /// <summary> Gets a collection of FirewallPolicies in the FirewallPolicy. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of FirewallPolicies and their operations over a FirewallPolicy. </returns>
        public static FirewallPolicyCollection GetFirewallPolicies(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetFirewallPolicies();
        }

        /// <summary> Gets a collection of IpAllocations in the IpAllocation. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of IpAllocations and their operations over a IpAllocation. </returns>
        public static IpAllocationCollection GetIpAllocations(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetIpAllocations();
        }

        /// <summary> Gets a collection of IpGroups in the IpGroup. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of IpGroups and their operations over a IpGroup. </returns>
        public static IpGroupCollection GetIpGroups(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetIpGroups();
        }

        /// <summary> Gets a collection of LoadBalancers in the LoadBalancer. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of LoadBalancers and their operations over a LoadBalancer. </returns>
        public static LoadBalancerCollection GetLoadBalancers(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetLoadBalancers();
        }

        /// <summary> Gets a collection of NatGateways in the NatGateway. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of NatGateways and their operations over a NatGateway. </returns>
        public static NatGatewayCollection GetNatGateways(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetNatGateways();
        }

        /// <summary> Gets a collection of NetworkInterfaces in the NetworkInterface. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of NetworkInterfaces and their operations over a NetworkInterface. </returns>
        public static NetworkInterfaceCollection GetNetworkInterfaces(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetNetworkInterfaces();
        }

        /// <summary> Gets a collection of NetworkProfiles in the NetworkProfile. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of NetworkProfiles and their operations over a NetworkProfile. </returns>
        public static NetworkProfileCollection GetNetworkProfiles(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetNetworkProfiles();
        }

        /// <summary> Gets a collection of NetworkSecurityGroups in the NetworkSecurityGroup. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of NetworkSecurityGroups and their operations over a NetworkSecurityGroup. </returns>
        public static NetworkSecurityGroupCollection GetNetworkSecurityGroups(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetNetworkSecurityGroups();
        }

        /// <summary> Gets a collection of NetworkVirtualAppliances in the NetworkVirtualAppliance. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of NetworkVirtualAppliances and their operations over a NetworkVirtualAppliance. </returns>
        public static NetworkVirtualApplianceCollection GetNetworkVirtualAppliances(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetNetworkVirtualAppliances();
        }

        /// <summary> Gets a collection of NetworkWatchers in the NetworkWatcher. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of NetworkWatchers and their operations over a NetworkWatcher. </returns>
        public static NetworkWatcherCollection GetNetworkWatchers(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetNetworkWatchers();
        }

        /// <summary> Gets a collection of PrivateEndpoints in the PrivateEndpoint. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of PrivateEndpoints and their operations over a PrivateEndpoint. </returns>
        public static PrivateEndpointCollection GetPrivateEndpoints(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetPrivateEndpoints();
        }

        /// <summary> Gets a collection of PrivateLinkServices in the PrivateLinkService. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of PrivateLinkServices and their operations over a PrivateLinkService. </returns>
        public static PrivateLinkServiceCollection GetPrivateLinkServices(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetPrivateLinkServices();
        }

        /// <summary> Gets a collection of PublicIPAddresses in the PublicIPAddress. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of PublicIPAddresses and their operations over a PublicIPAddress. </returns>
        public static PublicIPAddressCollection GetPublicIPAddresses(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetPublicIPAddresses();
        }

        /// <summary> Gets a collection of PublicIPPrefixes in the PublicIPPrefix. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of PublicIPPrefixes and their operations over a PublicIPPrefix. </returns>
        public static PublicIPPrefixCollection GetPublicIPPrefixes(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetPublicIPPrefixes();
        }

        /// <summary> Gets a collection of RouteFilters in the RouteFilter. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of RouteFilters and their operations over a RouteFilter. </returns>
        public static RouteFilterCollection GetRouteFilters(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetRouteFilters();
        }

        /// <summary> Gets a collection of RouteTables in the RouteTable. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of RouteTables and their operations over a RouteTable. </returns>
        public static RouteTableCollection GetRouteTables(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetRouteTables();
        }

        /// <summary> Gets a collection of SecurityPartnerProviders in the SecurityPartnerProvider. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of SecurityPartnerProviders and their operations over a SecurityPartnerProvider. </returns>
        public static SecurityPartnerProviderCollection GetSecurityPartnerProviders(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetSecurityPartnerProviders();
        }

        /// <summary> Gets a collection of ServiceEndpointPolicies in the ServiceEndpointPolicy. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of ServiceEndpointPolicies and their operations over a ServiceEndpointPolicy. </returns>
        public static ServiceEndpointPolicyCollection GetServiceEndpointPolicies(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetServiceEndpointPolicies();
        }

        /// <summary> Gets a collection of VirtualNetworks in the VirtualNetwork. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of VirtualNetworks and their operations over a VirtualNetwork. </returns>
        public static VirtualNetworkCollection GetVirtualNetworks(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetVirtualNetworks();
        }

        /// <summary> Gets a collection of VirtualNetworkGateways in the VirtualNetworkGateway. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of VirtualNetworkGateways and their operations over a VirtualNetworkGateway. </returns>
        public static VirtualNetworkGatewayCollection GetVirtualNetworkGateways(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetVirtualNetworkGateways();
        }

        /// <summary> Gets a collection of VirtualNetworkGatewayConnections in the VirtualNetworkGatewayConnection. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of VirtualNetworkGatewayConnections and their operations over a VirtualNetworkGatewayConnection. </returns>
        public static VirtualNetworkGatewayConnectionCollection GetVirtualNetworkGatewayConnections(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetVirtualNetworkGatewayConnections();
        }

        /// <summary> Gets a collection of LocalNetworkGateways in the LocalNetworkGateway. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of LocalNetworkGateways and their operations over a LocalNetworkGateway. </returns>
        public static LocalNetworkGatewayCollection GetLocalNetworkGateways(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetLocalNetworkGateways();
        }

        /// <summary> Gets a collection of VirtualNetworkTaps in the VirtualNetworkTap. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of VirtualNetworkTaps and their operations over a VirtualNetworkTap. </returns>
        public static VirtualNetworkTapCollection GetVirtualNetworkTaps(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetVirtualNetworkTaps();
        }

        /// <summary> Gets a collection of VirtualRouters in the VirtualRouter. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of VirtualRouters and their operations over a VirtualRouter. </returns>
        public static VirtualRouterCollection GetVirtualRouters(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetVirtualRouters();
        }

        /// <summary> Gets a collection of VirtualWANs in the VirtualWAN. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of VirtualWANs and their operations over a VirtualWAN. </returns>
        public static VirtualWANCollection GetVirtualWANs(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetVirtualWANs();
        }

        /// <summary> Gets a collection of VpnSites in the VpnSite. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of VpnSites and their operations over a VpnSite. </returns>
        public static VpnSiteCollection GetVpnSites(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetVpnSites();
        }

        /// <summary> Gets a collection of VpnServerConfigurations in the VpnServerConfiguration. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of VpnServerConfigurations and their operations over a VpnServerConfiguration. </returns>
        public static VpnServerConfigurationCollection GetVpnServerConfigurations(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetVpnServerConfigurations();
        }

        /// <summary> Gets a collection of VirtualHubs in the VirtualHub. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of VirtualHubs and their operations over a VirtualHub. </returns>
        public static VirtualHubCollection GetVirtualHubs(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetVirtualHubs();
        }

        /// <summary> Gets a collection of VpnGateways in the VpnGateway. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of VpnGateways and their operations over a VpnGateway. </returns>
        public static VpnGatewayCollection GetVpnGateways(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetVpnGateways();
        }

        /// <summary> Gets a collection of P2SVpnGateways in the P2SVpnGateway. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of P2SVpnGateways and their operations over a P2SVpnGateway. </returns>
        public static P2SVpnGatewayCollection GetP2SVpnGateways(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetP2SVpnGateways();
        }

        /// <summary> Gets a collection of ExpressRouteGateways in the ExpressRouteGateway. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of ExpressRouteGateways and their operations over a ExpressRouteGateway. </returns>
        public static ExpressRouteGatewayCollection GetExpressRouteGateways(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetExpressRouteGateways();
        }

        /// <summary> Gets a collection of WebApplicationFirewallPolicies in the WebApplicationFirewallPolicy. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of WebApplicationFirewallPolicies and their operations over a WebApplicationFirewallPolicy. </returns>
        public static WebApplicationFirewallPolicyCollection GetWebApplicationFirewallPolicies(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetWebApplicationFirewallPolicies();
        }

        /// <summary> Gets all of the available subnet delegations for this resource group in this region. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="location"> The location of the domain name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="location"/> is empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="location"/> is null. </exception>
        /// <returns> An async collection of <see cref="AvailableDelegation" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<AvailableDelegation> GetAvailableResourceGroupDelegationsAsync(this ResourceGroup resourceGroup, string location, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(location, nameof(location));

            return GetExtensionClient(resourceGroup).GetAvailableResourceGroupDelegationsAsync(location, cancellationToken);
        }

        /// <summary> Gets all of the available subnet delegations for this resource group in this region. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="location"> The location of the domain name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="location"/> is empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="location"/> is null. </exception>
        /// <returns> A collection of <see cref="AvailableDelegation" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<AvailableDelegation> GetAvailableResourceGroupDelegations(this ResourceGroup resourceGroup, string location, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(location, nameof(location));

            return GetExtensionClient(resourceGroup).GetAvailableResourceGroupDelegations(location, cancellationToken);
        }

        /// <summary> Gets all available service aliases for this resource group in this region. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="location"> The location. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="location"/> is empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="location"/> is null. </exception>
        /// <returns> An async collection of <see cref="AvailableServiceAlias" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<AvailableServiceAlias> GetAvailableServiceAliasesAsync(this ResourceGroup resourceGroup, string location, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(location, nameof(location));

            return GetExtensionClient(resourceGroup).GetAvailableServiceAliasesAsync(location, cancellationToken);
        }

        /// <summary> Gets all available service aliases for this resource group in this region. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="location"> The location. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="location"/> is empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="location"/> is null. </exception>
        /// <returns> A collection of <see cref="AvailableServiceAlias" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<AvailableServiceAlias> GetAvailableServiceAliases(this ResourceGroup resourceGroup, string location, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(location, nameof(location));

            return GetExtensionClient(resourceGroup).GetAvailableServiceAliases(location, cancellationToken);
        }

        /// <summary> Returns all of the resource types that can be linked to a Private Endpoint in this subscription in this region. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="location"> The location of the domain name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="location"/> is empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="location"/> is null. </exception>
        /// <returns> An async collection of <see cref="AvailablePrivateEndpointType" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<AvailablePrivateEndpointType> GetAvailablePrivateEndpointTypesAsync(this ResourceGroup resourceGroup, string location, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(location, nameof(location));

            return GetExtensionClient(resourceGroup).GetAvailablePrivateEndpointTypesAsync(location, cancellationToken);
        }

        /// <summary> Returns all of the resource types that can be linked to a Private Endpoint in this subscription in this region. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="location"> The location of the domain name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="location"/> is empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="location"/> is null. </exception>
        /// <returns> A collection of <see cref="AvailablePrivateEndpointType" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<AvailablePrivateEndpointType> GetAvailablePrivateEndpointTypes(this ResourceGroup resourceGroup, string location, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(location, nameof(location));

            return GetExtensionClient(resourceGroup).GetAvailablePrivateEndpointTypes(location, cancellationToken);
        }

        /// <summary> Checks whether the subscription is visible to private link service in the specified resource group. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="location"> The location of the domain name. </param>
        /// <param name="parameters"> The request body of CheckPrivateLinkService API call. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="location"/> is empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="location"/> or <paramref name="parameters"/> is null. </exception>
        public async static Task<CheckPrivateLinkServiceVisibilityByResourceGroupPrivateLinkServiceOperation> CheckPrivateLinkServiceVisibilityByResourceGroupPrivateLinkServiceAsync(this ResourceGroup resourceGroup, bool waitForCompletion, string location, CheckPrivateLinkServiceVisibilityRequest parameters, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(location, nameof(location));
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            return await GetExtensionClient(resourceGroup).CheckPrivateLinkServiceVisibilityByResourceGroupPrivateLinkServiceAsync(waitForCompletion, location, parameters, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Checks whether the subscription is visible to private link service in the specified resource group. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="location"> The location of the domain name. </param>
        /// <param name="parameters"> The request body of CheckPrivateLinkService API call. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="location"/> is empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="location"/> or <paramref name="parameters"/> is null. </exception>
        public static CheckPrivateLinkServiceVisibilityByResourceGroupPrivateLinkServiceOperation CheckPrivateLinkServiceVisibilityByResourceGroupPrivateLinkService(this ResourceGroup resourceGroup, bool waitForCompletion, string location, CheckPrivateLinkServiceVisibilityRequest parameters, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(location, nameof(location));
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            return GetExtensionClient(resourceGroup).CheckPrivateLinkServiceVisibilityByResourceGroupPrivateLinkService(waitForCompletion, location, parameters, cancellationToken);
        }

        /// <summary> Returns all of the private link service ids that can be linked to a Private Endpoint with auto approved in this subscription in this region. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="location"> The location of the domain name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="location"/> is empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="location"/> is null. </exception>
        /// <returns> An async collection of <see cref="AutoApprovedPrivateLinkService" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<AutoApprovedPrivateLinkService> GetAutoApprovedPrivateLinkServicesPrivateLinkServicesAsync(this ResourceGroup resourceGroup, string location, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(location, nameof(location));

            return GetExtensionClient(resourceGroup).GetAutoApprovedPrivateLinkServicesPrivateLinkServicesAsync(location, cancellationToken);
        }

        /// <summary> Returns all of the private link service ids that can be linked to a Private Endpoint with auto approved in this subscription in this region. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="location"> The location of the domain name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="location"/> is empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="location"/> is null. </exception>
        /// <returns> A collection of <see cref="AutoApprovedPrivateLinkService" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<AutoApprovedPrivateLinkService> GetAutoApprovedPrivateLinkServicesPrivateLinkServices(this ResourceGroup resourceGroup, string location, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(location, nameof(location));

            return GetExtensionClient(resourceGroup).GetAutoApprovedPrivateLinkServicesPrivateLinkServices(location, cancellationToken);
        }
    }
}
