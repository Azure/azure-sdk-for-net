// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Core;
using Azure.ResourceManager.Network.Models;

namespace Azure.ResourceManager.Network
{
    /// <summary> A class to add extension methods to ResourceGroup. </summary>
    internal partial class ResourceGroupExtensionClient : ArmResource
    {
        private ClientDiagnostics _availableResourceGroupDelegationsClientDiagnostics;
        private AvailableResourceGroupDelegationsRestOperations _availableResourceGroupDelegationsRestClient;
        private ClientDiagnostics _availableServiceAliasesClientDiagnostics;
        private AvailableServiceAliasesRestOperations _availableServiceAliasesRestClient;
        private ClientDiagnostics _availablePrivateEndpointTypesClientDiagnostics;
        private AvailablePrivateEndpointTypesRestOperations _availablePrivateEndpointTypesRestClient;
        private ClientDiagnostics _privateLinkServicesClientDiagnostics;
        private PrivateLinkServicesRestOperations _privateLinkServicesRestClient;

        /// <summary> Initializes a new instance of the <see cref="ResourceGroupExtensionClient"/> class for mocking. </summary>
        protected ResourceGroupExtensionClient()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="ResourceGroupExtensionClient"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal ResourceGroupExtensionClient(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics AvailableResourceGroupDelegationsClientDiagnostics => _availableResourceGroupDelegationsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Network", ProviderConstants.DefaultProviderNamespace, DiagnosticOptions);
        private AvailableResourceGroupDelegationsRestOperations AvailableResourceGroupDelegationsRestClient => _availableResourceGroupDelegationsRestClient ??= new AvailableResourceGroupDelegationsRestOperations(AvailableResourceGroupDelegationsClientDiagnostics, Pipeline, DiagnosticOptions.ApplicationId, BaseUri);
        private ClientDiagnostics AvailableServiceAliasesClientDiagnostics => _availableServiceAliasesClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Network", ProviderConstants.DefaultProviderNamespace, DiagnosticOptions);
        private AvailableServiceAliasesRestOperations AvailableServiceAliasesRestClient => _availableServiceAliasesRestClient ??= new AvailableServiceAliasesRestOperations(AvailableServiceAliasesClientDiagnostics, Pipeline, DiagnosticOptions.ApplicationId, BaseUri);
        private ClientDiagnostics AvailablePrivateEndpointTypesClientDiagnostics => _availablePrivateEndpointTypesClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Network", ProviderConstants.DefaultProviderNamespace, DiagnosticOptions);
        private AvailablePrivateEndpointTypesRestOperations AvailablePrivateEndpointTypesRestClient => _availablePrivateEndpointTypesRestClient ??= new AvailablePrivateEndpointTypesRestOperations(AvailablePrivateEndpointTypesClientDiagnostics, Pipeline, DiagnosticOptions.ApplicationId, BaseUri);
        private ClientDiagnostics PrivateLinkServicesClientDiagnostics => _privateLinkServicesClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Network", ProviderConstants.DefaultProviderNamespace, DiagnosticOptions);
        private PrivateLinkServicesRestOperations PrivateLinkServicesRestClient => _privateLinkServicesRestClient ??= new PrivateLinkServicesRestOperations(PrivateLinkServicesClientDiagnostics, Pipeline, DiagnosticOptions.ApplicationId, BaseUri);

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            Client.TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary> Gets a collection of ApplicationGateways in the ApplicationGateway. </summary>
        /// <returns> An object representing collection of ApplicationGateways and their operations over a ApplicationGateway. </returns>
        public virtual ApplicationGatewayCollection GetApplicationGateways()
        {
            return new ApplicationGatewayCollection(Client, Id);
        }

        /// <summary> Gets a collection of ApplicationSecurityGroups in the ApplicationSecurityGroup. </summary>
        /// <returns> An object representing collection of ApplicationSecurityGroups and their operations over a ApplicationSecurityGroup. </returns>
        public virtual ApplicationSecurityGroupCollection GetApplicationSecurityGroups()
        {
            return new ApplicationSecurityGroupCollection(Client, Id);
        }

        /// <summary> Gets a collection of AzureFirewalls in the AzureFirewall. </summary>
        /// <returns> An object representing collection of AzureFirewalls and their operations over a AzureFirewall. </returns>
        public virtual AzureFirewallCollection GetAzureFirewalls()
        {
            return new AzureFirewallCollection(Client, Id);
        }

        /// <summary> Gets a collection of BastionHosts in the BastionHost. </summary>
        /// <returns> An object representing collection of BastionHosts and their operations over a BastionHost. </returns>
        public virtual BastionHostCollection GetBastionHosts()
        {
            return new BastionHostCollection(Client, Id);
        }

        /// <summary> Gets a collection of CustomIpPrefixes in the CustomIpPrefix. </summary>
        /// <returns> An object representing collection of CustomIpPrefixes and their operations over a CustomIpPrefix. </returns>
        public virtual CustomIpPrefixCollection GetCustomIpPrefixes()
        {
            return new CustomIpPrefixCollection(Client, Id);
        }

        /// <summary> Gets a collection of DdosCustomPolicies in the DdosCustomPolicy. </summary>
        /// <returns> An object representing collection of DdosCustomPolicies and their operations over a DdosCustomPolicy. </returns>
        public virtual DdosCustomPolicyCollection GetDdosCustomPolicies()
        {
            return new DdosCustomPolicyCollection(Client, Id);
        }

        /// <summary> Gets a collection of DdosProtectionPlans in the DdosProtectionPlan. </summary>
        /// <returns> An object representing collection of DdosProtectionPlans and their operations over a DdosProtectionPlan. </returns>
        public virtual DdosProtectionPlanCollection GetDdosProtectionPlans()
        {
            return new DdosProtectionPlanCollection(Client, Id);
        }

        /// <summary> Gets a collection of DscpConfigurations in the DscpConfiguration. </summary>
        /// <returns> An object representing collection of DscpConfigurations and their operations over a DscpConfiguration. </returns>
        public virtual DscpConfigurationCollection GetDscpConfigurations()
        {
            return new DscpConfigurationCollection(Client, Id);
        }

        /// <summary> Gets a collection of ExpressRouteCircuits in the ExpressRouteCircuit. </summary>
        /// <returns> An object representing collection of ExpressRouteCircuits and their operations over a ExpressRouteCircuit. </returns>
        public virtual ExpressRouteCircuitCollection GetExpressRouteCircuits()
        {
            return new ExpressRouteCircuitCollection(Client, Id);
        }

        /// <summary> Gets a collection of ExpressRouteCrossConnections in the ExpressRouteCrossConnection. </summary>
        /// <returns> An object representing collection of ExpressRouteCrossConnections and their operations over a ExpressRouteCrossConnection. </returns>
        public virtual ExpressRouteCrossConnectionCollection GetExpressRouteCrossConnections()
        {
            return new ExpressRouteCrossConnectionCollection(Client, Id);
        }

        /// <summary> Gets a collection of ExpressRoutePorts in the ExpressRoutePort. </summary>
        /// <returns> An object representing collection of ExpressRoutePorts and their operations over a ExpressRoutePort. </returns>
        public virtual ExpressRoutePortCollection GetExpressRoutePorts()
        {
            return new ExpressRoutePortCollection(Client, Id);
        }

        /// <summary> Gets a collection of FirewallPolicies in the FirewallPolicy. </summary>
        /// <returns> An object representing collection of FirewallPolicies and their operations over a FirewallPolicy. </returns>
        public virtual FirewallPolicyCollection GetFirewallPolicies()
        {
            return new FirewallPolicyCollection(Client, Id);
        }

        /// <summary> Gets a collection of IpAllocations in the IpAllocation. </summary>
        /// <returns> An object representing collection of IpAllocations and their operations over a IpAllocation. </returns>
        public virtual IpAllocationCollection GetIpAllocations()
        {
            return new IpAllocationCollection(Client, Id);
        }

        /// <summary> Gets a collection of IpGroups in the IpGroup. </summary>
        /// <returns> An object representing collection of IpGroups and their operations over a IpGroup. </returns>
        public virtual IpGroupCollection GetIpGroups()
        {
            return new IpGroupCollection(Client, Id);
        }

        /// <summary> Gets a collection of LoadBalancers in the LoadBalancer. </summary>
        /// <returns> An object representing collection of LoadBalancers and their operations over a LoadBalancer. </returns>
        public virtual LoadBalancerCollection GetLoadBalancers()
        {
            return new LoadBalancerCollection(Client, Id);
        }

        /// <summary> Gets a collection of NatGateways in the NatGateway. </summary>
        /// <returns> An object representing collection of NatGateways and their operations over a NatGateway. </returns>
        public virtual NatGatewayCollection GetNatGateways()
        {
            return new NatGatewayCollection(Client, Id);
        }

        /// <summary> Gets a collection of NetworkInterfaces in the NetworkInterface. </summary>
        /// <returns> An object representing collection of NetworkInterfaces and their operations over a NetworkInterface. </returns>
        public virtual NetworkInterfaceCollection GetNetworkInterfaces()
        {
            return new NetworkInterfaceCollection(Client, Id);
        }

        /// <summary> Gets a collection of NetworkProfiles in the NetworkProfile. </summary>
        /// <returns> An object representing collection of NetworkProfiles and their operations over a NetworkProfile. </returns>
        public virtual NetworkProfileCollection GetNetworkProfiles()
        {
            return new NetworkProfileCollection(Client, Id);
        }

        /// <summary> Gets a collection of NetworkSecurityGroups in the NetworkSecurityGroup. </summary>
        /// <returns> An object representing collection of NetworkSecurityGroups and their operations over a NetworkSecurityGroup. </returns>
        public virtual NetworkSecurityGroupCollection GetNetworkSecurityGroups()
        {
            return new NetworkSecurityGroupCollection(Client, Id);
        }

        /// <summary> Gets a collection of NetworkVirtualAppliances in the NetworkVirtualAppliance. </summary>
        /// <returns> An object representing collection of NetworkVirtualAppliances and their operations over a NetworkVirtualAppliance. </returns>
        public virtual NetworkVirtualApplianceCollection GetNetworkVirtualAppliances()
        {
            return new NetworkVirtualApplianceCollection(Client, Id);
        }

        /// <summary> Gets a collection of NetworkWatchers in the NetworkWatcher. </summary>
        /// <returns> An object representing collection of NetworkWatchers and their operations over a NetworkWatcher. </returns>
        public virtual NetworkWatcherCollection GetNetworkWatchers()
        {
            return new NetworkWatcherCollection(Client, Id);
        }

        /// <summary> Gets a collection of PrivateEndpoints in the PrivateEndpoint. </summary>
        /// <returns> An object representing collection of PrivateEndpoints and their operations over a PrivateEndpoint. </returns>
        public virtual PrivateEndpointCollection GetPrivateEndpoints()
        {
            return new PrivateEndpointCollection(Client, Id);
        }

        /// <summary> Gets a collection of PrivateLinkServices in the PrivateLinkService. </summary>
        /// <returns> An object representing collection of PrivateLinkServices and their operations over a PrivateLinkService. </returns>
        public virtual PrivateLinkServiceCollection GetPrivateLinkServices()
        {
            return new PrivateLinkServiceCollection(Client, Id);
        }

        /// <summary> Gets a collection of PublicIPAddresses in the PublicIPAddress. </summary>
        /// <returns> An object representing collection of PublicIPAddresses and their operations over a PublicIPAddress. </returns>
        public virtual PublicIPAddressCollection GetPublicIPAddresses()
        {
            return new PublicIPAddressCollection(Client, Id);
        }

        /// <summary> Gets a collection of PublicIPPrefixes in the PublicIPPrefix. </summary>
        /// <returns> An object representing collection of PublicIPPrefixes and their operations over a PublicIPPrefix. </returns>
        public virtual PublicIPPrefixCollection GetPublicIPPrefixes()
        {
            return new PublicIPPrefixCollection(Client, Id);
        }

        /// <summary> Gets a collection of RouteFilters in the RouteFilter. </summary>
        /// <returns> An object representing collection of RouteFilters and their operations over a RouteFilter. </returns>
        public virtual RouteFilterCollection GetRouteFilters()
        {
            return new RouteFilterCollection(Client, Id);
        }

        /// <summary> Gets a collection of RouteTables in the RouteTable. </summary>
        /// <returns> An object representing collection of RouteTables and their operations over a RouteTable. </returns>
        public virtual RouteTableCollection GetRouteTables()
        {
            return new RouteTableCollection(Client, Id);
        }

        /// <summary> Gets a collection of SecurityPartnerProviders in the SecurityPartnerProvider. </summary>
        /// <returns> An object representing collection of SecurityPartnerProviders and their operations over a SecurityPartnerProvider. </returns>
        public virtual SecurityPartnerProviderCollection GetSecurityPartnerProviders()
        {
            return new SecurityPartnerProviderCollection(Client, Id);
        }

        /// <summary> Gets a collection of ServiceEndpointPolicies in the ServiceEndpointPolicy. </summary>
        /// <returns> An object representing collection of ServiceEndpointPolicies and their operations over a ServiceEndpointPolicy. </returns>
        public virtual ServiceEndpointPolicyCollection GetServiceEndpointPolicies()
        {
            return new ServiceEndpointPolicyCollection(Client, Id);
        }

        /// <summary> Gets a collection of VirtualNetworks in the VirtualNetwork. </summary>
        /// <returns> An object representing collection of VirtualNetworks and their operations over a VirtualNetwork. </returns>
        public virtual VirtualNetworkCollection GetVirtualNetworks()
        {
            return new VirtualNetworkCollection(Client, Id);
        }

        /// <summary> Gets a collection of VirtualNetworkGateways in the VirtualNetworkGateway. </summary>
        /// <returns> An object representing collection of VirtualNetworkGateways and their operations over a VirtualNetworkGateway. </returns>
        public virtual VirtualNetworkGatewayCollection GetVirtualNetworkGateways()
        {
            return new VirtualNetworkGatewayCollection(Client, Id);
        }

        /// <summary> Gets a collection of VirtualNetworkGatewayConnections in the VirtualNetworkGatewayConnection. </summary>
        /// <returns> An object representing collection of VirtualNetworkGatewayConnections and their operations over a VirtualNetworkGatewayConnection. </returns>
        public virtual VirtualNetworkGatewayConnectionCollection GetVirtualNetworkGatewayConnections()
        {
            return new VirtualNetworkGatewayConnectionCollection(Client, Id);
        }

        /// <summary> Gets a collection of LocalNetworkGateways in the LocalNetworkGateway. </summary>
        /// <returns> An object representing collection of LocalNetworkGateways and their operations over a LocalNetworkGateway. </returns>
        public virtual LocalNetworkGatewayCollection GetLocalNetworkGateways()
        {
            return new LocalNetworkGatewayCollection(Client, Id);
        }

        /// <summary> Gets a collection of VirtualNetworkTaps in the VirtualNetworkTap. </summary>
        /// <returns> An object representing collection of VirtualNetworkTaps and their operations over a VirtualNetworkTap. </returns>
        public virtual VirtualNetworkTapCollection GetVirtualNetworkTaps()
        {
            return new VirtualNetworkTapCollection(Client, Id);
        }

        /// <summary> Gets a collection of VirtualRouters in the VirtualRouter. </summary>
        /// <returns> An object representing collection of VirtualRouters and their operations over a VirtualRouter. </returns>
        public virtual VirtualRouterCollection GetVirtualRouters()
        {
            return new VirtualRouterCollection(Client, Id);
        }

        /// <summary> Gets a collection of VirtualWANs in the VirtualWAN. </summary>
        /// <returns> An object representing collection of VirtualWANs and their operations over a VirtualWAN. </returns>
        public virtual VirtualWANCollection GetVirtualWANs()
        {
            return new VirtualWANCollection(Client, Id);
        }

        /// <summary> Gets a collection of VpnSites in the VpnSite. </summary>
        /// <returns> An object representing collection of VpnSites and their operations over a VpnSite. </returns>
        public virtual VpnSiteCollection GetVpnSites()
        {
            return new VpnSiteCollection(Client, Id);
        }

        /// <summary> Gets a collection of VpnServerConfigurations in the VpnServerConfiguration. </summary>
        /// <returns> An object representing collection of VpnServerConfigurations and their operations over a VpnServerConfiguration. </returns>
        public virtual VpnServerConfigurationCollection GetVpnServerConfigurations()
        {
            return new VpnServerConfigurationCollection(Client, Id);
        }

        /// <summary> Gets a collection of VirtualHubs in the VirtualHub. </summary>
        /// <returns> An object representing collection of VirtualHubs and their operations over a VirtualHub. </returns>
        public virtual VirtualHubCollection GetVirtualHubs()
        {
            return new VirtualHubCollection(Client, Id);
        }

        /// <summary> Gets a collection of VpnGateways in the VpnGateway. </summary>
        /// <returns> An object representing collection of VpnGateways and their operations over a VpnGateway. </returns>
        public virtual VpnGatewayCollection GetVpnGateways()
        {
            return new VpnGatewayCollection(Client, Id);
        }

        /// <summary> Gets a collection of P2SVpnGateways in the P2SVpnGateway. </summary>
        /// <returns> An object representing collection of P2SVpnGateways and their operations over a P2SVpnGateway. </returns>
        public virtual P2SVpnGatewayCollection GetP2SVpnGateways()
        {
            return new P2SVpnGatewayCollection(Client, Id);
        }

        /// <summary> Gets a collection of ExpressRouteGateways in the ExpressRouteGateway. </summary>
        /// <returns> An object representing collection of ExpressRouteGateways and their operations over a ExpressRouteGateway. </returns>
        public virtual ExpressRouteGatewayCollection GetExpressRouteGateways()
        {
            return new ExpressRouteGatewayCollection(Client, Id);
        }

        /// <summary> Gets a collection of WebApplicationFirewallPolicies in the WebApplicationFirewallPolicy. </summary>
        /// <returns> An object representing collection of WebApplicationFirewallPolicies and their operations over a WebApplicationFirewallPolicy. </returns>
        public virtual WebApplicationFirewallPolicyCollection GetWebApplicationFirewallPolicies()
        {
            return new WebApplicationFirewallPolicyCollection(Client, Id);
        }

        /// <summary> Gets all of the available subnet delegations for this resource group in this region. </summary>
        /// <param name="location"> The location of the domain name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="AvailableDelegation" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<AvailableDelegation> GetAvailableResourceGroupDelegationsAsync(string location, CancellationToken cancellationToken = default)
        {
            async Task<Page<AvailableDelegation>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = AvailableResourceGroupDelegationsClientDiagnostics.CreateScope("ResourceGroupExtensionClient.GetAvailableResourceGroupDelegations");
                scope.Start();
                try
                {
                    var response = await AvailableResourceGroupDelegationsRestClient.ListAsync(Id.SubscriptionId, Id.ResourceGroupName, location, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<AvailableDelegation>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = AvailableResourceGroupDelegationsClientDiagnostics.CreateScope("ResourceGroupExtensionClient.GetAvailableResourceGroupDelegations");
                scope.Start();
                try
                {
                    var response = await AvailableResourceGroupDelegationsRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, location, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets all of the available subnet delegations for this resource group in this region. </summary>
        /// <param name="location"> The location of the domain name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AvailableDelegation" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<AvailableDelegation> GetAvailableResourceGroupDelegations(string location, CancellationToken cancellationToken = default)
        {
            Page<AvailableDelegation> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = AvailableResourceGroupDelegationsClientDiagnostics.CreateScope("ResourceGroupExtensionClient.GetAvailableResourceGroupDelegations");
                scope.Start();
                try
                {
                    var response = AvailableResourceGroupDelegationsRestClient.List(Id.SubscriptionId, Id.ResourceGroupName, location, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<AvailableDelegation> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = AvailableResourceGroupDelegationsClientDiagnostics.CreateScope("ResourceGroupExtensionClient.GetAvailableResourceGroupDelegations");
                scope.Start();
                try
                {
                    var response = AvailableResourceGroupDelegationsRestClient.ListNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, location, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets all available service aliases for this resource group in this region. </summary>
        /// <param name="location"> The location. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="AvailableServiceAlias" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<AvailableServiceAlias> GetAvailableServiceAliasesAsync(string location, CancellationToken cancellationToken = default)
        {
            async Task<Page<AvailableServiceAlias>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = AvailableServiceAliasesClientDiagnostics.CreateScope("ResourceGroupExtensionClient.GetAvailableServiceAliases");
                scope.Start();
                try
                {
                    var response = await AvailableServiceAliasesRestClient.ListByResourceGroupAsync(Id.SubscriptionId, Id.ResourceGroupName, location, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<AvailableServiceAlias>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = AvailableServiceAliasesClientDiagnostics.CreateScope("ResourceGroupExtensionClient.GetAvailableServiceAliases");
                scope.Start();
                try
                {
                    var response = await AvailableServiceAliasesRestClient.ListByResourceGroupNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, location, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets all available service aliases for this resource group in this region. </summary>
        /// <param name="location"> The location. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AvailableServiceAlias" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<AvailableServiceAlias> GetAvailableServiceAliases(string location, CancellationToken cancellationToken = default)
        {
            Page<AvailableServiceAlias> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = AvailableServiceAliasesClientDiagnostics.CreateScope("ResourceGroupExtensionClient.GetAvailableServiceAliases");
                scope.Start();
                try
                {
                    var response = AvailableServiceAliasesRestClient.ListByResourceGroup(Id.SubscriptionId, Id.ResourceGroupName, location, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<AvailableServiceAlias> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = AvailableServiceAliasesClientDiagnostics.CreateScope("ResourceGroupExtensionClient.GetAvailableServiceAliases");
                scope.Start();
                try
                {
                    var response = AvailableServiceAliasesRestClient.ListByResourceGroupNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, location, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Returns all of the resource types that can be linked to a Private Endpoint in this subscription in this region. </summary>
        /// <param name="location"> The location of the domain name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="AvailablePrivateEndpointType" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<AvailablePrivateEndpointType> GetAvailablePrivateEndpointTypesAsync(string location, CancellationToken cancellationToken = default)
        {
            async Task<Page<AvailablePrivateEndpointType>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = AvailablePrivateEndpointTypesClientDiagnostics.CreateScope("ResourceGroupExtensionClient.GetAvailablePrivateEndpointTypes");
                scope.Start();
                try
                {
                    var response = await AvailablePrivateEndpointTypesRestClient.ListByResourceGroupAsync(Id.SubscriptionId, Id.ResourceGroupName, location, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<AvailablePrivateEndpointType>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = AvailablePrivateEndpointTypesClientDiagnostics.CreateScope("ResourceGroupExtensionClient.GetAvailablePrivateEndpointTypes");
                scope.Start();
                try
                {
                    var response = await AvailablePrivateEndpointTypesRestClient.ListByResourceGroupNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, location, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Returns all of the resource types that can be linked to a Private Endpoint in this subscription in this region. </summary>
        /// <param name="location"> The location of the domain name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AvailablePrivateEndpointType" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<AvailablePrivateEndpointType> GetAvailablePrivateEndpointTypes(string location, CancellationToken cancellationToken = default)
        {
            Page<AvailablePrivateEndpointType> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = AvailablePrivateEndpointTypesClientDiagnostics.CreateScope("ResourceGroupExtensionClient.GetAvailablePrivateEndpointTypes");
                scope.Start();
                try
                {
                    var response = AvailablePrivateEndpointTypesRestClient.ListByResourceGroup(Id.SubscriptionId, Id.ResourceGroupName, location, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<AvailablePrivateEndpointType> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = AvailablePrivateEndpointTypesClientDiagnostics.CreateScope("ResourceGroupExtensionClient.GetAvailablePrivateEndpointTypes");
                scope.Start();
                try
                {
                    var response = AvailablePrivateEndpointTypesRestClient.ListByResourceGroupNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, location, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Checks whether the subscription is visible to private link service in the specified resource group. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="location"> The location of the domain name. </param>
        /// <param name="parameters"> The request body of CheckPrivateLinkService API call. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<CheckPrivateLinkServiceVisibilityByResourceGroupPrivateLinkServiceOperation> CheckPrivateLinkServiceVisibilityByResourceGroupPrivateLinkServiceAsync(bool waitForCompletion, string location, CheckPrivateLinkServiceVisibilityRequest parameters, CancellationToken cancellationToken = default)
        {
            using var scope = PrivateLinkServicesClientDiagnostics.CreateScope("ResourceGroupExtensionClient.CheckPrivateLinkServiceVisibilityByResourceGroupPrivateLinkService");
            scope.Start();
            try
            {
                var response = await PrivateLinkServicesRestClient.CheckPrivateLinkServiceVisibilityByResourceGroupAsync(Id.SubscriptionId, Id.ResourceGroupName, location, parameters, cancellationToken).ConfigureAwait(false);
                var operation = new CheckPrivateLinkServiceVisibilityByResourceGroupPrivateLinkServiceOperation(PrivateLinkServicesClientDiagnostics, Pipeline, PrivateLinkServicesRestClient.CreateCheckPrivateLinkServiceVisibilityByResourceGroupRequest(Id.SubscriptionId, Id.ResourceGroupName, location, parameters).Request, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Checks whether the subscription is visible to private link service in the specified resource group. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="location"> The location of the domain name. </param>
        /// <param name="parameters"> The request body of CheckPrivateLinkService API call. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual CheckPrivateLinkServiceVisibilityByResourceGroupPrivateLinkServiceOperation CheckPrivateLinkServiceVisibilityByResourceGroupPrivateLinkService(bool waitForCompletion, string location, CheckPrivateLinkServiceVisibilityRequest parameters, CancellationToken cancellationToken = default)
        {
            using var scope = PrivateLinkServicesClientDiagnostics.CreateScope("ResourceGroupExtensionClient.CheckPrivateLinkServiceVisibilityByResourceGroupPrivateLinkService");
            scope.Start();
            try
            {
                var response = PrivateLinkServicesRestClient.CheckPrivateLinkServiceVisibilityByResourceGroup(Id.SubscriptionId, Id.ResourceGroupName, location, parameters, cancellationToken);
                var operation = new CheckPrivateLinkServiceVisibilityByResourceGroupPrivateLinkServiceOperation(PrivateLinkServicesClientDiagnostics, Pipeline, PrivateLinkServicesRestClient.CreateCheckPrivateLinkServiceVisibilityByResourceGroupRequest(Id.SubscriptionId, Id.ResourceGroupName, location, parameters).Request, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns all of the private link service ids that can be linked to a Private Endpoint with auto approved in this subscription in this region. </summary>
        /// <param name="location"> The location of the domain name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="AutoApprovedPrivateLinkService" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<AutoApprovedPrivateLinkService> GetAutoApprovedPrivateLinkServicesPrivateLinkServicesAsync(string location, CancellationToken cancellationToken = default)
        {
            async Task<Page<AutoApprovedPrivateLinkService>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = PrivateLinkServicesClientDiagnostics.CreateScope("ResourceGroupExtensionClient.GetAutoApprovedPrivateLinkServicesPrivateLinkServices");
                scope.Start();
                try
                {
                    var response = await PrivateLinkServicesRestClient.ListAutoApprovedPrivateLinkServicesByResourceGroupAsync(Id.SubscriptionId, Id.ResourceGroupName, location, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<AutoApprovedPrivateLinkService>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = PrivateLinkServicesClientDiagnostics.CreateScope("ResourceGroupExtensionClient.GetAutoApprovedPrivateLinkServicesPrivateLinkServices");
                scope.Start();
                try
                {
                    var response = await PrivateLinkServicesRestClient.ListAutoApprovedPrivateLinkServicesByResourceGroupNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, location, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Returns all of the private link service ids that can be linked to a Private Endpoint with auto approved in this subscription in this region. </summary>
        /// <param name="location"> The location of the domain name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AutoApprovedPrivateLinkService" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<AutoApprovedPrivateLinkService> GetAutoApprovedPrivateLinkServicesPrivateLinkServices(string location, CancellationToken cancellationToken = default)
        {
            Page<AutoApprovedPrivateLinkService> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = PrivateLinkServicesClientDiagnostics.CreateScope("ResourceGroupExtensionClient.GetAutoApprovedPrivateLinkServicesPrivateLinkServices");
                scope.Start();
                try
                {
                    var response = PrivateLinkServicesRestClient.ListAutoApprovedPrivateLinkServicesByResourceGroup(Id.SubscriptionId, Id.ResourceGroupName, location, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<AutoApprovedPrivateLinkService> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = PrivateLinkServicesClientDiagnostics.CreateScope("ResourceGroupExtensionClient.GetAutoApprovedPrivateLinkServicesPrivateLinkServices");
                scope.Start();
                try
                {
                    var response = PrivateLinkServicesRestClient.ListAutoApprovedPrivateLinkServicesByResourceGroupNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, location, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }
    }
}
