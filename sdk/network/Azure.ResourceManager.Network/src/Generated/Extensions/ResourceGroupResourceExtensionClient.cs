// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Network.Models;

namespace Azure.ResourceManager.Network
{
    /// <summary> A class to add extension methods to ResourceGroupResource. </summary>
    internal partial class ResourceGroupResourceExtensionClient : ArmResource
    {
        private ClientDiagnostics _availableResourceGroupDelegationsClientDiagnostics;
        private AvailableResourceGroupDelegationsRestOperations _availableResourceGroupDelegationsRestClient;
        private ClientDiagnostics _availableServiceAliasesClientDiagnostics;
        private AvailableServiceAliasesRestOperations _availableServiceAliasesRestClient;
        private ClientDiagnostics _availablePrivateEndpointTypesClientDiagnostics;
        private AvailablePrivateEndpointTypesRestOperations _availablePrivateEndpointTypesRestClient;
        private ClientDiagnostics _privateLinkServicesClientDiagnostics;
        private PrivateLinkServicesRestOperations _privateLinkServicesRestClient;

        /// <summary> Initializes a new instance of the <see cref="ResourceGroupResourceExtensionClient"/> class for mocking. </summary>
        protected ResourceGroupResourceExtensionClient()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="ResourceGroupResourceExtensionClient"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal ResourceGroupResourceExtensionClient(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics AvailableResourceGroupDelegationsClientDiagnostics => _availableResourceGroupDelegationsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Network", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private AvailableResourceGroupDelegationsRestOperations AvailableResourceGroupDelegationsRestClient => _availableResourceGroupDelegationsRestClient ??= new AvailableResourceGroupDelegationsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics AvailableServiceAliasesClientDiagnostics => _availableServiceAliasesClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Network", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private AvailableServiceAliasesRestOperations AvailableServiceAliasesRestClient => _availableServiceAliasesRestClient ??= new AvailableServiceAliasesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics AvailablePrivateEndpointTypesClientDiagnostics => _availablePrivateEndpointTypesClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Network", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private AvailablePrivateEndpointTypesRestOperations AvailablePrivateEndpointTypesRestClient => _availablePrivateEndpointTypesRestClient ??= new AvailablePrivateEndpointTypesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics PrivateLinkServicesClientDiagnostics => _privateLinkServicesClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Network", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private PrivateLinkServicesRestOperations PrivateLinkServicesRestClient => _privateLinkServicesRestClient ??= new PrivateLinkServicesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary> Gets a collection of ApplicationGatewayResources in the ResourceGroupResource. </summary>
        /// <returns> An object representing collection of ApplicationGatewayResources and their operations over a ApplicationGatewayResource. </returns>
        public virtual ApplicationGatewayCollection GetApplicationGateways()
        {
            return GetCachedClient(Client => new ApplicationGatewayCollection(Client, Id));
        }

        /// <summary> Gets a collection of ApplicationSecurityGroupResources in the ResourceGroupResource. </summary>
        /// <returns> An object representing collection of ApplicationSecurityGroupResources and their operations over a ApplicationSecurityGroupResource. </returns>
        public virtual ApplicationSecurityGroupCollection GetApplicationSecurityGroups()
        {
            return GetCachedClient(Client => new ApplicationSecurityGroupCollection(Client, Id));
        }

        /// <summary> Gets a collection of AzureFirewallResources in the ResourceGroupResource. </summary>
        /// <returns> An object representing collection of AzureFirewallResources and their operations over a AzureFirewallResource. </returns>
        public virtual AzureFirewallCollection GetAzureFirewalls()
        {
            return GetCachedClient(Client => new AzureFirewallCollection(Client, Id));
        }

        /// <summary> Gets a collection of BastionHostResources in the ResourceGroupResource. </summary>
        /// <returns> An object representing collection of BastionHostResources and their operations over a BastionHostResource. </returns>
        public virtual BastionHostCollection GetBastionHosts()
        {
            return GetCachedClient(Client => new BastionHostCollection(Client, Id));
        }

        /// <summary> Gets a collection of CustomIPPrefixResources in the ResourceGroupResource. </summary>
        /// <returns> An object representing collection of CustomIPPrefixResources and their operations over a CustomIPPrefixResource. </returns>
        public virtual CustomIPPrefixCollection GetCustomIPPrefixes()
        {
            return GetCachedClient(Client => new CustomIPPrefixCollection(Client, Id));
        }

        /// <summary> Gets a collection of DdosCustomPolicyResources in the ResourceGroupResource. </summary>
        /// <returns> An object representing collection of DdosCustomPolicyResources and their operations over a DdosCustomPolicyResource. </returns>
        public virtual DdosCustomPolicyCollection GetDdosCustomPolicies()
        {
            return GetCachedClient(Client => new DdosCustomPolicyCollection(Client, Id));
        }

        /// <summary> Gets a collection of DdosProtectionPlanResources in the ResourceGroupResource. </summary>
        /// <returns> An object representing collection of DdosProtectionPlanResources and their operations over a DdosProtectionPlanResource. </returns>
        public virtual DdosProtectionPlanCollection GetDdosProtectionPlans()
        {
            return GetCachedClient(Client => new DdosProtectionPlanCollection(Client, Id));
        }

        /// <summary> Gets a collection of DscpConfigurationResources in the ResourceGroupResource. </summary>
        /// <returns> An object representing collection of DscpConfigurationResources and their operations over a DscpConfigurationResource. </returns>
        public virtual DscpConfigurationCollection GetDscpConfigurations()
        {
            return GetCachedClient(Client => new DscpConfigurationCollection(Client, Id));
        }

        /// <summary> Gets a collection of ExpressRouteCircuitResources in the ResourceGroupResource. </summary>
        /// <returns> An object representing collection of ExpressRouteCircuitResources and their operations over a ExpressRouteCircuitResource. </returns>
        public virtual ExpressRouteCircuitCollection GetExpressRouteCircuits()
        {
            return GetCachedClient(Client => new ExpressRouteCircuitCollection(Client, Id));
        }

        /// <summary> Gets a collection of ExpressRouteCrossConnectionResources in the ResourceGroupResource. </summary>
        /// <returns> An object representing collection of ExpressRouteCrossConnectionResources and their operations over a ExpressRouteCrossConnectionResource. </returns>
        public virtual ExpressRouteCrossConnectionCollection GetExpressRouteCrossConnections()
        {
            return GetCachedClient(Client => new ExpressRouteCrossConnectionCollection(Client, Id));
        }

        /// <summary> Gets a collection of ExpressRoutePortResources in the ResourceGroupResource. </summary>
        /// <returns> An object representing collection of ExpressRoutePortResources and their operations over a ExpressRoutePortResource. </returns>
        public virtual ExpressRoutePortCollection GetExpressRoutePorts()
        {
            return GetCachedClient(Client => new ExpressRoutePortCollection(Client, Id));
        }

        /// <summary> Gets a collection of FirewallPolicyResources in the ResourceGroupResource. </summary>
        /// <returns> An object representing collection of FirewallPolicyResources and their operations over a FirewallPolicyResource. </returns>
        public virtual FirewallPolicyCollection GetFirewallPolicies()
        {
            return GetCachedClient(Client => new FirewallPolicyCollection(Client, Id));
        }

        /// <summary> Gets a collection of IPAllocationResources in the ResourceGroupResource. </summary>
        /// <returns> An object representing collection of IPAllocationResources and their operations over a IPAllocationResource. </returns>
        public virtual IPAllocationCollection GetIPAllocations()
        {
            return GetCachedClient(Client => new IPAllocationCollection(Client, Id));
        }

        /// <summary> Gets a collection of IPGroupResources in the ResourceGroupResource. </summary>
        /// <returns> An object representing collection of IPGroupResources and their operations over a IPGroupResource. </returns>
        public virtual IPGroupCollection GetIPGroups()
        {
            return GetCachedClient(Client => new IPGroupCollection(Client, Id));
        }

        /// <summary> Gets a collection of LoadBalancerResources in the ResourceGroupResource. </summary>
        /// <returns> An object representing collection of LoadBalancerResources and their operations over a LoadBalancerResource. </returns>
        public virtual LoadBalancerCollection GetLoadBalancers()
        {
            return GetCachedClient(Client => new LoadBalancerCollection(Client, Id));
        }

        /// <summary> Gets a collection of NatGatewayResources in the ResourceGroupResource. </summary>
        /// <returns> An object representing collection of NatGatewayResources and their operations over a NatGatewayResource. </returns>
        public virtual NatGatewayCollection GetNatGateways()
        {
            return GetCachedClient(Client => new NatGatewayCollection(Client, Id));
        }

        /// <summary> Gets a collection of NetworkInterfaceResources in the ResourceGroupResource. </summary>
        /// <returns> An object representing collection of NetworkInterfaceResources and their operations over a NetworkInterfaceResource. </returns>
        public virtual NetworkInterfaceCollection GetNetworkInterfaces()
        {
            return GetCachedClient(Client => new NetworkInterfaceCollection(Client, Id));
        }

        /// <summary> Gets a collection of NetworkProfileResources in the ResourceGroupResource. </summary>
        /// <returns> An object representing collection of NetworkProfileResources and their operations over a NetworkProfileResource. </returns>
        public virtual NetworkProfileCollection GetNetworkProfiles()
        {
            return GetCachedClient(Client => new NetworkProfileCollection(Client, Id));
        }

        /// <summary> Gets a collection of NetworkSecurityGroupResources in the ResourceGroupResource. </summary>
        /// <returns> An object representing collection of NetworkSecurityGroupResources and their operations over a NetworkSecurityGroupResource. </returns>
        public virtual NetworkSecurityGroupCollection GetNetworkSecurityGroups()
        {
            return GetCachedClient(Client => new NetworkSecurityGroupCollection(Client, Id));
        }

        /// <summary> Gets a collection of NetworkVirtualApplianceResources in the ResourceGroupResource. </summary>
        /// <returns> An object representing collection of NetworkVirtualApplianceResources and their operations over a NetworkVirtualApplianceResource. </returns>
        public virtual NetworkVirtualApplianceCollection GetNetworkVirtualAppliances()
        {
            return GetCachedClient(Client => new NetworkVirtualApplianceCollection(Client, Id));
        }

        /// <summary> Gets a collection of NetworkWatcherResources in the ResourceGroupResource. </summary>
        /// <returns> An object representing collection of NetworkWatcherResources and their operations over a NetworkWatcherResource. </returns>
        public virtual NetworkWatcherCollection GetNetworkWatchers()
        {
            return GetCachedClient(Client => new NetworkWatcherCollection(Client, Id));
        }

        /// <summary> Gets a collection of PrivateEndpointResources in the ResourceGroupResource. </summary>
        /// <returns> An object representing collection of PrivateEndpointResources and their operations over a PrivateEndpointResource. </returns>
        public virtual PrivateEndpointCollection GetPrivateEndpoints()
        {
            return GetCachedClient(Client => new PrivateEndpointCollection(Client, Id));
        }

        /// <summary> Gets a collection of PrivateLinkServiceResources in the ResourceGroupResource. </summary>
        /// <returns> An object representing collection of PrivateLinkServiceResources and their operations over a PrivateLinkServiceResource. </returns>
        public virtual PrivateLinkServiceCollection GetPrivateLinkServices()
        {
            return GetCachedClient(Client => new PrivateLinkServiceCollection(Client, Id));
        }

        /// <summary> Gets a collection of PublicIPAddressResources in the ResourceGroupResource. </summary>
        /// <returns> An object representing collection of PublicIPAddressResources and their operations over a PublicIPAddressResource. </returns>
        public virtual PublicIPAddressCollection GetPublicIPAddresses()
        {
            return GetCachedClient(Client => new PublicIPAddressCollection(Client, Id));
        }

        /// <summary> Gets a collection of PublicIPPrefixResources in the ResourceGroupResource. </summary>
        /// <returns> An object representing collection of PublicIPPrefixResources and their operations over a PublicIPPrefixResource. </returns>
        public virtual PublicIPPrefixCollection GetPublicIPPrefixes()
        {
            return GetCachedClient(Client => new PublicIPPrefixCollection(Client, Id));
        }

        /// <summary> Gets a collection of RouteFilterResources in the ResourceGroupResource. </summary>
        /// <returns> An object representing collection of RouteFilterResources and their operations over a RouteFilterResource. </returns>
        public virtual RouteFilterCollection GetRouteFilters()
        {
            return GetCachedClient(Client => new RouteFilterCollection(Client, Id));
        }

        /// <summary> Gets a collection of RouteTableResources in the ResourceGroupResource. </summary>
        /// <returns> An object representing collection of RouteTableResources and their operations over a RouteTableResource. </returns>
        public virtual RouteTableCollection GetRouteTables()
        {
            return GetCachedClient(Client => new RouteTableCollection(Client, Id));
        }

        /// <summary> Gets a collection of SecurityPartnerProviderResources in the ResourceGroupResource. </summary>
        /// <returns> An object representing collection of SecurityPartnerProviderResources and their operations over a SecurityPartnerProviderResource. </returns>
        public virtual SecurityPartnerProviderCollection GetSecurityPartnerProviders()
        {
            return GetCachedClient(Client => new SecurityPartnerProviderCollection(Client, Id));
        }

        /// <summary> Gets a collection of ServiceEndpointPolicyResources in the ResourceGroupResource. </summary>
        /// <returns> An object representing collection of ServiceEndpointPolicyResources and their operations over a ServiceEndpointPolicyResource. </returns>
        public virtual ServiceEndpointPolicyCollection GetServiceEndpointPolicies()
        {
            return GetCachedClient(Client => new ServiceEndpointPolicyCollection(Client, Id));
        }

        /// <summary> Gets a collection of VirtualNetworkResources in the ResourceGroupResource. </summary>
        /// <returns> An object representing collection of VirtualNetworkResources and their operations over a VirtualNetworkResource. </returns>
        public virtual VirtualNetworkCollection GetVirtualNetworks()
        {
            return GetCachedClient(Client => new VirtualNetworkCollection(Client, Id));
        }

        /// <summary> Gets a collection of VirtualNetworkGatewayResources in the ResourceGroupResource. </summary>
        /// <returns> An object representing collection of VirtualNetworkGatewayResources and their operations over a VirtualNetworkGatewayResource. </returns>
        public virtual VirtualNetworkGatewayCollection GetVirtualNetworkGateways()
        {
            return GetCachedClient(Client => new VirtualNetworkGatewayCollection(Client, Id));
        }

        /// <summary> Gets a collection of VirtualNetworkGatewayConnectionResources in the ResourceGroupResource. </summary>
        /// <returns> An object representing collection of VirtualNetworkGatewayConnectionResources and their operations over a VirtualNetworkGatewayConnectionResource. </returns>
        public virtual VirtualNetworkGatewayConnectionCollection GetVirtualNetworkGatewayConnections()
        {
            return GetCachedClient(Client => new VirtualNetworkGatewayConnectionCollection(Client, Id));
        }

        /// <summary> Gets a collection of LocalNetworkGatewayResources in the ResourceGroupResource. </summary>
        /// <returns> An object representing collection of LocalNetworkGatewayResources and their operations over a LocalNetworkGatewayResource. </returns>
        public virtual LocalNetworkGatewayCollection GetLocalNetworkGateways()
        {
            return GetCachedClient(Client => new LocalNetworkGatewayCollection(Client, Id));
        }

        /// <summary> Gets a collection of VirtualNetworkTapResources in the ResourceGroupResource. </summary>
        /// <returns> An object representing collection of VirtualNetworkTapResources and their operations over a VirtualNetworkTapResource. </returns>
        public virtual VirtualNetworkTapCollection GetVirtualNetworkTaps()
        {
            return GetCachedClient(Client => new VirtualNetworkTapCollection(Client, Id));
        }

        /// <summary> Gets a collection of VirtualRouterResources in the ResourceGroupResource. </summary>
        /// <returns> An object representing collection of VirtualRouterResources and their operations over a VirtualRouterResource. </returns>
        public virtual VirtualRouterCollection GetVirtualRouters()
        {
            return GetCachedClient(Client => new VirtualRouterCollection(Client, Id));
        }

        /// <summary> Gets a collection of VirtualWanResources in the ResourceGroupResource. </summary>
        /// <returns> An object representing collection of VirtualWanResources and their operations over a VirtualWanResource. </returns>
        public virtual VirtualWanCollection GetVirtualWans()
        {
            return GetCachedClient(Client => new VirtualWanCollection(Client, Id));
        }

        /// <summary> Gets a collection of VpnSiteResources in the ResourceGroupResource. </summary>
        /// <returns> An object representing collection of VpnSiteResources and their operations over a VpnSiteResource. </returns>
        public virtual VpnSiteCollection GetVpnSites()
        {
            return GetCachedClient(Client => new VpnSiteCollection(Client, Id));
        }

        /// <summary> Gets a collection of VpnServerConfigurationResources in the ResourceGroupResource. </summary>
        /// <returns> An object representing collection of VpnServerConfigurationResources and their operations over a VpnServerConfigurationResource. </returns>
        public virtual VpnServerConfigurationCollection GetVpnServerConfigurations()
        {
            return GetCachedClient(Client => new VpnServerConfigurationCollection(Client, Id));
        }

        /// <summary> Gets a collection of VirtualHubResources in the ResourceGroupResource. </summary>
        /// <returns> An object representing collection of VirtualHubResources and their operations over a VirtualHubResource. </returns>
        public virtual VirtualHubCollection GetVirtualHubs()
        {
            return GetCachedClient(Client => new VirtualHubCollection(Client, Id));
        }

        /// <summary> Gets a collection of VpnGatewayResources in the ResourceGroupResource. </summary>
        /// <returns> An object representing collection of VpnGatewayResources and their operations over a VpnGatewayResource. </returns>
        public virtual VpnGatewayCollection GetVpnGateways()
        {
            return GetCachedClient(Client => new VpnGatewayCollection(Client, Id));
        }

        /// <summary> Gets a collection of P2SVpnGatewayResources in the ResourceGroupResource. </summary>
        /// <returns> An object representing collection of P2SVpnGatewayResources and their operations over a P2SVpnGatewayResource. </returns>
        public virtual P2SVpnGatewayCollection GetP2SVpnGateways()
        {
            return GetCachedClient(Client => new P2SVpnGatewayCollection(Client, Id));
        }

        /// <summary> Gets a collection of ExpressRouteGatewayResources in the ResourceGroupResource. </summary>
        /// <returns> An object representing collection of ExpressRouteGatewayResources and their operations over a ExpressRouteGatewayResource. </returns>
        public virtual ExpressRouteGatewayCollection GetExpressRouteGateways()
        {
            return GetCachedClient(Client => new ExpressRouteGatewayCollection(Client, Id));
        }

        /// <summary> Gets a collection of WebApplicationFirewallPolicyResources in the ResourceGroupResource. </summary>
        /// <returns> An object representing collection of WebApplicationFirewallPolicyResources and their operations over a WebApplicationFirewallPolicyResource. </returns>
        public virtual WebApplicationFirewallPolicyCollection GetWebApplicationFirewallPolicies()
        {
            return GetCachedClient(Client => new WebApplicationFirewallPolicyCollection(Client, Id));
        }

        /// <summary>
        /// Gets all of the available subnet delegations for this resource group in this region.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/locations/{location}/availableDelegations
        /// Operation Id: AvailableResourceGroupDelegations_List
        /// </summary>
        /// <param name="location"> The location of the domain name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="AvailableDelegation" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<AvailableDelegation> GetAvailableResourceGroupDelegationsAsync(AzureLocation location, CancellationToken cancellationToken = default)
        {
            async Task<Page<AvailableDelegation>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = AvailableResourceGroupDelegationsClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.GetAvailableResourceGroupDelegations");
                scope.Start();
                try
                {
                    var response = await AvailableResourceGroupDelegationsRestClient.ListAsync(Id.SubscriptionId, Id.ResourceGroupName, location, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<AvailableDelegation>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = AvailableResourceGroupDelegationsClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.GetAvailableResourceGroupDelegations");
                scope.Start();
                try
                {
                    var response = await AvailableResourceGroupDelegationsRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, location, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Gets all of the available subnet delegations for this resource group in this region.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/locations/{location}/availableDelegations
        /// Operation Id: AvailableResourceGroupDelegations_List
        /// </summary>
        /// <param name="location"> The location of the domain name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AvailableDelegation" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<AvailableDelegation> GetAvailableResourceGroupDelegations(AzureLocation location, CancellationToken cancellationToken = default)
        {
            Page<AvailableDelegation> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = AvailableResourceGroupDelegationsClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.GetAvailableResourceGroupDelegations");
                scope.Start();
                try
                {
                    var response = AvailableResourceGroupDelegationsRestClient.List(Id.SubscriptionId, Id.ResourceGroupName, location, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<AvailableDelegation> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = AvailableResourceGroupDelegationsClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.GetAvailableResourceGroupDelegations");
                scope.Start();
                try
                {
                    var response = AvailableResourceGroupDelegationsRestClient.ListNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, location, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Gets all available service aliases for this resource group in this region.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/locations/{location}/availableServiceAliases
        /// Operation Id: AvailableServiceAliases_ListByResourceGroup
        /// </summary>
        /// <param name="location"> The location. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="AvailableServiceAlias" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<AvailableServiceAlias> GetAvailableServiceAliasesByResourceGroupAsync(AzureLocation location, CancellationToken cancellationToken = default)
        {
            async Task<Page<AvailableServiceAlias>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = AvailableServiceAliasesClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.GetAvailableServiceAliasesByResourceGroup");
                scope.Start();
                try
                {
                    var response = await AvailableServiceAliasesRestClient.ListByResourceGroupAsync(Id.SubscriptionId, Id.ResourceGroupName, location, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<AvailableServiceAlias>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = AvailableServiceAliasesClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.GetAvailableServiceAliasesByResourceGroup");
                scope.Start();
                try
                {
                    var response = await AvailableServiceAliasesRestClient.ListByResourceGroupNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, location, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Gets all available service aliases for this resource group in this region.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/locations/{location}/availableServiceAliases
        /// Operation Id: AvailableServiceAliases_ListByResourceGroup
        /// </summary>
        /// <param name="location"> The location. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AvailableServiceAlias" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<AvailableServiceAlias> GetAvailableServiceAliasesByResourceGroup(AzureLocation location, CancellationToken cancellationToken = default)
        {
            Page<AvailableServiceAlias> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = AvailableServiceAliasesClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.GetAvailableServiceAliasesByResourceGroup");
                scope.Start();
                try
                {
                    var response = AvailableServiceAliasesRestClient.ListByResourceGroup(Id.SubscriptionId, Id.ResourceGroupName, location, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<AvailableServiceAlias> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = AvailableServiceAliasesClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.GetAvailableServiceAliasesByResourceGroup");
                scope.Start();
                try
                {
                    var response = AvailableServiceAliasesRestClient.ListByResourceGroupNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, location, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Returns all of the resource types that can be linked to a Private Endpoint in this subscription in this region.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/locations/{location}/availablePrivateEndpointTypes
        /// Operation Id: AvailablePrivateEndpointTypes_ListByResourceGroup
        /// </summary>
        /// <param name="location"> The location of the domain name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="AvailablePrivateEndpointType" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<AvailablePrivateEndpointType> GetAvailablePrivateEndpointTypesByResourceGroupAsync(AzureLocation location, CancellationToken cancellationToken = default)
        {
            async Task<Page<AvailablePrivateEndpointType>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = AvailablePrivateEndpointTypesClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.GetAvailablePrivateEndpointTypesByResourceGroup");
                scope.Start();
                try
                {
                    var response = await AvailablePrivateEndpointTypesRestClient.ListByResourceGroupAsync(Id.SubscriptionId, Id.ResourceGroupName, location, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<AvailablePrivateEndpointType>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = AvailablePrivateEndpointTypesClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.GetAvailablePrivateEndpointTypesByResourceGroup");
                scope.Start();
                try
                {
                    var response = await AvailablePrivateEndpointTypesRestClient.ListByResourceGroupNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, location, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Returns all of the resource types that can be linked to a Private Endpoint in this subscription in this region.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/locations/{location}/availablePrivateEndpointTypes
        /// Operation Id: AvailablePrivateEndpointTypes_ListByResourceGroup
        /// </summary>
        /// <param name="location"> The location of the domain name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AvailablePrivateEndpointType" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<AvailablePrivateEndpointType> GetAvailablePrivateEndpointTypesByResourceGroup(AzureLocation location, CancellationToken cancellationToken = default)
        {
            Page<AvailablePrivateEndpointType> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = AvailablePrivateEndpointTypesClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.GetAvailablePrivateEndpointTypesByResourceGroup");
                scope.Start();
                try
                {
                    var response = AvailablePrivateEndpointTypesRestClient.ListByResourceGroup(Id.SubscriptionId, Id.ResourceGroupName, location, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<AvailablePrivateEndpointType> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = AvailablePrivateEndpointTypesClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.GetAvailablePrivateEndpointTypesByResourceGroup");
                scope.Start();
                try
                {
                    var response = AvailablePrivateEndpointTypesRestClient.ListByResourceGroupNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, location, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Checks whether the subscription is visible to private link service in the specified resource group.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/locations/{location}/checkPrivateLinkServiceVisibility
        /// Operation Id: PrivateLinkServices_CheckPrivateLinkServiceVisibilityByResourceGroup
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="location"> The location of the domain name. </param>
        /// <param name="checkPrivateLinkServiceVisibilityRequest"> The request body of CheckPrivateLinkService API call. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation<PrivateLinkServiceVisibility>> CheckPrivateLinkServiceVisibilityByResourceGroupPrivateLinkServiceAsync(WaitUntil waitUntil, AzureLocation location, CheckPrivateLinkServiceVisibilityRequest checkPrivateLinkServiceVisibilityRequest, CancellationToken cancellationToken = default)
        {
            using var scope = PrivateLinkServicesClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.CheckPrivateLinkServiceVisibilityByResourceGroupPrivateLinkService");
            scope.Start();
            try
            {
                var response = await PrivateLinkServicesRestClient.CheckPrivateLinkServiceVisibilityByResourceGroupAsync(Id.SubscriptionId, Id.ResourceGroupName, location, checkPrivateLinkServiceVisibilityRequest, cancellationToken).ConfigureAwait(false);
                var operation = new NetworkArmOperation<PrivateLinkServiceVisibility>(new PrivateLinkServiceVisibilityOperationSource(), PrivateLinkServicesClientDiagnostics, Pipeline, PrivateLinkServicesRestClient.CreateCheckPrivateLinkServiceVisibilityByResourceGroupRequest(Id.SubscriptionId, Id.ResourceGroupName, location, checkPrivateLinkServiceVisibilityRequest).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks whether the subscription is visible to private link service in the specified resource group.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/locations/{location}/checkPrivateLinkServiceVisibility
        /// Operation Id: PrivateLinkServices_CheckPrivateLinkServiceVisibilityByResourceGroup
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="location"> The location of the domain name. </param>
        /// <param name="checkPrivateLinkServiceVisibilityRequest"> The request body of CheckPrivateLinkService API call. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation<PrivateLinkServiceVisibility> CheckPrivateLinkServiceVisibilityByResourceGroupPrivateLinkService(WaitUntil waitUntil, AzureLocation location, CheckPrivateLinkServiceVisibilityRequest checkPrivateLinkServiceVisibilityRequest, CancellationToken cancellationToken = default)
        {
            using var scope = PrivateLinkServicesClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.CheckPrivateLinkServiceVisibilityByResourceGroupPrivateLinkService");
            scope.Start();
            try
            {
                var response = PrivateLinkServicesRestClient.CheckPrivateLinkServiceVisibilityByResourceGroup(Id.SubscriptionId, Id.ResourceGroupName, location, checkPrivateLinkServiceVisibilityRequest, cancellationToken);
                var operation = new NetworkArmOperation<PrivateLinkServiceVisibility>(new PrivateLinkServiceVisibilityOperationSource(), PrivateLinkServicesClientDiagnostics, Pipeline, PrivateLinkServicesRestClient.CreateCheckPrivateLinkServiceVisibilityByResourceGroupRequest(Id.SubscriptionId, Id.ResourceGroupName, location, checkPrivateLinkServiceVisibilityRequest).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Returns all of the private link service ids that can be linked to a Private Endpoint with auto approved in this subscription in this region.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/locations/{location}/autoApprovedPrivateLinkServices
        /// Operation Id: PrivateLinkServices_ListAutoApprovedPrivateLinkServicesByResourceGroup
        /// </summary>
        /// <param name="location"> The location of the domain name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="AutoApprovedPrivateLinkService" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<AutoApprovedPrivateLinkService> GetAutoApprovedPrivateLinkServicesByResourceGroupPrivateLinkServicesAsync(AzureLocation location, CancellationToken cancellationToken = default)
        {
            async Task<Page<AutoApprovedPrivateLinkService>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = PrivateLinkServicesClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.GetAutoApprovedPrivateLinkServicesByResourceGroupPrivateLinkServices");
                scope.Start();
                try
                {
                    var response = await PrivateLinkServicesRestClient.ListAutoApprovedPrivateLinkServicesByResourceGroupAsync(Id.SubscriptionId, Id.ResourceGroupName, location, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<AutoApprovedPrivateLinkService>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = PrivateLinkServicesClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.GetAutoApprovedPrivateLinkServicesByResourceGroupPrivateLinkServices");
                scope.Start();
                try
                {
                    var response = await PrivateLinkServicesRestClient.ListAutoApprovedPrivateLinkServicesByResourceGroupNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, location, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Returns all of the private link service ids that can be linked to a Private Endpoint with auto approved in this subscription in this region.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/locations/{location}/autoApprovedPrivateLinkServices
        /// Operation Id: PrivateLinkServices_ListAutoApprovedPrivateLinkServicesByResourceGroup
        /// </summary>
        /// <param name="location"> The location of the domain name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AutoApprovedPrivateLinkService" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<AutoApprovedPrivateLinkService> GetAutoApprovedPrivateLinkServicesByResourceGroupPrivateLinkServices(AzureLocation location, CancellationToken cancellationToken = default)
        {
            Page<AutoApprovedPrivateLinkService> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = PrivateLinkServicesClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.GetAutoApprovedPrivateLinkServicesByResourceGroupPrivateLinkServices");
                scope.Start();
                try
                {
                    var response = PrivateLinkServicesRestClient.ListAutoApprovedPrivateLinkServicesByResourceGroup(Id.SubscriptionId, Id.ResourceGroupName, location, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<AutoApprovedPrivateLinkService> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = PrivateLinkServicesClientDiagnostics.CreateScope("ResourceGroupResourceExtensionClient.GetAutoApprovedPrivateLinkServicesByResourceGroupPrivateLinkServices");
                scope.Start();
                try
                {
                    var response = PrivateLinkServicesRestClient.ListAutoApprovedPrivateLinkServicesByResourceGroupNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, location, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }
    }
}
