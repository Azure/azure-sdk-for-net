// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Network
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ConfigurationPolicyGroupsOperations.
    /// </summary>
    public static partial class ConfigurationPolicyGroupsOperationsExtensions
    {
            /// <summary>
            /// Creates a ConfigurationPolicyGroup if it doesn't exist else updates the
            /// existing one.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the ConfigurationPolicyGroup.
            /// </param>
            /// <param name='vpnServerConfigurationName'>
            /// The name of the VpnServerConfiguration.
            /// </param>
            /// <param name='configurationPolicyGroupName'>
            /// The name of the ConfigurationPolicyGroup.
            /// </param>
            /// <param name='vpnServerConfigurationPolicyGroupParameters'>
            /// Parameters supplied to create or update a VpnServerConfiguration
            /// PolicyGroup.
            /// </param>
            public static VpnServerConfigurationPolicyGroup CreateOrUpdate(this IConfigurationPolicyGroupsOperations operations, string resourceGroupName, string vpnServerConfigurationName, string configurationPolicyGroupName, VpnServerConfigurationPolicyGroup vpnServerConfigurationPolicyGroupParameters)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, vpnServerConfigurationName, configurationPolicyGroupName, vpnServerConfigurationPolicyGroupParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a ConfigurationPolicyGroup if it doesn't exist else updates the
            /// existing one.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the ConfigurationPolicyGroup.
            /// </param>
            /// <param name='vpnServerConfigurationName'>
            /// The name of the VpnServerConfiguration.
            /// </param>
            /// <param name='configurationPolicyGroupName'>
            /// The name of the ConfigurationPolicyGroup.
            /// </param>
            /// <param name='vpnServerConfigurationPolicyGroupParameters'>
            /// Parameters supplied to create or update a VpnServerConfiguration
            /// PolicyGroup.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VpnServerConfigurationPolicyGroup> CreateOrUpdateAsync(this IConfigurationPolicyGroupsOperations operations, string resourceGroupName, string vpnServerConfigurationName, string configurationPolicyGroupName, VpnServerConfigurationPolicyGroup vpnServerConfigurationPolicyGroupParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, vpnServerConfigurationName, configurationPolicyGroupName, vpnServerConfigurationPolicyGroupParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a ConfigurationPolicyGroup.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the ConfigurationPolicyGroup.
            /// </param>
            /// <param name='vpnServerConfigurationName'>
            /// The name of the VpnServerConfiguration.
            /// </param>
            /// <param name='configurationPolicyGroupName'>
            /// The name of the ConfigurationPolicyGroup.
            /// </param>
            public static void Delete(this IConfigurationPolicyGroupsOperations operations, string resourceGroupName, string vpnServerConfigurationName, string configurationPolicyGroupName)
            {
                operations.DeleteAsync(resourceGroupName, vpnServerConfigurationName, configurationPolicyGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a ConfigurationPolicyGroup.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the ConfigurationPolicyGroup.
            /// </param>
            /// <param name='vpnServerConfigurationName'>
            /// The name of the VpnServerConfiguration.
            /// </param>
            /// <param name='configurationPolicyGroupName'>
            /// The name of the ConfigurationPolicyGroup.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IConfigurationPolicyGroupsOperations operations, string resourceGroupName, string vpnServerConfigurationName, string configurationPolicyGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, vpnServerConfigurationName, configurationPolicyGroupName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Retrieves the details of a ConfigurationPolicyGroup.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the VpnServerConfiguration.
            /// </param>
            /// <param name='vpnServerConfigurationName'>
            /// The name of the VpnServerConfiguration.
            /// </param>
            /// <param name='configurationPolicyGroupName'>
            /// The name of the ConfigurationPolicyGroup being retrieved.
            /// </param>
            public static VpnServerConfigurationPolicyGroup Get(this IConfigurationPolicyGroupsOperations operations, string resourceGroupName, string vpnServerConfigurationName, string configurationPolicyGroupName)
            {
                return operations.GetAsync(resourceGroupName, vpnServerConfigurationName, configurationPolicyGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the details of a ConfigurationPolicyGroup.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the VpnServerConfiguration.
            /// </param>
            /// <param name='vpnServerConfigurationName'>
            /// The name of the VpnServerConfiguration.
            /// </param>
            /// <param name='configurationPolicyGroupName'>
            /// The name of the ConfigurationPolicyGroup being retrieved.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VpnServerConfigurationPolicyGroup> GetAsync(this IConfigurationPolicyGroupsOperations operations, string resourceGroupName, string vpnServerConfigurationName, string configurationPolicyGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, vpnServerConfigurationName, configurationPolicyGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists all the configurationPolicyGroups in a resource group for a
            /// vpnServerConfiguration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the VpnServerConfiguration.
            /// </param>
            /// <param name='vpnServerConfigurationName'>
            /// The name of the VpnServerConfiguration.
            /// </param>
            public static IPage<VpnServerConfigurationPolicyGroup> ListByVpnServerConfiguration(this IConfigurationPolicyGroupsOperations operations, string resourceGroupName, string vpnServerConfigurationName)
            {
                return operations.ListByVpnServerConfigurationAsync(resourceGroupName, vpnServerConfigurationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all the configurationPolicyGroups in a resource group for a
            /// vpnServerConfiguration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the VpnServerConfiguration.
            /// </param>
            /// <param name='vpnServerConfigurationName'>
            /// The name of the VpnServerConfiguration.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<VpnServerConfigurationPolicyGroup>> ListByVpnServerConfigurationAsync(this IConfigurationPolicyGroupsOperations operations, string resourceGroupName, string vpnServerConfigurationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByVpnServerConfigurationWithHttpMessagesAsync(resourceGroupName, vpnServerConfigurationName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a ConfigurationPolicyGroup if it doesn't exist else updates the
            /// existing one.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the ConfigurationPolicyGroup.
            /// </param>
            /// <param name='vpnServerConfigurationName'>
            /// The name of the VpnServerConfiguration.
            /// </param>
            /// <param name='configurationPolicyGroupName'>
            /// The name of the ConfigurationPolicyGroup.
            /// </param>
            /// <param name='vpnServerConfigurationPolicyGroupParameters'>
            /// Parameters supplied to create or update a VpnServerConfiguration
            /// PolicyGroup.
            /// </param>
            public static VpnServerConfigurationPolicyGroup BeginCreateOrUpdate(this IConfigurationPolicyGroupsOperations operations, string resourceGroupName, string vpnServerConfigurationName, string configurationPolicyGroupName, VpnServerConfigurationPolicyGroup vpnServerConfigurationPolicyGroupParameters)
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, vpnServerConfigurationName, configurationPolicyGroupName, vpnServerConfigurationPolicyGroupParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a ConfigurationPolicyGroup if it doesn't exist else updates the
            /// existing one.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the ConfigurationPolicyGroup.
            /// </param>
            /// <param name='vpnServerConfigurationName'>
            /// The name of the VpnServerConfiguration.
            /// </param>
            /// <param name='configurationPolicyGroupName'>
            /// The name of the ConfigurationPolicyGroup.
            /// </param>
            /// <param name='vpnServerConfigurationPolicyGroupParameters'>
            /// Parameters supplied to create or update a VpnServerConfiguration
            /// PolicyGroup.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VpnServerConfigurationPolicyGroup> BeginCreateOrUpdateAsync(this IConfigurationPolicyGroupsOperations operations, string resourceGroupName, string vpnServerConfigurationName, string configurationPolicyGroupName, VpnServerConfigurationPolicyGroup vpnServerConfigurationPolicyGroupParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, vpnServerConfigurationName, configurationPolicyGroupName, vpnServerConfigurationPolicyGroupParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a ConfigurationPolicyGroup.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the ConfigurationPolicyGroup.
            /// </param>
            /// <param name='vpnServerConfigurationName'>
            /// The name of the VpnServerConfiguration.
            /// </param>
            /// <param name='configurationPolicyGroupName'>
            /// The name of the ConfigurationPolicyGroup.
            /// </param>
            public static void BeginDelete(this IConfigurationPolicyGroupsOperations operations, string resourceGroupName, string vpnServerConfigurationName, string configurationPolicyGroupName)
            {
                operations.BeginDeleteAsync(resourceGroupName, vpnServerConfigurationName, configurationPolicyGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a ConfigurationPolicyGroup.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the ConfigurationPolicyGroup.
            /// </param>
            /// <param name='vpnServerConfigurationName'>
            /// The name of the VpnServerConfiguration.
            /// </param>
            /// <param name='configurationPolicyGroupName'>
            /// The name of the ConfigurationPolicyGroup.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IConfigurationPolicyGroupsOperations operations, string resourceGroupName, string vpnServerConfigurationName, string configurationPolicyGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, vpnServerConfigurationName, configurationPolicyGroupName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Lists all the configurationPolicyGroups in a resource group for a
            /// vpnServerConfiguration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<VpnServerConfigurationPolicyGroup> ListByVpnServerConfigurationNext(this IConfigurationPolicyGroupsOperations operations, string nextPageLink)
            {
                return operations.ListByVpnServerConfigurationNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all the configurationPolicyGroups in a resource group for a
            /// vpnServerConfiguration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<VpnServerConfigurationPolicyGroup>> ListByVpnServerConfigurationNextAsync(this IConfigurationPolicyGroupsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByVpnServerConfigurationNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
