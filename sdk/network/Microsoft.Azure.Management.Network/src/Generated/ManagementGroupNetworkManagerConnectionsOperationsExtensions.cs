// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Network
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ManagementGroupNetworkManagerConnectionsOperations.
    /// </summary>
    public static partial class ManagementGroupNetworkManagerConnectionsOperationsExtensions
    {
            /// <summary>
            /// Create a network manager connection on this management group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Network manager connection to be created/updated.
            /// </param>
            /// <param name='managementGroupId'>
            /// The management group Id which uniquely identify the Microsoft Azure
            /// management group.
            /// </param>
            /// <param name='networkManagerConnectionName'>
            /// Name for the network manager connection.
            /// </param>
            public static NetworkManagerConnection CreateOrUpdate(this IManagementGroupNetworkManagerConnectionsOperations operations, NetworkManagerConnection parameters, string managementGroupId, string networkManagerConnectionName)
            {
                return operations.CreateOrUpdateAsync(parameters, managementGroupId, networkManagerConnectionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a network manager connection on this management group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Network manager connection to be created/updated.
            /// </param>
            /// <param name='managementGroupId'>
            /// The management group Id which uniquely identify the Microsoft Azure
            /// management group.
            /// </param>
            /// <param name='networkManagerConnectionName'>
            /// Name for the network manager connection.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NetworkManagerConnection> CreateOrUpdateAsync(this IManagementGroupNetworkManagerConnectionsOperations operations, NetworkManagerConnection parameters, string managementGroupId, string networkManagerConnectionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(parameters, managementGroupId, networkManagerConnectionName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a specified connection created by this management group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='managementGroupId'>
            /// The management group Id which uniquely identify the Microsoft Azure
            /// management group.
            /// </param>
            /// <param name='networkManagerConnectionName'>
            /// Name for the network manager connection.
            /// </param>
            public static NetworkManagerConnection Get(this IManagementGroupNetworkManagerConnectionsOperations operations, string managementGroupId, string networkManagerConnectionName)
            {
                return operations.GetAsync(managementGroupId, networkManagerConnectionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a specified connection created by this management group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='managementGroupId'>
            /// The management group Id which uniquely identify the Microsoft Azure
            /// management group.
            /// </param>
            /// <param name='networkManagerConnectionName'>
            /// Name for the network manager connection.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NetworkManagerConnection> GetAsync(this IManagementGroupNetworkManagerConnectionsOperations operations, string managementGroupId, string networkManagerConnectionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(managementGroupId, networkManagerConnectionName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete specified pending connection created by this management group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='managementGroupId'>
            /// The management group Id which uniquely identify the Microsoft Azure
            /// management group.
            /// </param>
            /// <param name='networkManagerConnectionName'>
            /// Name for the network manager connection.
            /// </param>
            public static void Delete(this IManagementGroupNetworkManagerConnectionsOperations operations, string managementGroupId, string networkManagerConnectionName)
            {
                operations.DeleteAsync(managementGroupId, networkManagerConnectionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete specified pending connection created by this management group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='managementGroupId'>
            /// The management group Id which uniquely identify the Microsoft Azure
            /// management group.
            /// </param>
            /// <param name='networkManagerConnectionName'>
            /// Name for the network manager connection.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IManagementGroupNetworkManagerConnectionsOperations operations, string managementGroupId, string networkManagerConnectionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(managementGroupId, networkManagerConnectionName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// List all network manager connections created by this management group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='managementGroupId'>
            /// The management group Id which uniquely identify the Microsoft Azure
            /// management group.
            /// </param>
            /// <param name='top'>
            /// An optional query parameter which specifies the maximum number of records
            /// to be returned by the server.
            /// </param>
            /// <param name='skipToken'>
            /// SkipToken is only used if a previous operation returned a partial result.
            /// If a previous response contains a nextLink element, the value of the
            /// nextLink element will include a skipToken parameter that specifies a
            /// starting point to use for subsequent calls.
            /// </param>
            public static IPage<NetworkManagerConnection> List(this IManagementGroupNetworkManagerConnectionsOperations operations, string managementGroupId, int? top = default(int?), string skipToken = default(string))
            {
                return operations.ListAsync(managementGroupId, top, skipToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all network manager connections created by this management group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='managementGroupId'>
            /// The management group Id which uniquely identify the Microsoft Azure
            /// management group.
            /// </param>
            /// <param name='top'>
            /// An optional query parameter which specifies the maximum number of records
            /// to be returned by the server.
            /// </param>
            /// <param name='skipToken'>
            /// SkipToken is only used if a previous operation returned a partial result.
            /// If a previous response contains a nextLink element, the value of the
            /// nextLink element will include a skipToken parameter that specifies a
            /// starting point to use for subsequent calls.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<NetworkManagerConnection>> ListAsync(this IManagementGroupNetworkManagerConnectionsOperations operations, string managementGroupId, int? top = default(int?), string skipToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(managementGroupId, top, skipToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all network manager connections created by this management group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<NetworkManagerConnection> ListNext(this IManagementGroupNetworkManagerConnectionsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all network manager connections created by this management group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<NetworkManagerConnection>> ListNextAsync(this IManagementGroupNetworkManagerConnectionsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
