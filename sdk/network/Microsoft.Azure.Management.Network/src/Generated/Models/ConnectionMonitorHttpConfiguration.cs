// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Network.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Describes the HTTP configuration.
    /// </summary>
    public partial class ConnectionMonitorHttpConfiguration
    {
        /// <summary>
        /// Initializes a new instance of the
        /// ConnectionMonitorHttpConfiguration class.
        /// </summary>
        public ConnectionMonitorHttpConfiguration()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// ConnectionMonitorHttpConfiguration class.
        /// </summary>
        /// <param name="port">The port to connect to.</param>
        /// <param name="method">The HTTP method to use. Possible values
        /// include: 'Get', 'Post'</param>
        /// <param name="path">The path component of the URI. For instance,
        /// "/dir1/dir2".</param>
        /// <param name="requestHeaders">The HTTP headers to transmit with the
        /// request.</param>
        /// <param name="validStatusCodeRanges">HTTP status codes to consider
        /// successful. For instance, "2xx,301-304,418".</param>
        /// <param name="preferHTTPS">Value indicating whether HTTPS is
        /// preferred over HTTP in cases where the choice is not
        /// explicit.</param>
        public ConnectionMonitorHttpConfiguration(int? port = default(int?), string method = default(string), string path = default(string), IList<HTTPHeader> requestHeaders = default(IList<HTTPHeader>), IList<string> validStatusCodeRanges = default(IList<string>), bool? preferHTTPS = default(bool?))
        {
            Port = port;
            Method = method;
            Path = path;
            RequestHeaders = requestHeaders;
            ValidStatusCodeRanges = validStatusCodeRanges;
            PreferHTTPS = preferHTTPS;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the port to connect to.
        /// </summary>
        [JsonProperty(PropertyName = "port")]
        public int? Port { get; set; }

        /// <summary>
        /// Gets or sets the HTTP method to use. Possible values include:
        /// 'Get', 'Post'
        /// </summary>
        [JsonProperty(PropertyName = "method")]
        public string Method { get; set; }

        /// <summary>
        /// Gets or sets the path component of the URI. For instance,
        /// "/dir1/dir2".
        /// </summary>
        [JsonProperty(PropertyName = "path")]
        public string Path { get; set; }

        /// <summary>
        /// Gets or sets the HTTP headers to transmit with the request.
        /// </summary>
        [JsonProperty(PropertyName = "requestHeaders")]
        public IList<HTTPHeader> RequestHeaders { get; set; }

        /// <summary>
        /// Gets or sets HTTP status codes to consider successful. For
        /// instance, "2xx,301-304,418".
        /// </summary>
        [JsonProperty(PropertyName = "validStatusCodeRanges")]
        public IList<string> ValidStatusCodeRanges { get; set; }

        /// <summary>
        /// Gets or sets value indicating whether HTTPS is preferred over HTTP
        /// in cases where the choice is not explicit.
        /// </summary>
        [JsonProperty(PropertyName = "preferHTTPS")]
        public bool? PreferHTTPS { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Port != null)
            {
                if (Port > 65535)
                {
                    throw new ValidationException(ValidationRules.InclusiveMaximum, "Port", 65535);
                }
                if (Port < 0)
                {
                    throw new ValidationException(ValidationRules.InclusiveMinimum, "Port", 0);
                }
            }
        }
    }
}
