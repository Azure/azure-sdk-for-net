// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Network.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// List of all Static Routes.
    /// </summary>
    public partial class StaticRoute
    {
        /// <summary>
        /// Initializes a new instance of the StaticRoute class.
        /// </summary>
        public StaticRoute()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the StaticRoute class.
        /// </summary>
        /// <param name="name">The name of the StaticRoute that is unique
        /// within a VnetRoute.</param>
        /// <param name="addressPrefixes">List of all address prefixes.</param>
        /// <param name="nextHopIpAddress">The ip address of the next
        /// hop.</param>
        public StaticRoute(string name = default(string), IList<string> addressPrefixes = default(IList<string>), string nextHopIpAddress = default(string))
        {
            Name = name;
            AddressPrefixes = addressPrefixes;
            NextHopIpAddress = nextHopIpAddress;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the name of the StaticRoute that is unique within a
        /// VnetRoute.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets list of all address prefixes.
        /// </summary>
        [JsonProperty(PropertyName = "addressPrefixes")]
        public IList<string> AddressPrefixes { get; set; }

        /// <summary>
        /// Gets or sets the ip address of the next hop.
        /// </summary>
        [JsonProperty(PropertyName = "nextHopIpAddress")]
        public string NextHopIpAddress { get; set; }

    }
}
