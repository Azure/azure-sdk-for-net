// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Network.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// VirtualHub Resource.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class VirtualHub : Resource
    {
        /// <summary>
        /// Initializes a new instance of the VirtualHub class.
        /// </summary>
        public VirtualHub()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VirtualHub class.
        /// </summary>
        /// <param name="id">Resource ID.</param>
        /// <param name="name">Resource name.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="location">Resource location.</param>
        /// <param name="tags">Resource tags.</param>
        /// <param name="virtualWan">The VirtualWAN to which the VirtualHub
        /// belongs.</param>
        /// <param name="vpnGateway">The VpnGateway associated with this
        /// VirtualHub.</param>
        /// <param name="p2SVpnGateway">The P2SVpnGateway associated with this
        /// VirtualHub.</param>
        /// <param name="expressRouteGateway">The expressRouteGateway
        /// associated with this VirtualHub.</param>
        /// <param name="azureFirewall">The azureFirewall associated with this
        /// VirtualHub.</param>
        /// <param name="securityPartnerProvider">The securityPartnerProvider
        /// associated with this VirtualHub.</param>
        /// <param name="addressPrefix">Address-prefix for this
        /// VirtualHub.</param>
        /// <param name="routeTable">The routeTable associated with this
        /// virtual hub.</param>
        /// <param name="provisioningState">The provisioning state of the
        /// virtual hub resource. Possible values include: 'Succeeded',
        /// 'Updating', 'Deleting', 'Failed'</param>
        /// <param name="securityProviderName">The Security Provider
        /// name.</param>
        /// <param name="virtualHubRouteTableV2s">List of all virtual hub route
        /// table v2s associated with this VirtualHub.</param>
        /// <param name="sku">The sku of this VirtualHub.</param>
        /// <param name="routingState">The routing state. Possible values
        /// include: 'None', 'Provisioned', 'Provisioning', 'Failed'</param>
        /// <param name="bgpConnections">List of references to Bgp
        /// Connections.</param>
        /// <param name="ipConfigurations">List of references to
        /// IpConfigurations.</param>
        /// <param name="virtualRouterAsn">VirtualRouter ASN.</param>
        /// <param name="virtualRouterIps">VirtualRouter IPs.</param>
        /// <param name="etag">A unique read-only string that changes whenever
        /// the resource is updated.</param>
        public VirtualHub(string id = default(string), string name = default(string), string type = default(string), string location = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), SubResource virtualWan = default(SubResource), SubResource vpnGateway = default(SubResource), SubResource p2SVpnGateway = default(SubResource), SubResource expressRouteGateway = default(SubResource), SubResource azureFirewall = default(SubResource), SubResource securityPartnerProvider = default(SubResource), string addressPrefix = default(string), VirtualHubRouteTable routeTable = default(VirtualHubRouteTable), string provisioningState = default(string), string securityProviderName = default(string), IList<VirtualHubRouteTableV2> virtualHubRouteTableV2s = default(IList<VirtualHubRouteTableV2>), string sku = default(string), string routingState = default(string), IList<SubResource> bgpConnections = default(IList<SubResource>), IList<SubResource> ipConfigurations = default(IList<SubResource>), long? virtualRouterAsn = default(long?), IList<string> virtualRouterIps = default(IList<string>), string etag = default(string))
            : base(id, name, type, location, tags)
        {
            VirtualWan = virtualWan;
            VpnGateway = vpnGateway;
            P2SVpnGateway = p2SVpnGateway;
            ExpressRouteGateway = expressRouteGateway;
            AzureFirewall = azureFirewall;
            SecurityPartnerProvider = securityPartnerProvider;
            AddressPrefix = addressPrefix;
            RouteTable = routeTable;
            ProvisioningState = provisioningState;
            SecurityProviderName = securityProviderName;
            VirtualHubRouteTableV2s = virtualHubRouteTableV2s;
            Sku = sku;
            RoutingState = routingState;
            BgpConnections = bgpConnections;
            IpConfigurations = ipConfigurations;
            VirtualRouterAsn = virtualRouterAsn;
            VirtualRouterIps = virtualRouterIps;
            Etag = etag;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the VirtualWAN to which the VirtualHub belongs.
        /// </summary>
        [JsonProperty(PropertyName = "properties.virtualWan")]
        public SubResource VirtualWan { get; set; }

        /// <summary>
        /// Gets or sets the VpnGateway associated with this VirtualHub.
        /// </summary>
        [JsonProperty(PropertyName = "properties.vpnGateway")]
        public SubResource VpnGateway { get; set; }

        /// <summary>
        /// Gets or sets the P2SVpnGateway associated with this VirtualHub.
        /// </summary>
        [JsonProperty(PropertyName = "properties.p2SVpnGateway")]
        public SubResource P2SVpnGateway { get; set; }

        /// <summary>
        /// Gets or sets the expressRouteGateway associated with this
        /// VirtualHub.
        /// </summary>
        [JsonProperty(PropertyName = "properties.expressRouteGateway")]
        public SubResource ExpressRouteGateway { get; set; }

        /// <summary>
        /// Gets or sets the azureFirewall associated with this VirtualHub.
        /// </summary>
        [JsonProperty(PropertyName = "properties.azureFirewall")]
        public SubResource AzureFirewall { get; set; }

        /// <summary>
        /// Gets or sets the securityPartnerProvider associated with this
        /// VirtualHub.
        /// </summary>
        [JsonProperty(PropertyName = "properties.securityPartnerProvider")]
        public SubResource SecurityPartnerProvider { get; set; }

        /// <summary>
        /// Gets or sets address-prefix for this VirtualHub.
        /// </summary>
        [JsonProperty(PropertyName = "properties.addressPrefix")]
        public string AddressPrefix { get; set; }

        /// <summary>
        /// Gets or sets the routeTable associated with this virtual hub.
        /// </summary>
        [JsonProperty(PropertyName = "properties.routeTable")]
        public VirtualHubRouteTable RouteTable { get; set; }

        /// <summary>
        /// Gets the provisioning state of the virtual hub resource. Possible
        /// values include: 'Succeeded', 'Updating', 'Deleting', 'Failed'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets or sets the Security Provider name.
        /// </summary>
        [JsonProperty(PropertyName = "properties.securityProviderName")]
        public string SecurityProviderName { get; set; }

        /// <summary>
        /// Gets or sets list of all virtual hub route table v2s associated
        /// with this VirtualHub.
        /// </summary>
        [JsonProperty(PropertyName = "properties.virtualHubRouteTableV2s")]
        public IList<VirtualHubRouteTableV2> VirtualHubRouteTableV2s { get; set; }

        /// <summary>
        /// Gets or sets the sku of this VirtualHub.
        /// </summary>
        [JsonProperty(PropertyName = "properties.sku")]
        public string Sku { get; set; }

        /// <summary>
        /// Gets or sets the routing state. Possible values include: 'None',
        /// 'Provisioned', 'Provisioning', 'Failed'
        /// </summary>
        [JsonProperty(PropertyName = "properties.routingState")]
        public string RoutingState { get; set; }

        /// <summary>
        /// Gets list of references to Bgp Connections.
        /// </summary>
        [JsonProperty(PropertyName = "properties.bgpConnections")]
        public IList<SubResource> BgpConnections { get; private set; }

        /// <summary>
        /// Gets list of references to IpConfigurations.
        /// </summary>
        [JsonProperty(PropertyName = "properties.ipConfigurations")]
        public IList<SubResource> IpConfigurations { get; private set; }

        /// <summary>
        /// Gets or sets virtualRouter ASN.
        /// </summary>
        [JsonProperty(PropertyName = "properties.virtualRouterAsn")]
        public long? VirtualRouterAsn { get; set; }

        /// <summary>
        /// Gets or sets virtualRouter IPs.
        /// </summary>
        [JsonProperty(PropertyName = "properties.virtualRouterIps")]
        public IList<string> VirtualRouterIps { get; set; }

        /// <summary>
        /// Gets a unique read-only string that changes whenever the resource
        /// is updated.
        /// </summary>
        [JsonProperty(PropertyName = "etag")]
        public string Etag { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (VirtualRouterAsn > 4294967295)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "VirtualRouterAsn", 4294967295);
            }
            if (VirtualRouterAsn < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "VirtualRouterAsn", 0);
            }
        }
    }
}
