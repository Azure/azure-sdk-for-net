// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Network.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Action to be taken on a route matching a RouteMap criterion.
    /// </summary>
    public partial class Action
    {
        /// <summary>
        /// Initializes a new instance of the Action class.
        /// </summary>
        public Action()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Action class.
        /// </summary>
        /// <param name="type">Type of action to be taken. Supported types are
        /// 'Remove', 'Add', 'Replace', and 'Drop.'. Possible values include:
        /// 'Unknown', 'Remove', 'Add', 'Replace', 'Drop'</param>
        /// <param name="parameters">List of parameters relevant to the
        /// action.For instance if type is drop then parameters has list of
        /// prefixes to be dropped.If type is add, parameters would have list
        /// of ASN numbers to be added</param>
        public Action(string type = default(string), IList<Parameter> parameters = default(IList<Parameter>))
        {
            Type = type;
            Parameters = parameters;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets type of action to be taken. Supported types are
        /// 'Remove', 'Add', 'Replace', and 'Drop.'. Possible values include:
        /// 'Unknown', 'Remove', 'Add', 'Replace', 'Drop'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets list of parameters relevant to the action.For instance
        /// if type is drop then parameters has list of prefixes to be
        /// dropped.If type is add, parameters would have list of ASN numbers
        /// to be added
        /// </summary>
        [JsonProperty(PropertyName = "parameters")]
        public IList<Parameter> Parameters { get; set; }

    }
}
