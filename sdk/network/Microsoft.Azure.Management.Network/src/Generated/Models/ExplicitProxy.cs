// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Network.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Explicit Proxy Settings in Firewall Policy.
    /// </summary>
    public partial class ExplicitProxy
    {
        /// <summary>
        /// Initializes a new instance of the ExplicitProxy class.
        /// </summary>
        public ExplicitProxy()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ExplicitProxy class.
        /// </summary>
        /// <param name="enableExplicitProxy">When set to true, explicit proxy
        /// mode is enabled.</param>
        /// <param name="httpPort">Port number for explicit proxy http
        /// protocol, cannot be greater than 64000.</param>
        /// <param name="httpsPort">Port number for explicit proxy https
        /// protocol, cannot be greater than 64000.</param>
        /// <param name="enablePacFile">When set to true, pac file port and url
        /// needs to be provided.</param>
        /// <param name="pacFilePort">Port number for firewall to serve PAC
        /// file.</param>
        /// <param name="pacFile">SAS URL for PAC file.</param>
        public ExplicitProxy(bool? enableExplicitProxy = default(bool?), int? httpPort = default(int?), int? httpsPort = default(int?), bool? enablePacFile = default(bool?), int? pacFilePort = default(int?), string pacFile = default(string))
        {
            EnableExplicitProxy = enableExplicitProxy;
            HttpPort = httpPort;
            HttpsPort = httpsPort;
            EnablePacFile = enablePacFile;
            PacFilePort = pacFilePort;
            PacFile = pacFile;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets when set to true, explicit proxy mode is enabled.
        /// </summary>
        [JsonProperty(PropertyName = "enableExplicitProxy")]
        public bool? EnableExplicitProxy { get; set; }

        /// <summary>
        /// Gets or sets port number for explicit proxy http protocol, cannot
        /// be greater than 64000.
        /// </summary>
        [JsonProperty(PropertyName = "httpPort")]
        public int? HttpPort { get; set; }

        /// <summary>
        /// Gets or sets port number for explicit proxy https protocol, cannot
        /// be greater than 64000.
        /// </summary>
        [JsonProperty(PropertyName = "httpsPort")]
        public int? HttpsPort { get; set; }

        /// <summary>
        /// Gets or sets when set to true, pac file port and url needs to be
        /// provided.
        /// </summary>
        [JsonProperty(PropertyName = "enablePacFile")]
        public bool? EnablePacFile { get; set; }

        /// <summary>
        /// Gets or sets port number for firewall to serve PAC file.
        /// </summary>
        [JsonProperty(PropertyName = "pacFilePort")]
        public int? PacFilePort { get; set; }

        /// <summary>
        /// Gets or sets SAS URL for PAC file.
        /// </summary>
        [JsonProperty(PropertyName = "pacFile")]
        public string PacFile { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (HttpPort > 64000)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "HttpPort", 64000);
            }
            if (HttpPort < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "HttpPort", 0);
            }
            if (HttpsPort > 64000)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "HttpsPort", 64000);
            }
            if (HttpsPort < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "HttpsPort", 0);
            }
            if (PacFilePort > 64000)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "PacFilePort", 64000);
            }
            if (PacFilePort < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "PacFilePort", 0);
            }
        }
    }
}
