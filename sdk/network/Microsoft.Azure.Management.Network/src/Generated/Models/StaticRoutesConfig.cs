// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Network.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Configuration for static routes on this HubVnetConnectionConfiguration
    /// for static routes on this HubVnetConnection.
    /// </summary>
    public partial class StaticRoutesConfig
    {
        /// <summary>
        /// Initializes a new instance of the StaticRoutesConfig class.
        /// </summary>
        public StaticRoutesConfig()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the StaticRoutesConfig class.
        /// </summary>
        /// <param name="propagateStaticRoutes">Boolean indicating whether
        /// static routes on this connection are automatically propagate to
        /// route tables which this connection propagates to.</param>
        /// <param name="vnetLocalRouteOverrideCriteria">Parameter determining
        /// whether NVA in spoke vnet is bypassed for traffic with destination
        /// in spoke. Possible values include: 'Contains', 'Equal'</param>
        public StaticRoutesConfig(bool? propagateStaticRoutes = default(bool?), string vnetLocalRouteOverrideCriteria = default(string))
        {
            PropagateStaticRoutes = propagateStaticRoutes;
            VnetLocalRouteOverrideCriteria = vnetLocalRouteOverrideCriteria;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets boolean indicating whether static routes on this connection
        /// are automatically propagate to route tables which this connection
        /// propagates to.
        /// </summary>
        [JsonProperty(PropertyName = "propagateStaticRoutes")]
        public bool? PropagateStaticRoutes { get; private set; }

        /// <summary>
        /// Gets or sets parameter determining whether NVA in spoke vnet is
        /// bypassed for traffic with destination in spoke. Possible values
        /// include: 'Contains', 'Equal'
        /// </summary>
        [JsonProperty(PropertyName = "vnetLocalRouteOverrideCriteria")]
        public string VnetLocalRouteOverrideCriteria { get; set; }

    }
}
