// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Network.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Response for ApplicationGatewayAvailableSslOptions API service call.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class ApplicationGatewayAvailableSslOptions : Resource
    {
        /// <summary>
        /// Initializes a new instance of the
        /// ApplicationGatewayAvailableSslOptions class.
        /// </summary>
        public ApplicationGatewayAvailableSslOptions()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// ApplicationGatewayAvailableSslOptions class.
        /// </summary>
        /// <param name="id">Resource ID.</param>
        /// <param name="name">Resource name.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="location">Resource location.</param>
        /// <param name="tags">Resource tags.</param>
        /// <param name="predefinedPolicies">List of available Ssl predefined
        /// policy.</param>
        /// <param name="defaultPolicy">Name of the Ssl predefined policy
        /// applied by default to application gateway. Possible values include:
        /// 'AppGwSslPolicy20150501', 'AppGwSslPolicy20170401',
        /// 'AppGwSslPolicy20170401S'</param>
        /// <param name="availableCipherSuites">List of available Ssl cipher
        /// suites.</param>
        /// <param name="availableProtocols">List of available Ssl
        /// protocols.</param>
        public ApplicationGatewayAvailableSslOptions(string id = default(string), string name = default(string), string type = default(string), string location = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), IList<SubResource> predefinedPolicies = default(IList<SubResource>), string defaultPolicy = default(string), IList<string> availableCipherSuites = default(IList<string>), IList<string> availableProtocols = default(IList<string>))
            : base(id, name, type, location, tags)
        {
            PredefinedPolicies = predefinedPolicies;
            DefaultPolicy = defaultPolicy;
            AvailableCipherSuites = availableCipherSuites;
            AvailableProtocols = availableProtocols;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets list of available Ssl predefined policy.
        /// </summary>
        [JsonProperty(PropertyName = "properties.predefinedPolicies")]
        public IList<SubResource> PredefinedPolicies { get; set; }

        /// <summary>
        /// Gets or sets name of the Ssl predefined policy applied by default
        /// to application gateway. Possible values include:
        /// 'AppGwSslPolicy20150501', 'AppGwSslPolicy20170401',
        /// 'AppGwSslPolicy20170401S'
        /// </summary>
        [JsonProperty(PropertyName = "properties.defaultPolicy")]
        public string DefaultPolicy { get; set; }

        /// <summary>
        /// Gets or sets list of available Ssl cipher suites.
        /// </summary>
        [JsonProperty(PropertyName = "properties.availableCipherSuites")]
        public IList<string> AvailableCipherSuites { get; set; }

        /// <summary>
        /// Gets or sets list of available Ssl protocols.
        /// </summary>
        [JsonProperty(PropertyName = "properties.availableProtocols")]
        public IList<string> AvailableProtocols { get; set; }

    }
}
