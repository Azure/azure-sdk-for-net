// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Network.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// VirtualRouter Resource.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class VirtualRouter : Resource
    {
        /// <summary>
        /// Initializes a new instance of the VirtualRouter class.
        /// </summary>
        public VirtualRouter()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VirtualRouter class.
        /// </summary>
        /// <param name="id">Resource ID.</param>
        /// <param name="name">Resource name.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="location">Resource location.</param>
        /// <param name="tags">Resource tags.</param>
        /// <param name="virtualRouterAsn">VirtualRouter ASN.</param>
        /// <param name="virtualRouterIps">VirtualRouter IPs.</param>
        /// <param name="hostedSubnet">The Subnet on which VirtualRouter is
        /// hosted.</param>
        /// <param name="hostedGateway">The Gateway on which VirtualRouter is
        /// hosted.</param>
        /// <param name="peerings">List of references to
        /// VirtualRouterPeerings.</param>
        /// <param name="provisioningState">The provisioning state of the
        /// resource. Possible values include: 'Succeeded', 'Updating',
        /// 'Deleting', 'Failed'</param>
        /// <param name="etag">A unique read-only string that changes whenever
        /// the resource is updated.</param>
        public VirtualRouter(string id = default(string), string name = default(string), string type = default(string), string location = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), long? virtualRouterAsn = default(long?), IList<string> virtualRouterIps = default(IList<string>), SubResource hostedSubnet = default(SubResource), SubResource hostedGateway = default(SubResource), IList<SubResource> peerings = default(IList<SubResource>), string provisioningState = default(string), string etag = default(string))
            : base(id, name, type, location, tags)
        {
            VirtualRouterAsn = virtualRouterAsn;
            VirtualRouterIps = virtualRouterIps;
            HostedSubnet = hostedSubnet;
            HostedGateway = hostedGateway;
            Peerings = peerings;
            ProvisioningState = provisioningState;
            Etag = etag;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets virtualRouter ASN.
        /// </summary>
        [JsonProperty(PropertyName = "properties.virtualRouterAsn")]
        public long? VirtualRouterAsn { get; set; }

        /// <summary>
        /// Gets or sets virtualRouter IPs.
        /// </summary>
        [JsonProperty(PropertyName = "properties.virtualRouterIps")]
        public IList<string> VirtualRouterIps { get; set; }

        /// <summary>
        /// Gets or sets the Subnet on which VirtualRouter is hosted.
        /// </summary>
        [JsonProperty(PropertyName = "properties.hostedSubnet")]
        public SubResource HostedSubnet { get; set; }

        /// <summary>
        /// Gets or sets the Gateway on which VirtualRouter is hosted.
        /// </summary>
        [JsonProperty(PropertyName = "properties.hostedGateway")]
        public SubResource HostedGateway { get; set; }

        /// <summary>
        /// Gets list of references to VirtualRouterPeerings.
        /// </summary>
        [JsonProperty(PropertyName = "properties.peerings")]
        public IList<SubResource> Peerings { get; private set; }

        /// <summary>
        /// Gets the provisioning state of the resource. Possible values
        /// include: 'Succeeded', 'Updating', 'Deleting', 'Failed'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets a unique read-only string that changes whenever the resource
        /// is updated.
        /// </summary>
        [JsonProperty(PropertyName = "etag")]
        public string Etag { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (VirtualRouterAsn > 4294967295)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "VirtualRouterAsn", 4294967295);
            }
            if (VirtualRouterAsn < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "VirtualRouterAsn", 0);
            }
        }
    }
}
