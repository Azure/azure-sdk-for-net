// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Network.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Connection state snapshot.
    /// </summary>
    public partial class ConnectionStateSnapshot
    {
        /// <summary>
        /// Initializes a new instance of the ConnectionStateSnapshot class.
        /// </summary>
        public ConnectionStateSnapshot()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ConnectionStateSnapshot class.
        /// </summary>
        /// <param name="connectionState">The connection state. Possible values
        /// include: 'Reachable', 'Unreachable', 'Unknown'</param>
        /// <param name="startTime">The start time of the connection
        /// snapshot.</param>
        /// <param name="endTime">The end time of the connection
        /// snapshot.</param>
        /// <param name="evaluationState">Connectivity analysis evaluation
        /// state. Possible values include: 'NotStarted', 'InProgress',
        /// 'Completed'</param>
        /// <param name="avgLatencyInMs">Average latency in ms.</param>
        /// <param name="minLatencyInMs">Minimum latency in ms.</param>
        /// <param name="maxLatencyInMs">Maximum latency in ms.</param>
        /// <param name="probesSent">The number of sent probes.</param>
        /// <param name="probesFailed">The number of failed probes.</param>
        /// <param name="hops">List of hops between the source and the
        /// destination.</param>
        public ConnectionStateSnapshot(string connectionState = default(string), System.DateTime? startTime = default(System.DateTime?), System.DateTime? endTime = default(System.DateTime?), string evaluationState = default(string), long? avgLatencyInMs = default(long?), long? minLatencyInMs = default(long?), long? maxLatencyInMs = default(long?), long? probesSent = default(long?), long? probesFailed = default(long?), IList<ConnectivityHop> hops = default(IList<ConnectivityHop>))
        {
            ConnectionState = connectionState;
            StartTime = startTime;
            EndTime = endTime;
            EvaluationState = evaluationState;
            AvgLatencyInMs = avgLatencyInMs;
            MinLatencyInMs = minLatencyInMs;
            MaxLatencyInMs = maxLatencyInMs;
            ProbesSent = probesSent;
            ProbesFailed = probesFailed;
            Hops = hops;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the connection state. Possible values include:
        /// 'Reachable', 'Unreachable', 'Unknown'
        /// </summary>
        [JsonProperty(PropertyName = "connectionState")]
        public string ConnectionState { get; set; }

        /// <summary>
        /// Gets or sets the start time of the connection snapshot.
        /// </summary>
        [JsonProperty(PropertyName = "startTime")]
        public System.DateTime? StartTime { get; set; }

        /// <summary>
        /// Gets or sets the end time of the connection snapshot.
        /// </summary>
        [JsonProperty(PropertyName = "endTime")]
        public System.DateTime? EndTime { get; set; }

        /// <summary>
        /// Gets or sets connectivity analysis evaluation state. Possible
        /// values include: 'NotStarted', 'InProgress', 'Completed'
        /// </summary>
        [JsonProperty(PropertyName = "evaluationState")]
        public string EvaluationState { get; set; }

        /// <summary>
        /// Gets or sets average latency in ms.
        /// </summary>
        [JsonProperty(PropertyName = "avgLatencyInMs")]
        public long? AvgLatencyInMs { get; set; }

        /// <summary>
        /// Gets or sets minimum latency in ms.
        /// </summary>
        [JsonProperty(PropertyName = "minLatencyInMs")]
        public long? MinLatencyInMs { get; set; }

        /// <summary>
        /// Gets or sets maximum latency in ms.
        /// </summary>
        [JsonProperty(PropertyName = "maxLatencyInMs")]
        public long? MaxLatencyInMs { get; set; }

        /// <summary>
        /// Gets or sets the number of sent probes.
        /// </summary>
        [JsonProperty(PropertyName = "probesSent")]
        public long? ProbesSent { get; set; }

        /// <summary>
        /// Gets or sets the number of failed probes.
        /// </summary>
        [JsonProperty(PropertyName = "probesFailed")]
        public long? ProbesFailed { get; set; }

        /// <summary>
        /// Gets list of hops between the source and the destination.
        /// </summary>
        [JsonProperty(PropertyName = "hops")]
        public IList<ConnectivityHop> Hops { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (AvgLatencyInMs > 4294967295)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "AvgLatencyInMs", 4294967295);
            }
            if (AvgLatencyInMs < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "AvgLatencyInMs", 0);
            }
            if (MinLatencyInMs > 4294967295)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "MinLatencyInMs", 4294967295);
            }
            if (MinLatencyInMs < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "MinLatencyInMs", 0);
            }
            if (MaxLatencyInMs > 4294967295)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "MaxLatencyInMs", 4294967295);
            }
            if (MaxLatencyInMs < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "MaxLatencyInMs", 0);
            }
            if (ProbesSent > 4294967295)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "ProbesSent", 4294967295);
            }
            if (ProbesSent < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "ProbesSent", 0);
            }
            if (ProbesFailed > 4294967295)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "ProbesFailed", 4294967295);
            }
            if (ProbesFailed < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "ProbesFailed", 0);
            }
        }
    }
}
