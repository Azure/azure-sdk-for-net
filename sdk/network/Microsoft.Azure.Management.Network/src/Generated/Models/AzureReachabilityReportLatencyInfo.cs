// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Network.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Details on latency for a time series.
    /// </summary>
    public partial class AzureReachabilityReportLatencyInfo
    {
        /// <summary>
        /// Initializes a new instance of the
        /// AzureReachabilityReportLatencyInfo class.
        /// </summary>
        public AzureReachabilityReportLatencyInfo()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// AzureReachabilityReportLatencyInfo class.
        /// </summary>
        /// <param name="timeStamp">The time stamp.</param>
        /// <param name="score">The relative latency score between 1 and 100,
        /// higher values indicating a faster connection.</param>
        public AzureReachabilityReportLatencyInfo(System.DateTime? timeStamp = default(System.DateTime?), int? score = default(int?))
        {
            TimeStamp = timeStamp;
            Score = score;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the time stamp.
        /// </summary>
        [JsonProperty(PropertyName = "timeStamp")]
        public System.DateTime? TimeStamp { get; set; }

        /// <summary>
        /// Gets or sets the relative latency score between 1 and 100, higher
        /// values indicating a faster connection.
        /// </summary>
        [JsonProperty(PropertyName = "score")]
        public int? Score { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Score != null)
            {
                if (Score > 100)
                {
                    throw new ValidationException(ValidationRules.InclusiveMaximum, "Score", 100);
                }
                if (Score < 1)
                {
                    throw new ValidationException(ValidationRules.InclusiveMinimum, "Score", 1);
                }
            }
        }
    }
}
