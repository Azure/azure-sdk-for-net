// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Network.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Quality of Service defines the traffic configuration between endpoints.
    /// Mandatory to have one marking.
    /// </summary>
    public partial class QosDefinition
    {
        /// <summary>
        /// Initializes a new instance of the QosDefinition class.
        /// </summary>
        public QosDefinition()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the QosDefinition class.
        /// </summary>
        /// <param name="markings">List of markings to be used in the
        /// configuration.</param>
        /// <param name="sourceIpRanges">Source IP ranges.</param>
        /// <param name="destinationIpRanges">Destination IP ranges.</param>
        /// <param name="sourcePortRanges">Sources port ranges.</param>
        /// <param name="destinationPortRanges">Destination port
        /// ranges.</param>
        /// <param name="protocol">RNM supported protocol types. Possible
        /// values include: 'DoNotUse', 'Icmp', 'Tcp', 'Udp', 'Gre', 'Esp',
        /// 'Ah', 'Vxlan', 'All'</param>
        public QosDefinition(IList<int?> markings = default(IList<int?>), IList<QosIpRange> sourceIpRanges = default(IList<QosIpRange>), IList<QosIpRange> destinationIpRanges = default(IList<QosIpRange>), IList<QosPortRange> sourcePortRanges = default(IList<QosPortRange>), IList<QosPortRange> destinationPortRanges = default(IList<QosPortRange>), string protocol = default(string))
        {
            Markings = markings;
            SourceIpRanges = sourceIpRanges;
            DestinationIpRanges = destinationIpRanges;
            SourcePortRanges = sourcePortRanges;
            DestinationPortRanges = destinationPortRanges;
            Protocol = protocol;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets list of markings to be used in the configuration.
        /// </summary>
        [JsonProperty(PropertyName = "markings")]
        public IList<int?> Markings { get; set; }

        /// <summary>
        /// Gets or sets source IP ranges.
        /// </summary>
        [JsonProperty(PropertyName = "sourceIpRanges")]
        public IList<QosIpRange> SourceIpRanges { get; set; }

        /// <summary>
        /// Gets or sets destination IP ranges.
        /// </summary>
        [JsonProperty(PropertyName = "destinationIpRanges")]
        public IList<QosIpRange> DestinationIpRanges { get; set; }

        /// <summary>
        /// Gets or sets sources port ranges.
        /// </summary>
        [JsonProperty(PropertyName = "sourcePortRanges")]
        public IList<QosPortRange> SourcePortRanges { get; set; }

        /// <summary>
        /// Gets or sets destination port ranges.
        /// </summary>
        [JsonProperty(PropertyName = "destinationPortRanges")]
        public IList<QosPortRange> DestinationPortRanges { get; set; }

        /// <summary>
        /// Gets or sets RNM supported protocol types. Possible values include:
        /// 'DoNotUse', 'Icmp', 'Tcp', 'Udp', 'Gre', 'Esp', 'Ah', 'Vxlan',
        /// 'All'
        /// </summary>
        [JsonProperty(PropertyName = "protocol")]
        public string Protocol { get; set; }

    }
}
