// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Network.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Hop link.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class HopLink
    {
        /// <summary>
        /// Initializes a new instance of the HopLink class.
        /// </summary>
        public HopLink()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the HopLink class.
        /// </summary>
        /// <param name="nextHopId">The ID of the next hop.</param>
        /// <param name="linkType">Link type.</param>
        /// <param name="roundTripTimeMin">Minimum roundtrip time in
        /// milliseconds.</param>
        /// <param name="roundTripTimeAvg">Average roundtrip time in
        /// milliseconds.</param>
        /// <param name="roundTripTimeMax">Maximum roundtrip time in
        /// milliseconds.</param>
        /// <param name="issues">List of issues.</param>
        /// <param name="context">Provides additional context on the
        /// issue.</param>
        /// <param name="resourceId">Resource ID.</param>
        public HopLink(string nextHopId = default(string), string linkType = default(string), int? roundTripTimeMin = default(int?), int? roundTripTimeAvg = default(int?), int? roundTripTimeMax = default(int?), IList<ConnectivityIssue> issues = default(IList<ConnectivityIssue>), IList<IDictionary<string, string>> context = default(IList<IDictionary<string, string>>), string resourceId = default(string))
        {
            NextHopId = nextHopId;
            LinkType = linkType;
            RoundTripTimeMin = roundTripTimeMin;
            RoundTripTimeAvg = roundTripTimeAvg;
            RoundTripTimeMax = roundTripTimeMax;
            Issues = issues;
            Context = context;
            ResourceId = resourceId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the ID of the next hop.
        /// </summary>
        [JsonProperty(PropertyName = "nextHopId")]
        public string NextHopId { get; private set; }

        /// <summary>
        /// Gets link type.
        /// </summary>
        [JsonProperty(PropertyName = "linkType")]
        public string LinkType { get; private set; }

        /// <summary>
        /// Gets minimum roundtrip time in milliseconds.
        /// </summary>
        [JsonProperty(PropertyName = "properties.roundTripTimeMin")]
        public int? RoundTripTimeMin { get; private set; }

        /// <summary>
        /// Gets average roundtrip time in milliseconds.
        /// </summary>
        [JsonProperty(PropertyName = "properties.roundTripTimeAvg")]
        public int? RoundTripTimeAvg { get; private set; }

        /// <summary>
        /// Gets maximum roundtrip time in milliseconds.
        /// </summary>
        [JsonProperty(PropertyName = "properties.roundTripTimeMax")]
        public int? RoundTripTimeMax { get; private set; }

        /// <summary>
        /// Gets list of issues.
        /// </summary>
        [JsonProperty(PropertyName = "issues")]
        public IList<ConnectivityIssue> Issues { get; private set; }

        /// <summary>
        /// Gets provides additional context on the issue.
        /// </summary>
        [JsonProperty(PropertyName = "context")]
        public IList<IDictionary<string, string>> Context { get; private set; }

        /// <summary>
        /// Gets resource ID.
        /// </summary>
        [JsonProperty(PropertyName = "resourceId")]
        public string ResourceId { get; private set; }

    }
}
