// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Network.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A collective group of information about the record set information.
    /// </summary>
    public partial class RecordSet
    {
        /// <summary>
        /// Initializes a new instance of the RecordSet class.
        /// </summary>
        public RecordSet()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RecordSet class.
        /// </summary>
        /// <param name="recordType">Resource record type.</param>
        /// <param name="recordSetName">Recordset name.</param>
        /// <param name="fqdn">Fqdn that resolves to private endpoint ip
        /// address.</param>
        /// <param name="provisioningState">The provisioning state of the
        /// recordset. Possible values include: 'Succeeded', 'Updating',
        /// 'Deleting', 'Failed'</param>
        /// <param name="ttl">Recordset time to live.</param>
        /// <param name="ipAddresses">The private ip address of the private
        /// endpoint.</param>
        public RecordSet(string recordType = default(string), string recordSetName = default(string), string fqdn = default(string), string provisioningState = default(string), int? ttl = default(int?), IList<string> ipAddresses = default(IList<string>))
        {
            RecordType = recordType;
            RecordSetName = recordSetName;
            Fqdn = fqdn;
            ProvisioningState = provisioningState;
            Ttl = ttl;
            IpAddresses = ipAddresses;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets resource record type.
        /// </summary>
        [JsonProperty(PropertyName = "recordType")]
        public string RecordType { get; set; }

        /// <summary>
        /// Gets or sets recordset name.
        /// </summary>
        [JsonProperty(PropertyName = "recordSetName")]
        public string RecordSetName { get; set; }

        /// <summary>
        /// Gets or sets fqdn that resolves to private endpoint ip address.
        /// </summary>
        [JsonProperty(PropertyName = "fqdn")]
        public string Fqdn { get; set; }

        /// <summary>
        /// Gets the provisioning state of the recordset. Possible values
        /// include: 'Succeeded', 'Updating', 'Deleting', 'Failed'
        /// </summary>
        [JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets or sets recordset time to live.
        /// </summary>
        [JsonProperty(PropertyName = "ttl")]
        public int? Ttl { get; set; }

        /// <summary>
        /// Gets or sets the private ip address of the private endpoint.
        /// </summary>
        [JsonProperty(PropertyName = "ipAddresses")]
        public IList<string> IpAddresses { get; set; }

    }
}
