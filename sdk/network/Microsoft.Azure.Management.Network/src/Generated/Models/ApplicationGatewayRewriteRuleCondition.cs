// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Network.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Set of conditions in the Rewrite Rule in Application Gateway.
    /// </summary>
    public partial class ApplicationGatewayRewriteRuleCondition
    {
        /// <summary>
        /// Initializes a new instance of the
        /// ApplicationGatewayRewriteRuleCondition class.
        /// </summary>
        public ApplicationGatewayRewriteRuleCondition()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// ApplicationGatewayRewriteRuleCondition class.
        /// </summary>
        /// <param name="variable">The condition parameter of the
        /// RewriteRuleCondition.</param>
        /// <param name="pattern">The pattern, either fixed string or regular
        /// expression, that evaluates the truthfulness of the
        /// condition.</param>
        /// <param name="ignoreCase">Setting this paramter to truth value with
        /// force the pattern to do a case in-sensitive comparison.</param>
        /// <param name="negate">Setting this value as truth will force to
        /// check the negation of the condition given by the user.</param>
        public ApplicationGatewayRewriteRuleCondition(string variable = default(string), string pattern = default(string), bool? ignoreCase = default(bool?), bool? negate = default(bool?))
        {
            Variable = variable;
            Pattern = pattern;
            IgnoreCase = ignoreCase;
            Negate = negate;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the condition parameter of the RewriteRuleCondition.
        /// </summary>
        [JsonProperty(PropertyName = "variable")]
        public string Variable { get; set; }

        /// <summary>
        /// Gets or sets the pattern, either fixed string or regular
        /// expression, that evaluates the truthfulness of the condition.
        /// </summary>
        [JsonProperty(PropertyName = "pattern")]
        public string Pattern { get; set; }

        /// <summary>
        /// Gets or sets setting this paramter to truth value with force the
        /// pattern to do a case in-sensitive comparison.
        /// </summary>
        [JsonProperty(PropertyName = "ignoreCase")]
        public bool? IgnoreCase { get; set; }

        /// <summary>
        /// Gets or sets setting this value as truth will force to check the
        /// negation of the condition given by the user.
        /// </summary>
        [JsonProperty(PropertyName = "negate")]
        public bool? Negate { get; set; }

    }
}
