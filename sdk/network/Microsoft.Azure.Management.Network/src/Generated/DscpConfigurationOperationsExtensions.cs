// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Network
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for DscpConfigurationOperations.
    /// </summary>
    public static partial class DscpConfigurationOperationsExtensions
    {
            /// <summary>
            /// Creates or updates a DSCP Configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='dscpConfigurationName'>
            /// The name of the resource.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the create or update dscp configuration operation.
            /// </param>
            public static DscpConfiguration CreateOrUpdate(this IDscpConfigurationOperations operations, string resourceGroupName, string dscpConfigurationName, DscpConfiguration parameters)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, dscpConfigurationName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a DSCP Configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='dscpConfigurationName'>
            /// The name of the resource.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the create or update dscp configuration operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DscpConfiguration> CreateOrUpdateAsync(this IDscpConfigurationOperations operations, string resourceGroupName, string dscpConfigurationName, DscpConfiguration parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, dscpConfigurationName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a DSCP Configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='dscpConfigurationName'>
            /// The name of the resource.
            /// </param>
            public static void Delete(this IDscpConfigurationOperations operations, string resourceGroupName, string dscpConfigurationName)
            {
                operations.DeleteAsync(resourceGroupName, dscpConfigurationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a DSCP Configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='dscpConfigurationName'>
            /// The name of the resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IDscpConfigurationOperations operations, string resourceGroupName, string dscpConfigurationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, dscpConfigurationName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets a DSCP Configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='dscpConfigurationName'>
            /// The name of the resource.
            /// </param>
            public static DscpConfiguration Get(this IDscpConfigurationOperations operations, string resourceGroupName, string dscpConfigurationName)
            {
                return operations.GetAsync(resourceGroupName, dscpConfigurationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a DSCP Configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='dscpConfigurationName'>
            /// The name of the resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DscpConfiguration> GetAsync(this IDscpConfigurationOperations operations, string resourceGroupName, string dscpConfigurationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, dscpConfigurationName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a DSCP Configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            public static IPage<DscpConfiguration> List(this IDscpConfigurationOperations operations, string resourceGroupName)
            {
                return operations.ListAsync(resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a DSCP Configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DscpConfiguration>> ListAsync(this IDscpConfigurationOperations operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all dscp configurations in a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<DscpConfiguration> ListAll(this IDscpConfigurationOperations operations)
            {
                return operations.ListAllAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all dscp configurations in a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DscpConfiguration>> ListAllAsync(this IDscpConfigurationOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAllWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates a DSCP Configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='dscpConfigurationName'>
            /// The name of the resource.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the create or update dscp configuration operation.
            /// </param>
            public static DscpConfiguration BeginCreateOrUpdate(this IDscpConfigurationOperations operations, string resourceGroupName, string dscpConfigurationName, DscpConfiguration parameters)
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, dscpConfigurationName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a DSCP Configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='dscpConfigurationName'>
            /// The name of the resource.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the create or update dscp configuration operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DscpConfiguration> BeginCreateOrUpdateAsync(this IDscpConfigurationOperations operations, string resourceGroupName, string dscpConfigurationName, DscpConfiguration parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, dscpConfigurationName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a DSCP Configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='dscpConfigurationName'>
            /// The name of the resource.
            /// </param>
            public static void BeginDelete(this IDscpConfigurationOperations operations, string resourceGroupName, string dscpConfigurationName)
            {
                operations.BeginDeleteAsync(resourceGroupName, dscpConfigurationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a DSCP Configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='dscpConfigurationName'>
            /// The name of the resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IDscpConfigurationOperations operations, string resourceGroupName, string dscpConfigurationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, dscpConfigurationName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets a DSCP Configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<DscpConfiguration> ListNext(this IDscpConfigurationOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a DSCP Configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DscpConfiguration>> ListNextAsync(this IDscpConfigurationOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all dscp configurations in a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<DscpConfiguration> ListAllNext(this IDscpConfigurationOperations operations, string nextPageLink)
            {
                return operations.ListAllNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all dscp configurations in a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DscpConfiguration>> ListAllNextAsync(this IDscpConfigurationOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAllNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
