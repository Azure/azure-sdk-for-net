// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Network
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for FirewallPolicyIdpsSignaturesOverridesOperations.
    /// </summary>
    public static partial class FirewallPolicyIdpsSignaturesOverridesOperationsExtensions
    {
            /// <summary>
            /// Will update the status of policy's signature overrides for IDPS
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Will contain all properties of the object to put
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='firewallPolicyName'>
            /// The name of the Firewall Policy.
            /// </param>
            public static SignaturesOverrides Patch(this IFirewallPolicyIdpsSignaturesOverridesOperations operations, SignaturesOverrides parameters, string resourceGroupName, string firewallPolicyName)
            {
                return operations.PatchAsync(parameters, resourceGroupName, firewallPolicyName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Will update the status of policy's signature overrides for IDPS
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Will contain all properties of the object to put
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='firewallPolicyName'>
            /// The name of the Firewall Policy.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SignaturesOverrides> PatchAsync(this IFirewallPolicyIdpsSignaturesOverridesOperations operations, SignaturesOverrides parameters, string resourceGroupName, string firewallPolicyName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchWithHttpMessagesAsync(parameters, resourceGroupName, firewallPolicyName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Will override/create a new signature overrides for the policy's IDPS
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Will contain all properties of the object to put
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='firewallPolicyName'>
            /// The name of the Firewall Policy.
            /// </param>
            public static SignaturesOverrides Put(this IFirewallPolicyIdpsSignaturesOverridesOperations operations, SignaturesOverrides parameters, string resourceGroupName, string firewallPolicyName)
            {
                return operations.PutAsync(parameters, resourceGroupName, firewallPolicyName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Will override/create a new signature overrides for the policy's IDPS
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Will contain all properties of the object to put
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='firewallPolicyName'>
            /// The name of the Firewall Policy.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SignaturesOverrides> PutAsync(this IFirewallPolicyIdpsSignaturesOverridesOperations operations, SignaturesOverrides parameters, string resourceGroupName, string firewallPolicyName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PutWithHttpMessagesAsync(parameters, resourceGroupName, firewallPolicyName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns all signatures overrides for a specific policy.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='firewallPolicyName'>
            /// The name of the Firewall Policy.
            /// </param>
            public static SignaturesOverrides Get(this IFirewallPolicyIdpsSignaturesOverridesOperations operations, string resourceGroupName, string firewallPolicyName)
            {
                return operations.GetAsync(resourceGroupName, firewallPolicyName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns all signatures overrides for a specific policy.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='firewallPolicyName'>
            /// The name of the Firewall Policy.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SignaturesOverrides> GetAsync(this IFirewallPolicyIdpsSignaturesOverridesOperations operations, string resourceGroupName, string firewallPolicyName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, firewallPolicyName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns all signatures overrides objects for a specific policy as a list
            /// containing a single value.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='firewallPolicyName'>
            /// The name of the Firewall Policy.
            /// </param>
            public static SignaturesOverridesList List(this IFirewallPolicyIdpsSignaturesOverridesOperations operations, string resourceGroupName, string firewallPolicyName)
            {
                return operations.ListAsync(resourceGroupName, firewallPolicyName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns all signatures overrides objects for a specific policy as a list
            /// containing a single value.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='firewallPolicyName'>
            /// The name of the Firewall Policy.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SignaturesOverridesList> ListAsync(this IFirewallPolicyIdpsSignaturesOverridesOperations operations, string resourceGroupName, string firewallPolicyName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, firewallPolicyName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
