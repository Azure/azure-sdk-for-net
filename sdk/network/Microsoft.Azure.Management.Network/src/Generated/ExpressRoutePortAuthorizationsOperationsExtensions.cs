// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Network
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ExpressRoutePortAuthorizationsOperations.
    /// </summary>
    public static partial class ExpressRoutePortAuthorizationsOperationsExtensions
    {
            /// <summary>
            /// Deletes the specified authorization from the specified express route port.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='expressRoutePortName'>
            /// The name of the express route port.
            /// </param>
            /// <param name='authorizationName'>
            /// The name of the authorization.
            /// </param>
            public static void Delete(this IExpressRoutePortAuthorizationsOperations operations, string resourceGroupName, string expressRoutePortName, string authorizationName)
            {
                operations.DeleteAsync(resourceGroupName, expressRoutePortName, authorizationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the specified authorization from the specified express route port.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='expressRoutePortName'>
            /// The name of the express route port.
            /// </param>
            /// <param name='authorizationName'>
            /// The name of the authorization.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IExpressRoutePortAuthorizationsOperations operations, string resourceGroupName, string expressRoutePortName, string authorizationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, expressRoutePortName, authorizationName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the specified authorization from the specified express route port.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='expressRoutePortName'>
            /// The name of the express route port.
            /// </param>
            /// <param name='authorizationName'>
            /// The name of the authorization.
            /// </param>
            public static ExpressRoutePortAuthorization Get(this IExpressRoutePortAuthorizationsOperations operations, string resourceGroupName, string expressRoutePortName, string authorizationName)
            {
                return operations.GetAsync(resourceGroupName, expressRoutePortName, authorizationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the specified authorization from the specified express route port.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='expressRoutePortName'>
            /// The name of the express route port.
            /// </param>
            /// <param name='authorizationName'>
            /// The name of the authorization.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ExpressRoutePortAuthorization> GetAsync(this IExpressRoutePortAuthorizationsOperations operations, string resourceGroupName, string expressRoutePortName, string authorizationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, expressRoutePortName, authorizationName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates an authorization in the specified express route port.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='expressRoutePortName'>
            /// The name of the express route port.
            /// </param>
            /// <param name='authorizationName'>
            /// The name of the authorization.
            /// </param>
            /// <param name='authorizationParameters'>
            /// Parameters supplied to the create or update express route port
            /// authorization operation.
            /// </param>
            public static ExpressRoutePortAuthorization CreateOrUpdate(this IExpressRoutePortAuthorizationsOperations operations, string resourceGroupName, string expressRoutePortName, string authorizationName, ExpressRoutePortAuthorization authorizationParameters)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, expressRoutePortName, authorizationName, authorizationParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates an authorization in the specified express route port.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='expressRoutePortName'>
            /// The name of the express route port.
            /// </param>
            /// <param name='authorizationName'>
            /// The name of the authorization.
            /// </param>
            /// <param name='authorizationParameters'>
            /// Parameters supplied to the create or update express route port
            /// authorization operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ExpressRoutePortAuthorization> CreateOrUpdateAsync(this IExpressRoutePortAuthorizationsOperations operations, string resourceGroupName, string expressRoutePortName, string authorizationName, ExpressRoutePortAuthorization authorizationParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, expressRoutePortName, authorizationName, authorizationParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all authorizations in an express route port.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='expressRoutePortName'>
            /// The name of the express route port.
            /// </param>
            public static IPage<ExpressRoutePortAuthorization> List(this IExpressRoutePortAuthorizationsOperations operations, string resourceGroupName, string expressRoutePortName)
            {
                return operations.ListAsync(resourceGroupName, expressRoutePortName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all authorizations in an express route port.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='expressRoutePortName'>
            /// The name of the express route port.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ExpressRoutePortAuthorization>> ListAsync(this IExpressRoutePortAuthorizationsOperations operations, string resourceGroupName, string expressRoutePortName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, expressRoutePortName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the specified authorization from the specified express route port.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='expressRoutePortName'>
            /// The name of the express route port.
            /// </param>
            /// <param name='authorizationName'>
            /// The name of the authorization.
            /// </param>
            public static void BeginDelete(this IExpressRoutePortAuthorizationsOperations operations, string resourceGroupName, string expressRoutePortName, string authorizationName)
            {
                operations.BeginDeleteAsync(resourceGroupName, expressRoutePortName, authorizationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the specified authorization from the specified express route port.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='expressRoutePortName'>
            /// The name of the express route port.
            /// </param>
            /// <param name='authorizationName'>
            /// The name of the authorization.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IExpressRoutePortAuthorizationsOperations operations, string resourceGroupName, string expressRoutePortName, string authorizationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, expressRoutePortName, authorizationName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Creates or updates an authorization in the specified express route port.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='expressRoutePortName'>
            /// The name of the express route port.
            /// </param>
            /// <param name='authorizationName'>
            /// The name of the authorization.
            /// </param>
            /// <param name='authorizationParameters'>
            /// Parameters supplied to the create or update express route port
            /// authorization operation.
            /// </param>
            public static ExpressRoutePortAuthorization BeginCreateOrUpdate(this IExpressRoutePortAuthorizationsOperations operations, string resourceGroupName, string expressRoutePortName, string authorizationName, ExpressRoutePortAuthorization authorizationParameters)
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, expressRoutePortName, authorizationName, authorizationParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates an authorization in the specified express route port.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='expressRoutePortName'>
            /// The name of the express route port.
            /// </param>
            /// <param name='authorizationName'>
            /// The name of the authorization.
            /// </param>
            /// <param name='authorizationParameters'>
            /// Parameters supplied to the create or update express route port
            /// authorization operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ExpressRoutePortAuthorization> BeginCreateOrUpdateAsync(this IExpressRoutePortAuthorizationsOperations operations, string resourceGroupName, string expressRoutePortName, string authorizationName, ExpressRoutePortAuthorization authorizationParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, expressRoutePortName, authorizationName, authorizationParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all authorizations in an express route port.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ExpressRoutePortAuthorization> ListNext(this IExpressRoutePortAuthorizationsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all authorizations in an express route port.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ExpressRoutePortAuthorization>> ListNextAsync(this IExpressRoutePortAuthorizationsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
