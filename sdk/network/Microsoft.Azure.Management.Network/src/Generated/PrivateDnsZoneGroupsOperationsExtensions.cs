// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Network
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for PrivateDnsZoneGroupsOperations.
    /// </summary>
    public static partial class PrivateDnsZoneGroupsOperationsExtensions
    {
            /// <summary>
            /// Deletes the specified private dns zone group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='privateEndpointName'>
            /// The name of the private endpoint.
            /// </param>
            /// <param name='privateDnsZoneGroupName'>
            /// The name of the private dns zone group.
            /// </param>
            public static void Delete(this IPrivateDnsZoneGroupsOperations operations, string resourceGroupName, string privateEndpointName, string privateDnsZoneGroupName)
            {
                operations.DeleteAsync(resourceGroupName, privateEndpointName, privateDnsZoneGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the specified private dns zone group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='privateEndpointName'>
            /// The name of the private endpoint.
            /// </param>
            /// <param name='privateDnsZoneGroupName'>
            /// The name of the private dns zone group.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IPrivateDnsZoneGroupsOperations operations, string resourceGroupName, string privateEndpointName, string privateDnsZoneGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, privateEndpointName, privateDnsZoneGroupName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the private dns zone group resource by specified private dns zone
            /// group name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='privateEndpointName'>
            /// The name of the private endpoint.
            /// </param>
            /// <param name='privateDnsZoneGroupName'>
            /// The name of the private dns zone group.
            /// </param>
            public static PrivateDnsZoneGroup Get(this IPrivateDnsZoneGroupsOperations operations, string resourceGroupName, string privateEndpointName, string privateDnsZoneGroupName)
            {
                return operations.GetAsync(resourceGroupName, privateEndpointName, privateDnsZoneGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the private dns zone group resource by specified private dns zone
            /// group name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='privateEndpointName'>
            /// The name of the private endpoint.
            /// </param>
            /// <param name='privateDnsZoneGroupName'>
            /// The name of the private dns zone group.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PrivateDnsZoneGroup> GetAsync(this IPrivateDnsZoneGroupsOperations operations, string resourceGroupName, string privateEndpointName, string privateDnsZoneGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, privateEndpointName, privateDnsZoneGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates a private dns zone group in the specified private
            /// endpoint.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='privateEndpointName'>
            /// The name of the private endpoint.
            /// </param>
            /// <param name='privateDnsZoneGroupName'>
            /// The name of the private dns zone group.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the create or update private dns zone group
            /// operation.
            /// </param>
            public static PrivateDnsZoneGroup CreateOrUpdate(this IPrivateDnsZoneGroupsOperations operations, string resourceGroupName, string privateEndpointName, string privateDnsZoneGroupName, PrivateDnsZoneGroup parameters)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, privateEndpointName, privateDnsZoneGroupName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a private dns zone group in the specified private
            /// endpoint.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='privateEndpointName'>
            /// The name of the private endpoint.
            /// </param>
            /// <param name='privateDnsZoneGroupName'>
            /// The name of the private dns zone group.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the create or update private dns zone group
            /// operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PrivateDnsZoneGroup> CreateOrUpdateAsync(this IPrivateDnsZoneGroupsOperations operations, string resourceGroupName, string privateEndpointName, string privateDnsZoneGroupName, PrivateDnsZoneGroup parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, privateEndpointName, privateDnsZoneGroupName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all private dns zone groups in a private endpoint.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='privateEndpointName'>
            /// The name of the private endpoint.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            public static IPage<PrivateDnsZoneGroup> List(this IPrivateDnsZoneGroupsOperations operations, string privateEndpointName, string resourceGroupName)
            {
                return operations.ListAsync(privateEndpointName, resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all private dns zone groups in a private endpoint.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='privateEndpointName'>
            /// The name of the private endpoint.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<PrivateDnsZoneGroup>> ListAsync(this IPrivateDnsZoneGroupsOperations operations, string privateEndpointName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(privateEndpointName, resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the specified private dns zone group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='privateEndpointName'>
            /// The name of the private endpoint.
            /// </param>
            /// <param name='privateDnsZoneGroupName'>
            /// The name of the private dns zone group.
            /// </param>
            public static void BeginDelete(this IPrivateDnsZoneGroupsOperations operations, string resourceGroupName, string privateEndpointName, string privateDnsZoneGroupName)
            {
                operations.BeginDeleteAsync(resourceGroupName, privateEndpointName, privateDnsZoneGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the specified private dns zone group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='privateEndpointName'>
            /// The name of the private endpoint.
            /// </param>
            /// <param name='privateDnsZoneGroupName'>
            /// The name of the private dns zone group.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IPrivateDnsZoneGroupsOperations operations, string resourceGroupName, string privateEndpointName, string privateDnsZoneGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, privateEndpointName, privateDnsZoneGroupName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Creates or updates a private dns zone group in the specified private
            /// endpoint.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='privateEndpointName'>
            /// The name of the private endpoint.
            /// </param>
            /// <param name='privateDnsZoneGroupName'>
            /// The name of the private dns zone group.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the create or update private dns zone group
            /// operation.
            /// </param>
            public static PrivateDnsZoneGroup BeginCreateOrUpdate(this IPrivateDnsZoneGroupsOperations operations, string resourceGroupName, string privateEndpointName, string privateDnsZoneGroupName, PrivateDnsZoneGroup parameters)
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, privateEndpointName, privateDnsZoneGroupName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a private dns zone group in the specified private
            /// endpoint.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='privateEndpointName'>
            /// The name of the private endpoint.
            /// </param>
            /// <param name='privateDnsZoneGroupName'>
            /// The name of the private dns zone group.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the create or update private dns zone group
            /// operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PrivateDnsZoneGroup> BeginCreateOrUpdateAsync(this IPrivateDnsZoneGroupsOperations operations, string resourceGroupName, string privateEndpointName, string privateDnsZoneGroupName, PrivateDnsZoneGroup parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, privateEndpointName, privateDnsZoneGroupName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all private dns zone groups in a private endpoint.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<PrivateDnsZoneGroup> ListNext(this IPrivateDnsZoneGroupsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all private dns zone groups in a private endpoint.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<PrivateDnsZoneGroup>> ListNextAsync(this IPrivateDnsZoneGroupsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
