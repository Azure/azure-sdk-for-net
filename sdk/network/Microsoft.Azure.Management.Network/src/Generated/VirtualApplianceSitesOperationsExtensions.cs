// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Network
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for VirtualApplianceSitesOperations.
    /// </summary>
    public static partial class VirtualApplianceSitesOperationsExtensions
    {
            /// <summary>
            /// Deletes the specified site from a Virtual Appliance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='networkVirtualApplianceName'>
            /// The name of the Network Virtual Appliance.
            /// </param>
            /// <param name='siteName'>
            /// The name of the site.
            /// </param>
            public static void Delete(this IVirtualApplianceSitesOperations operations, string resourceGroupName, string networkVirtualApplianceName, string siteName)
            {
                operations.DeleteAsync(resourceGroupName, networkVirtualApplianceName, siteName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the specified site from a Virtual Appliance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='networkVirtualApplianceName'>
            /// The name of the Network Virtual Appliance.
            /// </param>
            /// <param name='siteName'>
            /// The name of the site.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IVirtualApplianceSitesOperations operations, string resourceGroupName, string networkVirtualApplianceName, string siteName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, networkVirtualApplianceName, siteName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the specified Virtual Appliance Site.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='networkVirtualApplianceName'>
            /// The name of the Network Virtual Appliance.
            /// </param>
            /// <param name='siteName'>
            /// The name of the site.
            /// </param>
            public static VirtualApplianceSite Get(this IVirtualApplianceSitesOperations operations, string resourceGroupName, string networkVirtualApplianceName, string siteName)
            {
                return operations.GetAsync(resourceGroupName, networkVirtualApplianceName, siteName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the specified Virtual Appliance Site.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='networkVirtualApplianceName'>
            /// The name of the Network Virtual Appliance.
            /// </param>
            /// <param name='siteName'>
            /// The name of the site.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VirtualApplianceSite> GetAsync(this IVirtualApplianceSitesOperations operations, string resourceGroupName, string networkVirtualApplianceName, string siteName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, networkVirtualApplianceName, siteName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates the specified Network Virtual Appliance Site.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='networkVirtualApplianceName'>
            /// The name of the Network Virtual Appliance.
            /// </param>
            /// <param name='siteName'>
            /// The name of the site.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the create or update Network Virtual Appliance Site
            /// operation.
            /// </param>
            public static VirtualApplianceSite CreateOrUpdate(this IVirtualApplianceSitesOperations operations, string resourceGroupName, string networkVirtualApplianceName, string siteName, VirtualApplianceSite parameters)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, networkVirtualApplianceName, siteName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates the specified Network Virtual Appliance Site.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='networkVirtualApplianceName'>
            /// The name of the Network Virtual Appliance.
            /// </param>
            /// <param name='siteName'>
            /// The name of the site.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the create or update Network Virtual Appliance Site
            /// operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VirtualApplianceSite> CreateOrUpdateAsync(this IVirtualApplianceSitesOperations operations, string resourceGroupName, string networkVirtualApplianceName, string siteName, VirtualApplianceSite parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, networkVirtualApplianceName, siteName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists all Network Virtual Appliance Sites in a Network Virtual Appliance
            /// resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='networkVirtualApplianceName'>
            /// The name of the Network Virtual Appliance.
            /// </param>
            public static IPage<VirtualApplianceSite> List(this IVirtualApplianceSitesOperations operations, string resourceGroupName, string networkVirtualApplianceName)
            {
                return operations.ListAsync(resourceGroupName, networkVirtualApplianceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all Network Virtual Appliance Sites in a Network Virtual Appliance
            /// resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='networkVirtualApplianceName'>
            /// The name of the Network Virtual Appliance.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<VirtualApplianceSite>> ListAsync(this IVirtualApplianceSitesOperations operations, string resourceGroupName, string networkVirtualApplianceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, networkVirtualApplianceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the specified site from a Virtual Appliance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='networkVirtualApplianceName'>
            /// The name of the Network Virtual Appliance.
            /// </param>
            /// <param name='siteName'>
            /// The name of the site.
            /// </param>
            public static void BeginDelete(this IVirtualApplianceSitesOperations operations, string resourceGroupName, string networkVirtualApplianceName, string siteName)
            {
                operations.BeginDeleteAsync(resourceGroupName, networkVirtualApplianceName, siteName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the specified site from a Virtual Appliance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='networkVirtualApplianceName'>
            /// The name of the Network Virtual Appliance.
            /// </param>
            /// <param name='siteName'>
            /// The name of the site.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IVirtualApplianceSitesOperations operations, string resourceGroupName, string networkVirtualApplianceName, string siteName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, networkVirtualApplianceName, siteName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Creates or updates the specified Network Virtual Appliance Site.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='networkVirtualApplianceName'>
            /// The name of the Network Virtual Appliance.
            /// </param>
            /// <param name='siteName'>
            /// The name of the site.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the create or update Network Virtual Appliance Site
            /// operation.
            /// </param>
            public static VirtualApplianceSite BeginCreateOrUpdate(this IVirtualApplianceSitesOperations operations, string resourceGroupName, string networkVirtualApplianceName, string siteName, VirtualApplianceSite parameters)
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, networkVirtualApplianceName, siteName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates the specified Network Virtual Appliance Site.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='networkVirtualApplianceName'>
            /// The name of the Network Virtual Appliance.
            /// </param>
            /// <param name='siteName'>
            /// The name of the site.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the create or update Network Virtual Appliance Site
            /// operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VirtualApplianceSite> BeginCreateOrUpdateAsync(this IVirtualApplianceSitesOperations operations, string resourceGroupName, string networkVirtualApplianceName, string siteName, VirtualApplianceSite parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, networkVirtualApplianceName, siteName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists all Network Virtual Appliance Sites in a Network Virtual Appliance
            /// resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<VirtualApplianceSite> ListNext(this IVirtualApplianceSitesOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all Network Virtual Appliance Sites in a Network Virtual Appliance
            /// resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<VirtualApplianceSite>> ListNextAsync(this IVirtualApplianceSitesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
