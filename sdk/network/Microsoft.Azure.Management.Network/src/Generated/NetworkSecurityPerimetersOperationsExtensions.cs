// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Network
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for NetworkSecurityPerimetersOperations.
    /// </summary>
    public static partial class NetworkSecurityPerimetersOperationsExtensions
    {
            /// <summary>
            /// Gets the specified network security perimeter by the name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='networkSecurityPerimeterName'>
            /// The name of the network security perimeter.
            /// </param>
            public static NetworkSecurityPerimeter Get(this INetworkSecurityPerimetersOperations operations, string resourceGroupName, string networkSecurityPerimeterName)
            {
                return operations.GetAsync(resourceGroupName, networkSecurityPerimeterName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the specified network security perimeter by the name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='networkSecurityPerimeterName'>
            /// The name of the network security perimeter.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NetworkSecurityPerimeter> GetAsync(this INetworkSecurityPerimetersOperations operations, string resourceGroupName, string networkSecurityPerimeterName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, networkSecurityPerimeterName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates a Network Security Perimeter.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Parameter supplied to create or update the network security perimeter.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='networkSecurityPerimeterName'>
            /// The name of the network security perimeter.
            /// </param>
            public static NetworkSecurityPerimeter CreateOrUpdate(this INetworkSecurityPerimetersOperations operations, NetworkSecurityPerimeter parameters, string resourceGroupName, string networkSecurityPerimeterName)
            {
                return operations.CreateOrUpdateAsync(parameters, resourceGroupName, networkSecurityPerimeterName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a Network Security Perimeter.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Parameter supplied to create or update the network security perimeter.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='networkSecurityPerimeterName'>
            /// The name of the network security perimeter.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NetworkSecurityPerimeter> CreateOrUpdateAsync(this INetworkSecurityPerimetersOperations operations, NetworkSecurityPerimeter parameters, string resourceGroupName, string networkSecurityPerimeterName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(parameters, resourceGroupName, networkSecurityPerimeterName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a network security perimeter.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='networkSecurityPerimeterName'>
            /// The name of the network security perimeter.
            /// </param>
            public static void Delete(this INetworkSecurityPerimetersOperations operations, string resourceGroupName, string networkSecurityPerimeterName)
            {
                operations.DeleteAsync(resourceGroupName, networkSecurityPerimeterName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a network security perimeter.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='networkSecurityPerimeterName'>
            /// The name of the network security perimeter.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this INetworkSecurityPerimetersOperations operations, string resourceGroupName, string networkSecurityPerimeterName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, networkSecurityPerimeterName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// List all network security perimeters in a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='top'>
            /// An optional query parameter which specifies the maximum number of records
            /// to be returned by the server.
            /// </param>
            /// <param name='skipToken'>
            /// SkipToken is only used if a previous operation returned a partial result.
            /// If a previous response contains a nextLink element, the value of the
            /// nextLink element will include a skipToken parameter that specifies a
            /// starting point to use for subsequent calls.
            /// </param>
            public static IPage<NetworkSecurityPerimeter> ListBySubscription(this INetworkSecurityPerimetersOperations operations, int? top = default(int?), string skipToken = default(string))
            {
                return operations.ListBySubscriptionAsync(top, skipToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all network security perimeters in a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='top'>
            /// An optional query parameter which specifies the maximum number of records
            /// to be returned by the server.
            /// </param>
            /// <param name='skipToken'>
            /// SkipToken is only used if a previous operation returned a partial result.
            /// If a previous response contains a nextLink element, the value of the
            /// nextLink element will include a skipToken parameter that specifies a
            /// starting point to use for subsequent calls.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<NetworkSecurityPerimeter>> ListBySubscriptionAsync(this INetworkSecurityPerimetersOperations operations, int? top = default(int?), string skipToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBySubscriptionWithHttpMessagesAsync(top, skipToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List network security perimeters in a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='top'>
            /// An optional query parameter which specifies the maximum number of records
            /// to be returned by the server.
            /// </param>
            /// <param name='skipToken'>
            /// SkipToken is only used if a previous operation returned a partial result.
            /// If a previous response contains a nextLink element, the value of the
            /// nextLink element will include a skipToken parameter that specifies a
            /// starting point to use for subsequent calls.
            /// </param>
            public static IPage<NetworkSecurityPerimeter> List(this INetworkSecurityPerimetersOperations operations, string resourceGroupName, int? top = default(int?), string skipToken = default(string))
            {
                return operations.ListAsync(resourceGroupName, top, skipToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List network security perimeters in a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='top'>
            /// An optional query parameter which specifies the maximum number of records
            /// to be returned by the server.
            /// </param>
            /// <param name='skipToken'>
            /// SkipToken is only used if a previous operation returned a partial result.
            /// If a previous response contains a nextLink element, the value of the
            /// nextLink element will include a skipToken parameter that specifies a
            /// starting point to use for subsequent calls.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<NetworkSecurityPerimeter>> ListAsync(this INetworkSecurityPerimetersOperations operations, string resourceGroupName, int? top = default(int?), string skipToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, top, skipToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all network security perimeters in a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<NetworkSecurityPerimeter> ListBySubscriptionNext(this INetworkSecurityPerimetersOperations operations, string nextPageLink)
            {
                return operations.ListBySubscriptionNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all network security perimeters in a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<NetworkSecurityPerimeter>> ListBySubscriptionNextAsync(this INetworkSecurityPerimetersOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBySubscriptionNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List network security perimeters in a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<NetworkSecurityPerimeter> ListNext(this INetworkSecurityPerimetersOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List network security perimeters in a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<NetworkSecurityPerimeter>> ListNextAsync(this INetworkSecurityPerimetersOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
