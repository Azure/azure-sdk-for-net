// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Blockchain.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Payload of the blockchain member which is exposed in the
    /// request/response of the resource provider.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class BlockchainMember : TrackedResource
    {
        /// <summary>
        /// Initializes a new instance of the BlockchainMember class.
        /// </summary>
        public BlockchainMember()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the BlockchainMember class.
        /// </summary>
        /// <param name="id">Fully qualified resource Id of the
        /// resource.</param>
        /// <param name="name">The name of the resource.</param>
        /// <param name="type">The type of the service - e.g.
        /// "Microsoft.Blockchain"</param>
        /// <param name="location">The GEO location of the blockchain
        /// service.</param>
        /// <param name="tags">Tags of the service which is a list of key value
        /// pairs that describes the resource.</param>
        /// <param name="protocol">Gets or sets the blockchain protocol.
        /// Possible values include: 'NotSpecified', 'Parity', 'Quorum',
        /// 'Corda'</param>
        /// <param name="validatorNodesSku">Gets or sets the blockchain
        /// validator nodes Sku.</param>
        /// <param name="provisioningState">Gets or sets the blockchain member
        /// provision state. Possible values include: 'NotSpecified',
        /// 'Updating', 'Deleting', 'Succeeded', 'Failed', 'Stale'</param>
        /// <param name="dns">Gets the dns endpoint of the blockchain
        /// member.</param>
        /// <param name="userName">Gets the auth user name of the blockchain
        /// member.</param>
        /// <param name="password">Sets the basic auth password of the
        /// blockchain member.</param>
        /// <param name="consortium">Gets or sets the consortium for the
        /// blockchain member.</param>
        /// <param name="consortiumManagementAccountAddress">Gets the managed
        /// consortium management account address.</param>
        /// <param name="consortiumManagementAccountPassword">Sets the managed
        /// consortium management account password.</param>
        /// <param name="consortiumRole">Gets the role of the member in the
        /// consortium.</param>
        /// <param name="consortiumMemberDisplayName">Gets the display name of
        /// the member in the consortium.</param>
        /// <param name="rootContractAddress">Gets the Ethereum root contract
        /// address of the blockchain.</param>
        /// <param name="publicKey">Gets the public key of the blockchain
        /// member (default transaction node).</param>
        /// <param name="firewallRules">Gets or sets firewall rules</param>
        /// <param name="sku">Gets or sets the blockchain member Sku.</param>
        public BlockchainMember(string id = default(string), string name = default(string), string type = default(string), string location = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string protocol = default(string), BlockchainMemberNodesSku validatorNodesSku = default(BlockchainMemberNodesSku), string provisioningState = default(string), string dns = default(string), string userName = default(string), string password = default(string), string consortium = default(string), string consortiumManagementAccountAddress = default(string), string consortiumManagementAccountPassword = default(string), string consortiumRole = default(string), string consortiumMemberDisplayName = default(string), string rootContractAddress = default(string), string publicKey = default(string), IList<FirewallRule> firewallRules = default(IList<FirewallRule>), Sku sku = default(Sku))
            : base(id, name, type, location, tags)
        {
            Protocol = protocol;
            ValidatorNodesSku = validatorNodesSku;
            ProvisioningState = provisioningState;
            Dns = dns;
            UserName = userName;
            Password = password;
            Consortium = consortium;
            ConsortiumManagementAccountAddress = consortiumManagementAccountAddress;
            ConsortiumManagementAccountPassword = consortiumManagementAccountPassword;
            ConsortiumRole = consortiumRole;
            ConsortiumMemberDisplayName = consortiumMemberDisplayName;
            RootContractAddress = rootContractAddress;
            PublicKey = publicKey;
            FirewallRules = firewallRules;
            Sku = sku;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the blockchain protocol. Possible values include:
        /// 'NotSpecified', 'Parity', 'Quorum', 'Corda'
        /// </summary>
        [JsonProperty(PropertyName = "properties.protocol")]
        public string Protocol { get; set; }

        /// <summary>
        /// Gets or sets the blockchain validator nodes Sku.
        /// </summary>
        [JsonProperty(PropertyName = "properties.validatorNodesSku")]
        public BlockchainMemberNodesSku ValidatorNodesSku { get; set; }

        /// <summary>
        /// Gets or sets the blockchain member provision state. Possible values
        /// include: 'NotSpecified', 'Updating', 'Deleting', 'Succeeded',
        /// 'Failed', 'Stale'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets the dns endpoint of the blockchain member.
        /// </summary>
        [JsonProperty(PropertyName = "properties.dns")]
        public string Dns { get; private set; }

        /// <summary>
        /// Gets the auth user name of the blockchain member.
        /// </summary>
        [JsonProperty(PropertyName = "properties.userName")]
        public string UserName { get; private set; }

        /// <summary>
        /// Gets or sets sets the basic auth password of the blockchain member.
        /// </summary>
        [JsonProperty(PropertyName = "properties.password")]
        public string Password { get; set; }

        /// <summary>
        /// Gets or sets the consortium for the blockchain member.
        /// </summary>
        [JsonProperty(PropertyName = "properties.consortium")]
        public string Consortium { get; set; }

        /// <summary>
        /// Gets the managed consortium management account address.
        /// </summary>
        [JsonProperty(PropertyName = "properties.consortiumManagementAccountAddress")]
        public string ConsortiumManagementAccountAddress { get; private set; }

        /// <summary>
        /// Gets or sets sets the managed consortium management account
        /// password.
        /// </summary>
        [JsonProperty(PropertyName = "properties.consortiumManagementAccountPassword")]
        public string ConsortiumManagementAccountPassword { get; set; }

        /// <summary>
        /// Gets the role of the member in the consortium.
        /// </summary>
        [JsonProperty(PropertyName = "properties.consortiumRole")]
        public string ConsortiumRole { get; set; }

        /// <summary>
        /// Gets the display name of the member in the consortium.
        /// </summary>
        [JsonProperty(PropertyName = "properties.consortiumMemberDisplayName")]
        public string ConsortiumMemberDisplayName { get; set; }

        /// <summary>
        /// Gets the Ethereum root contract address of the blockchain.
        /// </summary>
        [JsonProperty(PropertyName = "properties.rootContractAddress")]
        public string RootContractAddress { get; private set; }

        /// <summary>
        /// Gets the public key of the blockchain member (default transaction
        /// node).
        /// </summary>
        [JsonProperty(PropertyName = "properties.publicKey")]
        public string PublicKey { get; private set; }

        /// <summary>
        /// Gets or sets firewall rules
        /// </summary>
        [JsonProperty(PropertyName = "properties.firewallRules")]
        public IList<FirewallRule> FirewallRules { get; set; }

        /// <summary>
        /// Gets or sets the blockchain member Sku.
        /// </summary>
        [JsonProperty(PropertyName = "sku")]
        public Sku Sku { get; set; }

    }
}
