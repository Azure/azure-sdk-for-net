// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.MachineLearningExperimentation
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ProjectsOperations.
    /// </summary>
    public static partial class ProjectsOperationsExtensions
    {
            /// <summary>
            /// Gets the properties of the specified machine learning project.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the machine learning team account
            /// belongs.
            /// </param>
            /// <param name='accountName'>
            /// The name of the machine learning team account.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the machine learning team account workspace.
            /// </param>
            /// <param name='projectName'>
            /// The name of the machine learning project under a team account workspace.
            /// </param>
            public static Project Get(this IProjectsOperations operations, string resourceGroupName, string accountName, string workspaceName, string projectName)
            {
                return operations.GetAsync(resourceGroupName, accountName, workspaceName, projectName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the properties of the specified machine learning project.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the machine learning team account
            /// belongs.
            /// </param>
            /// <param name='accountName'>
            /// The name of the machine learning team account.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the machine learning team account workspace.
            /// </param>
            /// <param name='projectName'>
            /// The name of the machine learning project under a team account workspace.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Project> GetAsync(this IProjectsOperations operations, string resourceGroupName, string accountName, string workspaceName, string projectName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, accountName, workspaceName, projectName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates a project with the specified parameters.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the machine learning team account
            /// belongs.
            /// </param>
            /// <param name='accountName'>
            /// The name of the machine learning team account.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the machine learning team account workspace.
            /// </param>
            /// <param name='projectName'>
            /// The name of the machine learning project under a team account workspace.
            /// </param>
            /// <param name='parameters'>
            /// The parameters for creating or updating a project.
            /// </param>
            public static Project CreateOrUpdate(this IProjectsOperations operations, string resourceGroupName, string accountName, string workspaceName, string projectName, Project parameters)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, accountName, workspaceName, projectName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a project with the specified parameters.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the machine learning team account
            /// belongs.
            /// </param>
            /// <param name='accountName'>
            /// The name of the machine learning team account.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the machine learning team account workspace.
            /// </param>
            /// <param name='projectName'>
            /// The name of the machine learning project under a team account workspace.
            /// </param>
            /// <param name='parameters'>
            /// The parameters for creating or updating a project.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Project> CreateOrUpdateAsync(this IProjectsOperations operations, string resourceGroupName, string accountName, string workspaceName, string projectName, Project parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, accountName, workspaceName, projectName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a project.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the machine learning team account
            /// belongs.
            /// </param>
            /// <param name='accountName'>
            /// The name of the machine learning team account.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the machine learning team account workspace.
            /// </param>
            /// <param name='projectName'>
            /// The name of the machine learning project under a team account workspace.
            /// </param>
            public static void Delete(this IProjectsOperations operations, string resourceGroupName, string accountName, string workspaceName, string projectName)
            {
                operations.DeleteAsync(resourceGroupName, accountName, workspaceName, projectName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a project.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the machine learning team account
            /// belongs.
            /// </param>
            /// <param name='accountName'>
            /// The name of the machine learning team account.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the machine learning team account workspace.
            /// </param>
            /// <param name='projectName'>
            /// The name of the machine learning project under a team account workspace.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IProjectsOperations operations, string resourceGroupName, string accountName, string workspaceName, string projectName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, accountName, workspaceName, projectName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates a project with the specified parameters.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the machine learning team account
            /// belongs.
            /// </param>
            /// <param name='accountName'>
            /// The name of the machine learning team account.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the machine learning team account workspace.
            /// </param>
            /// <param name='projectName'>
            /// The name of the machine learning project under a team account workspace.
            /// </param>
            /// <param name='parameters'>
            /// The parameters for updating a machine learning team account.
            /// </param>
            public static Project Update(this IProjectsOperations operations, string resourceGroupName, string accountName, string workspaceName, string projectName, ProjectUpdateParameters parameters)
            {
                return operations.UpdateAsync(resourceGroupName, accountName, workspaceName, projectName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a project with the specified parameters.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the machine learning team account
            /// belongs.
            /// </param>
            /// <param name='accountName'>
            /// The name of the machine learning team account.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the machine learning team account workspace.
            /// </param>
            /// <param name='projectName'>
            /// The name of the machine learning project under a team account workspace.
            /// </param>
            /// <param name='parameters'>
            /// The parameters for updating a machine learning team account.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Project> UpdateAsync(this IProjectsOperations operations, string resourceGroupName, string accountName, string workspaceName, string projectName, ProjectUpdateParameters parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, accountName, workspaceName, projectName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists all the available machine learning projects under the specified
            /// workspace.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The name of the machine learning team account.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the machine learning team account workspace.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the machine learning team account
            /// belongs.
            /// </param>
            public static IPage<Project> ListByWorkspace(this IProjectsOperations operations, string accountName, string workspaceName, string resourceGroupName)
            {
                return operations.ListByWorkspaceAsync(accountName, workspaceName, resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all the available machine learning projects under the specified
            /// workspace.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The name of the machine learning team account.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the machine learning team account workspace.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to which the machine learning team account
            /// belongs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Project>> ListByWorkspaceAsync(this IProjectsOperations operations, string accountName, string workspaceName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByWorkspaceWithHttpMessagesAsync(accountName, workspaceName, resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists all the available machine learning projects under the specified
            /// workspace.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Project> ListByWorkspaceNext(this IProjectsOperations operations, string nextPageLink)
            {
                return operations.ListByWorkspaceNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all the available machine learning projects under the specified
            /// workspace.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Project>> ListByWorkspaceNextAsync(this IProjectsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByWorkspaceNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
