// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.MachineLearningExperimentation.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// An object that represents a machine learning project.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class Project : Resource
    {
        /// <summary>
        /// Initializes a new instance of the Project class.
        /// </summary>
        public Project()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Project class.
        /// </summary>
        /// <param name="location">The location of the resource. This cannot be
        /// changed after the resource is created.</param>
        /// <param name="friendlyName">The friendly name for this
        /// project.</param>
        /// <param name="id">The resource ID.</param>
        /// <param name="name">The name of the resource.</param>
        /// <param name="type">The type of the resource.</param>
        /// <param name="tags">The tags of the resource.</param>
        /// <param name="description">The description of this project.</param>
        /// <param name="accountId">The immutable id of the team account which
        /// contains this project.</param>
        /// <param name="workspaceId">The immutable id of the workspace which
        /// contains this project.</param>
        /// <param name="projectId">The immutable id of this project.</param>
        /// <param name="gitrepo">The reference to git repo for this
        /// project.</param>
        /// <param name="creationDate">The creation date of the project in
        /// ISO8601 format.</param>
        /// <param name="provisioningState">The current deployment state of
        /// project resource. The provisioningState is to indicate states for
        /// resource provisioning. Possible values include: 'Creating',
        /// 'Succeeded', 'Updating', 'Deleting', 'Failed'</param>
        public Project(string location, string friendlyName, string id = default(string), string name = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string description = default(string), string accountId = default(string), string workspaceId = default(string), string projectId = default(string), string gitrepo = default(string), System.DateTime? creationDate = default(System.DateTime?), ProvisioningState? provisioningState = default(ProvisioningState?))
            : base(location, id, name, type, tags)
        {
            Description = description;
            AccountId = accountId;
            WorkspaceId = workspaceId;
            ProjectId = projectId;
            Gitrepo = gitrepo;
            FriendlyName = friendlyName;
            CreationDate = creationDate;
            ProvisioningState = provisioningState;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the description of this project.
        /// </summary>
        [JsonProperty(PropertyName = "properties.description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets the immutable id of the team account which contains this
        /// project.
        /// </summary>
        [JsonProperty(PropertyName = "properties.accountId")]
        public string AccountId { get; private set; }

        /// <summary>
        /// Gets the immutable id of the workspace which contains this project.
        /// </summary>
        [JsonProperty(PropertyName = "properties.workspaceId")]
        public string WorkspaceId { get; private set; }

        /// <summary>
        /// Gets the immutable id of this project.
        /// </summary>
        [JsonProperty(PropertyName = "properties.projectId")]
        public string ProjectId { get; private set; }

        /// <summary>
        /// Gets or sets the reference to git repo for this project.
        /// </summary>
        [JsonProperty(PropertyName = "properties.gitrepo")]
        public string Gitrepo { get; set; }

        /// <summary>
        /// Gets or sets the friendly name for this project.
        /// </summary>
        [JsonProperty(PropertyName = "properties.friendlyName")]
        public string FriendlyName { get; set; }

        /// <summary>
        /// Gets the creation date of the project in ISO8601 format.
        /// </summary>
        [JsonProperty(PropertyName = "properties.creationDate")]
        public System.DateTime? CreationDate { get; private set; }

        /// <summary>
        /// Gets the current deployment state of project resource. The
        /// provisioningState is to indicate states for resource provisioning.
        /// Possible values include: 'Creating', 'Succeeded', 'Updating',
        /// 'Deleting', 'Failed'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public ProvisioningState? ProvisioningState { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (FriendlyName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "FriendlyName");
            }
        }
    }
}
