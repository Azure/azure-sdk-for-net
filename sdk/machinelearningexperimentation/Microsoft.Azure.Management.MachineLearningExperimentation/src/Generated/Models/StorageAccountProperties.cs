// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.MachineLearningExperimentation.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The properties of a storage account for a machine learning team
    /// account.
    /// </summary>
    public partial class StorageAccountProperties
    {
        /// <summary>
        /// Initializes a new instance of the StorageAccountProperties class.
        /// </summary>
        public StorageAccountProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the StorageAccountProperties class.
        /// </summary>
        /// <param name="storageAccountId">The fully qualified arm Id of the
        /// storage account.</param>
        /// <param name="accessKey">The access key to the storage
        /// account.</param>
        public StorageAccountProperties(string storageAccountId, string accessKey)
        {
            StorageAccountId = storageAccountId;
            AccessKey = accessKey;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the fully qualified arm Id of the storage account.
        /// </summary>
        [JsonProperty(PropertyName = "storageAccountId")]
        public string StorageAccountId { get; set; }

        /// <summary>
        /// Gets or sets the access key to the storage account.
        /// </summary>
        [JsonProperty(PropertyName = "accessKey")]
        public string AccessKey { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (StorageAccountId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "StorageAccountId");
            }
            if (AccessKey == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AccessKey");
            }
        }
    }
}
