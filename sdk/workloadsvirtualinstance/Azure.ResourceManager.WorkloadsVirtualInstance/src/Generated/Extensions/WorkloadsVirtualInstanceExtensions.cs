// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.WorkloadsVirtualInstance.Mocking;

namespace Azure.ResourceManager.WorkloadsVirtualInstance
{
    /// <summary> A class to add extension methods to Azure.ResourceManager.WorkloadsVirtualInstance. </summary>
    public static partial class WorkloadsVirtualInstanceExtensions
    {
        private static MockableWorkloadsVirtualInstanceArmClient GetMockableWorkloadsVirtualInstanceArmClient(ArmClient client)
        {
            return client.GetCachedClient(client0 => new MockableWorkloadsVirtualInstanceArmClient(client0));
        }

        private static MockableWorkloadsVirtualInstanceResourceGroupResource GetMockableWorkloadsVirtualInstanceResourceGroupResource(ArmResource resource)
        {
            return resource.GetCachedClient(client => new MockableWorkloadsVirtualInstanceResourceGroupResource(client, resource.Id));
        }

        private static MockableWorkloadsVirtualInstanceSubscriptionResource GetMockableWorkloadsVirtualInstanceSubscriptionResource(ArmResource resource)
        {
            return resource.GetCachedClient(client => new MockableWorkloadsVirtualInstanceSubscriptionResource(client, resource.Id));
        }

        /// <summary>
        /// Gets an object representing a <see cref="VirtualInstanceResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="VirtualInstanceResource.CreateResourceIdentifier" /> to create a <see cref="VirtualInstanceResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableWorkloadsVirtualInstanceArmClient.GetVirtualInstanceResource(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="VirtualInstanceResource"/> object. </returns>
        public static VirtualInstanceResource GetVirtualInstanceResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableWorkloadsVirtualInstanceArmClient(client).GetVirtualInstanceResource(id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="WorkloadComponentResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="WorkloadComponentResource.CreateResourceIdentifier" /> to create a <see cref="WorkloadComponentResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableWorkloadsVirtualInstanceArmClient.GetWorkloadComponentResource(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="WorkloadComponentResource"/> object. </returns>
        public static WorkloadComponentResource GetWorkloadComponentResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableWorkloadsVirtualInstanceArmClient(client).GetWorkloadComponentResource(id);
        }

        /// <summary>
        /// Gets a collection of VirtualInstanceResources in the ResourceGroupResource.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableWorkloadsVirtualInstanceResourceGroupResource.GetVirtualInstances()"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> is null. </exception>
        /// <returns> An object representing collection of VirtualInstanceResources and their operations over a VirtualInstanceResource. </returns>
        public static VirtualInstanceCollection GetVirtualInstances(this ResourceGroupResource resourceGroupResource)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return GetMockableWorkloadsVirtualInstanceResourceGroupResource(resourceGroupResource).GetVirtualInstances();
        }

        /// <summary>
        /// Gets a Virtual Instance resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/virtualInstances/{virtualInstanceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>VirtualInstance_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="VirtualInstanceResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableWorkloadsVirtualInstanceResourceGroupResource.GetVirtualInstanceAsync(string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="virtualInstanceName"> The name of the Virtual Instance resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> or <paramref name="virtualInstanceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="virtualInstanceName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<VirtualInstanceResource>> GetVirtualInstanceAsync(this ResourceGroupResource resourceGroupResource, string virtualInstanceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return await GetMockableWorkloadsVirtualInstanceResourceGroupResource(resourceGroupResource).GetVirtualInstanceAsync(virtualInstanceName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets a Virtual Instance resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/virtualInstances/{virtualInstanceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>VirtualInstance_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="VirtualInstanceResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableWorkloadsVirtualInstanceResourceGroupResource.GetVirtualInstance(string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="virtualInstanceName"> The name of the Virtual Instance resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> or <paramref name="virtualInstanceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="virtualInstanceName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public static Response<VirtualInstanceResource> GetVirtualInstance(this ResourceGroupResource resourceGroupResource, string virtualInstanceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return GetMockableWorkloadsVirtualInstanceResourceGroupResource(resourceGroupResource).GetVirtualInstance(virtualInstanceName, cancellationToken);
        }

        /// <summary>
        /// Gets all Virtual Instance resources in a Subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Workloads/virtualInstances</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>VirtualInstance_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="VirtualInstanceResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableWorkloadsVirtualInstanceSubscriptionResource.GetVirtualInstances(CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        /// <returns> An async collection of <see cref="VirtualInstanceResource"/> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<VirtualInstanceResource> GetVirtualInstancesAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableWorkloadsVirtualInstanceSubscriptionResource(subscriptionResource).GetVirtualInstancesAsync(cancellationToken);
        }

        /// <summary>
        /// Gets all Virtual Instance resources in a Subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Workloads/virtualInstances</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>VirtualInstance_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="VirtualInstanceResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableWorkloadsVirtualInstanceSubscriptionResource.GetVirtualInstances(CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        /// <returns> A collection of <see cref="VirtualInstanceResource"/> that may take multiple service requests to iterate over. </returns>
        public static Pageable<VirtualInstanceResource> GetVirtualInstances(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableWorkloadsVirtualInstanceSubscriptionResource(subscriptionResource).GetVirtualInstances(cancellationToken);
        }
    }
}
