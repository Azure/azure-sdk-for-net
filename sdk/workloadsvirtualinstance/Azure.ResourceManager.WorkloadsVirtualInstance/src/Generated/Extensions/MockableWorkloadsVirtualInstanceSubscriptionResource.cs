// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Threading;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.ResourceManager.WorkloadsVirtualInstance.Mocking
{
    /// <summary> A class to add extension methods to SubscriptionResource. </summary>
    public partial class MockableWorkloadsVirtualInstanceSubscriptionResource : ArmResource
    {
        private ClientDiagnostics _virtualInstanceClientDiagnostics;
        private VirtualInstancesRestOperations _virtualInstanceRestClient;

        /// <summary> Initializes a new instance of the <see cref="MockableWorkloadsVirtualInstanceSubscriptionResource"/> class for mocking. </summary>
        protected MockableWorkloadsVirtualInstanceSubscriptionResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="MockableWorkloadsVirtualInstanceSubscriptionResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal MockableWorkloadsVirtualInstanceSubscriptionResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics VirtualInstanceClientDiagnostics => _virtualInstanceClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.WorkloadsVirtualInstance", VirtualInstanceResource.ResourceType.Namespace, Diagnostics);
        private VirtualInstancesRestOperations VirtualInstanceRestClient => _virtualInstanceRestClient ??= new VirtualInstancesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(VirtualInstanceResource.ResourceType));

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary>
        /// Gets all Virtual Instance resources in a Subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Workloads/virtualInstances</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>VirtualInstance_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="VirtualInstanceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="VirtualInstanceResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<VirtualInstanceResource> GetVirtualInstancesAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => VirtualInstanceRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => VirtualInstanceRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new VirtualInstanceResource(Client, VirtualInstanceData.DeserializeVirtualInstanceData(e)), VirtualInstanceClientDiagnostics, Pipeline, "MockableWorkloadsVirtualInstanceSubscriptionResource.GetVirtualInstances", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Gets all Virtual Instance resources in a Subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Workloads/virtualInstances</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>VirtualInstance_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="VirtualInstanceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="VirtualInstanceResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<VirtualInstanceResource> GetVirtualInstances(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => VirtualInstanceRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => VirtualInstanceRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new VirtualInstanceResource(Client, VirtualInstanceData.DeserializeVirtualInstanceData(e)), VirtualInstanceClientDiagnostics, Pipeline, "MockableWorkloadsVirtualInstanceSubscriptionResource.GetVirtualInstances", "value", "nextLink", cancellationToken);
        }
    }
}
