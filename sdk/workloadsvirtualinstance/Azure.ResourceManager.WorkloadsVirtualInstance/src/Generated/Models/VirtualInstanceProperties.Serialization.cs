// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadsVirtualInstance.Models
{
    public partial class VirtualInstanceProperties : IUtf8JsonSerializable, IJsonModel<VirtualInstanceProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<VirtualInstanceProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<VirtualInstanceProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<VirtualInstanceProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(VirtualInstanceProperties)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("workloadInfo"u8);
            writer.WriteObjectValue(WorkloadInfo, options);
            writer.WritePropertyName("environmentType"u8);
            writer.WriteStringValue(EnvironmentType.ToString());
            if (Optional.IsDefined(EnvironmentLabel))
            {
                writer.WritePropertyName("environmentLabel"u8);
                writer.WriteStringValue(EnvironmentLabel);
            }
            if (Optional.IsDefined(SystemPriority))
            {
                writer.WritePropertyName("systemPriority"u8);
                writer.WriteNumberValue(SystemPriority.Value);
            }
            writer.WritePropertyName("systemLifecycleStage"u8);
            writer.WriteStringValue(SystemLifecycleStage.ToString());
            if (Optional.IsCollectionDefined(Metadata))
            {
                writer.WritePropertyName("metadata"u8);
                writer.WriteStartObject();
                foreach (var item in Metadata)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsCollectionDefined(LinkedResources))
            {
                writer.WritePropertyName("linkedResources"u8);
                writer.WriteStartArray();
                foreach (var item in LinkedResources)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsDefined(ComplianceState))
            {
                writer.WritePropertyName("complianceState"u8);
                writer.WriteStringValue(ComplianceState.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(Errors))
            {
                writer.WritePropertyName("errors"u8);
                JsonSerializer.Serialize(writer, Errors);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        VirtualInstanceProperties IJsonModel<VirtualInstanceProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<VirtualInstanceProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(VirtualInstanceProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeVirtualInstanceProperties(document.RootElement, options);
        }

        internal static VirtualInstanceProperties DeserializeVirtualInstanceProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            WorkloadInfo workloadInfo = default;
            EnvironmentType environmentType = default;
            string environmentLabel = default;
            int? systemPriority = default;
            SystemLifecycleStage systemLifecycleStage = default;
            IDictionary<string, string> metadata = default;
            IList<LinkedResource> linkedResources = default;
            WorkloadComplianceState? complianceState = default;
            ResourceProvisioningState? provisioningState = default;
            ResponseError errors = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("workloadInfo"u8))
                {
                    workloadInfo = WorkloadInfo.DeserializeWorkloadInfo(property.Value, options);
                    continue;
                }
                if (property.NameEquals("environmentType"u8))
                {
                    environmentType = new EnvironmentType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("environmentLabel"u8))
                {
                    environmentLabel = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("systemPriority"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemPriority = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("systemLifecycleStage"u8))
                {
                    systemLifecycleStage = new SystemLifecycleStage(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("metadata"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    metadata = dictionary;
                    continue;
                }
                if (property.NameEquals("linkedResources"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<LinkedResource> array = new List<LinkedResource>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(LinkedResource.DeserializeLinkedResource(item, options));
                    }
                    linkedResources = array;
                    continue;
                }
                if (property.NameEquals("complianceState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    complianceState = new WorkloadComplianceState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new ResourceProvisioningState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("errors"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    errors = JsonSerializer.Deserialize<ResponseError>(property.Value.GetRawText());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new VirtualInstanceProperties(
                workloadInfo,
                environmentType,
                environmentLabel,
                systemPriority,
                systemLifecycleStage,
                metadata ?? new ChangeTrackingDictionary<string, string>(),
                linkedResources ?? new ChangeTrackingList<LinkedResource>(),
                complianceState,
                provisioningState,
                errors,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<VirtualInstanceProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<VirtualInstanceProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadsVirtualInstanceContext.Default);
                default:
                    throw new FormatException($"The model {nameof(VirtualInstanceProperties)} does not support writing '{options.Format}' format.");
            }
        }

        VirtualInstanceProperties IPersistableModel<VirtualInstanceProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<VirtualInstanceProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeVirtualInstanceProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(VirtualInstanceProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<VirtualInstanceProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
