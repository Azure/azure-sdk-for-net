// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.ResourceManager.WorkloadsVirtualInstance.Models
{
    /// <summary> Defines the workload component properties. </summary>
    public partial class WorkloadComponentProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="WorkloadComponentProperties"/>. </summary>
        /// <param name="componentType"> Type of the component. Allowed values change based on the workload type and will be defined in the workload definition. Examples include "application", "database", "central" etc. </param>
        /// <param name="resources"> Resources that are part of the component. The entries in this list should be unique and correspond to a single Azure resource. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="componentType"/> or <paramref name="resources"/> is null. </exception>
        public WorkloadComponentProperties(string componentType, IEnumerable<ResourceConfiguration> resources)
        {
            Argument.AssertNotNull(componentType, nameof(componentType));
            Argument.AssertNotNull(resources, nameof(resources));

            ComponentType = componentType;
            Resources = resources.ToList();
            Metadata = new ChangeTrackingDictionary<string, string>();
        }

        /// <summary> Initializes a new instance of <see cref="WorkloadComponentProperties"/>. </summary>
        /// <param name="componentType"> Type of the component. Allowed values change based on the workload type and will be defined in the workload definition. Examples include "application", "database", "central" etc. </param>
        /// <param name="componentRole"> Role of the component. There can be multiple roles for a same component type. Allowed values change based on the workload type and will be defined in the workload definition. Examples of Role for SAP workloads include "pas"/"aas" for application component, "ascs"/"ers" for central component, "backup", etc. </param>
        /// <param name="resources"> Resources that are part of the component. The entries in this list should be unique and correspond to a single Azure resource. </param>
        /// <param name="metadata"> Metadata pertaining to the component. </param>
        /// <param name="complianceState"> Defines the compliance state of the workload component, as per the corresponding workload definition and architecture. </param>
        /// <param name="provisioningState"> Defines the workload component provisioning state. </param>
        /// <param name="errors"> Indicates any errors on the workload component resource. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal WorkloadComponentProperties(string componentType, string componentRole, IList<ResourceConfiguration> resources, IDictionary<string, string> metadata, WorkloadComplianceState? complianceState, ResourceProvisioningState? provisioningState, ResponseError errors, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ComponentType = componentType;
            ComponentRole = componentRole;
            Resources = resources;
            Metadata = metadata;
            ComplianceState = complianceState;
            ProvisioningState = provisioningState;
            Errors = errors;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="WorkloadComponentProperties"/> for deserialization. </summary>
        internal WorkloadComponentProperties()
        {
        }

        /// <summary> Type of the component. Allowed values change based on the workload type and will be defined in the workload definition. Examples include "application", "database", "central" etc. </summary>
        public string ComponentType { get; set; }
        /// <summary> Role of the component. There can be multiple roles for a same component type. Allowed values change based on the workload type and will be defined in the workload definition. Examples of Role for SAP workloads include "pas"/"aas" for application component, "ascs"/"ers" for central component, "backup", etc. </summary>
        public string ComponentRole { get; set; }
        /// <summary> Resources that are part of the component. The entries in this list should be unique and correspond to a single Azure resource. </summary>
        public IList<ResourceConfiguration> Resources { get; }
        /// <summary> Metadata pertaining to the component. </summary>
        public IDictionary<string, string> Metadata { get; }
        /// <summary> Defines the compliance state of the workload component, as per the corresponding workload definition and architecture. </summary>
        public WorkloadComplianceState? ComplianceState { get; }
        /// <summary> Defines the workload component provisioning state. </summary>
        public ResourceProvisioningState? ProvisioningState { get; }
        /// <summary> Indicates any errors on the workload component resource. </summary>
        public ResponseError Errors { get; }
    }
}
