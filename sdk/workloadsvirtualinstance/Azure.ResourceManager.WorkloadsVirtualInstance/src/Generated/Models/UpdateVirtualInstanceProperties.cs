// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.WorkloadsVirtualInstance.Models
{
    /// <summary> Defines the update request body properties for updating the Virtual Instance resource. </summary>
    public partial class UpdateVirtualInstanceProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="UpdateVirtualInstanceProperties"/>. </summary>
        public UpdateVirtualInstanceProperties()
        {
            Metadata = new ChangeTrackingDictionary<string, string>();
            LinkedResources = new ChangeTrackingList<LinkedResource>();
        }

        /// <summary> Initializes a new instance of <see cref="UpdateVirtualInstanceProperties"/>. </summary>
        /// <param name="workloadInfo"> The workload specific information including the workload type, definition ID and version. </param>
        /// <param name="environmentType"> The type of environment in which the workload system is deployed - Production / Non Production. </param>
        /// <param name="environmentLabel"> The user defined label indicating the sub category of the environment in which the workload system is deployed. </param>
        /// <param name="systemPriority"> The priority of the workload system. The value must be an integer between 0 (highest priority) and 9 (lowest priority). </param>
        /// <param name="systemLifecycleStage"> The current stage in the lifecycle of the workload system. </param>
        /// <param name="metadata"> Metadata pertaining to the workload system. </param>
        /// <param name="linkedResources"> The list of the linked resource objects. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal UpdateVirtualInstanceProperties(WorkloadInfo workloadInfo, EnvironmentType? environmentType, string environmentLabel, int? systemPriority, SystemLifecycleStage? systemLifecycleStage, IDictionary<string, string> metadata, IList<LinkedResource> linkedResources, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            WorkloadInfo = workloadInfo;
            EnvironmentType = environmentType;
            EnvironmentLabel = environmentLabel;
            SystemPriority = systemPriority;
            SystemLifecycleStage = systemLifecycleStage;
            Metadata = metadata;
            LinkedResources = linkedResources;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The workload specific information including the workload type, definition ID and version. </summary>
        public WorkloadInfo WorkloadInfo { get; set; }
        /// <summary> The type of environment in which the workload system is deployed - Production / Non Production. </summary>
        public EnvironmentType? EnvironmentType { get; set; }
        /// <summary> The user defined label indicating the sub category of the environment in which the workload system is deployed. </summary>
        public string EnvironmentLabel { get; set; }
        /// <summary> The priority of the workload system. The value must be an integer between 0 (highest priority) and 9 (lowest priority). </summary>
        public int? SystemPriority { get; set; }
        /// <summary> The current stage in the lifecycle of the workload system. </summary>
        public SystemLifecycleStage? SystemLifecycleStage { get; set; }
        /// <summary> Metadata pertaining to the workload system. </summary>
        public IDictionary<string, string> Metadata { get; }
        /// <summary> The list of the linked resource objects. </summary>
        public IList<LinkedResource> LinkedResources { get; }
    }
}
