// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.WorkloadsVirtualInstance.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmWorkloadsVirtualInstanceModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="WorkloadsVirtualInstance.VirtualInstanceData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="identity"> The managed service identities assigned to this resource. </param>
        /// <param name="kind"> Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value. </param>
        /// <returns> A new <see cref="WorkloadsVirtualInstance.VirtualInstanceData"/> instance for mocking. </returns>
        public static VirtualInstanceData VirtualInstanceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, VirtualInstanceProperties properties = null, ManagedServiceIdentity identity = null, string kind = null)
        {
            tags ??= new Dictionary<string, string>();

            return new VirtualInstanceData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                identity,
                kind,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.VirtualInstanceProperties"/>. </summary>
        /// <param name="workloadInfo"> The workload specific information including the workload type, definition ID and version. </param>
        /// <param name="environmentType"> The type of environment in which the workload system is deployed - Production / Non Production. </param>
        /// <param name="environmentLabel"> The user defined label indicating the sub category of the environment in which the workload system is deployed. </param>
        /// <param name="systemPriority"> The priority of the workload system. The value must be an integer between 0 (highest priority) and 9 (lowest priority). </param>
        /// <param name="systemLifecycleStage"> The current stage in the lifecycle of the workload system. </param>
        /// <param name="metadata"> Metadata pertaining to the workload system. </param>
        /// <param name="linkedResources"> The list of the linked resource objects. </param>
        /// <param name="complianceState"> Defines the compliance state of the virtual instance, as per the corresponding workload definition and architecture. </param>
        /// <param name="provisioningState"> Defines the virtual instance provisioning state. </param>
        /// <param name="errors"> Indicates any errors on the Virtual Instance resource. </param>
        /// <returns> A new <see cref="Models.VirtualInstanceProperties"/> instance for mocking. </returns>
        public static VirtualInstanceProperties VirtualInstanceProperties(WorkloadInfo workloadInfo = null, EnvironmentType environmentType = default, string environmentLabel = null, int? systemPriority = null, SystemLifecycleStage systemLifecycleStage = default, IDictionary<string, string> metadata = null, IEnumerable<LinkedResource> linkedResources = null, WorkloadComplianceState? complianceState = null, ResourceProvisioningState? provisioningState = null, ResponseError errors = null)
        {
            metadata ??= new Dictionary<string, string>();
            linkedResources ??= new List<LinkedResource>();

            return new VirtualInstanceProperties(
                workloadInfo,
                environmentType,
                environmentLabel,
                systemPriority,
                systemLifecycleStage,
                metadata,
                linkedResources?.ToList(),
                complianceState,
                provisioningState,
                errors,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="WorkloadsVirtualInstance.WorkloadComponentData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="WorkloadsVirtualInstance.WorkloadComponentData"/> instance for mocking. </returns>
        public static WorkloadComponentData WorkloadComponentData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, WorkloadComponentProperties properties = null)
        {
            tags ??= new Dictionary<string, string>();

            return new WorkloadComponentData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.WorkloadComponentProperties"/>. </summary>
        /// <param name="componentType"> Type of the component. Allowed values change based on the workload type and will be defined in the workload definition. Examples include "application", "database", "central" etc. </param>
        /// <param name="componentRole"> Role of the component. There can be multiple roles for a same component type. Allowed values change based on the workload type and will be defined in the workload definition. Examples of Role for SAP workloads include "pas"/"aas" for application component, "ascs"/"ers" for central component, "backup", etc. </param>
        /// <param name="resources"> Resources that are part of the component. The entries in this list should be unique and correspond to a single Azure resource. </param>
        /// <param name="metadata"> Metadata pertaining to the component. </param>
        /// <param name="complianceState"> Defines the compliance state of the workload component, as per the corresponding workload definition and architecture. </param>
        /// <param name="provisioningState"> Defines the workload component provisioning state. </param>
        /// <param name="errors"> Indicates any errors on the workload component resource. </param>
        /// <returns> A new <see cref="Models.WorkloadComponentProperties"/> instance for mocking. </returns>
        public static WorkloadComponentProperties WorkloadComponentProperties(string componentType = null, string componentRole = null, IEnumerable<ResourceConfiguration> resources = null, IDictionary<string, string> metadata = null, WorkloadComplianceState? complianceState = null, ResourceProvisioningState? provisioningState = null, ResponseError errors = null)
        {
            resources ??= new List<ResourceConfiguration>();
            metadata ??= new Dictionary<string, string>();

            return new WorkloadComponentProperties(
                componentType,
                componentRole,
                resources?.ToList(),
                metadata,
                complianceState,
                provisioningState,
                errors,
                serializedAdditionalRawData: null);
        }
    }
}
