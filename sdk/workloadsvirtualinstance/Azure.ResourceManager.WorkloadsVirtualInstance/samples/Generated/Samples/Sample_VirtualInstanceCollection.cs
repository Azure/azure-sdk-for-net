// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.WorkloadsVirtualInstance.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.WorkloadsVirtualInstance.Samples
{
    public partial class Sample_VirtualInstanceCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_RegisterAVirtualInstanceSample1()
        {
            // Generated from example definition: 2025-06-01-preview/VirtualInstances_Create.json
            // this example is just showing the usage of "VirtualInstance_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "49d64d54-e966-4c46-a868-1999802b762c";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this VirtualInstanceResource
            VirtualInstanceCollection collection = resourceGroupResource.GetVirtualInstances();

            // invoke the operation
            string virtualInstanceName = "testvi";
            VirtualInstanceData data = new VirtualInstanceData(new AzureLocation("eastus2euap"))
            {
                Properties = new VirtualInstanceProperties(new WorkloadInfo("sap", "HighAvailability")
                {
                    WorkloadDefinitionVersion = "latest",
                }, EnvironmentType.NonProduction, SystemLifecycleStage.Active)
                {
                    EnvironmentLabel = "Test",
                    SystemPriority = 3,
                    Metadata =
{
["SAPSID"] = "RS1",
["LandscapeIdentifier"] = "abcdefgh-1234-5678-ijkl-mn1234567890"
},
                    LinkedResources = { new LinkedResource(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Workloads/virtualInstances/supportvi1"), LinkType.Dependency), new LinkedResource(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/support-rg/providers/Microsoft.Workloads/virtualInstances/supportvi2"), LinkType.Dependency), new LinkedResource(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/support-rg/providers/Microsoft.Workloads/virtualInstances/drvi"), LinkType.DisasterRecovery) },
                },
                Identity = new ManagedServiceIdentity("UserAssigned")
                {
                    UserAssignedIdentities =
{
[new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/saprise-apprg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/saprisetestingmsi")] = new UserAssignedIdentity()
},
                },
                Tags =
{
["TestSystem"] = "true"
},
            };
            ArmOperation<VirtualInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, virtualInstanceName, data);
            VirtualInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            VirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_GetAVirtualInstanceSample1()
        {
            // Generated from example definition: 2025-06-01-preview/VirtualInstances_Get.json
            // this example is just showing the usage of "VirtualInstance_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "49d64d54-e966-4c46-a868-1999802b762c";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this VirtualInstanceResource
            VirtualInstanceCollection collection = resourceGroupResource.GetVirtualInstances();

            // invoke the operation
            string virtualInstanceName = "testvi";
            VirtualInstanceResource result = await collection.GetAsync(virtualInstanceName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            VirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_ListVirtualInstancesByResourceGroupSample1()
        {
            // Generated from example definition: 2025-06-01-preview/VirtualInstances_ListByResourceGroup.json
            // this example is just showing the usage of "VirtualInstance_ListByResourceGroup" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "49d64d54-e966-4c46-a868-1999802b762c";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this VirtualInstanceResource
            VirtualInstanceCollection collection = resourceGroupResource.GetVirtualInstances();

            // invoke the operation and iterate over the result
            await foreach (VirtualInstanceResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                VirtualInstanceData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_GetAVirtualInstanceSample1()
        {
            // Generated from example definition: 2025-06-01-preview/VirtualInstances_Get.json
            // this example is just showing the usage of "VirtualInstance_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "49d64d54-e966-4c46-a868-1999802b762c";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this VirtualInstanceResource
            VirtualInstanceCollection collection = resourceGroupResource.GetVirtualInstances();

            // invoke the operation
            string virtualInstanceName = "testvi";
            bool result = await collection.ExistsAsync(virtualInstanceName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_GetAVirtualInstanceSample1()
        {
            // Generated from example definition: 2025-06-01-preview/VirtualInstances_Get.json
            // this example is just showing the usage of "VirtualInstance_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "49d64d54-e966-4c46-a868-1999802b762c";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this VirtualInstanceResource
            VirtualInstanceCollection collection = resourceGroupResource.GetVirtualInstances();

            // invoke the operation
            string virtualInstanceName = "testvi";
            NullableResponse<VirtualInstanceResource> response = await collection.GetIfExistsAsync(virtualInstanceName);
            VirtualInstanceResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                VirtualInstanceData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}
