// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.WorkloadsVirtualInstance.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.WorkloadsVirtualInstance.Samples
{
    public partial class Sample_VirtualInstanceResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_GetAVirtualInstanceSample1()
        {
            // Generated from example definition: 2025-06-01-preview/VirtualInstances_Get.json
            // this example is just showing the usage of "VirtualInstance_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this VirtualInstanceResource created on azure
            // for more information of creating VirtualInstanceResource, please refer to the document of VirtualInstanceResource
            string subscriptionId = "49d64d54-e966-4c46-a868-1999802b762c";
            string resourceGroupName = "test-rg";
            string virtualInstanceName = "testvi";
            ResourceIdentifier virtualInstanceResourceId = VirtualInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, virtualInstanceName);
            VirtualInstanceResource virtualInstance = client.GetVirtualInstanceResource(virtualInstanceResourceId);

            // invoke the operation
            VirtualInstanceResource result = await virtualInstance.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            VirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_DeleteAVirtualInstanceSample1()
        {
            // Generated from example definition: 2025-06-01-preview/VirtualInstances_Delete.json
            // this example is just showing the usage of "VirtualInstance_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this VirtualInstanceResource created on azure
            // for more information of creating VirtualInstanceResource, please refer to the document of VirtualInstanceResource
            string subscriptionId = "49d64d54-e966-4c46-a868-1999802b762c";
            string resourceGroupName = "test-rg";
            string virtualInstanceName = "testvi";
            ResourceIdentifier virtualInstanceResourceId = VirtualInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, virtualInstanceName);
            VirtualInstanceResource virtualInstance = client.GetVirtualInstanceResource(virtualInstanceResourceId);

            // invoke the operation
            await virtualInstance.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_UpdateAVirtualInstanceSample1()
        {
            // Generated from example definition: 2025-06-01-preview/VirtualInstances_Update.json
            // this example is just showing the usage of "VirtualInstance_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this VirtualInstanceResource created on azure
            // for more information of creating VirtualInstanceResource, please refer to the document of VirtualInstanceResource
            string subscriptionId = "49d64d54-e966-4c46-a868-1999802b762c";
            string resourceGroupName = "test-rg";
            string virtualInstanceName = "testvi";
            ResourceIdentifier virtualInstanceResourceId = VirtualInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, virtualInstanceName);
            VirtualInstanceResource virtualInstance = client.GetVirtualInstanceResource(virtualInstanceResourceId);

            // invoke the operation
            VirtualInstancePatch patch = new VirtualInstancePatch
            {
                Tags =
{
["TestSystem"] = "false",
["RetainUntil"] = "2024-12-01"
},
                Identity = new ManagedServiceIdentity("UserAssigned")
                {
                    UserAssignedIdentities =
{
[new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/saprise-apprg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/saprisetestingmsinew")] = new UserAssignedIdentity()
},
                },
                Properties = new UpdateVirtualInstanceProperties
                {
                    EnvironmentType = EnvironmentType.NonProduction,
                    EnvironmentLabel = "Test",
                    SystemPriority = 4,
                    SystemLifecycleStage = SystemLifecycleStage.Active,
                    Metadata =
{
["SAPSID"] = "RS2",
["LandscapeIdentifier"] = "abcdefgh-1234-5678-ijkl-mn1234567891"
},
                },
            };
            ArmOperation<VirtualInstanceResource> lro = await virtualInstance.UpdateAsync(WaitUntil.Completed, patch);
            VirtualInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            VirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
