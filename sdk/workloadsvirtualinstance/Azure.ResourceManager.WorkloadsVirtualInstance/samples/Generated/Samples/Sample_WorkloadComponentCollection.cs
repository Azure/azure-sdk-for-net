// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.WorkloadsVirtualInstance.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.WorkloadsVirtualInstance.Samples
{
    public partial class Sample_WorkloadComponentCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_CreateAWorkloadComponentSample1()
        {
            // Generated from example definition: 2025-06-01-preview/WorkloadComponents_Create.json
            // this example is just showing the usage of "WorkloadComponent_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this VirtualInstanceResource created on azure
            // for more information of creating VirtualInstanceResource, please refer to the document of VirtualInstanceResource
            string subscriptionId = "49d64d54-e966-4c46-a868-1999802b762c";
            string resourceGroupName = "test-rg";
            string virtualInstanceName = "testvi";
            ResourceIdentifier virtualInstanceResourceId = VirtualInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, virtualInstanceName);
            VirtualInstanceResource virtualInstance = client.GetVirtualInstanceResource(virtualInstanceResourceId);

            // get the collection of this WorkloadComponentResource
            WorkloadComponentCollection collection = virtualInstance.GetWorkloadComponents();

            // invoke the operation
            string componentName = "db01";
            WorkloadComponentData data = new WorkloadComponentData(new AzureLocation("eastus2euap"))
            {
                Properties = new WorkloadComponentProperties("database", new ResourceConfiguration[]
            {
new ResourceConfiguration(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/saprise-dbrg/providers/Microsoft.Compute/virtualMachines/rs1dbvm0")),
new ResourceConfiguration(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/saprise-dbrg/providers/Microsoft.Compute/virtualMachines/rs1dbvm1"))
            })
                {
                    ComponentRole = "default",
                    Metadata =
{
["DBType"] = "HANA"
},
                },
                Tags =
{
["TestSystem"] = "true"
},
            };
            ArmOperation<WorkloadComponentResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, componentName, data);
            WorkloadComponentResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            WorkloadComponentData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_GetAWorkloadComponentSample1()
        {
            // Generated from example definition: 2025-06-01-preview/WorkloadComponents_Get.json
            // this example is just showing the usage of "WorkloadComponent_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this VirtualInstanceResource created on azure
            // for more information of creating VirtualInstanceResource, please refer to the document of VirtualInstanceResource
            string subscriptionId = "49d64d54-e966-4c46-a868-1999802b762c";
            string resourceGroupName = "test-rg";
            string virtualInstanceName = "testvi";
            ResourceIdentifier virtualInstanceResourceId = VirtualInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, virtualInstanceName);
            VirtualInstanceResource virtualInstance = client.GetVirtualInstanceResource(virtualInstanceResourceId);

            // get the collection of this WorkloadComponentResource
            WorkloadComponentCollection collection = virtualInstance.GetWorkloadComponents();

            // invoke the operation
            string componentName = "db01";
            WorkloadComponentResource result = await collection.GetAsync(componentName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            WorkloadComponentData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_ListWorkloadComponentsByVirtualInstanceSample1()
        {
            // Generated from example definition: 2025-06-01-preview/WorkloadComponents_List.json
            // this example is just showing the usage of "WorkloadComponent_List" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this VirtualInstanceResource created on azure
            // for more information of creating VirtualInstanceResource, please refer to the document of VirtualInstanceResource
            string subscriptionId = "49d64d54-e966-4c46-a868-1999802b762c";
            string resourceGroupName = "test-rg";
            string virtualInstanceName = "testvi";
            ResourceIdentifier virtualInstanceResourceId = VirtualInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, virtualInstanceName);
            VirtualInstanceResource virtualInstance = client.GetVirtualInstanceResource(virtualInstanceResourceId);

            // get the collection of this WorkloadComponentResource
            WorkloadComponentCollection collection = virtualInstance.GetWorkloadComponents();

            // invoke the operation and iterate over the result
            await foreach (WorkloadComponentResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                WorkloadComponentData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_GetAWorkloadComponentSample1()
        {
            // Generated from example definition: 2025-06-01-preview/WorkloadComponents_Get.json
            // this example is just showing the usage of "WorkloadComponent_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this VirtualInstanceResource created on azure
            // for more information of creating VirtualInstanceResource, please refer to the document of VirtualInstanceResource
            string subscriptionId = "49d64d54-e966-4c46-a868-1999802b762c";
            string resourceGroupName = "test-rg";
            string virtualInstanceName = "testvi";
            ResourceIdentifier virtualInstanceResourceId = VirtualInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, virtualInstanceName);
            VirtualInstanceResource virtualInstance = client.GetVirtualInstanceResource(virtualInstanceResourceId);

            // get the collection of this WorkloadComponentResource
            WorkloadComponentCollection collection = virtualInstance.GetWorkloadComponents();

            // invoke the operation
            string componentName = "db01";
            bool result = await collection.ExistsAsync(componentName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_GetAWorkloadComponentSample1()
        {
            // Generated from example definition: 2025-06-01-preview/WorkloadComponents_Get.json
            // this example is just showing the usage of "WorkloadComponent_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this VirtualInstanceResource created on azure
            // for more information of creating VirtualInstanceResource, please refer to the document of VirtualInstanceResource
            string subscriptionId = "49d64d54-e966-4c46-a868-1999802b762c";
            string resourceGroupName = "test-rg";
            string virtualInstanceName = "testvi";
            ResourceIdentifier virtualInstanceResourceId = VirtualInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, virtualInstanceName);
            VirtualInstanceResource virtualInstance = client.GetVirtualInstanceResource(virtualInstanceResourceId);

            // get the collection of this WorkloadComponentResource
            WorkloadComponentCollection collection = virtualInstance.GetWorkloadComponents();

            // invoke the operation
            string componentName = "db01";
            NullableResponse<WorkloadComponentResource> response = await collection.GetIfExistsAsync(componentName);
            WorkloadComponentResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                WorkloadComponentData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}
