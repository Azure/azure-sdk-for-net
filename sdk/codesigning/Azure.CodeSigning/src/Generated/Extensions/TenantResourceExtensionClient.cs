// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Microsoft.TrustedSigning.Models;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;

namespace Azure.CodeSigning
{
    /// <summary> A class to add extension methods to TenantResource. </summary>
    internal partial class TenantResourceExtensionClient : ArmResource
    {
        private ClientDiagnostics _codeSigningAccountClientDiagnostics;
        private CodeSigningAccountRestOperations _codeSigningAccountRestClient;
        private ClientDiagnostics _certificateProfileClientDiagnostics;
        private CertificateProfileRestOperations _certificateProfileRestClient;

        /// <summary> Initializes a new instance of the <see cref="TenantResourceExtensionClient"/> class for mocking. </summary>
        protected TenantResourceExtensionClient()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="TenantResourceExtensionClient"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal TenantResourceExtensionClient(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics CodeSigningAccountClientDiagnostics => _codeSigningAccountClientDiagnostics ??= new ClientDiagnostics("Azure.CodeSigning", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private CodeSigningAccountRestOperations CodeSigningAccountRestClient => _codeSigningAccountRestClient ??= new CodeSigningAccountRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics CertificateProfileClientDiagnostics => _certificateProfileClientDiagnostics ??= new ClientDiagnostics("Azure.CodeSigning", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private CertificateProfileRestOperations CertificateProfileRestClient => _certificateProfileRestClient ??= new CertificateProfileRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary>
        /// Create a Code Signing Account
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CodeSigning/codeSigningAccounts/{accountName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CodeSigningAccount_Create</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Code Signing account name. </param>
        /// <param name="codeSigningAccount"> Parameters to create the code signing account. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation<CodeSigningAccount>> CreateCodeSigningAccountAsync(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string accountName, CodeSigningAccount codeSigningAccount = null, CancellationToken cancellationToken = default)
        {
            using var scope = CodeSigningAccountClientDiagnostics.CreateScope("TenantResourceExtensionClient.CreateCodeSigningAccount");
            scope.Start();
            try
            {
                var response = await CodeSigningAccountRestClient.CreateAsync(subscriptionId, resourceGroupName, accountName, codeSigningAccount, cancellationToken).ConfigureAwait(false);
                var operation = new CodeSigningArmOperation<CodeSigningAccount>(new CodeSigningAccountOperationSource(), CodeSigningAccountClientDiagnostics, Pipeline, CodeSigningAccountRestClient.CreateCreateRequest(subscriptionId, resourceGroupName, accountName, codeSigningAccount).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create a Code Signing Account
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CodeSigning/codeSigningAccounts/{accountName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CodeSigningAccount_Create</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Code Signing account name. </param>
        /// <param name="codeSigningAccount"> Parameters to create the code signing account. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation<CodeSigningAccount> CreateCodeSigningAccount(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string accountName, CodeSigningAccount codeSigningAccount = null, CancellationToken cancellationToken = default)
        {
            using var scope = CodeSigningAccountClientDiagnostics.CreateScope("TenantResourceExtensionClient.CreateCodeSigningAccount");
            scope.Start();
            try
            {
                var response = CodeSigningAccountRestClient.Create(subscriptionId, resourceGroupName, accountName, codeSigningAccount, cancellationToken);
                var operation = new CodeSigningArmOperation<CodeSigningAccount>(new CodeSigningAccountOperationSource(), CodeSigningAccountClientDiagnostics, Pipeline, CodeSigningAccountRestClient.CreateCreateRequest(subscriptionId, resourceGroupName, accountName, codeSigningAccount).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Update a code signing account
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CodeSigning/codeSigningAccounts/{accountName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CodeSigningAccount_Update</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Code Signing account name. </param>
        /// <param name="patch"> Parameters supplied to update code signing account. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<CodeSigningAccount>> UpdateCodeSigningAccountAsync(Guid subscriptionId, string resourceGroupName, string accountName, CodeSigningAccountPatch patch, CancellationToken cancellationToken = default)
        {
            using var scope = CodeSigningAccountClientDiagnostics.CreateScope("TenantResourceExtensionClient.UpdateCodeSigningAccount");
            scope.Start();
            try
            {
                var response = await CodeSigningAccountRestClient.UpdateAsync(subscriptionId, resourceGroupName, accountName, patch, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Update a code signing account
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CodeSigning/codeSigningAccounts/{accountName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CodeSigningAccount_Update</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Code Signing account name. </param>
        /// <param name="patch"> Parameters supplied to update code signing account. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<CodeSigningAccount> UpdateCodeSigningAccount(Guid subscriptionId, string resourceGroupName, string accountName, CodeSigningAccountPatch patch, CancellationToken cancellationToken = default)
        {
            using var scope = CodeSigningAccountClientDiagnostics.CreateScope("TenantResourceExtensionClient.UpdateCodeSigningAccount");
            scope.Start();
            try
            {
                var response = CodeSigningAccountRestClient.Update(subscriptionId, resourceGroupName, accountName, patch, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a Code Signing Account
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CodeSigning/codeSigningAccounts/{accountName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CodeSigningAccount_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Code Signing account name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<CodeSigningAccount>> GetCodeSigningAccountAsync(Guid subscriptionId, string resourceGroupName, string accountName, CancellationToken cancellationToken = default)
        {
            using var scope = CodeSigningAccountClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetCodeSigningAccount");
            scope.Start();
            try
            {
                var response = await CodeSigningAccountRestClient.GetAsync(subscriptionId, resourceGroupName, accountName, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a Code Signing Account
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CodeSigning/codeSigningAccounts/{accountName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CodeSigningAccount_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Code Signing account name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<CodeSigningAccount> GetCodeSigningAccount(Guid subscriptionId, string resourceGroupName, string accountName, CancellationToken cancellationToken = default)
        {
            using var scope = CodeSigningAccountClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetCodeSigningAccount");
            scope.Start();
            try
            {
                var response = CodeSigningAccountRestClient.Get(subscriptionId, resourceGroupName, accountName, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete Code Signing Account
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CodeSigning/codeSigningAccounts/{accountName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CodeSigningAccount_Delete</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Code Signing account name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation> DeleteCodeSigningAccountAsync(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string accountName, CancellationToken cancellationToken = default)
        {
            using var scope = CodeSigningAccountClientDiagnostics.CreateScope("TenantResourceExtensionClient.DeleteCodeSigningAccount");
            scope.Start();
            try
            {
                var response = await CodeSigningAccountRestClient.DeleteAsync(subscriptionId, resourceGroupName, accountName, cancellationToken).ConfigureAwait(false);
                var operation = new CodeSigningArmOperation(CodeSigningAccountClientDiagnostics, Pipeline, CodeSigningAccountRestClient.CreateDeleteRequest(subscriptionId, resourceGroupName, accountName).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete Code Signing Account
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CodeSigning/codeSigningAccounts/{accountName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CodeSigningAccount_Delete</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Code Signing account name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation DeleteCodeSigningAccount(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string accountName, CancellationToken cancellationToken = default)
        {
            using var scope = CodeSigningAccountClientDiagnostics.CreateScope("TenantResourceExtensionClient.DeleteCodeSigningAccount");
            scope.Start();
            try
            {
                var response = CodeSigningAccountRestClient.Delete(subscriptionId, resourceGroupName, accountName, cancellationToken);
                var operation = new CodeSigningArmOperation(CodeSigningAccountClientDiagnostics, Pipeline, CodeSigningAccountRestClient.CreateDeleteRequest(subscriptionId, resourceGroupName, accountName).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Lists Code Signing Accounts within a subscription
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.CodeSigning/codeSigningAccounts</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CodeSigningAccount_ListBySubscription</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="CodeSigningAccount" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<CodeSigningAccount> GetCodeSigningAccountsBySubscriptionAsync(Guid subscriptionId, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => CodeSigningAccountRestClient.CreateListBySubscriptionRequest(subscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CodeSigningAccountRestClient.CreateListBySubscriptionNextPageRequest(nextLink, subscriptionId);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, CodeSigningAccount.DeserializeCodeSigningAccount, CodeSigningAccountClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetCodeSigningAccountsBySubscription", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Lists Code Signing Accounts within a subscription
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.CodeSigning/codeSigningAccounts</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CodeSigningAccount_ListBySubscription</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="CodeSigningAccount" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<CodeSigningAccount> GetCodeSigningAccountsBySubscription(Guid subscriptionId, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => CodeSigningAccountRestClient.CreateListBySubscriptionRequest(subscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CodeSigningAccountRestClient.CreateListBySubscriptionNextPageRequest(nextLink, subscriptionId);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, CodeSigningAccount.DeserializeCodeSigningAccount, CodeSigningAccountClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetCodeSigningAccountsBySubscription", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List Code Signing Accounts within a resource group
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CodeSigning/codeSigningAccounts</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CodeSigningAccount_ListByResourceGroup</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="CodeSigningAccount" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<CodeSigningAccount> GetCodeSigningAccountsByResourceGroupAsync(Guid subscriptionId, string resourceGroupName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => CodeSigningAccountRestClient.CreateListByResourceGroupRequest(subscriptionId, resourceGroupName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CodeSigningAccountRestClient.CreateListByResourceGroupNextPageRequest(nextLink, subscriptionId, resourceGroupName);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, CodeSigningAccount.DeserializeCodeSigningAccount, CodeSigningAccountClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetCodeSigningAccountsByResourceGroup", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List Code Signing Accounts within a resource group
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CodeSigning/codeSigningAccounts</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CodeSigningAccount_ListByResourceGroup</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="CodeSigningAccount" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<CodeSigningAccount> GetCodeSigningAccountsByResourceGroup(Guid subscriptionId, string resourceGroupName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => CodeSigningAccountRestClient.CreateListByResourceGroupRequest(subscriptionId, resourceGroupName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CodeSigningAccountRestClient.CreateListByResourceGroupNextPageRequest(nextLink, subscriptionId, resourceGroupName);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, CodeSigningAccount.DeserializeCodeSigningAccount, CodeSigningAccountClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetCodeSigningAccountsByResourceGroup", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks that the code signing account name is valid and is not already in use.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.CodeSigning/checkNameAvailability</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CodeSigningAccount_CheckNameAvailability</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="accountName"> The name of the code signing account. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<CheckNameAvailabilityResult>> CheckNameAvailabilityCodeSigningAccountAsync(Guid subscriptionId, CheckNameAvailability accountName, CancellationToken cancellationToken = default)
        {
            using var scope = CodeSigningAccountClientDiagnostics.CreateScope("TenantResourceExtensionClient.CheckNameAvailabilityCodeSigningAccount");
            scope.Start();
            try
            {
                var response = await CodeSigningAccountRestClient.CheckNameAvailabilityAsync(subscriptionId, accountName, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks that the code signing account name is valid and is not already in use.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.CodeSigning/checkNameAvailability</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CodeSigningAccount_CheckNameAvailability</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="accountName"> The name of the code signing account. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<CheckNameAvailabilityResult> CheckNameAvailabilityCodeSigningAccount(Guid subscriptionId, CheckNameAvailability accountName, CancellationToken cancellationToken = default)
        {
            using var scope = CodeSigningAccountClientDiagnostics.CreateScope("TenantResourceExtensionClient.CheckNameAvailabilityCodeSigningAccount");
            scope.Start();
            try
            {
                var response = CodeSigningAccountRestClient.CheckNameAvailability(subscriptionId, accountName, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List certificate profiles within a code signing account
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CodeSigning/codeSigningAccounts/{accountName}/certificateProfiles</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CertificateProfile_ListByCodeSigningAccount</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Code Signing account name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="CertificateProfile" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<CertificateProfile> GetCertificateProfilesByCodeSigningAccountAsync(Guid subscriptionId, string resourceGroupName, string accountName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => CertificateProfileRestClient.CreateListByCodeSigningAccountRequest(subscriptionId, resourceGroupName, accountName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CertificateProfileRestClient.CreateListByCodeSigningAccountNextPageRequest(nextLink, subscriptionId, resourceGroupName, accountName);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, CertificateProfile.DeserializeCertificateProfile, CertificateProfileClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetCertificateProfilesByCodeSigningAccount", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List certificate profiles within a code signing account
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CodeSigning/codeSigningAccounts/{accountName}/certificateProfiles</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CertificateProfile_ListByCodeSigningAccount</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Code Signing account name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="CertificateProfile" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<CertificateProfile> GetCertificateProfilesByCodeSigningAccount(Guid subscriptionId, string resourceGroupName, string accountName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => CertificateProfileRestClient.CreateListByCodeSigningAccountRequest(subscriptionId, resourceGroupName, accountName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CertificateProfileRestClient.CreateListByCodeSigningAccountNextPageRequest(nextLink, subscriptionId, resourceGroupName, accountName);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, CertificateProfile.DeserializeCertificateProfile, CertificateProfileClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetCertificateProfilesByCodeSigningAccount", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Create a certificate profile
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CodeSigning/codeSigningAccounts/{accountName}/certificateProfiles/{profileName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CertificateProfile_Create</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Code Signing account name. </param>
        /// <param name="profileName"> Certificate profile name. </param>
        /// <param name="certificateProfile"> Parameters to create the certificate profile. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation<CertificateProfile>> CreateCertificateProfileAsync(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string accountName, string profileName, CertificateProfile certificateProfile, CancellationToken cancellationToken = default)
        {
            using var scope = CertificateProfileClientDiagnostics.CreateScope("TenantResourceExtensionClient.CreateCertificateProfile");
            scope.Start();
            try
            {
                var response = await CertificateProfileRestClient.CreateAsync(subscriptionId, resourceGroupName, accountName, profileName, certificateProfile, cancellationToken).ConfigureAwait(false);
                var operation = new CodeSigningArmOperation<CertificateProfile>(new CertificateProfileOperationSource(), CertificateProfileClientDiagnostics, Pipeline, CertificateProfileRestClient.CreateCreateRequest(subscriptionId, resourceGroupName, accountName, profileName, certificateProfile).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create a certificate profile
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CodeSigning/codeSigningAccounts/{accountName}/certificateProfiles/{profileName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CertificateProfile_Create</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Code Signing account name. </param>
        /// <param name="profileName"> Certificate profile name. </param>
        /// <param name="certificateProfile"> Parameters to create the certificate profile. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation<CertificateProfile> CreateCertificateProfile(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string accountName, string profileName, CertificateProfile certificateProfile, CancellationToken cancellationToken = default)
        {
            using var scope = CertificateProfileClientDiagnostics.CreateScope("TenantResourceExtensionClient.CreateCertificateProfile");
            scope.Start();
            try
            {
                var response = CertificateProfileRestClient.Create(subscriptionId, resourceGroupName, accountName, profileName, certificateProfile, cancellationToken);
                var operation = new CodeSigningArmOperation<CertificateProfile>(new CertificateProfileOperationSource(), CertificateProfileClientDiagnostics, Pipeline, CertificateProfileRestClient.CreateCreateRequest(subscriptionId, resourceGroupName, accountName, profileName, certificateProfile).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get details of a certificate profile
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CodeSigning/codeSigningAccounts/{accountName}/certificateProfiles/{profileName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CertificateProfile_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Code Signing account name. </param>
        /// <param name="profileName"> Certificate profile name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<CertificateProfile>> GetCertificateProfileAsync(Guid subscriptionId, string resourceGroupName, string accountName, string profileName, CancellationToken cancellationToken = default)
        {
            using var scope = CertificateProfileClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetCertificateProfile");
            scope.Start();
            try
            {
                var response = await CertificateProfileRestClient.GetAsync(subscriptionId, resourceGroupName, accountName, profileName, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get details of a certificate profile
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CodeSigning/codeSigningAccounts/{accountName}/certificateProfiles/{profileName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CertificateProfile_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Code Signing account name. </param>
        /// <param name="profileName"> Certificate profile name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<CertificateProfile> GetCertificateProfile(Guid subscriptionId, string resourceGroupName, string accountName, string profileName, CancellationToken cancellationToken = default)
        {
            using var scope = CertificateProfileClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetCertificateProfile");
            scope.Start();
            try
            {
                var response = CertificateProfileRestClient.Get(subscriptionId, resourceGroupName, accountName, profileName, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Update a certificate profile
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CodeSigning/codeSigningAccounts/{accountName}/certificateProfiles/{profileName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CertificateProfile_Update</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Code Signing account name. </param>
        /// <param name="profileName"> Certificate profile name. </param>
        /// <param name="patch"> Parameters supplied to update certificate profile. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<CertificateProfile>> UpdateCertificateProfileAsync(Guid subscriptionId, string resourceGroupName, string accountName, string profileName, CertificateProfilePatch patch, CancellationToken cancellationToken = default)
        {
            using var scope = CertificateProfileClientDiagnostics.CreateScope("TenantResourceExtensionClient.UpdateCertificateProfile");
            scope.Start();
            try
            {
                var response = await CertificateProfileRestClient.UpdateAsync(subscriptionId, resourceGroupName, accountName, profileName, patch, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Update a certificate profile
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CodeSigning/codeSigningAccounts/{accountName}/certificateProfiles/{profileName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CertificateProfile_Update</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Code Signing account name. </param>
        /// <param name="profileName"> Certificate profile name. </param>
        /// <param name="patch"> Parameters supplied to update certificate profile. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<CertificateProfile> UpdateCertificateProfile(Guid subscriptionId, string resourceGroupName, string accountName, string profileName, CertificateProfilePatch patch, CancellationToken cancellationToken = default)
        {
            using var scope = CertificateProfileClientDiagnostics.CreateScope("TenantResourceExtensionClient.UpdateCertificateProfile");
            scope.Start();
            try
            {
                var response = CertificateProfileRestClient.Update(subscriptionId, resourceGroupName, accountName, profileName, patch, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete a Certificate Profile
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CodeSigning/codeSigningAccounts/{accountName}/certificateProfiles/{profileName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CertificateProfile_Delete</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Code Signing account name. </param>
        /// <param name="profileName"> Certificate profile name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation> DeleteCertificateProfileAsync(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string accountName, string profileName, CancellationToken cancellationToken = default)
        {
            using var scope = CertificateProfileClientDiagnostics.CreateScope("TenantResourceExtensionClient.DeleteCertificateProfile");
            scope.Start();
            try
            {
                var response = await CertificateProfileRestClient.DeleteAsync(subscriptionId, resourceGroupName, accountName, profileName, cancellationToken).ConfigureAwait(false);
                var operation = new CodeSigningArmOperation(CertificateProfileClientDiagnostics, Pipeline, CertificateProfileRestClient.CreateDeleteRequest(subscriptionId, resourceGroupName, accountName, profileName).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete a Certificate Profile
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CodeSigning/codeSigningAccounts/{accountName}/certificateProfiles/{profileName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CertificateProfile_Delete</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Code Signing account name. </param>
        /// <param name="profileName"> Certificate profile name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation DeleteCertificateProfile(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string accountName, string profileName, CancellationToken cancellationToken = default)
        {
            using var scope = CertificateProfileClientDiagnostics.CreateScope("TenantResourceExtensionClient.DeleteCertificateProfile");
            scope.Start();
            try
            {
                var response = CertificateProfileRestClient.Delete(subscriptionId, resourceGroupName, accountName, profileName, cancellationToken);
                var operation = new CodeSigningArmOperation(CertificateProfileClientDiagnostics, Pipeline, CertificateProfileRestClient.CreateDeleteRequest(subscriptionId, resourceGroupName, accountName, profileName).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
