// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure;

namespace Azure.CodeSigning
{
    /// <summary> Model factory for models. </summary>
    public static partial class CodeSigningModelFactory
    {
        /// <summary> Initializes a new instance of ExtendedKeyUsage. </summary>
        /// <param name="ekus"> An element of ekus. </param>
        /// <returns> A new <see cref="CodeSigning.ExtendedKeyUsage"/> instance for mocking. </returns>
        public static ExtendedKeyUsage ExtendedKeyUsage(IEnumerable<string> ekus = null)
        {
            ekus ??= new List<string>();

            return new ExtendedKeyUsage(ekus?.ToList());
        }

        /// <summary> Initializes a new instance of CodeSignOperationStatus. </summary>
        /// <param name="id"> Unique Id of the operation. </param>
        /// <param name="signResult"> The result of the codesign operation including the signature and signing certificate. </param>
        /// <returns> A new <see cref="CodeSigning.CodeSignOperationStatus"/> instance for mocking. </returns>
        public static CodeSignOperationStatus CodeSignOperationStatus(string id = null, CodeSignResult signResult = null)
        {
            return new CodeSignOperationStatus(id, signResult);
        }

        /// <summary> Initializes a new instance of CodeSignResult. </summary>
        /// <param name="operationId"> Response Id of the codesign operation. </param>
        /// <param name="signature"> Digital signature of the requested content digest. </param>
        /// <param name="signingCertificate">
        /// Signing certificate corresponding to the private key used to codesign the requested
        /// digest.
        /// </param>
        /// <returns> A new <see cref="CodeSigning.CodeSignResult"/> instance for mocking. </returns>
        public static CodeSignResult CodeSignResult(string operationId = null, BinaryData signature = null, BinaryData signingCertificate = null)
        {
            return new CodeSignResult(operationId, signature, signingCertificate);
        }
    }
}
