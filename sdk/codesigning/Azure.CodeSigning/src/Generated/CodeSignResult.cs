// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure.Core;

namespace Azure.CodeSigning
{
    /// <summary> The sign status model. </summary>
    public partial class CodeSignResult
    {
        /// <summary> Initializes a new instance of CodeSignResult. </summary>
        /// <param name="operationId"> Response Id of the codesign operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="operationId"/> is null. </exception>
        internal CodeSignResult(string operationId)
        {
            Argument.AssertNotNull(operationId, nameof(operationId));

            OperationId = operationId;
        }

        /// <summary> Initializes a new instance of CodeSignResult. </summary>
        /// <param name="operationId"> Response Id of the codesign operation. </param>
        /// <param name="signature"> Digital signature of the requested content digest. </param>
        /// <param name="signingCertificate">
        /// Signing certificate corresponding to the private key used to codesign the requested
        /// digest.
        /// </param>
        internal CodeSignResult(string operationId, BinaryData signature, BinaryData signingCertificate)
        {
            OperationId = operationId;
            Signature = signature;
            SigningCertificate = signingCertificate;
        }

        /// <summary> Response Id of the codesign operation. </summary>
        public string OperationId { get; }
        /// <summary>
        /// Digital signature of the requested content digest.
        /// <para>
        /// To assign a byte[] to this property use <see cref="BinaryData.FromBytes(byte[])"/>.
        /// The byte[] will be serialized to a Base64 encoded string.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromBytes(new byte[] { 1, 2, 3 })</term>
        /// <description>Creates a payload of "AQID".</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData Signature { get; }
        /// <summary>
        /// Signing certificate corresponding to the private key used to codesign the requested
        /// digest.
        /// <para>
        /// To assign a byte[] to this property use <see cref="BinaryData.FromBytes(byte[])"/>.
        /// The byte[] will be serialized to a Base64 encoded string.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromBytes(new byte[] { 1, 2, 3 })</term>
        /// <description>Creates a payload of "AQID".</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData SigningCertificate { get; }
    }
}
