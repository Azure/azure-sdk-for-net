// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.CodeSigning
{
    /// <summary> The codesign request information to be signed by the service. </summary>
    public partial class CodeSigningSubmissionOptions
    {
        /// <summary> Initializes a new instance of CodeSigningSubmissionOptions. </summary>
        /// <param name="signatureAlgorithm"> The supported signature algorithm identifiers. </param>
        /// <param name="digest"> Content digest to codesign. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="digest"/> is null. </exception>
        public CodeSigningSubmissionOptions(SignatureAlgorithm signatureAlgorithm, BinaryData digest)
        {
            Argument.AssertNotNull(digest, nameof(digest));

            SignatureAlgorithm = signatureAlgorithm;
            Digest = digest;
            FileHashList = new ChangeTrackingList<BinaryData>();
            AuthenticodeHashList = new ChangeTrackingList<BinaryData>();
        }

        /// <summary> Initializes a new instance of CodeSigningSubmissionOptions. </summary>
        /// <param name="signatureAlgorithm"> The supported signature algorithm identifiers. </param>
        /// <param name="digest"> Content digest to codesign. </param>
        /// <param name="fileHashList"> List of full file digital signatures. </param>
        /// <param name="authenticodeHashList"> List of authenticode digital signatures. </param>
        internal CodeSigningSubmissionOptions(SignatureAlgorithm signatureAlgorithm, BinaryData digest, IList<BinaryData> fileHashList, IList<BinaryData> authenticodeHashList)
        {
            SignatureAlgorithm = signatureAlgorithm;
            Digest = digest;
            FileHashList = fileHashList;
            AuthenticodeHashList = authenticodeHashList;
        }

        /// <summary> The supported signature algorithm identifiers. </summary>
        public SignatureAlgorithm SignatureAlgorithm { get; }
        /// <summary>
        /// Content digest to codesign.
        /// <para>
        /// To assign a byte[] to this property use <see cref="BinaryData.FromBytes(byte[])"/>.
        /// The byte[] will be serialized to a Base64 encoded string.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromBytes(new byte[] { 1, 2, 3 })</term>
        /// <description>Creates a payload of "AQID".</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData Digest { get; }
        /// <summary>
        /// List of full file digital signatures.
        /// <para>
        /// To assign an object to the element of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formated json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IList<BinaryData> FileHashList { get; }
        /// <summary>
        /// List of authenticode digital signatures.
        /// <para>
        /// To assign an object to the element of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formated json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IList<BinaryData> AuthenticodeHashList { get; }
    }
}
