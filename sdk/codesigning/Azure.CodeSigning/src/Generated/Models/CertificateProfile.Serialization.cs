// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Microsoft.TrustedSigning.Models
{
    public partial class CertificateProfile : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            writer.WritePropertyName("profileType"u8);
            writer.WriteStringValue(ProfileType.ToString());
            writer.WritePropertyName("rotationPolicy"u8);
            writer.WriteStringValue(RotationPolicy.ToString());
            writer.WritePropertyName("commonName"u8);
            writer.WriteStringValue(CommonName);
            writer.WritePropertyName("organization"u8);
            writer.WriteStringValue(Organization);
            if (Optional.IsDefined(OrganizationUnit))
            {
                writer.WritePropertyName("organizationUnit"u8);
                writer.WriteStringValue(OrganizationUnit);
            }
            if (Optional.IsDefined(IncludeStreetAddress))
            {
                writer.WritePropertyName("includeStreetAddress"u8);
                writer.WriteBooleanValue(IncludeStreetAddress.Value);
            }
            if (Optional.IsDefined(IncludeState))
            {
                writer.WritePropertyName("includeState"u8);
                writer.WriteBooleanValue(IncludeState.Value);
            }
            if (Optional.IsDefined(IncludeCity))
            {
                writer.WritePropertyName("includeCity"u8);
                writer.WriteBooleanValue(IncludeCity.Value);
            }
            if (Optional.IsDefined(IncludePostalCode))
            {
                writer.WritePropertyName("includePostalCode"u8);
                writer.WriteBooleanValue(IncludePostalCode.Value);
            }
            if (Optional.IsDefined(IncludeCountry))
            {
                writer.WritePropertyName("includeCountry"u8);
                writer.WriteBooleanValue(IncludeCountry.Value);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static CertificateProfile DeserializeCertificateProfile(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<SystemData> systemData = default;
            ProfileType profileType = default;
            RotationPolicy rotationPolicy = default;
            string commonName = default;
            string organization = default;
            Optional<string> organizationUnit = default;
            Optional<string> streetAddress = default;
            Optional<bool> includeStreetAddress = default;
            Optional<string> state = default;
            Optional<bool> includeState = default;
            Optional<string> city = default;
            Optional<bool> includeCity = default;
            Optional<string> postalCode = default;
            Optional<bool> includePostalCode = default;
            Optional<string> country = default;
            Optional<bool> includeCountry = default;
            Optional<string> enhancedKeyUsage = default;
            Optional<string> identityValidationId = default;
            Optional<ProvisioningState> provisioningState = default;
            Optional<CertificateProfileStatus> status = default;
            Optional<IReadOnlyList<Certificate>> certificates = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("profileType"u8))
                        {
                            profileType = new ProfileType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("rotationPolicy"u8))
                        {
                            rotationPolicy = new RotationPolicy(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("commonName"u8))
                        {
                            commonName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("organization"u8))
                        {
                            organization = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("organizationUnit"u8))
                        {
                            organizationUnit = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("streetAddress"u8))
                        {
                            streetAddress = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("includeStreetAddress"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            includeStreetAddress = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("state"u8))
                        {
                            state = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("includeState"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            includeState = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("city"u8))
                        {
                            city = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("includeCity"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            includeCity = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("postalCode"u8))
                        {
                            postalCode = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("includePostalCode"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            includePostalCode = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("country"u8))
                        {
                            country = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("includeCountry"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            includeCountry = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("enhancedKeyUsage"u8))
                        {
                            enhancedKeyUsage = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("identityValidationId"u8))
                        {
                            identityValidationId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("provisioningState"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            provisioningState = new ProvisioningState(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("status"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            status = new CertificateProfileStatus(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("certificates"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<Certificate> array = new List<Certificate>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(Certificate.DeserializeCertificate(item));
                            }
                            certificates = array;
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new CertificateProfile(id, name, type, systemData.Value, profileType, rotationPolicy, commonName, organization, organizationUnit.Value, streetAddress.Value, Optional.ToNullable(includeStreetAddress), state.Value, Optional.ToNullable(includeState), city.Value, Optional.ToNullable(includeCity), postalCode.Value, Optional.ToNullable(includePostalCode), country.Value, Optional.ToNullable(includeCountry), enhancedKeyUsage.Value, identityValidationId.Value, Optional.ToNullable(provisioningState), Optional.ToNullable(status), Optional.ToList(certificates));
        }
    }
}
