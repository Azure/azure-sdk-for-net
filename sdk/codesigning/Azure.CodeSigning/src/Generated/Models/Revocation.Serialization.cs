// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.Developer.Signing.Models
{
    public partial class Revocation : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(RequestedAt))
            {
                writer.WritePropertyName("requestedAt"u8);
                writer.WriteStringValue(RequestedAt);
            }
            if (Optional.IsDefined(RevokedAt))
            {
                writer.WritePropertyName("revokedAt"u8);
                writer.WriteStringValue(RevokedAt);
            }
            if (Optional.IsDefined(Reason))
            {
                writer.WritePropertyName("reason"u8);
                writer.WriteStringValue(Reason);
            }
            if (Optional.IsDefined(Remarks))
            {
                writer.WritePropertyName("remarks"u8);
                writer.WriteStringValue(Remarks);
            }
            writer.WriteEndObject();
        }

        internal static Revocation DeserializeRevocation(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> requestedAt = default;
            Optional<string> revokedAt = default;
            Optional<string> reason = default;
            Optional<string> remarks = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("requestedAt"u8))
                {
                    requestedAt = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("revokedAt"u8))
                {
                    revokedAt = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("reason"u8))
                {
                    reason = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("remarks"u8))
                {
                    remarks = property.Value.GetString();
                    continue;
                }
            }
            return new Revocation(requestedAt.Value, revokedAt.Value, reason.Value, remarks.Value);
        }
    }
}
