// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.CodeSigning;
using Azure.ResourceManager.CodeSigning.Models;

namespace Azure.ResourceManager.CodeSigning.Samples
{
    public partial class Sample_TenantResourceExtensions
    {
        // Create Code Signing Account
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateCodeSigningAccount_CreateCodeSigningAccount()
        {
            // Generated from example definition: specification/codesigning/resource-manager/Microsoft.CodeSigning/preview/2023-04-30-preview/examples/createCodeSigningAccount.json
            // this example is just showing the usage of "CodeSigningAccount_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this TenantResource created on azure
            // for more information of creating TenantResource, please refer to the document of TenantResource
            var tenantResource = client.GetTenants().GetAllAsync().GetAsyncEnumerator().Current;

            // invoke the operation
            Guid subscriptionId = Guid.Parse("00000000-1111-2222-3333-444444444444");
            string resourceGroupName = "MyResourceGroup";
            string accountName = "MyAccount";
            ArmOperation<CodeSigning.Models.CodeSigningAccount> lro = await tenantResource.CreateCodeSigningAccountAsync(WaitUntil.Completed, subscriptionId, resourceGroupName, accountName);
            CodeSigning.Models.CodeSigningAccount result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }

        // Update Code Signing Account
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task UpdateCodeSigningAccount_UpdateCodeSigningAccount()
        {
            // Generated from example definition: specification/codesigning/resource-manager/Microsoft.CodeSigning/preview/2023-04-30-preview/examples/updateCodeSigningAccount.json
            // this example is just showing the usage of "CodeSigningAccount_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this TenantResource created on azure
            // for more information of creating TenantResource, please refer to the document of TenantResource
            var tenantResource = client.GetTenants().GetAllAsync().GetAsyncEnumerator().Current;

            // invoke the operation
            Guid subscriptionId = Guid.Parse("00000000-1111-2222-3333-444444444444");
            string resourceGroupName = "MyResourceGroup";
            string accountName = "MyAccount";
            CodeSigning.Models.CodeSigningAccountPatch patch = new CodeSigning.Models.CodeSigningAccountPatch()
            {
                Tags =
{
["key1"] = "value1",
},
            };
            CodeSigning.Models.CodeSigningAccount result = await tenantResource.UpdateCodeSigningAccountAsync(subscriptionId, resourceGroupName, accountName, patch);

            Console.WriteLine($"Succeeded: {result}");
        }

        // Get Code Signing Account
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetCodeSigningAccount_GetCodeSigningAccount()
        {
            // Generated from example definition: specification/codesigning/resource-manager/Microsoft.CodeSigning/preview/2023-04-30-preview/examples/getCodeSigningAccount.json
            // this example is just showing the usage of "CodeSigningAccount_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this TenantResource created on azure
            // for more information of creating TenantResource, please refer to the document of TenantResource
            var tenantResource = client.GetTenants().GetAllAsync().GetAsyncEnumerator().Current;

            // invoke the operation
            Guid subscriptionId = Guid.Parse("00000000-1111-2222-3333-444444444444");
            string resourceGroupName = "MyResourceGroup";
            string accountName = "MyAccount";
            CodeSigning.Models.CodeSigningAccount result = await tenantResource.GetCodeSigningAccountAsync(subscriptionId, resourceGroupName, accountName);

            Console.WriteLine($"Succeeded: {result}");
        }

        // Delete Code Signing Account
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task DeleteCodeSigningAccount_DeleteCodeSigningAccount()
        {
            // Generated from example definition: specification/codesigning/resource-manager/Microsoft.CodeSigning/preview/2023-04-30-preview/examples/deleteCodeSigningAccount.json
            // this example is just showing the usage of "CodeSigningAccount_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this TenantResource created on azure
            // for more information of creating TenantResource, please refer to the document of TenantResource
            var tenantResource = client.GetTenants().GetAllAsync().GetAsyncEnumerator().Current;

            // invoke the operation
            Guid subscriptionId = Guid.Parse("00000000-1111-2222-3333-444444444444");
            string resourceGroupName = "MyResourceGroup";
            string accountName = "MyAccount";
            await tenantResource.DeleteCodeSigningAccountAsync(WaitUntil.Completed, subscriptionId, resourceGroupName, accountName);

            Console.WriteLine($"Succeeded");
        }

        // List Code Signing Accounts by Subscription
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetCodeSigningAccountsBySubscription_ListCodeSigningAccountsBySubscription()
        {
            // Generated from example definition: specification/codesigning/resource-manager/Microsoft.CodeSigning/preview/2023-04-30-preview/examples/listCodeSigningAccountsBySubscription.json
            // this example is just showing the usage of "CodeSigningAccount_ListBySubscription" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this TenantResource created on azure
            // for more information of creating TenantResource, please refer to the document of TenantResource
            var tenantResource = client.GetTenants().GetAllAsync().GetAsyncEnumerator().Current;

            // invoke the operation and iterate over the result
            Guid subscriptionId = Guid.Parse("00000000-1111-2222-3333-444444444444");
            await foreach (CodeSigning.Models.CodeSigningAccount item in tenantResource.GetCodeSigningAccountsBySubscriptionAsync(subscriptionId))
            {
                Console.WriteLine($"Succeeded: {item}");
            }

            Console.WriteLine($"Succeeded");
        }

        // List Code Signing Accounts by Resource Group
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetCodeSigningAccountsByResourceGroup_ListCodeSigningAccountsByResourceGroup()
        {
            // Generated from example definition: specification/codesigning/resource-manager/Microsoft.CodeSigning/preview/2023-04-30-preview/examples/listCodeSigningAccountsByResourceGroup.json
            // this example is just showing the usage of "CodeSigningAccount_ListByResourceGroup" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this TenantResource created on azure
            // for more information of creating TenantResource, please refer to the document of TenantResource
            var tenantResource = client.GetTenants().GetAllAsync().GetAsyncEnumerator().Current;

            // invoke the operation and iterate over the result
            Guid subscriptionId = Guid.Parse("00000000-1111-2222-3333-444444444444");
            string resourceGroupName = "MyResourceGroup";
            await foreach (CodeSigning.Models.CodeSigningAccount item in tenantResource.GetCodeSigningAccountsByResourceGroupAsync(subscriptionId, resourceGroupName))
            {
                Console.WriteLine($"Succeeded: {item}");
            }

            Console.WriteLine($"Succeeded");
        }

        // Validate a code signing account name
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CheckNameAvailabilityCodeSigningAccount_ValidateACodeSigningAccountName()
        {
            // Generated from example definition: specification/codesigning/resource-manager/Microsoft.CodeSigning/preview/2023-04-30-preview/examples/checkAccountNameAvailability.json
            // this example is just showing the usage of "CodeSigningAccount_CheckNameAvailability" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this TenantResource created on azure
            // for more information of creating TenantResource, please refer to the document of TenantResource
            var tenantResource = client.GetTenants().GetAllAsync().GetAsyncEnumerator().Current;

            // invoke the operation
            Guid subscriptionId = Guid.Parse("00000000-1111-2222-3333-444444444444");
            CodeSigning.Models.CheckNameAvailability accountName = new CodeSigning.Models.CheckNameAvailability("sample-account");
            CodeSigning.Models.CheckNameAvailabilityResult result = await tenantResource.CheckNameAvailabilityCodeSigningAccountAsync(subscriptionId, accountName);

            Console.WriteLine($"Succeeded: {result}");
        }

        // List Certificate Profiles
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetCertificateProfilesByCodeSigningAccount_ListCertificateProfiles()
        {
            // Generated from example definition: specification/codesigning/resource-manager/Microsoft.CodeSigning/preview/2023-04-30-preview/examples/listCertificateProfiles.json
            // this example is just showing the usage of "CertificateProfile_ListByCodeSigningAccount" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this TenantResource created on azure
            // for more information of creating TenantResource, please refer to the document of TenantResource
            var tenantResource = client.GetTenants().GetAllAsync().GetAsyncEnumerator().Current;

            // invoke the operation and iterate over the result
            Guid subscriptionId = Guid.Parse("00000000-1111-2222-3333-444444444444");
            string resourceGroupName = "MyResourceGroup";
            string accountName = "MyAccount";
            await foreach (CodeSigning.Models.CertificateProfile item in tenantResource.GetCertificateProfilesByCodeSigningAccountAsync(subscriptionId, resourceGroupName, accountName))
            {
                Console.WriteLine($"Succeeded: {item}");
            }

            Console.WriteLine($"Succeeded");
        }

        // Create Certificate Profile
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateCertificateProfile_CreateCertificateProfile()
        {
            // Generated from example definition: specification/codesigning/resource-manager/Microsoft.CodeSigning/preview/2023-04-30-preview/examples/createCertificateProfile.json
            // this example is just showing the usage of "CertificateProfile_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this TenantResource created on azure
            // for more information of creating TenantResource, please refer to the document of TenantResource
            var tenantResource = client.GetTenants().GetAllAsync().GetAsyncEnumerator().Current;

            // invoke the operation
            Guid subscriptionId = Guid.Parse("00000000-1111-2222-3333-444444444444");
            string resourceGroupName = "MyResourceGroup";
            string accountName = "MyAccount";
            string profileName = "profileA";
            CodeSigning.Models.CertificateProfile certificateProfile = new CodeSigning.Models.CertificateProfile(ProfileType.PublicTrust, RotationPolicy.ThirtyDays, "Contoso Inc", "Contoso Inc")
            {
                IncludeStreetAddress = false,
                IncludePostalCode = true,
            };
            ArmOperation<CodeSigning.Models.CertificateProfile> lro = await tenantResource.CreateCertificateProfileAsync(WaitUntil.Completed, subscriptionId, resourceGroupName, accountName, profileName, certificateProfile);
            CodeSigning.Models.CertificateProfile result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }

        // Get Certificate Profile
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetCertificateProfile_GetCertificateProfile()
        {
            // Generated from example definition: specification/codesigning/resource-manager/Microsoft.CodeSigning/preview/2023-04-30-preview/examples/getCertificateProfile.json
            // this example is just showing the usage of "CertificateProfile_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this TenantResource created on azure
            // for more information of creating TenantResource, please refer to the document of TenantResource
            var tenantResource = client.GetTenants().GetAllAsync().GetAsyncEnumerator().Current;

            // invoke the operation
            Guid subscriptionId = Guid.Parse("00000000-1111-2222-3333-444444444444");
            string resourceGroupName = "MyResourceGroup";
            string accountName = "MyAccount";
            string profileName = "profileA";
            CodeSigning.Models.CertificateProfile result = await tenantResource.GetCertificateProfileAsync(subscriptionId, resourceGroupName, accountName, profileName);

            Console.WriteLine($"Succeeded: {result}");
        }

        // Update Certificate Profile
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task UpdateCertificateProfile_UpdateCertificateProfile()
        {
            // Generated from example definition: specification/codesigning/resource-manager/Microsoft.CodeSigning/preview/2023-04-30-preview/examples/updateCertificateProfile.json
            // this example is just showing the usage of "CertificateProfile_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this TenantResource created on azure
            // for more information of creating TenantResource, please refer to the document of TenantResource
            var tenantResource = client.GetTenants().GetAllAsync().GetAsyncEnumerator().Current;

            // invoke the operation
            Guid subscriptionId = Guid.Parse("00000000-1111-2222-3333-444444444444");
            string resourceGroupName = "MyResourceGroup";
            string accountName = "MyAccount";
            string profileName = "profileA";
            CodeSigning.Models.CertificateProfilePatch patch = new CodeSigning.Models.CertificateProfilePatch()
            {
                Certificates =
{
new CodeSigning.Models.Certificate()
{
SerialNumber = "xxxxxxxxxxxxxxxxxx",
SubjectName = "CN=Contoso Inc, O=Contoso Inc, L=New York, S=New York, C=US",
Thumbprint = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
CreatedDate = "3/14/2023 5:27:49 PM",
ExpiryDate = "3/17/2023 5:27:49 PM",
Status = CertificateStatus.Active,
Revocations =
{
new CodeSigning.Models.Revocation()
{
RequestedAt = "3/19/2023 5:27:49 PM",
RevokedAt = "3/19/2023 5:27:49 PM",
Reason = "KeyCompromised",
Remarks = "test",
}
},
}
},
            };
            CodeSigning.Models.CertificateProfile result = await tenantResource.UpdateCertificateProfileAsync(subscriptionId, resourceGroupName, accountName, profileName, patch);

            Console.WriteLine($"Succeeded: {result}");
        }

        // Delete Certificate Profile
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task DeleteCertificateProfile_DeleteCertificateProfile()
        {
            // Generated from example definition: specification/codesigning/resource-manager/Microsoft.CodeSigning/preview/2023-04-30-preview/examples/deleteCertificateProfile.json
            // this example is just showing the usage of "CertificateProfile_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this TenantResource created on azure
            // for more information of creating TenantResource, please refer to the document of TenantResource
            var tenantResource = client.GetTenants().GetAllAsync().GetAsyncEnumerator().Current;

            // invoke the operation
            Guid subscriptionId = Guid.Parse("00000000-1111-2222-3333-444444444444");
            string resourceGroupName = "MyResourceGroup";
            string accountName = "MyAccount";
            string profileName = "profileA";
            await tenantResource.DeleteCertificateProfileAsync(WaitUntil.Completed, subscriptionId, resourceGroupName, accountName, profileName);

            Console.WriteLine($"Succeeded");
        }
    }
}
