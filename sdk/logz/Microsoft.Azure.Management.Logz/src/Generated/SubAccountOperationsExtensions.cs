// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Logz
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for SubAccountOperations.
    /// </summary>
    public static partial class SubAccountOperationsExtensions
    {
            /// <summary>
            /// List the sub account under a given monitor resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='monitorName'>
            /// Monitor resource name
            /// </param>
            public static IPage<LogzMonitorResource> List(this ISubAccountOperations operations, string resourceGroupName, string monitorName)
            {
                return operations.ListAsync(resourceGroupName, monitorName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List the sub account under a given monitor resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='monitorName'>
            /// Monitor resource name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<LogzMonitorResource>> ListAsync(this ISubAccountOperations operations, string resourceGroupName, string monitorName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, monitorName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create sub account under a given monitor resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='monitorName'>
            /// Monitor resource name
            /// </param>
            /// <param name='subAccountName'>
            /// Sub Account resource name
            /// </param>
            /// <param name='body'>
            /// </param>
            public static LogzMonitorResource Create(this ISubAccountOperations operations, string resourceGroupName, string monitorName, string subAccountName, LogzMonitorResource body = default(LogzMonitorResource))
            {
                return operations.CreateAsync(resourceGroupName, monitorName, subAccountName, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create sub account under a given monitor resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='monitorName'>
            /// Monitor resource name
            /// </param>
            /// <param name='subAccountName'>
            /// Sub Account resource name
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LogzMonitorResource> CreateAsync(this ISubAccountOperations operations, string resourceGroupName, string monitorName, string subAccountName, LogzMonitorResource body = default(LogzMonitorResource), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, monitorName, subAccountName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a sub account under a given monitor resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='monitorName'>
            /// Monitor resource name
            /// </param>
            /// <param name='subAccountName'>
            /// Sub Account resource name
            /// </param>
            public static LogzMonitorResource Get(this ISubAccountOperations operations, string resourceGroupName, string monitorName, string subAccountName)
            {
                return operations.GetAsync(resourceGroupName, monitorName, subAccountName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a sub account under a given monitor resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='monitorName'>
            /// Monitor resource name
            /// </param>
            /// <param name='subAccountName'>
            /// Sub Account resource name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LogzMonitorResource> GetAsync(this ISubAccountOperations operations, string resourceGroupName, string monitorName, string subAccountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, monitorName, subAccountName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a sub account resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='monitorName'>
            /// Monitor resource name
            /// </param>
            /// <param name='subAccountName'>
            /// Sub Account resource name
            /// </param>
            public static SubAccountDeleteHeaders Delete(this ISubAccountOperations operations, string resourceGroupName, string monitorName, string subAccountName)
            {
                return operations.DeleteAsync(resourceGroupName, monitorName, subAccountName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a sub account resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='monitorName'>
            /// Monitor resource name
            /// </param>
            /// <param name='subAccountName'>
            /// Sub Account resource name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SubAccountDeleteHeaders> DeleteAsync(this ISubAccountOperations operations, string resourceGroupName, string monitorName, string subAccountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceGroupName, monitorName, subAccountName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Update a monitor resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='monitorName'>
            /// Monitor resource name
            /// </param>
            /// <param name='subAccountName'>
            /// Sub Account resource name
            /// </param>
            /// <param name='body'>
            /// </param>
            public static LogzMonitorResource Update(this ISubAccountOperations operations, string resourceGroupName, string monitorName, string subAccountName, LogzMonitorResourceUpdateParameters body = default(LogzMonitorResourceUpdateParameters))
            {
                return operations.UpdateAsync(resourceGroupName, monitorName, subAccountName, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a monitor resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='monitorName'>
            /// Monitor resource name
            /// </param>
            /// <param name='subAccountName'>
            /// Sub Account resource name
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LogzMonitorResource> UpdateAsync(this ISubAccountOperations operations, string resourceGroupName, string monitorName, string subAccountName, LogzMonitorResourceUpdateParameters body = default(LogzMonitorResourceUpdateParameters), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, monitorName, subAccountName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List the resources currently being monitored by the Logz sub account
            /// resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='monitorName'>
            /// Monitor resource name
            /// </param>
            /// <param name='subAccountName'>
            /// Sub Account resource name
            /// </param>
            public static IPage<MonitoredResource> ListMonitoredResources(this ISubAccountOperations operations, string resourceGroupName, string monitorName, string subAccountName)
            {
                return operations.ListMonitoredResourcesAsync(resourceGroupName, monitorName, subAccountName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List the resources currently being monitored by the Logz sub account
            /// resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='monitorName'>
            /// Monitor resource name
            /// </param>
            /// <param name='subAccountName'>
            /// Sub Account resource name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<MonitoredResource>> ListMonitoredResourcesAsync(this ISubAccountOperations operations, string resourceGroupName, string monitorName, string subAccountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMonitoredResourcesWithHttpMessagesAsync(resourceGroupName, monitorName, subAccountName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create sub account under a given monitor resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='monitorName'>
            /// Monitor resource name
            /// </param>
            /// <param name='subAccountName'>
            /// Sub Account resource name
            /// </param>
            /// <param name='body'>
            /// </param>
            public static LogzMonitorResource BeginCreate(this ISubAccountOperations operations, string resourceGroupName, string monitorName, string subAccountName, LogzMonitorResource body = default(LogzMonitorResource))
            {
                return operations.BeginCreateAsync(resourceGroupName, monitorName, subAccountName, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create sub account under a given monitor resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='monitorName'>
            /// Monitor resource name
            /// </param>
            /// <param name='subAccountName'>
            /// Sub Account resource name
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LogzMonitorResource> BeginCreateAsync(this ISubAccountOperations operations, string resourceGroupName, string monitorName, string subAccountName, LogzMonitorResource body = default(LogzMonitorResource), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateWithHttpMessagesAsync(resourceGroupName, monitorName, subAccountName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a sub account resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='monitorName'>
            /// Monitor resource name
            /// </param>
            /// <param name='subAccountName'>
            /// Sub Account resource name
            /// </param>
            public static SubAccountDeleteHeaders BeginDelete(this ISubAccountOperations operations, string resourceGroupName, string monitorName, string subAccountName)
            {
                return operations.BeginDeleteAsync(resourceGroupName, monitorName, subAccountName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a sub account resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='monitorName'>
            /// Monitor resource name
            /// </param>
            /// <param name='subAccountName'>
            /// Sub Account resource name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SubAccountDeleteHeaders> BeginDeleteAsync(this ISubAccountOperations operations, string resourceGroupName, string monitorName, string subAccountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, monitorName, subAccountName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// List the sub account under a given monitor resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<LogzMonitorResource> ListNext(this ISubAccountOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List the sub account under a given monitor resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<LogzMonitorResource>> ListNextAsync(this ISubAccountOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List the resources currently being monitored by the Logz sub account
            /// resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<MonitoredResource> ListMonitoredResourcesNext(this ISubAccountOperations operations, string nextPageLink)
            {
                return operations.ListMonitoredResourcesNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List the resources currently being monitored by the Logz sub account
            /// resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<MonitoredResource>> ListMonitoredResourcesNextAsync(this ISubAccountOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMonitoredResourcesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
