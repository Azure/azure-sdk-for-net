// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.ContentUnderstanding
{
    /// <summary> Semantic data type of the field value. </summary>
    public readonly partial struct ContentFieldType : IEquatable<ContentFieldType>
    {
        private readonly string _value;
        /// <summary> Plain text. </summary>
        private const string StringValue = "string";
        /// <summary> Date, normalized to ISO 8601 (YYYY-MM-DD) format. </summary>
        private const string DateValue = "date";
        /// <summary> Time, normalized to ISO 8601 (hh:mm:ss) format. </summary>
        private const string TimeValue = "time";
        /// <summary> Number as double precision floating point. </summary>
        private const string NumberValue = "number";
        /// <summary> Integer as 64-bit signed integer. </summary>
        private const string IntegerValue = "integer";
        /// <summary> Boolean value. </summary>
        private const string BooleanValue = "boolean";
        /// <summary> List of subfields of the same type. </summary>
        private const string ArrayValue = "array";
        /// <summary> Named list of subfields. </summary>
        private const string ObjectValue = "object";

        /// <summary> Initializes a new instance of <see cref="ContentFieldType"/>. </summary>
        /// <param name="value"> The value. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ContentFieldType(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        /// <summary> Plain text. </summary>
        public static ContentFieldType String { get; } = new ContentFieldType(StringValue);

        /// <summary> Date, normalized to ISO 8601 (YYYY-MM-DD) format. </summary>
        public static ContentFieldType Date { get; } = new ContentFieldType(DateValue);

        /// <summary> Time, normalized to ISO 8601 (hh:mm:ss) format. </summary>
        public static ContentFieldType Time { get; } = new ContentFieldType(TimeValue);

        /// <summary> Number as double precision floating point. </summary>
        public static ContentFieldType Number { get; } = new ContentFieldType(NumberValue);

        /// <summary> Integer as 64-bit signed integer. </summary>
        public static ContentFieldType Integer { get; } = new ContentFieldType(IntegerValue);

        /// <summary> Boolean value. </summary>
        public static ContentFieldType Boolean { get; } = new ContentFieldType(BooleanValue);

        /// <summary> List of subfields of the same type. </summary>
        public static ContentFieldType Array { get; } = new ContentFieldType(ArrayValue);

        /// <summary> Named list of subfields. </summary>
        public static ContentFieldType Object { get; } = new ContentFieldType(ObjectValue);

        /// <summary> Determines if two <see cref="ContentFieldType"/> values are the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator ==(ContentFieldType left, ContentFieldType right) => left.Equals(right);

        /// <summary> Determines if two <see cref="ContentFieldType"/> values are not the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator !=(ContentFieldType left, ContentFieldType right) => !left.Equals(right);

        /// <summary> Converts a string to a <see cref="ContentFieldType"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator ContentFieldType(string value) => new ContentFieldType(value);

        /// <summary> Converts a string to a <see cref="ContentFieldType"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator ContentFieldType?(string value) => value == null ? null : new ContentFieldType(value);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ContentFieldType other && Equals(other);

        /// <inheritdoc/>
        public bool Equals(ContentFieldType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        /// <inheritdoc/>
        public override string ToString() => _value;
    }
}
