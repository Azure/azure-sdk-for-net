// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;

namespace Azure.AI.ContentUnderstanding
{
    /// <summary> Table cell in a document table. </summary>
    public partial class DocumentTableCell : IJsonModel<DocumentTableCell>
    {
        /// <summary> Initializes a new instance of <see cref="DocumentTableCell"/> for deserialization. </summary>
        internal DocumentTableCell()
        {
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<DocumentTableCell>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<DocumentTableCell>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(DocumentTableCell)} does not support writing '{format}' format.");
            }
            if (Optional.IsDefined(Kind))
            {
                writer.WritePropertyName("kind"u8);
                writer.WriteStringValue(Kind.Value.ToString());
            }
            writer.WritePropertyName("rowIndex"u8);
            writer.WriteNumberValue(RowIndex);
            writer.WritePropertyName("columnIndex"u8);
            writer.WriteNumberValue(ColumnIndex);
            if (Optional.IsDefined(RowSpan))
            {
                writer.WritePropertyName("rowSpan"u8);
                writer.WriteNumberValue(RowSpan.Value);
            }
            if (Optional.IsDefined(ColumnSpan))
            {
                writer.WritePropertyName("columnSpan"u8);
                writer.WriteNumberValue(ColumnSpan.Value);
            }
            writer.WritePropertyName("content"u8);
            writer.WriteStringValue(Content);
            if (Optional.IsDefined(Source))
            {
                writer.WritePropertyName("source"u8);
                writer.WriteStringValue(Source);
            }
            if (Optional.IsDefined(Span))
            {
                writer.WritePropertyName("span"u8);
                writer.WriteObjectValue(Span, options);
            }
            if (Optional.IsCollectionDefined(Elements))
            {
                writer.WritePropertyName("elements"u8);
                writer.WriteStartArray();
                foreach (string item in Elements)
                {
                    if (item == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && _additionalBinaryDataProperties != null)
            {
                foreach (var item in _additionalBinaryDataProperties)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        DocumentTableCell IJsonModel<DocumentTableCell>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual DocumentTableCell JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<DocumentTableCell>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(DocumentTableCell)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeDocumentTableCell(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static DocumentTableCell DeserializeDocumentTableCell(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            DocumentTableCellKind? kind = default;
            int rowIndex = default;
            int columnIndex = default;
            int? rowSpan = default;
            int? columnSpan = default;
            string content = default;
            string source = default;
            ContentSpan span = default;
            IList<string> elements = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("kind"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    kind = new DocumentTableCellKind(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("rowIndex"u8))
                {
                    rowIndex = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("columnIndex"u8))
                {
                    columnIndex = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("rowSpan"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    rowSpan = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("columnSpan"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    columnSpan = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("content"u8))
                {
                    content = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("source"u8))
                {
                    source = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("span"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    span = ContentSpan.DeserializeContentSpan(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("elements"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(item.GetString());
                        }
                    }
                    elements = array;
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new DocumentTableCell(
                kind,
                rowIndex,
                columnIndex,
                rowSpan,
                columnSpan,
                content,
                source,
                span,
                elements ?? new ChangeTrackingList<string>(),
                additionalBinaryDataProperties);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<DocumentTableCell>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<DocumentTableCell>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureAIContentUnderstandingContext.Default);
                default:
                    throw new FormatException($"The model {nameof(DocumentTableCell)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        DocumentTableCell IPersistableModel<DocumentTableCell>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual DocumentTableCell PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<DocumentTableCell>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeDocumentTableCell(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(DocumentTableCell)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<DocumentTableCell>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
