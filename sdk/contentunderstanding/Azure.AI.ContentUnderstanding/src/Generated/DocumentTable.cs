// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.AI.ContentUnderstanding
{
    /// <summary> Table in a document, consisting table cells arranged in a rectangular layout. </summary>
    public partial class DocumentTable
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="DocumentTable"/>. </summary>
        /// <param name="rowCount"> Number of rows in the table. </param>
        /// <param name="columnCount"> Number of columns in the table. </param>
        /// <param name="cells"> Cells contained within the table. </param>
        internal DocumentTable(int rowCount, int columnCount, IEnumerable<DocumentTableCell> cells)
        {
            RowCount = rowCount;
            ColumnCount = columnCount;
            Cells = cells.ToList();
            Footnotes = new ChangeTrackingList<DocumentFootnote>();
        }

        /// <summary> Initializes a new instance of <see cref="DocumentTable"/>. </summary>
        /// <param name="rowCount"> Number of rows in the table. </param>
        /// <param name="columnCount"> Number of columns in the table. </param>
        /// <param name="cells"> Cells contained within the table. </param>
        /// <param name="source"> Encoded source that identifies the position of the table in the content. </param>
        /// <param name="span"> Span of the table in the markdown content. </param>
        /// <param name="caption"> Table caption. </param>
        /// <param name="footnotes"> List of table footnotes. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal DocumentTable(int rowCount, int columnCount, IList<DocumentTableCell> cells, string source, ContentSpan span, DocumentCaption caption, IList<DocumentFootnote> footnotes, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            RowCount = rowCount;
            ColumnCount = columnCount;
            Cells = cells;
            Source = source;
            Span = span;
            Caption = caption;
            Footnotes = footnotes;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> Number of rows in the table. </summary>
        public int RowCount { get; }

        /// <summary> Number of columns in the table. </summary>
        public int ColumnCount { get; }

        /// <summary> Cells contained within the table. </summary>
        public IList<DocumentTableCell> Cells { get; }

        /// <summary> Encoded source that identifies the position of the table in the content. </summary>
        public string Source { get; }

        /// <summary> Span of the table in the markdown content. </summary>
        public ContentSpan Span { get; }

        /// <summary> Table caption. </summary>
        public DocumentCaption Caption { get; }

        /// <summary> List of table footnotes. </summary>
        public IList<DocumentFootnote> Footnotes { get; }
    }
}
