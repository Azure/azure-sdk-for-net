// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;

namespace Azure.AI.ContentUnderstanding
{
    /// <summary> Configuration settings for an analyzer. </summary>
    public partial class ContentAnalyzerConfig : IJsonModel<ContentAnalyzerConfig>
    {
        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<ContentAnalyzerConfig>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<ContentAnalyzerConfig>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ContentAnalyzerConfig)} does not support writing '{format}' format.");
            }
            if (Optional.IsDefined(ReturnDetails))
            {
                writer.WritePropertyName("returnDetails"u8);
                writer.WriteBooleanValue(ReturnDetails.Value);
            }
            if (Optional.IsCollectionDefined(Locales))
            {
                writer.WritePropertyName("locales"u8);
                writer.WriteStartArray();
                foreach (string item in Locales)
                {
                    if (item == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(EnableFace))
            {
                writer.WritePropertyName("enableFace"u8);
                writer.WriteBooleanValue(EnableFace.Value);
            }
            if (Optional.IsDefined(PersonDirectoryId))
            {
                writer.WritePropertyName("personDirectoryId"u8);
                writer.WriteStringValue(PersonDirectoryId);
            }
            if (Optional.IsDefined(EnableOcr))
            {
                writer.WritePropertyName("enableOcr"u8);
                writer.WriteBooleanValue(EnableOcr.Value);
            }
            if (Optional.IsDefined(EnableLayout))
            {
                writer.WritePropertyName("enableLayout"u8);
                writer.WriteBooleanValue(EnableLayout.Value);
            }
            if (Optional.IsDefined(TableFormat))
            {
                writer.WritePropertyName("tableFormat"u8);
                writer.WriteStringValue(TableFormat.Value.ToString());
            }
            if (Optional.IsDefined(EnableFormula))
            {
                writer.WritePropertyName("enableFormula"u8);
                writer.WriteBooleanValue(EnableFormula.Value);
            }
            if (Optional.IsDefined(DisableFaceBlurring))
            {
                writer.WritePropertyName("disableFaceBlurring"u8);
                writer.WriteBooleanValue(DisableFaceBlurring.Value);
            }
            if (Optional.IsDefined(DisableContentFiltering))
            {
                writer.WritePropertyName("disableContentFiltering"u8);
                writer.WriteBooleanValue(DisableContentFiltering.Value);
            }
            if (Optional.IsDefined(EstimateFieldSourceAndConfidence))
            {
                writer.WritePropertyName("estimateFieldSourceAndConfidence"u8);
                writer.WriteBooleanValue(EstimateFieldSourceAndConfidence.Value);
            }
            if (Optional.IsDefined(SegmentationMode))
            {
                writer.WritePropertyName("segmentationMode"u8);
                writer.WriteStringValue(SegmentationMode.Value.ToString());
            }
            if (Optional.IsDefined(SegmentationDefinition))
            {
                writer.WritePropertyName("segmentationDefinition"u8);
                writer.WriteStringValue(SegmentationDefinition);
            }
            if (options.Format != "W" && _additionalBinaryDataProperties != null)
            {
                foreach (var item in _additionalBinaryDataProperties)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        ContentAnalyzerConfig IJsonModel<ContentAnalyzerConfig>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual ContentAnalyzerConfig JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<ContentAnalyzerConfig>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ContentAnalyzerConfig)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeContentAnalyzerConfig(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static ContentAnalyzerConfig DeserializeContentAnalyzerConfig(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            bool? returnDetails = default;
            IList<string> locales = default;
            bool? enableFace = default;
            string personDirectoryId = default;
            bool? enableOcr = default;
            bool? enableLayout = default;
            TableFormat? tableFormat = default;
            bool? enableFormula = default;
            bool? disableFaceBlurring = default;
            bool? disableContentFiltering = default;
            bool? estimateFieldSourceAndConfidence = default;
            SegmentationMode? segmentationMode = default;
            string segmentationDefinition = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("returnDetails"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    returnDetails = prop.Value.GetBoolean();
                    continue;
                }
                if (prop.NameEquals("locales"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(item.GetString());
                        }
                    }
                    locales = array;
                    continue;
                }
                if (prop.NameEquals("enableFace"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    enableFace = prop.Value.GetBoolean();
                    continue;
                }
                if (prop.NameEquals("personDirectoryId"u8))
                {
                    personDirectoryId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("enableOcr"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    enableOcr = prop.Value.GetBoolean();
                    continue;
                }
                if (prop.NameEquals("enableLayout"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    enableLayout = prop.Value.GetBoolean();
                    continue;
                }
                if (prop.NameEquals("tableFormat"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    tableFormat = new TableFormat(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("enableFormula"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    enableFormula = prop.Value.GetBoolean();
                    continue;
                }
                if (prop.NameEquals("disableFaceBlurring"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    disableFaceBlurring = prop.Value.GetBoolean();
                    continue;
                }
                if (prop.NameEquals("disableContentFiltering"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    disableContentFiltering = prop.Value.GetBoolean();
                    continue;
                }
                if (prop.NameEquals("estimateFieldSourceAndConfidence"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    estimateFieldSourceAndConfidence = prop.Value.GetBoolean();
                    continue;
                }
                if (prop.NameEquals("segmentationMode"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    segmentationMode = new SegmentationMode(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("segmentationDefinition"u8))
                {
                    segmentationDefinition = prop.Value.GetString();
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new ContentAnalyzerConfig(
                returnDetails,
                locales ?? new ChangeTrackingList<string>(),
                enableFace,
                personDirectoryId,
                enableOcr,
                enableLayout,
                tableFormat,
                enableFormula,
                disableFaceBlurring,
                disableContentFiltering,
                estimateFieldSourceAndConfidence,
                segmentationMode,
                segmentationDefinition,
                additionalBinaryDataProperties);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<ContentAnalyzerConfig>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<ContentAnalyzerConfig>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureAIContentUnderstandingContext.Default);
                default:
                    throw new FormatException($"The model {nameof(ContentAnalyzerConfig)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        ContentAnalyzerConfig IPersistableModel<ContentAnalyzerConfig>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual ContentAnalyzerConfig PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<ContentAnalyzerConfig>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeContentAnalyzerConfig(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ContentAnalyzerConfig)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<ContentAnalyzerConfig>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
