// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.ContentUnderstanding
{
    /// <summary> Input face source with an optional target bounding box.  If not specified, the largest face will be used. </summary>
    public partial class FaceSource
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="FaceSource"/>. </summary>
        public FaceSource()
        {
        }

        /// <summary> Initializes a new instance of <see cref="FaceSource"/>. </summary>
        /// <param name="url"> Image URL.  Only one of url or data should be specified. </param>
        /// <param name="data"> Raw image bytes. Provide bytes-like object; do not base64-encode. Only one of url or data should be specified. </param>
        /// <param name="imageReferenceId"> User provided identifier for the source image. </param>
        /// <param name="targetBoundingBox"> Bounding box specifying the region of interest. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal FaceSource(Uri url, BinaryData data, string imageReferenceId, BoundingBox targetBoundingBox, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            Url = url;
            Data = data;
            ImageReferenceId = imageReferenceId;
            TargetBoundingBox = targetBoundingBox;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> Image URL.  Only one of url or data should be specified. </summary>
        public Uri Url { get; set; }

        /// <summary>
        /// Raw image bytes. Provide bytes-like object; do not base64-encode. Only one of url or data should be specified.
        /// <para>
        /// To assign a byte[] to this property use <see cref="BinaryData.FromBytes(byte[])"/>.
        /// The byte[] will be serialized to a Base64 encoded string.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term> BinaryData.FromBytes(new byte[] { 1, 2, 3 }). </term>
        /// <description> Creates a payload of "AQID". </description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData Data { get; set; }

        /// <summary> User provided identifier for the source image. </summary>
        public string ImageReferenceId { get; set; }

        /// <summary> Bounding box specifying the region of interest. </summary>
        public BoundingBox TargetBoundingBox { get; set; }
    }
}
