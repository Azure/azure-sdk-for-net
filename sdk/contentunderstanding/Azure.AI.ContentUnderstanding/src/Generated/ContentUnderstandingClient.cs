// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.AI.ContentUnderstanding
{
    /// <summary> The Content Understanding service extracts content and fields from multimodal input. </summary>
    public partial class ContentUnderstandingClient
    {
        private readonly Uri _endpoint;
        /// <summary> A credential used to authenticate to the service. </summary>
        private readonly AzureKeyCredential _keyCredential;
        private const string AuthorizationHeader = "Ocp-Apim-Subscription-Key";
        /// <summary> A credential used to authenticate to the service. </summary>
        private readonly TokenCredential _tokenCredential;
        private static readonly string[] AuthorizationScopes = new string[] { "https://cognitiveservices.azure.com/.default" };
        private readonly string _apiVersion;
        private ContentAnalyzers _cachedContentAnalyzers;
        private PersonDirectories _cachedPersonDirectories;
        private Faces _cachedFaces;
        private ContentClassifiers _cachedContentClassifiers;

        /// <summary> Initializes a new instance of ContentUnderstandingClient for mocking. </summary>
        protected ContentUnderstandingClient()
        {
        }

        /// <summary> Initializes a new instance of ContentUnderstandingClient. </summary>
        /// <param name="endpoint"> Service endpoint. </param>
        /// <param name="credential"> A credential used to authenticate to the service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public ContentUnderstandingClient(Uri endpoint, AzureKeyCredential credential) : this(endpoint, credential, new ContentUnderstandingClientOptions())
        {
        }

        /// <summary> Initializes a new instance of ContentUnderstandingClient. </summary>
        /// <param name="endpoint"> Service endpoint. </param>
        /// <param name="credential"> A credential used to authenticate to the service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public ContentUnderstandingClient(Uri endpoint, TokenCredential credential) : this(endpoint, credential, new ContentUnderstandingClientOptions())
        {
        }

        /// <summary> Initializes a new instance of ContentUnderstandingClient. </summary>
        /// <param name="endpoint"> Service endpoint. </param>
        /// <param name="credential"> A credential used to authenticate to the service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public ContentUnderstandingClient(Uri endpoint, AzureKeyCredential credential, ContentUnderstandingClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            Argument.AssertNotNull(credential, nameof(credential));

            options ??= new ContentUnderstandingClientOptions();

            _endpoint = endpoint;
            _keyCredential = credential;
            Pipeline = HttpPipelineBuilder.Build(options, new HttpPipelinePolicy[] { new AzureKeyCredentialPolicy(_keyCredential, AuthorizationHeader) });
            _apiVersion = options.Version;
            ClientDiagnostics = new ClientDiagnostics(options, true);
        }

        /// <summary> Initializes a new instance of ContentUnderstandingClient. </summary>
        /// <param name="endpoint"> Service endpoint. </param>
        /// <param name="credential"> A credential used to authenticate to the service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public ContentUnderstandingClient(Uri endpoint, TokenCredential credential, ContentUnderstandingClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            Argument.AssertNotNull(credential, nameof(credential));

            options ??= new ContentUnderstandingClientOptions();

            _endpoint = endpoint;
            _tokenCredential = credential;
            Pipeline = HttpPipelineBuilder.Build(options, new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes) });
            _apiVersion = options.Version;
            ClientDiagnostics = new ClientDiagnostics(options, true);
        }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline { get; }

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> Initializes a new instance of ContentAnalyzers. </summary>
        public virtual ContentAnalyzers GetContentAnalyzersClient()
        {
            return Volatile.Read(ref _cachedContentAnalyzers) ?? Interlocked.CompareExchange(ref _cachedContentAnalyzers, new ContentAnalyzers(ClientDiagnostics, Pipeline, _endpoint, _apiVersion), null) ?? _cachedContentAnalyzers;
        }

        /// <summary> Initializes a new instance of PersonDirectories. </summary>
        public virtual PersonDirectories GetPersonDirectoriesClient()
        {
            return Volatile.Read(ref _cachedPersonDirectories) ?? Interlocked.CompareExchange(ref _cachedPersonDirectories, new PersonDirectories(ClientDiagnostics, Pipeline, _endpoint, _apiVersion), null) ?? _cachedPersonDirectories;
        }

        /// <summary> Initializes a new instance of Faces. </summary>
        public virtual Faces GetFacesClient()
        {
            return Volatile.Read(ref _cachedFaces) ?? Interlocked.CompareExchange(ref _cachedFaces, new Faces(ClientDiagnostics, Pipeline, _endpoint, _apiVersion), null) ?? _cachedFaces;
        }

        /// <summary> Initializes a new instance of ContentClassifiers. </summary>
        public virtual ContentClassifiers GetContentClassifiersClient()
        {
            return Volatile.Read(ref _cachedContentClassifiers) ?? Interlocked.CompareExchange(ref _cachedContentClassifiers, new ContentClassifiers(ClientDiagnostics, Pipeline, _endpoint, _apiVersion), null) ?? _cachedContentClassifiers;
        }
    }
}
