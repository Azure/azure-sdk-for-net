// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.ContentUnderstanding
{
    /// <summary>
    /// Paragraph in a document, generally consisting of an contiguous sequence of lines
    /// with common alignment and spacing.
    /// </summary>
    public partial class DocumentParagraph
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="DocumentParagraph"/>. </summary>
        /// <param name="content"> Paragraph text. </param>
        internal DocumentParagraph(string content)
        {
            Content = content;
        }

        /// <summary> Initializes a new instance of <see cref="DocumentParagraph"/>. </summary>
        /// <param name="role"> Semantic role of the paragraph. </param>
        /// <param name="content"> Paragraph text. </param>
        /// <param name="source"> Encoded source that identifies the position of the paragraph in the content. </param>
        /// <param name="span"> Span of the paragraph in the markdown content. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal DocumentParagraph(ParagraphRole? role, string content, string source, ContentSpan span, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            Role = role;
            Content = content;
            Source = source;
            Span = span;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> Semantic role of the paragraph. </summary>
        public ParagraphRole? Role { get; }

        /// <summary> Paragraph text. </summary>
        public string Content { get; }

        /// <summary> Encoded source that identifies the position of the paragraph in the content. </summary>
        public string Source { get; }

        /// <summary> Span of the paragraph in the markdown content. </summary>
        public ContentSpan Span { get; }
    }
}
