// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;

namespace Azure.AI.ContentUnderstanding
{
    /// <summary> Document content.  Ex. text/plain, application/pdf, image/jpeg. </summary>
    public partial class DocumentContent : MediaContent, IJsonModel<DocumentContent>
    {
        /// <summary> Initializes a new instance of <see cref="DocumentContent"/> for deserialization. </summary>
        internal DocumentContent()
        {
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<DocumentContent>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<DocumentContent>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(DocumentContent)} does not support writing '{format}' format.");
            }
            base.JsonModelWriteCore(writer, options);
            writer.WritePropertyName("startPageNumber"u8);
            writer.WriteNumberValue(StartPageNumber);
            writer.WritePropertyName("endPageNumber"u8);
            writer.WriteNumberValue(EndPageNumber);
            if (Optional.IsDefined(Unit))
            {
                writer.WritePropertyName("unit"u8);
                writer.WriteStringValue(Unit.Value.ToString());
            }
            if (Optional.IsCollectionDefined(Pages))
            {
                writer.WritePropertyName("pages"u8);
                writer.WriteStartArray();
                foreach (DocumentPage item in Pages)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Paragraphs))
            {
                writer.WritePropertyName("paragraphs"u8);
                writer.WriteStartArray();
                foreach (DocumentParagraph item in Paragraphs)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Sections))
            {
                writer.WritePropertyName("sections"u8);
                writer.WriteStartArray();
                foreach (DocumentSection item in Sections)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Tables))
            {
                writer.WritePropertyName("tables"u8);
                writer.WriteStartArray();
                foreach (DocumentTable item in Tables)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Figures))
            {
                writer.WritePropertyName("figures"u8);
                writer.WriteStartArray();
                foreach (DocumentFigure item in Figures)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Persons))
            {
                writer.WritePropertyName("persons"u8);
                writer.WriteStartArray();
                foreach (DetectedPerson item in Persons)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        DocumentContent IJsonModel<DocumentContent>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => (DocumentContent)JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override MediaContent JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<DocumentContent>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(DocumentContent)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeDocumentContent(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static DocumentContent DeserializeDocumentContent(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            MediaContentKind kind = default;
            string mimeType = default;
            string category = default;
            Uri path = default;
            string markdown = default;
            IDictionary<string, ContentField> fields = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            int startPageNumber = default;
            int endPageNumber = default;
            LengthUnit? unit = default;
            IList<DocumentPage> pages = default;
            IList<DocumentParagraph> paragraphs = default;
            IList<DocumentSection> sections = default;
            IList<DocumentTable> tables = default;
            IList<DocumentFigure> figures = default;
            IList<DetectedPerson> persons = default;
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("kind"u8))
                {
                    kind = new MediaContentKind(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("mimeType"u8))
                {
                    mimeType = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("category"u8))
                {
                    category = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("path"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    path = new Uri(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("markdown"u8))
                {
                    markdown = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("fields"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, ContentField> dictionary = new Dictionary<string, ContentField>();
                    foreach (var prop0 in prop.Value.EnumerateObject())
                    {
                        dictionary.Add(prop0.Name, ContentField.DeserializeContentField(prop0.Value, options));
                    }
                    fields = dictionary;
                    continue;
                }
                if (prop.NameEquals("startPageNumber"u8))
                {
                    startPageNumber = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("endPageNumber"u8))
                {
                    endPageNumber = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("unit"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    unit = new LengthUnit(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("pages"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<DocumentPage> array = new List<DocumentPage>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(DocumentPage.DeserializeDocumentPage(item, options));
                    }
                    pages = array;
                    continue;
                }
                if (prop.NameEquals("paragraphs"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<DocumentParagraph> array = new List<DocumentParagraph>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(DocumentParagraph.DeserializeDocumentParagraph(item, options));
                    }
                    paragraphs = array;
                    continue;
                }
                if (prop.NameEquals("sections"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<DocumentSection> array = new List<DocumentSection>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(DocumentSection.DeserializeDocumentSection(item, options));
                    }
                    sections = array;
                    continue;
                }
                if (prop.NameEquals("tables"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<DocumentTable> array = new List<DocumentTable>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(DocumentTable.DeserializeDocumentTable(item, options));
                    }
                    tables = array;
                    continue;
                }
                if (prop.NameEquals("figures"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<DocumentFigure> array = new List<DocumentFigure>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(DocumentFigure.DeserializeDocumentFigure(item, options));
                    }
                    figures = array;
                    continue;
                }
                if (prop.NameEquals("persons"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<DetectedPerson> array = new List<DetectedPerson>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(DetectedPerson.DeserializeDetectedPerson(item, options));
                    }
                    persons = array;
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new DocumentContent(
                kind,
                mimeType,
                category,
                path,
                markdown,
                fields ?? new ChangeTrackingDictionary<string, ContentField>(),
                additionalBinaryDataProperties,
                startPageNumber,
                endPageNumber,
                unit,
                pages ?? new ChangeTrackingList<DocumentPage>(),
                paragraphs ?? new ChangeTrackingList<DocumentParagraph>(),
                sections ?? new ChangeTrackingList<DocumentSection>(),
                tables ?? new ChangeTrackingList<DocumentTable>(),
                figures ?? new ChangeTrackingList<DocumentFigure>(),
                persons ?? new ChangeTrackingList<DetectedPerson>());
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<DocumentContent>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected override BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<DocumentContent>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureAIContentUnderstandingContext.Default);
                default:
                    throw new FormatException($"The model {nameof(DocumentContent)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        DocumentContent IPersistableModel<DocumentContent>.Create(BinaryData data, ModelReaderWriterOptions options) => (DocumentContent)PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override MediaContent PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<DocumentContent>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeDocumentContent(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(DocumentContent)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<DocumentContent>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
