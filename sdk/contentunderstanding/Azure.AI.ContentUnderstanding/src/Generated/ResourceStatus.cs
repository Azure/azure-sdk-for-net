// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.ContentUnderstanding
{
    /// <summary> Status of a resource. </summary>
    public readonly partial struct ResourceStatus : IEquatable<ResourceStatus>
    {
        private readonly string _value;
        /// <summary> The resource is being created. </summary>
        private const string CreatingValue = "creating";
        /// <summary> The resource is ready. </summary>
        private const string ReadyValue = "ready";
        /// <summary> The resource is being deleted. </summary>
        private const string DeletingValue = "deleting";
        /// <summary> The resource failed during creation. </summary>
        private const string FailedValue = "failed";

        /// <summary> Initializes a new instance of <see cref="ResourceStatus"/>. </summary>
        /// <param name="value"> The value. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ResourceStatus(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        /// <summary> The resource is being created. </summary>
        public static ResourceStatus Creating { get; } = new ResourceStatus(CreatingValue);

        /// <summary> The resource is ready. </summary>
        public static ResourceStatus Ready { get; } = new ResourceStatus(ReadyValue);

        /// <summary> The resource is being deleted. </summary>
        public static ResourceStatus Deleting { get; } = new ResourceStatus(DeletingValue);

        /// <summary> The resource failed during creation. </summary>
        public static ResourceStatus Failed { get; } = new ResourceStatus(FailedValue);

        /// <summary> Determines if two <see cref="ResourceStatus"/> values are the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator ==(ResourceStatus left, ResourceStatus right) => left.Equals(right);

        /// <summary> Determines if two <see cref="ResourceStatus"/> values are not the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator !=(ResourceStatus left, ResourceStatus right) => !left.Equals(right);

        /// <summary> Converts a string to a <see cref="ResourceStatus"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator ResourceStatus(string value) => new ResourceStatus(value);

        /// <summary> Converts a string to a <see cref="ResourceStatus"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator ResourceStatus?(string value) => value == null ? null : new ResourceStatus(value);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ResourceStatus other && Equals(other);

        /// <inheritdoc/>
        public bool Equals(ResourceStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        /// <inheritdoc/>
        public override string ToString() => _value;
    }
}
