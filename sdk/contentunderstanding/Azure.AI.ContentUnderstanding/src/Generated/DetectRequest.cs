// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.ContentUnderstanding
{
    /// <summary> The DetectRequest. </summary>
    internal partial class DetectRequest
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="DetectRequest"/>. </summary>
        internal DetectRequest()
        {
        }

        /// <summary> Initializes a new instance of <see cref="DetectRequest"/>. </summary>
        /// <param name="url"> Image URL.  Only one of url or data should be specified. </param>
        /// <param name="data"> Base64-encoded image data.  Only one of url or data should be specified. </param>
        /// <param name="maxDetectedFaces"> Maximum number of faces to return (up to 100). </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal DetectRequest(string url, BinaryData data, int? maxDetectedFaces, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            Url = url;
            Data = data;
            MaxDetectedFaces = maxDetectedFaces;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> Image URL.  Only one of url or data should be specified. </summary>
        public string Url { get; }

        /// <summary>
        /// Base64-encoded image data.  Only one of url or data should be specified.
        /// <para>
        /// To assign a byte[] to this property use <see cref="BinaryData.FromBytes(byte[])"/>.
        /// The byte[] will be serialized to a Base64 encoded string.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term> BinaryData.FromBytes(new byte[] { 1, 2, 3 }). </term>
        /// <description> Creates a payload of "AQID". </description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData Data { get; }

        /// <summary> Maximum number of faces to return (up to 100). </summary>
        public int? MaxDetectedFaces { get; }
    }
}
