// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.ContentUnderstanding
{
    /// <summary>
    /// Media content base class.
    /// Please note this is the abstract base class. The derived classes available for instantiation are: <see cref="DocumentContent"/> and <see cref="AudioVisualContent"/>.
    /// </summary>
    public abstract partial class MediaContent
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="MediaContent"/>. </summary>
        /// <param name="kind"> Content kind. </param>
        private protected MediaContent(MediaContentKind kind)
        {
            Kind = kind;
            Fields = new ChangeTrackingDictionary<string, ContentField>();
        }

        /// <summary> Initializes a new instance of <see cref="MediaContent"/>. </summary>
        /// <param name="kind"> Content kind. </param>
        /// <param name="mimeType"> Detected MIME type of the content.  Ex. application/pdf, image/jpeg, etc. </param>
        /// <param name="category"> Classified content category. </param>
        /// <param name="path"> The path of the content in the input. </param>
        /// <param name="markdown"> Markdown representation of the content. </param>
        /// <param name="fields"> Extracted fields from the content. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal MediaContent(MediaContentKind kind, string mimeType, string category, Uri path, string markdown, IDictionary<string, ContentField> fields, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            Kind = kind;
            MimeType = mimeType;
            Category = category;
            Path = path;
            Markdown = markdown;
            Fields = fields;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> Content kind. </summary>
        internal MediaContentKind Kind { get; set; }

        /// <summary> Detected MIME type of the content.  Ex. application/pdf, image/jpeg, etc. </summary>
        public string MimeType { get; }

        /// <summary> Classified content category. </summary>
        public string Category { get; }

        /// <summary> The path of the content in the input. </summary>
        public Uri Path { get; }

        /// <summary> Markdown representation of the content. </summary>
        public string Markdown { get; }

        /// <summary> Extracted fields from the content. </summary>
        public IDictionary<string, ContentField> Fields { get; }
    }
}
