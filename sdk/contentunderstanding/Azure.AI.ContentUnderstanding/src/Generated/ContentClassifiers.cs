// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.AI.ContentUnderstanding
{
    /// <summary> The ContentClassifiers sub-client. </summary>
    public partial class ContentClassifiers
    {
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> Initializes a new instance of ContentClassifiers for mocking. </summary>
        protected ContentClassifiers()
        {
        }

        /// <summary> Initializes a new instance of ContentClassifiers. </summary>
        /// <param name="clientDiagnostics"> The ClientDiagnostics is used to provide tracing support for the client library. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> Service endpoint. </param>
        /// <param name="apiVersion"></param>
        internal ContentClassifiers(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint, string apiVersion)
        {
            ClientDiagnostics = clientDiagnostics;
            _endpoint = endpoint;
            Pipeline = pipeline;
            _apiVersion = apiVersion;
        }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline { get; }

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary>
        /// [Protocol Method] Get the status of a classifier creation operation.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="classifierId"> The unique identifier of the classifier. </param>
        /// <param name="operationId"> The unique ID of the operation. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="classifierId"/> or <paramref name="operationId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="classifierId"/> or <paramref name="operationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetOperationStatus(string classifierId, string operationId, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("ContentClassifiers.GetOperationStatus");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(classifierId, nameof(classifierId));
                Argument.AssertNotNullOrEmpty(operationId, nameof(operationId));

                using HttpMessage message = CreateGetOperationStatusRequest(classifierId, operationId, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Get the status of a classifier creation operation.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="classifierId"> The unique identifier of the classifier. </param>
        /// <param name="operationId"> The unique ID of the operation. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="classifierId"/> or <paramref name="operationId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="classifierId"/> or <paramref name="operationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetOperationStatusAsync(string classifierId, string operationId, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("ContentClassifiers.GetOperationStatus");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(classifierId, nameof(classifierId));
                Argument.AssertNotNullOrEmpty(operationId, nameof(operationId));

                using HttpMessage message = CreateGetOperationStatusRequest(classifierId, operationId, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the status of a classifier creation operation. </summary>
        /// <param name="classifierId"> The unique identifier of the classifier. </param>
        /// <param name="operationId"> The unique ID of the operation. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="classifierId"/> or <paramref name="operationId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="classifierId"/> or <paramref name="operationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<ResourceOperationStatusContentClassifierContentClassifierError> GetOperationStatus(string classifierId, string operationId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(classifierId, nameof(classifierId));
            Argument.AssertNotNullOrEmpty(operationId, nameof(operationId));

            Response result = GetOperationStatus(classifierId, operationId, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((ResourceOperationStatusContentClassifierContentClassifierError)result, result);
        }

        /// <summary> Get the status of a classifier creation operation. </summary>
        /// <param name="classifierId"> The unique identifier of the classifier. </param>
        /// <param name="operationId"> The unique ID of the operation. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="classifierId"/> or <paramref name="operationId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="classifierId"/> or <paramref name="operationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<ResourceOperationStatusContentClassifierContentClassifierError>> GetOperationStatusAsync(string classifierId, string operationId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(classifierId, nameof(classifierId));
            Argument.AssertNotNullOrEmpty(operationId, nameof(operationId));

            Response result = await GetOperationStatusAsync(classifierId, operationId, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((ResourceOperationStatusContentClassifierContentClassifierError)result, result);
        }

        /// <summary> Create a new classifier asynchronously. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="classifierId"> The unique identifier of the classifier. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="classifierId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="classifierId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Operation<BinaryData> CreateOrReplace(WaitUntil waitUntil, string classifierId, RequestContent content, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("ContentClassifiers.CreateOrReplace");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(classifierId, nameof(classifierId));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateCreateOrReplaceRequest(classifierId, content, context);
                return ProtocolOperationHelpers.ProcessMessage(Pipeline, message, ClientDiagnostics, "ContentClassifiers.CreateOrReplace", OperationFinalStateVia.OriginalUri, context, waitUntil);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a new classifier asynchronously. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="classifierId"> The unique identifier of the classifier. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="classifierId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="classifierId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Operation<BinaryData>> CreateOrReplaceAsync(WaitUntil waitUntil, string classifierId, RequestContent content, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("ContentClassifiers.CreateOrReplace");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(classifierId, nameof(classifierId));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateCreateOrReplaceRequest(classifierId, content, context);
                return await ProtocolOperationHelpers.ProcessMessageAsync(Pipeline, message, ClientDiagnostics, "ContentClassifiers.CreateOrReplaceAsync", OperationFinalStateVia.OriginalUri, context, waitUntil).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a new classifier asynchronously. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="classifierId"> The unique identifier of the classifier. </param>
        /// <param name="resource"> The resource instance. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="classifierId"/> or <paramref name="resource"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="classifierId"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Operation<ContentClassifier> CreateOrReplace(WaitUntil waitUntil, string classifierId, ContentClassifier resource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(classifierId, nameof(classifierId));
            Argument.AssertNotNull(resource, nameof(resource));

            Operation<BinaryData> result = CreateOrReplace(waitUntil, classifierId, resource, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return ProtocolOperationHelpers.Convert(result, response => (ContentClassifier)response, ClientDiagnostics, "ContentClassifiers.CreateOrReplace");
        }

        /// <summary> Create a new classifier asynchronously. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="classifierId"> The unique identifier of the classifier. </param>
        /// <param name="resource"> The resource instance. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="classifierId"/> or <paramref name="resource"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="classifierId"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<Operation<ContentClassifier>> CreateOrReplaceAsync(WaitUntil waitUntil, string classifierId, ContentClassifier resource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(classifierId, nameof(classifierId));
            Argument.AssertNotNull(resource, nameof(resource));

            Operation<BinaryData> result = await CreateOrReplaceAsync(waitUntil, classifierId, resource, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return ProtocolOperationHelpers.Convert(result, response => (ContentClassifier)response, ClientDiagnostics, "ContentClassifiers.CreateOrReplaceAsync");
        }

        /// <summary>
        /// [Protocol Method] Update classifier properties.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="classifierId"> The unique identifier of the classifier. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="classifierId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="classifierId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response Update(string classifierId, RequestContent content, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("ContentClassifiers.Update");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(classifierId, nameof(classifierId));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateUpdateRequest(classifierId, content, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Update classifier properties.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="classifierId"> The unique identifier of the classifier. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="classifierId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="classifierId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> UpdateAsync(string classifierId, RequestContent content, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("ContentClassifiers.Update");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(classifierId, nameof(classifierId));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateUpdateRequest(classifierId, content, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Get classifier properties.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="classifierId"> The unique identifier of the classifier. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="classifierId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="classifierId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response Get(string classifierId, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("ContentClassifiers.Get");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(classifierId, nameof(classifierId));

                using HttpMessage message = CreateGetRequest(classifierId, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Get classifier properties.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="classifierId"> The unique identifier of the classifier. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="classifierId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="classifierId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetAsync(string classifierId, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("ContentClassifiers.Get");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(classifierId, nameof(classifierId));

                using HttpMessage message = CreateGetRequest(classifierId, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get classifier properties. </summary>
        /// <param name="classifierId"> The unique identifier of the classifier. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="classifierId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="classifierId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<ContentClassifier> Get(string classifierId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(classifierId, nameof(classifierId));

            Response result = Get(classifierId, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((ContentClassifier)result, result);
        }

        /// <summary> Get classifier properties. </summary>
        /// <param name="classifierId"> The unique identifier of the classifier. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="classifierId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="classifierId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<ContentClassifier>> GetAsync(string classifierId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(classifierId, nameof(classifierId));

            Response result = await GetAsync(classifierId, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((ContentClassifier)result, result);
        }

        /// <summary>
        /// [Protocol Method] Delete classifier.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="classifierId"> The unique identifier of the classifier. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="classifierId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="classifierId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response Delete(string classifierId, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("ContentClassifiers.Delete");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(classifierId, nameof(classifierId));

                using HttpMessage message = CreateDeleteRequest(classifierId, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Delete classifier.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="classifierId"> The unique identifier of the classifier. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="classifierId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="classifierId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> DeleteAsync(string classifierId, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("ContentClassifiers.Delete");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(classifierId, nameof(classifierId));

                using HttpMessage message = CreateDeleteRequest(classifierId, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete classifier. </summary>
        /// <param name="classifierId"> The unique identifier of the classifier. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="classifierId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="classifierId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response Delete(string classifierId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(classifierId, nameof(classifierId));

            return Delete(classifierId, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary> Delete classifier. </summary>
        /// <param name="classifierId"> The unique identifier of the classifier. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="classifierId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="classifierId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response> DeleteAsync(string classifierId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(classifierId, nameof(classifierId));

            return await DeleteAsync(classifierId, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] List classifiers.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Pageable<BinaryData> GetAll(RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("ContentClassifiers.GetAll");
            scope.Start();
            try
            {
                return new ContentClassifiersGetAllCollectionResult(this, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] List classifiers.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual AsyncPageable<BinaryData> GetAllAsync(RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("ContentClassifiers.GetAll");
            scope.Start();
            try
            {
                return new ContentClassifiersGetAllAsyncCollectionResult(this, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List classifiers. </summary>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Pageable<ContentClassifier> GetAll(CancellationToken cancellationToken = default)
        {
            return new ContentClassifiersGetAllCollectionResultOfT(this, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary> List classifiers. </summary>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual AsyncPageable<ContentClassifier> GetAllAsync(CancellationToken cancellationToken = default)
        {
            return new ContentClassifiersGetAllAsyncCollectionResultOfT(this, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary> Classify content with optional splitting. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="classifierId"> The unique identifier of the classifier. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="stringEncoding"> The encoding format for content spans in the response. </param>
        /// <param name="processingLocation"> The location where the data may be processed. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="classifierId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="classifierId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Operation<BinaryData> Classify(WaitUntil waitUntil, string classifierId, RequestContent content, string stringEncoding = default, string processingLocation = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("ContentClassifiers.Classify");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(classifierId, nameof(classifierId));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateClassifyRequest(classifierId, content, stringEncoding, processingLocation, context);
                return ProtocolOperationHelpers.ProcessMessage(Pipeline, message, ClientDiagnostics, "ContentClassifiers.Classify", OperationFinalStateVia.OperationLocation, context, waitUntil);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Classify content with optional splitting. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="classifierId"> The unique identifier of the classifier. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="stringEncoding"> The encoding format for content spans in the response. </param>
        /// <param name="processingLocation"> The location where the data may be processed. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="classifierId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="classifierId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Operation<BinaryData>> ClassifyAsync(WaitUntil waitUntil, string classifierId, RequestContent content, string stringEncoding = default, string processingLocation = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("ContentClassifiers.Classify");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(classifierId, nameof(classifierId));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateClassifyRequest(classifierId, content, stringEncoding, processingLocation, context);
                return await ProtocolOperationHelpers.ProcessMessageAsync(Pipeline, message, ClientDiagnostics, "ContentClassifiers.ClassifyAsync", OperationFinalStateVia.OperationLocation, context, waitUntil).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Classify content with optional splitting. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="classifierId"> The unique identifier of the classifier. </param>
        /// <param name="url"> The URL of the document to classify. </param>
        /// <param name="stringEncoding"> The encoding format for content spans in the response. </param>
        /// <param name="processingLocation"> The location where the data may be processed. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="classifierId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="classifierId"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Operation<ClassifyResult> Classify(WaitUntil waitUntil, string classifierId, Uri url = default, StringEncoding? stringEncoding = default, ProcessingLocation? processingLocation = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(classifierId, nameof(classifierId));

            ClassifyRequest1 spreadModel = new ClassifyRequest1(url, default);
            Operation<BinaryData> result = Classify(waitUntil, classifierId, spreadModel, stringEncoding?.ToString(), processingLocation?.ToString(), cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return ProtocolOperationHelpers.Convert(result, response => (ClassifyResult)response, ClientDiagnostics, "ContentClassifiers.Classify");
        }

        /// <summary> Classify content with optional splitting. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="classifierId"> The unique identifier of the classifier. </param>
        /// <param name="url"> The URL of the document to classify. </param>
        /// <param name="stringEncoding"> The encoding format for content spans in the response. </param>
        /// <param name="processingLocation"> The location where the data may be processed. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="classifierId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="classifierId"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<Operation<ClassifyResult>> ClassifyAsync(WaitUntil waitUntil, string classifierId, Uri url = default, StringEncoding? stringEncoding = default, ProcessingLocation? processingLocation = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(classifierId, nameof(classifierId));

            ClassifyRequest1 spreadModel = new ClassifyRequest1(url, default);
            Operation<BinaryData> result = await ClassifyAsync(waitUntil, classifierId, spreadModel, stringEncoding?.ToString(), processingLocation?.ToString(), cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return ProtocolOperationHelpers.Convert(result, response => (ClassifyResult)response, ClientDiagnostics, "ContentClassifiers.ClassifyAsync");
        }

        /// <summary> Classify content with optional splitting. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="classifierId"> The unique identifier of the classifier. </param>
        /// <param name="contentType"> Request content type. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="stringEncoding"> The encoding format for content spans in the response. </param>
        /// <param name="processingLocation"> The location where the data may be processed. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="classifierId"/>, <paramref name="contentType"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="classifierId"/> or <paramref name="contentType"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Operation<BinaryData> ClassifyBinary(WaitUntil waitUntil, string classifierId, string contentType, RequestContent content, string stringEncoding = default, string processingLocation = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("ContentClassifiers.ClassifyBinary");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(classifierId, nameof(classifierId));
                Argument.AssertNotNullOrEmpty(contentType, nameof(contentType));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateClassifyBinaryRequest(classifierId, contentType, content, stringEncoding, processingLocation, context);
                return ProtocolOperationHelpers.ProcessMessage(Pipeline, message, ClientDiagnostics, "ContentClassifiers.ClassifyBinary", OperationFinalStateVia.OperationLocation, context, waitUntil);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Classify content with optional splitting. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="classifierId"> The unique identifier of the classifier. </param>
        /// <param name="contentType"> Request content type. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="stringEncoding"> The encoding format for content spans in the response. </param>
        /// <param name="processingLocation"> The location where the data may be processed. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="classifierId"/>, <paramref name="contentType"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="classifierId"/> or <paramref name="contentType"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Operation<BinaryData>> ClassifyBinaryAsync(WaitUntil waitUntil, string classifierId, string contentType, RequestContent content, string stringEncoding = default, string processingLocation = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("ContentClassifiers.ClassifyBinary");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(classifierId, nameof(classifierId));
                Argument.AssertNotNullOrEmpty(contentType, nameof(contentType));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateClassifyBinaryRequest(classifierId, contentType, content, stringEncoding, processingLocation, context);
                return await ProtocolOperationHelpers.ProcessMessageAsync(Pipeline, message, ClientDiagnostics, "ContentClassifiers.ClassifyBinaryAsync", OperationFinalStateVia.OperationLocation, context, waitUntil).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Classify content with optional splitting. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="classifierId"> The unique identifier of the classifier. </param>
        /// <param name="contentType"> Request content type. </param>
        /// <param name="input"> The binary content of the document to classify. </param>
        /// <param name="stringEncoding"> The encoding format for content spans in the response. </param>
        /// <param name="processingLocation"> The location where the data may be processed. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="classifierId"/>, <paramref name="contentType"/> or <paramref name="input"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="classifierId"/> or <paramref name="contentType"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Operation<ClassifyResult> ClassifyBinary(WaitUntil waitUntil, string classifierId, string contentType, BinaryData input, StringEncoding? stringEncoding = default, ProcessingLocation? processingLocation = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(classifierId, nameof(classifierId));
            Argument.AssertNotNullOrEmpty(contentType, nameof(contentType));
            Argument.AssertNotNull(input, nameof(input));

            Operation<BinaryData> result = ClassifyBinary(waitUntil, classifierId, contentType, RequestContent.Create(input), stringEncoding?.ToString(), processingLocation?.ToString(), cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return ProtocolOperationHelpers.Convert(result, response => (ClassifyResult)response, ClientDiagnostics, "ContentClassifiers.ClassifyBinary");
        }

        /// <summary> Classify content with optional splitting. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="classifierId"> The unique identifier of the classifier. </param>
        /// <param name="contentType"> Request content type. </param>
        /// <param name="input"> The binary content of the document to classify. </param>
        /// <param name="stringEncoding"> The encoding format for content spans in the response. </param>
        /// <param name="processingLocation"> The location where the data may be processed. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="classifierId"/>, <paramref name="contentType"/> or <paramref name="input"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="classifierId"/> or <paramref name="contentType"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<Operation<ClassifyResult>> ClassifyBinaryAsync(WaitUntil waitUntil, string classifierId, string contentType, BinaryData input, StringEncoding? stringEncoding = default, ProcessingLocation? processingLocation = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(classifierId, nameof(classifierId));
            Argument.AssertNotNullOrEmpty(contentType, nameof(contentType));
            Argument.AssertNotNull(input, nameof(input));

            Operation<BinaryData> result = await ClassifyBinaryAsync(waitUntil, classifierId, contentType, RequestContent.Create(input), stringEncoding?.ToString(), processingLocation?.ToString(), cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return ProtocolOperationHelpers.Convert(result, response => (ClassifyResult)response, ClientDiagnostics, "ContentClassifiers.ClassifyBinaryAsync");
        }

        /// <summary>
        /// [Protocol Method] Get the result of a classifier operation.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="operationId"> The unique ID of the operation. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        internal virtual Response GetResult(string operationId, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("ContentClassifiers.GetResult");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetResultRequest(operationId, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Get the result of a classifier operation.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="operationId"> The unique ID of the operation. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        internal virtual async Task<Response> GetResultAsync(string operationId, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("ContentClassifiers.GetResult");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetResultRequest(operationId, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the result of a classifier operation. </summary>
        /// <param name="operationId"> The unique ID of the operation. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        internal virtual Response<OperationStatusClassifyResultError> GetResult(string operationId, CancellationToken cancellationToken = default)
        {
            Response result = GetResult(operationId, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((OperationStatusClassifyResultError)result, result);
        }

        /// <summary> Get the result of a classifier operation. </summary>
        /// <param name="operationId"> The unique ID of the operation. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        internal virtual async Task<Response<OperationStatusClassifyResultError>> GetResultAsync(string operationId, CancellationToken cancellationToken = default)
        {
            Response result = await GetResultAsync(operationId, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((OperationStatusClassifyResultError)result, result);
        }
    }
}
