// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure;

namespace Azure.AI.ContentUnderstanding
{
    /// <summary> Analyze operation result. </summary>
    public partial class AnalyzeResult
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="AnalyzeResult"/>. </summary>
        /// <param name="contents"> The extracted content. </param>
        internal AnalyzeResult(IEnumerable<MediaContent> contents)
        {
            Warnings = new ChangeTrackingList<ResponseError>();
            Contents = contents.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeResult"/>. </summary>
        /// <param name="analyzerId"> The unique identifier of the analyzer. </param>
        /// <param name="apiVersion"> The version of the API used to analyze the document. </param>
        /// <param name="createdAt"> The date and time when the result was created. </param>
        /// <param name="warnings"> Warnings encountered while analyzing the document. </param>
        /// <param name="stringEncoding"> The string encoding used for content spans. </param>
        /// <param name="contents"> The extracted content. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal AnalyzeResult(string analyzerId, string apiVersion, DateTimeOffset? createdAt, IList<ResponseError> warnings, StringEncoding? stringEncoding, IList<MediaContent> contents, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            AnalyzerId = analyzerId;
            ApiVersion = apiVersion;
            CreatedAt = createdAt;
            Warnings = warnings;
            StringEncoding = stringEncoding;
            Contents = contents;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> The unique identifier of the analyzer. </summary>
        public string AnalyzerId { get; }

        /// <summary> The version of the API used to analyze the document. </summary>
        public string ApiVersion { get; }

        /// <summary> The date and time when the result was created. </summary>
        public DateTimeOffset? CreatedAt { get; }

        /// <summary> Warnings encountered while analyzing the document. </summary>
        public IList<ResponseError> Warnings { get; }

        /// <summary> The string encoding used for content spans. </summary>
        public StringEncoding? StringEncoding { get; }

        /// <summary> The extracted content. </summary>
        public IList<MediaContent> Contents { get; }
    }
}
