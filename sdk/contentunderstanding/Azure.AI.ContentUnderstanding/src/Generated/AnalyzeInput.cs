// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.ContentUnderstanding
{
    /// <summary> Additional input to analyze. </summary>
    public partial class AnalyzeInput
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="AnalyzeInput"/>. </summary>
        /// <param name="url"> The URL of the input to analyze.  Only one of url or data should be specified. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="url"/> is null. </exception>
        public AnalyzeInput(Uri url)
        {
            Argument.AssertNotNull(url, nameof(url));

            Url = url;
        }

        /// <summary> Initializes a new instance of <see cref="AnalyzeInput"/>. </summary>
        /// <param name="url"> The URL of the input to analyze.  Only one of url or data should be specified. </param>
        /// <param name="data"> Raw image bytes. Provide bytes-like object; do not base64-encode. Only one of url or data should be specified. </param>
        /// <param name="name"> Name of the input. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal AnalyzeInput(Uri url, BinaryData data, string name, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            Url = url;
            Data = data;
            Name = name;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> The URL of the input to analyze.  Only one of url or data should be specified. </summary>
        public Uri Url { get; }

        /// <summary>
        /// Raw image bytes. Provide bytes-like object; do not base64-encode. Only one of url or data should be specified.
        /// <para>
        /// To assign a byte[] to this property use <see cref="BinaryData.FromBytes(byte[])"/>.
        /// The byte[] will be serialized to a Base64 encoded string.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term> BinaryData.FromBytes(new byte[] { 1, 2, 3 }). </term>
        /// <description> Creates a payload of "AQID". </description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData Data { get; set; }

        /// <summary> Name of the input. </summary>
        public string Name { get; set; }
    }
}
