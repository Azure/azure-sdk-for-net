// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace Azure.AI.ContentUnderstanding
{
    /// <summary> Analyzer that extracts content and fields from multimodal documents. </summary>
    public partial class ContentAnalyzer : IJsonModel<ContentAnalyzer>
    {
        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<ContentAnalyzer>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<ContentAnalyzer>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ContentAnalyzer)} does not support writing '{format}' format.");
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("analyzerId"u8);
                writer.WriteStringValue(AnalyzerId);
            }
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description"u8);
                writer.WriteStringValue(Description);
            }
            if (Optional.IsCollectionDefined(Tags))
            {
                writer.WritePropertyName("tags"u8);
                writer.WriteStartObject();
                foreach (var item in Tags)
                {
                    writer.WritePropertyName(item.Key);
                    if (item.Value == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("status"u8);
                writer.WriteStringValue(Status.ToString());
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("createdAt"u8);
                writer.WriteStringValue(CreatedAt, "O");
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("lastModifiedAt"u8);
                writer.WriteStringValue(LastModifiedAt, "O");
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(Warnings))
            {
                writer.WritePropertyName("warnings"u8);
                writer.WriteStartArray();
                foreach (ResponseError item in Warnings)
                {
                    if (item == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
                    ((IJsonModel<ResponseError>)item).Write(writer, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(BaseAnalyzerId))
            {
                writer.WritePropertyName("baseAnalyzerId"u8);
                writer.WriteStringValue(BaseAnalyzerId);
            }
            if (Optional.IsDefined(Config))
            {
                writer.WritePropertyName("config"u8);
                writer.WriteObjectValue(Config, options);
            }
            if (Optional.IsDefined(FieldSchema))
            {
                writer.WritePropertyName("fieldSchema"u8);
                writer.WriteObjectValue(FieldSchema, options);
            }
            if (Optional.IsDefined(TrainingData))
            {
                writer.WritePropertyName("trainingData"u8);
                writer.WriteObjectValue(TrainingData, options);
            }
            if (Optional.IsDefined(ProcessingLocation))
            {
                writer.WritePropertyName("processingLocation"u8);
                writer.WriteStringValue(ProcessingLocation.Value.ToString());
            }
            if (Optional.IsDefined(Mode))
            {
                writer.WritePropertyName("mode"u8);
                writer.WriteStringValue(Mode.Value.ToString());
            }
            if (Optional.IsCollectionDefined(KnowledgeSources))
            {
                writer.WritePropertyName("knowledgeSources"u8);
                writer.WriteStartArray();
                foreach (KnowledgeSource item in KnowledgeSources)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && _additionalBinaryDataProperties != null)
            {
                foreach (var item in _additionalBinaryDataProperties)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        ContentAnalyzer IJsonModel<ContentAnalyzer>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual ContentAnalyzer JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<ContentAnalyzer>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ContentAnalyzer)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeContentAnalyzer(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static ContentAnalyzer DeserializeContentAnalyzer(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string analyzerId = default;
            string description = default;
            IDictionary<string, string> tags = default;
            ResourceStatus status = default;
            DateTimeOffset createdAt = default;
            DateTimeOffset lastModifiedAt = default;
            IReadOnlyList<ResponseError> warnings = default;
            string baseAnalyzerId = default;
            ContentAnalyzerConfig config = default;
            ContentFieldSchema fieldSchema = default;
            DataSource trainingData = default;
            ProcessingLocation? processingLocation = default;
            AnalysisMode? mode = default;
            IList<KnowledgeSource> knowledgeSources = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("analyzerId"u8))
                {
                    analyzerId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("description"u8))
                {
                    description = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("tags"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var prop0 in prop.Value.EnumerateObject())
                    {
                        if (prop0.Value.ValueKind == JsonValueKind.Null)
                        {
                            dictionary.Add(prop0.Name, null);
                        }
                        else
                        {
                            dictionary.Add(prop0.Name, prop0.Value.GetString());
                        }
                    }
                    tags = dictionary;
                    continue;
                }
                if (prop.NameEquals("status"u8))
                {
                    status = new ResourceStatus(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("createdAt"u8))
                {
                    createdAt = prop.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (prop.NameEquals("lastModifiedAt"u8))
                {
                    lastModifiedAt = prop.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (prop.NameEquals("warnings"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ResponseError> array = new List<ResponseError>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(ModelReaderWriter.Read<ResponseError>(new BinaryData(Encoding.UTF8.GetBytes(item.GetRawText())), options, AzureAIContentUnderstandingContext.Default));
                        }
                    }
                    warnings = array;
                    continue;
                }
                if (prop.NameEquals("baseAnalyzerId"u8))
                {
                    baseAnalyzerId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("config"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    config = ContentAnalyzerConfig.DeserializeContentAnalyzerConfig(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("fieldSchema"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    fieldSchema = ContentFieldSchema.DeserializeContentFieldSchema(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("trainingData"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    trainingData = DataSource.DeserializeDataSource(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("processingLocation"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    processingLocation = new ProcessingLocation(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("mode"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    mode = new AnalysisMode(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("knowledgeSources"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<KnowledgeSource> array = new List<KnowledgeSource>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(KnowledgeSource.DeserializeKnowledgeSource(item, options));
                    }
                    knowledgeSources = array;
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new ContentAnalyzer(
                analyzerId,
                description,
                tags ?? new ChangeTrackingDictionary<string, string>(),
                status,
                createdAt,
                lastModifiedAt,
                warnings ?? new ChangeTrackingList<ResponseError>(),
                baseAnalyzerId,
                config,
                fieldSchema,
                trainingData,
                processingLocation,
                mode,
                knowledgeSources ?? new ChangeTrackingList<KnowledgeSource>(),
                additionalBinaryDataProperties);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<ContentAnalyzer>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<ContentAnalyzer>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureAIContentUnderstandingContext.Default);
                default:
                    throw new FormatException($"The model {nameof(ContentAnalyzer)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        ContentAnalyzer IPersistableModel<ContentAnalyzer>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual ContentAnalyzer PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<ContentAnalyzer>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeContentAnalyzer(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ContentAnalyzer)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<ContentAnalyzer>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        /// <param name="contentAnalyzer"> The <see cref="ContentAnalyzer"/> to serialize into <see cref="RequestContent"/>. </param>
        public static implicit operator RequestContent(ContentAnalyzer contentAnalyzer)
        {
            if (contentAnalyzer == null)
            {
                return null;
            }
            Utf8JsonRequestContent content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(contentAnalyzer, ModelSerializationExtensions.WireOptions);
            return content;
        }

        /// <param name="result"> The <see cref="Response"/> to deserialize the <see cref="ContentAnalyzer"/> from. </param>
        public static explicit operator ContentAnalyzer(Response result)
        {
            using Response response = result;
            using JsonDocument document = JsonDocument.Parse(response.Content);
            return DeserializeContentAnalyzer(document.RootElement.GetProperty("result"), ModelSerializationExtensions.WireOptions);
        }
    }
}
