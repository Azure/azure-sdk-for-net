// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure;
using Azure.Core;

namespace Azure.AI.ContentUnderstanding
{
    /// <summary></summary>
    public partial class ContentClassifiers
    {
        private static ResponseClassifier _pipelineMessageClassifier200;
        private static ResponseClassifier _pipelineMessageClassifier200201;
        private static ResponseClassifier _pipelineMessageClassifier202;
        private static ResponseClassifier _pipelineMessageClassifier204;

        private static ResponseClassifier PipelineMessageClassifier200 => _pipelineMessageClassifier200 = new StatusCodeClassifier(stackalloc ushort[] { 200 });

        private static ResponseClassifier PipelineMessageClassifier200201 => _pipelineMessageClassifier200201 = new StatusCodeClassifier(stackalloc ushort[] { 200, 201 });

        private static ResponseClassifier PipelineMessageClassifier202 => _pipelineMessageClassifier202 = new StatusCodeClassifier(stackalloc ushort[] { 202 });

        private static ResponseClassifier PipelineMessageClassifier204 => _pipelineMessageClassifier204 = new StatusCodeClassifier(stackalloc ushort[] { 204 });

        internal HttpMessage CreateGetOperationStatusRequest(string classifierId, string operationId, RequestContext context)
        {
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/contentunderstanding", false);
            uri.AppendPath("/classifiers/", false);
            uri.AppendPath(classifierId, true);
            uri.AppendPath("/operations/", false);
            uri.AppendPath(operationId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Uri = uri;
            request.Method = RequestMethod.Get;
            request.Headers.SetValue("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateCreateOrReplaceRequest(string classifierId, RequestContent content, RequestContext context)
        {
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/contentunderstanding", false);
            uri.AppendPath("/classifiers/", false);
            uri.AppendPath(classifierId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200201);
            Request request = message.Request;
            request.Uri = uri;
            request.Method = RequestMethod.Put;
            request.Headers.SetValue("Content-Type", "application/json");
            request.Headers.SetValue("Accept", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateUpdateRequest(string classifierId, RequestContent content, RequestContext context)
        {
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/contentunderstanding", false);
            uri.AppendPath("/classifiers/", false);
            uri.AppendPath(classifierId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Uri = uri;
            request.Method = RequestMethod.Patch;
            request.Headers.SetValue("Content-Type", "application/merge-patch+json");
            request.Headers.SetValue("Accept", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetRequest(string classifierId, RequestContext context)
        {
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/contentunderstanding", false);
            uri.AppendPath("/classifiers/", false);
            uri.AppendPath(classifierId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Uri = uri;
            request.Method = RequestMethod.Get;
            request.Headers.SetValue("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateDeleteRequest(string classifierId, RequestContext context)
        {
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/contentunderstanding", false);
            uri.AppendPath("/classifiers/", false);
            uri.AppendPath(classifierId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier204);
            Request request = message.Request;
            request.Uri = uri;
            request.Method = RequestMethod.Delete;
            return message;
        }

        internal HttpMessage CreateGetAllRequest(RequestContext context)
        {
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/contentunderstanding", false);
            uri.AppendPath("/classifiers", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Uri = uri;
            request.Method = RequestMethod.Get;
            request.Headers.SetValue("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateNextGetAllRequest(Uri nextPage, RequestContext context)
        {
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(nextPage);
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Uri = uri;
            request.Method = RequestMethod.Get;
            request.Headers.SetValue("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateClassifyRequest(string classifierId, RequestContent content, string stringEncoding, string processingLocation, RequestContext context)
        {
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/contentunderstanding", false);
            uri.AppendPath("/classifiers/", false);
            uri.AppendPath(classifierId, true);
            uri.AppendPath(":classify", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (stringEncoding != null)
            {
                uri.AppendQuery("stringEncoding", stringEncoding, true);
            }
            if (processingLocation != null)
            {
                uri.AppendQuery("processingLocation", processingLocation, true);
            }
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier202);
            Request request = message.Request;
            request.Uri = uri;
            request.Method = RequestMethod.Post;
            request.Headers.SetValue("Content-Type", "application/json");
            request.Headers.SetValue("Accept", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateClassifyBinaryRequest(string classifierId, string contentType, RequestContent content, string stringEncoding, string processingLocation, RequestContext context)
        {
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/contentunderstanding", false);
            uri.AppendPath("/classifiers/", false);
            uri.AppendPath(classifierId, true);
            uri.AppendPath(":classify", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (stringEncoding != null)
            {
                uri.AppendQuery("stringEncoding", stringEncoding, true);
            }
            if (processingLocation != null)
            {
                uri.AppendQuery("processingLocation", processingLocation, true);
            }
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier202);
            Request request = message.Request;
            request.Uri = uri;
            request.Method = RequestMethod.Post;
            request.Headers.SetValue("Content-Type", contentType);
            request.Headers.SetValue("Accept", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetResultRequest(string operationId, RequestContext context)
        {
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/contentunderstanding", false);
            uri.AppendPath("/classifierResults/", false);
            uri.AppendPath(operationId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Uri = uri;
            request.Method = RequestMethod.Get;
            request.Headers.SetValue("Accept", "application/json");
            return message;
        }
    }
}
