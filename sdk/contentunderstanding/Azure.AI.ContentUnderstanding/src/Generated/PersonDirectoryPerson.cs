// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.ContentUnderstanding
{
    /// <summary> Person in a person directory. </summary>
    public partial class PersonDirectoryPerson
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="PersonDirectoryPerson"/>. </summary>
        public PersonDirectoryPerson()
        {
            Tags = new ChangeTrackingDictionary<string, string>();
            FaceIds = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of <see cref="PersonDirectoryPerson"/>. </summary>
        /// <param name="personId"> The unique identifier of the person. </param>
        /// <param name="tags"> Tags associated with the person. </param>
        /// <param name="faceIds"> List of faces associated with the person. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal PersonDirectoryPerson(string personId, IDictionary<string, string> tags, IList<string> faceIds, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            PersonId = personId;
            Tags = tags;
            FaceIds = faceIds;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> The unique identifier of the person. </summary>
        public string PersonId { get; }

        /// <summary> Tags associated with the person. </summary>
        public IDictionary<string, string> Tags { get; }

        /// <summary> List of faces associated with the person. </summary>
        public IList<string> FaceIds { get; }
    }
}
