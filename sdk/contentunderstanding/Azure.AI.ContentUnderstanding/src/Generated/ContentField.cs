// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.ContentUnderstanding
{
    /// <summary>
    /// Field extracted from the content.
    /// Please note this is the abstract base class. The derived classes available for instantiation are: <see cref="StringField"/>, <see cref="DateField"/>, <see cref="TimeField"/>, <see cref="NumberField"/>, <see cref="IntegerField"/>, <see cref="BooleanField"/>, <see cref="ArrayField"/>, and <see cref="ObjectField"/>.
    /// </summary>
    public abstract partial class ContentField
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="ContentField"/>. </summary>
        /// <param name="type"> Semantic data type of the field value. </param>
        private protected ContentField(ContentFieldType @type)
        {
            Type = @type;
            Spans = new ChangeTrackingList<ContentSpan>();
        }

        /// <summary> Initializes a new instance of <see cref="ContentField"/>. </summary>
        /// <param name="type"> Semantic data type of the field value. </param>
        /// <param name="spans"> Span(s) associated with the field value in the markdown content. </param>
        /// <param name="confidence"> Confidence of predicting the field value. </param>
        /// <param name="source"> Encoded source that identifies the position of the field value in the content. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal ContentField(ContentFieldType @type, IList<ContentSpan> spans, float? confidence, string source, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            Type = @type;
            Spans = spans;
            Confidence = confidence;
            Source = source;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> Semantic data type of the field value. </summary>
        internal ContentFieldType Type { get; set; }

        /// <summary> Span(s) associated with the field value in the markdown content. </summary>
        public IList<ContentSpan> Spans { get; }

        /// <summary> Confidence of predicting the field value. </summary>
        public float? Confidence { get; }

        /// <summary> Encoded source that identifies the position of the field value in the content. </summary>
        public string Source { get; }
    }
}
