// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.AI.ContentUnderstanding
{
    /// <summary> The ContentAnalyzers sub-client. </summary>
    public partial class ContentAnalyzers
    {
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> Initializes a new instance of ContentAnalyzers for mocking. </summary>
        protected ContentAnalyzers()
        {
        }

        /// <summary> Initializes a new instance of ContentAnalyzers. </summary>
        /// <param name="clientDiagnostics"> The ClientDiagnostics is used to provide tracing support for the client library. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> Service endpoint. </param>
        /// <param name="apiVersion"></param>
        internal ContentAnalyzers(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint, string apiVersion)
        {
            ClientDiagnostics = clientDiagnostics;
            _endpoint = endpoint;
            Pipeline = pipeline;
            _apiVersion = apiVersion;
        }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline { get; }

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary>
        /// [Protocol Method] Get the status of an analyzer creation operation.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="analyzerId"> The unique identifier of the analyzer. </param>
        /// <param name="operationId"> The unique ID of the operation. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="analyzerId"/> or <paramref name="operationId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="analyzerId"/> or <paramref name="operationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetOperationStatus(string analyzerId, string operationId, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("ContentAnalyzers.GetOperationStatus");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(analyzerId, nameof(analyzerId));
                Argument.AssertNotNullOrEmpty(operationId, nameof(operationId));

                using HttpMessage message = CreateGetOperationStatusRequest(analyzerId, operationId, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Get the status of an analyzer creation operation.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="analyzerId"> The unique identifier of the analyzer. </param>
        /// <param name="operationId"> The unique ID of the operation. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="analyzerId"/> or <paramref name="operationId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="analyzerId"/> or <paramref name="operationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetOperationStatusAsync(string analyzerId, string operationId, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("ContentAnalyzers.GetOperationStatus");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(analyzerId, nameof(analyzerId));
                Argument.AssertNotNullOrEmpty(operationId, nameof(operationId));

                using HttpMessage message = CreateGetOperationStatusRequest(analyzerId, operationId, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the status of an analyzer creation operation. </summary>
        /// <param name="analyzerId"> The unique identifier of the analyzer. </param>
        /// <param name="operationId"> The unique ID of the operation. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="analyzerId"/> or <paramref name="operationId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="analyzerId"/> or <paramref name="operationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<ResourceOperationStatusContentAnalyzerContentAnalyzerError> GetOperationStatus(string analyzerId, string operationId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(analyzerId, nameof(analyzerId));
            Argument.AssertNotNullOrEmpty(operationId, nameof(operationId));

            Response result = GetOperationStatus(analyzerId, operationId, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((ResourceOperationStatusContentAnalyzerContentAnalyzerError)result, result);
        }

        /// <summary> Get the status of an analyzer creation operation. </summary>
        /// <param name="analyzerId"> The unique identifier of the analyzer. </param>
        /// <param name="operationId"> The unique ID of the operation. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="analyzerId"/> or <paramref name="operationId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="analyzerId"/> or <paramref name="operationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<ResourceOperationStatusContentAnalyzerContentAnalyzerError>> GetOperationStatusAsync(string analyzerId, string operationId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(analyzerId, nameof(analyzerId));
            Argument.AssertNotNullOrEmpty(operationId, nameof(operationId));

            Response result = await GetOperationStatusAsync(analyzerId, operationId, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((ResourceOperationStatusContentAnalyzerContentAnalyzerError)result, result);
        }

        /// <summary> Create a new analyzer asynchronously. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="analyzerId"> The unique identifier of the analyzer. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="analyzerId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="analyzerId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Operation<BinaryData> CreateOrReplace(WaitUntil waitUntil, string analyzerId, RequestContent content, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("ContentAnalyzers.CreateOrReplace");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(analyzerId, nameof(analyzerId));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateCreateOrReplaceRequest(analyzerId, content, context);
                return ProtocolOperationHelpers.ProcessMessage(Pipeline, message, ClientDiagnostics, "ContentAnalyzers.CreateOrReplace", OperationFinalStateVia.OriginalUri, context, waitUntil);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a new analyzer asynchronously. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="analyzerId"> The unique identifier of the analyzer. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="analyzerId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="analyzerId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Operation<BinaryData>> CreateOrReplaceAsync(WaitUntil waitUntil, string analyzerId, RequestContent content, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("ContentAnalyzers.CreateOrReplace");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(analyzerId, nameof(analyzerId));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateCreateOrReplaceRequest(analyzerId, content, context);
                return await ProtocolOperationHelpers.ProcessMessageAsync(Pipeline, message, ClientDiagnostics, "ContentAnalyzers.CreateOrReplaceAsync", OperationFinalStateVia.OriginalUri, context, waitUntil).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a new analyzer asynchronously. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="analyzerId"> The unique identifier of the analyzer. </param>
        /// <param name="resource"> The resource instance. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="analyzerId"/> or <paramref name="resource"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="analyzerId"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Operation<ContentAnalyzer> CreateOrReplace(WaitUntil waitUntil, string analyzerId, ContentAnalyzer resource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(analyzerId, nameof(analyzerId));
            Argument.AssertNotNull(resource, nameof(resource));

            Operation<BinaryData> result = CreateOrReplace(waitUntil, analyzerId, resource, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return ProtocolOperationHelpers.Convert(result, response => (ContentAnalyzer)response, ClientDiagnostics, "ContentAnalyzers.CreateOrReplace");
        }

        /// <summary> Create a new analyzer asynchronously. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="analyzerId"> The unique identifier of the analyzer. </param>
        /// <param name="resource"> The resource instance. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="analyzerId"/> or <paramref name="resource"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="analyzerId"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<Operation<ContentAnalyzer>> CreateOrReplaceAsync(WaitUntil waitUntil, string analyzerId, ContentAnalyzer resource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(analyzerId, nameof(analyzerId));
            Argument.AssertNotNull(resource, nameof(resource));

            Operation<BinaryData> result = await CreateOrReplaceAsync(waitUntil, analyzerId, resource, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return ProtocolOperationHelpers.Convert(result, response => (ContentAnalyzer)response, ClientDiagnostics, "ContentAnalyzers.CreateOrReplaceAsync");
        }

        /// <summary>
        /// [Protocol Method] Update analyzer properties.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="analyzerId"> The unique identifier of the analyzer. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="analyzerId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="analyzerId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response Update(string analyzerId, RequestContent content, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("ContentAnalyzers.Update");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(analyzerId, nameof(analyzerId));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateUpdateRequest(analyzerId, content, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Update analyzer properties.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="analyzerId"> The unique identifier of the analyzer. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="analyzerId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="analyzerId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> UpdateAsync(string analyzerId, RequestContent content, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("ContentAnalyzers.Update");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(analyzerId, nameof(analyzerId));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateUpdateRequest(analyzerId, content, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Get analyzer properties.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="analyzerId"> The unique identifier of the analyzer. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="analyzerId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="analyzerId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response Get(string analyzerId, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("ContentAnalyzers.Get");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(analyzerId, nameof(analyzerId));

                using HttpMessage message = CreateGetRequest(analyzerId, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Get analyzer properties.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="analyzerId"> The unique identifier of the analyzer. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="analyzerId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="analyzerId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetAsync(string analyzerId, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("ContentAnalyzers.Get");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(analyzerId, nameof(analyzerId));

                using HttpMessage message = CreateGetRequest(analyzerId, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get analyzer properties. </summary>
        /// <param name="analyzerId"> The unique identifier of the analyzer. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="analyzerId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="analyzerId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<ContentAnalyzer> Get(string analyzerId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(analyzerId, nameof(analyzerId));

            Response result = Get(analyzerId, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((ContentAnalyzer)result, result);
        }

        /// <summary> Get analyzer properties. </summary>
        /// <param name="analyzerId"> The unique identifier of the analyzer. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="analyzerId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="analyzerId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<ContentAnalyzer>> GetAsync(string analyzerId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(analyzerId, nameof(analyzerId));

            Response result = await GetAsync(analyzerId, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((ContentAnalyzer)result, result);
        }

        /// <summary>
        /// [Protocol Method] Delete analyzer.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="analyzerId"> The unique identifier of the analyzer. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="analyzerId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="analyzerId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response Delete(string analyzerId, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("ContentAnalyzers.Delete");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(analyzerId, nameof(analyzerId));

                using HttpMessage message = CreateDeleteRequest(analyzerId, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Delete analyzer.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="analyzerId"> The unique identifier of the analyzer. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="analyzerId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="analyzerId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> DeleteAsync(string analyzerId, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("ContentAnalyzers.Delete");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(analyzerId, nameof(analyzerId));

                using HttpMessage message = CreateDeleteRequest(analyzerId, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete analyzer. </summary>
        /// <param name="analyzerId"> The unique identifier of the analyzer. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="analyzerId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="analyzerId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response Delete(string analyzerId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(analyzerId, nameof(analyzerId));

            return Delete(analyzerId, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary> Delete analyzer. </summary>
        /// <param name="analyzerId"> The unique identifier of the analyzer. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="analyzerId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="analyzerId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response> DeleteAsync(string analyzerId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(analyzerId, nameof(analyzerId));

            return await DeleteAsync(analyzerId, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] List analyzers.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Pageable<BinaryData> GetAll(RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("ContentAnalyzers.GetAll");
            scope.Start();
            try
            {
                return new ContentAnalyzersGetAllCollectionResult(this, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] List analyzers.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual AsyncPageable<BinaryData> GetAllAsync(RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("ContentAnalyzers.GetAll");
            scope.Start();
            try
            {
                return new ContentAnalyzersGetAllAsyncCollectionResult(this, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List analyzers. </summary>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Pageable<ContentAnalyzer> GetAll(CancellationToken cancellationToken = default)
        {
            return new ContentAnalyzersGetAllCollectionResultOfT(this, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary> List analyzers. </summary>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual AsyncPageable<ContentAnalyzer> GetAllAsync(CancellationToken cancellationToken = default)
        {
            return new ContentAnalyzersGetAllAsyncCollectionResultOfT(this, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary> Extract content and fields from input. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="analyzerId"> The unique identifier of the analyzer. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="stringEncoding"> The encoding format for content spans in the response. </param>
        /// <param name="processingLocation"> The location where the data may be processed. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="analyzerId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="analyzerId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Operation<BinaryData> Analyze(WaitUntil waitUntil, string analyzerId, RequestContent content, string stringEncoding = default, string processingLocation = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("ContentAnalyzers.Analyze");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(analyzerId, nameof(analyzerId));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateAnalyzeRequest(analyzerId, content, stringEncoding, processingLocation, context);
                return ProtocolOperationHelpers.ProcessMessage(Pipeline, message, ClientDiagnostics, "ContentAnalyzers.Analyze", OperationFinalStateVia.OperationLocation, context, waitUntil);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Extract content and fields from input. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="analyzerId"> The unique identifier of the analyzer. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="stringEncoding"> The encoding format for content spans in the response. </param>
        /// <param name="processingLocation"> The location where the data may be processed. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="analyzerId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="analyzerId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Operation<BinaryData>> AnalyzeAsync(WaitUntil waitUntil, string analyzerId, RequestContent content, string stringEncoding = default, string processingLocation = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("ContentAnalyzers.Analyze");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(analyzerId, nameof(analyzerId));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateAnalyzeRequest(analyzerId, content, stringEncoding, processingLocation, context);
                return await ProtocolOperationHelpers.ProcessMessageAsync(Pipeline, message, ClientDiagnostics, "ContentAnalyzers.AnalyzeAsync", OperationFinalStateVia.OperationLocation, context, waitUntil).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Extract content and fields from input. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="analyzerId"> The unique identifier of the analyzer. </param>
        /// <param name="url"> The URL of the primary input to analyze.  Only one of url or data should be specified. </param>
        /// <param name="data"> Base64-encoded binary content of the primary input to analyze.  Only one of url or data should be specified. </param>
        /// <param name="inputs"> Additional inputs to analyze.  Only supported in analyzers with mode=pro. </param>
        /// <param name="stringEncoding"> The encoding format for content spans in the response. </param>
        /// <param name="processingLocation"> The location where the data may be processed. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="analyzerId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="analyzerId"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Operation<AnalyzeResult> Analyze(WaitUntil waitUntil, string analyzerId, Uri url = default, BinaryData data = default, IEnumerable<AnalyzeInput> inputs = default, StringEncoding? stringEncoding = default, ProcessingLocation? processingLocation = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(analyzerId, nameof(analyzerId));

            AnalyzeRequest1 spreadModel = new AnalyzeRequest1(url, data, inputs?.ToList() as IList<AnalyzeInput> ?? new ChangeTrackingList<AnalyzeInput>(), default);
            Operation<BinaryData> result = Analyze(waitUntil, analyzerId, spreadModel, stringEncoding?.ToString(), processingLocation?.ToString(), cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return ProtocolOperationHelpers.Convert(result, response => (AnalyzeResult)response, ClientDiagnostics, "ContentAnalyzers.Analyze");
        }

        /// <summary> Extract content and fields from input. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="analyzerId"> The unique identifier of the analyzer. </param>
        /// <param name="url"> The URL of the primary input to analyze.  Only one of url or data should be specified. </param>
        /// <param name="data"> Base64-encoded binary content of the primary input to analyze.  Only one of url or data should be specified. </param>
        /// <param name="inputs"> Additional inputs to analyze.  Only supported in analyzers with mode=pro. </param>
        /// <param name="stringEncoding"> The encoding format for content spans in the response. </param>
        /// <param name="processingLocation"> The location where the data may be processed. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="analyzerId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="analyzerId"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<Operation<AnalyzeResult>> AnalyzeAsync(WaitUntil waitUntil, string analyzerId, Uri url = default, BinaryData data = default, IEnumerable<AnalyzeInput> inputs = default, StringEncoding? stringEncoding = default, ProcessingLocation? processingLocation = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(analyzerId, nameof(analyzerId));

            AnalyzeRequest1 spreadModel = new AnalyzeRequest1(url, data, inputs?.ToList() as IList<AnalyzeInput> ?? new ChangeTrackingList<AnalyzeInput>(), default);
            Operation<BinaryData> result = await AnalyzeAsync(waitUntil, analyzerId, spreadModel, stringEncoding?.ToString(), processingLocation?.ToString(), cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return ProtocolOperationHelpers.Convert(result, response => (AnalyzeResult)response, ClientDiagnostics, "ContentAnalyzers.AnalyzeAsync");
        }

        /// <summary> Extract content and fields from input. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="analyzerId"> The unique identifier of the analyzer. </param>
        /// <param name="contentType"> Request content type. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="stringEncoding"> The encoding format for content spans in the response. </param>
        /// <param name="processingLocation"> The location where the data may be processed. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="analyzerId"/>, <paramref name="contentType"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="analyzerId"/> or <paramref name="contentType"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Operation<BinaryData> AnalyzeBinary(WaitUntil waitUntil, string analyzerId, string contentType, RequestContent content, string stringEncoding = default, string processingLocation = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("ContentAnalyzers.AnalyzeBinary");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(analyzerId, nameof(analyzerId));
                Argument.AssertNotNullOrEmpty(contentType, nameof(contentType));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateAnalyzeBinaryRequest(analyzerId, contentType, content, stringEncoding, processingLocation, context);
                return ProtocolOperationHelpers.ProcessMessage(Pipeline, message, ClientDiagnostics, "ContentAnalyzers.AnalyzeBinary", OperationFinalStateVia.OperationLocation, context, waitUntil);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Extract content and fields from input. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="analyzerId"> The unique identifier of the analyzer. </param>
        /// <param name="contentType"> Request content type. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="stringEncoding"> The encoding format for content spans in the response. </param>
        /// <param name="processingLocation"> The location where the data may be processed. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="analyzerId"/>, <paramref name="contentType"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="analyzerId"/> or <paramref name="contentType"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Operation<BinaryData>> AnalyzeBinaryAsync(WaitUntil waitUntil, string analyzerId, string contentType, RequestContent content, string stringEncoding = default, string processingLocation = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("ContentAnalyzers.AnalyzeBinary");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(analyzerId, nameof(analyzerId));
                Argument.AssertNotNullOrEmpty(contentType, nameof(contentType));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateAnalyzeBinaryRequest(analyzerId, contentType, content, stringEncoding, processingLocation, context);
                return await ProtocolOperationHelpers.ProcessMessageAsync(Pipeline, message, ClientDiagnostics, "ContentAnalyzers.AnalyzeBinaryAsync", OperationFinalStateVia.OperationLocation, context, waitUntil).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Extract content and fields from input. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="analyzerId"> The unique identifier of the analyzer. </param>
        /// <param name="contentType"> Request content type. </param>
        /// <param name="input"> The binary content of the document to analyze. </param>
        /// <param name="stringEncoding"> The encoding format for content spans in the response. </param>
        /// <param name="processingLocation"> The location where the data may be processed. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="analyzerId"/>, <paramref name="contentType"/> or <paramref name="input"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="analyzerId"/> or <paramref name="contentType"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Operation<AnalyzeResult> AnalyzeBinary(WaitUntil waitUntil, string analyzerId, string contentType, BinaryData input, StringEncoding? stringEncoding = default, ProcessingLocation? processingLocation = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(analyzerId, nameof(analyzerId));
            Argument.AssertNotNullOrEmpty(contentType, nameof(contentType));
            Argument.AssertNotNull(input, nameof(input));

            Operation<BinaryData> result = AnalyzeBinary(waitUntil, analyzerId, contentType, RequestContent.Create(input), stringEncoding?.ToString(), processingLocation?.ToString(), cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return ProtocolOperationHelpers.Convert(result, response => (AnalyzeResult)response, ClientDiagnostics, "ContentAnalyzers.AnalyzeBinary");
        }

        /// <summary> Extract content and fields from input. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="analyzerId"> The unique identifier of the analyzer. </param>
        /// <param name="contentType"> Request content type. </param>
        /// <param name="input"> The binary content of the document to analyze. </param>
        /// <param name="stringEncoding"> The encoding format for content spans in the response. </param>
        /// <param name="processingLocation"> The location where the data may be processed. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="analyzerId"/>, <paramref name="contentType"/> or <paramref name="input"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="analyzerId"/> or <paramref name="contentType"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<Operation<AnalyzeResult>> AnalyzeBinaryAsync(WaitUntil waitUntil, string analyzerId, string contentType, BinaryData input, StringEncoding? stringEncoding = default, ProcessingLocation? processingLocation = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(analyzerId, nameof(analyzerId));
            Argument.AssertNotNullOrEmpty(contentType, nameof(contentType));
            Argument.AssertNotNull(input, nameof(input));

            Operation<BinaryData> result = await AnalyzeBinaryAsync(waitUntil, analyzerId, contentType, RequestContent.Create(input), stringEncoding?.ToString(), processingLocation?.ToString(), cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return ProtocolOperationHelpers.Convert(result, response => (AnalyzeResult)response, ClientDiagnostics, "ContentAnalyzers.AnalyzeBinaryAsync");
        }

        /// <summary>
        /// [Protocol Method] Get the result of an analysis operation.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="operationId"> The unique ID of the operation. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        internal virtual Response GetResult(string operationId, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("ContentAnalyzers.GetResult");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetResultRequest(operationId, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Get the result of an analysis operation.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="operationId"> The unique ID of the operation. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        internal virtual async Task<Response> GetResultAsync(string operationId, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("ContentAnalyzers.GetResult");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetResultRequest(operationId, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the result of an analysis operation. </summary>
        /// <param name="operationId"> The unique ID of the operation. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        internal virtual Response<OperationStatusAnalyzeResultError> GetResult(string operationId, CancellationToken cancellationToken = default)
        {
            Response result = GetResult(operationId, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((OperationStatusAnalyzeResultError)result, result);
        }

        /// <summary> Get the result of an analysis operation. </summary>
        /// <param name="operationId"> The unique ID of the operation. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        internal virtual async Task<Response<OperationStatusAnalyzeResultError>> GetResultAsync(string operationId, CancellationToken cancellationToken = default)
        {
            Response result = await GetResultAsync(operationId, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((OperationStatusAnalyzeResultError)result, result);
        }

        /// <summary>
        /// [Protocol Method] Get a file associated with the result of an analysis operation.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="operationId"> Operation identifier. </param>
        /// <param name="path"> File path. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="operationId"/> or <paramref name="path"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="operationId"/> or <paramref name="path"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetResultFile(string operationId, string path, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("ContentAnalyzers.GetResultFile");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(operationId, nameof(operationId));
                Argument.AssertNotNullOrEmpty(path, nameof(path));

                using HttpMessage message = CreateGetResultFileRequest(operationId, path, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Get a file associated with the result of an analysis operation.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="operationId"> Operation identifier. </param>
        /// <param name="path"> File path. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="operationId"/> or <paramref name="path"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="operationId"/> or <paramref name="path"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetResultFileAsync(string operationId, string path, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("ContentAnalyzers.GetResultFile");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(operationId, nameof(operationId));
                Argument.AssertNotNullOrEmpty(path, nameof(path));

                using HttpMessage message = CreateGetResultFileRequest(operationId, path, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a file associated with the result of an analysis operation. </summary>
        /// <param name="operationId"> Operation identifier. </param>
        /// <param name="path"> File path. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="operationId"/> or <paramref name="path"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="operationId"/> or <paramref name="path"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<BinaryData> GetResultFile(string operationId, string path, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(operationId, nameof(operationId));
            Argument.AssertNotNullOrEmpty(path, nameof(path));

            Response result = GetResultFile(operationId, path, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue(result.Content, result);
        }

        /// <summary> Get a file associated with the result of an analysis operation. </summary>
        /// <param name="operationId"> Operation identifier. </param>
        /// <param name="path"> File path. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="operationId"/> or <paramref name="path"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="operationId"/> or <paramref name="path"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<BinaryData>> GetResultFileAsync(string operationId, string path, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(operationId, nameof(operationId));
            Argument.AssertNotNullOrEmpty(path, nameof(path));

            Response result = await GetResultFileAsync(operationId, path, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue(result.Content, result);
        }
    }
}
