// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.ContentUnderstanding
{
    /// <summary> Content from a document page. </summary>
    public partial class DocumentPage
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="DocumentPage"/>. </summary>
        /// <param name="pageNumber"> Page number (1-based). </param>
        internal DocumentPage(int pageNumber)
        {
            PageNumber = pageNumber;
            Spans = new ChangeTrackingList<ContentSpan>();
            Words = new ChangeTrackingList<DocumentWord>();
            Lines = new ChangeTrackingList<DocumentLine>();
            Barcodes = new ChangeTrackingList<DocumentBarcode>();
            Formulas = new ChangeTrackingList<DocumentFormula>();
        }

        /// <summary> Initializes a new instance of <see cref="DocumentPage"/>. </summary>
        /// <param name="pageNumber"> Page number (1-based). </param>
        /// <param name="width"> Width of the page. </param>
        /// <param name="height"> Height of the page. </param>
        /// <param name="spans"> Span(s) associated with the page in the markdown content. </param>
        /// <param name="angle">
        /// The general orientation of the content in clockwise direction,
        /// measured in degrees between (-180, 180].
        /// Only if enableOcr is true.
        /// </param>
        /// <param name="words"> List of words in the page.  Only if enableOcr and returnDetails are true. </param>
        /// <param name="lines"> List of lines in the page.  Only if enableOcr and returnDetails are true. </param>
        /// <param name="barcodes"> List of barcodes in the page.  Only if enableBarcode and returnDetails are true. </param>
        /// <param name="formulas"> List of mathematical formulas in the page.  Only if enableFormula and returnDetails are true. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal DocumentPage(int pageNumber, float? width, float? height, IList<ContentSpan> spans, float? angle, IList<DocumentWord> words, IList<DocumentLine> lines, IList<DocumentBarcode> barcodes, IList<DocumentFormula> formulas, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            PageNumber = pageNumber;
            Width = width;
            Height = height;
            Spans = spans;
            Angle = angle;
            Words = words;
            Lines = lines;
            Barcodes = barcodes;
            Formulas = formulas;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> Page number (1-based). </summary>
        public int PageNumber { get; }

        /// <summary> Width of the page. </summary>
        public float? Width { get; }

        /// <summary> Height of the page. </summary>
        public float? Height { get; }

        /// <summary> Span(s) associated with the page in the markdown content. </summary>
        public IList<ContentSpan> Spans { get; }

        /// <summary>
        /// The general orientation of the content in clockwise direction,
        /// measured in degrees between (-180, 180].
        /// Only if enableOcr is true.
        /// </summary>
        public float? Angle { get; }

        /// <summary> List of words in the page.  Only if enableOcr and returnDetails are true. </summary>
        public IList<DocumentWord> Words { get; }

        /// <summary> List of lines in the page.  Only if enableOcr and returnDetails are true. </summary>
        public IList<DocumentLine> Lines { get; }

        /// <summary> List of barcodes in the page.  Only if enableBarcode and returnDetails are true. </summary>
        public IList<DocumentBarcode> Barcodes { get; }

        /// <summary> List of mathematical formulas in the page.  Only if enableFormula and returnDetails are true. </summary>
        public IList<DocumentFormula> Formulas { get; }
    }
}
