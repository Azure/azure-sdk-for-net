// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.AI.ContentUnderstanding
{
    /// <summary> The PersonDirectories sub-client. </summary>
    public partial class PersonDirectories
    {
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> Initializes a new instance of PersonDirectories for mocking. </summary>
        protected PersonDirectories()
        {
        }

        /// <summary> Initializes a new instance of PersonDirectories. </summary>
        /// <param name="clientDiagnostics"> The ClientDiagnostics is used to provide tracing support for the client library. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> Service endpoint. </param>
        /// <param name="apiVersion"></param>
        internal PersonDirectories(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint, string apiVersion)
        {
            ClientDiagnostics = clientDiagnostics;
            _endpoint = endpoint;
            Pipeline = pipeline;
            _apiVersion = apiVersion;
        }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline { get; }

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary>
        /// [Protocol Method] Create a new person directory.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="personDirectoryId"> The unique identifier of the person directory. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personDirectoryId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personDirectoryId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response Create(string personDirectoryId, RequestContent content, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("PersonDirectories.Create");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(personDirectoryId, nameof(personDirectoryId));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateCreateRequest(personDirectoryId, content, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Create a new person directory.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="personDirectoryId"> The unique identifier of the person directory. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personDirectoryId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personDirectoryId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> CreateAsync(string personDirectoryId, RequestContent content, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("PersonDirectories.Create");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(personDirectoryId, nameof(personDirectoryId));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateCreateRequest(personDirectoryId, content, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a new person directory. </summary>
        /// <param name="personDirectoryId"> The unique identifier of the person directory. </param>
        /// <param name="resource"> The resource instance. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personDirectoryId"/> or <paramref name="resource"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personDirectoryId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<PersonDirectory> Create(string personDirectoryId, PersonDirectory resource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(personDirectoryId, nameof(personDirectoryId));
            Argument.AssertNotNull(resource, nameof(resource));

            Response result = Create(personDirectoryId, resource, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((PersonDirectory)result, result);
        }

        /// <summary> Create a new person directory. </summary>
        /// <param name="personDirectoryId"> The unique identifier of the person directory. </param>
        /// <param name="resource"> The resource instance. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personDirectoryId"/> or <paramref name="resource"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personDirectoryId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<PersonDirectory>> CreateAsync(string personDirectoryId, PersonDirectory resource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(personDirectoryId, nameof(personDirectoryId));
            Argument.AssertNotNull(resource, nameof(resource));

            Response result = await CreateAsync(personDirectoryId, resource, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((PersonDirectory)result, result);
        }

        /// <summary>
        /// [Protocol Method] Update person directory properties.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="personDirectoryId"> The unique identifier of the person directory. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personDirectoryId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personDirectoryId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response Update(string personDirectoryId, RequestContent content, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("PersonDirectories.Update");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(personDirectoryId, nameof(personDirectoryId));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateUpdateRequest(personDirectoryId, content, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Update person directory properties.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="personDirectoryId"> The unique identifier of the person directory. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personDirectoryId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personDirectoryId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> UpdateAsync(string personDirectoryId, RequestContent content, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("PersonDirectories.Update");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(personDirectoryId, nameof(personDirectoryId));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateUpdateRequest(personDirectoryId, content, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Get person directory properties.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="personDirectoryId"> The unique identifier of the person directory. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personDirectoryId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personDirectoryId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response Get(string personDirectoryId, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("PersonDirectories.Get");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(personDirectoryId, nameof(personDirectoryId));

                using HttpMessage message = CreateGetRequest(personDirectoryId, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Get person directory properties.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="personDirectoryId"> The unique identifier of the person directory. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personDirectoryId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personDirectoryId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetAsync(string personDirectoryId, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("PersonDirectories.Get");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(personDirectoryId, nameof(personDirectoryId));

                using HttpMessage message = CreateGetRequest(personDirectoryId, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get person directory properties. </summary>
        /// <param name="personDirectoryId"> The unique identifier of the person directory. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personDirectoryId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personDirectoryId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<PersonDirectory> Get(string personDirectoryId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(personDirectoryId, nameof(personDirectoryId));

            Response result = Get(personDirectoryId, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((PersonDirectory)result, result);
        }

        /// <summary> Get person directory properties. </summary>
        /// <param name="personDirectoryId"> The unique identifier of the person directory. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personDirectoryId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personDirectoryId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<PersonDirectory>> GetAsync(string personDirectoryId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(personDirectoryId, nameof(personDirectoryId));

            Response result = await GetAsync(personDirectoryId, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((PersonDirectory)result, result);
        }

        /// <summary>
        /// [Protocol Method] Delete person directory and all associated persons and faces.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="personDirectoryId"> The unique identifier of the person directory. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personDirectoryId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personDirectoryId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response Delete(string personDirectoryId, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("PersonDirectories.Delete");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(personDirectoryId, nameof(personDirectoryId));

                using HttpMessage message = CreateDeleteRequest(personDirectoryId, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Delete person directory and all associated persons and faces.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="personDirectoryId"> The unique identifier of the person directory. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personDirectoryId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personDirectoryId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> DeleteAsync(string personDirectoryId, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("PersonDirectories.Delete");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(personDirectoryId, nameof(personDirectoryId));

                using HttpMessage message = CreateDeleteRequest(personDirectoryId, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete person directory and all associated persons and faces. </summary>
        /// <param name="personDirectoryId"> The unique identifier of the person directory. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personDirectoryId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personDirectoryId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response Delete(string personDirectoryId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(personDirectoryId, nameof(personDirectoryId));

            return Delete(personDirectoryId, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary> Delete person directory and all associated persons and faces. </summary>
        /// <param name="personDirectoryId"> The unique identifier of the person directory. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personDirectoryId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personDirectoryId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response> DeleteAsync(string personDirectoryId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(personDirectoryId, nameof(personDirectoryId));

            return await DeleteAsync(personDirectoryId, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] List person directories.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Pageable<BinaryData> GetAll(RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("PersonDirectories.GetAll");
            scope.Start();
            try
            {
                return new PersonDirectoriesGetAllCollectionResult(this, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] List person directories.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual AsyncPageable<BinaryData> GetAllAsync(RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("PersonDirectories.GetAll");
            scope.Start();
            try
            {
                return new PersonDirectoriesGetAllAsyncCollectionResult(this, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List person directories. </summary>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Pageable<PersonDirectory> GetAll(CancellationToken cancellationToken = default)
        {
            return new PersonDirectoriesGetAllCollectionResultOfT(this, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary> List person directories. </summary>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual AsyncPageable<PersonDirectory> GetAllAsync(CancellationToken cancellationToken = default)
        {
            return new PersonDirectoriesGetAllAsyncCollectionResultOfT(this, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary>
        /// [Protocol Method] Add a new person and optionally associate with existing faces.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="personDirectoryId"> The unique identifier of the person directory. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personDirectoryId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personDirectoryId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response AddPerson(string personDirectoryId, RequestContent content, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("PersonDirectories.AddPerson");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(personDirectoryId, nameof(personDirectoryId));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateAddPersonRequest(personDirectoryId, content, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Add a new person and optionally associate with existing faces.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="personDirectoryId"> The unique identifier of the person directory. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personDirectoryId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personDirectoryId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> AddPersonAsync(string personDirectoryId, RequestContent content, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("PersonDirectories.AddPerson");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(personDirectoryId, nameof(personDirectoryId));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateAddPersonRequest(personDirectoryId, content, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Add a new person and optionally associate with existing faces. </summary>
        /// <param name="personDirectoryId"> The unique identifier of the person directory. </param>
        /// <param name="tags"> Tags associated with the person. </param>
        /// <param name="faceIds"> List of faces associated with the person. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personDirectoryId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personDirectoryId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<PersonDirectoryPerson> AddPerson(string personDirectoryId, IDictionary<string, string> tags = default, IEnumerable<string> faceIds = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(personDirectoryId, nameof(personDirectoryId));

            AddPersonRequest spreadModel = new AddPersonRequest(tags, faceIds?.ToList() as IList<string> ?? new ChangeTrackingList<string>(), default);
            Response result = AddPerson(personDirectoryId, spreadModel, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((PersonDirectoryPerson)result, result);
        }

        /// <summary> Add a new person and optionally associate with existing faces. </summary>
        /// <param name="personDirectoryId"> The unique identifier of the person directory. </param>
        /// <param name="tags"> Tags associated with the person. </param>
        /// <param name="faceIds"> List of faces associated with the person. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personDirectoryId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personDirectoryId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<PersonDirectoryPerson>> AddPersonAsync(string personDirectoryId, IDictionary<string, string> tags = default, IEnumerable<string> faceIds = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(personDirectoryId, nameof(personDirectoryId));

            AddPersonRequest spreadModel = new AddPersonRequest(tags, faceIds?.ToList() as IList<string> ?? new ChangeTrackingList<string>(), default);
            Response result = await AddPersonAsync(personDirectoryId, spreadModel, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((PersonDirectoryPerson)result, result);
        }

        /// <summary>
        /// [Protocol Method] Update person properties.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="personDirectoryId"> The unique identifier of the person directory. </param>
        /// <param name="personId"> The unique identifier of the person. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personDirectoryId"/>, <paramref name="personId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personDirectoryId"/> or <paramref name="personId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response UpdatePerson(string personDirectoryId, string personId, RequestContent content, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("PersonDirectories.UpdatePerson");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(personDirectoryId, nameof(personDirectoryId));
                Argument.AssertNotNullOrEmpty(personId, nameof(personId));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateUpdatePersonRequest(personDirectoryId, personId, content, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Update person properties.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="personDirectoryId"> The unique identifier of the person directory. </param>
        /// <param name="personId"> The unique identifier of the person. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personDirectoryId"/>, <paramref name="personId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personDirectoryId"/> or <paramref name="personId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> UpdatePersonAsync(string personDirectoryId, string personId, RequestContent content, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("PersonDirectories.UpdatePerson");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(personDirectoryId, nameof(personDirectoryId));
                Argument.AssertNotNullOrEmpty(personId, nameof(personId));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateUpdatePersonRequest(personDirectoryId, personId, content, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Get person properties.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="personDirectoryId"> The unique identifier of the person directory. </param>
        /// <param name="personId"> The unique identifier of the person. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personDirectoryId"/> or <paramref name="personId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personDirectoryId"/> or <paramref name="personId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetPerson(string personDirectoryId, string personId, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("PersonDirectories.GetPerson");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(personDirectoryId, nameof(personDirectoryId));
                Argument.AssertNotNullOrEmpty(personId, nameof(personId));

                using HttpMessage message = CreateGetPersonRequest(personDirectoryId, personId, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Get person properties.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="personDirectoryId"> The unique identifier of the person directory. </param>
        /// <param name="personId"> The unique identifier of the person. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personDirectoryId"/> or <paramref name="personId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personDirectoryId"/> or <paramref name="personId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetPersonAsync(string personDirectoryId, string personId, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("PersonDirectories.GetPerson");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(personDirectoryId, nameof(personDirectoryId));
                Argument.AssertNotNullOrEmpty(personId, nameof(personId));

                using HttpMessage message = CreateGetPersonRequest(personDirectoryId, personId, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get person properties. </summary>
        /// <param name="personDirectoryId"> The unique identifier of the person directory. </param>
        /// <param name="personId"> The unique identifier of the person. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personDirectoryId"/> or <paramref name="personId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personDirectoryId"/> or <paramref name="personId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<PersonDirectoryPerson> GetPerson(string personDirectoryId, string personId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(personDirectoryId, nameof(personDirectoryId));
            Argument.AssertNotNullOrEmpty(personId, nameof(personId));

            Response result = GetPerson(personDirectoryId, personId, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((PersonDirectoryPerson)result, result);
        }

        /// <summary> Get person properties. </summary>
        /// <param name="personDirectoryId"> The unique identifier of the person directory. </param>
        /// <param name="personId"> The unique identifier of the person. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personDirectoryId"/> or <paramref name="personId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personDirectoryId"/> or <paramref name="personId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<PersonDirectoryPerson>> GetPersonAsync(string personDirectoryId, string personId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(personDirectoryId, nameof(personDirectoryId));
            Argument.AssertNotNullOrEmpty(personId, nameof(personId));

            Response result = await GetPersonAsync(personDirectoryId, personId, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((PersonDirectoryPerson)result, result);
        }

        /// <summary>
        /// [Protocol Method] Delete person.  Any linked faces will be disassociated, but not deleted.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="personDirectoryId"> The unique identifier of the person directory. </param>
        /// <param name="personId"> The unique identifier of the person. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personDirectoryId"/> or <paramref name="personId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personDirectoryId"/> or <paramref name="personId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response DeletePerson(string personDirectoryId, string personId, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("PersonDirectories.DeletePerson");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(personDirectoryId, nameof(personDirectoryId));
                Argument.AssertNotNullOrEmpty(personId, nameof(personId));

                using HttpMessage message = CreateDeletePersonRequest(personDirectoryId, personId, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Delete person.  Any linked faces will be disassociated, but not deleted.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="personDirectoryId"> The unique identifier of the person directory. </param>
        /// <param name="personId"> The unique identifier of the person. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personDirectoryId"/> or <paramref name="personId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personDirectoryId"/> or <paramref name="personId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> DeletePersonAsync(string personDirectoryId, string personId, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("PersonDirectories.DeletePerson");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(personDirectoryId, nameof(personDirectoryId));
                Argument.AssertNotNullOrEmpty(personId, nameof(personId));

                using HttpMessage message = CreateDeletePersonRequest(personDirectoryId, personId, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete person.  Any linked faces will be disassociated, but not deleted. </summary>
        /// <param name="personDirectoryId"> The unique identifier of the person directory. </param>
        /// <param name="personId"> The unique identifier of the person. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personDirectoryId"/> or <paramref name="personId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personDirectoryId"/> or <paramref name="personId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response DeletePerson(string personDirectoryId, string personId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(personDirectoryId, nameof(personDirectoryId));
            Argument.AssertNotNullOrEmpty(personId, nameof(personId));

            return DeletePerson(personDirectoryId, personId, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary> Delete person.  Any linked faces will be disassociated, but not deleted. </summary>
        /// <param name="personDirectoryId"> The unique identifier of the person directory. </param>
        /// <param name="personId"> The unique identifier of the person. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personDirectoryId"/> or <paramref name="personId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personDirectoryId"/> or <paramref name="personId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response> DeletePersonAsync(string personDirectoryId, string personId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(personDirectoryId, nameof(personDirectoryId));
            Argument.AssertNotNullOrEmpty(personId, nameof(personId));

            return await DeletePersonAsync(personDirectoryId, personId, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] List persons.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="personDirectoryId"> The unique identifier of the person directory. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personDirectoryId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personDirectoryId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Pageable<BinaryData> GetPersons(string personDirectoryId, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("PersonDirectories.GetPersons");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(personDirectoryId, nameof(personDirectoryId));

                return new PersonDirectoriesGetPersonsCollectionResult(this, personDirectoryId, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] List persons.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="personDirectoryId"> The unique identifier of the person directory. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personDirectoryId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personDirectoryId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual AsyncPageable<BinaryData> GetPersonsAsync(string personDirectoryId, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("PersonDirectories.GetPersons");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(personDirectoryId, nameof(personDirectoryId));

                return new PersonDirectoriesGetPersonsAsyncCollectionResult(this, personDirectoryId, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List persons. </summary>
        /// <param name="personDirectoryId"> The unique identifier of the person directory. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personDirectoryId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personDirectoryId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Pageable<PersonDirectoryPerson> GetPersons(string personDirectoryId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(personDirectoryId, nameof(personDirectoryId));

            return new PersonDirectoriesGetPersonsCollectionResultOfT(this, personDirectoryId, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary> List persons. </summary>
        /// <param name="personDirectoryId"> The unique identifier of the person directory. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personDirectoryId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personDirectoryId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual AsyncPageable<PersonDirectoryPerson> GetPersonsAsync(string personDirectoryId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(personDirectoryId, nameof(personDirectoryId));

            return new PersonDirectoriesGetPersonsAsyncCollectionResultOfT(this, personDirectoryId, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary>
        /// [Protocol Method] Add a new face.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="personDirectoryId"> The unique identifier of the person directory. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personDirectoryId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personDirectoryId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response AddFace(string personDirectoryId, RequestContent content, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("PersonDirectories.AddFace");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(personDirectoryId, nameof(personDirectoryId));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateAddFaceRequest(personDirectoryId, content, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Add a new face.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="personDirectoryId"> The unique identifier of the person directory. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personDirectoryId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personDirectoryId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> AddFaceAsync(string personDirectoryId, RequestContent content, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("PersonDirectories.AddFace");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(personDirectoryId, nameof(personDirectoryId));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateAddFaceRequest(personDirectoryId, content, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Add a new face. </summary>
        /// <param name="personDirectoryId"> The unique identifier of the person directory. </param>
        /// <param name="faceSource"> Source of the face. </param>
        /// <param name="personId"> Person identifier with which to associate the face. </param>
        /// <param name="qualityThreshold"> Face quality threshold below which the face will not be added. Default is medium. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personDirectoryId"/> or <paramref name="faceSource"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personDirectoryId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<PersonDirectoryFace> AddFace(string personDirectoryId, FaceSource faceSource, string personId = default, QualityForRecognition? qualityThreshold = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(personDirectoryId, nameof(personDirectoryId));
            Argument.AssertNotNull(faceSource, nameof(faceSource));

            AddFaceRequest spreadModel = new AddFaceRequest(faceSource, personId, qualityThreshold, default);
            Response result = AddFace(personDirectoryId, spreadModel, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((PersonDirectoryFace)result, result);
        }

        /// <summary> Add a new face. </summary>
        /// <param name="personDirectoryId"> The unique identifier of the person directory. </param>
        /// <param name="faceSource"> Source of the face. </param>
        /// <param name="personId"> Person identifier with which to associate the face. </param>
        /// <param name="qualityThreshold"> Face quality threshold below which the face will not be added. Default is medium. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personDirectoryId"/> or <paramref name="faceSource"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personDirectoryId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<PersonDirectoryFace>> AddFaceAsync(string personDirectoryId, FaceSource faceSource, string personId = default, QualityForRecognition? qualityThreshold = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(personDirectoryId, nameof(personDirectoryId));
            Argument.AssertNotNull(faceSource, nameof(faceSource));

            AddFaceRequest spreadModel = new AddFaceRequest(faceSource, personId, qualityThreshold, default);
            Response result = await AddFaceAsync(personDirectoryId, spreadModel, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((PersonDirectoryFace)result, result);
        }

        /// <summary>
        /// [Protocol Method] Update face properties, such as modifying the association with a person.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="personDirectoryId"> The unique identifier of the person directory. </param>
        /// <param name="faceId"> The unique identifier of the face. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personDirectoryId"/>, <paramref name="faceId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personDirectoryId"/> or <paramref name="faceId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response UpdateFace(string personDirectoryId, string faceId, RequestContent content, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("PersonDirectories.UpdateFace");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(personDirectoryId, nameof(personDirectoryId));
                Argument.AssertNotNullOrEmpty(faceId, nameof(faceId));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateUpdateFaceRequest(personDirectoryId, faceId, content, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Update face properties, such as modifying the association with a person.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="personDirectoryId"> The unique identifier of the person directory. </param>
        /// <param name="faceId"> The unique identifier of the face. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personDirectoryId"/>, <paramref name="faceId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personDirectoryId"/> or <paramref name="faceId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> UpdateFaceAsync(string personDirectoryId, string faceId, RequestContent content, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("PersonDirectories.UpdateFace");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(personDirectoryId, nameof(personDirectoryId));
                Argument.AssertNotNullOrEmpty(faceId, nameof(faceId));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateUpdateFaceRequest(personDirectoryId, faceId, content, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Get face properties.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="personDirectoryId"> The unique identifier of the person directory. </param>
        /// <param name="faceId"> The unique identifier of the face. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personDirectoryId"/> or <paramref name="faceId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personDirectoryId"/> or <paramref name="faceId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetFace(string personDirectoryId, string faceId, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("PersonDirectories.GetFace");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(personDirectoryId, nameof(personDirectoryId));
                Argument.AssertNotNullOrEmpty(faceId, nameof(faceId));

                using HttpMessage message = CreateGetFaceRequest(personDirectoryId, faceId, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Get face properties.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="personDirectoryId"> The unique identifier of the person directory. </param>
        /// <param name="faceId"> The unique identifier of the face. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personDirectoryId"/> or <paramref name="faceId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personDirectoryId"/> or <paramref name="faceId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetFaceAsync(string personDirectoryId, string faceId, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("PersonDirectories.GetFace");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(personDirectoryId, nameof(personDirectoryId));
                Argument.AssertNotNullOrEmpty(faceId, nameof(faceId));

                using HttpMessage message = CreateGetFaceRequest(personDirectoryId, faceId, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get face properties. </summary>
        /// <param name="personDirectoryId"> The unique identifier of the person directory. </param>
        /// <param name="faceId"> The unique identifier of the face. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personDirectoryId"/> or <paramref name="faceId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personDirectoryId"/> or <paramref name="faceId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<PersonDirectoryFace> GetFace(string personDirectoryId, string faceId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(personDirectoryId, nameof(personDirectoryId));
            Argument.AssertNotNullOrEmpty(faceId, nameof(faceId));

            Response result = GetFace(personDirectoryId, faceId, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((PersonDirectoryFace)result, result);
        }

        /// <summary> Get face properties. </summary>
        /// <param name="personDirectoryId"> The unique identifier of the person directory. </param>
        /// <param name="faceId"> The unique identifier of the face. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personDirectoryId"/> or <paramref name="faceId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personDirectoryId"/> or <paramref name="faceId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<PersonDirectoryFace>> GetFaceAsync(string personDirectoryId, string faceId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(personDirectoryId, nameof(personDirectoryId));
            Argument.AssertNotNullOrEmpty(faceId, nameof(faceId));

            Response result = await GetFaceAsync(personDirectoryId, faceId, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((PersonDirectoryFace)result, result);
        }

        /// <summary>
        /// [Protocol Method] Delete face.  Any linked person will be disassociated, but not deleted.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="personDirectoryId"> The unique identifier of the person directory. </param>
        /// <param name="faceId"> The unique identifier of the face. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personDirectoryId"/> or <paramref name="faceId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personDirectoryId"/> or <paramref name="faceId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response DeleteFace(string personDirectoryId, string faceId, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("PersonDirectories.DeleteFace");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(personDirectoryId, nameof(personDirectoryId));
                Argument.AssertNotNullOrEmpty(faceId, nameof(faceId));

                using HttpMessage message = CreateDeleteFaceRequest(personDirectoryId, faceId, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Delete face.  Any linked person will be disassociated, but not deleted.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="personDirectoryId"> The unique identifier of the person directory. </param>
        /// <param name="faceId"> The unique identifier of the face. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personDirectoryId"/> or <paramref name="faceId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personDirectoryId"/> or <paramref name="faceId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> DeleteFaceAsync(string personDirectoryId, string faceId, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("PersonDirectories.DeleteFace");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(personDirectoryId, nameof(personDirectoryId));
                Argument.AssertNotNullOrEmpty(faceId, nameof(faceId));

                using HttpMessage message = CreateDeleteFaceRequest(personDirectoryId, faceId, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete face.  Any linked person will be disassociated, but not deleted. </summary>
        /// <param name="personDirectoryId"> The unique identifier of the person directory. </param>
        /// <param name="faceId"> The unique identifier of the face. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personDirectoryId"/> or <paramref name="faceId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personDirectoryId"/> or <paramref name="faceId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response DeleteFace(string personDirectoryId, string faceId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(personDirectoryId, nameof(personDirectoryId));
            Argument.AssertNotNullOrEmpty(faceId, nameof(faceId));

            return DeleteFace(personDirectoryId, faceId, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary> Delete face.  Any linked person will be disassociated, but not deleted. </summary>
        /// <param name="personDirectoryId"> The unique identifier of the person directory. </param>
        /// <param name="faceId"> The unique identifier of the face. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personDirectoryId"/> or <paramref name="faceId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personDirectoryId"/> or <paramref name="faceId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response> DeleteFaceAsync(string personDirectoryId, string faceId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(personDirectoryId, nameof(personDirectoryId));
            Argument.AssertNotNullOrEmpty(faceId, nameof(faceId));

            return await DeleteFaceAsync(personDirectoryId, faceId, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] List faces.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="personDirectoryId"> The unique identifier of the person directory. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personDirectoryId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personDirectoryId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Pageable<BinaryData> GetFaces(string personDirectoryId, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("PersonDirectories.GetFaces");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(personDirectoryId, nameof(personDirectoryId));

                return new PersonDirectoriesGetFacesCollectionResult(this, personDirectoryId, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] List faces.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="personDirectoryId"> The unique identifier of the person directory. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personDirectoryId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personDirectoryId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual AsyncPageable<BinaryData> GetFacesAsync(string personDirectoryId, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("PersonDirectories.GetFaces");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(personDirectoryId, nameof(personDirectoryId));

                return new PersonDirectoriesGetFacesAsyncCollectionResult(this, personDirectoryId, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List faces. </summary>
        /// <param name="personDirectoryId"> The unique identifier of the person directory. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personDirectoryId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personDirectoryId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Pageable<PersonDirectoryFace> GetFaces(string personDirectoryId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(personDirectoryId, nameof(personDirectoryId));

            return new PersonDirectoriesGetFacesCollectionResultOfT(this, personDirectoryId, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary> List faces. </summary>
        /// <param name="personDirectoryId"> The unique identifier of the person directory. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personDirectoryId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personDirectoryId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual AsyncPageable<PersonDirectoryFace> GetFacesAsync(string personDirectoryId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(personDirectoryId, nameof(personDirectoryId));

            return new PersonDirectoriesGetFacesAsyncCollectionResultOfT(this, personDirectoryId, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary>
        /// [Protocol Method] Identify the person from a face.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="personDirectoryId"> The unique identifier of the person directory. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personDirectoryId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personDirectoryId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response IdentifyPerson(string personDirectoryId, RequestContent content, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("PersonDirectories.IdentifyPerson");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(personDirectoryId, nameof(personDirectoryId));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateIdentifyPersonRequest(personDirectoryId, content, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Identify the person from a face.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="personDirectoryId"> The unique identifier of the person directory. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personDirectoryId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personDirectoryId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> IdentifyPersonAsync(string personDirectoryId, RequestContent content, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("PersonDirectories.IdentifyPerson");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(personDirectoryId, nameof(personDirectoryId));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateIdentifyPersonRequest(personDirectoryId, content, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Identify the person from a face. </summary>
        /// <param name="personDirectoryId"> The unique identifier of the person directory. </param>
        /// <param name="faceSource"> Source of the face. </param>
        /// <param name="maxPersonCandidates"> Maximum number of person candidates to return (up to 10). </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personDirectoryId"/> or <paramref name="faceSource"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personDirectoryId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<IdentifyPersonResult> IdentifyPerson(string personDirectoryId, FaceSource faceSource, int? maxPersonCandidates = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(personDirectoryId, nameof(personDirectoryId));
            Argument.AssertNotNull(faceSource, nameof(faceSource));

            IdentifyPersonRequest spreadModel = new IdentifyPersonRequest(faceSource, maxPersonCandidates, default);
            Response result = IdentifyPerson(personDirectoryId, spreadModel, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((IdentifyPersonResult)result, result);
        }

        /// <summary> Identify the person from a face. </summary>
        /// <param name="personDirectoryId"> The unique identifier of the person directory. </param>
        /// <param name="faceSource"> Source of the face. </param>
        /// <param name="maxPersonCandidates"> Maximum number of person candidates to return (up to 10). </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personDirectoryId"/> or <paramref name="faceSource"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personDirectoryId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<IdentifyPersonResult>> IdentifyPersonAsync(string personDirectoryId, FaceSource faceSource, int? maxPersonCandidates = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(personDirectoryId, nameof(personDirectoryId));
            Argument.AssertNotNull(faceSource, nameof(faceSource));

            IdentifyPersonRequest spreadModel = new IdentifyPersonRequest(faceSource, maxPersonCandidates, default);
            Response result = await IdentifyPersonAsync(personDirectoryId, spreadModel, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((IdentifyPersonResult)result, result);
        }

        /// <summary>
        /// [Protocol Method] Find similar faces.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="personDirectoryId"> The unique identifier of the person directory. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personDirectoryId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personDirectoryId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response FindSimilarFaces(string personDirectoryId, RequestContent content, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("PersonDirectories.FindSimilarFaces");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(personDirectoryId, nameof(personDirectoryId));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateFindSimilarFacesRequest(personDirectoryId, content, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Find similar faces.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="personDirectoryId"> The unique identifier of the person directory. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personDirectoryId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personDirectoryId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> FindSimilarFacesAsync(string personDirectoryId, RequestContent content, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("PersonDirectories.FindSimilarFaces");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(personDirectoryId, nameof(personDirectoryId));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateFindSimilarFacesRequest(personDirectoryId, content, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Find similar faces. </summary>
        /// <param name="personDirectoryId"> The unique identifier of the person directory. </param>
        /// <param name="faceSource"> Source of the face. </param>
        /// <param name="maxSimilarFaces"> Maximum number of similar faces to return (up to 1000). </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personDirectoryId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personDirectoryId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<FindSimilarFacesResult> FindSimilarFaces(string personDirectoryId, FaceSource faceSource = default, int? maxSimilarFaces = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(personDirectoryId, nameof(personDirectoryId));

            FindSimilarFacesRequest spreadModel = new FindSimilarFacesRequest(faceSource, maxSimilarFaces, default);
            Response result = FindSimilarFaces(personDirectoryId, spreadModel, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((FindSimilarFacesResult)result, result);
        }

        /// <summary> Find similar faces. </summary>
        /// <param name="personDirectoryId"> The unique identifier of the person directory. </param>
        /// <param name="faceSource"> Source of the face. </param>
        /// <param name="maxSimilarFaces"> Maximum number of similar faces to return (up to 1000). </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personDirectoryId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personDirectoryId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<FindSimilarFacesResult>> FindSimilarFacesAsync(string personDirectoryId, FaceSource faceSource = default, int? maxSimilarFaces = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(personDirectoryId, nameof(personDirectoryId));

            FindSimilarFacesRequest spreadModel = new FindSimilarFacesRequest(faceSource, maxSimilarFaces, default);
            Response result = await FindSimilarFacesAsync(personDirectoryId, spreadModel, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((FindSimilarFacesResult)result, result);
        }

        /// <summary>
        /// [Protocol Method] Verify if a face matches the person.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="personDirectoryId"> The unique identifier of the person directory. </param>
        /// <param name="personId"> The unique identifier of the person. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personDirectoryId"/>, <paramref name="personId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personDirectoryId"/> or <paramref name="personId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response VerifyPerson(string personDirectoryId, string personId, RequestContent content, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("PersonDirectories.VerifyPerson");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(personDirectoryId, nameof(personDirectoryId));
                Argument.AssertNotNullOrEmpty(personId, nameof(personId));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateVerifyPersonRequest(personDirectoryId, personId, content, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Verify if a face matches the person.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="personDirectoryId"> The unique identifier of the person directory. </param>
        /// <param name="personId"> The unique identifier of the person. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personDirectoryId"/>, <paramref name="personId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personDirectoryId"/> or <paramref name="personId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> VerifyPersonAsync(string personDirectoryId, string personId, RequestContent content, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("PersonDirectories.VerifyPerson");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(personDirectoryId, nameof(personDirectoryId));
                Argument.AssertNotNullOrEmpty(personId, nameof(personId));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateVerifyPersonRequest(personDirectoryId, personId, content, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Verify if a face matches the person. </summary>
        /// <param name="personDirectoryId"> The unique identifier of the person directory. </param>
        /// <param name="personId"> The unique identifier of the person. </param>
        /// <param name="faceSource"> Source of the face. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personDirectoryId"/>, <paramref name="personId"/> or <paramref name="faceSource"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personDirectoryId"/> or <paramref name="personId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<VerifyPersonResult> VerifyPerson(string personDirectoryId, string personId, FaceSource faceSource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(personDirectoryId, nameof(personDirectoryId));
            Argument.AssertNotNullOrEmpty(personId, nameof(personId));
            Argument.AssertNotNull(faceSource, nameof(faceSource));

            VerifyPersonRequest spreadModel = new VerifyPersonRequest(faceSource, default);
            Response result = VerifyPerson(personDirectoryId, personId, spreadModel, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((VerifyPersonResult)result, result);
        }

        /// <summary> Verify if a face matches the person. </summary>
        /// <param name="personDirectoryId"> The unique identifier of the person directory. </param>
        /// <param name="personId"> The unique identifier of the person. </param>
        /// <param name="faceSource"> Source of the face. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personDirectoryId"/>, <paramref name="personId"/> or <paramref name="faceSource"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personDirectoryId"/> or <paramref name="personId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<VerifyPersonResult>> VerifyPersonAsync(string personDirectoryId, string personId, FaceSource faceSource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(personDirectoryId, nameof(personDirectoryId));
            Argument.AssertNotNullOrEmpty(personId, nameof(personId));
            Argument.AssertNotNull(faceSource, nameof(faceSource));

            VerifyPersonRequest spreadModel = new VerifyPersonRequest(faceSource, default);
            Response result = await VerifyPersonAsync(personDirectoryId, personId, spreadModel, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((VerifyPersonResult)result, result);
        }
    }
}
