// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;

namespace Azure.AI.ContentUnderstanding
{
    /// <summary> Audio visual content.  Ex. audio/wav, video/mp4. </summary>
    public partial class AudioVisualContent : MediaContent, IJsonModel<AudioVisualContent>
    {
        /// <summary> Initializes a new instance of <see cref="AudioVisualContent"/> for deserialization. </summary>
        internal AudioVisualContent()
        {
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<AudioVisualContent>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<AudioVisualContent>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(AudioVisualContent)} does not support writing '{format}' format.");
            }
            base.JsonModelWriteCore(writer, options);
            writer.WritePropertyName("startTimeMs"u8);
            writer.WriteNumberValue(StartTimeMs);
            writer.WritePropertyName("endTimeMs"u8);
            writer.WriteNumberValue(EndTimeMs);
            if (Optional.IsDefined(Width))
            {
                writer.WritePropertyName("width"u8);
                writer.WriteNumberValue(Width.Value);
            }
            if (Optional.IsDefined(Height))
            {
                writer.WritePropertyName("height"u8);
                writer.WriteNumberValue(Height.Value);
            }
            if (Optional.IsCollectionDefined(CameraShotTimesMs))
            {
                writer.WritePropertyName("cameraShotTimesMs"u8);
                writer.WriteStartArray();
                foreach (long item in CameraShotTimesMs)
                {
                    writer.WriteNumberValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(KeyFrameTimesMs))
            {
                writer.WritePropertyName("keyFrameTimesMs"u8);
                writer.WriteStartArray();
                foreach (long item in KeyFrameTimesMs)
                {
                    writer.WriteNumberValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(TranscriptPhrases))
            {
                writer.WritePropertyName("transcriptPhrases"u8);
                writer.WriteStartArray();
                foreach (TranscriptPhrase item in TranscriptPhrases)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Persons))
            {
                writer.WritePropertyName("persons"u8);
                writer.WriteStartArray();
                foreach (DetectedPerson item in Persons)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Segments))
            {
                writer.WritePropertyName("segments"u8);
                writer.WriteStartArray();
                foreach (AudioVisualSegment item in Segments)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        AudioVisualContent IJsonModel<AudioVisualContent>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => (AudioVisualContent)JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override MediaContent JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<AudioVisualContent>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(AudioVisualContent)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeAudioVisualContent(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static AudioVisualContent DeserializeAudioVisualContent(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            MediaContentKind kind = default;
            string mimeType = default;
            string category = default;
            Uri path = default;
            string markdown = default;
            IDictionary<string, ContentField> fields = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            long startTimeMs = default;
            long endTimeMs = default;
            int? width = default;
            int? height = default;
            IList<long> cameraShotTimesMs = default;
            IList<long> keyFrameTimesMs = default;
            IList<TranscriptPhrase> transcriptPhrases = default;
            IList<DetectedPerson> persons = default;
            IList<AudioVisualSegment> segments = default;
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("kind"u8))
                {
                    kind = new MediaContentKind(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("mimeType"u8))
                {
                    mimeType = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("category"u8))
                {
                    category = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("path"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    path = new Uri(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("markdown"u8))
                {
                    markdown = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("fields"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, ContentField> dictionary = new Dictionary<string, ContentField>();
                    foreach (var prop0 in prop.Value.EnumerateObject())
                    {
                        dictionary.Add(prop0.Name, ContentField.DeserializeContentField(prop0.Value, options));
                    }
                    fields = dictionary;
                    continue;
                }
                if (prop.NameEquals("startTimeMs"u8))
                {
                    startTimeMs = prop.Value.GetInt64();
                    continue;
                }
                if (prop.NameEquals("endTimeMs"u8))
                {
                    endTimeMs = prop.Value.GetInt64();
                    continue;
                }
                if (prop.NameEquals("width"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    width = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("height"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    height = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("cameraShotTimesMs"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<long> array = new List<long>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(item.GetInt64());
                    }
                    cameraShotTimesMs = array;
                    continue;
                }
                if (prop.NameEquals("keyFrameTimesMs"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<long> array = new List<long>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(item.GetInt64());
                    }
                    keyFrameTimesMs = array;
                    continue;
                }
                if (prop.NameEquals("transcriptPhrases"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<TranscriptPhrase> array = new List<TranscriptPhrase>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(TranscriptPhrase.DeserializeTranscriptPhrase(item, options));
                    }
                    transcriptPhrases = array;
                    continue;
                }
                if (prop.NameEquals("persons"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<DetectedPerson> array = new List<DetectedPerson>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(DetectedPerson.DeserializeDetectedPerson(item, options));
                    }
                    persons = array;
                    continue;
                }
                if (prop.NameEquals("segments"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<AudioVisualSegment> array = new List<AudioVisualSegment>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(AudioVisualSegment.DeserializeAudioVisualSegment(item, options));
                    }
                    segments = array;
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new AudioVisualContent(
                kind,
                mimeType,
                category,
                path,
                markdown,
                fields ?? new ChangeTrackingDictionary<string, ContentField>(),
                additionalBinaryDataProperties,
                startTimeMs,
                endTimeMs,
                width,
                height,
                cameraShotTimesMs ?? new ChangeTrackingList<long>(),
                keyFrameTimesMs ?? new ChangeTrackingList<long>(),
                transcriptPhrases ?? new ChangeTrackingList<TranscriptPhrase>(),
                persons ?? new ChangeTrackingList<DetectedPerson>(),
                segments ?? new ChangeTrackingList<AudioVisualSegment>());
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<AudioVisualContent>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected override BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<AudioVisualContent>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureAIContentUnderstandingContext.Default);
                default:
                    throw new FormatException($"The model {nameof(AudioVisualContent)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        AudioVisualContent IPersistableModel<AudioVisualContent>.Create(BinaryData data, ModelReaderWriterOptions options) => (AudioVisualContent)PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override MediaContent PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<AudioVisualContent>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeAudioVisualContent(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(AudioVisualContent)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<AudioVisualContent>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
