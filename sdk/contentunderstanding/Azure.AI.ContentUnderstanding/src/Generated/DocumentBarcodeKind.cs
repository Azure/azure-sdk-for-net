// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.ContentUnderstanding
{
    /// <summary> Barcode kind. </summary>
    public readonly partial struct DocumentBarcodeKind : IEquatable<DocumentBarcodeKind>
    {
        private readonly string _value;
        /// <summary> QR code, as defined in ISO/IEC 18004:2015. </summary>
        private const string QRCodeValue = "QRCode";
        /// <summary> PDF417, as defined in ISO 15438. </summary>
        private const string PDF417Value = "PDF417";
        /// <summary> GS1 12-digit Universal Product Code. </summary>
        private const string UPCAValue = "UPCA";
        /// <summary> GS1 6-digit Universal Product Code. </summary>
        private const string UPCEValue = "UPCE";
        /// <summary> Code 39 barcode, as defined in ISO/IEC 16388:2007. </summary>
        private const string Code39Value = "Code39";
        /// <summary> Code 128 barcode, as defined in ISO/IEC 15417:2007. </summary>
        private const string Code128Value = "Code128";
        /// <summary> GS1 8-digit International Article Number (European Article Number). </summary>
        private const string EAN8Value = "EAN8";
        /// <summary> GS1 13-digit International Article Number (European Article Number). </summary>
        private const string EAN13Value = "EAN13";
        /// <summary> GS1 DataBar barcode. </summary>
        private const string DataBarValue = "DataBar";
        /// <summary> Code 93 barcode, as defined in ANSI/AIM BC5-1995. </summary>
        private const string Code93Value = "Code93";
        /// <summary> Codabar barcode, as defined in ANSI/AIM BC3-1995. </summary>
        private const string CodabarValue = "Codabar";
        /// <summary> GS1 DataBar Expanded barcode. </summary>
        private const string DataBarExpandedValue = "DataBarExpanded";
        /// <summary> Interleaved 2 of 5 barcode, as defined in ANSI/AIM BC2-1995. </summary>
        private const string ITFValue = "ITF";
        /// <summary> Micro QR code, as defined in ISO/IEC 23941:2022. </summary>
        private const string MicroQRCodeValue = "MicroQRCode";
        /// <summary> Aztec code, as defined in ISO/IEC 24778:2008. </summary>
        private const string AztecValue = "Aztec";
        /// <summary> Data matrix code, as defined in ISO/IEC 16022:2006. </summary>
        private const string DataMatrixValue = "DataMatrix";
        /// <summary> MaxiCode, as defined in ISO/IEC 16023:2000. </summary>
        private const string MaxiCodeValue = "MaxiCode";

        /// <summary> Initializes a new instance of <see cref="DocumentBarcodeKind"/>. </summary>
        /// <param name="value"> The value. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DocumentBarcodeKind(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        /// <summary> QR code, as defined in ISO/IEC 18004:2015. </summary>
        public static DocumentBarcodeKind QRCode { get; } = new DocumentBarcodeKind(QRCodeValue);

        /// <summary> PDF417, as defined in ISO 15438. </summary>
        public static DocumentBarcodeKind PDF417 { get; } = new DocumentBarcodeKind(PDF417Value);

        /// <summary> GS1 12-digit Universal Product Code. </summary>
        public static DocumentBarcodeKind UPCA { get; } = new DocumentBarcodeKind(UPCAValue);

        /// <summary> GS1 6-digit Universal Product Code. </summary>
        public static DocumentBarcodeKind UPCE { get; } = new DocumentBarcodeKind(UPCEValue);

        /// <summary> Code 39 barcode, as defined in ISO/IEC 16388:2007. </summary>
        public static DocumentBarcodeKind Code39 { get; } = new DocumentBarcodeKind(Code39Value);

        /// <summary> Code 128 barcode, as defined in ISO/IEC 15417:2007. </summary>
        public static DocumentBarcodeKind Code128 { get; } = new DocumentBarcodeKind(Code128Value);

        /// <summary> GS1 8-digit International Article Number (European Article Number). </summary>
        public static DocumentBarcodeKind EAN8 { get; } = new DocumentBarcodeKind(EAN8Value);

        /// <summary> GS1 13-digit International Article Number (European Article Number). </summary>
        public static DocumentBarcodeKind EAN13 { get; } = new DocumentBarcodeKind(EAN13Value);

        /// <summary> GS1 DataBar barcode. </summary>
        public static DocumentBarcodeKind DataBar { get; } = new DocumentBarcodeKind(DataBarValue);

        /// <summary> Code 93 barcode, as defined in ANSI/AIM BC5-1995. </summary>
        public static DocumentBarcodeKind Code93 { get; } = new DocumentBarcodeKind(Code93Value);

        /// <summary> Codabar barcode, as defined in ANSI/AIM BC3-1995. </summary>
        public static DocumentBarcodeKind Codabar { get; } = new DocumentBarcodeKind(CodabarValue);

        /// <summary> GS1 DataBar Expanded barcode. </summary>
        public static DocumentBarcodeKind DataBarExpanded { get; } = new DocumentBarcodeKind(DataBarExpandedValue);

        /// <summary> Interleaved 2 of 5 barcode, as defined in ANSI/AIM BC2-1995. </summary>
        public static DocumentBarcodeKind ITF { get; } = new DocumentBarcodeKind(ITFValue);

        /// <summary> Micro QR code, as defined in ISO/IEC 23941:2022. </summary>
        public static DocumentBarcodeKind MicroQRCode { get; } = new DocumentBarcodeKind(MicroQRCodeValue);

        /// <summary> Aztec code, as defined in ISO/IEC 24778:2008. </summary>
        public static DocumentBarcodeKind Aztec { get; } = new DocumentBarcodeKind(AztecValue);

        /// <summary> Data matrix code, as defined in ISO/IEC 16022:2006. </summary>
        public static DocumentBarcodeKind DataMatrix { get; } = new DocumentBarcodeKind(DataMatrixValue);

        /// <summary> MaxiCode, as defined in ISO/IEC 16023:2000. </summary>
        public static DocumentBarcodeKind MaxiCode { get; } = new DocumentBarcodeKind(MaxiCodeValue);

        /// <summary> Determines if two <see cref="DocumentBarcodeKind"/> values are the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator ==(DocumentBarcodeKind left, DocumentBarcodeKind right) => left.Equals(right);

        /// <summary> Determines if two <see cref="DocumentBarcodeKind"/> values are not the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator !=(DocumentBarcodeKind left, DocumentBarcodeKind right) => !left.Equals(right);

        /// <summary> Converts a string to a <see cref="DocumentBarcodeKind"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator DocumentBarcodeKind(string value) => new DocumentBarcodeKind(value);

        /// <summary> Converts a string to a <see cref="DocumentBarcodeKind"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator DocumentBarcodeKind?(string value) => value == null ? null : new DocumentBarcodeKind(value);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DocumentBarcodeKind other && Equals(other);

        /// <inheritdoc/>
        public bool Equals(DocumentBarcodeKind other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        /// <inheritdoc/>
        public override string ToString() => _value;
    }
}
