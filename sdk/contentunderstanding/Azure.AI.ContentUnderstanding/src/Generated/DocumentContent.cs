// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.ContentUnderstanding
{
    /// <summary> Document content.  Ex. text/plain, application/pdf, image/jpeg. </summary>
    public partial class DocumentContent : MediaContent
    {
        /// <summary> Initializes a new instance of <see cref="DocumentContent"/>. </summary>
        /// <param name="startPageNumber"> Start page number (1-indexed) of the content. </param>
        /// <param name="endPageNumber"> End page number (1-indexed) of the content. </param>
        internal DocumentContent(int startPageNumber, int endPageNumber) : base(MediaContentKind.Document)
        {
            StartPageNumber = startPageNumber;
            EndPageNumber = endPageNumber;
            Pages = new ChangeTrackingList<DocumentPage>();
            Paragraphs = new ChangeTrackingList<DocumentParagraph>();
            Sections = new ChangeTrackingList<DocumentSection>();
            Tables = new ChangeTrackingList<DocumentTable>();
            Figures = new ChangeTrackingList<DocumentFigure>();
            Persons = new ChangeTrackingList<DetectedPerson>();
        }

        /// <summary> Initializes a new instance of <see cref="DocumentContent"/>. </summary>
        /// <param name="kind"> Content kind. </param>
        /// <param name="mimeType"> Detected MIME type of the content.  Ex. application/pdf, image/jpeg, etc. </param>
        /// <param name="category"> Classified content category. </param>
        /// <param name="path"> The path of the content in the input. </param>
        /// <param name="markdown"> Markdown representation of the content. </param>
        /// <param name="fields"> Extracted fields from the content. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        /// <param name="startPageNumber"> Start page number (1-indexed) of the content. </param>
        /// <param name="endPageNumber"> End page number (1-indexed) of the content. </param>
        /// <param name="unit">
        /// Length unit used by the width, height, and source properties.
        /// For images/tiff, the default unit is pixel.  For PDF, the default unit is inch.
        /// </param>
        /// <param name="pages"> List of pages in the document. </param>
        /// <param name="paragraphs"> List of paragraphs in the document.  Only if enableOcr and returnDetails are true. </param>
        /// <param name="sections"> List of sections in the document.  Only if enableLayout and returnDetails are true. </param>
        /// <param name="tables"> List of tables in the document.  Only if enableLayout and returnDetails are true. </param>
        /// <param name="figures"> List of figures in the document.  Only if enableLayout and returnDetails are true. </param>
        /// <param name="persons"> List of detected persons in the document.  Only if enableFace and returnDetails are true. </param>
        internal DocumentContent(MediaContentKind kind, string mimeType, string category, Uri path, string markdown, IDictionary<string, ContentField> fields, IDictionary<string, BinaryData> additionalBinaryDataProperties, int startPageNumber, int endPageNumber, LengthUnit? unit, IList<DocumentPage> pages, IList<DocumentParagraph> paragraphs, IList<DocumentSection> sections, IList<DocumentTable> tables, IList<DocumentFigure> figures, IList<DetectedPerson> persons) : base(kind, mimeType, category, path, markdown, fields, additionalBinaryDataProperties)
        {
            StartPageNumber = startPageNumber;
            EndPageNumber = endPageNumber;
            Unit = unit;
            Pages = pages;
            Paragraphs = paragraphs;
            Sections = sections;
            Tables = tables;
            Figures = figures;
            Persons = persons;
        }

        /// <summary> Start page number (1-indexed) of the content. </summary>
        public int StartPageNumber { get; }

        /// <summary> End page number (1-indexed) of the content. </summary>
        public int EndPageNumber { get; }

        /// <summary>
        /// Length unit used by the width, height, and source properties.
        /// For images/tiff, the default unit is pixel.  For PDF, the default unit is inch.
        /// </summary>
        public LengthUnit? Unit { get; }

        /// <summary> List of pages in the document. </summary>
        public IList<DocumentPage> Pages { get; }

        /// <summary> List of paragraphs in the document.  Only if enableOcr and returnDetails are true. </summary>
        public IList<DocumentParagraph> Paragraphs { get; }

        /// <summary> List of sections in the document.  Only if enableLayout and returnDetails are true. </summary>
        public IList<DocumentSection> Sections { get; }

        /// <summary> List of tables in the document.  Only if enableLayout and returnDetails are true. </summary>
        public IList<DocumentTable> Tables { get; }

        /// <summary> List of figures in the document.  Only if enableLayout and returnDetails are true. </summary>
        public IList<DocumentFigure> Figures { get; }

        /// <summary> List of detected persons in the document.  Only if enableFace and returnDetails are true. </summary>
        public IList<DetectedPerson> Persons { get; }
    }
}
