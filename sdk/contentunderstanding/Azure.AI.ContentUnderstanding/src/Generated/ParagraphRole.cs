// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.ContentUnderstanding
{
    /// <summary> Semantic role of the paragraph. </summary>
    public readonly partial struct ParagraphRole : IEquatable<ParagraphRole>
    {
        private readonly string _value;
        /// <summary> Text near the top edge of the page. </summary>
        private const string PageHeaderValue = "pageHeader";
        /// <summary> Text near the bottom edge of the page. </summary>
        private const string PageFooterValue = "pageFooter";
        /// <summary> Page number. </summary>
        private const string PageNumberValue = "pageNumber";
        /// <summary> Top-level title describing the entire document. </summary>
        private const string TitleValue = "title";
        /// <summary> Sub heading describing a section of the document. </summary>
        private const string SectionHeadingValue = "sectionHeading";
        /// <summary> Note usually placed after the main content on a page. </summary>
        private const string FootnoteValue = "footnote";
        /// <summary> Block of formulas, often with shared alignment. </summary>
        private const string FormulaBlockValue = "formulaBlock";

        /// <summary> Initializes a new instance of <see cref="ParagraphRole"/>. </summary>
        /// <param name="value"> The value. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ParagraphRole(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        /// <summary> Text near the top edge of the page. </summary>
        public static ParagraphRole PageHeader { get; } = new ParagraphRole(PageHeaderValue);

        /// <summary> Text near the bottom edge of the page. </summary>
        public static ParagraphRole PageFooter { get; } = new ParagraphRole(PageFooterValue);

        /// <summary> Page number. </summary>
        public static ParagraphRole PageNumber { get; } = new ParagraphRole(PageNumberValue);

        /// <summary> Top-level title describing the entire document. </summary>
        public static ParagraphRole Title { get; } = new ParagraphRole(TitleValue);

        /// <summary> Sub heading describing a section of the document. </summary>
        public static ParagraphRole SectionHeading { get; } = new ParagraphRole(SectionHeadingValue);

        /// <summary> Note usually placed after the main content on a page. </summary>
        public static ParagraphRole Footnote { get; } = new ParagraphRole(FootnoteValue);

        /// <summary> Block of formulas, often with shared alignment. </summary>
        public static ParagraphRole FormulaBlock { get; } = new ParagraphRole(FormulaBlockValue);

        /// <summary> Determines if two <see cref="ParagraphRole"/> values are the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator ==(ParagraphRole left, ParagraphRole right) => left.Equals(right);

        /// <summary> Determines if two <see cref="ParagraphRole"/> values are not the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator !=(ParagraphRole left, ParagraphRole right) => !left.Equals(right);

        /// <summary> Converts a string to a <see cref="ParagraphRole"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator ParagraphRole(string value) => new ParagraphRole(value);

        /// <summary> Converts a string to a <see cref="ParagraphRole"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator ParagraphRole?(string value) => value == null ? null : new ParagraphRole(value);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ParagraphRole other && Equals(other);

        /// <inheritdoc/>
        public bool Equals(ParagraphRole other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        /// <inheritdoc/>
        public override string ToString() => _value;
    }
}
