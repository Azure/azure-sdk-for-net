// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Relay.Models
{
    /// <summary> The AccessRight. </summary>
    public readonly partial struct AccessRight : IEquatable<AccessRight>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AccessRight"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AccessRight(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ManageValue = "Manage";
        private const string SendValue = "Send";
        private const string ListenValue = "Listen";

        /// <summary> Manage. </summary>
        public static AccessRight Manage { get; } = new AccessRight(ManageValue);
        /// <summary> Send. </summary>
        public static AccessRight Send { get; } = new AccessRight(SendValue);
        /// <summary> Listen. </summary>
        public static AccessRight Listen { get; } = new AccessRight(ListenValue);
        /// <summary> Determines if two <see cref="AccessRight"/> values are the same. </summary>
        public static bool operator ==(AccessRight left, AccessRight right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AccessRight"/> values are not the same. </summary>
        public static bool operator !=(AccessRight left, AccessRight right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="AccessRight"/>. </summary>
        public static implicit operator AccessRight(string value) => new AccessRight(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AccessRight other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AccessRight other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
