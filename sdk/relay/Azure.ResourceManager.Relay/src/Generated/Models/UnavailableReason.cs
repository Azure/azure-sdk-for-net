// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Relay.Models
{
    /// <summary> Specifies the reason for the unavailability of the service. </summary>
    public readonly partial struct UnavailableReason : IEquatable<UnavailableReason>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="UnavailableReason"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public UnavailableReason(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NoneValue = "None";
        private const string InvalidNameValue = "InvalidName";
        private const string SubscriptionIsDisabledValue = "SubscriptionIsDisabled";
        private const string NameInUseValue = "NameInUse";
        private const string NameInLockdownValue = "NameInLockdown";
        private const string TooManyNamespaceInCurrentSubscriptionValue = "TooManyNamespaceInCurrentSubscription";

        /// <summary> None. </summary>
        public static UnavailableReason None { get; } = new UnavailableReason(NoneValue);
        /// <summary> InvalidName. </summary>
        public static UnavailableReason InvalidName { get; } = new UnavailableReason(InvalidNameValue);
        /// <summary> SubscriptionIsDisabled. </summary>
        public static UnavailableReason SubscriptionIsDisabled { get; } = new UnavailableReason(SubscriptionIsDisabledValue);
        /// <summary> NameInUse. </summary>
        public static UnavailableReason NameInUse { get; } = new UnavailableReason(NameInUseValue);
        /// <summary> NameInLockdown. </summary>
        public static UnavailableReason NameInLockdown { get; } = new UnavailableReason(NameInLockdownValue);
        /// <summary> TooManyNamespaceInCurrentSubscription. </summary>
        public static UnavailableReason TooManyNamespaceInCurrentSubscription { get; } = new UnavailableReason(TooManyNamespaceInCurrentSubscriptionValue);
        /// <summary> Determines if two <see cref="UnavailableReason"/> values are the same. </summary>
        public static bool operator ==(UnavailableReason left, UnavailableReason right) => left.Equals(right);
        /// <summary> Determines if two <see cref="UnavailableReason"/> values are not the same. </summary>
        public static bool operator !=(UnavailableReason left, UnavailableReason right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="UnavailableReason"/>. </summary>
        public static implicit operator UnavailableReason(string value) => new UnavailableReason(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is UnavailableReason other && Equals(other);
        /// <inheritdoc />
        public bool Equals(UnavailableReason other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
