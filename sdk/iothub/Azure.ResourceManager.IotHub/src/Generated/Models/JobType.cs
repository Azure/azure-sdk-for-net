// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.IotHub.Models
{
    /// <summary> The type of the job. </summary>
    public readonly partial struct JobType : IEquatable<JobType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="JobType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public JobType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UnknownValue = "unknown";
        private const string ExportValue = "export";
        private const string ImportValue = "import";
        private const string BackupValue = "backup";
        private const string ReadDevicePropertiesValue = "readDeviceProperties";
        private const string WriteDevicePropertiesValue = "writeDeviceProperties";
        private const string UpdateDeviceConfigurationValue = "updateDeviceConfiguration";
        private const string RebootDeviceValue = "rebootDevice";
        private const string FactoryResetDeviceValue = "factoryResetDevice";
        private const string FirmwareUpdateValue = "firmwareUpdate";

        /// <summary> unknown. </summary>
        public static JobType Unknown { get; } = new JobType(UnknownValue);
        /// <summary> export. </summary>
        public static JobType Export { get; } = new JobType(ExportValue);
        /// <summary> import. </summary>
        public static JobType Import { get; } = new JobType(ImportValue);
        /// <summary> backup. </summary>
        public static JobType Backup { get; } = new JobType(BackupValue);
        /// <summary> readDeviceProperties. </summary>
        public static JobType ReadDeviceProperties { get; } = new JobType(ReadDevicePropertiesValue);
        /// <summary> writeDeviceProperties. </summary>
        public static JobType WriteDeviceProperties { get; } = new JobType(WriteDevicePropertiesValue);
        /// <summary> updateDeviceConfiguration. </summary>
        public static JobType UpdateDeviceConfiguration { get; } = new JobType(UpdateDeviceConfigurationValue);
        /// <summary> rebootDevice. </summary>
        public static JobType RebootDevice { get; } = new JobType(RebootDeviceValue);
        /// <summary> factoryResetDevice. </summary>
        public static JobType FactoryResetDevice { get; } = new JobType(FactoryResetDeviceValue);
        /// <summary> firmwareUpdate. </summary>
        public static JobType FirmwareUpdate { get; } = new JobType(FirmwareUpdateValue);
        /// <summary> Determines if two <see cref="JobType"/> values are the same. </summary>
        public static bool operator ==(JobType left, JobType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="JobType"/> values are not the same. </summary>
        public static bool operator !=(JobType left, JobType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="JobType"/>. </summary>
        public static implicit operator JobType(string value) => new JobType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is JobType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(JobType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
