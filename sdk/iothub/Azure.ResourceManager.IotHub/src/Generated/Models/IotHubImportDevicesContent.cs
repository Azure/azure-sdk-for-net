// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure.Core;

namespace Azure.ResourceManager.IotHub.Models
{
    /// <summary> Use to provide parameters when requesting an import of all devices in the hub. </summary>
    public partial class IotHubImportDevicesContent
    {
        /// <summary> Initializes a new instance of IotHubImportDevicesContent. </summary>
        /// <param name="inputBlobContainerUri"> The input blob container URI. </param>
        /// <param name="outputBlobContainerUri"> The output blob container URI. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="inputBlobContainerUri"/> or <paramref name="outputBlobContainerUri"/> is null. </exception>
        public IotHubImportDevicesContent(Uri inputBlobContainerUri, Uri outputBlobContainerUri)
        {
            if (inputBlobContainerUri == null)
            {
                throw new ArgumentNullException(nameof(inputBlobContainerUri));
            }
            if (outputBlobContainerUri == null)
            {
                throw new ArgumentNullException(nameof(outputBlobContainerUri));
            }

            InputBlobContainerUri = inputBlobContainerUri;
            OutputBlobContainerUri = outputBlobContainerUri;
        }

        /// <summary> The input blob container URI. </summary>
        public Uri InputBlobContainerUri { get; }
        /// <summary> The output blob container URI. </summary>
        public Uri OutputBlobContainerUri { get; }
        /// <summary> The blob name to be used when importing from the provided input blob container. </summary>
        public string InputBlobName { get; set; }
        /// <summary> The blob name to use for storing the status of the import job. </summary>
        public string OutputBlobName { get; set; }
        /// <summary> Specifies authentication type being used for connecting to the storage account. </summary>
        public IotHubAuthenticationType? AuthenticationType { get; set; }
        /// <summary> Managed identity properties of storage endpoint for import devices. </summary>
        internal ManagedIdentity Identity { get; set; }
        /// <summary> The user assigned identity. </summary>
        public ResourceIdentifier UserAssignedIdentity
        {
            get => Identity is null ? default : Identity.UserAssignedIdentity;
            set
            {
                if (Identity is null)
                    Identity = new ManagedIdentity();
                Identity.UserAssignedIdentity = value;
            }
        }

        /// <summary> The value indicating whether configurations should be imported. </summary>
        public bool? IncludeConfigurations { get; set; }
        /// <summary> The blob name to be used when importing configurations from the provided input blob container. </summary>
        public string ConfigurationsBlobName { get; set; }
    }
}
