// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.IoTHub.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.IoTHub
{
    /// <summary> A class to add extension methods to Azure.ResourceManager.IoTHub. </summary>
    public static partial class IoTHubExtensions
    {
        private static SubscriptionResourceExtensionClient GetExtensionClient(SubscriptionResource subscriptionResource)
        {
            return subscriptionResource.GetCachedClient((client) =>
            {
                return new SubscriptionResourceExtensionClient(client, subscriptionResource.Id);
            }
            );
        }

        /// <summary>
        /// Get all the IoT hubs in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Devices/IotHubs
        /// Operation Id: IotHubResource_ListBySubscription
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="IoTHubDescriptionResource" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<IoTHubDescriptionResource> GetIoTHubDescriptionsAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetIoTHubDescriptionsAsync(cancellationToken);
        }

        /// <summary>
        /// Get all the IoT hubs in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Devices/IotHubs
        /// Operation Id: IotHubResource_ListBySubscription
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="IoTHubDescriptionResource" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<IoTHubDescriptionResource> GetIoTHubDescriptions(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetIoTHubDescriptions(cancellationToken);
        }

        /// <summary>
        /// Check if an IoT hub name is available.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Devices/checkNameAvailability
        /// Operation Id: IotHubResource_CheckNameAvailability
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="content"> Set the name parameter in the OperationInputs structure to the name of the IoT hub to check. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        public static async Task<Response<IoTHubNameAvailabilityInfo>> CheckNameAvailabilityIotHubResourceAsync(this SubscriptionResource subscriptionResource, IoTHubNameAvailabilityContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(content, nameof(content));

            return await GetExtensionClient(subscriptionResource).CheckNameAvailabilityIotHubResourceAsync(content, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Check if an IoT hub name is available.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Devices/checkNameAvailability
        /// Operation Id: IotHubResource_CheckNameAvailability
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="content"> Set the name parameter in the OperationInputs structure to the name of the IoT hub to check. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        public static Response<IoTHubNameAvailabilityInfo> CheckNameAvailabilityIotHubResource(this SubscriptionResource subscriptionResource, IoTHubNameAvailabilityContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(content, nameof(content));

            return GetExtensionClient(subscriptionResource).CheckNameAvailabilityIotHubResource(content, cancellationToken);
        }

        /// <summary>
        /// Get the number of free and paid iot hubs in the subscription
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Devices/usages
        /// Operation Id: ResourceProviderCommon_GetSubscriptionQuota
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="IoTHubUserSubscriptionQuota" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<IoTHubUserSubscriptionQuota> GetIoTHubUserSubscriptionQuotaAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetIoTHubUserSubscriptionQuotaAsync(cancellationToken);
        }

        /// <summary>
        /// Get the number of free and paid iot hubs in the subscription
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Devices/usages
        /// Operation Id: ResourceProviderCommon_GetSubscriptionQuota
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="IoTHubUserSubscriptionQuota" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<IoTHubUserSubscriptionQuota> GetIoTHubUserSubscriptionQuota(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetIoTHubUserSubscriptionQuota(cancellationToken);
        }

        private static ResourceGroupResourceExtensionClient GetExtensionClient(ResourceGroupResource resourceGroupResource)
        {
            return resourceGroupResource.GetCachedClient((client) =>
            {
                return new ResourceGroupResourceExtensionClient(client, resourceGroupResource.Id);
            }
            );
        }

        /// <summary> Gets a collection of IoTHubDescriptionResources in the ResourceGroupResource. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of IoTHubDescriptionResources and their operations over a IoTHubDescriptionResource. </returns>
        public static IoTHubDescriptionCollection GetIoTHubDescriptions(this ResourceGroupResource resourceGroupResource)
        {
            return GetExtensionClient(resourceGroupResource).GetIoTHubDescriptions();
        }

        /// <summary>
        /// Get the non-security related metadata of an IoT hub.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}
        /// Operation Id: IotHubResource_Get
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="resourceName"> The name of the IoT hub. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="resourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceName"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<IoTHubDescriptionResource>> GetIoTHubDescriptionAsync(this ResourceGroupResource resourceGroupResource, string resourceName, CancellationToken cancellationToken = default)
        {
            return await resourceGroupResource.GetIoTHubDescriptions().GetAsync(resourceName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get the non-security related metadata of an IoT hub.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}
        /// Operation Id: IotHubResource_Get
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="resourceName"> The name of the IoT hub. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="resourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceName"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<IoTHubDescriptionResource> GetIoTHubDescription(this ResourceGroupResource resourceGroupResource, string resourceName, CancellationToken cancellationToken = default)
        {
            return resourceGroupResource.GetIoTHubDescriptions().Get(resourceName, cancellationToken);
        }

        #region IoTHubDescriptionResource
        /// <summary>
        /// Gets an object representing an <see cref="IoTHubDescriptionResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="IoTHubDescriptionResource.CreateResourceIdentifier" /> to create an <see cref="IoTHubDescriptionResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="IoTHubDescriptionResource" /> object. </returns>
        public static IoTHubDescriptionResource GetIoTHubDescriptionResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                IoTHubDescriptionResource.ValidateResourceId(id);
                return new IoTHubDescriptionResource(client, id);
            }
            );
        }
        #endregion

        #region EventHubConsumerGroupInfoResource
        /// <summary>
        /// Gets an object representing an <see cref="EventHubConsumerGroupInfoResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="EventHubConsumerGroupInfoResource.CreateResourceIdentifier" /> to create an <see cref="EventHubConsumerGroupInfoResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="EventHubConsumerGroupInfoResource" /> object. </returns>
        public static EventHubConsumerGroupInfoResource GetEventHubConsumerGroupInfoResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                EventHubConsumerGroupInfoResource.ValidateResourceId(id);
                return new EventHubConsumerGroupInfoResource(client, id);
            }
            );
        }
        #endregion

        #region IoTHubCertificateDescriptionResource
        /// <summary>
        /// Gets an object representing an <see cref="IoTHubCertificateDescriptionResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="IoTHubCertificateDescriptionResource.CreateResourceIdentifier" /> to create an <see cref="IoTHubCertificateDescriptionResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="IoTHubCertificateDescriptionResource" /> object. </returns>
        public static IoTHubCertificateDescriptionResource GetIoTHubCertificateDescriptionResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                IoTHubCertificateDescriptionResource.ValidateResourceId(id);
                return new IoTHubCertificateDescriptionResource(client, id);
            }
            );
        }
        #endregion

        #region IoTHubPrivateEndpointGroupInformationResource
        /// <summary>
        /// Gets an object representing an <see cref="IoTHubPrivateEndpointGroupInformationResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="IoTHubPrivateEndpointGroupInformationResource.CreateResourceIdentifier" /> to create an <see cref="IoTHubPrivateEndpointGroupInformationResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="IoTHubPrivateEndpointGroupInformationResource" /> object. </returns>
        public static IoTHubPrivateEndpointGroupInformationResource GetIoTHubPrivateEndpointGroupInformationResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                IoTHubPrivateEndpointGroupInformationResource.ValidateResourceId(id);
                return new IoTHubPrivateEndpointGroupInformationResource(client, id);
            }
            );
        }
        #endregion

        #region IoTHubPrivateEndpointConnectionResource
        /// <summary>
        /// Gets an object representing an <see cref="IoTHubPrivateEndpointConnectionResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="IoTHubPrivateEndpointConnectionResource.CreateResourceIdentifier" /> to create an <see cref="IoTHubPrivateEndpointConnectionResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="IoTHubPrivateEndpointConnectionResource" /> object. </returns>
        public static IoTHubPrivateEndpointConnectionResource GetIoTHubPrivateEndpointConnectionResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                IoTHubPrivateEndpointConnectionResource.ValidateResourceId(id);
                return new IoTHubPrivateEndpointConnectionResource(client, id);
            }
            );
        }
        #endregion
    }
}
