// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.ResourceManager.IoTHub.Models
{
    internal static partial class IoTHubSharedAccessRightExtensions
    {
        public static string ToSerialString(this IoTHubSharedAccessRight value) => value switch
        {
            IoTHubSharedAccessRight.RegistryRead => "RegistryRead",
            IoTHubSharedAccessRight.RegistryWrite => "RegistryWrite",
            IoTHubSharedAccessRight.ServiceConnect => "ServiceConnect",
            IoTHubSharedAccessRight.DeviceConnect => "DeviceConnect",
            IoTHubSharedAccessRight.RegistryReadRegistryWrite => "RegistryRead, RegistryWrite",
            IoTHubSharedAccessRight.RegistryReadServiceConnect => "RegistryRead, ServiceConnect",
            IoTHubSharedAccessRight.RegistryReadDeviceConnect => "RegistryRead, DeviceConnect",
            IoTHubSharedAccessRight.RegistryWriteServiceConnect => "RegistryWrite, ServiceConnect",
            IoTHubSharedAccessRight.RegistryWriteDeviceConnect => "RegistryWrite, DeviceConnect",
            IoTHubSharedAccessRight.ServiceConnectDeviceConnect => "ServiceConnect, DeviceConnect",
            IoTHubSharedAccessRight.RegistryReadRegistryWriteServiceConnect => "RegistryRead, RegistryWrite, ServiceConnect",
            IoTHubSharedAccessRight.RegistryReadRegistryWriteDeviceConnect => "RegistryRead, RegistryWrite, DeviceConnect",
            IoTHubSharedAccessRight.RegistryReadServiceConnectDeviceConnect => "RegistryRead, ServiceConnect, DeviceConnect",
            IoTHubSharedAccessRight.RegistryWriteServiceConnectDeviceConnect => "RegistryWrite, ServiceConnect, DeviceConnect",
            IoTHubSharedAccessRight.RegistryReadRegistryWriteServiceConnectDeviceConnect => "RegistryRead, RegistryWrite, ServiceConnect, DeviceConnect",
            _ => throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown IoTHubSharedAccessRight value.")
        };

        public static IoTHubSharedAccessRight ToIoTHubSharedAccessRight(this string value)
        {
            if (string.Equals(value, "RegistryRead", StringComparison.InvariantCultureIgnoreCase)) return IoTHubSharedAccessRight.RegistryRead;
            if (string.Equals(value, "RegistryWrite", StringComparison.InvariantCultureIgnoreCase)) return IoTHubSharedAccessRight.RegistryWrite;
            if (string.Equals(value, "ServiceConnect", StringComparison.InvariantCultureIgnoreCase)) return IoTHubSharedAccessRight.ServiceConnect;
            if (string.Equals(value, "DeviceConnect", StringComparison.InvariantCultureIgnoreCase)) return IoTHubSharedAccessRight.DeviceConnect;
            if (string.Equals(value, "RegistryRead, RegistryWrite", StringComparison.InvariantCultureIgnoreCase)) return IoTHubSharedAccessRight.RegistryReadRegistryWrite;
            if (string.Equals(value, "RegistryRead, ServiceConnect", StringComparison.InvariantCultureIgnoreCase)) return IoTHubSharedAccessRight.RegistryReadServiceConnect;
            if (string.Equals(value, "RegistryRead, DeviceConnect", StringComparison.InvariantCultureIgnoreCase)) return IoTHubSharedAccessRight.RegistryReadDeviceConnect;
            if (string.Equals(value, "RegistryWrite, ServiceConnect", StringComparison.InvariantCultureIgnoreCase)) return IoTHubSharedAccessRight.RegistryWriteServiceConnect;
            if (string.Equals(value, "RegistryWrite, DeviceConnect", StringComparison.InvariantCultureIgnoreCase)) return IoTHubSharedAccessRight.RegistryWriteDeviceConnect;
            if (string.Equals(value, "ServiceConnect, DeviceConnect", StringComparison.InvariantCultureIgnoreCase)) return IoTHubSharedAccessRight.ServiceConnectDeviceConnect;
            if (string.Equals(value, "RegistryRead, RegistryWrite, ServiceConnect", StringComparison.InvariantCultureIgnoreCase)) return IoTHubSharedAccessRight.RegistryReadRegistryWriteServiceConnect;
            if (string.Equals(value, "RegistryRead, RegistryWrite, DeviceConnect", StringComparison.InvariantCultureIgnoreCase)) return IoTHubSharedAccessRight.RegistryReadRegistryWriteDeviceConnect;
            if (string.Equals(value, "RegistryRead, ServiceConnect, DeviceConnect", StringComparison.InvariantCultureIgnoreCase)) return IoTHubSharedAccessRight.RegistryReadServiceConnectDeviceConnect;
            if (string.Equals(value, "RegistryWrite, ServiceConnect, DeviceConnect", StringComparison.InvariantCultureIgnoreCase)) return IoTHubSharedAccessRight.RegistryWriteServiceConnectDeviceConnect;
            if (string.Equals(value, "RegistryRead, RegistryWrite, ServiceConnect, DeviceConnect", StringComparison.InvariantCultureIgnoreCase)) return IoTHubSharedAccessRight.RegistryReadRegistryWriteServiceConnectDeviceConnect;
            throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown IoTHubSharedAccessRight value.");
        }
    }
}
