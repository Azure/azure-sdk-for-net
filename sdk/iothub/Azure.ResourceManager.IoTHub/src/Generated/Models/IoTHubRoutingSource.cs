// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.IoTHub.Models
{
    /// <summary> The source that the routing rule is to be applied to, such as DeviceMessages. </summary>
    public readonly partial struct IoTHubRoutingSource : IEquatable<IoTHubRoutingSource>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="IoTHubRoutingSource"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public IoTHubRoutingSource(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string InvalidValue = "Invalid";
        private const string DeviceMessagesValue = "DeviceMessages";
        private const string TwinChangeEventsValue = "TwinChangeEvents";
        private const string DeviceLifecycleEventsValue = "DeviceLifecycleEvents";
        private const string DeviceJobLifecycleEventsValue = "DeviceJobLifecycleEvents";
        private const string DeviceConnectionStateEventsValue = "DeviceConnectionStateEvents";

        /// <summary> Invalid. </summary>
        public static IoTHubRoutingSource Invalid { get; } = new IoTHubRoutingSource(InvalidValue);
        /// <summary> DeviceMessages. </summary>
        public static IoTHubRoutingSource DeviceMessages { get; } = new IoTHubRoutingSource(DeviceMessagesValue);
        /// <summary> TwinChangeEvents. </summary>
        public static IoTHubRoutingSource TwinChangeEvents { get; } = new IoTHubRoutingSource(TwinChangeEventsValue);
        /// <summary> DeviceLifecycleEvents. </summary>
        public static IoTHubRoutingSource DeviceLifecycleEvents { get; } = new IoTHubRoutingSource(DeviceLifecycleEventsValue);
        /// <summary> DeviceJobLifecycleEvents. </summary>
        public static IoTHubRoutingSource DeviceJobLifecycleEvents { get; } = new IoTHubRoutingSource(DeviceJobLifecycleEventsValue);
        /// <summary> DeviceConnectionStateEvents. </summary>
        public static IoTHubRoutingSource DeviceConnectionStateEvents { get; } = new IoTHubRoutingSource(DeviceConnectionStateEventsValue);
        /// <summary> Determines if two <see cref="IoTHubRoutingSource"/> values are the same. </summary>
        public static bool operator ==(IoTHubRoutingSource left, IoTHubRoutingSource right) => left.Equals(right);
        /// <summary> Determines if two <see cref="IoTHubRoutingSource"/> values are not the same. </summary>
        public static bool operator !=(IoTHubRoutingSource left, IoTHubRoutingSource right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="IoTHubRoutingSource"/>. </summary>
        public static implicit operator IoTHubRoutingSource(string value) => new IoTHubRoutingSource(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is IoTHubRoutingSource other && Equals(other);
        /// <inheritdoc />
        public bool Equals(IoTHubRoutingSource other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
