// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.IotHub.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The properties of an IoT hub.
    /// </summary>
    public partial class IotHubProperties
    {
        /// <summary>
        /// Initializes a new instance of the IotHubProperties class.
        /// </summary>
        public IotHubProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the IotHubProperties class.
        /// </summary>
        /// <param name="authorizationPolicies">The shared access policies you
        /// can use to secure a connection to the IoT hub.</param>
        /// <param name="disableLocalAuth">If true, SAS tokens with Iot hub
        /// scoped SAS keys cannot be used for authentication.</param>
        /// <param name="disableDeviceSAS">If true, all device(including Edge
        /// devices but excluding modules) scoped SAS keys cannot be used for
        /// authentication.</param>
        /// <param name="disableModuleSAS">If true, all module scoped SAS keys
        /// cannot be used for authentication.</param>
        /// <param name="restrictOutboundNetworkAccess">If true, egress from
        /// IotHub will be restricted to only the allowed FQDNs that are
        /// configured via allowedFqdnList.</param>
        /// <param name="allowedFqdnList">List of allowed FQDNs(Fully Qualified
        /// Domain Name) for egress from Iot Hub.</param>
        /// <param name="publicNetworkAccess">Whether requests from Public
        /// Network are allowed. Possible values include: 'Enabled',
        /// 'Disabled'</param>
        /// <param name="ipFilterRules">The IP filter rules.</param>
        /// <param name="minTlsVersion">Specifies the minimum TLS version to
        /// support for this hub. Can be set to "1.2" to have clients that use
        /// a TLS version below 1.2 to be rejected.</param>
        /// <param name="privateEndpointConnections">Private endpoint
        /// connections created on this IotHub</param>
        /// <param name="provisioningState">The provisioning state.</param>
        /// <param name="state">The hub state.</param>
        /// <param name="hostName">The name of the host.</param>
        /// <param name="eventHubEndpoints">The Event Hub-compatible endpoint
        /// properties. The only possible keys to this dictionary is events.
        /// This key has to be present in the dictionary while making create or
        /// update calls for the IoT hub.</param>
        /// <param name="storageEndpoints">The list of Azure Storage endpoints
        /// where you can upload files. Currently you can configure only one
        /// Azure Storage account and that MUST have its key as $default.
        /// Specifying more than one storage account causes an error to be
        /// thrown. Not specifying a value for this property when the
        /// enableFileUploadNotifications property is set to True, causes an
        /// error to be thrown.</param>
        /// <param name="messagingEndpoints">The messaging endpoint properties
        /// for the file upload notification queue.</param>
        /// <param name="enableFileUploadNotifications">If True, file upload
        /// notifications are enabled.</param>
        /// <param name="comments">IoT hub comments.</param>
        /// <param name="deviceStreams">The device streams properties of
        /// iothub.</param>
        /// <param name="features">The capabilities and features enabled for
        /// the IoT hub. Possible values include: 'None',
        /// 'DeviceManagement'</param>
        /// <param name="encryption">The encryption properties for the IoT
        /// hub.</param>
        /// <param name="locations">Primary and secondary location for iot
        /// hub</param>
        /// <param name="enableDataResidency">This property when set to true,
        /// will enable data residency, thus, disabling disaster
        /// recovery.</param>
        public IotHubProperties(IList<SharedAccessSignatureAuthorizationRule> authorizationPolicies = default(IList<SharedAccessSignatureAuthorizationRule>), bool? disableLocalAuth = default(bool?), bool? disableDeviceSAS = default(bool?), bool? disableModuleSAS = default(bool?), bool? restrictOutboundNetworkAccess = default(bool?), IList<string> allowedFqdnList = default(IList<string>), string publicNetworkAccess = default(string), IList<IpFilterRule> ipFilterRules = default(IList<IpFilterRule>), NetworkRuleSetProperties networkRuleSets = default(NetworkRuleSetProperties), string minTlsVersion = default(string), IList<PrivateEndpointConnection> privateEndpointConnections = default(IList<PrivateEndpointConnection>), string provisioningState = default(string), string state = default(string), string hostName = default(string), IDictionary<string, EventHubProperties> eventHubEndpoints = default(IDictionary<string, EventHubProperties>), RoutingProperties routing = default(RoutingProperties), IDictionary<string, StorageEndpointProperties> storageEndpoints = default(IDictionary<string, StorageEndpointProperties>), IDictionary<string, MessagingEndpointProperties> messagingEndpoints = default(IDictionary<string, MessagingEndpointProperties>), bool? enableFileUploadNotifications = default(bool?), CloudToDeviceProperties cloudToDevice = default(CloudToDeviceProperties), string comments = default(string), IotHubPropertiesDeviceStreams deviceStreams = default(IotHubPropertiesDeviceStreams), string features = default(string), EncryptionPropertiesDescription encryption = default(EncryptionPropertiesDescription), IList<IotHubLocationDescription> locations = default(IList<IotHubLocationDescription>), bool? enableDataResidency = default(bool?), RootCertificateProperties rootCertificate = default(RootCertificateProperties))
        {
            AuthorizationPolicies = authorizationPolicies;
            DisableLocalAuth = disableLocalAuth;
            DisableDeviceSAS = disableDeviceSAS;
            DisableModuleSAS = disableModuleSAS;
            RestrictOutboundNetworkAccess = restrictOutboundNetworkAccess;
            AllowedFqdnList = allowedFqdnList;
            PublicNetworkAccess = publicNetworkAccess;
            IpFilterRules = ipFilterRules;
            NetworkRuleSets = networkRuleSets;
            MinTlsVersion = minTlsVersion;
            PrivateEndpointConnections = privateEndpointConnections;
            ProvisioningState = provisioningState;
            State = state;
            HostName = hostName;
            EventHubEndpoints = eventHubEndpoints;
            Routing = routing;
            StorageEndpoints = storageEndpoints;
            MessagingEndpoints = messagingEndpoints;
            EnableFileUploadNotifications = enableFileUploadNotifications;
            CloudToDevice = cloudToDevice;
            Comments = comments;
            DeviceStreams = deviceStreams;
            Features = features;
            Encryption = encryption;
            Locations = locations;
            EnableDataResidency = enableDataResidency;
            RootCertificate = rootCertificate;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the shared access policies you can use to secure a
        /// connection to the IoT hub.
        /// </summary>
        [JsonProperty(PropertyName = "authorizationPolicies")]
        public IList<SharedAccessSignatureAuthorizationRule> AuthorizationPolicies { get; set; }

        /// <summary>
        /// Gets or sets if true, SAS tokens with Iot hub scoped SAS keys
        /// cannot be used for authentication.
        /// </summary>
        [JsonProperty(PropertyName = "disableLocalAuth")]
        public bool? DisableLocalAuth { get; set; }

        /// <summary>
        /// Gets or sets if true, all device(including Edge devices but
        /// excluding modules) scoped SAS keys cannot be used for
        /// authentication.
        /// </summary>
        [JsonProperty(PropertyName = "disableDeviceSAS")]
        public bool? DisableDeviceSAS { get; set; }

        /// <summary>
        /// Gets or sets if true, all module scoped SAS keys cannot be used for
        /// authentication.
        /// </summary>
        [JsonProperty(PropertyName = "disableModuleSAS")]
        public bool? DisableModuleSAS { get; set; }

        /// <summary>
        /// Gets or sets if true, egress from IotHub will be restricted to only
        /// the allowed FQDNs that are configured via allowedFqdnList.
        /// </summary>
        [JsonProperty(PropertyName = "restrictOutboundNetworkAccess")]
        public bool? RestrictOutboundNetworkAccess { get; set; }

        /// <summary>
        /// Gets or sets list of allowed FQDNs(Fully Qualified Domain Name) for
        /// egress from Iot Hub.
        /// </summary>
        [JsonProperty(PropertyName = "allowedFqdnList")]
        public IList<string> AllowedFqdnList { get; set; }

        /// <summary>
        /// Gets or sets whether requests from Public Network are allowed.
        /// Possible values include: 'Enabled', 'Disabled'
        /// </summary>
        [JsonProperty(PropertyName = "publicNetworkAccess")]
        public string PublicNetworkAccess { get; set; }

        /// <summary>
        /// Gets or sets the IP filter rules.
        /// </summary>
        [JsonProperty(PropertyName = "ipFilterRules")]
        public IList<IpFilterRule> IpFilterRules { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "networkRuleSets")]
        public NetworkRuleSetProperties NetworkRuleSets { get; set; }

        /// <summary>
        /// Gets or sets specifies the minimum TLS version to support for this
        /// hub. Can be set to "1.2" to have clients that use a TLS version
        /// below 1.2 to be rejected.
        /// </summary>
        [JsonProperty(PropertyName = "minTlsVersion")]
        public string MinTlsVersion { get; set; }

        /// <summary>
        /// Gets or sets private endpoint connections created on this IotHub
        /// </summary>
        [JsonProperty(PropertyName = "privateEndpointConnections")]
        public IList<PrivateEndpointConnection> PrivateEndpointConnections { get; set; }

        /// <summary>
        /// Gets the provisioning state.
        /// </summary>
        [JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets the hub state.
        /// </summary>
        [JsonProperty(PropertyName = "state")]
        public string State { get; private set; }

        /// <summary>
        /// Gets the name of the host.
        /// </summary>
        [JsonProperty(PropertyName = "hostName")]
        public string HostName { get; private set; }

        /// <summary>
        /// Gets or sets the Event Hub-compatible endpoint properties. The only
        /// possible keys to this dictionary is events. This key has to be
        /// present in the dictionary while making create or update calls for
        /// the IoT hub.
        /// </summary>
        [JsonProperty(PropertyName = "eventHubEndpoints")]
        public IDictionary<string, EventHubProperties> EventHubEndpoints { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "routing")]
        public RoutingProperties Routing { get; set; }

        /// <summary>
        /// Gets or sets the list of Azure Storage endpoints where you can
        /// upload files. Currently you can configure only one Azure Storage
        /// account and that MUST have its key as $default. Specifying more
        /// than one storage account causes an error to be thrown. Not
        /// specifying a value for this property when the
        /// enableFileUploadNotifications property is set to True, causes an
        /// error to be thrown.
        /// </summary>
        [JsonProperty(PropertyName = "storageEndpoints")]
        public IDictionary<string, StorageEndpointProperties> StorageEndpoints { get; set; }

        /// <summary>
        /// Gets or sets the messaging endpoint properties for the file upload
        /// notification queue.
        /// </summary>
        [JsonProperty(PropertyName = "messagingEndpoints")]
        public IDictionary<string, MessagingEndpointProperties> MessagingEndpoints { get; set; }

        /// <summary>
        /// Gets or sets if True, file upload notifications are enabled.
        /// </summary>
        [JsonProperty(PropertyName = "enableFileUploadNotifications")]
        public bool? EnableFileUploadNotifications { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "cloudToDevice")]
        public CloudToDeviceProperties CloudToDevice { get; set; }

        /// <summary>
        /// Gets or sets ioT hub comments.
        /// </summary>
        [JsonProperty(PropertyName = "comments")]
        public string Comments { get; set; }

        /// <summary>
        /// Gets or sets the device streams properties of iothub.
        /// </summary>
        [JsonProperty(PropertyName = "deviceStreams")]
        public IotHubPropertiesDeviceStreams DeviceStreams { get; set; }

        /// <summary>
        /// Gets or sets the capabilities and features enabled for the IoT hub.
        /// Possible values include: 'None', 'DeviceManagement'
        /// </summary>
        [JsonProperty(PropertyName = "features")]
        public string Features { get; set; }

        /// <summary>
        /// Gets or sets the encryption properties for the IoT hub.
        /// </summary>
        [JsonProperty(PropertyName = "encryption")]
        public EncryptionPropertiesDescription Encryption { get; set; }

        /// <summary>
        /// Gets primary and secondary location for iot hub
        /// </summary>
        [JsonProperty(PropertyName = "locations")]
        public IList<IotHubLocationDescription> Locations { get; private set; }

        /// <summary>
        /// Gets or sets this property when set to true, will enable data
        /// residency, thus, disabling disaster recovery.
        /// </summary>
        [JsonProperty(PropertyName = "enableDataResidency")]
        public bool? EnableDataResidency { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "rootCertificate")]
        public RootCertificateProperties RootCertificate { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (AuthorizationPolicies != null)
            {
                foreach (var element in AuthorizationPolicies)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (IpFilterRules != null)
            {
                foreach (var element1 in IpFilterRules)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
            if (NetworkRuleSets != null)
            {
                NetworkRuleSets.Validate();
            }
            if (PrivateEndpointConnections != null)
            {
                foreach (var element2 in PrivateEndpointConnections)
                {
                    if (element2 != null)
                    {
                        element2.Validate();
                    }
                }
            }
            if (Routing != null)
            {
                Routing.Validate();
            }
            if (StorageEndpoints != null)
            {
                foreach (var valueElement in StorageEndpoints.Values)
                {
                    if (valueElement != null)
                    {
                        valueElement.Validate();
                    }
                }
            }
            if (MessagingEndpoints != null)
            {
                foreach (var valueElement1 in MessagingEndpoints.Values)
                {
                    if (valueElement1 != null)
                    {
                        valueElement1.Validate();
                    }
                }
            }
            if (CloudToDevice != null)
            {
                CloudToDevice.Validate();
            }
        }
    }
}
