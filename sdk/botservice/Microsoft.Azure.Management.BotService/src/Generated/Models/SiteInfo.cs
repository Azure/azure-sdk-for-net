// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.BotService.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Site information for WebChat or DirectLine Channels to identify which
    /// site to regenerate keys for.
    /// </summary>
    public partial class SiteInfo
    {
        /// <summary>
        /// Initializes a new instance of the SiteInfo class.
        /// </summary>
        public SiteInfo()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SiteInfo class.
        /// </summary>
        /// <param name="siteName">The site name</param>
        /// <param name="key">Determines which key is to be regenerated.
        /// Possible values include: 'key1', 'key2'</param>
        public SiteInfo(string siteName, Key key)
        {
            SiteName = siteName;
            Key = key;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the site name
        /// </summary>
        [JsonProperty(PropertyName = "siteName")]
        public string SiteName { get; set; }

        /// <summary>
        /// Gets or sets determines which key is to be regenerated. Possible
        /// values include: 'key1', 'key2'
        /// </summary>
        [JsonProperty(PropertyName = "key")]
        public Key Key { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (SiteName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SiteName");
            }
        }
    }
}
