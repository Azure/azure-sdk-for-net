// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.BotService.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The parameters to provide for the Line channel.
    /// </summary>
    public partial class LineChannelProperties
    {
        /// <summary>
        /// Initializes a new instance of the LineChannelProperties class.
        /// </summary>
        public LineChannelProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the LineChannelProperties class.
        /// </summary>
        /// <param name="lineRegistrations">The list of line channel
        /// registrations</param>
        /// <param name="callbackUrl">Callback Url to enter in line
        /// registration.</param>
        /// <param name="isValidated">Whether this channel is validated for the
        /// bot</param>
        public LineChannelProperties(IList<LineRegistration> lineRegistrations, string callbackUrl = default(string), bool? isValidated = default(bool?))
        {
            LineRegistrations = lineRegistrations;
            CallbackUrl = callbackUrl;
            IsValidated = isValidated;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the list of line channel registrations
        /// </summary>
        [JsonProperty(PropertyName = "lineRegistrations")]
        public IList<LineRegistration> LineRegistrations { get; set; }

        /// <summary>
        /// Gets callback Url to enter in line registration.
        /// </summary>
        [JsonProperty(PropertyName = "callbackUrl")]
        public string CallbackUrl { get; private set; }

        /// <summary>
        /// Gets whether this channel is validated for the bot
        /// </summary>
        [JsonProperty(PropertyName = "isValidated")]
        public bool? IsValidated { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (LineRegistrations == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "LineRegistrations");
            }
        }
    }
}
