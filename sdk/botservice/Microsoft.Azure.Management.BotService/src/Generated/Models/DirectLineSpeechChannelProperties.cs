// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.BotService.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The parameters to provide for the DirectLine Speech channel.
    /// </summary>
    public partial class DirectLineSpeechChannelProperties
    {
        /// <summary>
        /// Initializes a new instance of the DirectLineSpeechChannelProperties
        /// class.
        /// </summary>
        public DirectLineSpeechChannelProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DirectLineSpeechChannelProperties
        /// class.
        /// </summary>
        /// <param name="cognitiveServiceRegion">The cognitive service region
        /// with this channel registration.</param>
        /// <param name="cognitiveServiceSubscriptionKey">The cognitive service
        /// subscription key to use with this channel registration.</param>
        /// <param name="isEnabled">Whether this channel is enabled or
        /// not.</param>
        /// <param name="customVoiceDeploymentId">Custom speech model id
        /// (optional).</param>
        /// <param name="customSpeechModelId">Custom voice deployment id
        /// (optional).</param>
        /// <param name="isDefaultBotForCogSvcAccount">Make this a default bot
        /// for chosen cognitive service account.</param>
        public DirectLineSpeechChannelProperties(string cognitiveServiceRegion, string cognitiveServiceSubscriptionKey, bool? isEnabled = default(bool?), string customVoiceDeploymentId = default(string), string customSpeechModelId = default(string), bool? isDefaultBotForCogSvcAccount = default(bool?))
        {
            CognitiveServiceRegion = cognitiveServiceRegion;
            CognitiveServiceSubscriptionKey = cognitiveServiceSubscriptionKey;
            IsEnabled = isEnabled;
            CustomVoiceDeploymentId = customVoiceDeploymentId;
            CustomSpeechModelId = customSpeechModelId;
            IsDefaultBotForCogSvcAccount = isDefaultBotForCogSvcAccount;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the cognitive service region with this channel
        /// registration.
        /// </summary>
        [JsonProperty(PropertyName = "cognitiveServiceRegion")]
        public string CognitiveServiceRegion { get; set; }

        /// <summary>
        /// Gets or sets the cognitive service subscription key to use with
        /// this channel registration.
        /// </summary>
        [JsonProperty(PropertyName = "cognitiveServiceSubscriptionKey")]
        public string CognitiveServiceSubscriptionKey { get; set; }

        /// <summary>
        /// Gets or sets whether this channel is enabled or not.
        /// </summary>
        [JsonProperty(PropertyName = "isEnabled")]
        public bool? IsEnabled { get; set; }

        /// <summary>
        /// Gets or sets custom speech model id (optional).
        /// </summary>
        [JsonProperty(PropertyName = "customVoiceDeploymentId")]
        public string CustomVoiceDeploymentId { get; set; }

        /// <summary>
        /// Gets or sets custom voice deployment id (optional).
        /// </summary>
        [JsonProperty(PropertyName = "customSpeechModelId")]
        public string CustomSpeechModelId { get; set; }

        /// <summary>
        /// Gets or sets make this a default bot for chosen cognitive service
        /// account.
        /// </summary>
        [JsonProperty(PropertyName = "isDefaultBotForCogSvcAccount")]
        public bool? IsDefaultBotForCogSvcAccount { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (CognitiveServiceRegion == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "CognitiveServiceRegion");
            }
            if (CognitiveServiceSubscriptionKey == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "CognitiveServiceSubscriptionKey");
            }
        }
    }
}
