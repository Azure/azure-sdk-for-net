// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.BotService
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for BotConnectionOperations.
    /// </summary>
    public static partial class BotConnectionOperationsExtensions
    {
            /// <summary>
            /// Lists the available Service Providers for creating Connection Settings
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static ServiceProviderResponseList ListServiceProviders(this IBotConnectionOperations operations)
            {
                return operations.ListServiceProvidersAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the available Service Providers for creating Connection Settings
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ServiceProviderResponseList> ListServiceProvidersAsync(this IBotConnectionOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListServiceProvidersWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a Connection Setting registration for a Bot Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Bot resource group in the user subscription.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the Bot resource.
            /// </param>
            /// <param name='connectionName'>
            /// The name of the Bot Service Connection Setting resource.
            /// </param>
            public static ConnectionSetting ListWithSecrets(this IBotConnectionOperations operations, string resourceGroupName, string resourceName, string connectionName)
            {
                return operations.ListWithSecretsAsync(resourceGroupName, resourceName, connectionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a Connection Setting registration for a Bot Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Bot resource group in the user subscription.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the Bot resource.
            /// </param>
            /// <param name='connectionName'>
            /// The name of the Bot Service Connection Setting resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ConnectionSetting> ListWithSecretsAsync(this IBotConnectionOperations operations, string resourceGroupName, string resourceName, string connectionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithSecretsWithHttpMessagesAsync(resourceGroupName, resourceName, connectionName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Register a new Auth Connection for a Bot Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Bot resource group in the user subscription.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the Bot resource.
            /// </param>
            /// <param name='connectionName'>
            /// The name of the Bot Service Connection Setting resource.
            /// </param>
            /// <param name='parameters'>
            /// The parameters to provide for creating the Connection Setting.
            /// </param>
            public static ConnectionSetting Create(this IBotConnectionOperations operations, string resourceGroupName, string resourceName, string connectionName, ConnectionSetting parameters)
            {
                return operations.CreateAsync(resourceGroupName, resourceName, connectionName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Register a new Auth Connection for a Bot Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Bot resource group in the user subscription.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the Bot resource.
            /// </param>
            /// <param name='connectionName'>
            /// The name of the Bot Service Connection Setting resource.
            /// </param>
            /// <param name='parameters'>
            /// The parameters to provide for creating the Connection Setting.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ConnectionSetting> CreateAsync(this IBotConnectionOperations operations, string resourceGroupName, string resourceName, string connectionName, ConnectionSetting parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, resourceName, connectionName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a Connection Setting registration for a Bot Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Bot resource group in the user subscription.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the Bot resource.
            /// </param>
            /// <param name='connectionName'>
            /// The name of the Bot Service Connection Setting resource.
            /// </param>
            /// <param name='parameters'>
            /// The parameters to provide for updating the Connection Setting.
            /// </param>
            public static ConnectionSetting Update(this IBotConnectionOperations operations, string resourceGroupName, string resourceName, string connectionName, ConnectionSetting parameters)
            {
                return operations.UpdateAsync(resourceGroupName, resourceName, connectionName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a Connection Setting registration for a Bot Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Bot resource group in the user subscription.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the Bot resource.
            /// </param>
            /// <param name='connectionName'>
            /// The name of the Bot Service Connection Setting resource.
            /// </param>
            /// <param name='parameters'>
            /// The parameters to provide for updating the Connection Setting.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ConnectionSetting> UpdateAsync(this IBotConnectionOperations operations, string resourceGroupName, string resourceName, string connectionName, ConnectionSetting parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, resourceName, connectionName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a Connection Setting registration for a Bot Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Bot resource group in the user subscription.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the Bot resource.
            /// </param>
            /// <param name='connectionName'>
            /// The name of the Bot Service Connection Setting resource.
            /// </param>
            public static ConnectionSetting Get(this IBotConnectionOperations operations, string resourceGroupName, string resourceName, string connectionName)
            {
                return operations.GetAsync(resourceGroupName, resourceName, connectionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a Connection Setting registration for a Bot Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Bot resource group in the user subscription.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the Bot resource.
            /// </param>
            /// <param name='connectionName'>
            /// The name of the Bot Service Connection Setting resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ConnectionSetting> GetAsync(this IBotConnectionOperations operations, string resourceGroupName, string resourceName, string connectionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, resourceName, connectionName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a Connection Setting registration for a Bot Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Bot resource group in the user subscription.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the Bot resource.
            /// </param>
            /// <param name='connectionName'>
            /// The name of the Bot Service Connection Setting resource.
            /// </param>
            public static void Delete(this IBotConnectionOperations operations, string resourceGroupName, string resourceName, string connectionName)
            {
                operations.DeleteAsync(resourceGroupName, resourceName, connectionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a Connection Setting registration for a Bot Service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Bot resource group in the user subscription.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the Bot resource.
            /// </param>
            /// <param name='connectionName'>
            /// The name of the Bot Service Connection Setting resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IBotConnectionOperations operations, string resourceGroupName, string resourceName, string connectionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, resourceName, connectionName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns all the Connection Settings registered to a particular BotService
            /// resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Bot resource group in the user subscription.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the Bot resource.
            /// </param>
            public static IPage<ConnectionSetting> ListByBotService(this IBotConnectionOperations operations, string resourceGroupName, string resourceName)
            {
                return operations.ListByBotServiceAsync(resourceGroupName, resourceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns all the Connection Settings registered to a particular BotService
            /// resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Bot resource group in the user subscription.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the Bot resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ConnectionSetting>> ListByBotServiceAsync(this IBotConnectionOperations operations, string resourceGroupName, string resourceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByBotServiceWithHttpMessagesAsync(resourceGroupName, resourceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns all the Connection Settings registered to a particular BotService
            /// resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ConnectionSetting> ListByBotServiceNext(this IBotConnectionOperations operations, string nextPageLink)
            {
                return operations.ListByBotServiceNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns all the Connection Settings registered to a particular BotService
            /// resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ConnectionSetting>> ListByBotServiceNextAsync(this IBotConnectionOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByBotServiceNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
