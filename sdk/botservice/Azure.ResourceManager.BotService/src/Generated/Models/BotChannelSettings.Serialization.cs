// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.BotService.Models
{
    public partial class BotChannelSettings : IUtf8JsonSerializable, IModelJsonSerializable<BotChannelSettings>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<BotChannelSettings>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<BotChannelSettings>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<BotChannelSettings>(this, options.Format);

            writer.WriteStartObject();
            if (Optional.IsDefined(ExtensionKey1))
            {
                writer.WritePropertyName("extensionKey1"u8);
                writer.WriteStringValue(ExtensionKey1);
            }
            if (Optional.IsDefined(ExtensionKey2))
            {
                writer.WritePropertyName("extensionKey2"u8);
                writer.WriteStringValue(ExtensionKey2);
            }
            if (Optional.IsCollectionDefined(Sites))
            {
                writer.WritePropertyName("sites"u8);
                writer.WriteStartArray();
                foreach (var item in Sites)
                {
                    if (item is null)
                    {
                        writer.WriteNullValue();
                    }
                    else
                    {
                        ((IModelJsonSerializable<BotChannelSite>)item).Serialize(writer, options);
                    }
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(ChannelId))
            {
                writer.WritePropertyName("channelId"u8);
                writer.WriteStringValue(ChannelId);
            }
            if (Optional.IsDefined(ChannelDisplayName))
            {
                writer.WritePropertyName("channelDisplayName"u8);
                writer.WriteStringValue(ChannelDisplayName);
            }
            if (Optional.IsDefined(BotId))
            {
                writer.WritePropertyName("botId"u8);
                writer.WriteStringValue(BotId);
            }
            if (Optional.IsDefined(BotIconUri))
            {
                writer.WritePropertyName("botIconUrl"u8);
                writer.WriteStringValue(BotIconUri.AbsoluteUri);
            }
            if (Optional.IsDefined(IsEnabled))
            {
                writer.WritePropertyName("isEnabled"u8);
                writer.WriteBooleanValue(IsEnabled.Value);
            }
            if (Optional.IsDefined(DisableLocalAuth))
            {
                writer.WritePropertyName("disableLocalAuth"u8);
                writer.WriteBooleanValue(DisableLocalAuth.Value);
            }
            if (Optional.IsDefined(RequireTermsAgreement))
            {
                writer.WritePropertyName("requireTermsAgreement"u8);
                writer.WriteBooleanValue(RequireTermsAgreement.Value);
            }
            if (_serializedAdditionalRawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static BotChannelSettings DeserializeBotChannelSettings(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> extensionKey1 = default;
            Optional<string> extensionKey2 = default;
            Optional<IList<BotChannelSite>> sites = default;
            Optional<string> channelId = default;
            Optional<string> channelDisplayName = default;
            Optional<string> botId = default;
            Optional<Uri> botIconUrl = default;
            Optional<bool> isEnabled = default;
            Optional<bool> disableLocalAuth = default;
            Optional<bool> requireTermsAgreement = default;
            Dictionary<string, BinaryData> serializedAdditionalRawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("extensionKey1"u8))
                {
                    extensionKey1 = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("extensionKey2"u8))
                {
                    extensionKey2 = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sites"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<BotChannelSite> array = new List<BotChannelSite>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(BotChannelSite.DeserializeBotChannelSite(item));
                    }
                    sites = array;
                    continue;
                }
                if (property.NameEquals("channelId"u8))
                {
                    channelId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("channelDisplayName"u8))
                {
                    channelDisplayName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("botId"u8))
                {
                    botId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("botIconUrl"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    botIconUrl = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("isEnabled"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isEnabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("disableLocalAuth"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    disableLocalAuth = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("requireTermsAgreement"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    requireTermsAgreement = property.Value.GetBoolean();
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    serializedAdditionalRawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new BotChannelSettings(extensionKey1.Value, extensionKey2.Value, Optional.ToList(sites), channelId.Value, channelDisplayName.Value, botId.Value, botIconUrl.Value, Optional.ToNullable(isEnabled), Optional.ToNullable(disableLocalAuth), Optional.ToNullable(requireTermsAgreement), serializedAdditionalRawData);
        }

        BotChannelSettings IModelJsonSerializable<BotChannelSettings>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<BotChannelSettings>(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeBotChannelSettings(doc.RootElement, options);
        }

        BinaryData IModelSerializable<BotChannelSettings>.Serialize(ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<BotChannelSettings>(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        BotChannelSettings IModelSerializable<BotChannelSettings>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<BotChannelSettings>(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeBotChannelSettings(doc.RootElement, options);
        }

        /// <summary> Converts a <see cref="BotChannelSettings"/> into a <see cref="RequestContent"/>. </summary>
        /// <param name="model"> The <see cref="BotChannelSettings"/> to convert. </param>
        public static implicit operator RequestContent(BotChannelSettings model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        /// <summary> Converts a <see cref="Response"/> into a <see cref="BotChannelSettings"/>. </summary>
        /// <param name="response"> The <see cref="Response"/> to convert. </param>
        public static explicit operator BotChannelSettings(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeBotChannelSettings(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
