// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.BotService.Models
{
    public partial class ServiceProviderProperties
    {
        internal static ServiceProviderProperties DeserializeServiceProviderProperties(JsonElement element)
        {
            Optional<string> id = default;
            Optional<string> displayName = default;
            Optional<string> serviceProviderName = default;
            Optional<Uri> devPortalUrl = default;
            Optional<Uri> iconUrl = default;
            Optional<IReadOnlyList<ServiceProviderParameter>> parameters = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"u8))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("displayName"u8))
                {
                    displayName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("serviceProviderName"u8))
                {
                    serviceProviderName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("devPortalUrl"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        devPortalUrl = null;
                        continue;
                    }
                    devPortalUrl = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("iconUrl"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        iconUrl = null;
                        continue;
                    }
                    iconUrl = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("parameters"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<ServiceProviderParameter> array = new List<ServiceProviderParameter>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ServiceProviderParameter.DeserializeServiceProviderParameter(item));
                    }
                    parameters = array;
                    continue;
                }
            }
            return new ServiceProviderProperties(id.Value, displayName.Value, serviceProviderName.Value, devPortalUrl.Value, iconUrl.Value, Optional.ToList(parameters));
        }
    }
}
