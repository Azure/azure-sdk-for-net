// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.BotService.Models
{
    public partial class SlackChannelProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(ClientId))
            {
                writer.WritePropertyName("clientId");
                writer.WriteStringValue(ClientId);
            }
            if (Optional.IsDefined(ClientSecret))
            {
                writer.WritePropertyName("clientSecret");
                writer.WriteStringValue(ClientSecret);
            }
            if (Optional.IsDefined(VerificationToken))
            {
                writer.WritePropertyName("verificationToken");
                writer.WriteStringValue(VerificationToken);
            }
            if (Optional.IsDefined(Scopes))
            {
                writer.WritePropertyName("scopes");
                writer.WriteStringValue(Scopes);
            }
            if (Optional.IsDefined(LandingPageUri))
            {
                writer.WritePropertyName("landingPageUrl");
                writer.WriteStringValue(LandingPageUri.AbsoluteUri);
            }
            if (Optional.IsDefined(RegisterBeforeOAuthFlow))
            {
                writer.WritePropertyName("registerBeforeOAuthFlow");
                writer.WriteBooleanValue(RegisterBeforeOAuthFlow.Value);
            }
            if (Optional.IsDefined(SigningSecret))
            {
                writer.WritePropertyName("signingSecret");
                writer.WriteStringValue(SigningSecret);
            }
            writer.WritePropertyName("isEnabled");
            writer.WriteBooleanValue(IsEnabled);
            writer.WriteEndObject();
        }

        internal static SlackChannelProperties DeserializeSlackChannelProperties(JsonElement element)
        {
            Optional<string> clientId = default;
            Optional<string> clientSecret = default;
            Optional<string> verificationToken = default;
            Optional<string> scopes = default;
            Optional<Uri> landingPageUrl = default;
            Optional<string> redirectAction = default;
            Optional<string> lastSubmissionId = default;
            Optional<bool> registerBeforeOAuthFlow = default;
            Optional<bool> isValidated = default;
            Optional<string> signingSecret = default;
            bool isEnabled = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("clientId"))
                {
                    clientId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("clientSecret"))
                {
                    clientSecret = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("verificationToken"))
                {
                    verificationToken = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("scopes"))
                {
                    scopes = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("landingPageUrl"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        landingPageUrl = null;
                        continue;
                    }
                    landingPageUrl = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("redirectAction"))
                {
                    redirectAction = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("lastSubmissionId"))
                {
                    lastSubmissionId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("registerBeforeOAuthFlow"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    registerBeforeOAuthFlow = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("IsValidated"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    isValidated = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("signingSecret"))
                {
                    signingSecret = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("isEnabled"))
                {
                    isEnabled = property.Value.GetBoolean();
                    continue;
                }
            }
            return new SlackChannelProperties(clientId.Value, clientSecret.Value, verificationToken.Value, scopes.Value, landingPageUrl.Value, redirectAction.Value, lastSubmissionId.Value, Optional.ToNullable(registerBeforeOAuthFlow), Optional.ToNullable(isValidated), signingSecret.Value, isEnabled);
        }
    }
}
