// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace Azure.ResourceManager.BotService.Models
{
    public partial class WebChatSite : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("siteName");
            writer.WriteStringValue(SiteName);
            writer.WritePropertyName("isEnabled");
            writer.WriteBooleanValue(IsEnabled);
            if (Optional.IsDefined(IsEndpointParametersEnabled))
            {
                writer.WritePropertyName("isEndpointParametersEnabled");
                writer.WriteBooleanValue(IsEndpointParametersEnabled.Value);
            }
            if (Optional.IsDefined(IsDetailedLoggingEnabled))
            {
                writer.WritePropertyName("isDetailedLoggingEnabled");
                writer.WriteBooleanValue(IsDetailedLoggingEnabled.Value);
            }
            if (Optional.IsDefined(IsBlockUserUploadEnabled))
            {
                if (IsBlockUserUploadEnabled != null)
                {
                    writer.WritePropertyName("isBlockUserUploadEnabled");
                    writer.WriteBooleanValue(IsBlockUserUploadEnabled.Value);
                }
                else
                {
                    writer.WriteNull("isBlockUserUploadEnabled");
                }
            }
            if (Optional.IsDefined(IsNoStorageEnabled))
            {
                writer.WritePropertyName("isNoStorageEnabled");
                writer.WriteBooleanValue(IsNoStorageEnabled.Value);
            }
            if (Optional.IsDefined(ETag))
            {
                writer.WritePropertyName("eTag");
                writer.WriteStringValue(ETag.Value.ToString());
            }
            if (Optional.IsDefined(AppId))
            {
                writer.WritePropertyName("appId");
                writer.WriteStringValue(AppId);
            }
            if (Optional.IsDefined(IsV1Enabled))
            {
                writer.WritePropertyName("isV1Enabled");
                writer.WriteBooleanValue(IsV1Enabled.Value);
            }
            if (Optional.IsDefined(IsV3Enabled))
            {
                writer.WritePropertyName("isV3Enabled");
                writer.WriteBooleanValue(IsV3Enabled.Value);
            }
            if (Optional.IsDefined(IsSecureSiteEnabled))
            {
                writer.WritePropertyName("isSecureSiteEnabled");
                writer.WriteBooleanValue(IsSecureSiteEnabled.Value);
            }
            if (Optional.IsCollectionDefined(TrustedOrigins))
            {
                writer.WritePropertyName("trustedOrigins");
                writer.WriteStartArray();
                foreach (var item in TrustedOrigins)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(IsWebchatPreviewEnabled))
            {
                writer.WritePropertyName("isWebchatPreviewEnabled");
                writer.WriteBooleanValue(IsWebchatPreviewEnabled.Value);
            }
            writer.WriteEndObject();
        }

        internal static WebChatSite DeserializeWebChatSite(JsonElement element)
        {
            Optional<string> siteId = default;
            string siteName = default;
            Optional<string> key = default;
            Optional<string> key2 = default;
            bool isEnabled = default;
            Optional<bool> isTokenEnabled = default;
            Optional<bool> isEndpointParametersEnabled = default;
            Optional<bool> isDetailedLoggingEnabled = default;
            Optional<bool?> isBlockUserUploadEnabled = default;
            Optional<bool> isNoStorageEnabled = default;
            Optional<ETag> eTag = default;
            Optional<string> appId = default;
            Optional<bool> isV1Enabled = default;
            Optional<bool> isV3Enabled = default;
            Optional<bool> isSecureSiteEnabled = default;
            Optional<IList<string>> trustedOrigins = default;
            Optional<bool> isWebchatPreviewEnabled = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("siteId"))
                {
                    siteId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("siteName"))
                {
                    siteName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("key"))
                {
                    key = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("key2"))
                {
                    key2 = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("isEnabled"))
                {
                    isEnabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("isTokenEnabled"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    isTokenEnabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("isEndpointParametersEnabled"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    isEndpointParametersEnabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("isDetailedLoggingEnabled"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    isDetailedLoggingEnabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("isBlockUserUploadEnabled"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        isBlockUserUploadEnabled = null;
                        continue;
                    }
                    isBlockUserUploadEnabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("isNoStorageEnabled"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    isNoStorageEnabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("eTag"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    eTag = new ETag(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("appId"))
                {
                    appId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("isV1Enabled"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    isV1Enabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("isV3Enabled"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    isV3Enabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("isSecureSiteEnabled"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    isSecureSiteEnabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("trustedOrigins"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    trustedOrigins = array;
                    continue;
                }
                if (property.NameEquals("isWebchatPreviewEnabled"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    isWebchatPreviewEnabled = property.Value.GetBoolean();
                    continue;
                }
            }
            return new WebChatSite(siteId.Value, siteName, key.Value, key2.Value, isEnabled, Optional.ToNullable(isTokenEnabled), Optional.ToNullable(isEndpointParametersEnabled), Optional.ToNullable(isDetailedLoggingEnabled), Optional.ToNullable(isBlockUserUploadEnabled), Optional.ToNullable(isNoStorageEnabled), Optional.ToNullable(eTag), appId.Value, Optional.ToNullable(isV1Enabled), Optional.ToNullable(isV3Enabled), Optional.ToNullable(isSecureSiteEnabled), Optional.ToList(trustedOrigins), Optional.ToNullable(isWebchatPreviewEnabled));
        }
    }
}
