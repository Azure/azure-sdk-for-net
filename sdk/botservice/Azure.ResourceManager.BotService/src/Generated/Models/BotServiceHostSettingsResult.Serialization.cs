// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.BotService.Models
{
    public partial class BotServiceHostSettingsResult
    {
        internal static BotServiceHostSettingsResult DeserializeBotServiceHostSettingsResult(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<Uri> oAuthUrl = default;
            Core.Optional<Uri> toBotFromChannelOpenIdMetadataUrl = default;
            Core.Optional<string> toBotFromChannelTokenIssuer = default;
            Core.Optional<Uri> toBotFromEmulatorOpenIdMetadataUrl = default;
            Core.Optional<Uri> toChannelFromBotLoginUrl = default;
            Core.Optional<string> toChannelFromBotOAuthScope = default;
            Core.Optional<bool> validateAuthority = default;
            Core.Optional<string> botOpenIdMetadata = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("OAuthUrl"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    oAuthUrl = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("ToBotFromChannelOpenIdMetadataUrl"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    toBotFromChannelOpenIdMetadataUrl = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("ToBotFromChannelTokenIssuer"u8))
                {
                    toBotFromChannelTokenIssuer = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ToBotFromEmulatorOpenIdMetadataUrl"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    toBotFromEmulatorOpenIdMetadataUrl = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("ToChannelFromBotLoginUrl"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    toChannelFromBotLoginUrl = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("ToChannelFromBotOAuthScope"u8))
                {
                    toChannelFromBotOAuthScope = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ValidateAuthority"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    validateAuthority = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("BotOpenIdMetadata"u8))
                {
                    botOpenIdMetadata = property.Value.GetString();
                    continue;
                }
            }
            return new BotServiceHostSettingsResult(oAuthUrl.Value, toBotFromChannelOpenIdMetadataUrl.Value, toBotFromChannelTokenIssuer.Value, toBotFromEmulatorOpenIdMetadataUrl.Value, toChannelFromBotLoginUrl.Value, toChannelFromBotOAuthScope.Value, Core.Optional.ToNullable(validateAuthority), botOpenIdMetadata.Value);
        }
    }
}
