// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.BotService.Models
{
    public partial class BotServiceHostSettingsResult : IUtf8JsonSerializable, IJsonModel<BotServiceHostSettingsResult>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<BotServiceHostSettingsResult>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<BotServiceHostSettingsResult>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<BotServiceHostSettingsResult>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(BotServiceHostSettingsResult)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (Optional.IsDefined(OAuthUri))
            {
                writer.WritePropertyName("OAuthUrl"u8);
                writer.WriteStringValue(OAuthUri.AbsoluteUri);
            }
            if (Optional.IsDefined(ToBotFromChannelOpenIdMetadataUri))
            {
                writer.WritePropertyName("ToBotFromChannelOpenIdMetadataUrl"u8);
                writer.WriteStringValue(ToBotFromChannelOpenIdMetadataUri.AbsoluteUri);
            }
            if (Optional.IsDefined(ToBotFromChannelTokenIssuer))
            {
                writer.WritePropertyName("ToBotFromChannelTokenIssuer"u8);
                writer.WriteStringValue(ToBotFromChannelTokenIssuer);
            }
            if (Optional.IsDefined(ToBotFromEmulatorOpenIdMetadataUri))
            {
                writer.WritePropertyName("ToBotFromEmulatorOpenIdMetadataUrl"u8);
                writer.WriteStringValue(ToBotFromEmulatorOpenIdMetadataUri.AbsoluteUri);
            }
            if (Optional.IsDefined(ToChannelFromBotLoginUri))
            {
                writer.WritePropertyName("ToChannelFromBotLoginUrl"u8);
                writer.WriteStringValue(ToChannelFromBotLoginUri.AbsoluteUri);
            }
            if (Optional.IsDefined(ToChannelFromBotOAuthScope))
            {
                writer.WritePropertyName("ToChannelFromBotOAuthScope"u8);
                writer.WriteStringValue(ToChannelFromBotOAuthScope);
            }
            if (Optional.IsDefined(ValidateAuthority))
            {
                writer.WritePropertyName("ValidateAuthority"u8);
                writer.WriteBooleanValue(ValidateAuthority.Value);
            }
            if (Optional.IsDefined(BotOpenIdMetadata))
            {
                writer.WritePropertyName("BotOpenIdMetadata"u8);
                writer.WriteStringValue(BotOpenIdMetadata);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        BotServiceHostSettingsResult IJsonModel<BotServiceHostSettingsResult>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<BotServiceHostSettingsResult>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(BotServiceHostSettingsResult)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeBotServiceHostSettingsResult(document.RootElement, options);
        }

        internal static BotServiceHostSettingsResult DeserializeBotServiceHostSettingsResult(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<Uri> oAuthUrl = default;
            Optional<Uri> toBotFromChannelOpenIdMetadataUrl = default;
            Optional<string> toBotFromChannelTokenIssuer = default;
            Optional<Uri> toBotFromEmulatorOpenIdMetadataUrl = default;
            Optional<Uri> toChannelFromBotLoginUrl = default;
            Optional<string> toChannelFromBotOAuthScope = default;
            Optional<bool> validateAuthority = default;
            Optional<string> botOpenIdMetadata = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("OAuthUrl"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    oAuthUrl = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("ToBotFromChannelOpenIdMetadataUrl"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    toBotFromChannelOpenIdMetadataUrl = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("ToBotFromChannelTokenIssuer"u8))
                {
                    toBotFromChannelTokenIssuer = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ToBotFromEmulatorOpenIdMetadataUrl"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    toBotFromEmulatorOpenIdMetadataUrl = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("ToChannelFromBotLoginUrl"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    toChannelFromBotLoginUrl = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("ToChannelFromBotOAuthScope"u8))
                {
                    toChannelFromBotOAuthScope = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ValidateAuthority"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    validateAuthority = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("BotOpenIdMetadata"u8))
                {
                    botOpenIdMetadata = property.Value.GetString();
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new BotServiceHostSettingsResult(oAuthUrl.Value, toBotFromChannelOpenIdMetadataUrl.Value, toBotFromChannelTokenIssuer.Value, toBotFromEmulatorOpenIdMetadataUrl.Value, toChannelFromBotLoginUrl.Value, toChannelFromBotOAuthScope.Value, Optional.ToNullable(validateAuthority), botOpenIdMetadata.Value, serializedAdditionalRawData);
        }

        private BinaryData SerializeBicep(ModelReaderWriterOptions options)
        {
            StringBuilder builder = new StringBuilder();
            builder.AppendLine("{");

            if (Optional.IsDefined(OAuthUri))
            {
                builder.Append("  OAuthUrl:");
                builder.AppendLine($" '{OAuthUri.AbsoluteUri}'");
            }

            if (Optional.IsDefined(ToBotFromChannelOpenIdMetadataUri))
            {
                builder.Append("  ToBotFromChannelOpenIdMetadataUrl:");
                builder.AppendLine($" '{ToBotFromChannelOpenIdMetadataUri.AbsoluteUri}'");
            }

            if (Optional.IsDefined(ToBotFromChannelTokenIssuer))
            {
                builder.Append("  ToBotFromChannelTokenIssuer:");
                builder.AppendLine($" '{ToBotFromChannelTokenIssuer}'");
            }

            if (Optional.IsDefined(ToBotFromEmulatorOpenIdMetadataUri))
            {
                builder.Append("  ToBotFromEmulatorOpenIdMetadataUrl:");
                builder.AppendLine($" '{ToBotFromEmulatorOpenIdMetadataUri.AbsoluteUri}'");
            }

            if (Optional.IsDefined(ToChannelFromBotLoginUri))
            {
                builder.Append("  ToChannelFromBotLoginUrl:");
                builder.AppendLine($" '{ToChannelFromBotLoginUri.AbsoluteUri}'");
            }

            if (Optional.IsDefined(ToChannelFromBotOAuthScope))
            {
                builder.Append("  ToChannelFromBotOAuthScope:");
                builder.AppendLine($" '{ToChannelFromBotOAuthScope}'");
            }

            if (Optional.IsDefined(ValidateAuthority))
            {
                builder.Append("  ValidateAuthority:");
                var boolValue = ValidateAuthority.Value == true ? "true" : "false";
                builder.AppendLine($" {boolValue}");
            }

            if (Optional.IsDefined(BotOpenIdMetadata))
            {
                builder.Append("  BotOpenIdMetadata:");
                builder.AppendLine($" '{BotOpenIdMetadata}'");
            }

            builder.AppendLine("}");
            return BinaryData.FromString(builder.ToString());
        }

        private void AppendChildObject(StringBuilder stringBuilder, object childObject, ModelReaderWriterOptions options, int spaces, bool indentFirstLine)
        {
            string indent = new string(' ', spaces);
            BinaryData data = ModelReaderWriter.Write(childObject, options);
            string[] lines = data.ToString().Split(Environment.NewLine.ToCharArray(), StringSplitOptions.RemoveEmptyEntries);
            for (int i = 0; i < lines.Length; i++)
            {
                string line = lines[i];
                if (i == 0 && !indentFirstLine)
                {
                    stringBuilder.AppendLine($" {line}");
                }
                else
                {
                    stringBuilder.AppendLine($"{indent}{line}");
                }
            }
        }

        BinaryData IPersistableModel<BotServiceHostSettingsResult>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<BotServiceHostSettingsResult>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                case "B":
                    return SerializeBicep(options);
                default:
                    throw new FormatException($"The model {nameof(BotServiceHostSettingsResult)} does not support '{options.Format}' format.");
            }
        }

        BotServiceHostSettingsResult IPersistableModel<BotServiceHostSettingsResult>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<BotServiceHostSettingsResult>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeBotServiceHostSettingsResult(document.RootElement, options);
                    }
                case "B":
                    throw new InvalidOperationException("Bicep deserialization is not supported for this type.");
                default:
                    throw new FormatException($"The model {nameof(BotServiceHostSettingsResult)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<BotServiceHostSettingsResult>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
