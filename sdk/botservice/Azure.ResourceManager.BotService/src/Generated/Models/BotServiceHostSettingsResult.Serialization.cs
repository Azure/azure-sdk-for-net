// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.BotService.Models
{
    public partial class BotServiceHostSettingsResult : IUtf8JsonSerializable, IModelJsonSerializable<BotServiceHostSettingsResult>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<BotServiceHostSettingsResult>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<BotServiceHostSettingsResult>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<BotServiceHostSettingsResult>(this, options.Format);

            writer.WriteStartObject();
            if (Optional.IsDefined(OAuthUri))
            {
                writer.WritePropertyName("OAuthUrl"u8);
                writer.WriteStringValue(OAuthUri.AbsoluteUri);
            }
            if (Optional.IsDefined(ToBotFromChannelOpenIdMetadataUri))
            {
                writer.WritePropertyName("ToBotFromChannelOpenIdMetadataUrl"u8);
                writer.WriteStringValue(ToBotFromChannelOpenIdMetadataUri.AbsoluteUri);
            }
            if (Optional.IsDefined(ToBotFromChannelTokenIssuer))
            {
                writer.WritePropertyName("ToBotFromChannelTokenIssuer"u8);
                writer.WriteStringValue(ToBotFromChannelTokenIssuer);
            }
            if (Optional.IsDefined(ToBotFromEmulatorOpenIdMetadataUri))
            {
                writer.WritePropertyName("ToBotFromEmulatorOpenIdMetadataUrl"u8);
                writer.WriteStringValue(ToBotFromEmulatorOpenIdMetadataUri.AbsoluteUri);
            }
            if (Optional.IsDefined(ToChannelFromBotLoginUri))
            {
                writer.WritePropertyName("ToChannelFromBotLoginUrl"u8);
                writer.WriteStringValue(ToChannelFromBotLoginUri.AbsoluteUri);
            }
            if (Optional.IsDefined(ToChannelFromBotOAuthScope))
            {
                writer.WritePropertyName("ToChannelFromBotOAuthScope"u8);
                writer.WriteStringValue(ToChannelFromBotOAuthScope);
            }
            if (Optional.IsDefined(ValidateAuthority))
            {
                writer.WritePropertyName("ValidateAuthority"u8);
                writer.WriteBooleanValue(ValidateAuthority.Value);
            }
            if (Optional.IsDefined(BotOpenIdMetadata))
            {
                writer.WritePropertyName("BotOpenIdMetadata"u8);
                writer.WriteStringValue(BotOpenIdMetadata);
            }
            if (_rawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _rawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static BotServiceHostSettingsResult DeserializeBotServiceHostSettingsResult(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<Uri> oAuthUrl = default;
            Optional<Uri> toBotFromChannelOpenIdMetadataUrl = default;
            Optional<string> toBotFromChannelTokenIssuer = default;
            Optional<Uri> toBotFromEmulatorOpenIdMetadataUrl = default;
            Optional<Uri> toChannelFromBotLoginUrl = default;
            Optional<string> toChannelFromBotOAuthScope = default;
            Optional<bool> validateAuthority = default;
            Optional<string> botOpenIdMetadata = default;
            Dictionary<string, BinaryData> rawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("OAuthUrl"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    oAuthUrl = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("ToBotFromChannelOpenIdMetadataUrl"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    toBotFromChannelOpenIdMetadataUrl = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("ToBotFromChannelTokenIssuer"u8))
                {
                    toBotFromChannelTokenIssuer = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ToBotFromEmulatorOpenIdMetadataUrl"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    toBotFromEmulatorOpenIdMetadataUrl = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("ToChannelFromBotLoginUrl"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    toChannelFromBotLoginUrl = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("ToChannelFromBotOAuthScope"u8))
                {
                    toChannelFromBotOAuthScope = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ValidateAuthority"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    validateAuthority = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("BotOpenIdMetadata"u8))
                {
                    botOpenIdMetadata = property.Value.GetString();
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    rawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new BotServiceHostSettingsResult(oAuthUrl.Value, toBotFromChannelOpenIdMetadataUrl.Value, toBotFromChannelTokenIssuer.Value, toBotFromEmulatorOpenIdMetadataUrl.Value, toChannelFromBotLoginUrl.Value, toChannelFromBotOAuthScope.Value, Optional.ToNullable(validateAuthority), botOpenIdMetadata.Value, rawData);
        }

        BotServiceHostSettingsResult IModelJsonSerializable<BotServiceHostSettingsResult>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<BotServiceHostSettingsResult>(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeBotServiceHostSettingsResult(doc.RootElement, options);
        }

        BinaryData IModelSerializable<BotServiceHostSettingsResult>.Serialize(ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<BotServiceHostSettingsResult>(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        BotServiceHostSettingsResult IModelSerializable<BotServiceHostSettingsResult>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<BotServiceHostSettingsResult>(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeBotServiceHostSettingsResult(doc.RootElement, options);
        }

        /// <summary> Converts a <see cref="BotServiceHostSettingsResult"/> into a <see cref="RequestContent"/>. </summary>
        /// <param name="model"> The <see cref="BotServiceHostSettingsResult"/> to convert. </param>
        public static implicit operator RequestContent(BotServiceHostSettingsResult model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        /// <summary> Converts a <see cref="Response"/> into a <see cref="BotServiceHostSettingsResult"/>. </summary>
        /// <param name="response"> The <see cref="Response"/> to convert. </param>
        public static explicit operator BotServiceHostSettingsResult(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeBotServiceHostSettingsResult(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
