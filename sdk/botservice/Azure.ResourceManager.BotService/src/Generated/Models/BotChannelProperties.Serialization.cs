// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.BotService.Models
{
    public partial class BotChannelProperties : IUtf8JsonSerializable, IModelJsonSerializable<BotChannelProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<BotChannelProperties>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<BotChannelProperties>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<BotChannelProperties>(this, options.Format);

            writer.WriteStartObject();
            writer.WritePropertyName("channelName"u8);
            writer.WriteStringValue(ChannelName);
            if (Optional.IsDefined(ETag))
            {
                if (ETag != null)
                {
                    writer.WritePropertyName("etag"u8);
                    writer.WriteStringValue(ETag.ToString());
                }
                else
                {
                    writer.WriteNull("etag");
                }
            }
            if (Optional.IsDefined(Location))
            {
                writer.WritePropertyName("location"u8);
                writer.WriteStringValue(Location.Value);
            }
            if (_rawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _rawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static BotChannelProperties DeserializeBotChannelProperties(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            if (element.TryGetProperty("channelName", out JsonElement discriminator))
            {
                switch (discriminator.GetString())
                {
                    case "AcsChatChannel": return AcsChatChannel.DeserializeAcsChatChannel(element);
                    case "AlexaChannel": return AlexaChannel.DeserializeAlexaChannel(element);
                    case "DirectLineChannel": return DirectLineChannel.DeserializeDirectLineChannel(element);
                    case "DirectLineSpeechChannel": return DirectLineSpeechChannel.DeserializeDirectLineSpeechChannel(element);
                    case "EmailChannel": return EmailChannel.DeserializeEmailChannel(element);
                    case "FacebookChannel": return FacebookChannel.DeserializeFacebookChannel(element);
                    case "KikChannel": return KikChannel.DeserializeKikChannel(element);
                    case "LineChannel": return LineChannel.DeserializeLineChannel(element);
                    case "M365Extensions": return M365Extensions.DeserializeM365Extensions(element);
                    case "MsTeamsChannel": return MsTeamsChannel.DeserializeMsTeamsChannel(element);
                    case "Omnichannel": return Omnichannel.DeserializeOmnichannel(element);
                    case "OutlookChannel": return OutlookChannel.DeserializeOutlookChannel(element);
                    case "SearchAssistant": return SearchAssistant.DeserializeSearchAssistant(element);
                    case "SkypeChannel": return SkypeChannel.DeserializeSkypeChannel(element);
                    case "SlackChannel": return SlackChannel.DeserializeSlackChannel(element);
                    case "SmsChannel": return SmsChannel.DeserializeSmsChannel(element);
                    case "TelegramChannel": return TelegramChannel.DeserializeTelegramChannel(element);
                    case "TelephonyChannel": return TelephonyChannel.DeserializeTelephonyChannel(element);
                    case "WebChatChannel": return WebChatChannel.DeserializeWebChatChannel(element);
                }
            }

            // Unknown type found so we will deserialize the base properties only
            string channelName = default;
            Optional<ETag?> etag = default;
            Optional<string> provisioningState = default;
            Optional<AzureLocation> location = default;
            Dictionary<string, BinaryData> rawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("channelName"u8))
                {
                    channelName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("etag"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        etag = null;
                        continue;
                    }
                    etag = new ETag(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("provisioningState"u8))
                {
                    provisioningState = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("location"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    location = new AzureLocation(property.Value.GetString());
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    rawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new UnknownChannel(channelName, Optional.ToNullable(etag), provisioningState.Value, Optional.ToNullable(location), rawData);
        }

        BotChannelProperties IModelJsonSerializable<BotChannelProperties>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<BotChannelProperties>(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeBotChannelProperties(doc.RootElement, options);
        }

        BinaryData IModelSerializable<BotChannelProperties>.Serialize(ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<BotChannelProperties>(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        BotChannelProperties IModelSerializable<BotChannelProperties>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<BotChannelProperties>(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeBotChannelProperties(doc.RootElement, options);
        }

        /// <summary> Converts a <see cref="BotChannelProperties"/> into a <see cref="RequestContent"/>. </summary>
        /// <param name="model"> The <see cref="BotChannelProperties"/> to convert. </param>
        public static implicit operator RequestContent(BotChannelProperties model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        /// <summary> Converts a <see cref="Response"/> into a <see cref="BotChannelProperties"/>. </summary>
        /// <param name="response"> The <see cref="Response"/> to convert. </param>
        public static explicit operator BotChannelProperties(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeBotChannelProperties(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
