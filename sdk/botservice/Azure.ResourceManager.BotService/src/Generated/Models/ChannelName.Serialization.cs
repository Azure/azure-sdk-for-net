// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.ResourceManager.BotService.Models
{
    internal static partial class ChannelNameExtensions
    {
        public static string ToSerialString(this ChannelName value) => value switch
        {
            ChannelName.AlexaChannel => "AlexaChannel",
            ChannelName.FacebookChannel => "FacebookChannel",
            ChannelName.EmailChannel => "EmailChannel",
            ChannelName.KikChannel => "KikChannel",
            ChannelName.TelegramChannel => "TelegramChannel",
            ChannelName.SlackChannel => "SlackChannel",
            ChannelName.MsTeamsChannel => "MsTeamsChannel",
            ChannelName.SkypeChannel => "SkypeChannel",
            ChannelName.WebChatChannel => "WebChatChannel",
            ChannelName.DirectLineChannel => "DirectLineChannel",
            ChannelName.SmsChannel => "SmsChannel",
            ChannelName.LineChannel => "LineChannel",
            ChannelName.DirectLineSpeechChannel => "DirectLineSpeechChannel",
            ChannelName.OutlookChannel => "OutlookChannel",
            ChannelName.Omnichannel => "Omnichannel",
            ChannelName.TelephonyChannel => "TelephonyChannel",
            _ => throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown ChannelName value.")
        };

        public static ChannelName ToChannelName(this string value)
        {
            if (string.Equals(value, "AlexaChannel", StringComparison.InvariantCultureIgnoreCase)) return ChannelName.AlexaChannel;
            if (string.Equals(value, "FacebookChannel", StringComparison.InvariantCultureIgnoreCase)) return ChannelName.FacebookChannel;
            if (string.Equals(value, "EmailChannel", StringComparison.InvariantCultureIgnoreCase)) return ChannelName.EmailChannel;
            if (string.Equals(value, "KikChannel", StringComparison.InvariantCultureIgnoreCase)) return ChannelName.KikChannel;
            if (string.Equals(value, "TelegramChannel", StringComparison.InvariantCultureIgnoreCase)) return ChannelName.TelegramChannel;
            if (string.Equals(value, "SlackChannel", StringComparison.InvariantCultureIgnoreCase)) return ChannelName.SlackChannel;
            if (string.Equals(value, "MsTeamsChannel", StringComparison.InvariantCultureIgnoreCase)) return ChannelName.MsTeamsChannel;
            if (string.Equals(value, "SkypeChannel", StringComparison.InvariantCultureIgnoreCase)) return ChannelName.SkypeChannel;
            if (string.Equals(value, "WebChatChannel", StringComparison.InvariantCultureIgnoreCase)) return ChannelName.WebChatChannel;
            if (string.Equals(value, "DirectLineChannel", StringComparison.InvariantCultureIgnoreCase)) return ChannelName.DirectLineChannel;
            if (string.Equals(value, "SmsChannel", StringComparison.InvariantCultureIgnoreCase)) return ChannelName.SmsChannel;
            if (string.Equals(value, "LineChannel", StringComparison.InvariantCultureIgnoreCase)) return ChannelName.LineChannel;
            if (string.Equals(value, "DirectLineSpeechChannel", StringComparison.InvariantCultureIgnoreCase)) return ChannelName.DirectLineSpeechChannel;
            if (string.Equals(value, "OutlookChannel", StringComparison.InvariantCultureIgnoreCase)) return ChannelName.OutlookChannel;
            if (string.Equals(value, "Omnichannel", StringComparison.InvariantCultureIgnoreCase)) return ChannelName.Omnichannel;
            if (string.Equals(value, "TelephonyChannel", StringComparison.InvariantCultureIgnoreCase)) return ChannelName.TelephonyChannel;
            throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown ChannelName value.");
        }
    }
}
