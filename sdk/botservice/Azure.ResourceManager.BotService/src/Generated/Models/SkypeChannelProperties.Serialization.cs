// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.BotService.Models
{
    public partial class SkypeChannelProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(IsMessagingEnabled))
            {
                writer.WritePropertyName("enableMessaging"u8);
                writer.WriteBooleanValue(IsMessagingEnabled.Value);
            }
            if (Optional.IsDefined(IsMediaCardsEnabled))
            {
                writer.WritePropertyName("enableMediaCards"u8);
                writer.WriteBooleanValue(IsMediaCardsEnabled.Value);
            }
            if (Optional.IsDefined(IsVideoEnabled))
            {
                writer.WritePropertyName("enableVideo"u8);
                writer.WriteBooleanValue(IsVideoEnabled.Value);
            }
            if (Optional.IsDefined(IsCallingEnabled))
            {
                writer.WritePropertyName("enableCalling"u8);
                writer.WriteBooleanValue(IsCallingEnabled.Value);
            }
            if (Optional.IsDefined(IsScreenSharingEnabled))
            {
                writer.WritePropertyName("enableScreenSharing"u8);
                writer.WriteBooleanValue(IsScreenSharingEnabled.Value);
            }
            if (Optional.IsDefined(IsGroupsEnabled))
            {
                writer.WritePropertyName("enableGroups"u8);
                writer.WriteBooleanValue(IsGroupsEnabled.Value);
            }
            if (Optional.IsDefined(GroupsMode))
            {
                writer.WritePropertyName("groupsMode"u8);
                writer.WriteStringValue(GroupsMode);
            }
            if (Optional.IsDefined(CallingWebHook))
            {
                writer.WritePropertyName("callingWebHook"u8);
                writer.WriteStringValue(CallingWebHook);
            }
            if (Optional.IsDefined(IncomingCallRoute))
            {
                writer.WritePropertyName("incomingCallRoute"u8);
                writer.WriteStringValue(IncomingCallRoute);
            }
            writer.WritePropertyName("isEnabled"u8);
            writer.WriteBooleanValue(IsEnabled);
            writer.WriteEndObject();
        }

        internal static SkypeChannelProperties DeserializeSkypeChannelProperties(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<bool> enableMessaging = default;
            Optional<bool> enableMediaCards = default;
            Optional<bool> enableVideo = default;
            Optional<bool> enableCalling = default;
            Optional<bool> enableScreenSharing = default;
            Optional<bool> enableGroups = default;
            Optional<string> groupsMode = default;
            Optional<string> callingWebHook = default;
            Optional<string> incomingCallRoute = default;
            bool isEnabled = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("enableMessaging"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    enableMessaging = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("enableMediaCards"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    enableMediaCards = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("enableVideo"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    enableVideo = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("enableCalling"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    enableCalling = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("enableScreenSharing"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    enableScreenSharing = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("enableGroups"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    enableGroups = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("groupsMode"u8))
                {
                    groupsMode = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("callingWebHook"u8))
                {
                    callingWebHook = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("incomingCallRoute"u8))
                {
                    incomingCallRoute = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("isEnabled"u8))
                {
                    isEnabled = property.Value.GetBoolean();
                    continue;
                }
            }
            return new SkypeChannelProperties(Optional.ToNullable(enableMessaging), Optional.ToNullable(enableMediaCards), Optional.ToNullable(enableVideo), Optional.ToNullable(enableCalling), Optional.ToNullable(enableScreenSharing), Optional.ToNullable(enableGroups), groupsMode.Value, callingWebHook.Value, incomingCallRoute.Value, isEnabled);
        }
    }
}
