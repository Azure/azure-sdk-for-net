// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Maintenance
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ConfigurationAssignmentsForSubscriptionsOperations.
    /// </summary>
    public static partial class ConfigurationAssignmentsForSubscriptionsOperationsExtensions
    {
            /// <summary>
            /// Get configuration assignment
            /// </summary>
            /// <remarks>
            /// Get configuration assignment for resource..
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='configurationAssignmentName'>
            /// Configuration assignment name
            /// </param>
            public static ConfigurationAssignment Get(this IConfigurationAssignmentsForSubscriptionsOperations operations, string configurationAssignmentName)
            {
                return operations.GetAsync(configurationAssignmentName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get configuration assignment
            /// </summary>
            /// <remarks>
            /// Get configuration assignment for resource..
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='configurationAssignmentName'>
            /// Configuration assignment name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ConfigurationAssignment> GetAsync(this IConfigurationAssignmentsForSubscriptionsOperations operations, string configurationAssignmentName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(configurationAssignmentName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create configuration assignment
            /// </summary>
            /// <remarks>
            /// Register configuration for resource.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='configurationAssignmentName'>
            /// Configuration assignment name
            /// </param>
            /// <param name='configurationAssignment'>
            /// The configurationAssignment
            /// </param>
            public static ConfigurationAssignment CreateOrUpdate(this IConfigurationAssignmentsForSubscriptionsOperations operations, string configurationAssignmentName, ConfigurationAssignment configurationAssignment)
            {
                return operations.CreateOrUpdateAsync(configurationAssignmentName, configurationAssignment).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create configuration assignment
            /// </summary>
            /// <remarks>
            /// Register configuration for resource.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='configurationAssignmentName'>
            /// Configuration assignment name
            /// </param>
            /// <param name='configurationAssignment'>
            /// The configurationAssignment
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ConfigurationAssignment> CreateOrUpdateAsync(this IConfigurationAssignmentsForSubscriptionsOperations operations, string configurationAssignmentName, ConfigurationAssignment configurationAssignment, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(configurationAssignmentName, configurationAssignment, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create configuration assignment
            /// </summary>
            /// <remarks>
            /// Register configuration for resource.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='configurationAssignmentName'>
            /// Configuration assignment name
            /// </param>
            /// <param name='configurationAssignment'>
            /// The configurationAssignment
            /// </param>
            public static ConfigurationAssignment UpdateMethod(this IConfigurationAssignmentsForSubscriptionsOperations operations, string configurationAssignmentName, ConfigurationAssignment configurationAssignment)
            {
                return operations.UpdateMethodAsync(configurationAssignmentName, configurationAssignment).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create configuration assignment
            /// </summary>
            /// <remarks>
            /// Register configuration for resource.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='configurationAssignmentName'>
            /// Configuration assignment name
            /// </param>
            /// <param name='configurationAssignment'>
            /// The configurationAssignment
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ConfigurationAssignment> UpdateMethodAsync(this IConfigurationAssignmentsForSubscriptionsOperations operations, string configurationAssignmentName, ConfigurationAssignment configurationAssignment, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateMethodWithHttpMessagesAsync(configurationAssignmentName, configurationAssignment, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Unregister configuration for resource
            /// </summary>
            /// <remarks>
            /// Unregister configuration for resource.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='configurationAssignmentName'>
            /// Unique configuration assignment name
            /// </param>
            public static ConfigurationAssignment Delete(this IConfigurationAssignmentsForSubscriptionsOperations operations, string configurationAssignmentName)
            {
                return operations.DeleteAsync(configurationAssignmentName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Unregister configuration for resource
            /// </summary>
            /// <remarks>
            /// Unregister configuration for resource.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='configurationAssignmentName'>
            /// Unique configuration assignment name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ConfigurationAssignment> DeleteAsync(this IConfigurationAssignmentsForSubscriptionsOperations operations, string configurationAssignmentName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(configurationAssignmentName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
