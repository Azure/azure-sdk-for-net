// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Maintenance.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Maintenance configuration record type
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class MaintenanceConfiguration : Resource
    {
        /// <summary>
        /// Initializes a new instance of the MaintenanceConfiguration class.
        /// </summary>
        public MaintenanceConfiguration()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MaintenanceConfiguration class.
        /// </summary>
        /// <param name="id">Fully qualified identifier of the resource</param>
        /// <param name="name">Name of the resource</param>
        /// <param name="type">Type of the resource</param>
        /// <param name="systemData">Azure Resource Manager metadata containing
        /// createdBy and modifiedBy information.</param>
        /// <param name="location">Gets or sets location of the
        /// resource</param>
        /// <param name="tags">Gets or sets tags of the resource</param>
        /// <param name="namespaceProperty">Gets or sets namespace of the
        /// resource</param>
        /// <param name="extensionProperties">Gets or sets extensionProperties
        /// of the maintenanceConfiguration</param>
        /// <param name="maintenanceScope">Gets or sets maintenanceScope of the
        /// configuration. Possible values include: 'Host', 'OSImage',
        /// 'Extension', 'InGuestPatch', 'SQLDB', 'SQLManagedInstance'</param>
        /// <param name="startDateTime">Effective start date of the maintenance
        /// window in YYYY-MM-DD hh:mm format. The start date can be set to
        /// either the current date or future date. The window will be created
        /// in the time zone provided and adjusted to daylight savings
        /// according to that time zone.</param>
        /// <param name="expirationDateTime">Effective expiration date of the
        /// maintenance window in YYYY-MM-DD hh:mm format. The window will be
        /// created in the time zone provided and adjusted to daylight savings
        /// according to that time zone. Expiration date must be set to a
        /// future date. If not provided, it will be set to the maximum
        /// datetime 9999-12-31 23:59:59.</param>
        /// <param name="duration">Duration of the maintenance window in HH:mm
        /// format. If not provided, default value will be used based on
        /// maintenance scope provided. Example: 05:00.</param>
        /// <param name="timeZone">Name of the timezone. List of timezones can
        /// be obtained by executing
        /// [System.TimeZoneInfo]::GetSystemTimeZones() in PowerShell. Example:
        /// Pacific Standard Time, UTC, W. Europe Standard Time, Korea Standard
        /// Time, Cen. Australia Standard Time.</param>
        /// <param name="recurEvery">Rate at which a Maintenance window is
        /// expected to recur. The rate can be expressed as daily, weekly, or
        /// monthly schedules. Daily schedule are formatted as recurEvery:
        /// [Frequency as integer]['Day(s)']. If no frequency is provided, the
        /// default frequency is 1. Daily schedule examples are recurEvery:
        /// Day, recurEvery: 3Days.  Weekly schedule are formatted as
        /// recurEvery: [Frequency as integer]['Week(s)'] [Optional comma
        /// separated list of weekdays Monday-Sunday]. Weekly schedule examples
        /// are recurEvery: 3Weeks, recurEvery: Week Saturday,Sunday. Monthly
        /// schedules are formatted as [Frequency as integer]['Month(s)']
        /// [Comma separated list of month days] or [Frequency as
        /// integer]['Month(s)'] [Week of Month (First, Second, Third, Fourth,
        /// Last)] [Weekday Monday-Sunday]. Monthly schedule examples are
        /// recurEvery: Month, recurEvery: 2Months, recurEvery: Month
        /// day23,day24, recurEvery: Month Last Sunday, recurEvery: Month
        /// Fourth Monday.</param>
        /// <param name="visibility">Gets or sets the visibility of the
        /// configuration. The default value is 'Custom'. Possible values
        /// include: 'Custom', 'Public'</param>
        public MaintenanceConfiguration(string id = default(string), string name = default(string), string type = default(string), SystemData systemData = default(SystemData), string location = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string namespaceProperty = default(string), IDictionary<string, string> extensionProperties = default(IDictionary<string, string>), string maintenanceScope = default(string), string startDateTime = default(string), string expirationDateTime = default(string), string duration = default(string), string timeZone = default(string), string recurEvery = default(string), string visibility = default(string))
            : base(id, name, type, systemData)
        {
            Location = location;
            Tags = tags;
            NamespaceProperty = namespaceProperty;
            ExtensionProperties = extensionProperties;
            MaintenanceScope = maintenanceScope;
            StartDateTime = startDateTime;
            ExpirationDateTime = expirationDateTime;
            Duration = duration;
            TimeZone = timeZone;
            RecurEvery = recurEvery;
            Visibility = visibility;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets location of the resource
        /// </summary>
        [JsonProperty(PropertyName = "location")]
        public string Location { get; set; }

        /// <summary>
        /// Gets or sets tags of the resource
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IDictionary<string, string> Tags { get; set; }

        /// <summary>
        /// Gets or sets namespace of the resource
        /// </summary>
        [JsonProperty(PropertyName = "properties.namespace")]
        public string NamespaceProperty { get; set; }

        /// <summary>
        /// Gets or sets extensionProperties of the maintenanceConfiguration
        /// </summary>
        [JsonProperty(PropertyName = "properties.extensionProperties")]
        public IDictionary<string, string> ExtensionProperties { get; set; }

        /// <summary>
        /// Gets or sets maintenanceScope of the configuration. Possible values
        /// include: 'Host', 'OSImage', 'Extension', 'InGuestPatch', 'SQLDB',
        /// 'SQLManagedInstance'
        /// </summary>
        [JsonProperty(PropertyName = "properties.maintenanceScope")]
        public string MaintenanceScope { get; set; }

        /// <summary>
        /// Gets or sets effective start date of the maintenance window in
        /// YYYY-MM-DD hh:mm format. The start date can be set to either the
        /// current date or future date. The window will be created in the time
        /// zone provided and adjusted to daylight savings according to that
        /// time zone.
        /// </summary>
        [JsonProperty(PropertyName = "properties.maintenanceWindow.startDateTime")]
        public string StartDateTime { get; set; }

        /// <summary>
        /// Gets or sets effective expiration date of the maintenance window in
        /// YYYY-MM-DD hh:mm format. The window will be created in the time
        /// zone provided and adjusted to daylight savings according to that
        /// time zone. Expiration date must be set to a future date. If not
        /// provided, it will be set to the maximum datetime 9999-12-31
        /// 23:59:59.
        /// </summary>
        [JsonProperty(PropertyName = "properties.maintenanceWindow.expirationDateTime")]
        public string ExpirationDateTime { get; set; }

        /// <summary>
        /// Gets or sets duration of the maintenance window in HH:mm format. If
        /// not provided, default value will be used based on maintenance scope
        /// provided. Example: 05:00.
        /// </summary>
        [JsonProperty(PropertyName = "properties.maintenanceWindow.duration")]
        public string Duration { get; set; }

        /// <summary>
        /// Gets or sets name of the timezone. List of timezones can be
        /// obtained by executing [System.TimeZoneInfo]::GetSystemTimeZones()
        /// in PowerShell. Example: Pacific Standard Time, UTC, W. Europe
        /// Standard Time, Korea Standard Time, Cen. Australia Standard Time.
        /// </summary>
        [JsonProperty(PropertyName = "properties.maintenanceWindow.timeZone")]
        public string TimeZone { get; set; }

        /// <summary>
        /// Gets or sets rate at which a Maintenance window is expected to
        /// recur. The rate can be expressed as daily, weekly, or monthly
        /// schedules. Daily schedule are formatted as recurEvery: [Frequency
        /// as integer]['Day(s)']. If no frequency is provided, the default
        /// frequency is 1. Daily schedule examples are recurEvery: Day,
        /// recurEvery: 3Days.  Weekly schedule are formatted as recurEvery:
        /// [Frequency as integer]['Week(s)'] [Optional comma separated list of
        /// weekdays Monday-Sunday]. Weekly schedule examples are recurEvery:
        /// 3Weeks, recurEvery: Week Saturday,Sunday. Monthly schedules are
        /// formatted as [Frequency as integer]['Month(s)'] [Comma separated
        /// list of month days] or [Frequency as integer]['Month(s)'] [Week of
        /// Month (First, Second, Third, Fourth, Last)] [Weekday
        /// Monday-Sunday]. Monthly schedule examples are recurEvery: Month,
        /// recurEvery: 2Months, recurEvery: Month day23,day24, recurEvery:
        /// Month Last Sunday, recurEvery: Month Fourth Monday.
        /// </summary>
        [JsonProperty(PropertyName = "properties.maintenanceWindow.recurEvery")]
        public string RecurEvery { get; set; }

        /// <summary>
        /// Gets or sets the visibility of the configuration. The default value
        /// is 'Custom'. Possible values include: 'Custom', 'Public'
        /// </summary>
        [JsonProperty(PropertyName = "properties.visibility")]
        public string Visibility { get; set; }

    }
}
