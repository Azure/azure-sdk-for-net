// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.Maintenance;
using Azure.ResourceManager.Maintenance.Models;

namespace Azure.ResourceManager.Maintenance.Samples
{
    public partial class Sample_MaintenanceResourceGroupConfigurationAssignmentResource
    {
        // ConfigurationAssignmentsForResourceGroup_Get
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_ConfigurationAssignmentsForResourceGroupGet()
        {
            // Generated from example definition: specification/maintenance/resource-manager/Microsoft.Maintenance/stable/2023-04-01/examples/ConfigurationAssignmentsForResourceGroup_Get.json
            // this example is just showing the usage of "ConfigurationAssignmentsForResourceGroup" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this MaintenanceResourceGroupConfigurationAssignmentResource created on azure
            // for more information of creating MaintenanceResourceGroupConfigurationAssignmentResource, please refer to the document of MaintenanceResourceGroupConfigurationAssignmentResource
            string subscriptionId = "5b4b650e-28b9-4790-b3ab-ddbd88d727c4";
            string resourceGroupName = "examplerg";
            string configurationAssignmentName = "workervmConfiguration";
            ResourceIdentifier maintenanceResourceGroupConfigurationAssignmentResourceId = MaintenanceResourceGroupConfigurationAssignmentResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, configurationAssignmentName);
            MaintenanceResourceGroupConfigurationAssignmentResource maintenanceResourceGroupConfigurationAssignment = client.GetMaintenanceResourceGroupConfigurationAssignmentResource(maintenanceResourceGroupConfigurationAssignmentResourceId);

            // invoke the operation
            string resourceGroupName0 = "examplerg";
            string configurationAssignmentName0 = "workervmConfiguration";
            MaintenanceResourceGroupConfigurationAssignmentResource result = await maintenanceResourceGroupConfigurationAssignment.GetAsync(resourceGroupName0, configurationAssignmentName0);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            MaintenanceConfigurationAssignmentData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // ConfigurationAssignmentsForResourceGroup_CreateOrUpdate
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_ConfigurationAssignmentsForResourceGroupCreateOrUpdate()
        {
            // Generated from example definition: specification/maintenance/resource-manager/Microsoft.Maintenance/stable/2023-04-01/examples/ConfigurationAssignmentsForResourceGroup_UpdateForResource.json
            // this example is just showing the usage of "ConfigurationAssignmentsForResourceGroup_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this MaintenanceResourceGroupConfigurationAssignmentResource created on azure
            // for more information of creating MaintenanceResourceGroupConfigurationAssignmentResource, please refer to the document of MaintenanceResourceGroupConfigurationAssignmentResource
            string subscriptionId = "5b4b650e-28b9-4790-b3ab-ddbd88d727c4";
            string resourceGroupName = "examplerg";
            string configurationAssignmentName = "workervmConfiguration";
            ResourceIdentifier maintenanceResourceGroupConfigurationAssignmentResourceId = MaintenanceResourceGroupConfigurationAssignmentResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, configurationAssignmentName);
            MaintenanceResourceGroupConfigurationAssignmentResource maintenanceResourceGroupConfigurationAssignment = client.GetMaintenanceResourceGroupConfigurationAssignmentResource(maintenanceResourceGroupConfigurationAssignmentResourceId);

            // invoke the operation
            string resourceGroupName0 = "examplerg";
            string configurationAssignmentName0 = "workervmConfiguration";
            MaintenanceConfigurationAssignmentData data = new MaintenanceConfigurationAssignmentData()
            {
                MaintenanceConfigurationId = new ResourceIdentifier("/subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourcegroups/examplerg/providers/Microsoft.Maintenance/maintenanceConfigurations/configuration1"),
                ResourceTypes =
{
"Microsoft.HybridCompute/machines","Microsoft.Compute/virtualMachines"
},
                Locations =
{
"Japan East","UK South"
},
                TagSettings = new TagSettingsProperties()
                {
                    Tags =
{
["tag1"] = new string[]
{
"tag1Value1","tag1Value2","tag1Value3"
},
["tag2"] = new string[]
{
"tag2Value1","tag2Value2","tag2Value3"
},
},
                    FilterOperator = TagOperator.Any,
                },
            };
            MaintenanceResourceGroupConfigurationAssignmentResource result = await maintenanceResourceGroupConfigurationAssignment.UpdateAsync(resourceGroupName0, configurationAssignmentName0, data);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            MaintenanceConfigurationAssignmentData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // ConfigurationAssignmentsForResourceGroup_Delete
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_ConfigurationAssignmentsForResourceGroupDelete()
        {
            // Generated from example definition: specification/maintenance/resource-manager/Microsoft.Maintenance/stable/2023-04-01/examples/ConfigurationAssignmentsForResourceGroup_Delete.json
            // this example is just showing the usage of "ConfigurationAssignmentsForResourceGroup_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this MaintenanceResourceGroupConfigurationAssignmentResource created on azure
            // for more information of creating MaintenanceResourceGroupConfigurationAssignmentResource, please refer to the document of MaintenanceResourceGroupConfigurationAssignmentResource
            string subscriptionId = "5b4b650e-28b9-4790-b3ab-ddbd88d727c4";
            string resourceGroupName = "examplerg";
            string configurationAssignmentName = "workervmConfiguration";
            ResourceIdentifier maintenanceResourceGroupConfigurationAssignmentResourceId = MaintenanceResourceGroupConfigurationAssignmentResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, configurationAssignmentName);
            MaintenanceResourceGroupConfigurationAssignmentResource maintenanceResourceGroupConfigurationAssignment = client.GetMaintenanceResourceGroupConfigurationAssignmentResource(maintenanceResourceGroupConfigurationAssignmentResourceId);

            // invoke the operation
            string resourceGroupName0 = "examplerg";
            string configurationAssignmentName0 = "workervmConfiguration";
            ArmOperation<MaintenanceResourceGroupConfigurationAssignmentResource> lro = await maintenanceResourceGroupConfigurationAssignment.DeleteAsync(WaitUntil.Completed, resourceGroupName0, configurationAssignmentName0);
            MaintenanceResourceGroupConfigurationAssignmentResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            MaintenanceConfigurationAssignmentData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
