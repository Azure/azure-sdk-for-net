// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Maintenance.Models
{
    /// <summary> The impact type. </summary>
    public readonly partial struct ImpactType : IEquatable<ImpactType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ImpactType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ImpactType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NoneValue = "None";
        private const string FreezeValue = "Freeze";
        private const string RestartValue = "Restart";
        private const string RedeployValue = "Redeploy";

        /// <summary> Pending updates has no impact on resource. </summary>
        public static ImpactType None { get; } = new ImpactType(NoneValue);
        /// <summary> Pending updates can freeze network or disk io operation on resource. </summary>
        public static ImpactType Freeze { get; } = new ImpactType(FreezeValue);
        /// <summary> Pending updates can cause resource to restart. </summary>
        public static ImpactType Restart { get; } = new ImpactType(RestartValue);
        /// <summary> Pending updates can redeploy resource. </summary>
        public static ImpactType Redeploy { get; } = new ImpactType(RedeployValue);
        /// <summary> Determines if two <see cref="ImpactType"/> values are the same. </summary>
        public static bool operator ==(ImpactType left, ImpactType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ImpactType"/> values are not the same. </summary>
        public static bool operator !=(ImpactType left, ImpactType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ImpactType"/>. </summary>
        public static implicit operator ImpactType(string value) => new ImpactType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ImpactType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ImpactType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
