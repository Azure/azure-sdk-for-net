// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Maintenance.Models
{
    /// <summary> The status. </summary>
    public readonly partial struct UpdateStatus : IEquatable<UpdateStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="UpdateStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public UpdateStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PendingValue = "Pending";
        private const string InProgressValue = "InProgress";
        private const string CompletedValue = "Completed";
        private const string RetryNowValue = "RetryNow";
        private const string RetryLaterValue = "RetryLater";

        /// <summary> There are pending updates to be installed. </summary>
        public static UpdateStatus Pending { get; } = new UpdateStatus(PendingValue);
        /// <summary> Updates installation are in progress. </summary>
        public static UpdateStatus InProgress { get; } = new UpdateStatus(InProgressValue);
        /// <summary> All updates are successfully applied. </summary>
        public static UpdateStatus Completed { get; } = new UpdateStatus(CompletedValue);
        /// <summary> Updates installation failed but are ready to retry again. </summary>
        public static UpdateStatus RetryNow { get; } = new UpdateStatus(RetryNowValue);
        /// <summary> Updates installation failed and should be retried later. </summary>
        public static UpdateStatus RetryLater { get; } = new UpdateStatus(RetryLaterValue);
        /// <summary> Determines if two <see cref="UpdateStatus"/> values are the same. </summary>
        public static bool operator ==(UpdateStatus left, UpdateStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="UpdateStatus"/> values are not the same. </summary>
        public static bool operator !=(UpdateStatus left, UpdateStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="UpdateStatus"/>. </summary>
        public static implicit operator UpdateStatus(string value) => new UpdateStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is UpdateStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(UpdateStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
