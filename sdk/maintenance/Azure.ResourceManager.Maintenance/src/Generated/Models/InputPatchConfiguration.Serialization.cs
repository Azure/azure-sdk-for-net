// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Maintenance.Models
{
    public partial class InputPatchConfiguration : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(RebootSetting))
            {
                writer.WritePropertyName("rebootSetting");
                writer.WriteStringValue(RebootSetting.Value.ToString());
            }
            if (Optional.IsDefined(WindowsParameters))
            {
                writer.WritePropertyName("windowsParameters");
                writer.WriteObjectValue(WindowsParameters);
            }
            if (Optional.IsDefined(LinuxParameters))
            {
                writer.WritePropertyName("linuxParameters");
                writer.WriteObjectValue(LinuxParameters);
            }
            writer.WritePropertyName("tasks");
            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(PreTasks))
            {
                writer.WritePropertyName("preTasks");
                writer.WriteStartArray();
                foreach (var item in PreTasks)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(PostTasks))
            {
                writer.WritePropertyName("postTasks");
                writer.WriteStartArray();
                foreach (var item in PostTasks)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static InputPatchConfiguration DeserializeInputPatchConfiguration(JsonElement element)
        {
            Optional<RebootOption> rebootSetting = default;
            Optional<InputWindowsParameters> windowsParameters = default;
            Optional<InputLinuxParameters> linuxParameters = default;
            Optional<IList<TaskProperties>> preTasks = default;
            Optional<IList<TaskProperties>> postTasks = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("rebootSetting"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    rebootSetting = new RebootOption(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("windowsParameters"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    windowsParameters = InputWindowsParameters.DeserializeInputWindowsParameters(property.Value);
                    continue;
                }
                if (property.NameEquals("linuxParameters"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    linuxParameters = InputLinuxParameters.DeserializeInputLinuxParameters(property.Value);
                    continue;
                }
                if (property.NameEquals("tasks"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("preTasks"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<TaskProperties> array = new List<TaskProperties>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(TaskProperties.DeserializeTaskProperties(item));
                            }
                            preTasks = array;
                            continue;
                        }
                        if (property0.NameEquals("postTasks"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<TaskProperties> array = new List<TaskProperties>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(TaskProperties.DeserializeTaskProperties(item));
                            }
                            postTasks = array;
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new InputPatchConfiguration(Optional.ToNullable(rebootSetting), windowsParameters.Value, linuxParameters.Value, Optional.ToList(preTasks), Optional.ToList(postTasks));
        }
    }
}
