// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Maintenance;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.Maintenance.Models
{
    /// <summary> Model factory for generated models. </summary>
    public static partial class MaintenanceModelFactory
    {
        /// <summary> Initializes a new instance of MaintenanceConfigurationData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="namespace"> Gets or sets namespace of the resource. </param>
        /// <param name="extensionProperties"> Gets or sets extensionProperties of the maintenanceConfiguration. </param>
        /// <param name="maintenanceScope"> Gets or sets maintenanceScope of the configuration. </param>
        /// <param name="visibility"> Gets or sets the visibility of the configuration. The default value is &apos;Custom&apos;. </param>
        /// <param name="installPatches"> The input parameters to be passed to the patch run operation. </param>
        /// <param name="startDateTime"> Effective start date of the maintenance window in YYYY-MM-DD hh:mm format. The start date can be set to either the current date or future date. The window will be created in the time zone provided and adjusted to daylight savings according to that time zone. </param>
        /// <param name="expirationDateTime"> Effective expiration date of the maintenance window in YYYY-MM-DD hh:mm format. The window will be created in the time zone provided and adjusted to daylight savings according to that time zone. Expiration date must be set to a future date. If not provided, it will be set to the maximum datetime 9999-12-31 23:59:59. </param>
        /// <param name="duration"> Duration of the maintenance window in HH:mm format. If not provided, default value will be used based on maintenance scope provided. Example: 05:00. </param>
        /// <param name="timeZone"> Name of the timezone. List of timezones can be obtained by executing [System.TimeZoneInfo]::GetSystemTimeZones() in PowerShell. Example: Pacific Standard Time, UTC, W. Europe Standard Time, Korea Standard Time, Cen. Australia Standard Time. </param>
        /// <param name="recurEvery"> Rate at which a Maintenance window is expected to recur. The rate can be expressed as daily, weekly, or monthly schedules. Daily schedule are formatted as recurEvery: [Frequency as integer][&apos;Day(s)&apos;]. If no frequency is provided, the default frequency is 1. Daily schedule examples are recurEvery: Day, recurEvery: 3Days.  Weekly schedule are formatted as recurEvery: [Frequency as integer][&apos;Week(s)&apos;] [Optional comma separated list of weekdays Monday-Sunday]. Weekly schedule examples are recurEvery: 3Weeks, recurEvery: Week Saturday,Sunday. Monthly schedules are formatted as [Frequency as integer][&apos;Month(s)&apos;] [Comma separated list of month days] or [Frequency as integer][&apos;Month(s)&apos;] [Week of Month (First, Second, Third, Fourth, Last)] [Weekday Monday-Sunday] [Optional Offset(No. of days)]. Offset value must be between -6 to 6 inclusive. Monthly schedule examples are recurEvery: Month, recurEvery: 2Months, recurEvery: Month day23,day24, recurEvery: Month Last Sunday, recurEvery: Month Fourth Monday, recurEvery: Month Last Sunday Offset-3, recurEvery: Month Third Sunday Offset6. </param>
        /// <returns> A new <see cref="Maintenance.MaintenanceConfigurationData"/> instance for mocking. </returns>
        public static MaintenanceConfigurationData MaintenanceConfigurationData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string @namespace = null, IDictionary<string, string> extensionProperties = null, MaintenanceScope? maintenanceScope = null, Visibility? visibility = null, InputPatchConfiguration installPatches = null, string startDateTime = null, string expirationDateTime = null, TimeSpan? duration = null, string timeZone = null, string recurEvery = null)
        {
            tags ??= new Dictionary<string, string>();
            extensionProperties ??= new Dictionary<string, string>();

            return new MaintenanceConfigurationData(id, name, resourceType, systemData, tags, location, @namespace, extensionProperties, maintenanceScope, visibility, installPatches, startDateTime, expirationDateTime, duration, timeZone, recurEvery);
        }

        /// <summary> Initializes a new instance of InputPatchConfiguration. </summary>
        /// <param name="rebootSetting"> Possible reboot preference as defined by the user based on which it would be decided to reboot the machine or not after the patch operation is completed. </param>
        /// <param name="windowsParameters"> Input parameters specific to patching a Windows machine. For Linux machines, do not pass this property. </param>
        /// <param name="linuxParameters"> Input parameters specific to patching Linux machine. For Windows machines, do not pass this property. </param>
        /// <param name="preTasks"> List of pre tasks. e.g. [{&apos;source&apos; :&apos;runbook&apos;, &apos;taskScope&apos;: &apos;Global&apos;, &apos;parameters&apos;: { &apos;arg1&apos;: &apos;value1&apos;}}]. </param>
        /// <param name="postTasks"> List of post tasks. e.g. [{&apos;source&apos; :&apos;runbook&apos;, &apos;taskScope&apos;: &apos;Resource&apos;, &apos;parameters&apos;: { &apos;arg1&apos;: &apos;value1&apos;}}]. </param>
        /// <returns> A new <see cref="Models.InputPatchConfiguration"/> instance for mocking. </returns>
        public static InputPatchConfiguration InputPatchConfiguration(RebootOption? rebootSetting = null, InputWindowsParameters windowsParameters = null, InputLinuxParameters linuxParameters = null, IEnumerable<TaskProperties> preTasks = null, IEnumerable<TaskProperties> postTasks = null)
        {
            preTasks ??= new List<TaskProperties>();
            postTasks ??= new List<TaskProperties>();

            return new InputPatchConfiguration(rebootSetting, windowsParameters, linuxParameters, preTasks?.ToList(), postTasks?.ToList());
        }

        /// <summary> Initializes a new instance of InputWindowsParameters. </summary>
        /// <param name="kbNumbersToExclude"> Windows KBID to be excluded for patching. </param>
        /// <param name="kbNumbersToInclude"> Windows KBID to be included for patching. </param>
        /// <param name="classificationsToInclude"> Classification category of patches to be patched. </param>
        /// <param name="excludeKbsRequiringReboot"> Exclude patches which need reboot. </param>
        /// <returns> A new <see cref="Models.InputWindowsParameters"/> instance for mocking. </returns>
        public static InputWindowsParameters InputWindowsParameters(IEnumerable<string> kbNumbersToExclude = null, IEnumerable<string> kbNumbersToInclude = null, IEnumerable<string> classificationsToInclude = null, bool? excludeKbsRequiringReboot = null)
        {
            kbNumbersToExclude ??= new List<string>();
            kbNumbersToInclude ??= new List<string>();
            classificationsToInclude ??= new List<string>();

            return new InputWindowsParameters(kbNumbersToExclude?.ToList(), kbNumbersToInclude?.ToList(), classificationsToInclude?.ToList(), excludeKbsRequiringReboot);
        }

        /// <summary> Initializes a new instance of InputLinuxParameters. </summary>
        /// <param name="packageNameMasksToExclude"> Package names to be excluded for patching. </param>
        /// <param name="packageNameMasksToInclude"> Package names to be included for patching. </param>
        /// <param name="classificationsToInclude"> Classification category of patches to be patched. </param>
        /// <returns> A new <see cref="Models.InputLinuxParameters"/> instance for mocking. </returns>
        public static InputLinuxParameters InputLinuxParameters(IEnumerable<string> packageNameMasksToExclude = null, IEnumerable<string> packageNameMasksToInclude = null, IEnumerable<string> classificationsToInclude = null)
        {
            packageNameMasksToExclude ??= new List<string>();
            packageNameMasksToInclude ??= new List<string>();
            classificationsToInclude ??= new List<string>();

            return new InputLinuxParameters(packageNameMasksToExclude?.ToList(), packageNameMasksToInclude?.ToList(), classificationsToInclude?.ToList());
        }

        /// <summary> Initializes a new instance of TaskProperties. </summary>
        /// <param name="parameters"> Gets or sets the parameters of the task. </param>
        /// <param name="source"> Gets or sets the name of the runbook. </param>
        /// <param name="taskScope"> Global Task execute once when schedule trigger. Resource task execute for each VM. </param>
        /// <returns> A new <see cref="Models.TaskProperties"/> instance for mocking. </returns>
        public static TaskProperties TaskProperties(IDictionary<string, string> parameters = null, string source = null, TaskScope? taskScope = null)
        {
            parameters ??= new Dictionary<string, string>();

            return new TaskProperties(parameters, source, taskScope);
        }

        /// <summary> Initializes a new instance of ApplyUpdateData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="status"> The status. </param>
        /// <param name="resourceId"> The resourceId. </param>
        /// <param name="lastUpdateOn"> Last Update time. </param>
        /// <returns> A new <see cref="Maintenance.ApplyUpdateData"/> instance for mocking. </returns>
        public static ApplyUpdateData ApplyUpdateData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, UpdateStatus? status = null, string resourceId = null, DateTimeOffset? lastUpdateOn = null)
        {
            return new ApplyUpdateData(id, name, resourceType, systemData, status, resourceId, lastUpdateOn);
        }

        /// <summary> Initializes a new instance of ConfigurationAssignmentData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="location"> Location of the resource. </param>
        /// <param name="maintenanceConfigurationId"> The maintenance configuration Id. </param>
        /// <param name="resourceId"> The unique resourceId. </param>
        /// <returns> A new <see cref="Maintenance.ConfigurationAssignmentData"/> instance for mocking. </returns>
        public static ConfigurationAssignmentData ConfigurationAssignmentData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, AzureLocation? location = null, string maintenanceConfigurationId = null, string resourceId = null)
        {
            return new ConfigurationAssignmentData(id, name, resourceType, systemData, location, maintenanceConfigurationId, resourceId);
        }

        /// <summary> Initializes a new instance of Update. </summary>
        /// <param name="maintenanceScope"> The impact area. </param>
        /// <param name="impactType"> The impact type. </param>
        /// <param name="status"> The status. </param>
        /// <param name="impactDurationInSec"> Duration of impact in seconds. </param>
        /// <param name="notBefore"> Time when Azure will start force updates if not self-updated by customer before this time. </param>
        /// <param name="resourceId"> The resourceId. </param>
        /// <returns> A new <see cref="Models.Update"/> instance for mocking. </returns>
        public static Update Update(MaintenanceScope? maintenanceScope = null, ImpactType? impactType = null, UpdateStatus? status = null, int? impactDurationInSec = null, DateTimeOffset? notBefore = null, string resourceId = null)
        {
            return new Update(maintenanceScope, impactType, status, impactDurationInSec, notBefore, resourceId);
        }
    }
}
