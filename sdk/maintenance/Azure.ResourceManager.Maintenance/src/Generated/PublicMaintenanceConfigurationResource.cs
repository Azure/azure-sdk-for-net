// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.Maintenance
{
    /// <summary>
    /// A Class representing a PublicMaintenanceConfiguration along with the instance operations that can be performed on it.
    /// If you have a <see cref="ResourceIdentifier" /> you can construct a <see cref="PublicMaintenanceConfigurationResource" />
    /// from an instance of <see cref="ArmClient" /> using the GetPublicMaintenanceConfigurationResource method.
    /// Otherwise you can get one from its parent resource <see cref="SubscriptionResource" /> using the GetPublicMaintenanceConfiguration method.
    /// </summary>
    public partial class PublicMaintenanceConfigurationResource : BaseMaintenanceConfigurationResource
    {
        /// <summary> Generate the resource identifier of a <see cref="PublicMaintenanceConfigurationResource"/> instance. </summary>
        public static ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string resourceName)
        {
            var resourceId = $"/subscriptions/{subscriptionId}/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/{resourceName}";
            return new ResourceIdentifier(resourceId);
        }

        private readonly ClientDiagnostics _publicMaintenanceConfigurationClientDiagnostics;
        private readonly PublicMaintenanceConfigurationsRestOperations _publicMaintenanceConfigurationRestClient;

        /// <summary> Initializes a new instance of the <see cref="PublicMaintenanceConfigurationResource"/> class for mocking. </summary>
        protected PublicMaintenanceConfigurationResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref = "PublicMaintenanceConfigurationResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal PublicMaintenanceConfigurationResource(ArmClient client, MaintenanceConfigurationData data) : base(client, data)
        {
            _publicMaintenanceConfigurationClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Maintenance", ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ResourceType, out string publicMaintenanceConfigurationApiVersion);
            _publicMaintenanceConfigurationRestClient = new PublicMaintenanceConfigurationsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, publicMaintenanceConfigurationApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Initializes a new instance of the <see cref="PublicMaintenanceConfigurationResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal PublicMaintenanceConfigurationResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _publicMaintenanceConfigurationClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Maintenance", ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ResourceType, out string publicMaintenanceConfigurationApiVersion);
            _publicMaintenanceConfigurationRestClient = new PublicMaintenanceConfigurationsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, publicMaintenanceConfigurationApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.Maintenance/publicMaintenanceConfigurations";

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary>
        /// Get Public Maintenance Configuration record
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/{resourceName}
        /// Operation Id: PublicMaintenanceConfigurations_Get
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        protected override async Task<Response<BaseMaintenanceConfigurationResource>> GetCoreAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _publicMaintenanceConfigurationClientDiagnostics.CreateScope("PublicMaintenanceConfigurationResource.Get");
            scope.Start();
            try
            {
                var response = await _publicMaintenanceConfigurationRestClient.GetAsync(Id.SubscriptionId, Id.Name, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(GetResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get Public Maintenance Configuration record
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/{resourceName}
        /// Operation Id: PublicMaintenanceConfigurations_Get
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        [ForwardsClientCalls]
        public new async Task<Response<PublicMaintenanceConfigurationResource>> GetAsync(CancellationToken cancellationToken = default)
        {
            var result = await GetCoreAsync(cancellationToken).ConfigureAwait(false);
            return Response.FromValue((PublicMaintenanceConfigurationResource)result.Value, result.GetRawResponse());
        }

        /// <summary>
        /// Get Public Maintenance Configuration record
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/{resourceName}
        /// Operation Id: PublicMaintenanceConfigurations_Get
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        protected override Response<BaseMaintenanceConfigurationResource> GetCore(CancellationToken cancellationToken = default)
        {
            using var scope = _publicMaintenanceConfigurationClientDiagnostics.CreateScope("PublicMaintenanceConfigurationResource.Get");
            scope.Start();
            try
            {
                var response = _publicMaintenanceConfigurationRestClient.Get(Id.SubscriptionId, Id.Name, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(GetResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get Public Maintenance Configuration record
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/{resourceName}
        /// Operation Id: PublicMaintenanceConfigurations_Get
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        [ForwardsClientCalls]
        public new Response<PublicMaintenanceConfigurationResource> Get(CancellationToken cancellationToken = default)
        {
            var result = GetCore(cancellationToken);
            return Response.FromValue((PublicMaintenanceConfigurationResource)result.Value, result.GetRawResponse());
        }
    }
}
