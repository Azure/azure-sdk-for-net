// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.Maintenance
{
    /// <summary>
    /// A class representing a collection of <see cref="ConfigurationAssignmentResource" /> and their operations.
    /// Each <see cref="ConfigurationAssignmentResource" /> in the collection will belong to the same instance of <see cref="ResourceGroupResource" />.
    /// To get a <see cref="ConfigurationAssignmentCollection" /> instance call the GetConfigurationAssignments method from an instance of <see cref="ResourceGroupResource" />.
    /// </summary>
    public partial class ConfigurationAssignmentCollection : ArmCollection, IEnumerable<ConfigurationAssignmentResource>, IAsyncEnumerable<ConfigurationAssignmentResource>
    {
        private readonly ClientDiagnostics _configurationAssignmentClientDiagnostics;
        private readonly ConfigurationAssignmentsRestOperations _configurationAssignmentRestClient;
        private readonly string _providerName;
        private readonly string _resourceParentType;
        private readonly string _resourceParentName;
        private readonly string _resourceType;
        private readonly string _resourceName;

        /// <summary> Initializes a new instance of the <see cref="ConfigurationAssignmentCollection"/> class for mocking. </summary>
        protected ConfigurationAssignmentCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="ConfigurationAssignmentCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        /// <param name="providerName"> Resource provider name. </param>
        /// <param name="resourceParentType"> Resource parent type. </param>
        /// <param name="resourceParentName"> Resource parent identifier. </param>
        /// <param name="resourceType"> Resource type. </param>
        /// <param name="resourceName"> Resource identifier. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="providerName"/>, <paramref name="resourceParentType"/>, <paramref name="resourceParentName"/>, <paramref name="resourceType"/> or <paramref name="resourceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="providerName"/>, <paramref name="resourceParentType"/>, <paramref name="resourceParentName"/>, <paramref name="resourceType"/> or <paramref name="resourceName"/> is an empty string, and was expected to be non-empty. </exception>
        internal ConfigurationAssignmentCollection(ArmClient client, ResourceIdentifier id, string providerName, string resourceParentType, string resourceParentName, string resourceType, string resourceName) : base(client, id)
        {
            _providerName = providerName;
            _resourceParentType = resourceParentType;
            _resourceParentName = resourceParentName;
            _resourceType = resourceType;
            _resourceName = resourceName;
            _configurationAssignmentClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Maintenance", ConfigurationAssignmentResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ConfigurationAssignmentResource.ResourceType, out string configurationAssignmentApiVersion);
            _configurationAssignmentRestClient = new ConfigurationAssignmentsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, configurationAssignmentApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceGroupResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceGroupResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Register configuration for resource.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{providerName}/{resourceParentType}/{resourceParentName}/{resourceType}/{resourceName}/providers/Microsoft.Maintenance/configurationAssignments/{configurationAssignmentName}
        /// Operation Id: ConfigurationAssignments_CreateOrUpdateParent
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="configurationAssignmentName"> Configuration assignment name. </param>
        /// <param name="data"> The configurationAssignment. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="configurationAssignmentName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="configurationAssignmentName"/> or <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<ConfigurationAssignmentResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string configurationAssignmentName, ConfigurationAssignmentData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(configurationAssignmentName, nameof(configurationAssignmentName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _configurationAssignmentClientDiagnostics.CreateScope("ConfigurationAssignmentCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _configurationAssignmentRestClient.CreateOrUpdateParentAsync(Id.SubscriptionId, Id.ResourceGroupName, _providerName, _resourceParentType, _resourceParentName, _resourceType, _resourceName, configurationAssignmentName, data, cancellationToken).ConfigureAwait(false);
                var operation = new MaintenanceArmOperation<ConfigurationAssignmentResource>(Response.FromValue(new ConfigurationAssignmentResource(Client, response), response.GetRawResponse()));
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Register configuration for resource.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{providerName}/{resourceParentType}/{resourceParentName}/{resourceType}/{resourceName}/providers/Microsoft.Maintenance/configurationAssignments/{configurationAssignmentName}
        /// Operation Id: ConfigurationAssignments_CreateOrUpdateParent
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="configurationAssignmentName"> Configuration assignment name. </param>
        /// <param name="data"> The configurationAssignment. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="configurationAssignmentName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="configurationAssignmentName"/> or <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<ConfigurationAssignmentResource> CreateOrUpdate(WaitUntil waitUntil, string configurationAssignmentName, ConfigurationAssignmentData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(configurationAssignmentName, nameof(configurationAssignmentName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _configurationAssignmentClientDiagnostics.CreateScope("ConfigurationAssignmentCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _configurationAssignmentRestClient.CreateOrUpdateParent(Id.SubscriptionId, Id.ResourceGroupName, _providerName, _resourceParentType, _resourceParentName, _resourceType, _resourceName, configurationAssignmentName, data, cancellationToken);
                var operation = new MaintenanceArmOperation<ConfigurationAssignmentResource>(Response.FromValue(new ConfigurationAssignmentResource(Client, response), response.GetRawResponse()));
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get configuration for resource.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{providerName}/{resourceParentType}/{resourceParentName}/{resourceType}/{resourceName}/providers/Microsoft.Maintenance/configurationAssignments/{configurationAssignmentName}
        /// Operation Id: ConfigurationAssignments_GetParent
        /// </summary>
        /// <param name="configurationAssignmentName"> Configuration assignment name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="configurationAssignmentName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="configurationAssignmentName"/> is null. </exception>
        public virtual async Task<Response<ConfigurationAssignmentResource>> GetAsync(string configurationAssignmentName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(configurationAssignmentName, nameof(configurationAssignmentName));

            using var scope = _configurationAssignmentClientDiagnostics.CreateScope("ConfigurationAssignmentCollection.Get");
            scope.Start();
            try
            {
                var response = await _configurationAssignmentRestClient.GetParentAsync(Id.SubscriptionId, Id.ResourceGroupName, _providerName, _resourceParentType, _resourceParentName, _resourceType, _resourceName, configurationAssignmentName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ConfigurationAssignmentResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get configuration for resource.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{providerName}/{resourceParentType}/{resourceParentName}/{resourceType}/{resourceName}/providers/Microsoft.Maintenance/configurationAssignments/{configurationAssignmentName}
        /// Operation Id: ConfigurationAssignments_GetParent
        /// </summary>
        /// <param name="configurationAssignmentName"> Configuration assignment name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="configurationAssignmentName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="configurationAssignmentName"/> is null. </exception>
        public virtual Response<ConfigurationAssignmentResource> Get(string configurationAssignmentName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(configurationAssignmentName, nameof(configurationAssignmentName));

            using var scope = _configurationAssignmentClientDiagnostics.CreateScope("ConfigurationAssignmentCollection.Get");
            scope.Start();
            try
            {
                var response = _configurationAssignmentRestClient.GetParent(Id.SubscriptionId, Id.ResourceGroupName, _providerName, _resourceParentType, _resourceParentName, _resourceType, _resourceName, configurationAssignmentName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ConfigurationAssignmentResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List configurationAssignments for resource.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{providerName}/{resourceParentType}/{resourceParentName}/{resourceType}/{resourceName}/providers/Microsoft.Maintenance/configurationAssignments
        /// Operation Id: ConfigurationAssignments_ListParent
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ConfigurationAssignmentResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ConfigurationAssignmentResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<ConfigurationAssignmentResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _configurationAssignmentClientDiagnostics.CreateScope("ConfigurationAssignmentCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _configurationAssignmentRestClient.ListParentAsync(Id.SubscriptionId, Id.ResourceGroupName, _providerName, _resourceParentType, _resourceParentName, _resourceType, _resourceName, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ConfigurationAssignmentResource(Client, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// List configurationAssignments for resource.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{providerName}/{resourceParentType}/{resourceParentName}/{resourceType}/{resourceName}/providers/Microsoft.Maintenance/configurationAssignments
        /// Operation Id: ConfigurationAssignments_ListParent
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ConfigurationAssignmentResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ConfigurationAssignmentResource> GetAll(CancellationToken cancellationToken = default)
        {
            Page<ConfigurationAssignmentResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _configurationAssignmentClientDiagnostics.CreateScope("ConfigurationAssignmentCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _configurationAssignmentRestClient.ListParent(Id.SubscriptionId, Id.ResourceGroupName, _providerName, _resourceParentType, _resourceParentName, _resourceType, _resourceName, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ConfigurationAssignmentResource(Client, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{providerName}/{resourceParentType}/{resourceParentName}/{resourceType}/{resourceName}/providers/Microsoft.Maintenance/configurationAssignments/{configurationAssignmentName}
        /// Operation Id: ConfigurationAssignments_GetParent
        /// </summary>
        /// <param name="configurationAssignmentName"> Configuration assignment name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="configurationAssignmentName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="configurationAssignmentName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string configurationAssignmentName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(configurationAssignmentName, nameof(configurationAssignmentName));

            using var scope = _configurationAssignmentClientDiagnostics.CreateScope("ConfigurationAssignmentCollection.Exists");
            scope.Start();
            try
            {
                var response = await _configurationAssignmentRestClient.GetParentAsync(Id.SubscriptionId, Id.ResourceGroupName, _providerName, _resourceParentType, _resourceParentName, _resourceType, _resourceName, configurationAssignmentName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{providerName}/{resourceParentType}/{resourceParentName}/{resourceType}/{resourceName}/providers/Microsoft.Maintenance/configurationAssignments/{configurationAssignmentName}
        /// Operation Id: ConfigurationAssignments_GetParent
        /// </summary>
        /// <param name="configurationAssignmentName"> Configuration assignment name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="configurationAssignmentName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="configurationAssignmentName"/> is null. </exception>
        public virtual Response<bool> Exists(string configurationAssignmentName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(configurationAssignmentName, nameof(configurationAssignmentName));

            using var scope = _configurationAssignmentClientDiagnostics.CreateScope("ConfigurationAssignmentCollection.Exists");
            scope.Start();
            try
            {
                var response = _configurationAssignmentRestClient.GetParent(Id.SubscriptionId, Id.ResourceGroupName, _providerName, _resourceParentType, _resourceParentName, _resourceType, _resourceName, configurationAssignmentName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<ConfigurationAssignmentResource> IEnumerable<ConfigurationAssignmentResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<ConfigurationAssignmentResource> IAsyncEnumerable<ConfigurationAssignmentResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
