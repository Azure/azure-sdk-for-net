// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ContainerApps
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ManagedEnvironmentsOperations.
    /// </summary>
    public static partial class ManagedEnvironmentsOperationsExtensions
    {
            /// <summary>
            /// Get all Environments for a subscription.
            /// </summary>
            /// <remarks>
            /// Get all Managed Environments for a subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<ManagedEnvironment> ListBySubscription(this IManagedEnvironmentsOperations operations)
            {
                return operations.ListBySubscriptionAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all Environments for a subscription.
            /// </summary>
            /// <remarks>
            /// Get all Managed Environments for a subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ManagedEnvironment>> ListBySubscriptionAsync(this IManagedEnvironmentsOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBySubscriptionWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all the Environments in a resource group.
            /// </summary>
            /// <remarks>
            /// Get all the Managed Environments in a resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            public static IPage<ManagedEnvironment> ListByResourceGroup(this IManagedEnvironmentsOperations operations, string resourceGroupName)
            {
                return operations.ListByResourceGroupAsync(resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all the Environments in a resource group.
            /// </summary>
            /// <remarks>
            /// Get all the Managed Environments in a resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ManagedEnvironment>> ListByResourceGroupAsync(this IManagedEnvironmentsOperations operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the properties of a Managed Environment.
            /// </summary>
            /// <remarks>
            /// Get the properties of a Managed Environment used to host container apps.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='environmentName'>
            /// Name of the Environment.
            /// </param>
            public static ManagedEnvironment Get(this IManagedEnvironmentsOperations operations, string resourceGroupName, string environmentName)
            {
                return operations.GetAsync(resourceGroupName, environmentName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the properties of a Managed Environment.
            /// </summary>
            /// <remarks>
            /// Get the properties of a Managed Environment used to host container apps.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='environmentName'>
            /// Name of the Environment.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ManagedEnvironment> GetAsync(this IManagedEnvironmentsOperations operations, string resourceGroupName, string environmentName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, environmentName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates a Managed Environment.
            /// </summary>
            /// <remarks>
            /// Creates or updates a Managed Environment used to host container apps.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='environmentName'>
            /// Name of the Environment.
            /// </param>
            /// <param name='environmentEnvelope'>
            /// Configuration details of the Environment.
            /// </param>
            public static ManagedEnvironment CreateOrUpdate(this IManagedEnvironmentsOperations operations, string resourceGroupName, string environmentName, ManagedEnvironment environmentEnvelope)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, environmentName, environmentEnvelope).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a Managed Environment.
            /// </summary>
            /// <remarks>
            /// Creates or updates a Managed Environment used to host container apps.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='environmentName'>
            /// Name of the Environment.
            /// </param>
            /// <param name='environmentEnvelope'>
            /// Configuration details of the Environment.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ManagedEnvironment> CreateOrUpdateAsync(this IManagedEnvironmentsOperations operations, string resourceGroupName, string environmentName, ManagedEnvironment environmentEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, environmentName, environmentEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a Managed Environment.
            /// </summary>
            /// <remarks>
            /// Delete a Managed Environment if it does not have any container apps.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='environmentName'>
            /// Name of the Environment.
            /// </param>
            public static void Delete(this IManagedEnvironmentsOperations operations, string resourceGroupName, string environmentName)
            {
                operations.DeleteAsync(resourceGroupName, environmentName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a Managed Environment.
            /// </summary>
            /// <remarks>
            /// Delete a Managed Environment if it does not have any container apps.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='environmentName'>
            /// Name of the Environment.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IManagedEnvironmentsOperations operations, string resourceGroupName, string environmentName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, environmentName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Update Managed Environment's properties.
            /// </summary>
            /// <remarks>
            /// Patches a Managed Environment using JSON Merge Patch
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='environmentName'>
            /// Name of the Environment.
            /// </param>
            /// <param name='environmentEnvelope'>
            /// Configuration details of the Environment.
            /// </param>
            public static void Update(this IManagedEnvironmentsOperations operations, string resourceGroupName, string environmentName, ManagedEnvironment environmentEnvelope)
            {
                operations.UpdateAsync(resourceGroupName, environmentName, environmentEnvelope).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update Managed Environment's properties.
            /// </summary>
            /// <remarks>
            /// Patches a Managed Environment using JSON Merge Patch
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='environmentName'>
            /// Name of the Environment.
            /// </param>
            /// <param name='environmentEnvelope'>
            /// Configuration details of the Environment.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateAsync(this IManagedEnvironmentsOperations operations, string resourceGroupName, string environmentName, ManagedEnvironment environmentEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateWithHttpMessagesAsync(resourceGroupName, environmentName, environmentEnvelope, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Creates or updates a Managed Environment.
            /// </summary>
            /// <remarks>
            /// Creates or updates a Managed Environment used to host container apps.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='environmentName'>
            /// Name of the Environment.
            /// </param>
            /// <param name='environmentEnvelope'>
            /// Configuration details of the Environment.
            /// </param>
            public static ManagedEnvironment BeginCreateOrUpdate(this IManagedEnvironmentsOperations operations, string resourceGroupName, string environmentName, ManagedEnvironment environmentEnvelope)
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, environmentName, environmentEnvelope).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a Managed Environment.
            /// </summary>
            /// <remarks>
            /// Creates or updates a Managed Environment used to host container apps.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='environmentName'>
            /// Name of the Environment.
            /// </param>
            /// <param name='environmentEnvelope'>
            /// Configuration details of the Environment.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ManagedEnvironment> BeginCreateOrUpdateAsync(this IManagedEnvironmentsOperations operations, string resourceGroupName, string environmentName, ManagedEnvironment environmentEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, environmentName, environmentEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a Managed Environment.
            /// </summary>
            /// <remarks>
            /// Delete a Managed Environment if it does not have any container apps.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='environmentName'>
            /// Name of the Environment.
            /// </param>
            public static void BeginDelete(this IManagedEnvironmentsOperations operations, string resourceGroupName, string environmentName)
            {
                operations.BeginDeleteAsync(resourceGroupName, environmentName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a Managed Environment.
            /// </summary>
            /// <remarks>
            /// Delete a Managed Environment if it does not have any container apps.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='environmentName'>
            /// Name of the Environment.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IManagedEnvironmentsOperations operations, string resourceGroupName, string environmentName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, environmentName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Update Managed Environment's properties.
            /// </summary>
            /// <remarks>
            /// Patches a Managed Environment using JSON Merge Patch
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='environmentName'>
            /// Name of the Environment.
            /// </param>
            /// <param name='environmentEnvelope'>
            /// Configuration details of the Environment.
            /// </param>
            public static void BeginUpdate(this IManagedEnvironmentsOperations operations, string resourceGroupName, string environmentName, ManagedEnvironment environmentEnvelope)
            {
                operations.BeginUpdateAsync(resourceGroupName, environmentName, environmentEnvelope).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update Managed Environment's properties.
            /// </summary>
            /// <remarks>
            /// Patches a Managed Environment using JSON Merge Patch
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='environmentName'>
            /// Name of the Environment.
            /// </param>
            /// <param name='environmentEnvelope'>
            /// Configuration details of the Environment.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginUpdateAsync(this IManagedEnvironmentsOperations operations, string resourceGroupName, string environmentName, ManagedEnvironment environmentEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginUpdateWithHttpMessagesAsync(resourceGroupName, environmentName, environmentEnvelope, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get all Environments for a subscription.
            /// </summary>
            /// <remarks>
            /// Get all Managed Environments for a subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ManagedEnvironment> ListBySubscriptionNext(this IManagedEnvironmentsOperations operations, string nextPageLink)
            {
                return operations.ListBySubscriptionNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all Environments for a subscription.
            /// </summary>
            /// <remarks>
            /// Get all Managed Environments for a subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ManagedEnvironment>> ListBySubscriptionNextAsync(this IManagedEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBySubscriptionNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all the Environments in a resource group.
            /// </summary>
            /// <remarks>
            /// Get all the Managed Environments in a resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ManagedEnvironment> ListByResourceGroupNext(this IManagedEnvironmentsOperations operations, string nextPageLink)
            {
                return operations.ListByResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all the Environments in a resource group.
            /// </summary>
            /// <remarks>
            /// Get all the Managed Environments in a resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ManagedEnvironment>> ListByResourceGroupNextAsync(this IManagedEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
