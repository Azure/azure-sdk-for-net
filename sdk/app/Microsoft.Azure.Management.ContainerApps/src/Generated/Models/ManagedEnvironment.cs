// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ContainerApps.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// An environment for hosting container apps
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class ManagedEnvironment : TrackedResource
    {
        /// <summary>
        /// Initializes a new instance of the ManagedEnvironment class.
        /// </summary>
        public ManagedEnvironment()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ManagedEnvironment class.
        /// </summary>
        /// <param name="location">The geo-location where the resource
        /// lives</param>
        /// <param name="id">Fully qualified resource ID for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}</param>
        /// <param name="name">The name of the resource</param>
        /// <param name="type">The type of the resource. E.g.
        /// "Microsoft.Compute/virtualMachines" or
        /// "Microsoft.Storage/storageAccounts"</param>
        /// <param name="systemData">Azure Resource Manager metadata containing
        /// createdBy and modifiedBy information.</param>
        /// <param name="tags">Resource tags.</param>
        /// <param name="provisioningState">Provisioning state of the
        /// Environment. Possible values include: 'Succeeded', 'Failed',
        /// 'Canceled', 'Waiting', 'InitializationInProgress',
        /// 'InfrastructureSetupInProgress', 'InfrastructureSetupComplete',
        /// 'ScheduledForDelete', 'UpgradeRequested', 'UpgradeFailed'</param>
        /// <param name="daprAIInstrumentationKey">Azure Monitor
        /// instrumentation key used by Dapr to export Service to Service
        /// communication telemetry</param>
        /// <param name="daprAIConnectionString">Application Insights
        /// connection string used by Dapr to export Service to Service
        /// communication telemetry</param>
        /// <param name="vnetConfiguration">Vnet configuration for the
        /// environment</param>
        /// <param name="deploymentErrors">Any errors that occurred during
        /// deployment or deployment validation</param>
        /// <param name="defaultDomain">Default Domain Name for the
        /// cluster</param>
        /// <param name="staticIp">Static IP of the Environment</param>
        /// <param name="appLogsConfiguration">Cluster configuration which
        /// enables the log daemon to export
        /// app logs to a destination. Currently only "log-analytics" is
        /// supported</param>
        /// <param name="zoneRedundant">Whether or not this Managed Environment
        /// is zone-redundant.</param>
        public ManagedEnvironment(string location, string id = default(string), string name = default(string), string type = default(string), SystemData systemData = default(SystemData), IDictionary<string, string> tags = default(IDictionary<string, string>), string provisioningState = default(string), string daprAIInstrumentationKey = default(string), string daprAIConnectionString = default(string), VnetConfiguration vnetConfiguration = default(VnetConfiguration), string deploymentErrors = default(string), string defaultDomain = default(string), string staticIp = default(string), AppLogsConfiguration appLogsConfiguration = default(AppLogsConfiguration), bool? zoneRedundant = default(bool?))
            : base(location, id, name, type, systemData, tags)
        {
            ProvisioningState = provisioningState;
            DaprAIInstrumentationKey = daprAIInstrumentationKey;
            DaprAIConnectionString = daprAIConnectionString;
            VnetConfiguration = vnetConfiguration;
            DeploymentErrors = deploymentErrors;
            DefaultDomain = defaultDomain;
            StaticIp = staticIp;
            AppLogsConfiguration = appLogsConfiguration;
            ZoneRedundant = zoneRedundant;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets provisioning state of the Environment. Possible values
        /// include: 'Succeeded', 'Failed', 'Canceled', 'Waiting',
        /// 'InitializationInProgress', 'InfrastructureSetupInProgress',
        /// 'InfrastructureSetupComplete', 'ScheduledForDelete',
        /// 'UpgradeRequested', 'UpgradeFailed'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets or sets azure Monitor instrumentation key used by Dapr to
        /// export Service to Service communication telemetry
        /// </summary>
        [JsonProperty(PropertyName = "properties.daprAIInstrumentationKey")]
        public string DaprAIInstrumentationKey { get; set; }

        /// <summary>
        /// Gets or sets application Insights connection string used by Dapr to
        /// export Service to Service communication telemetry
        /// </summary>
        [JsonProperty(PropertyName = "properties.daprAIConnectionString")]
        public string DaprAIConnectionString { get; set; }

        /// <summary>
        /// Gets or sets vnet configuration for the environment
        /// </summary>
        [JsonProperty(PropertyName = "properties.vnetConfiguration")]
        public VnetConfiguration VnetConfiguration { get; set; }

        /// <summary>
        /// Gets any errors that occurred during deployment or deployment
        /// validation
        /// </summary>
        [JsonProperty(PropertyName = "properties.deploymentErrors")]
        public string DeploymentErrors { get; private set; }

        /// <summary>
        /// Gets default Domain Name for the cluster
        /// </summary>
        [JsonProperty(PropertyName = "properties.defaultDomain")]
        public string DefaultDomain { get; private set; }

        /// <summary>
        /// Gets static IP of the Environment
        /// </summary>
        [JsonProperty(PropertyName = "properties.staticIp")]
        public string StaticIp { get; private set; }

        /// <summary>
        /// Gets or sets cluster configuration which enables the log daemon to
        /// export
        /// app logs to a destination. Currently only "log-analytics" is
        /// supported
        /// </summary>
        [JsonProperty(PropertyName = "properties.appLogsConfiguration")]
        public AppLogsConfiguration AppLogsConfiguration { get; set; }

        /// <summary>
        /// Gets or sets whether or not this Managed Environment is
        /// zone-redundant.
        /// </summary>
        [JsonProperty(PropertyName = "properties.zoneRedundant")]
        public bool? ZoneRedundant { get; set; }

    }
}
