// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ContainerApps.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Certificate resource specific properties
    /// </summary>
    public partial class CertificateProperties
    {
        /// <summary>
        /// Initializes a new instance of the CertificateProperties class.
        /// </summary>
        public CertificateProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CertificateProperties class.
        /// </summary>
        /// <param name="provisioningState">Provisioning state of the
        /// certificate. Possible values include: 'Succeeded', 'Failed',
        /// 'Canceled', 'DeleteFailed', 'Pending'</param>
        /// <param name="password">Certificate password.</param>
        /// <param name="subjectName">Subject name of the certificate.</param>
        /// <param name="value">PFX or PEM blob</param>
        /// <param name="issuer">Certificate issuer.</param>
        /// <param name="issueDate">Certificate issue Date.</param>
        /// <param name="expirationDate">Certificate expiration date.</param>
        /// <param name="thumbprint">Certificate thumbprint.</param>
        /// <param name="valid">Is the certificate valid?.</param>
        /// <param name="publicKeyHash">Public key hash.</param>
        public CertificateProperties(string provisioningState = default(string), string password = default(string), string subjectName = default(string), byte[] value = default(byte[]), string issuer = default(string), System.DateTime? issueDate = default(System.DateTime?), System.DateTime? expirationDate = default(System.DateTime?), string thumbprint = default(string), bool? valid = default(bool?), string publicKeyHash = default(string))
        {
            ProvisioningState = provisioningState;
            Password = password;
            SubjectName = subjectName;
            Value = value;
            Issuer = issuer;
            IssueDate = issueDate;
            ExpirationDate = expirationDate;
            Thumbprint = thumbprint;
            Valid = valid;
            PublicKeyHash = publicKeyHash;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets provisioning state of the certificate. Possible values
        /// include: 'Succeeded', 'Failed', 'Canceled', 'DeleteFailed',
        /// 'Pending'
        /// </summary>
        [JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets or sets certificate password.
        /// </summary>
        [JsonProperty(PropertyName = "password")]
        public string Password { get; set; }

        /// <summary>
        /// Gets subject name of the certificate.
        /// </summary>
        [JsonProperty(PropertyName = "subjectName")]
        public string SubjectName { get; private set; }

        /// <summary>
        /// Gets or sets PFX or PEM blob
        /// </summary>
        [JsonProperty(PropertyName = "value")]
        public byte[] Value { get; set; }

        /// <summary>
        /// Gets certificate issuer.
        /// </summary>
        [JsonProperty(PropertyName = "issuer")]
        public string Issuer { get; private set; }

        /// <summary>
        /// Gets certificate issue Date.
        /// </summary>
        [JsonProperty(PropertyName = "issueDate")]
        public System.DateTime? IssueDate { get; private set; }

        /// <summary>
        /// Gets certificate expiration date.
        /// </summary>
        [JsonProperty(PropertyName = "expirationDate")]
        public System.DateTime? ExpirationDate { get; private set; }

        /// <summary>
        /// Gets certificate thumbprint.
        /// </summary>
        [JsonProperty(PropertyName = "thumbprint")]
        public string Thumbprint { get; private set; }

        /// <summary>
        /// Gets is the certificate valid?.
        /// </summary>
        [JsonProperty(PropertyName = "valid")]
        public bool? Valid { get; private set; }

        /// <summary>
        /// Gets public key hash.
        /// </summary>
        [JsonProperty(PropertyName = "publicKeyHash")]
        public string PublicKeyHash { get; private set; }

    }
}
