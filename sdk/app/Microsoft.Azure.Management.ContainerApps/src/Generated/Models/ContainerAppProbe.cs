// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ContainerApps.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Probe describes a health check to be performed against a container to
    /// determine whether it is alive or ready to receive traffic.
    /// </summary>
    public partial class ContainerAppProbe
    {
        /// <summary>
        /// Initializes a new instance of the ContainerAppProbe class.
        /// </summary>
        public ContainerAppProbe()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ContainerAppProbe class.
        /// </summary>
        /// <param name="failureThreshold">Minimum consecutive failures for the
        /// probe to be considered failed after having succeeded. Defaults to
        /// 3. Minimum value is 1. Maximum value is 10.</param>
        /// <param name="httpGet">HTTPGet specifies the http request to
        /// perform.</param>
        /// <param name="initialDelaySeconds">Number of seconds after the
        /// container has started before liveness probes are initiated. Minimum
        /// value is 1. Maximum value is 60.</param>
        /// <param name="periodSeconds">How often (in seconds) to perform the
        /// probe. Default to 10 seconds. Minimum value is 1. Maximum value is
        /// 240.</param>
        /// <param name="successThreshold">Minimum consecutive successes for
        /// the probe to be considered successful after having failed. Defaults
        /// to 1. Must be 1 for liveness and startup. Minimum value is 1.
        /// Maximum value is 10.</param>
        /// <param name="tcpSocket">TCPSocket specifies an action involving a
        /// TCP port. TCP hooks not yet supported.</param>
        /// <param name="terminationGracePeriodSeconds">Optional duration in
        /// seconds the pod needs to terminate gracefully upon probe failure.
        /// The grace period is the duration in seconds after the processes
        /// running in the pod are sent a termination signal and the time when
        /// the processes are forcibly halted with a kill signal. Set this
        /// value longer than the expected cleanup time for your process. If
        /// this value is nil, the pod's terminationGracePeriodSeconds will be
        /// used. Otherwise, this value overrides the value provided by the pod
        /// spec. Value must be non-negative integer. The value zero indicates
        /// stop immediately via the kill signal (no opportunity to shut down).
        /// This is an alpha field and requires enabling
        /// ProbeTerminationGracePeriod feature gate. Maximum value is 3600
        /// seconds (1 hour)</param>
        /// <param name="timeoutSeconds">Number of seconds after which the
        /// probe times out. Defaults to 1 second. Minimum value is 1. Maximum
        /// value is 240.</param>
        /// <param name="type">The type of probe. Possible values include:
        /// 'Liveness', 'Readiness', 'Startup'</param>
        public ContainerAppProbe(int? failureThreshold = default(int?), ContainerAppProbeHttpGet httpGet = default(ContainerAppProbeHttpGet), int? initialDelaySeconds = default(int?), int? periodSeconds = default(int?), int? successThreshold = default(int?), ContainerAppProbeTcpSocket tcpSocket = default(ContainerAppProbeTcpSocket), long? terminationGracePeriodSeconds = default(long?), int? timeoutSeconds = default(int?), string type = default(string))
        {
            FailureThreshold = failureThreshold;
            HttpGet = httpGet;
            InitialDelaySeconds = initialDelaySeconds;
            PeriodSeconds = periodSeconds;
            SuccessThreshold = successThreshold;
            TcpSocket = tcpSocket;
            TerminationGracePeriodSeconds = terminationGracePeriodSeconds;
            TimeoutSeconds = timeoutSeconds;
            Type = type;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets minimum consecutive failures for the probe to be
        /// considered failed after having succeeded. Defaults to 3. Minimum
        /// value is 1. Maximum value is 10.
        /// </summary>
        [JsonProperty(PropertyName = "failureThreshold")]
        public int? FailureThreshold { get; set; }

        /// <summary>
        /// Gets or sets hTTPGet specifies the http request to perform.
        /// </summary>
        [JsonProperty(PropertyName = "httpGet")]
        public ContainerAppProbeHttpGet HttpGet { get; set; }

        /// <summary>
        /// Gets or sets number of seconds after the container has started
        /// before liveness probes are initiated. Minimum value is 1. Maximum
        /// value is 60.
        /// </summary>
        [JsonProperty(PropertyName = "initialDelaySeconds")]
        public int? InitialDelaySeconds { get; set; }

        /// <summary>
        /// Gets or sets how often (in seconds) to perform the probe. Default
        /// to 10 seconds. Minimum value is 1. Maximum value is 240.
        /// </summary>
        [JsonProperty(PropertyName = "periodSeconds")]
        public int? PeriodSeconds { get; set; }

        /// <summary>
        /// Gets or sets minimum consecutive successes for the probe to be
        /// considered successful after having failed. Defaults to 1. Must be 1
        /// for liveness and startup. Minimum value is 1. Maximum value is 10.
        /// </summary>
        [JsonProperty(PropertyName = "successThreshold")]
        public int? SuccessThreshold { get; set; }

        /// <summary>
        /// Gets or sets tCPSocket specifies an action involving a TCP port.
        /// TCP hooks not yet supported.
        /// </summary>
        [JsonProperty(PropertyName = "tcpSocket")]
        public ContainerAppProbeTcpSocket TcpSocket { get; set; }

        /// <summary>
        /// Gets or sets optional duration in seconds the pod needs to
        /// terminate gracefully upon probe failure. The grace period is the
        /// duration in seconds after the processes running in the pod are sent
        /// a termination signal and the time when the processes are forcibly
        /// halted with a kill signal. Set this value longer than the expected
        /// cleanup time for your process. If this value is nil, the pod's
        /// terminationGracePeriodSeconds will be used. Otherwise, this value
        /// overrides the value provided by the pod spec. Value must be
        /// non-negative integer. The value zero indicates stop immediately via
        /// the kill signal (no opportunity to shut down). This is an alpha
        /// field and requires enabling ProbeTerminationGracePeriod feature
        /// gate. Maximum value is 3600 seconds (1 hour)
        /// </summary>
        [JsonProperty(PropertyName = "terminationGracePeriodSeconds")]
        public long? TerminationGracePeriodSeconds { get; set; }

        /// <summary>
        /// Gets or sets number of seconds after which the probe times out.
        /// Defaults to 1 second. Minimum value is 1. Maximum value is 240.
        /// </summary>
        [JsonProperty(PropertyName = "timeoutSeconds")]
        public int? TimeoutSeconds { get; set; }

        /// <summary>
        /// Gets or sets the type of probe. Possible values include:
        /// 'Liveness', 'Readiness', 'Startup'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

    }
}
