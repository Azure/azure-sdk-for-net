// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ContainerApps
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ManagedEnvironmentsStoragesOperations.
    /// </summary>
    public static partial class ManagedEnvironmentsStoragesOperationsExtensions
    {
            /// <summary>
            /// Get all storages for a managedEnvironment.
            /// </summary>
            /// <remarks>
            /// Get all storages for a managedEnvironment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='envName'>
            /// Name of the Environment.
            /// </param>
            public static ManagedEnvironmentStoragesCollection List(this IManagedEnvironmentsStoragesOperations operations, string resourceGroupName, string envName)
            {
                return operations.ListAsync(resourceGroupName, envName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all storages for a managedEnvironment.
            /// </summary>
            /// <remarks>
            /// Get all storages for a managedEnvironment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='envName'>
            /// Name of the Environment.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ManagedEnvironmentStoragesCollection> ListAsync(this IManagedEnvironmentsStoragesOperations operations, string resourceGroupName, string envName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, envName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get storage for a managedEnvironment.
            /// </summary>
            /// <remarks>
            /// Get storage for a managedEnvironment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='envName'>
            /// Name of the Environment.
            /// </param>
            /// <param name='name'>
            /// Name of the storage.
            /// </param>
            public static ManagedEnvironmentStorage Get(this IManagedEnvironmentsStoragesOperations operations, string resourceGroupName, string envName, string name)
            {
                return operations.GetAsync(resourceGroupName, envName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get storage for a managedEnvironment.
            /// </summary>
            /// <remarks>
            /// Get storage for a managedEnvironment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='envName'>
            /// Name of the Environment.
            /// </param>
            /// <param name='name'>
            /// Name of the storage.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ManagedEnvironmentStorage> GetAsync(this IManagedEnvironmentsStoragesOperations operations, string resourceGroupName, string envName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, envName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update storage for a managedEnvironment.
            /// </summary>
            /// <remarks>
            /// Create or update storage for a managedEnvironment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='envName'>
            /// Name of the Environment.
            /// </param>
            /// <param name='name'>
            /// Name of the storage.
            /// </param>
            /// <param name='properties'>
            /// Storage properties
            /// </param>
            public static ManagedEnvironmentStorage CreateOrUpdate(this IManagedEnvironmentsStoragesOperations operations, string resourceGroupName, string envName, string name, ManagedEnvironmentStorageProperties properties = default(ManagedEnvironmentStorageProperties))
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, envName, name, properties).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update storage for a managedEnvironment.
            /// </summary>
            /// <remarks>
            /// Create or update storage for a managedEnvironment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='envName'>
            /// Name of the Environment.
            /// </param>
            /// <param name='name'>
            /// Name of the storage.
            /// </param>
            /// <param name='properties'>
            /// Storage properties
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ManagedEnvironmentStorage> CreateOrUpdateAsync(this IManagedEnvironmentsStoragesOperations operations, string resourceGroupName, string envName, string name, ManagedEnvironmentStorageProperties properties = default(ManagedEnvironmentStorageProperties), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, envName, name, properties, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete storage for a managedEnvironment.
            /// </summary>
            /// <remarks>
            /// Delete storage for a managedEnvironment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='envName'>
            /// Name of the Environment.
            /// </param>
            /// <param name='name'>
            /// Name of the storage.
            /// </param>
            public static void Delete(this IManagedEnvironmentsStoragesOperations operations, string resourceGroupName, string envName, string name)
            {
                operations.DeleteAsync(resourceGroupName, envName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete storage for a managedEnvironment.
            /// </summary>
            /// <remarks>
            /// Delete storage for a managedEnvironment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='envName'>
            /// Name of the Environment.
            /// </param>
            /// <param name='name'>
            /// Name of the storage.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IManagedEnvironmentsStoragesOperations operations, string resourceGroupName, string envName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, envName, name, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
