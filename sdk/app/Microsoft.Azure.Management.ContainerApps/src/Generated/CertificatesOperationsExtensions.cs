// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ContainerApps
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for CertificatesOperations.
    /// </summary>
    public static partial class CertificatesOperationsExtensions
    {
            /// <summary>
            /// Get the Certificates in a given managed environment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='environmentName'>
            /// Name of the Managed Environment.
            /// </param>
            public static IPage<Certificate> List(this ICertificatesOperations operations, string resourceGroupName, string environmentName)
            {
                return operations.ListAsync(resourceGroupName, environmentName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the Certificates in a given managed environment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='environmentName'>
            /// Name of the Managed Environment.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Certificate>> ListAsync(this ICertificatesOperations operations, string resourceGroupName, string environmentName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, environmentName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the specified Certificate.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='environmentName'>
            /// Name of the Managed Environment.
            /// </param>
            /// <param name='certificateName'>
            /// Name of the Certificate.
            /// </param>
            public static Certificate Get(this ICertificatesOperations operations, string resourceGroupName, string environmentName, string certificateName)
            {
                return operations.GetAsync(resourceGroupName, environmentName, certificateName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the specified Certificate.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='environmentName'>
            /// Name of the Managed Environment.
            /// </param>
            /// <param name='certificateName'>
            /// Name of the Certificate.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Certificate> GetAsync(this ICertificatesOperations operations, string resourceGroupName, string environmentName, string certificateName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, environmentName, certificateName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or Update a Certificate.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='environmentName'>
            /// Name of the Managed Environment.
            /// </param>
            /// <param name='certificateName'>
            /// Name of the Certificate.
            /// </param>
            /// <param name='certificateEnvelope'>
            /// Certificate to be created or updated
            /// </param>
            public static Certificate CreateOrUpdate(this ICertificatesOperations operations, string resourceGroupName, string environmentName, string certificateName, Certificate certificateEnvelope = default(Certificate))
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, environmentName, certificateName, certificateEnvelope).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or Update a Certificate.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='environmentName'>
            /// Name of the Managed Environment.
            /// </param>
            /// <param name='certificateName'>
            /// Name of the Certificate.
            /// </param>
            /// <param name='certificateEnvelope'>
            /// Certificate to be created or updated
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Certificate> CreateOrUpdateAsync(this ICertificatesOperations operations, string resourceGroupName, string environmentName, string certificateName, Certificate certificateEnvelope = default(Certificate), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, environmentName, certificateName, certificateEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the specified Certificate.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='environmentName'>
            /// Name of the Managed Environment.
            /// </param>
            /// <param name='certificateName'>
            /// Name of the Certificate.
            /// </param>
            public static void Delete(this ICertificatesOperations operations, string resourceGroupName, string environmentName, string certificateName)
            {
                operations.DeleteAsync(resourceGroupName, environmentName, certificateName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the specified Certificate.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='environmentName'>
            /// Name of the Managed Environment.
            /// </param>
            /// <param name='certificateName'>
            /// Name of the Certificate.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this ICertificatesOperations operations, string resourceGroupName, string environmentName, string certificateName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, environmentName, certificateName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Update properties of a certificate
            /// </summary>
            /// <remarks>
            /// Patches a certificate. Currently only patching of tags is supported
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='environmentName'>
            /// Name of the Managed Environment.
            /// </param>
            /// <param name='certificateName'>
            /// Name of the Certificate.
            /// </param>
            /// <param name='tags'>
            /// Application-specific metadata in the form of key-value pairs.
            /// </param>
            public static Certificate Update(this ICertificatesOperations operations, string resourceGroupName, string environmentName, string certificateName, IDictionary<string, string> tags = default(IDictionary<string, string>))
            {
                return operations.UpdateAsync(resourceGroupName, environmentName, certificateName, tags).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update properties of a certificate
            /// </summary>
            /// <remarks>
            /// Patches a certificate. Currently only patching of tags is supported
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='environmentName'>
            /// Name of the Managed Environment.
            /// </param>
            /// <param name='certificateName'>
            /// Name of the Certificate.
            /// </param>
            /// <param name='tags'>
            /// Application-specific metadata in the form of key-value pairs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Certificate> UpdateAsync(this ICertificatesOperations operations, string resourceGroupName, string environmentName, string certificateName, IDictionary<string, string> tags = default(IDictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, environmentName, certificateName, tags, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the Certificates in a given managed environment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Certificate> ListNext(this ICertificatesOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the Certificates in a given managed environment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Certificate>> ListNextAsync(this ICertificatesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
