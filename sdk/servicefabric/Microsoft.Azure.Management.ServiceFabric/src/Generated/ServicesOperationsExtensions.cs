// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ServiceFabric
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ServicesOperations.
    /// </summary>
    public static partial class ServicesOperationsExtensions
    {
            /// <summary>
            /// Gets a Service Fabric service resource.
            /// </summary>
            /// <remarks>
            /// Get a Service Fabric service resource created or in the process of being
            /// created in the Service Fabric application resource.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the cluster resource.
            /// </param>
            /// <param name='applicationName'>
            /// The name of the application resource.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the service resource in the format of
            /// {applicationName}~{serviceName}.
            /// </param>
            public static ServiceResource Get(this IServicesOperations operations, string resourceGroupName, string clusterName, string applicationName, string serviceName)
            {
                return operations.GetAsync(resourceGroupName, clusterName, applicationName, serviceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a Service Fabric service resource.
            /// </summary>
            /// <remarks>
            /// Get a Service Fabric service resource created or in the process of being
            /// created in the Service Fabric application resource.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the cluster resource.
            /// </param>
            /// <param name='applicationName'>
            /// The name of the application resource.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the service resource in the format of
            /// {applicationName}~{serviceName}.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ServiceResource> GetAsync(this IServicesOperations operations, string resourceGroupName, string clusterName, string applicationName, string serviceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, clusterName, applicationName, serviceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates a Service Fabric service resource.
            /// </summary>
            /// <remarks>
            /// Create or update a Service Fabric service resource with the specified name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the cluster resource.
            /// </param>
            /// <param name='applicationName'>
            /// The name of the application resource.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the service resource in the format of
            /// {applicationName}~{serviceName}.
            /// </param>
            /// <param name='parameters'>
            /// The service resource.
            /// </param>
            public static ServiceResource CreateOrUpdate(this IServicesOperations operations, string resourceGroupName, string clusterName, string applicationName, string serviceName, ServiceResource parameters)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, clusterName, applicationName, serviceName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a Service Fabric service resource.
            /// </summary>
            /// <remarks>
            /// Create or update a Service Fabric service resource with the specified name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the cluster resource.
            /// </param>
            /// <param name='applicationName'>
            /// The name of the application resource.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the service resource in the format of
            /// {applicationName}~{serviceName}.
            /// </param>
            /// <param name='parameters'>
            /// The service resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ServiceResource> CreateOrUpdateAsync(this IServicesOperations operations, string resourceGroupName, string clusterName, string applicationName, string serviceName, ServiceResource parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, clusterName, applicationName, serviceName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a Service Fabric service resource.
            /// </summary>
            /// <remarks>
            /// Update a Service Fabric service resource with the specified name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the cluster resource.
            /// </param>
            /// <param name='applicationName'>
            /// The name of the application resource.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the service resource in the format of
            /// {applicationName}~{serviceName}.
            /// </param>
            /// <param name='parameters'>
            /// The service resource for patch operations.
            /// </param>
            public static ServiceResource Update(this IServicesOperations operations, string resourceGroupName, string clusterName, string applicationName, string serviceName, ServiceResourceUpdate parameters)
            {
                return operations.UpdateAsync(resourceGroupName, clusterName, applicationName, serviceName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a Service Fabric service resource.
            /// </summary>
            /// <remarks>
            /// Update a Service Fabric service resource with the specified name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the cluster resource.
            /// </param>
            /// <param name='applicationName'>
            /// The name of the application resource.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the service resource in the format of
            /// {applicationName}~{serviceName}.
            /// </param>
            /// <param name='parameters'>
            /// The service resource for patch operations.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ServiceResource> UpdateAsync(this IServicesOperations operations, string resourceGroupName, string clusterName, string applicationName, string serviceName, ServiceResourceUpdate parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, clusterName, applicationName, serviceName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a Service Fabric service resource.
            /// </summary>
            /// <remarks>
            /// Delete a Service Fabric service resource with the specified name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the cluster resource.
            /// </param>
            /// <param name='applicationName'>
            /// The name of the application resource.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the service resource in the format of
            /// {applicationName}~{serviceName}.
            /// </param>
            public static void Delete(this IServicesOperations operations, string resourceGroupName, string clusterName, string applicationName, string serviceName)
            {
                operations.DeleteAsync(resourceGroupName, clusterName, applicationName, serviceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a Service Fabric service resource.
            /// </summary>
            /// <remarks>
            /// Delete a Service Fabric service resource with the specified name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the cluster resource.
            /// </param>
            /// <param name='applicationName'>
            /// The name of the application resource.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the service resource in the format of
            /// {applicationName}~{serviceName}.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IServicesOperations operations, string resourceGroupName, string clusterName, string applicationName, string serviceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, clusterName, applicationName, serviceName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the list of service resources created in the specified Service Fabric
            /// application resource.
            /// </summary>
            /// <remarks>
            /// Gets all service resources created or in the process of being created in
            /// the Service Fabric application resource.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the cluster resource.
            /// </param>
            /// <param name='applicationName'>
            /// The name of the application resource.
            /// </param>
            public static ServiceResourceList List(this IServicesOperations operations, string resourceGroupName, string clusterName, string applicationName)
            {
                return operations.ListAsync(resourceGroupName, clusterName, applicationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of service resources created in the specified Service Fabric
            /// application resource.
            /// </summary>
            /// <remarks>
            /// Gets all service resources created or in the process of being created in
            /// the Service Fabric application resource.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the cluster resource.
            /// </param>
            /// <param name='applicationName'>
            /// The name of the application resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ServiceResourceList> ListAsync(this IServicesOperations operations, string resourceGroupName, string clusterName, string applicationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, clusterName, applicationName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates a Service Fabric service resource.
            /// </summary>
            /// <remarks>
            /// Create or update a Service Fabric service resource with the specified name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the cluster resource.
            /// </param>
            /// <param name='applicationName'>
            /// The name of the application resource.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the service resource in the format of
            /// {applicationName}~{serviceName}.
            /// </param>
            /// <param name='parameters'>
            /// The service resource.
            /// </param>
            public static ServiceResource BeginCreateOrUpdate(this IServicesOperations operations, string resourceGroupName, string clusterName, string applicationName, string serviceName, ServiceResource parameters)
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, clusterName, applicationName, serviceName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a Service Fabric service resource.
            /// </summary>
            /// <remarks>
            /// Create or update a Service Fabric service resource with the specified name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the cluster resource.
            /// </param>
            /// <param name='applicationName'>
            /// The name of the application resource.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the service resource in the format of
            /// {applicationName}~{serviceName}.
            /// </param>
            /// <param name='parameters'>
            /// The service resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ServiceResource> BeginCreateOrUpdateAsync(this IServicesOperations operations, string resourceGroupName, string clusterName, string applicationName, string serviceName, ServiceResource parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, clusterName, applicationName, serviceName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a Service Fabric service resource.
            /// </summary>
            /// <remarks>
            /// Update a Service Fabric service resource with the specified name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the cluster resource.
            /// </param>
            /// <param name='applicationName'>
            /// The name of the application resource.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the service resource in the format of
            /// {applicationName}~{serviceName}.
            /// </param>
            /// <param name='parameters'>
            /// The service resource for patch operations.
            /// </param>
            public static ServiceResource BeginUpdate(this IServicesOperations operations, string resourceGroupName, string clusterName, string applicationName, string serviceName, ServiceResourceUpdate parameters)
            {
                return operations.BeginUpdateAsync(resourceGroupName, clusterName, applicationName, serviceName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a Service Fabric service resource.
            /// </summary>
            /// <remarks>
            /// Update a Service Fabric service resource with the specified name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the cluster resource.
            /// </param>
            /// <param name='applicationName'>
            /// The name of the application resource.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the service resource in the format of
            /// {applicationName}~{serviceName}.
            /// </param>
            /// <param name='parameters'>
            /// The service resource for patch operations.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ServiceResource> BeginUpdateAsync(this IServicesOperations operations, string resourceGroupName, string clusterName, string applicationName, string serviceName, ServiceResourceUpdate parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(resourceGroupName, clusterName, applicationName, serviceName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a Service Fabric service resource.
            /// </summary>
            /// <remarks>
            /// Delete a Service Fabric service resource with the specified name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the cluster resource.
            /// </param>
            /// <param name='applicationName'>
            /// The name of the application resource.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the service resource in the format of
            /// {applicationName}~{serviceName}.
            /// </param>
            public static void BeginDelete(this IServicesOperations operations, string resourceGroupName, string clusterName, string applicationName, string serviceName)
            {
                operations.BeginDeleteAsync(resourceGroupName, clusterName, applicationName, serviceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a Service Fabric service resource.
            /// </summary>
            /// <remarks>
            /// Delete a Service Fabric service resource with the specified name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the cluster resource.
            /// </param>
            /// <param name='applicationName'>
            /// The name of the application resource.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the service resource in the format of
            /// {applicationName}~{serviceName}.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IServicesOperations operations, string resourceGroupName, string clusterName, string applicationName, string serviceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, clusterName, applicationName, serviceName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
