// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ServiceFabric.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Managed cluster update request
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class ManagedClusterUpdateParameters
    {
        /// <summary>
        /// Initializes a new instance of the ManagedClusterUpdateParameters
        /// class.
        /// </summary>
        public ManagedClusterUpdateParameters()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ManagedClusterUpdateParameters
        /// class.
        /// </summary>
        /// <param name="clientConnectionPort">The port used for client
        /// connections to the cluster.</param>
        /// <param name="httpGatewayConnectionPort">The port used for http
        /// connections to the cluster.</param>
        /// <param name="loadBalancingRules">Describes a load balancing
        /// rule.</param>
        /// <param name="clients">client certificates for the cluster.</param>
        /// <param name="azureActiveDirectory">Azure active directory.</param>
        /// <param name="fabricSettings">The list of custom fabric settings to
        /// configure the cluster.</param>
        /// <param name="clusterCodeVersion">The Service Fabric runtime version
        /// of the cluster. This property can only by set the user when
        /// **upgradeMode** is set to 'Manual'. To get list of available
        /// Service Fabric versions for new clusters use [ClusterVersion
        /// API](./ClusterVersion.md). To get the list of available version for
        /// existing clusters use **availableClusterVersions**.</param>
        /// <param name="clusterUpgradeMode">The upgrade mode of the cluster
        /// when new Service Fabric runtime version is available.
        ///
        /// - Automatic - The cluster will be automatically upgraded to the
        /// latest Service Fabric runtime version as soon as it is available.
        /// - Manual - The cluster will not be automatically upgraded to the
        /// latest Service Fabric runtime version. The cluster is upgraded by
        /// setting the **clusterCodeVersion** property in the cluster
        /// resource.
        /// . Possible values include: 'Automatic', 'Manual'</param>
        /// <param name="clusterUpgradeDescription">Describes the policy used
        /// when upgrading the cluster.</param>
        /// <param name="reverseProxyEndpointPort">The endpoint used by reverse
        /// proxy.</param>
        /// <param name="tags">Managed cluster update parameters</param>
        public ManagedClusterUpdateParameters(int? clientConnectionPort = default(int?), int? httpGatewayConnectionPort = default(int?), IList<LoadBalancingRule> loadBalancingRules = default(IList<LoadBalancingRule>), IList<ClientCertificate> clients = default(IList<ClientCertificate>), AzureActiveDirectory azureActiveDirectory = default(AzureActiveDirectory), IList<SettingsSectionDescription> fabricSettings = default(IList<SettingsSectionDescription>), string clusterCodeVersion = default(string), string clusterUpgradeMode = default(string), ClusterUpgradePolicy clusterUpgradeDescription = default(ClusterUpgradePolicy), int? reverseProxyEndpointPort = default(int?), IDictionary<string, string> tags = default(IDictionary<string, string>))
        {
            ClientConnectionPort = clientConnectionPort;
            HttpGatewayConnectionPort = httpGatewayConnectionPort;
            LoadBalancingRules = loadBalancingRules;
            Clients = clients;
            AzureActiveDirectory = azureActiveDirectory;
            FabricSettings = fabricSettings;
            ClusterCodeVersion = clusterCodeVersion;
            ClusterUpgradeMode = clusterUpgradeMode;
            ClusterUpgradeDescription = clusterUpgradeDescription;
            ReverseProxyEndpointPort = reverseProxyEndpointPort;
            Tags = tags;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the port used for client connections to the cluster.
        /// </summary>
        [JsonProperty(PropertyName = "properties.clientConnectionPort")]
        public int? ClientConnectionPort { get; set; }

        /// <summary>
        /// Gets or sets the port used for http connections to the cluster.
        /// </summary>
        [JsonProperty(PropertyName = "properties.httpGatewayConnectionPort")]
        public int? HttpGatewayConnectionPort { get; set; }

        /// <summary>
        /// Gets or sets describes a load balancing rule.
        /// </summary>
        [JsonProperty(PropertyName = "properties.loadBalancingRules")]
        public IList<LoadBalancingRule> LoadBalancingRules { get; set; }

        /// <summary>
        /// Gets or sets client certificates for the cluster.
        /// </summary>
        [JsonProperty(PropertyName = "properties.clients")]
        public IList<ClientCertificate> Clients { get; set; }

        /// <summary>
        /// Gets or sets azure active directory.
        /// </summary>
        [JsonProperty(PropertyName = "properties.azureActiveDirectory")]
        public AzureActiveDirectory AzureActiveDirectory { get; set; }

        /// <summary>
        /// Gets or sets the list of custom fabric settings to configure the
        /// cluster.
        /// </summary>
        [JsonProperty(PropertyName = "properties.fabricSettings")]
        public IList<SettingsSectionDescription> FabricSettings { get; set; }

        /// <summary>
        /// Gets or sets the Service Fabric runtime version of the cluster.
        /// This property can only by set the user when **upgradeMode** is set
        /// to 'Manual'. To get list of available Service Fabric versions for
        /// new clusters use [ClusterVersion API](./ClusterVersion.md). To get
        /// the list of available version for existing clusters use
        /// **availableClusterVersions**.
        /// </summary>
        [JsonProperty(PropertyName = "properties.clusterCodeVersion")]
        public string ClusterCodeVersion { get; set; }

        /// <summary>
        /// Gets or sets the upgrade mode of the cluster when new Service
        /// Fabric runtime version is available.
        ///
        /// - Automatic - The cluster will be automatically upgraded to the
        /// latest Service Fabric runtime version as soon as it is available.
        /// - Manual - The cluster will not be automatically upgraded to the
        /// latest Service Fabric runtime version. The cluster is upgraded by
        /// setting the **clusterCodeVersion** property in the cluster
        /// resource.
        /// . Possible values include: 'Automatic', 'Manual'
        /// </summary>
        [JsonProperty(PropertyName = "properties.clusterUpgradeMode")]
        public string ClusterUpgradeMode { get; set; }

        /// <summary>
        /// Gets or sets describes the policy used when upgrading the cluster.
        /// </summary>
        [JsonProperty(PropertyName = "properties.clusterUpgradeDescription")]
        public ClusterUpgradePolicy ClusterUpgradeDescription { get; set; }

        /// <summary>
        /// Gets or sets the endpoint used by reverse proxy.
        /// </summary>
        [JsonProperty(PropertyName = "properties.reverseProxyEndpointPort")]
        public int? ReverseProxyEndpointPort { get; set; }

        /// <summary>
        /// Gets or sets managed cluster update parameters
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IDictionary<string, string> Tags { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (LoadBalancingRules != null)
            {
                foreach (var element in LoadBalancingRules)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (Clients != null)
            {
                foreach (var element1 in Clients)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
            if (FabricSettings != null)
            {
                foreach (var element2 in FabricSettings)
                {
                    if (element2 != null)
                    {
                        element2.Validate();
                    }
                }
            }
            if (ClusterUpgradeDescription != null)
            {
                ClusterUpgradeDescription.Validate();
            }
        }
    }
}
