// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ServiceFabric.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The properties of a stateless service resource for patch operations.
    /// </summary>
    [Newtonsoft.Json.JsonObject("Stateless")]
    public partial class StatelessServiceUpdateProperties : ServiceResourceUpdateProperties
    {
        /// <summary>
        /// Initializes a new instance of the StatelessServiceUpdateProperties
        /// class.
        /// </summary>
        public StatelessServiceUpdateProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the StatelessServiceUpdateProperties
        /// class.
        /// </summary>
        /// <param name="placementConstraints">The placement constraints as a
        /// string. Placement constraints are boolean expressions on node
        /// properties and allow for restricting a service to particular nodes
        /// based on the service requirements. For example, to place a service
        /// on nodes where NodeType is blue specify the following: "NodeColor
        /// == blue)".</param>
        /// <param name="correlationScheme">A list that describes the
        /// correlation of the service with other services.</param>
        /// <param name="serviceLoadMetrics">The service load metrics is given
        /// as an array of ServiceLoadMetricDescription objects.</param>
        /// <param name="servicePlacementPolicies">A list that describes the
        /// correlation of the service with other services.</param>
        /// <param name="defaultMoveCost">Specifies the move cost for the
        /// service. Possible values include: 'Zero', 'Low', 'Medium',
        /// 'High'</param>
        /// <param name="instanceCount">The instance count.</param>
        /// <param name="instanceCloseDelayDuration">Delay duration for
        /// RequestDrain feature to ensures that the endpoint advertised by the
        /// stateless instance is removed before the delay starts prior to
        /// closing the instance. This delay enables existing requests to drain
        /// gracefully before the instance actually goes down
        /// (https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-application-upgrade-advanced#avoid-connection-drops-during-stateless-service-planned-downtime-preview).
        /// It is first interpreted as a string representing an ISO 8601
        /// duration. If that fails, then it is interpreted as a number
        /// representing the total number of milliseconds.</param>
        public StatelessServiceUpdateProperties(string placementConstraints = default(string), IList<ServiceCorrelationDescription> correlationScheme = default(IList<ServiceCorrelationDescription>), IList<ServiceLoadMetricDescription> serviceLoadMetrics = default(IList<ServiceLoadMetricDescription>), IList<ServicePlacementPolicyDescription> servicePlacementPolicies = default(IList<ServicePlacementPolicyDescription>), string defaultMoveCost = default(string), int? instanceCount = default(int?), string instanceCloseDelayDuration = default(string))
            : base(placementConstraints, correlationScheme, serviceLoadMetrics, servicePlacementPolicies, defaultMoveCost)
        {
            InstanceCount = instanceCount;
            InstanceCloseDelayDuration = instanceCloseDelayDuration;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the instance count.
        /// </summary>
        [JsonProperty(PropertyName = "instanceCount")]
        public int? InstanceCount { get; set; }

        /// <summary>
        /// Gets or sets delay duration for RequestDrain feature to ensures
        /// that the endpoint advertised by the stateless instance is removed
        /// before the delay starts prior to closing the instance. This delay
        /// enables existing requests to drain gracefully before the instance
        /// actually goes down
        /// (https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-application-upgrade-advanced#avoid-connection-drops-during-stateless-service-planned-downtime-preview).
        /// It is first interpreted as a string representing an ISO 8601
        /// duration. If that fails, then it is interpreted as a number
        /// representing the total number of milliseconds.
        /// </summary>
        [JsonProperty(PropertyName = "instanceCloseDelayDuration")]
        public string InstanceCloseDelayDuration { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (InstanceCount < -1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "InstanceCount", -1);
            }
        }
    }
}
