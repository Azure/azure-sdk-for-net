// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ServiceFabric.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Describes the policy used when upgrading the cluster.
    /// </summary>
    public partial class ClusterUpgradePolicy
    {
        /// <summary>
        /// Initializes a new instance of the ClusterUpgradePolicy class.
        /// </summary>
        public ClusterUpgradePolicy()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ClusterUpgradePolicy class.
        /// </summary>
        /// <param name="upgradeReplicaSetCheckTimeout">The maximum amount of
        /// time to block processing of an upgrade domain and prevent loss of
        /// availability when there are unexpected issues. When this timeout
        /// expires, processing of the upgrade domain will proceed regardless
        /// of availability loss issues. The timeout is reset at the start of
        /// each upgrade domain. The timeout can be in either hh:mm:ss or in
        /// d.hh:mm:ss.ms format.</param>
        /// <param name="healthCheckWaitDuration">The length of time to wait
        /// after completing an upgrade domain before performing health checks.
        /// The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms
        /// format.</param>
        /// <param name="healthCheckStableDuration">The amount of time that the
        /// application or cluster must remain healthy before the upgrade
        /// proceeds to the next upgrade domain. The duration can be in either
        /// hh:mm:ss or in d.hh:mm:ss.ms format.</param>
        /// <param name="healthCheckRetryTimeout">The amount of time to retry
        /// health evaluation when the application or cluster is unhealthy
        /// before the upgrade rolls back. The timeout can be in either
        /// hh:mm:ss or in d.hh:mm:ss.ms format.</param>
        /// <param name="upgradeTimeout">The amount of time the overall upgrade
        /// has to complete before the upgrade rolls back. The timeout can be
        /// in either hh:mm:ss or in d.hh:mm:ss.ms format.</param>
        /// <param name="upgradeDomainTimeout">The amount of time each upgrade
        /// domain has to complete before the upgrade rolls back. The timeout
        /// can be in either hh:mm:ss or in d.hh:mm:ss.ms format.</param>
        /// <param name="healthPolicy">The cluster health policy used when
        /// upgrading the cluster.</param>
        /// <param name="forceRestart">If true, then processes are forcefully
        /// restarted during upgrade even when the code version has not changed
        /// (the upgrade only changes configuration or data).</param>
        /// <param name="deltaHealthPolicy">The cluster delta health policy
        /// used when upgrading the cluster.</param>
        public ClusterUpgradePolicy(string upgradeReplicaSetCheckTimeout, string healthCheckWaitDuration, string healthCheckStableDuration, string healthCheckRetryTimeout, string upgradeTimeout, string upgradeDomainTimeout, ClusterHealthPolicy healthPolicy, bool? forceRestart = default(bool?), ClusterUpgradeDeltaHealthPolicy deltaHealthPolicy = default(ClusterUpgradeDeltaHealthPolicy))
        {
            ForceRestart = forceRestart;
            UpgradeReplicaSetCheckTimeout = upgradeReplicaSetCheckTimeout;
            HealthCheckWaitDuration = healthCheckWaitDuration;
            HealthCheckStableDuration = healthCheckStableDuration;
            HealthCheckRetryTimeout = healthCheckRetryTimeout;
            UpgradeTimeout = upgradeTimeout;
            UpgradeDomainTimeout = upgradeDomainTimeout;
            HealthPolicy = healthPolicy;
            DeltaHealthPolicy = deltaHealthPolicy;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets if true, then processes are forcefully restarted
        /// during upgrade even when the code version has not changed (the
        /// upgrade only changes configuration or data).
        /// </summary>
        [JsonProperty(PropertyName = "forceRestart")]
        public bool? ForceRestart { get; set; }

        /// <summary>
        /// Gets or sets the maximum amount of time to block processing of an
        /// upgrade domain and prevent loss of availability when there are
        /// unexpected issues. When this timeout expires, processing of the
        /// upgrade domain will proceed regardless of availability loss issues.
        /// The timeout is reset at the start of each upgrade domain. The
        /// timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
        /// </summary>
        [JsonProperty(PropertyName = "upgradeReplicaSetCheckTimeout")]
        public string UpgradeReplicaSetCheckTimeout { get; set; }

        /// <summary>
        /// Gets or sets the length of time to wait after completing an upgrade
        /// domain before performing health checks. The duration can be in
        /// either hh:mm:ss or in d.hh:mm:ss.ms format.
        /// </summary>
        [JsonProperty(PropertyName = "healthCheckWaitDuration")]
        public string HealthCheckWaitDuration { get; set; }

        /// <summary>
        /// Gets or sets the amount of time that the application or cluster
        /// must remain healthy before the upgrade proceeds to the next upgrade
        /// domain. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms
        /// format.
        /// </summary>
        [JsonProperty(PropertyName = "healthCheckStableDuration")]
        public string HealthCheckStableDuration { get; set; }

        /// <summary>
        /// Gets or sets the amount of time to retry health evaluation when the
        /// application or cluster is unhealthy before the upgrade rolls back.
        /// The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
        /// </summary>
        [JsonProperty(PropertyName = "healthCheckRetryTimeout")]
        public string HealthCheckRetryTimeout { get; set; }

        /// <summary>
        /// Gets or sets the amount of time the overall upgrade has to complete
        /// before the upgrade rolls back. The timeout can be in either
        /// hh:mm:ss or in d.hh:mm:ss.ms format.
        /// </summary>
        [JsonProperty(PropertyName = "upgradeTimeout")]
        public string UpgradeTimeout { get; set; }

        /// <summary>
        /// Gets or sets the amount of time each upgrade domain has to complete
        /// before the upgrade rolls back. The timeout can be in either
        /// hh:mm:ss or in d.hh:mm:ss.ms format.
        /// </summary>
        [JsonProperty(PropertyName = "upgradeDomainTimeout")]
        public string UpgradeDomainTimeout { get; set; }

        /// <summary>
        /// Gets or sets the cluster health policy used when upgrading the
        /// cluster.
        /// </summary>
        [JsonProperty(PropertyName = "healthPolicy")]
        public ClusterHealthPolicy HealthPolicy { get; set; }

        /// <summary>
        /// Gets or sets the cluster delta health policy used when upgrading
        /// the cluster.
        /// </summary>
        [JsonProperty(PropertyName = "deltaHealthPolicy")]
        public ClusterUpgradeDeltaHealthPolicy DeltaHealthPolicy { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (UpgradeReplicaSetCheckTimeout == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "UpgradeReplicaSetCheckTimeout");
            }
            if (HealthCheckWaitDuration == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "HealthCheckWaitDuration");
            }
            if (HealthCheckStableDuration == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "HealthCheckStableDuration");
            }
            if (HealthCheckRetryTimeout == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "HealthCheckRetryTimeout");
            }
            if (UpgradeTimeout == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "UpgradeTimeout");
            }
            if (UpgradeDomainTimeout == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "UpgradeDomainTimeout");
            }
            if (HealthPolicy == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "HealthPolicy");
            }
            if (HealthPolicy != null)
            {
                HealthPolicy.Validate();
            }
            if (DeltaHealthPolicy != null)
            {
                DeltaHealthPolicy.Validate();
            }
        }
    }
}
