// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ServiceFabric.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Node type update request
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class NodeTypeUpdateParameters
    {
        /// <summary>
        /// Initializes a new instance of the NodeTypeUpdateParameters class.
        /// </summary>
        public NodeTypeUpdateParameters()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the NodeTypeUpdateParameters class.
        /// </summary>
        /// <param name="vmInstanceCount">The number of nodes in the node type.
        /// This count should match the capacity property in the corresponding
        /// VirtualMachineScaleSet resource.</param>
        /// <param name="placementProperties">The placement tags applied to
        /// nodes in the node type, which can be used to indicate where certain
        /// services (workload) should run.</param>
        /// <param name="capacities">The capacity tags applied to the nodes in
        /// the node type, the cluster resource manager uses these tags to
        /// understand how much resource a node has.</param>
        /// <param name="applicationPorts">The range of ports from which
        /// cluster assigned port to Service Fabric applications.</param>
        /// <param name="ephemeralPorts">The range of ephemeral ports that
        /// nodes in this node type should be configured with.</param>
        /// <param name="vmSecrets">virtual machine secretes.</param>
        /// <param name="vmExtensions">virtual machine extensions.</param>
        /// <param name="tags">Node type update parameters</param>
        public NodeTypeUpdateParameters(int? vmInstanceCount = default(int?), IDictionary<string, string> placementProperties = default(IDictionary<string, string>), IDictionary<string, string> capacities = default(IDictionary<string, string>), EndpointRangeDescription applicationPorts = default(EndpointRangeDescription), EndpointRangeDescription ephemeralPorts = default(EndpointRangeDescription), IList<VaultSecretGroup> vmSecrets = default(IList<VaultSecretGroup>), IList<VMSSExtension> vmExtensions = default(IList<VMSSExtension>), IDictionary<string, string> tags = default(IDictionary<string, string>))
        {
            VmInstanceCount = vmInstanceCount;
            PlacementProperties = placementProperties;
            Capacities = capacities;
            ApplicationPorts = applicationPorts;
            EphemeralPorts = ephemeralPorts;
            VmSecrets = vmSecrets;
            VmExtensions = vmExtensions;
            Tags = tags;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the number of nodes in the node type. This count
        /// should match the capacity property in the corresponding
        /// VirtualMachineScaleSet resource.
        /// </summary>
        [JsonProperty(PropertyName = "properties.vmInstanceCount")]
        public int? VmInstanceCount { get; set; }

        /// <summary>
        /// Gets or sets the placement tags applied to nodes in the node type,
        /// which can be used to indicate where certain services (workload)
        /// should run.
        /// </summary>
        [JsonProperty(PropertyName = "properties.placementProperties")]
        public IDictionary<string, string> PlacementProperties { get; set; }

        /// <summary>
        /// Gets or sets the capacity tags applied to the nodes in the node
        /// type, the cluster resource manager uses these tags to understand
        /// how much resource a node has.
        /// </summary>
        [JsonProperty(PropertyName = "properties.capacities")]
        public IDictionary<string, string> Capacities { get; set; }

        /// <summary>
        /// Gets or sets the range of ports from which cluster assigned port to
        /// Service Fabric applications.
        /// </summary>
        [JsonProperty(PropertyName = "properties.applicationPorts")]
        public EndpointRangeDescription ApplicationPorts { get; set; }

        /// <summary>
        /// Gets or sets the range of ephemeral ports that nodes in this node
        /// type should be configured with.
        /// </summary>
        [JsonProperty(PropertyName = "properties.ephemeralPorts")]
        public EndpointRangeDescription EphemeralPorts { get; set; }

        /// <summary>
        /// Gets or sets virtual machine secretes.
        /// </summary>
        /// <remarks>
        /// The secrets to install in the virtual machines.
        /// </remarks>
        [JsonProperty(PropertyName = "properties.vmSecrets")]
        public IList<VaultSecretGroup> VmSecrets { get; set; }

        /// <summary>
        /// Gets or sets virtual machine extensions.
        /// </summary>
        /// <remarks>
        /// Set of extensions that should be installed onto the virtual
        /// machines.
        /// </remarks>
        [JsonProperty(PropertyName = "properties.vmExtensions")]
        public IList<VMSSExtension> VmExtensions { get; set; }

        /// <summary>
        /// Gets or sets node type update parameters
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IDictionary<string, string> Tags { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (VmInstanceCount > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "VmInstanceCount", 2147483647);
            }
            if (VmInstanceCount < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "VmInstanceCount", 1);
            }
            if (ApplicationPorts != null)
            {
                ApplicationPorts.Validate();
            }
            if (EphemeralPorts != null)
            {
                EphemeralPorts.Validate();
            }
            if (VmSecrets != null)
            {
                foreach (var element in VmSecrets)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (VmExtensions != null)
            {
                foreach (var element1 in VmExtensions)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
        }
    }
}
