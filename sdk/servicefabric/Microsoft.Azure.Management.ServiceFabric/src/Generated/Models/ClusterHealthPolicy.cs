// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ServiceFabric.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Defines a health policy used to evaluate the health of the cluster or
    /// of a cluster node.
    ///
    /// </summary>
    public partial class ClusterHealthPolicy
    {
        /// <summary>
        /// Initializes a new instance of the ClusterHealthPolicy class.
        /// </summary>
        public ClusterHealthPolicy()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ClusterHealthPolicy class.
        /// </summary>
        /// <param name="maxPercentUnhealthyNodes">The maximum allowed
        /// percentage of unhealthy nodes before reporting an error. For
        /// example, to allow 10% of nodes to be unhealthy, this value would be
        /// 10.
        ///
        /// The percentage represents the maximum tolerated percentage of nodes
        /// that can be unhealthy before the cluster is considered in error.
        /// If the percentage is respected but there is at least one unhealthy
        /// node, the health is evaluated as Warning.
        /// The percentage is calculated by dividing the number of unhealthy
        /// nodes over the total number of nodes in the cluster.
        /// The computation rounds up to tolerate one failure on small numbers
        /// of nodes. Default percentage is zero.
        ///
        /// In large clusters, some nodes will always be down or out for
        /// repairs, so this percentage should be configured to tolerate that.
        /// </param>
        /// <param name="maxPercentUnhealthyApplications">The maximum allowed
        /// percentage of unhealthy applications before reporting an error. For
        /// example, to allow 10% of applications to be unhealthy, this value
        /// would be 10.
        ///
        /// The percentage represents the maximum tolerated percentage of
        /// applications that can be unhealthy before the cluster is considered
        /// in error.
        /// If the percentage is respected but there is at least one unhealthy
        /// application, the health is evaluated as Warning.
        /// This is calculated by dividing the number of unhealthy applications
        /// over the total number of application instances in the cluster,
        /// excluding applications of application types that are included in
        /// the ApplicationTypeHealthPolicyMap.
        /// The computation rounds up to tolerate one failure on small numbers
        /// of applications. Default percentage is zero.
        /// </param>
        /// <param name="applicationHealthPolicies">Defines the application
        /// health policy map used to evaluate the health of an application or
        /// one of its children entities.</param>
        public ClusterHealthPolicy(int? maxPercentUnhealthyNodes = default(int?), int? maxPercentUnhealthyApplications = default(int?), IDictionary<string, ApplicationHealthPolicy> applicationHealthPolicies = default(IDictionary<string, ApplicationHealthPolicy>))
        {
            MaxPercentUnhealthyNodes = maxPercentUnhealthyNodes;
            MaxPercentUnhealthyApplications = maxPercentUnhealthyApplications;
            ApplicationHealthPolicies = applicationHealthPolicies;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the maximum allowed percentage of unhealthy nodes
        /// before reporting an error. For example, to allow 10% of nodes to be
        /// unhealthy, this value would be 10.
        ///
        /// The percentage represents the maximum tolerated percentage of nodes
        /// that can be unhealthy before the cluster is considered in error.
        /// If the percentage is respected but there is at least one unhealthy
        /// node, the health is evaluated as Warning.
        /// The percentage is calculated by dividing the number of unhealthy
        /// nodes over the total number of nodes in the cluster.
        /// The computation rounds up to tolerate one failure on small numbers
        /// of nodes. Default percentage is zero.
        ///
        /// In large clusters, some nodes will always be down or out for
        /// repairs, so this percentage should be configured to tolerate that.
        ///
        /// </summary>
        [JsonProperty(PropertyName = "maxPercentUnhealthyNodes")]
        public int? MaxPercentUnhealthyNodes { get; set; }

        /// <summary>
        /// Gets or sets the maximum allowed percentage of unhealthy
        /// applications before reporting an error. For example, to allow 10%
        /// of applications to be unhealthy, this value would be 10.
        ///
        /// The percentage represents the maximum tolerated percentage of
        /// applications that can be unhealthy before the cluster is considered
        /// in error.
        /// If the percentage is respected but there is at least one unhealthy
        /// application, the health is evaluated as Warning.
        /// This is calculated by dividing the number of unhealthy applications
        /// over the total number of application instances in the cluster,
        /// excluding applications of application types that are included in
        /// the ApplicationTypeHealthPolicyMap.
        /// The computation rounds up to tolerate one failure on small numbers
        /// of applications. Default percentage is zero.
        ///
        /// </summary>
        [JsonProperty(PropertyName = "maxPercentUnhealthyApplications")]
        public int? MaxPercentUnhealthyApplications { get; set; }

        /// <summary>
        /// Gets or sets defines the application health policy map used to
        /// evaluate the health of an application or one of its children
        /// entities.
        /// </summary>
        [JsonProperty(PropertyName = "applicationHealthPolicies")]
        public IDictionary<string, ApplicationHealthPolicy> ApplicationHealthPolicies { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (MaxPercentUnhealthyNodes > 100)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "MaxPercentUnhealthyNodes", 100);
            }
            if (MaxPercentUnhealthyNodes < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "MaxPercentUnhealthyNodes", 0);
            }
            if (MaxPercentUnhealthyApplications > 100)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "MaxPercentUnhealthyApplications", 100);
            }
            if (MaxPercentUnhealthyApplications < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "MaxPercentUnhealthyApplications", 0);
            }
            if (ApplicationHealthPolicies != null)
            {
                foreach (var valueElement in ApplicationHealthPolicies.Values)
                {
                    if (valueElement != null)
                    {
                        valueElement.Validate();
                    }
                }
            }
        }
    }
}
