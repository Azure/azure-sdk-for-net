// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ServiceFabric.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Represents the health policy used to evaluate the health of services
    /// belonging to a service type.
    ///
    /// </summary>
    public partial class ServiceTypeHealthPolicy
    {
        /// <summary>
        /// Initializes a new instance of the ServiceTypeHealthPolicy class.
        /// </summary>
        public ServiceTypeHealthPolicy()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ServiceTypeHealthPolicy class.
        /// </summary>
        /// <param name="maxPercentUnhealthyServices">The maximum percentage of
        /// services allowed to be unhealthy before your application is
        /// considered in error.
        /// </param>
        public ServiceTypeHealthPolicy(int? maxPercentUnhealthyServices = default(int?))
        {
            MaxPercentUnhealthyServices = maxPercentUnhealthyServices;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the maximum percentage of services allowed to be
        /// unhealthy before your application is considered in error.
        ///
        /// </summary>
        [JsonProperty(PropertyName = "maxPercentUnhealthyServices")]
        public int? MaxPercentUnhealthyServices { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (MaxPercentUnhealthyServices > 100)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "MaxPercentUnhealthyServices", 100);
            }
            if (MaxPercentUnhealthyServices < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "MaxPercentUnhealthyServices", 0);
            }
        }
    }
}
