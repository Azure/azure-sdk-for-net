// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ServiceFabric.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Describes the named partition scheme of the service.
    /// </summary>
    [Newtonsoft.Json.JsonObject("Named")]
    public partial class NamedPartitionSchemeDescription : PartitionSchemeDescription
    {
        /// <summary>
        /// Initializes a new instance of the NamedPartitionSchemeDescription
        /// class.
        /// </summary>
        public NamedPartitionSchemeDescription()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the NamedPartitionSchemeDescription
        /// class.
        /// </summary>
        /// <param name="count">The number of partitions.</param>
        /// <param name="names">Array of size specified by the ‘count’
        /// parameter, for the names of the partitions.</param>
        public NamedPartitionSchemeDescription(int count, IList<string> names)
        {
            Count = count;
            Names = names;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the number of partitions.
        /// </summary>
        [JsonProperty(PropertyName = "count")]
        public int Count { get; set; }

        /// <summary>
        /// Gets or sets array of size specified by the ‘count’ parameter, for
        /// the names of the partitions.
        /// </summary>
        [JsonProperty(PropertyName = "names")]
        public IList<string> Names { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Names == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Names");
            }
        }
    }
}
