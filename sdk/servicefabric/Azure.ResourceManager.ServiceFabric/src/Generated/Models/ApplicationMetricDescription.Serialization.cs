// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ServiceFabric.Models
{
    public partial class ApplicationMetricDescription : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Name))
            {
                writer.WritePropertyName("name");
                writer.WriteStringValue(Name);
            }
            if (Optional.IsDefined(MaximumCapacity))
            {
                writer.WritePropertyName("maximumCapacity");
                writer.WriteNumberValue(MaximumCapacity.Value);
            }
            if (Optional.IsDefined(ReservationCapacity))
            {
                writer.WritePropertyName("reservationCapacity");
                writer.WriteNumberValue(ReservationCapacity.Value);
            }
            if (Optional.IsDefined(TotalApplicationCapacity))
            {
                writer.WritePropertyName("totalApplicationCapacity");
                writer.WriteNumberValue(TotalApplicationCapacity.Value);
            }
            writer.WriteEndObject();
        }

        internal static ApplicationMetricDescription DeserializeApplicationMetricDescription(JsonElement element)
        {
            Optional<string> name = default;
            Optional<long> maximumCapacity = default;
            Optional<long> reservationCapacity = default;
            Optional<long> totalApplicationCapacity = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("maximumCapacity"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    maximumCapacity = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("reservationCapacity"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    reservationCapacity = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("totalApplicationCapacity"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    totalApplicationCapacity = property.Value.GetInt64();
                    continue;
                }
            }
            return new ApplicationMetricDescription(name.Value, Optional.ToNullable(maximumCapacity), Optional.ToNullable(reservationCapacity), Optional.ToNullable(totalApplicationCapacity));
        }
    }
}
