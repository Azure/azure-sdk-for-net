// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.ResourceManager.ServiceFabric.Models
{
    /// <summary>
    /// Describes the policy used when upgrading the cluster.
    /// Serialized Name: ClusterUpgradePolicy
    /// </summary>
    public partial class ClusterUpgradePolicy
    {
        /// <summary> Initializes a new instance of ClusterUpgradePolicy. </summary>
        /// <param name="upgradeReplicaSetCheckTimeout">
        /// The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
        /// Serialized Name: ClusterUpgradePolicy.upgradeReplicaSetCheckTimeout
        /// </param>
        /// <param name="healthCheckWaitDuration">
        /// The length of time to wait after completing an upgrade domain before performing health checks. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
        /// Serialized Name: ClusterUpgradePolicy.healthCheckWaitDuration
        /// </param>
        /// <param name="healthCheckStableDuration">
        /// The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
        /// Serialized Name: ClusterUpgradePolicy.healthCheckStableDuration
        /// </param>
        /// <param name="healthCheckRetryTimeout">
        /// The amount of time to retry health evaluation when the application or cluster is unhealthy before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
        /// Serialized Name: ClusterUpgradePolicy.healthCheckRetryTimeout
        /// </param>
        /// <param name="upgradeTimeout">
        /// The amount of time the overall upgrade has to complete before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
        /// Serialized Name: ClusterUpgradePolicy.upgradeTimeout
        /// </param>
        /// <param name="upgradeDomainTimeout">
        /// The amount of time each upgrade domain has to complete before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
        /// Serialized Name: ClusterUpgradePolicy.upgradeDomainTimeout
        /// </param>
        /// <param name="healthPolicy">
        /// The cluster health policy used when upgrading the cluster.
        /// Serialized Name: ClusterUpgradePolicy.healthPolicy
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="healthPolicy"/> is null. </exception>
        public ClusterUpgradePolicy(TimeSpan upgradeReplicaSetCheckTimeout, TimeSpan healthCheckWaitDuration, TimeSpan healthCheckStableDuration, TimeSpan healthCheckRetryTimeout, TimeSpan upgradeTimeout, TimeSpan upgradeDomainTimeout, ClusterHealthPolicy healthPolicy)
        {
            if (healthPolicy == null)
            {
                throw new ArgumentNullException(nameof(healthPolicy));
            }

            UpgradeReplicaSetCheckTimeout = upgradeReplicaSetCheckTimeout;
            HealthCheckWaitDuration = healthCheckWaitDuration;
            HealthCheckStableDuration = healthCheckStableDuration;
            HealthCheckRetryTimeout = healthCheckRetryTimeout;
            UpgradeTimeout = upgradeTimeout;
            UpgradeDomainTimeout = upgradeDomainTimeout;
            HealthPolicy = healthPolicy;
        }

        /// <summary> Initializes a new instance of ClusterUpgradePolicy. </summary>
        /// <param name="forceRestart">
        /// If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).
        /// Serialized Name: ClusterUpgradePolicy.forceRestart
        /// </param>
        /// <param name="upgradeReplicaSetCheckTimeout">
        /// The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
        /// Serialized Name: ClusterUpgradePolicy.upgradeReplicaSetCheckTimeout
        /// </param>
        /// <param name="healthCheckWaitDuration">
        /// The length of time to wait after completing an upgrade domain before performing health checks. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
        /// Serialized Name: ClusterUpgradePolicy.healthCheckWaitDuration
        /// </param>
        /// <param name="healthCheckStableDuration">
        /// The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
        /// Serialized Name: ClusterUpgradePolicy.healthCheckStableDuration
        /// </param>
        /// <param name="healthCheckRetryTimeout">
        /// The amount of time to retry health evaluation when the application or cluster is unhealthy before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
        /// Serialized Name: ClusterUpgradePolicy.healthCheckRetryTimeout
        /// </param>
        /// <param name="upgradeTimeout">
        /// The amount of time the overall upgrade has to complete before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
        /// Serialized Name: ClusterUpgradePolicy.upgradeTimeout
        /// </param>
        /// <param name="upgradeDomainTimeout">
        /// The amount of time each upgrade domain has to complete before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
        /// Serialized Name: ClusterUpgradePolicy.upgradeDomainTimeout
        /// </param>
        /// <param name="healthPolicy">
        /// The cluster health policy used when upgrading the cluster.
        /// Serialized Name: ClusterUpgradePolicy.healthPolicy
        /// </param>
        /// <param name="deltaHealthPolicy">
        /// The cluster delta health policy used when upgrading the cluster.
        /// Serialized Name: ClusterUpgradePolicy.deltaHealthPolicy
        /// </param>
        internal ClusterUpgradePolicy(bool? forceRestart, TimeSpan upgradeReplicaSetCheckTimeout, TimeSpan healthCheckWaitDuration, TimeSpan healthCheckStableDuration, TimeSpan healthCheckRetryTimeout, TimeSpan upgradeTimeout, TimeSpan upgradeDomainTimeout, ClusterHealthPolicy healthPolicy, ClusterUpgradeDeltaHealthPolicy deltaHealthPolicy)
        {
            ForceRestart = forceRestart;
            UpgradeReplicaSetCheckTimeout = upgradeReplicaSetCheckTimeout;
            HealthCheckWaitDuration = healthCheckWaitDuration;
            HealthCheckStableDuration = healthCheckStableDuration;
            HealthCheckRetryTimeout = healthCheckRetryTimeout;
            UpgradeTimeout = upgradeTimeout;
            UpgradeDomainTimeout = upgradeDomainTimeout;
            HealthPolicy = healthPolicy;
            DeltaHealthPolicy = deltaHealthPolicy;
        }

        /// <summary>
        /// If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).
        /// Serialized Name: ClusterUpgradePolicy.forceRestart
        /// </summary>
        public bool? ForceRestart { get; set; }
        /// <summary>
        /// The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
        /// Serialized Name: ClusterUpgradePolicy.upgradeReplicaSetCheckTimeout
        /// </summary>
        public TimeSpan UpgradeReplicaSetCheckTimeout { get; set; }
        /// <summary>
        /// The length of time to wait after completing an upgrade domain before performing health checks. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
        /// Serialized Name: ClusterUpgradePolicy.healthCheckWaitDuration
        /// </summary>
        public TimeSpan HealthCheckWaitDuration { get; set; }
        /// <summary>
        /// The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
        /// Serialized Name: ClusterUpgradePolicy.healthCheckStableDuration
        /// </summary>
        public TimeSpan HealthCheckStableDuration { get; set; }
        /// <summary>
        /// The amount of time to retry health evaluation when the application or cluster is unhealthy before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
        /// Serialized Name: ClusterUpgradePolicy.healthCheckRetryTimeout
        /// </summary>
        public TimeSpan HealthCheckRetryTimeout { get; set; }
        /// <summary>
        /// The amount of time the overall upgrade has to complete before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
        /// Serialized Name: ClusterUpgradePolicy.upgradeTimeout
        /// </summary>
        public TimeSpan UpgradeTimeout { get; set; }
        /// <summary>
        /// The amount of time each upgrade domain has to complete before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
        /// Serialized Name: ClusterUpgradePolicy.upgradeDomainTimeout
        /// </summary>
        public TimeSpan UpgradeDomainTimeout { get; set; }
        /// <summary>
        /// The cluster health policy used when upgrading the cluster.
        /// Serialized Name: ClusterUpgradePolicy.healthPolicy
        /// </summary>
        public ClusterHealthPolicy HealthPolicy { get; set; }
        /// <summary>
        /// The cluster delta health policy used when upgrading the cluster.
        /// Serialized Name: ClusterUpgradePolicy.deltaHealthPolicy
        /// </summary>
        public ClusterUpgradeDeltaHealthPolicy DeltaHealthPolicy { get; set; }
    }
}
