// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ServiceFabric.Models
{
    public partial class ClusterNotification : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("isEnabled"u8);
            writer.WriteBooleanValue(IsEnabled);
            writer.WritePropertyName("notificationCategory"u8);
            writer.WriteStringValue(NotificationCategory.ToString());
            writer.WritePropertyName("notificationLevel"u8);
            writer.WriteStringValue(NotificationLevel.ToString());
            writer.WritePropertyName("notificationTargets"u8);
            writer.WriteStartArray();
            foreach (var item in NotificationTargets)
            {
                writer.WriteObjectValue(item);
            }
            writer.WriteEndArray();
            writer.WriteEndObject();
        }

        internal static ClusterNotification DeserializeClusterNotification(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            bool isEnabled = default;
            ClusterNotificationCategory notificationCategory = default;
            ClusterNotificationLevel notificationLevel = default;
            IList<ClusterNotificationTarget> notificationTargets = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("isEnabled"u8))
                {
                    isEnabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("notificationCategory"u8))
                {
                    notificationCategory = new ClusterNotificationCategory(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("notificationLevel"u8))
                {
                    notificationLevel = new ClusterNotificationLevel(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("notificationTargets"u8))
                {
                    List<ClusterNotificationTarget> array = new List<ClusterNotificationTarget>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ClusterNotificationTarget.DeserializeClusterNotificationTarget(item));
                    }
                    notificationTargets = array;
                    continue;
                }
            }
            return new ClusterNotification(isEnabled, notificationCategory, notificationLevel, notificationTargets);
        }
    }
}
