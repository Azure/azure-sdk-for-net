// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ServiceFabric.Models
{
    /// <summary> The local certificate store location. </summary>
    public readonly partial struct StoreName : IEquatable<StoreName>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="StoreName"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public StoreName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AddressBookValue = "AddressBook";
        private const string AuthRootValue = "AuthRoot";
        private const string CertificateAuthorityValue = "CertificateAuthority";
        private const string DisallowedValue = "Disallowed";
        private const string MyValue = "My";
        private const string RootValue = "Root";
        private const string TrustedPeopleValue = "TrustedPeople";
        private const string TrustedPublisherValue = "TrustedPublisher";

        /// <summary> AddressBook. </summary>
        public static StoreName AddressBook { get; } = new StoreName(AddressBookValue);
        /// <summary> AuthRoot. </summary>
        public static StoreName AuthRoot { get; } = new StoreName(AuthRootValue);
        /// <summary> CertificateAuthority. </summary>
        public static StoreName CertificateAuthority { get; } = new StoreName(CertificateAuthorityValue);
        /// <summary> Disallowed. </summary>
        public static StoreName Disallowed { get; } = new StoreName(DisallowedValue);
        /// <summary> My. </summary>
        public static StoreName My { get; } = new StoreName(MyValue);
        /// <summary> Root. </summary>
        public static StoreName Root { get; } = new StoreName(RootValue);
        /// <summary> TrustedPeople. </summary>
        public static StoreName TrustedPeople { get; } = new StoreName(TrustedPeopleValue);
        /// <summary> TrustedPublisher. </summary>
        public static StoreName TrustedPublisher { get; } = new StoreName(TrustedPublisherValue);
        /// <summary> Determines if two <see cref="StoreName"/> values are the same. </summary>
        public static bool operator ==(StoreName left, StoreName right) => left.Equals(right);
        /// <summary> Determines if two <see cref="StoreName"/> values are not the same. </summary>
        public static bool operator !=(StoreName left, StoreName right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="StoreName"/>. </summary>
        public static implicit operator StoreName(string value) => new StoreName(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is StoreName other && Equals(other);
        /// <inheritdoc />
        public bool Equals(StoreName other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
