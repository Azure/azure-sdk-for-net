// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.ResourceManager.ServiceFabric.Models
{
    /// <summary>
    /// Describes the named partition scheme of the service.
    /// Serialized Name: NamedPartitionSchemeDescription
    /// </summary>
    public partial class NamedPartitionSchemeDescription : PartitionSchemeDescription
    {
        /// <summary> Initializes a new instance of NamedPartitionSchemeDescription. </summary>
        /// <param name="count">
        /// The number of partitions.
        /// Serialized Name: NamedPartitionSchemeDescription.count
        /// </param>
        /// <param name="names">
        /// Array of size specified by the ‘count’ parameter, for the names of the partitions.
        /// Serialized Name: NamedPartitionSchemeDescription.names
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="names"/> is null. </exception>
        public NamedPartitionSchemeDescription(int count, IEnumerable<string> names)
        {
            if (names == null)
            {
                throw new ArgumentNullException(nameof(names));
            }

            Count = count;
            Names = names.ToList();
            PartitionScheme = ApplicationPartitionScheme.Named;
        }

        /// <summary> Initializes a new instance of NamedPartitionSchemeDescription. </summary>
        /// <param name="partitionScheme">
        /// Specifies how the service is partitioned.
        /// Serialized Name: PartitionSchemeDescription.partitionScheme
        /// </param>
        /// <param name="count">
        /// The number of partitions.
        /// Serialized Name: NamedPartitionSchemeDescription.count
        /// </param>
        /// <param name="names">
        /// Array of size specified by the ‘count’ parameter, for the names of the partitions.
        /// Serialized Name: NamedPartitionSchemeDescription.names
        /// </param>
        internal NamedPartitionSchemeDescription(ApplicationPartitionScheme partitionScheme, int count, IList<string> names) : base(partitionScheme)
        {
            Count = count;
            Names = names;
            PartitionScheme = partitionScheme;
        }

        /// <summary>
        /// The number of partitions.
        /// Serialized Name: NamedPartitionSchemeDescription.count
        /// </summary>
        public int Count { get; set; }
        /// <summary>
        /// Array of size specified by the ‘count’ parameter, for the names of the partitions.
        /// Serialized Name: NamedPartitionSchemeDescription.names
        /// </summary>
        public IList<string> Names { get; }
    }
}
