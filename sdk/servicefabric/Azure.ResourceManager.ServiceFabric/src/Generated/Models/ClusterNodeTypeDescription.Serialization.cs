// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ServiceFabric.Models
{
    public partial class ClusterNodeTypeDescription : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("name"u8);
            writer.WriteStringValue(Name);
            if (Core.Optional.IsCollectionDefined(PlacementProperties))
            {
                writer.WritePropertyName("placementProperties"u8);
                writer.WriteStartObject();
                foreach (var item in PlacementProperties)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Core.Optional.IsCollectionDefined(Capacities))
            {
                writer.WritePropertyName("capacities"u8);
                writer.WriteStartObject();
                foreach (var item in Capacities)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            writer.WritePropertyName("clientConnectionEndpointPort"u8);
            writer.WriteNumberValue(ClientConnectionEndpointPort);
            writer.WritePropertyName("httpGatewayEndpointPort"u8);
            writer.WriteNumberValue(HttpGatewayEndpointPort);
            if (Core.Optional.IsDefined(DurabilityLevel))
            {
                writer.WritePropertyName("durabilityLevel"u8);
                writer.WriteStringValue(DurabilityLevel.Value.ToString());
            }
            if (Core.Optional.IsDefined(ApplicationPorts))
            {
                writer.WritePropertyName("applicationPorts"u8);
                writer.WriteObjectValue(ApplicationPorts);
            }
            if (Core.Optional.IsDefined(EphemeralPorts))
            {
                writer.WritePropertyName("ephemeralPorts"u8);
                writer.WriteObjectValue(EphemeralPorts);
            }
            writer.WritePropertyName("isPrimary"u8);
            writer.WriteBooleanValue(IsPrimary);
            writer.WritePropertyName("vmInstanceCount"u8);
            writer.WriteNumberValue(VmInstanceCount);
            if (Core.Optional.IsDefined(ReverseProxyEndpointPort))
            {
                writer.WritePropertyName("reverseProxyEndpointPort"u8);
                writer.WriteNumberValue(ReverseProxyEndpointPort.Value);
            }
            if (Core.Optional.IsDefined(IsStateless))
            {
                writer.WritePropertyName("isStateless"u8);
                writer.WriteBooleanValue(IsStateless.Value);
            }
            if (Core.Optional.IsDefined(IsMultipleAvailabilityZonesSupported))
            {
                writer.WritePropertyName("multipleAvailabilityZones"u8);
                writer.WriteBooleanValue(IsMultipleAvailabilityZonesSupported.Value);
            }
            writer.WriteEndObject();
        }

        internal static ClusterNodeTypeDescription DeserializeClusterNodeTypeDescription(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string name = default;
            Core.Optional<IDictionary<string, string>> placementProperties = default;
            Core.Optional<IDictionary<string, string>> capacities = default;
            int clientConnectionEndpointPort = default;
            int httpGatewayEndpointPort = default;
            Core.Optional<ClusterDurabilityLevel> durabilityLevel = default;
            Core.Optional<ClusterEndpointRangeDescription> applicationPorts = default;
            Core.Optional<ClusterEndpointRangeDescription> ephemeralPorts = default;
            bool isPrimary = default;
            int vmInstanceCount = default;
            Core.Optional<int> reverseProxyEndpointPort = default;
            Core.Optional<bool> isStateless = default;
            Core.Optional<bool> multipleAvailabilityZones = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("placementProperties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    placementProperties = dictionary;
                    continue;
                }
                if (property.NameEquals("capacities"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    capacities = dictionary;
                    continue;
                }
                if (property.NameEquals("clientConnectionEndpointPort"u8))
                {
                    clientConnectionEndpointPort = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("httpGatewayEndpointPort"u8))
                {
                    httpGatewayEndpointPort = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("durabilityLevel"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    durabilityLevel = new ClusterDurabilityLevel(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("applicationPorts"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    applicationPorts = ClusterEndpointRangeDescription.DeserializeClusterEndpointRangeDescription(property.Value);
                    continue;
                }
                if (property.NameEquals("ephemeralPorts"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    ephemeralPorts = ClusterEndpointRangeDescription.DeserializeClusterEndpointRangeDescription(property.Value);
                    continue;
                }
                if (property.NameEquals("isPrimary"u8))
                {
                    isPrimary = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("vmInstanceCount"u8))
                {
                    vmInstanceCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("reverseProxyEndpointPort"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    reverseProxyEndpointPort = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("isStateless"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isStateless = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("multipleAvailabilityZones"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    multipleAvailabilityZones = property.Value.GetBoolean();
                    continue;
                }
            }
            return new ClusterNodeTypeDescription(name, Core.Optional.ToDictionary(placementProperties), Core.Optional.ToDictionary(capacities), clientConnectionEndpointPort, httpGatewayEndpointPort, Core.Optional.ToNullable(durabilityLevel), applicationPorts.Value, ephemeralPorts.Value, isPrimary, vmInstanceCount, Core.Optional.ToNullable(reverseProxyEndpointPort), Core.Optional.ToNullable(isStateless), Core.Optional.ToNullable(multipleAvailabilityZones));
        }
    }
}
