// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ServiceFabric.Models
{
    /// <summary>
    /// The durability level of the node type. Learn about [DurabilityLevel](https://docs.microsoft.com/azure/service-fabric/service-fabric-cluster-capacity).
    /// 
    ///   - Bronze - No privileges. This is the default.
    ///   - Silver - The infrastructure jobs can be paused for a duration of 10 minutes per UD.
    ///   - Gold - The infrastructure jobs can be paused for a duration of 2 hours per UD. Gold durability can be enabled only on full node VM skus like D15_V2, G5 etc.
    /// 
    /// </summary>
    public readonly partial struct DurabilityLevel : IEquatable<DurabilityLevel>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DurabilityLevel"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DurabilityLevel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string BronzeValue = "Bronze";
        private const string SilverValue = "Silver";
        private const string GoldValue = "Gold";

        /// <summary> Bronze. </summary>
        public static DurabilityLevel Bronze { get; } = new DurabilityLevel(BronzeValue);
        /// <summary> Silver. </summary>
        public static DurabilityLevel Silver { get; } = new DurabilityLevel(SilverValue);
        /// <summary> Gold. </summary>
        public static DurabilityLevel Gold { get; } = new DurabilityLevel(GoldValue);
        /// <summary> Determines if two <see cref="DurabilityLevel"/> values are the same. </summary>
        public static bool operator ==(DurabilityLevel left, DurabilityLevel right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DurabilityLevel"/> values are not the same. </summary>
        public static bool operator !=(DurabilityLevel left, DurabilityLevel right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="DurabilityLevel"/>. </summary>
        public static implicit operator DurabilityLevel(string value) => new DurabilityLevel(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DurabilityLevel other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DurabilityLevel other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
