// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ServiceFabric.Models
{
    public partial class ApplicationUpgradePolicy : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(UpgradeReplicaSetCheckTimeout))
            {
                writer.WritePropertyName("upgradeReplicaSetCheckTimeout");
                writer.WriteStringValue(UpgradeReplicaSetCheckTimeout);
            }
            if (Optional.IsDefined(ForceRestart))
            {
                writer.WritePropertyName("forceRestart");
                writer.WriteBooleanValue(ForceRestart.Value);
            }
            if (Optional.IsDefined(RollingUpgradeMonitoringPolicy))
            {
                writer.WritePropertyName("rollingUpgradeMonitoringPolicy");
                writer.WriteObjectValue(RollingUpgradeMonitoringPolicy);
            }
            if (Optional.IsDefined(ApplicationHealthPolicy))
            {
                writer.WritePropertyName("applicationHealthPolicy");
                writer.WriteObjectValue(ApplicationHealthPolicy);
            }
            if (Optional.IsDefined(UpgradeMode))
            {
                writer.WritePropertyName("upgradeMode");
                writer.WriteStringValue(UpgradeMode.Value.ToString());
            }
            if (Optional.IsDefined(RecreateApplication))
            {
                writer.WritePropertyName("recreateApplication");
                writer.WriteBooleanValue(RecreateApplication.Value);
            }
            writer.WriteEndObject();
        }

        internal static ApplicationUpgradePolicy DeserializeApplicationUpgradePolicy(JsonElement element)
        {
            Optional<string> upgradeReplicaSetCheckTimeout = default;
            Optional<bool> forceRestart = default;
            Optional<ArmRollingUpgradeMonitoringPolicy> rollingUpgradeMonitoringPolicy = default;
            Optional<ArmApplicationHealthPolicy> applicationHealthPolicy = default;
            Optional<RollingUpgradeMode> upgradeMode = default;
            Optional<bool> recreateApplication = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("upgradeReplicaSetCheckTimeout"))
                {
                    upgradeReplicaSetCheckTimeout = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("forceRestart"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    forceRestart = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("rollingUpgradeMonitoringPolicy"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    rollingUpgradeMonitoringPolicy = ArmRollingUpgradeMonitoringPolicy.DeserializeArmRollingUpgradeMonitoringPolicy(property.Value);
                    continue;
                }
                if (property.NameEquals("applicationHealthPolicy"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    applicationHealthPolicy = ArmApplicationHealthPolicy.DeserializeArmApplicationHealthPolicy(property.Value);
                    continue;
                }
                if (property.NameEquals("upgradeMode"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    upgradeMode = new RollingUpgradeMode(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("recreateApplication"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    recreateApplication = property.Value.GetBoolean();
                    continue;
                }
            }
            return new ApplicationUpgradePolicy(upgradeReplicaSetCheckTimeout.Value, Optional.ToNullable(forceRestart), rollingUpgradeMonitoringPolicy.Value, applicationHealthPolicy.Value, Optional.ToNullable(upgradeMode), Optional.ToNullable(recreateApplication));
        }
    }
}
