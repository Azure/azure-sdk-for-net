// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ServiceFabric.Models
{
    public partial class ArmRollingUpgradeMonitoringPolicy : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(FailureAction))
            {
                writer.WritePropertyName("failureAction");
                writer.WriteStringValue(FailureAction.Value.ToString());
            }
            if (Optional.IsDefined(HealthCheckWaitDuration))
            {
                writer.WritePropertyName("healthCheckWaitDuration");
                writer.WriteStringValue(HealthCheckWaitDuration.Value, "c");
            }
            if (Optional.IsDefined(HealthCheckStableDuration))
            {
                writer.WritePropertyName("healthCheckStableDuration");
                writer.WriteStringValue(HealthCheckStableDuration.Value, "c");
            }
            if (Optional.IsDefined(HealthCheckRetryTimeout))
            {
                writer.WritePropertyName("healthCheckRetryTimeout");
                writer.WriteStringValue(HealthCheckRetryTimeout.Value, "c");
            }
            if (Optional.IsDefined(UpgradeTimeout))
            {
                writer.WritePropertyName("upgradeTimeout");
                writer.WriteStringValue(UpgradeTimeout.Value, "c");
            }
            if (Optional.IsDefined(UpgradeDomainTimeout))
            {
                writer.WritePropertyName("upgradeDomainTimeout");
                writer.WriteStringValue(UpgradeDomainTimeout.Value, "c");
            }
            writer.WriteEndObject();
        }

        internal static ArmRollingUpgradeMonitoringPolicy DeserializeArmRollingUpgradeMonitoringPolicy(JsonElement element)
        {
            Optional<ArmUpgradeFailureAction> failureAction = default;
            Optional<TimeSpan> healthCheckWaitDuration = default;
            Optional<TimeSpan> healthCheckStableDuration = default;
            Optional<TimeSpan> healthCheckRetryTimeout = default;
            Optional<TimeSpan> upgradeTimeout = default;
            Optional<TimeSpan> upgradeDomainTimeout = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("failureAction"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    failureAction = new ArmUpgradeFailureAction(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("healthCheckWaitDuration"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    healthCheckWaitDuration = property.Value.GetTimeSpan("c");
                    continue;
                }
                if (property.NameEquals("healthCheckStableDuration"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    healthCheckStableDuration = property.Value.GetTimeSpan("c");
                    continue;
                }
                if (property.NameEquals("healthCheckRetryTimeout"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    healthCheckRetryTimeout = property.Value.GetTimeSpan("c");
                    continue;
                }
                if (property.NameEquals("upgradeTimeout"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    upgradeTimeout = property.Value.GetTimeSpan("c");
                    continue;
                }
                if (property.NameEquals("upgradeDomainTimeout"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    upgradeDomainTimeout = property.Value.GetTimeSpan("c");
                    continue;
                }
            }
            return new ArmRollingUpgradeMonitoringPolicy(Optional.ToNullable(failureAction), Optional.ToNullable(healthCheckWaitDuration), Optional.ToNullable(healthCheckStableDuration), Optional.ToNullable(healthCheckRetryTimeout), Optional.ToNullable(upgradeTimeout), Optional.ToNullable(upgradeDomainTimeout));
        }
    }
}
