// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.ServiceFabric;

namespace Azure.ResourceManager.ServiceFabric.Models
{
    /// <summary> Model factory for generated models. </summary>
    public static partial class ServiceFabricModelFactory
    {
        /// <summary> Initializes a new instance of ServiceFabricClusterData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="addOnFeatures"> The list of add-on features to enable in the cluster. </param>
        /// <param name="availableClusterVersions"> The Service Fabric runtime versions available for this cluster. </param>
        /// <param name="azureActiveDirectory"> The AAD authentication settings of the cluster. </param>
        /// <param name="certificate"> The certificate to use for securing the cluster. The certificate provided will be used for node to node security within the cluster, SSL certificate for cluster management endpoint and default admin client. </param>
        /// <param name="certificateCommonNames"> Describes a list of server certificates referenced by common name that are used to secure the cluster. </param>
        /// <param name="clientCertificateCommonNames"> The list of client certificates referenced by common name that are allowed to manage the cluster. </param>
        /// <param name="clientCertificateThumbprints"> The list of client certificates referenced by thumbprint that are allowed to manage the cluster. </param>
        /// <param name="clusterCodeVersion"> The Service Fabric runtime version of the cluster. This property can only by set the user when **upgradeMode** is set to &apos;Manual&apos;. To get list of available Service Fabric versions for new clusters use [ClusterVersion API](./ClusterVersion.md). To get the list of available version for existing clusters use **availableClusterVersions**. </param>
        /// <param name="clusterEndpoint"> The Azure Resource Provider endpoint. A system service in the cluster connects to this  endpoint. </param>
        /// <param name="clusterId"> A service generated unique identifier for the cluster resource. </param>
        /// <param name="clusterState">
        /// The current state of the cluster.
        /// 
        ///   - WaitingForNodes - Indicates that the cluster resource is created and the resource provider is waiting for Service Fabric VM extension to boot up and report to it.
        ///   - Deploying - Indicates that the Service Fabric runtime is being installed on the VMs. Cluster resource will be in this state until the cluster boots up and system services are up.
        ///   - BaselineUpgrade - Indicates that the cluster is upgrading to establishes the cluster version. This upgrade is automatically initiated when the cluster boots up for the first time.
        ///   - UpdatingUserConfiguration - Indicates that the cluster is being upgraded with the user provided configuration.
        ///   - UpdatingUserCertificate - Indicates that the cluster is being upgraded with the user provided certificate.
        ///   - UpdatingInfrastructure - Indicates that the cluster is being upgraded with the latest Service Fabric runtime version. This happens only when the **upgradeMode** is set to &apos;Automatic&apos;.
        ///   - EnforcingClusterVersion - Indicates that cluster is on a different version than expected and the cluster is being upgraded to the expected version.
        ///   - UpgradeServiceUnreachable - Indicates that the system service in the cluster is no longer polling the Resource Provider. Clusters in this state cannot be managed by the Resource Provider.
        ///   - AutoScale - Indicates that the ReliabilityLevel of the cluster is being adjusted.
        ///   - Ready - Indicates that the cluster is in a stable state.
        /// 
        /// </param>
        /// <param name="diagnosticsStorageAccountConfig"> The storage account information for storing Service Fabric diagnostic logs. </param>
        /// <param name="isEventStoreServiceEnabled"> Indicates if the event store service is enabled. </param>
        /// <param name="fabricSettings"> The list of custom fabric settings to configure the cluster. </param>
        /// <param name="managementEndpoint"> The http management endpoint of the cluster. </param>
        /// <param name="nodeTypes"> The list of node types in the cluster. </param>
        /// <param name="provisioningState"> The provisioning state of the cluster resource. </param>
        /// <param name="reliabilityLevel">
        /// The reliability level sets the replica set size of system services. Learn about [ReliabilityLevel](https://docs.microsoft.com/azure/service-fabric/service-fabric-cluster-capacity).
        /// 
        ///   - None - Run the System services with a target replica set count of 1. This should only be used for test clusters.
        ///   - Bronze - Run the System services with a target replica set count of 3. This should only be used for test clusters.
        ///   - Silver - Run the System services with a target replica set count of 5.
        ///   - Gold - Run the System services with a target replica set count of 7.
        ///   - Platinum - Run the System services with a target replica set count of 9.
        /// 
        /// </param>
        /// <param name="reverseProxyCertificate"> The server certificate used by reverse proxy. </param>
        /// <param name="reverseProxyCertificateCommonNames"> Describes a list of server certificates referenced by common name that are used to secure the cluster. </param>
        /// <param name="upgradeDescription"> The policy to use when upgrading the cluster. </param>
        /// <param name="upgradeMode"> The upgrade mode of the cluster when new Service Fabric runtime version is available. </param>
        /// <param name="maxUnusedVersionsToKeep"> The policy used to clean up unused versions. </param>
        /// <param name="vmImage"> The VM image VMSS has been configured with. Generic names such as Windows or Linux can be used. </param>
        /// <param name="serviceFabricZonalUpgradeMode"> This property controls the logical grouping of VMs in upgrade domains (UDs). This property can&apos;t be modified if a node type with multiple Availability Zones is already present in the cluster. </param>
        /// <param name="vmssZonalUpgradeMode"> This property defines the upgrade mode for the virtual machine scale set, it is mandatory if a node type with multiple Availability Zones is added. </param>
        /// <param name="isInfrastructureServiceManagerEnabled"> Indicates if infrastructure service manager is enabled. </param>
        /// <param name="upgradeWave"> Indicates when new cluster runtime version upgrades will be applied after they are released. By default is Wave0. Only applies when **upgradeMode** is set to &apos;Automatic&apos;. </param>
        /// <param name="upgradePauseStartOn"> Indicates the start date and time to pause automatic runtime version upgrades on the cluster for an specific period of time on the cluster (UTC). </param>
        /// <param name="upgradePauseEndOn"> Indicates the end date and time to pause automatic runtime version upgrades on the cluster for an specific period of time on the cluster (UTC). </param>
        /// <param name="isWaveUpgradePaused"> Boolean to pause automatic runtime version upgrades to the cluster. </param>
        /// <param name="notifications"> Indicates a list of notification channels for cluster events. </param>
        /// <param name="etag"> Azure resource etag. </param>
        /// <returns> A new <see cref="ServiceFabric.ServiceFabricClusterData"/> instance for mocking. </returns>
        public static ServiceFabricClusterData ServiceFabricClusterData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, IEnumerable<ClusterAddOnFeature> addOnFeatures = null, IEnumerable<ClusterVersionDetails> availableClusterVersions = null, ClusterAadSetting azureActiveDirectory = null, ClusterCertificateDescription certificate = null, ClusterServerCertificateCommonNames certificateCommonNames = null, IEnumerable<ClusterClientCertificateCommonName> clientCertificateCommonNames = null, IEnumerable<ClusterClientCertificateThumbprint> clientCertificateThumbprints = null, string clusterCodeVersion = null, Uri clusterEndpoint = null, Guid? clusterId = null, ServiceFabricClusterState? clusterState = null, DiagnosticsStorageAccountConfig diagnosticsStorageAccountConfig = null, bool? isEventStoreServiceEnabled = null, IEnumerable<SettingsSectionDescription> fabricSettings = null, Uri managementEndpoint = null, IEnumerable<ClusterNodeTypeDescription> nodeTypes = null, ServiceFabricProvisioningState? provisioningState = null, ClusterReliabilityLevel? reliabilityLevel = null, ClusterCertificateDescription reverseProxyCertificate = null, ClusterServerCertificateCommonNames reverseProxyCertificateCommonNames = null, ClusterUpgradePolicy upgradeDescription = null, ClusterUpgradeMode? upgradeMode = null, long? maxUnusedVersionsToKeep = null, string vmImage = null, SfZonalUpgradeMode? serviceFabricZonalUpgradeMode = null, VmssZonalUpgradeMode? vmssZonalUpgradeMode = null, bool? isInfrastructureServiceManagerEnabled = null, ClusterUpgradeCadence? upgradeWave = null, DateTimeOffset? upgradePauseStartOn = null, DateTimeOffset? upgradePauseEndOn = null, bool? isWaveUpgradePaused = null, IEnumerable<ClusterNotification> notifications = null, ETag? etag = null)
        {
            tags ??= new Dictionary<string, string>();
            addOnFeatures ??= new List<ClusterAddOnFeature>();
            availableClusterVersions ??= new List<ClusterVersionDetails>();
            clientCertificateCommonNames ??= new List<ClusterClientCertificateCommonName>();
            clientCertificateThumbprints ??= new List<ClusterClientCertificateThumbprint>();
            fabricSettings ??= new List<SettingsSectionDescription>();
            nodeTypes ??= new List<ClusterNodeTypeDescription>();
            notifications ??= new List<ClusterNotification>();

            return new ServiceFabricClusterData(id, name, resourceType, systemData, tags, location, addOnFeatures?.ToList(), availableClusterVersions?.ToList(), azureActiveDirectory, certificate, certificateCommonNames, clientCertificateCommonNames?.ToList(), clientCertificateThumbprints?.ToList(), clusterCodeVersion, clusterEndpoint, clusterId, clusterState, diagnosticsStorageAccountConfig, isEventStoreServiceEnabled, fabricSettings?.ToList(), managementEndpoint, nodeTypes?.ToList(), provisioningState, reliabilityLevel, reverseProxyCertificate, reverseProxyCertificateCommonNames, upgradeDescription, upgradeMode, maxUnusedVersionsToKeep.HasValue ? new ApplicationTypeVersionsCleanupPolicy(maxUnusedVersionsToKeep.Value) : null, vmImage, serviceFabricZonalUpgradeMode, vmssZonalUpgradeMode, isInfrastructureServiceManagerEnabled, upgradeWave, upgradePauseStartOn, upgradePauseEndOn, isWaveUpgradePaused, notifications?.ToList(), etag);
        }

        /// <summary> Initializes a new instance of ClusterVersionDetails. </summary>
        /// <param name="codeVersion"> The Service Fabric runtime version of the cluster. </param>
        /// <param name="supportExpireOn"> The date of expiry of support of the version. </param>
        /// <param name="environment"> Indicates if this version is for Windows or Linux operating system. </param>
        /// <returns> A new <see cref="Models.ClusterVersionDetails"/> instance for mocking. </returns>
        public static ClusterVersionDetails ClusterVersionDetails(string codeVersion = null, DateTimeOffset? supportExpireOn = null, ClusterEnvironment? environment = null)
        {
            return new ClusterVersionDetails(codeVersion, supportExpireOn, environment);
        }

        /// <summary> Initializes a new instance of ClusterAadSetting. </summary>
        /// <param name="tenantId"> Azure active directory tenant id. </param>
        /// <param name="clusterApplication"> Azure active directory cluster application id. </param>
        /// <param name="clientApplication"> Azure active directory client application id. </param>
        /// <returns> A new <see cref="Models.ClusterAadSetting"/> instance for mocking. </returns>
        public static ClusterAadSetting ClusterAadSetting(Guid? tenantId = null, string clusterApplication = null, string clientApplication = null)
        {
            return new ClusterAadSetting(tenantId, clusterApplication, clientApplication);
        }

        /// <summary> Initializes a new instance of ClusterCertificateDescription. </summary>
        /// <param name="thumbprint"> Thumbprint of the primary certificate. </param>
        /// <param name="thumbprintSecondary"> Thumbprint of the secondary certificate. </param>
        /// <param name="x509StoreName"> The local certificate store location. </param>
        /// <returns> A new <see cref="Models.ClusterCertificateDescription"/> instance for mocking. </returns>
        public static ClusterCertificateDescription ClusterCertificateDescription(BinaryData thumbprint = null, string thumbprintSecondary = null, ClusterCertificateStoreName? x509StoreName = null)
        {
            return new ClusterCertificateDescription(thumbprint, thumbprintSecondary, x509StoreName);
        }

        /// <summary> Initializes a new instance of ClusterServerCertificateCommonNames. </summary>
        /// <param name="commonNames"> The list of server certificates referenced by common name that are used to secure the cluster. </param>
        /// <param name="x509StoreName"> The local certificate store location. </param>
        /// <returns> A new <see cref="Models.ClusterServerCertificateCommonNames"/> instance for mocking. </returns>
        public static ClusterServerCertificateCommonNames ClusterServerCertificateCommonNames(IEnumerable<ClusterServerCertificateCommonName> commonNames = null, ClusterCertificateStoreName? x509StoreName = null)
        {
            commonNames ??= new List<ClusterServerCertificateCommonName>();

            return new ClusterServerCertificateCommonNames(commonNames?.ToList(), x509StoreName);
        }

        /// <summary> Initializes a new instance of DiagnosticsStorageAccountConfig. </summary>
        /// <param name="storageAccountName"> The Azure storage account name. </param>
        /// <param name="protectedAccountKeyName"> The protected diagnostics storage key name. </param>
        /// <param name="protectedAccountKeyName2"> The secondary protected diagnostics storage key name. If one of the storage account keys is rotated the cluster will fallback to using the other. </param>
        /// <param name="blobEndpoint"> The blob endpoint of the azure storage account. </param>
        /// <param name="queueEndpoint"> The queue endpoint of the azure storage account. </param>
        /// <param name="tableEndpoint"> The table endpoint of the azure storage account. </param>
        /// <returns> A new <see cref="Models.DiagnosticsStorageAccountConfig"/> instance for mocking. </returns>
        public static DiagnosticsStorageAccountConfig DiagnosticsStorageAccountConfig(string storageAccountName = null, string protectedAccountKeyName = null, string protectedAccountKeyName2 = null, Uri blobEndpoint = null, Uri queueEndpoint = null, Uri tableEndpoint = null)
        {
            return new DiagnosticsStorageAccountConfig(storageAccountName, protectedAccountKeyName, protectedAccountKeyName2, blobEndpoint, queueEndpoint, tableEndpoint);
        }

        /// <summary> Initializes a new instance of ClusterNodeTypeDescription. </summary>
        /// <param name="name"> The name of the node type. </param>
        /// <param name="placementProperties"> The placement tags applied to nodes in the node type, which can be used to indicate where certain services (workload) should run. </param>
        /// <param name="capacities"> The capacity tags applied to the nodes in the node type, the cluster resource manager uses these tags to understand how much resource a node has. </param>
        /// <param name="clientConnectionEndpointPort"> The TCP cluster management endpoint port. </param>
        /// <param name="httpGatewayEndpointPort"> The HTTP cluster management endpoint port. </param>
        /// <param name="durabilityLevel">
        /// The durability level of the node type. Learn about [DurabilityLevel](https://docs.microsoft.com/azure/service-fabric/service-fabric-cluster-capacity).
        /// 
        ///   - Bronze - No privileges. This is the default.
        ///   - Silver - The infrastructure jobs can be paused for a duration of 10 minutes per UD.
        ///   - Gold - The infrastructure jobs can be paused for a duration of 2 hours per UD. Gold durability can be enabled only on full node VM skus like D15_V2, G5 etc.
        /// 
        /// </param>
        /// <param name="applicationPorts"> The range of ports from which cluster assigned port to Service Fabric applications. </param>
        /// <param name="ephemeralPorts"> The range of ephemeral ports that nodes in this node type should be configured with. </param>
        /// <param name="isPrimary"> The node type on which system services will run. Only one node type should be marked as primary. Primary node type cannot be deleted or changed for existing clusters. </param>
        /// <param name="vmInstanceCount"> VMInstanceCount should be 1 to n, where n indicates the number of VM instances corresponding to this nodeType. VMInstanceCount = 0 can be done only in these scenarios: NodeType is a secondary nodeType. Durability = Bronze or Durability &gt;= Bronze and InfrastructureServiceManager = true. If VMInstanceCount = 0, implies the VMs for this nodeType will not be used for the initial cluster size computation. </param>
        /// <param name="reverseProxyEndpointPort"> The endpoint used by reverse proxy. </param>
        /// <param name="isStateless"> Indicates if the node type can only host Stateless workloads. </param>
        /// <param name="isMultipleAvailabilityZonesSupported"> Indicates if the node type is enabled to support multiple zones. </param>
        /// <returns> A new <see cref="Models.ClusterNodeTypeDescription"/> instance for mocking. </returns>
        public static ClusterNodeTypeDescription ClusterNodeTypeDescription(string name = null, IDictionary<string, string> placementProperties = null, IDictionary<string, string> capacities = null, int clientConnectionEndpointPort = default, int httpGatewayEndpointPort = default, ClusterDurabilityLevel? durabilityLevel = null, ClusterEndpointRangeDescription applicationPorts = null, ClusterEndpointRangeDescription ephemeralPorts = null, bool isPrimary = default, int vmInstanceCount = default, int? reverseProxyEndpointPort = null, bool? isStateless = null, bool? isMultipleAvailabilityZonesSupported = null)
        {
            placementProperties ??= new Dictionary<string, string>();
            capacities ??= new Dictionary<string, string>();

            return new ClusterNodeTypeDescription(name, placementProperties, capacities, clientConnectionEndpointPort, httpGatewayEndpointPort, durabilityLevel, applicationPorts, ephemeralPorts, isPrimary, vmInstanceCount, reverseProxyEndpointPort, isStateless, isMultipleAvailabilityZonesSupported);
        }

        /// <summary> Initializes a new instance of ClusterUpgradePolicy. </summary>
        /// <param name="forceRestart"> If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data). </param>
        /// <param name="upgradeReplicaSetCheckTimeout"> The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format. </param>
        /// <param name="healthCheckWaitDuration"> The length of time to wait after completing an upgrade domain before performing health checks. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms format. </param>
        /// <param name="healthCheckStableDuration"> The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms format. </param>
        /// <param name="healthCheckRetryTimeout"> The amount of time to retry health evaluation when the application or cluster is unhealthy before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format. </param>
        /// <param name="upgradeTimeout"> The amount of time the overall upgrade has to complete before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format. </param>
        /// <param name="upgradeDomainTimeout"> The amount of time each upgrade domain has to complete before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format. </param>
        /// <param name="healthPolicy"> The cluster health policy used when upgrading the cluster. </param>
        /// <param name="deltaHealthPolicy"> The cluster delta health policy used when upgrading the cluster. </param>
        /// <returns> A new <see cref="Models.ClusterUpgradePolicy"/> instance for mocking. </returns>
        public static ClusterUpgradePolicy ClusterUpgradePolicy(bool? forceRestart = null, TimeSpan upgradeReplicaSetCheckTimeout = default, TimeSpan healthCheckWaitDuration = default, TimeSpan healthCheckStableDuration = default, TimeSpan healthCheckRetryTimeout = default, TimeSpan upgradeTimeout = default, TimeSpan upgradeDomainTimeout = default, ClusterHealthPolicy healthPolicy = null, ClusterUpgradeDeltaHealthPolicy deltaHealthPolicy = null)
        {
            return new ClusterUpgradePolicy(forceRestart, upgradeReplicaSetCheckTimeout, healthCheckWaitDuration, healthCheckStableDuration, healthCheckRetryTimeout, upgradeTimeout, upgradeDomainTimeout, healthPolicy, deltaHealthPolicy);
        }

        /// <summary> Initializes a new instance of ClusterHealthPolicy. </summary>
        /// <param name="maxPercentUnhealthyNodes">
        /// The maximum allowed percentage of unhealthy nodes before reporting an error. For example, to allow 10% of nodes to be unhealthy, this value would be 10.
        /// 
        /// The percentage represents the maximum tolerated percentage of nodes that can be unhealthy before the cluster is considered in error.
        /// If the percentage is respected but there is at least one unhealthy node, the health is evaluated as Warning.
        /// The percentage is calculated by dividing the number of unhealthy nodes over the total number of nodes in the cluster.
        /// The computation rounds up to tolerate one failure on small numbers of nodes. Default percentage is zero.
        /// 
        /// In large clusters, some nodes will always be down or out for repairs, so this percentage should be configured to tolerate that.
        /// 
        /// </param>
        /// <param name="maxPercentUnhealthyApplications">
        /// The maximum allowed percentage of unhealthy applications before reporting an error. For example, to allow 10% of applications to be unhealthy, this value would be 10.
        /// 
        /// The percentage represents the maximum tolerated percentage of applications that can be unhealthy before the cluster is considered in error.
        /// If the percentage is respected but there is at least one unhealthy application, the health is evaluated as Warning.
        /// This is calculated by dividing the number of unhealthy applications over the total number of application instances in the cluster, excluding applications of application types that are included in the ApplicationTypeHealthPolicyMap.
        /// The computation rounds up to tolerate one failure on small numbers of applications. Default percentage is zero.
        /// 
        /// </param>
        /// <param name="applicationHealthPolicies"> Defines the application health policy map used to evaluate the health of an application or one of its children entities. </param>
        /// <returns> A new <see cref="Models.ClusterHealthPolicy"/> instance for mocking. </returns>
        public static ClusterHealthPolicy ClusterHealthPolicy(int? maxPercentUnhealthyNodes = null, int? maxPercentUnhealthyApplications = null, IDictionary<string, ApplicationHealthPolicy> applicationHealthPolicies = null)
        {
            applicationHealthPolicies ??= new Dictionary<string, ApplicationHealthPolicy>();

            return new ClusterHealthPolicy(maxPercentUnhealthyNodes, maxPercentUnhealthyApplications, applicationHealthPolicies);
        }

        /// <summary> Initializes a new instance of ApplicationHealthPolicy. </summary>
        /// <param name="maxPercentUnhealthyServices"> The health policy used by default to evaluate the health of a service type. </param>
        /// <param name="serviceTypeHealthPolicies"> The map with service type health policy per service type name. The map is empty by default. </param>
        /// <returns> A new <see cref="Models.ApplicationHealthPolicy"/> instance for mocking. </returns>
        public static ApplicationHealthPolicy ApplicationHealthPolicy(int? maxPercentUnhealthyServices = null, IDictionary<string, ServiceTypeHealthPolicy> serviceTypeHealthPolicies = null)
        {
            serviceTypeHealthPolicies ??= new Dictionary<string, ServiceTypeHealthPolicy>();

            return new ApplicationHealthPolicy(maxPercentUnhealthyServices != null ? new ServiceTypeHealthPolicy(maxPercentUnhealthyServices) : null, serviceTypeHealthPolicies);
        }

        /// <summary> Initializes a new instance of ServiceTypeHealthPolicy. </summary>
        /// <param name="maxPercentUnhealthyServices">
        /// The maximum percentage of services allowed to be unhealthy before your application is considered in error.
        /// 
        /// </param>
        /// <returns> A new <see cref="Models.ServiceTypeHealthPolicy"/> instance for mocking. </returns>
        public static ServiceTypeHealthPolicy ServiceTypeHealthPolicy(int? maxPercentUnhealthyServices = null)
        {
            return new ServiceTypeHealthPolicy(maxPercentUnhealthyServices);
        }

        /// <summary> Initializes a new instance of ClusterUpgradeDeltaHealthPolicy. </summary>
        /// <param name="maxPercentDeltaUnhealthyNodes">
        /// The maximum allowed percentage of nodes health degradation allowed during cluster upgrades.
        /// The delta is measured between the state of the nodes at the beginning of upgrade and the state of the nodes at the time of the health evaluation.
        /// The check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated limits.
        /// 
        /// </param>
        /// <param name="maxPercentUpgradeDomainDeltaUnhealthyNodes">
        /// The maximum allowed percentage of upgrade domain nodes health degradation allowed during cluster upgrades.
        /// The delta is measured between the state of the upgrade domain nodes at the beginning of upgrade and the state of the upgrade domain nodes at the time of the health evaluation.
        /// The check is performed after every upgrade domain upgrade completion for all completed upgrade domains to make sure the state of the upgrade domains is within tolerated limits.
        /// 
        /// </param>
        /// <param name="maxPercentDeltaUnhealthyApplications">
        /// The maximum allowed percentage of applications health degradation allowed during cluster upgrades.
        /// The delta is measured between the state of the applications at the beginning of upgrade and the state of the applications at the time of the health evaluation.
        /// The check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated limits. System services are not included in this.
        /// 
        /// </param>
        /// <param name="applicationDeltaHealthPolicies"> Defines the application delta health policy map used to evaluate the health of an application or one of its child entities when upgrading the cluster. </param>
        /// <returns> A new <see cref="Models.ClusterUpgradeDeltaHealthPolicy"/> instance for mocking. </returns>
        public static ClusterUpgradeDeltaHealthPolicy ClusterUpgradeDeltaHealthPolicy(int maxPercentDeltaUnhealthyNodes = default, int maxPercentUpgradeDomainDeltaUnhealthyNodes = default, int maxPercentDeltaUnhealthyApplications = default, IDictionary<string, ApplicationDeltaHealthPolicy> applicationDeltaHealthPolicies = null)
        {
            applicationDeltaHealthPolicies ??= new Dictionary<string, ApplicationDeltaHealthPolicy>();

            return new ClusterUpgradeDeltaHealthPolicy(maxPercentDeltaUnhealthyNodes, maxPercentUpgradeDomainDeltaUnhealthyNodes, maxPercentDeltaUnhealthyApplications, applicationDeltaHealthPolicies);
        }

        /// <summary> Initializes a new instance of ApplicationDeltaHealthPolicy. </summary>
        /// <param name="maxPercentDeltaUnhealthyServices"> The delta health policy used by default to evaluate the health of a service type when upgrading the cluster. </param>
        /// <param name="serviceTypeDeltaHealthPolicies"> The map with service type delta health policy per service type name. The map is empty by default. </param>
        /// <returns> A new <see cref="Models.ApplicationDeltaHealthPolicy"/> instance for mocking. </returns>
        public static ApplicationDeltaHealthPolicy ApplicationDeltaHealthPolicy(int? maxPercentDeltaUnhealthyServices = null, IDictionary<string, ServiceTypeDeltaHealthPolicy> serviceTypeDeltaHealthPolicies = null)
        {
            serviceTypeDeltaHealthPolicies ??= new Dictionary<string, ServiceTypeDeltaHealthPolicy>();

            return new ApplicationDeltaHealthPolicy(maxPercentDeltaUnhealthyServices != null ? new ServiceTypeDeltaHealthPolicy(maxPercentDeltaUnhealthyServices) : null, serviceTypeDeltaHealthPolicies);
        }

        /// <summary> Initializes a new instance of ServiceTypeDeltaHealthPolicy. </summary>
        /// <param name="maxPercentDeltaUnhealthyServices">
        /// The maximum allowed percentage of services health degradation allowed during cluster upgrades.
        /// The delta is measured between the state of the services at the beginning of upgrade and the state of the services at the time of the health evaluation.
        /// The check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated limits.
        /// 
        /// </param>
        /// <returns> A new <see cref="Models.ServiceTypeDeltaHealthPolicy"/> instance for mocking. </returns>
        public static ServiceTypeDeltaHealthPolicy ServiceTypeDeltaHealthPolicy(int? maxPercentDeltaUnhealthyServices = null)
        {
            return new ServiceTypeDeltaHealthPolicy(maxPercentDeltaUnhealthyServices);
        }

        /// <summary> Initializes a new instance of ClusterCodeVersionsResult. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="codeVersion"> The Service Fabric runtime version of the cluster. </param>
        /// <param name="supportExpireOn"> The date of expiry of support of the version. </param>
        /// <param name="environment"> Indicates if this version is for Windows or Linux operating system. </param>
        /// <returns> A new <see cref="Models.ClusterCodeVersionsResult"/> instance for mocking. </returns>
        public static ClusterCodeVersionsResult ClusterCodeVersionsResult(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string codeVersion = null, DateTimeOffset? supportExpireOn = null, ClusterEnvironment? environment = null)
        {
            return new ClusterCodeVersionsResult(id, name, resourceType, systemData, codeVersion, supportExpireOn, environment);
        }

        /// <summary> Initializes a new instance of UpgradableVersionPathResult. </summary>
        /// <param name="supportedPath"></param>
        /// <returns> A new <see cref="Models.UpgradableVersionPathResult"/> instance for mocking. </returns>
        public static UpgradableVersionPathResult UpgradableVersionPathResult(IEnumerable<string> supportedPath = null)
        {
            supportedPath ??= new List<string>();

            return new UpgradableVersionPathResult(supportedPath?.ToList());
        }

        /// <summary> Initializes a new instance of ServiceFabricApplicationTypeData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="provisioningState"> The current deployment or provisioning state, which only appears in the response. </param>
        /// <param name="etag"> Azure resource etag. </param>
        /// <returns> A new <see cref="ServiceFabric.ServiceFabricApplicationTypeData"/> instance for mocking. </returns>
        public static ServiceFabricApplicationTypeData ServiceFabricApplicationTypeData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string provisioningState = null, ETag? etag = null)
        {
            tags ??= new Dictionary<string, string>();

            return new ServiceFabricApplicationTypeData(id, name, resourceType, systemData, tags, location, provisioningState, etag);
        }

        /// <summary> Initializes a new instance of ServiceFabricApplicationTypeVersionData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="provisioningState"> The current deployment or provisioning state, which only appears in the response. </param>
        /// <param name="appPackageUri"> The URL to the application package. </param>
        /// <param name="defaultParameterList"> List of application type parameters that can be overridden when creating or updating the application. </param>
        /// <param name="etag"> Azure resource etag. </param>
        /// <returns> A new <see cref="ServiceFabric.ServiceFabricApplicationTypeVersionData"/> instance for mocking. </returns>
        public static ServiceFabricApplicationTypeVersionData ServiceFabricApplicationTypeVersionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string provisioningState = null, Uri appPackageUri = null, IReadOnlyDictionary<string, string> defaultParameterList = null, ETag? etag = null)
        {
            tags ??= new Dictionary<string, string>();
            defaultParameterList ??= new Dictionary<string, string>();

            return new ServiceFabricApplicationTypeVersionData(id, name, resourceType, systemData, tags, location, provisioningState, appPackageUri, defaultParameterList, etag);
        }

        /// <summary> Initializes a new instance of ServiceFabricApplicationData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="identity"> Describes the managed identities for an Azure resource. </param>
        /// <param name="typeVersion"> The version of the application type as defined in the application manifest. </param>
        /// <param name="parameters"> List of application parameters with overridden values from their default values specified in the application manifest. </param>
        /// <param name="upgradePolicy"> Describes the policy for a monitored application upgrade. </param>
        /// <param name="minimumNodes"> The minimum number of nodes where Service Fabric will reserve capacity for this application. Note that this does not mean that the services of this application will be placed on all of those nodes. If this property is set to zero, no capacity will be reserved. The value of this property cannot be more than the value of the MaximumNodes property. </param>
        /// <param name="maximumNodes"> The maximum number of nodes where Service Fabric will reserve capacity for this application. Note that this does not mean that the services of this application will be placed on all of those nodes. By default, the value of this property is zero and it means that the services can be placed on any node. </param>
        /// <param name="removeApplicationCapacity"> Remove the current application capacity settings. </param>
        /// <param name="metrics"> List of application capacity metric description. </param>
        /// <param name="managedIdentities"> List of user assigned identities for the application, each mapped to a friendly name. </param>
        /// <param name="provisioningState"> The current deployment or provisioning state, which only appears in the response. </param>
        /// <param name="typeName"> The application type name as defined in the application manifest. </param>
        /// <param name="etag"> Azure resource etag. </param>
        /// <returns> A new <see cref="ServiceFabric.ServiceFabricApplicationData"/> instance for mocking. </returns>
        public static ServiceFabricApplicationData ServiceFabricApplicationData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ManagedServiceIdentity identity = null, string typeVersion = null, IDictionary<string, string> parameters = null, ApplicationUpgradePolicy upgradePolicy = null, long? minimumNodes = null, long? maximumNodes = null, bool? removeApplicationCapacity = null, IEnumerable<ApplicationMetricDescription> metrics = null, IEnumerable<ApplicationUserAssignedIdentity> managedIdentities = null, string provisioningState = null, string typeName = null, ETag? etag = null)
        {
            tags ??= new Dictionary<string, string>();
            parameters ??= new Dictionary<string, string>();
            metrics ??= new List<ApplicationMetricDescription>();
            managedIdentities ??= new List<ApplicationUserAssignedIdentity>();

            return new ServiceFabricApplicationData(id, name, resourceType, systemData, tags, location, identity, typeVersion, parameters, upgradePolicy, minimumNodes, maximumNodes, removeApplicationCapacity, metrics?.ToList(), managedIdentities?.ToList(), provisioningState, typeName, etag);
        }

        /// <summary> Initializes a new instance of ApplicationUpgradePolicy. </summary>
        /// <param name="upgradeReplicaSetCheckTimeout"> The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. Valid values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer). </param>
        /// <param name="forceRestart"> If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data). </param>
        /// <param name="rollingUpgradeMonitoringPolicy"> The policy used for monitoring the application upgrade. </param>
        /// <param name="applicationHealthPolicy">
        /// Defines a health policy used to evaluate the health of an application or one of its children entities.
        /// 
        /// </param>
        /// <param name="upgradeMode"> The mode used to monitor health during a rolling upgrade. The values are UnmonitoredAuto, UnmonitoredManual, and Monitored. </param>
        /// <param name="recreateApplication"> Determines whether the application should be recreated on update. If value=true, the rest of the upgrade policy parameters are not allowed and it will result in availability loss. </param>
        /// <returns> A new <see cref="Models.ApplicationUpgradePolicy"/> instance for mocking. </returns>
        public static ApplicationUpgradePolicy ApplicationUpgradePolicy(TimeSpan? upgradeReplicaSetCheckTimeout = null, bool? forceRestart = null, ArmRollingUpgradeMonitoringPolicy rollingUpgradeMonitoringPolicy = null, ArmApplicationHealthPolicy applicationHealthPolicy = null, ApplicationRollingUpgradeMode? upgradeMode = null, bool? recreateApplication = null)
        {
            return new ApplicationUpgradePolicy(upgradeReplicaSetCheckTimeout, forceRestart, rollingUpgradeMonitoringPolicy, applicationHealthPolicy, upgradeMode, recreateApplication);
        }

        /// <summary> Initializes a new instance of ArmRollingUpgradeMonitoringPolicy. </summary>
        /// <param name="failureAction"> The activation Mode of the service package. </param>
        /// <param name="healthCheckWaitDuration"> The amount of time to wait after completing an upgrade domain before applying health policies. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds. </param>
        /// <param name="healthCheckStableDuration"> The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds. </param>
        /// <param name="healthCheckRetryTimeout"> The amount of time to retry health evaluation when the application or cluster is unhealthy before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds. </param>
        /// <param name="upgradeTimeout"> The amount of time the overall upgrade has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds. </param>
        /// <param name="upgradeDomainTimeout"> The amount of time each upgrade domain has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds. </param>
        /// <returns> A new <see cref="Models.ArmRollingUpgradeMonitoringPolicy"/> instance for mocking. </returns>
        public static ArmRollingUpgradeMonitoringPolicy ArmRollingUpgradeMonitoringPolicy(ArmUpgradeFailureAction? failureAction = null, TimeSpan? healthCheckWaitDuration = null, TimeSpan? healthCheckStableDuration = null, TimeSpan? healthCheckRetryTimeout = null, TimeSpan? upgradeTimeout = null, TimeSpan? upgradeDomainTimeout = null)
        {
            return new ArmRollingUpgradeMonitoringPolicy(failureAction, healthCheckWaitDuration, healthCheckStableDuration, healthCheckRetryTimeout, upgradeTimeout, upgradeDomainTimeout);
        }

        /// <summary> Initializes a new instance of ArmApplicationHealthPolicy. </summary>
        /// <param name="considerWarningAsError"> Indicates whether warnings are treated with the same severity as errors. </param>
        /// <param name="maxPercentUnhealthyDeployedApplications">
        /// The maximum allowed percentage of unhealthy deployed applications. Allowed values are Byte values from zero to 100.
        /// The percentage represents the maximum tolerated percentage of deployed applications that can be unhealthy before the application is considered in error.
        /// This is calculated by dividing the number of unhealthy deployed applications over the number of nodes where the application is currently deployed on in the cluster.
        /// The computation rounds up to tolerate one failure on small numbers of nodes. Default percentage is zero.
        /// 
        /// </param>
        /// <param name="defaultServiceTypeHealthPolicy"> The health policy used by default to evaluate the health of a service type. </param>
        /// <param name="serviceTypeHealthPolicyMap"> The map with service type health policy per service type name. The map is empty by default. </param>
        /// <returns> A new <see cref="Models.ArmApplicationHealthPolicy"/> instance for mocking. </returns>
        public static ArmApplicationHealthPolicy ArmApplicationHealthPolicy(bool? considerWarningAsError = null, int? maxPercentUnhealthyDeployedApplications = null, ArmServiceTypeHealthPolicy defaultServiceTypeHealthPolicy = null, IDictionary<string, ArmServiceTypeHealthPolicy> serviceTypeHealthPolicyMap = null)
        {
            serviceTypeHealthPolicyMap ??= new Dictionary<string, ArmServiceTypeHealthPolicy>();

            return new ArmApplicationHealthPolicy(considerWarningAsError, maxPercentUnhealthyDeployedApplications, defaultServiceTypeHealthPolicy, serviceTypeHealthPolicyMap);
        }

        /// <summary> Initializes a new instance of ArmServiceTypeHealthPolicy. </summary>
        /// <param name="maxPercentUnhealthyServices">
        /// The maximum percentage of services allowed to be unhealthy before your application is considered in error.
        /// 
        /// </param>
        /// <param name="maxPercentUnhealthyPartitionsPerService">
        /// The maximum percentage of partitions per service allowed to be unhealthy before your application is considered in error.
        /// 
        /// </param>
        /// <param name="maxPercentUnhealthyReplicasPerPartition">
        /// The maximum percentage of replicas per partition allowed to be unhealthy before your application is considered in error.
        /// 
        /// </param>
        /// <returns> A new <see cref="Models.ArmServiceTypeHealthPolicy"/> instance for mocking. </returns>
        public static ArmServiceTypeHealthPolicy ArmServiceTypeHealthPolicy(int? maxPercentUnhealthyServices = null, int? maxPercentUnhealthyPartitionsPerService = null, int? maxPercentUnhealthyReplicasPerPartition = null)
        {
            return new ArmServiceTypeHealthPolicy(maxPercentUnhealthyServices, maxPercentUnhealthyPartitionsPerService, maxPercentUnhealthyReplicasPerPartition);
        }

        /// <summary> Initializes a new instance of ApplicationMetricDescription. </summary>
        /// <param name="name"> The name of the metric. </param>
        /// <param name="maximumCapacity">
        /// The maximum node capacity for Service Fabric application.
        /// This is the maximum Load for an instance of this application on a single node. Even if the capacity of node is greater than this value, Service Fabric will limit the total load of services within the application on each node to this value.
        /// If set to zero, capacity for this metric is unlimited on each node.
        /// When creating a new application with application capacity defined, the product of MaximumNodes and this value must always be smaller than or equal to TotalApplicationCapacity.
        /// When updating existing application with application capacity, the product of MaximumNodes and this value must always be smaller than or equal to TotalApplicationCapacity.
        /// 
        /// </param>
        /// <param name="reservationCapacity">
        /// The node reservation capacity for Service Fabric application.
        /// This is the amount of load which is reserved on nodes which have instances of this application.
        /// If MinimumNodes is specified, then the product of these values will be the capacity reserved in the cluster for the application.
        /// If set to zero, no capacity is reserved for this metric.
        /// When setting application capacity or when updating application capacity; this value must be smaller than or equal to MaximumCapacity for each metric.
        /// 
        /// </param>
        /// <param name="totalApplicationCapacity">
        /// The total metric capacity for Service Fabric application.
        /// This is the total metric capacity for this application in the cluster. Service Fabric will try to limit the sum of loads of services within the application to this value.
        /// When creating a new application with application capacity defined, the product of MaximumNodes and MaximumCapacity must always be smaller than or equal to this value.
        /// 
        /// </param>
        /// <returns> A new <see cref="Models.ApplicationMetricDescription"/> instance for mocking. </returns>
        public static ApplicationMetricDescription ApplicationMetricDescription(string name = null, long? maximumCapacity = null, long? reservationCapacity = null, long? totalApplicationCapacity = null)
        {
            return new ApplicationMetricDescription(name, maximumCapacity, reservationCapacity, totalApplicationCapacity);
        }

        /// <summary> Initializes a new instance of ServiceFabricApplicationPatch. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="typeVersion"> The version of the application type as defined in the application manifest. </param>
        /// <param name="parameters"> List of application parameters with overridden values from their default values specified in the application manifest. </param>
        /// <param name="upgradePolicy"> Describes the policy for a monitored application upgrade. </param>
        /// <param name="minimumNodes"> The minimum number of nodes where Service Fabric will reserve capacity for this application. Note that this does not mean that the services of this application will be placed on all of those nodes. If this property is set to zero, no capacity will be reserved. The value of this property cannot be more than the value of the MaximumNodes property. </param>
        /// <param name="maximumNodes"> The maximum number of nodes where Service Fabric will reserve capacity for this application. Note that this does not mean that the services of this application will be placed on all of those nodes. By default, the value of this property is zero and it means that the services can be placed on any node. </param>
        /// <param name="removeApplicationCapacity"> Remove the current application capacity settings. </param>
        /// <param name="metrics"> List of application capacity metric description. </param>
        /// <param name="managedIdentities"> List of user assigned identities for the application, each mapped to a friendly name. </param>
        /// <param name="etag"> Azure resource etag. </param>
        /// <returns> A new <see cref="Models.ServiceFabricApplicationPatch"/> instance for mocking. </returns>
        public static ServiceFabricApplicationPatch ServiceFabricApplicationPatch(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string typeVersion = null, IDictionary<string, string> parameters = null, ApplicationUpgradePolicy upgradePolicy = null, long? minimumNodes = null, long? maximumNodes = null, bool? removeApplicationCapacity = null, IEnumerable<ApplicationMetricDescription> metrics = null, IEnumerable<ApplicationUserAssignedIdentity> managedIdentities = null, ETag? etag = null)
        {
            tags ??= new Dictionary<string, string>();
            parameters ??= new Dictionary<string, string>();
            metrics ??= new List<ApplicationMetricDescription>();
            managedIdentities ??= new List<ApplicationUserAssignedIdentity>();

            return new ServiceFabricApplicationPatch(id, name, resourceType, systemData, tags, location, typeVersion, parameters, upgradePolicy, minimumNodes, maximumNodes, removeApplicationCapacity, metrics?.ToList(), managedIdentities?.ToList(), etag);
        }

        /// <summary> Initializes a new instance of ServiceFabricServiceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="placementConstraints"> The placement constraints as a string. Placement constraints are boolean expressions on node properties and allow for restricting a service to particular nodes based on the service requirements. For example, to place a service on nodes where NodeType is blue specify the following: &quot;NodeColor == blue)&quot;. </param>
        /// <param name="correlationScheme"> A list that describes the correlation of the service with other services. </param>
        /// <param name="serviceLoadMetrics"> The service load metrics is given as an array of ServiceLoadMetricDescription objects. </param>
        /// <param name="servicePlacementPolicies"> A list that describes the correlation of the service with other services. </param>
        /// <param name="defaultMoveCost"> Specifies the move cost for the service. </param>
        /// <param name="provisioningState"> The current deployment or provisioning state, which only appears in the response. </param>
        /// <param name="serviceKind"> The kind of service (Stateless or Stateful). </param>
        /// <param name="serviceTypeName"> The name of the service type. </param>
        /// <param name="partitionDescription">
        /// Describes how the service is partitioned.
        /// Please note <see cref="PartitionSchemeDescription"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="NamedPartitionSchemeDescription"/>, <see cref="SingletonPartitionSchemeDescription"/> and <see cref="UniformInt64RangePartitionSchemeDescription"/>.
        /// </param>
        /// <param name="servicePackageActivationMode"> The activation Mode of the service package. </param>
        /// <param name="serviceDnsName"> Dns name used for the service. If this is specified, then the service can be accessed via its DNS name instead of service name. </param>
        /// <param name="etag"> Azure resource etag. </param>
        /// <returns> A new <see cref="ServiceFabric.ServiceFabricServiceData"/> instance for mocking. </returns>
        public static ServiceFabricServiceData ServiceFabricServiceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string placementConstraints = null, IEnumerable<ServiceCorrelationDescription> correlationScheme = null, IEnumerable<ServiceLoadMetricDescription> serviceLoadMetrics = null, IEnumerable<ServicePlacementPolicyDescription> servicePlacementPolicies = null, ApplicationMoveCost? defaultMoveCost = null, string provisioningState = null, ApplicationServiceKind? serviceKind = null, string serviceTypeName = null, PartitionSchemeDescription partitionDescription = null, ArmServicePackageActivationMode? servicePackageActivationMode = null, string serviceDnsName = null, ETag? etag = null)
        {
            tags ??= new Dictionary<string, string>();
            correlationScheme ??= new List<ServiceCorrelationDescription>();
            serviceLoadMetrics ??= new List<ServiceLoadMetricDescription>();
            servicePlacementPolicies ??= new List<ServicePlacementPolicyDescription>();

            return new ServiceFabricServiceData(id, name, resourceType, systemData, tags, location, placementConstraints, correlationScheme?.ToList(), serviceLoadMetrics?.ToList(), servicePlacementPolicies?.ToList(), defaultMoveCost, provisioningState, serviceKind, serviceTypeName, partitionDescription, servicePackageActivationMode, serviceDnsName, etag);
        }

        /// <summary> Initializes a new instance of PartitionSchemeDescription. </summary>
        /// <param name="partitionScheme"> Specifies how the service is partitioned. </param>
        /// <returns> A new <see cref="Models.PartitionSchemeDescription"/> instance for mocking. </returns>
        public static PartitionSchemeDescription PartitionSchemeDescription(string partitionScheme = "Unknown")
        {
            return new UnknownPartitionSchemeDescription(partitionScheme);
        }

        /// <summary> Initializes a new instance of ServiceLoadMetricDescription. </summary>
        /// <param name="name"> The name of the metric. If the service chooses to report load during runtime, the load metric name should match the name that is specified in Name exactly. Note that metric names are case sensitive. </param>
        /// <param name="weight"> The service load metric relative weight, compared to other metrics configured for this service, as a number. </param>
        /// <param name="primaryDefaultLoad"> Used only for Stateful services. The default amount of load, as a number, that this service creates for this metric when it is a Primary replica. </param>
        /// <param name="secondaryDefaultLoad"> Used only for Stateful services. The default amount of load, as a number, that this service creates for this metric when it is a Secondary replica. </param>
        /// <param name="defaultLoad"> Used only for Stateless services. The default amount of load, as a number, that this service creates for this metric. </param>
        /// <returns> A new <see cref="Models.ServiceLoadMetricDescription"/> instance for mocking. </returns>
        public static ServiceLoadMetricDescription ServiceLoadMetricDescription(string name = null, ServiceLoadMetricWeight? weight = null, int? primaryDefaultLoad = null, int? secondaryDefaultLoad = null, int? defaultLoad = null)
        {
            return new ServiceLoadMetricDescription(name, weight, primaryDefaultLoad, secondaryDefaultLoad, defaultLoad);
        }

        /// <summary> Initializes a new instance of ServicePlacementPolicyDescription. </summary>
        /// <param name="policyType"> The type of placement policy for a service fabric service. Following are the possible values. </param>
        /// <returns> A new <see cref="Models.ServicePlacementPolicyDescription"/> instance for mocking. </returns>
        public static ServicePlacementPolicyDescription ServicePlacementPolicyDescription(string policyType = "Unknown")
        {
            return new UnknownServicePlacementPolicyDescription(policyType);
        }

        /// <summary> Initializes a new instance of ServiceFabricServicePatch. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="placementConstraints"> The placement constraints as a string. Placement constraints are boolean expressions on node properties and allow for restricting a service to particular nodes based on the service requirements. For example, to place a service on nodes where NodeType is blue specify the following: &quot;NodeColor == blue)&quot;. </param>
        /// <param name="correlationScheme"> A list that describes the correlation of the service with other services. </param>
        /// <param name="serviceLoadMetrics"> The service load metrics is given as an array of ServiceLoadMetricDescription objects. </param>
        /// <param name="servicePlacementPolicies"> A list that describes the correlation of the service with other services. </param>
        /// <param name="defaultMoveCost"> Specifies the move cost for the service. </param>
        /// <param name="serviceKind"> The kind of service (Stateless or Stateful). </param>
        /// <param name="etag"> Azure resource etag. </param>
        /// <returns> A new <see cref="Models.ServiceFabricServicePatch"/> instance for mocking. </returns>
        public static ServiceFabricServicePatch ServiceFabricServicePatch(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string placementConstraints = null, IEnumerable<ServiceCorrelationDescription> correlationScheme = null, IEnumerable<ServiceLoadMetricDescription> serviceLoadMetrics = null, IEnumerable<ServicePlacementPolicyDescription> servicePlacementPolicies = null, ApplicationMoveCost? defaultMoveCost = null, ApplicationServiceKind? serviceKind = null, ETag? etag = null)
        {
            tags ??= new Dictionary<string, string>();
            correlationScheme ??= new List<ServiceCorrelationDescription>();
            serviceLoadMetrics ??= new List<ServiceLoadMetricDescription>();
            servicePlacementPolicies ??= new List<ServicePlacementPolicyDescription>();

            return new ServiceFabricServicePatch(id, name, resourceType, systemData, tags, location, placementConstraints, correlationScheme?.ToList(), serviceLoadMetrics?.ToList(), servicePlacementPolicies?.ToList(), defaultMoveCost, serviceKind, etag);
        }

        /// <summary> Initializes a new instance of NamedPartitionSchemeDescription. </summary>
        /// <param name="count"> The number of partitions. </param>
        /// <param name="names"> Array of size specified by the ‘count’ parameter, for the names of the partitions. </param>
        /// <returns> A new <see cref="Models.NamedPartitionSchemeDescription"/> instance for mocking. </returns>
        public static NamedPartitionSchemeDescription NamedPartitionSchemeDescription(int count = default, IEnumerable<string> names = null)
        {
            names ??= new List<string>();

            return new NamedPartitionSchemeDescription(ApplicationPartitionScheme.Named, count, names?.ToList());
        }

        /// <summary> Initializes a new instance of SingletonPartitionSchemeDescription. </summary>
        /// <returns> A new <see cref="Models.SingletonPartitionSchemeDescription"/> instance for mocking. </returns>
        public static SingletonPartitionSchemeDescription SingletonPartitionSchemeDescription()
        {
            return new SingletonPartitionSchemeDescription(ApplicationPartitionScheme.Singleton);
        }

        /// <summary> Initializes a new instance of UniformInt64RangePartitionSchemeDescription. </summary>
        /// <param name="count"> The number of partitions. </param>
        /// <param name="lowKey">
        /// String indicating the lower bound of the partition key range that
        /// should be split between the partition ‘count’
        /// 
        /// </param>
        /// <param name="highKey">
        /// String indicating the upper bound of the partition key range that
        /// should be split between the partition ‘count’
        /// 
        /// </param>
        /// <returns> A new <see cref="Models.UniformInt64RangePartitionSchemeDescription"/> instance for mocking. </returns>
        public static UniformInt64RangePartitionSchemeDescription UniformInt64RangePartitionSchemeDescription(int count = default, string lowKey = null, string highKey = null)
        {
            return new UniformInt64RangePartitionSchemeDescription(ApplicationPartitionScheme.UniformInt64Range, count, lowKey, highKey);
        }
    }
}
