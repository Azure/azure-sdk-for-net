// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ServiceFabricMesh
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ApplicationOperations.
    /// </summary>
    public static partial class ApplicationOperationsExtensions
    {
            /// <summary>
            /// Creates or updates an application resource.
            /// </summary>
            /// <remarks>
            /// Creates an application resource with the specified name, description and
            /// properties. If an application resource with the same name exists, then it
            /// is updated with the specified description and properties.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='applicationResourceName'>
            /// The identity of the application.
            /// </param>
            /// <param name='applicationResourceDescription'>
            /// Description for creating a Application resource.
            /// </param>
            public static ApplicationResourceDescription Create(this IApplicationOperations operations, string resourceGroupName, string applicationResourceName, ApplicationResourceDescription applicationResourceDescription)
            {
                return operations.CreateAsync(resourceGroupName, applicationResourceName, applicationResourceDescription).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates an application resource.
            /// </summary>
            /// <remarks>
            /// Creates an application resource with the specified name, description and
            /// properties. If an application resource with the same name exists, then it
            /// is updated with the specified description and properties.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='applicationResourceName'>
            /// The identity of the application.
            /// </param>
            /// <param name='applicationResourceDescription'>
            /// Description for creating a Application resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ApplicationResourceDescription> CreateAsync(this IApplicationOperations operations, string resourceGroupName, string applicationResourceName, ApplicationResourceDescription applicationResourceDescription, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, applicationResourceName, applicationResourceDescription, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the application resource with the given name.
            /// </summary>
            /// <remarks>
            /// Gets the information about the application resource with the given name.
            /// The information include the description and other properties of the
            /// application.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='applicationResourceName'>
            /// The identity of the application.
            /// </param>
            public static ApplicationResourceDescription Get(this IApplicationOperations operations, string resourceGroupName, string applicationResourceName)
            {
                return operations.GetAsync(resourceGroupName, applicationResourceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the application resource with the given name.
            /// </summary>
            /// <remarks>
            /// Gets the information about the application resource with the given name.
            /// The information include the description and other properties of the
            /// application.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='applicationResourceName'>
            /// The identity of the application.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ApplicationResourceDescription> GetAsync(this IApplicationOperations operations, string resourceGroupName, string applicationResourceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, applicationResourceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the application resource.
            /// </summary>
            /// <remarks>
            /// Deletes the application resource identified by the name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='applicationResourceName'>
            /// The identity of the application.
            /// </param>
            public static void Delete(this IApplicationOperations operations, string resourceGroupName, string applicationResourceName)
            {
                operations.DeleteAsync(resourceGroupName, applicationResourceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the application resource.
            /// </summary>
            /// <remarks>
            /// Deletes the application resource identified by the name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='applicationResourceName'>
            /// The identity of the application.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IApplicationOperations operations, string resourceGroupName, string applicationResourceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, applicationResourceName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets all the application resources in a given resource group.
            /// </summary>
            /// <remarks>
            /// Gets the information about all application resources in a given resource
            /// group. The information include the description and other properties of the
            /// Application.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            public static IPage<ApplicationResourceDescription> ListByResourceGroup(this IApplicationOperations operations, string resourceGroupName)
            {
                return operations.ListByResourceGroupAsync(resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all the application resources in a given resource group.
            /// </summary>
            /// <remarks>
            /// Gets the information about all application resources in a given resource
            /// group. The information include the description and other properties of the
            /// Application.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ApplicationResourceDescription>> ListByResourceGroupAsync(this IApplicationOperations operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all the application resources in a given subscription.
            /// </summary>
            /// <remarks>
            /// Gets the information about all application resources in a given resource
            /// group. The information include the description and other properties of the
            /// application.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<ApplicationResourceDescription> ListBySubscription(this IApplicationOperations operations)
            {
                return operations.ListBySubscriptionAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all the application resources in a given subscription.
            /// </summary>
            /// <remarks>
            /// Gets the information about all application resources in a given resource
            /// group. The information include the description and other properties of the
            /// application.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ApplicationResourceDescription>> ListBySubscriptionAsync(this IApplicationOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBySubscriptionWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all the application resources in a given resource group.
            /// </summary>
            /// <remarks>
            /// Gets the information about all application resources in a given resource
            /// group. The information include the description and other properties of the
            /// Application.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ApplicationResourceDescription> ListByResourceGroupNext(this IApplicationOperations operations, string nextPageLink)
            {
                return operations.ListByResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all the application resources in a given resource group.
            /// </summary>
            /// <remarks>
            /// Gets the information about all application resources in a given resource
            /// group. The information include the description and other properties of the
            /// Application.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ApplicationResourceDescription>> ListByResourceGroupNextAsync(this IApplicationOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all the application resources in a given subscription.
            /// </summary>
            /// <remarks>
            /// Gets the information about all application resources in a given resource
            /// group. The information include the description and other properties of the
            /// application.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ApplicationResourceDescription> ListBySubscriptionNext(this IApplicationOperations operations, string nextPageLink)
            {
                return operations.ListBySubscriptionNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all the application resources in a given subscription.
            /// </summary>
            /// <remarks>
            /// Gets the information about all application resources in a given resource
            /// group. The information include the description and other properties of the
            /// application.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ApplicationResourceDescription>> ListBySubscriptionNextAsync(this IApplicationOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBySubscriptionNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
