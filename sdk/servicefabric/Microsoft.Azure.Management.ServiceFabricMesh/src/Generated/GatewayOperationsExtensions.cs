// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ServiceFabricMesh
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for GatewayOperations.
    /// </summary>
    public static partial class GatewayOperationsExtensions
    {
            /// <summary>
            /// Creates or updates a gateway resource.
            /// </summary>
            /// <remarks>
            /// Creates a gateway resource with the specified name, description and
            /// properties. If a gateway resource with the same name exists, then it is
            /// updated with the specified description and properties. Use gateway
            /// resources to create a gateway for public connectivity for services within
            /// your application.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='gatewayResourceName'>
            /// The identity of the gateway.
            /// </param>
            /// <param name='gatewayResourceDescription'>
            /// Description for creating a Gateway resource.
            /// </param>
            public static GatewayResourceDescription Create(this IGatewayOperations operations, string resourceGroupName, string gatewayResourceName, GatewayResourceDescription gatewayResourceDescription)
            {
                return operations.CreateAsync(resourceGroupName, gatewayResourceName, gatewayResourceDescription).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a gateway resource.
            /// </summary>
            /// <remarks>
            /// Creates a gateway resource with the specified name, description and
            /// properties. If a gateway resource with the same name exists, then it is
            /// updated with the specified description and properties. Use gateway
            /// resources to create a gateway for public connectivity for services within
            /// your application.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='gatewayResourceName'>
            /// The identity of the gateway.
            /// </param>
            /// <param name='gatewayResourceDescription'>
            /// Description for creating a Gateway resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GatewayResourceDescription> CreateAsync(this IGatewayOperations operations, string resourceGroupName, string gatewayResourceName, GatewayResourceDescription gatewayResourceDescription, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, gatewayResourceName, gatewayResourceDescription, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the gateway resource with the given name.
            /// </summary>
            /// <remarks>
            /// Gets the information about the gateway resource with the given name. The
            /// information include the description and other properties of the gateway.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='gatewayResourceName'>
            /// The identity of the gateway.
            /// </param>
            public static GatewayResourceDescription Get(this IGatewayOperations operations, string resourceGroupName, string gatewayResourceName)
            {
                return operations.GetAsync(resourceGroupName, gatewayResourceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the gateway resource with the given name.
            /// </summary>
            /// <remarks>
            /// Gets the information about the gateway resource with the given name. The
            /// information include the description and other properties of the gateway.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='gatewayResourceName'>
            /// The identity of the gateway.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GatewayResourceDescription> GetAsync(this IGatewayOperations operations, string resourceGroupName, string gatewayResourceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, gatewayResourceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the gateway resource.
            /// </summary>
            /// <remarks>
            /// Deletes the gateway resource identified by the name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='gatewayResourceName'>
            /// The identity of the gateway.
            /// </param>
            public static void Delete(this IGatewayOperations operations, string resourceGroupName, string gatewayResourceName)
            {
                operations.DeleteAsync(resourceGroupName, gatewayResourceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the gateway resource.
            /// </summary>
            /// <remarks>
            /// Deletes the gateway resource identified by the name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='gatewayResourceName'>
            /// The identity of the gateway.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IGatewayOperations operations, string resourceGroupName, string gatewayResourceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, gatewayResourceName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets all the gateway resources in a given resource group.
            /// </summary>
            /// <remarks>
            /// Gets the information about all gateway resources in a given resource group.
            /// The information include the description and other properties of the
            /// Gateway.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            public static IPage<GatewayResourceDescription> ListByResourceGroup(this IGatewayOperations operations, string resourceGroupName)
            {
                return operations.ListByResourceGroupAsync(resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all the gateway resources in a given resource group.
            /// </summary>
            /// <remarks>
            /// Gets the information about all gateway resources in a given resource group.
            /// The information include the description and other properties of the
            /// Gateway.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<GatewayResourceDescription>> ListByResourceGroupAsync(this IGatewayOperations operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all the gateway resources in a given subscription.
            /// </summary>
            /// <remarks>
            /// Gets the information about all gateway resources in a given resource group.
            /// The information include the description and other properties of the
            /// gateway.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<GatewayResourceDescription> ListBySubscription(this IGatewayOperations operations)
            {
                return operations.ListBySubscriptionAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all the gateway resources in a given subscription.
            /// </summary>
            /// <remarks>
            /// Gets the information about all gateway resources in a given resource group.
            /// The information include the description and other properties of the
            /// gateway.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<GatewayResourceDescription>> ListBySubscriptionAsync(this IGatewayOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBySubscriptionWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all the gateway resources in a given resource group.
            /// </summary>
            /// <remarks>
            /// Gets the information about all gateway resources in a given resource group.
            /// The information include the description and other properties of the
            /// Gateway.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<GatewayResourceDescription> ListByResourceGroupNext(this IGatewayOperations operations, string nextPageLink)
            {
                return operations.ListByResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all the gateway resources in a given resource group.
            /// </summary>
            /// <remarks>
            /// Gets the information about all gateway resources in a given resource group.
            /// The information include the description and other properties of the
            /// Gateway.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<GatewayResourceDescription>> ListByResourceGroupNextAsync(this IGatewayOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all the gateway resources in a given subscription.
            /// </summary>
            /// <remarks>
            /// Gets the information about all gateway resources in a given resource group.
            /// The information include the description and other properties of the
            /// gateway.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<GatewayResourceDescription> ListBySubscriptionNext(this IGatewayOperations operations, string nextPageLink)
            {
                return operations.ListBySubscriptionNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all the gateway resources in a given subscription.
            /// </summary>
            /// <remarks>
            /// Gets the information about all gateway resources in a given resource group.
            /// The information include the description and other properties of the
            /// gateway.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<GatewayResourceDescription>> ListBySubscriptionNextAsync(this IGatewayOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBySubscriptionNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
