// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ServiceFabricMesh.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Describes properties of a service resource.
    /// </summary>
    public partial class ServiceProperties
    {
        /// <summary>
        /// Initializes a new instance of the ServiceProperties class.
        /// </summary>
        public ServiceProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ServiceProperties class.
        /// </summary>
        /// <param name="description">User readable description of the
        /// service.</param>
        /// <param name="replicaCount">The number of replicas of the service to
        /// create. Defaults to 1 if not specified.</param>
        /// <param name="autoScalingPolicies">Auto scaling policies</param>
        /// <param name="status">Status of the service. Possible values
        /// include: 'Unknown', 'Ready', 'Upgrading', 'Creating', 'Deleting',
        /// 'Failed'</param>
        /// <param name="statusDetails">Gives additional information about the
        /// current status of the service.</param>
        /// <param name="healthState">Describes the health state of an
        /// application resource. Possible values include: 'Invalid', 'Ok',
        /// 'Warning', 'Error', 'Unknown'</param>
        /// <param name="unhealthyEvaluation">When the service's health state
        /// is not 'Ok', this additional details from service fabric Health
        /// Manager for the user to know why the service is marked
        /// unhealthy.</param>
        public ServiceProperties(string description = default(string), int? replicaCount = default(int?), IList<AutoScalingPolicy> autoScalingPolicies = default(IList<AutoScalingPolicy>), string status = default(string), string statusDetails = default(string), string healthState = default(string), string unhealthyEvaluation = default(string))
        {
            Description = description;
            ReplicaCount = replicaCount;
            AutoScalingPolicies = autoScalingPolicies;
            Status = status;
            StatusDetails = statusDetails;
            HealthState = healthState;
            UnhealthyEvaluation = unhealthyEvaluation;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets user readable description of the service.
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the number of replicas of the service to create.
        /// Defaults to 1 if not specified.
        /// </summary>
        [JsonProperty(PropertyName = "replicaCount")]
        public int? ReplicaCount { get; set; }

        /// <summary>
        /// Gets or sets auto scaling policies
        /// </summary>
        [JsonProperty(PropertyName = "autoScalingPolicies")]
        public IList<AutoScalingPolicy> AutoScalingPolicies { get; set; }

        /// <summary>
        /// Gets status of the service. Possible values include: 'Unknown',
        /// 'Ready', 'Upgrading', 'Creating', 'Deleting', 'Failed'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; private set; }

        /// <summary>
        /// Gets gives additional information about the current status of the
        /// service.
        /// </summary>
        [JsonProperty(PropertyName = "statusDetails")]
        public string StatusDetails { get; private set; }

        /// <summary>
        /// Gets describes the health state of an application resource.
        /// Possible values include: 'Invalid', 'Ok', 'Warning', 'Error',
        /// 'Unknown'
        /// </summary>
        [JsonProperty(PropertyName = "healthState")]
        public string HealthState { get; private set; }

        /// <summary>
        /// Gets when the service's health state is not 'Ok', this additional
        /// details from service fabric Health Manager for the user to know why
        /// the service is marked unhealthy.
        /// </summary>
        [JsonProperty(PropertyName = "unhealthyEvaluation")]
        public string UnhealthyEvaluation { get; private set; }

    }
}
