// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ServiceFabricMesh.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// This type describes the resource requirements for a container or a
    /// service.
    /// </summary>
    public partial class ResourceRequirements
    {
        /// <summary>
        /// Initializes a new instance of the ResourceRequirements class.
        /// </summary>
        public ResourceRequirements()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ResourceRequirements class.
        /// </summary>
        /// <param name="requests">Describes the requested resources for a
        /// given container.</param>
        /// <param name="limits">Describes the maximum limits on the resources
        /// for a given container.</param>
        public ResourceRequirements(ResourceRequests requests, ResourceLimits limits = default(ResourceLimits))
        {
            Requests = requests;
            Limits = limits;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets describes the requested resources for a given
        /// container.
        /// </summary>
        [JsonProperty(PropertyName = "requests")]
        public ResourceRequests Requests { get; set; }

        /// <summary>
        /// Gets or sets describes the maximum limits on the resources for a
        /// given container.
        /// </summary>
        [JsonProperty(PropertyName = "limits")]
        public ResourceLimits Limits { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Requests == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Requests");
            }
            if (Requests != null)
            {
                Requests.Validate();
            }
        }
    }
}
