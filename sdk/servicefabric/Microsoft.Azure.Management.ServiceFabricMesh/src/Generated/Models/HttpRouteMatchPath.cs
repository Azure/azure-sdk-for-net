// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ServiceFabricMesh.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Path to match for routing.
    /// </summary>
    public partial class HttpRouteMatchPath
    {
        /// <summary>
        /// Initializes a new instance of the HttpRouteMatchPath class.
        /// </summary>
        public HttpRouteMatchPath()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the HttpRouteMatchPath class.
        /// </summary>
        /// <param name="value">Uri path to match for request.</param>
        /// <param name="rewrite">replacement string for matched part of the
        /// Uri.</param>
        public HttpRouteMatchPath(string value, string rewrite = default(string))
        {
            Value = value;
            Rewrite = rewrite;
            CustomInit();
        }
        /// <summary>
        /// Static constructor for HttpRouteMatchPath class.
        /// </summary>
        static HttpRouteMatchPath()
        {
            Type = "prefix";
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets uri path to match for request.
        /// </summary>
        [JsonProperty(PropertyName = "value")]
        public string Value { get; set; }

        /// <summary>
        /// Gets or sets replacement string for matched part of the Uri.
        /// </summary>
        [JsonProperty(PropertyName = "rewrite")]
        public string Rewrite { get; set; }

        /// <summary>
        /// how to match value in the Uri
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public static string Type { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Value == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Value");
            }
        }
    }
}
