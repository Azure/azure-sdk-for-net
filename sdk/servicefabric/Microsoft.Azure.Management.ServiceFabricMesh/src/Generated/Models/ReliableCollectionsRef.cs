// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ServiceFabricMesh.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Specifying this parameter adds support for reliable collections
    /// </summary>
    public partial class ReliableCollectionsRef
    {
        /// <summary>
        /// Initializes a new instance of the ReliableCollectionsRef class.
        /// </summary>
        public ReliableCollectionsRef()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ReliableCollectionsRef class.
        /// </summary>
        /// <param name="name">Name of ReliableCollection resource. Right now
        /// it's not used and you can use any string.</param>
        /// <param name="doNotPersistState">False (the default) if
        /// ReliableCollections state is persisted to disk as usual. True if
        /// you do not want to persist state, in which case replication is
        /// still enabled and you can use ReliableCollections as distributed
        /// cache.</param>
        public ReliableCollectionsRef(string name, bool? doNotPersistState = default(bool?))
        {
            Name = name;
            DoNotPersistState = doNotPersistState;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets name of ReliableCollection resource. Right now it's
        /// not used and you can use any string.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets false (the default) if ReliableCollections state is
        /// persisted to disk as usual. True if you do not want to persist
        /// state, in which case replication is still enabled and you can use
        /// ReliableCollections as distributed cache.
        /// </summary>
        [JsonProperty(PropertyName = "doNotPersistState")]
        public bool? DoNotPersistState { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
        }
    }
}
