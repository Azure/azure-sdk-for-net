// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ServiceFabricMesh.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Describes the average load trigger used for auto scaling.
    /// </summary>
    [Newtonsoft.Json.JsonObject("AverageLoad")]
    public partial class AverageLoadScalingTrigger : AutoScalingTrigger
    {
        /// <summary>
        /// Initializes a new instance of the AverageLoadScalingTrigger class.
        /// </summary>
        public AverageLoadScalingTrigger()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AverageLoadScalingTrigger class.
        /// </summary>
        /// <param name="metric">Description of the metric that is used for
        /// scaling.</param>
        /// <param name="lowerLoadThreshold">Lower load threshold (if average
        /// load is below this threshold, service will scale down).</param>
        /// <param name="upperLoadThreshold">Upper load threshold (if average
        /// load is above this threshold, service will scale up).</param>
        /// <param name="scaleIntervalInSeconds">Scale interval that indicates
        /// how often will this trigger be checked.</param>
        public AverageLoadScalingTrigger(AutoScalingMetric metric, double lowerLoadThreshold, double upperLoadThreshold, int scaleIntervalInSeconds)
        {
            Metric = metric;
            LowerLoadThreshold = lowerLoadThreshold;
            UpperLoadThreshold = upperLoadThreshold;
            ScaleIntervalInSeconds = scaleIntervalInSeconds;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets description of the metric that is used for scaling.
        /// </summary>
        [JsonProperty(PropertyName = "metric")]
        public AutoScalingMetric Metric { get; set; }

        /// <summary>
        /// Gets or sets lower load threshold (if average load is below this
        /// threshold, service will scale down).
        /// </summary>
        [JsonProperty(PropertyName = "lowerLoadThreshold")]
        public double LowerLoadThreshold { get; set; }

        /// <summary>
        /// Gets or sets upper load threshold (if average load is above this
        /// threshold, service will scale up).
        /// </summary>
        [JsonProperty(PropertyName = "upperLoadThreshold")]
        public double UpperLoadThreshold { get; set; }

        /// <summary>
        /// Gets or sets scale interval that indicates how often will this
        /// trigger be checked.
        /// </summary>
        [JsonProperty(PropertyName = "scaleIntervalInSeconds")]
        public int ScaleIntervalInSeconds { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Metric == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Metric");
            }
            if (ScaleIntervalInSeconds < 60)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "ScaleIntervalInSeconds", 60);
            }
        }
    }
}
