// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ServiceFabricMesh.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Describes properties of a gateway resource.
    /// </summary>
    public partial class GatewayProperties
    {
        /// <summary>
        /// Initializes a new instance of the GatewayProperties class.
        /// </summary>
        public GatewayProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the GatewayProperties class.
        /// </summary>
        /// <param name="sourceNetwork">Network the gateway should listen on
        /// for requests.</param>
        /// <param name="destinationNetwork">Network that the Application is
        /// using.</param>
        /// <param name="description">User readable description of the
        /// gateway.</param>
        /// <param name="tcp">Configuration for tcp connectivity for this
        /// gateway.</param>
        /// <param name="http">Configuration for http connectivity for this
        /// gateway.</param>
        /// <param name="status">Status of the resource. Possible values
        /// include: 'Unknown', 'Ready', 'Upgrading', 'Creating', 'Deleting',
        /// 'Failed'</param>
        /// <param name="statusDetails">Gives additional information about the
        /// current status of the gateway.</param>
        /// <param name="ipAddress">IP address of the gateway. This is
        /// populated in the response and is ignored for incoming
        /// requests.</param>
        public GatewayProperties(NetworkRef sourceNetwork, NetworkRef destinationNetwork, string description = default(string), IList<TcpConfig> tcp = default(IList<TcpConfig>), IList<HttpConfig> http = default(IList<HttpConfig>), string status = default(string), string statusDetails = default(string), string ipAddress = default(string))
        {
            Description = description;
            SourceNetwork = sourceNetwork;
            DestinationNetwork = destinationNetwork;
            Tcp = tcp;
            Http = http;
            Status = status;
            StatusDetails = statusDetails;
            IpAddress = ipAddress;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets user readable description of the gateway.
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets network the gateway should listen on for requests.
        /// </summary>
        [JsonProperty(PropertyName = "sourceNetwork")]
        public NetworkRef SourceNetwork { get; set; }

        /// <summary>
        /// Gets or sets network that the Application is using.
        /// </summary>
        [JsonProperty(PropertyName = "destinationNetwork")]
        public NetworkRef DestinationNetwork { get; set; }

        /// <summary>
        /// Gets or sets configuration for tcp connectivity for this gateway.
        /// </summary>
        [JsonProperty(PropertyName = "tcp")]
        public IList<TcpConfig> Tcp { get; set; }

        /// <summary>
        /// Gets or sets configuration for http connectivity for this gateway.
        /// </summary>
        [JsonProperty(PropertyName = "http")]
        public IList<HttpConfig> Http { get; set; }

        /// <summary>
        /// Gets status of the resource. Possible values include: 'Unknown',
        /// 'Ready', 'Upgrading', 'Creating', 'Deleting', 'Failed'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; private set; }

        /// <summary>
        /// Gets gives additional information about the current status of the
        /// gateway.
        /// </summary>
        [JsonProperty(PropertyName = "statusDetails")]
        public string StatusDetails { get; private set; }

        /// <summary>
        /// Gets IP address of the gateway. This is populated in the response
        /// and is ignored for incoming requests.
        /// </summary>
        [JsonProperty(PropertyName = "ipAddress")]
        public string IpAddress { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (SourceNetwork == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SourceNetwork");
            }
            if (DestinationNetwork == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DestinationNetwork");
            }
            if (Tcp != null)
            {
                foreach (var element in Tcp)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (Http != null)
            {
                foreach (var element1 in Http)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
        }
    }
}
