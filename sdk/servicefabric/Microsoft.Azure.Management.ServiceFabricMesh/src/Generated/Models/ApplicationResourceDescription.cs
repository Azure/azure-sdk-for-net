// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ServiceFabricMesh.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// This type describes an application resource.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class ApplicationResourceDescription : TrackedResource
    {
        /// <summary>
        /// Initializes a new instance of the ApplicationResourceDescription
        /// class.
        /// </summary>
        public ApplicationResourceDescription()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ApplicationResourceDescription
        /// class.
        /// </summary>
        /// <param name="location">The geo-location where the resource
        /// lives</param>
        /// <param name="id">Fully qualified identifier for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}</param>
        /// <param name="name">The name of the resource</param>
        /// <param name="type">The type of the resource. Ex-
        /// Microsoft.Compute/virtualMachines or
        /// Microsoft.Storage/storageAccounts.</param>
        /// <param name="tags">Resource tags.</param>
        /// <param name="provisioningState">State of the resource.</param>
        /// <param name="description">User readable description of the
        /// application.</param>
        /// <param name="services">Describes the services in the application.
        /// This property is used to create or modify services of the
        /// application. On get only the name of the service is returned. The
        /// service description can be obtained by querying for the service
        /// resource.</param>
        /// <param name="diagnostics">Describes the diagnostics definition and
        /// usage for an application resource.</param>
        /// <param name="debugParams">Internal - used by Visual Studio to setup
        /// the debugging session on the local development environment.</param>
        /// <param name="serviceNames">Names of the services in the
        /// application.</param>
        /// <param name="status">Status of the application. Possible values
        /// include: 'Unknown', 'Ready', 'Upgrading', 'Creating', 'Deleting',
        /// 'Failed'</param>
        /// <param name="statusDetails">Gives additional information about the
        /// current status of the application.</param>
        /// <param name="healthState">Describes the health state of an
        /// application resource. Possible values include: 'Invalid', 'Ok',
        /// 'Warning', 'Error', 'Unknown'</param>
        /// <param name="unhealthyEvaluation">When the application's health
        /// state is not 'Ok', this additional details from service fabric
        /// Health Manager for the user to know why the application is marked
        /// unhealthy.</param>
        public ApplicationResourceDescription(string location, string id = default(string), string name = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string provisioningState = default(string), string description = default(string), IList<ServiceResourceDescription> services = default(IList<ServiceResourceDescription>), DiagnosticsDescription diagnostics = default(DiagnosticsDescription), string debugParams = default(string), IList<string> serviceNames = default(IList<string>), string status = default(string), string statusDetails = default(string), string healthState = default(string), string unhealthyEvaluation = default(string))
            : base(location, id, name, type, tags)
        {
            ProvisioningState = provisioningState;
            Description = description;
            Services = services;
            Diagnostics = diagnostics;
            DebugParams = debugParams;
            ServiceNames = serviceNames;
            Status = status;
            StatusDetails = statusDetails;
            HealthState = healthState;
            UnhealthyEvaluation = unhealthyEvaluation;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets state of the resource.
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets or sets user readable description of the application.
        /// </summary>
        [JsonProperty(PropertyName = "properties.description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets describes the services in the application. This
        /// property is used to create or modify services of the application.
        /// On get only the name of the service is returned. The service
        /// description can be obtained by querying for the service resource.
        /// </summary>
        [JsonProperty(PropertyName = "properties.services")]
        public IList<ServiceResourceDescription> Services { get; set; }

        /// <summary>
        /// Gets or sets describes the diagnostics definition and usage for an
        /// application resource.
        /// </summary>
        [JsonProperty(PropertyName = "properties.diagnostics")]
        public DiagnosticsDescription Diagnostics { get; set; }

        /// <summary>
        /// Gets or sets internal - used by Visual Studio to setup the
        /// debugging session on the local development environment.
        /// </summary>
        [JsonProperty(PropertyName = "properties.debugParams")]
        public string DebugParams { get; set; }

        /// <summary>
        /// Gets names of the services in the application.
        /// </summary>
        [JsonProperty(PropertyName = "properties.serviceNames")]
        public IList<string> ServiceNames { get; private set; }

        /// <summary>
        /// Gets status of the application. Possible values include: 'Unknown',
        /// 'Ready', 'Upgrading', 'Creating', 'Deleting', 'Failed'
        /// </summary>
        [JsonProperty(PropertyName = "properties.status")]
        public string Status { get; private set; }

        /// <summary>
        /// Gets gives additional information about the current status of the
        /// application.
        /// </summary>
        [JsonProperty(PropertyName = "properties.statusDetails")]
        public string StatusDetails { get; private set; }

        /// <summary>
        /// Gets describes the health state of an application resource.
        /// Possible values include: 'Invalid', 'Ok', 'Warning', 'Error',
        /// 'Unknown'
        /// </summary>
        [JsonProperty(PropertyName = "properties.healthState")]
        public string HealthState { get; private set; }

        /// <summary>
        /// Gets when the application's health state is not 'Ok', this
        /// additional details from service fabric Health Manager for the user
        /// to know why the application is marked unhealthy.
        /// </summary>
        [JsonProperty(PropertyName = "properties.unhealthyEvaluation")]
        public string UnhealthyEvaluation { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (Services != null)
            {
                foreach (var element in Services)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
