// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ServiceFabricMesh.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// This type describes a service resource.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class ServiceResourceDescription : ManagedProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the ServiceResourceDescription class.
        /// </summary>
        public ServiceResourceDescription()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ServiceResourceDescription class.
        /// </summary>
        /// <param name="osType">The operation system required by the code in
        /// service. Possible values include: 'Linux', 'Windows'</param>
        /// <param name="codePackages">Describes the set of code packages that
        /// forms the service. A code package describes the container and the
        /// properties for running it. All the code packages are started
        /// together on the same host and share the same context (network,
        /// process etc.).</param>
        /// <param name="id">Fully qualified identifier for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}</param>
        /// <param name="name">The name of the resource</param>
        /// <param name="type">The type of the resource. Ex-
        /// Microsoft.Compute/virtualMachines or
        /// Microsoft.Storage/storageAccounts.</param>
        /// <param name="provisioningState">State of the resource.</param>
        /// <param name="networkRefs">The names of the private networks that
        /// this service needs to be part of.</param>
        /// <param name="diagnostics">Reference to sinks in
        /// DiagnosticsDescription.</param>
        /// <param name="description">User readable description of the
        /// service.</param>
        /// <param name="replicaCount">The number of replicas of the service to
        /// create. Defaults to 1 if not specified.</param>
        /// <param name="autoScalingPolicies">Auto scaling policies</param>
        /// <param name="status">Status of the service. Possible values
        /// include: 'Unknown', 'Ready', 'Upgrading', 'Creating', 'Deleting',
        /// 'Failed'</param>
        /// <param name="statusDetails">Gives additional information about the
        /// current status of the service.</param>
        /// <param name="healthState">Describes the health state of an
        /// application resource. Possible values include: 'Invalid', 'Ok',
        /// 'Warning', 'Error', 'Unknown'</param>
        /// <param name="unhealthyEvaluation">When the service's health state
        /// is not 'Ok', this additional details from service fabric Health
        /// Manager for the user to know why the service is marked
        /// unhealthy.</param>
        public ServiceResourceDescription(string osType, IList<ContainerCodePackageProperties> codePackages, string id = default(string), string name = default(string), string type = default(string), string provisioningState = default(string), IList<NetworkRef> networkRefs = default(IList<NetworkRef>), DiagnosticsRef diagnostics = default(DiagnosticsRef), string description = default(string), int? replicaCount = default(int?), IList<AutoScalingPolicy> autoScalingPolicies = default(IList<AutoScalingPolicy>), string status = default(string), string statusDetails = default(string), string healthState = default(string), string unhealthyEvaluation = default(string))
            : base(id, name, type)
        {
            ProvisioningState = provisioningState;
            OsType = osType;
            CodePackages = codePackages;
            NetworkRefs = networkRefs;
            Diagnostics = diagnostics;
            Description = description;
            ReplicaCount = replicaCount;
            AutoScalingPolicies = autoScalingPolicies;
            Status = status;
            StatusDetails = statusDetails;
            HealthState = healthState;
            UnhealthyEvaluation = unhealthyEvaluation;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets state of the resource.
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets or sets the operation system required by the code in service.
        /// Possible values include: 'Linux', 'Windows'
        /// </summary>
        [JsonProperty(PropertyName = "properties.osType")]
        public string OsType { get; set; }

        /// <summary>
        /// Gets or sets describes the set of code packages that forms the
        /// service. A code package describes the container and the properties
        /// for running it. All the code packages are started together on the
        /// same host and share the same context (network, process etc.).
        /// </summary>
        [JsonProperty(PropertyName = "properties.codePackages")]
        public IList<ContainerCodePackageProperties> CodePackages { get; set; }

        /// <summary>
        /// Gets or sets the names of the private networks that this service
        /// needs to be part of.
        /// </summary>
        [JsonProperty(PropertyName = "properties.networkRefs")]
        public IList<NetworkRef> NetworkRefs { get; set; }

        /// <summary>
        /// Gets or sets reference to sinks in DiagnosticsDescription.
        /// </summary>
        [JsonProperty(PropertyName = "properties.diagnostics")]
        public DiagnosticsRef Diagnostics { get; set; }

        /// <summary>
        /// Gets or sets user readable description of the service.
        /// </summary>
        [JsonProperty(PropertyName = "properties.description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the number of replicas of the service to create.
        /// Defaults to 1 if not specified.
        /// </summary>
        [JsonProperty(PropertyName = "properties.replicaCount")]
        public int? ReplicaCount { get; set; }

        /// <summary>
        /// Gets or sets auto scaling policies
        /// </summary>
        [JsonProperty(PropertyName = "properties.autoScalingPolicies")]
        public IList<AutoScalingPolicy> AutoScalingPolicies { get; set; }

        /// <summary>
        /// Gets status of the service. Possible values include: 'Unknown',
        /// 'Ready', 'Upgrading', 'Creating', 'Deleting', 'Failed'
        /// </summary>
        [JsonProperty(PropertyName = "properties.status")]
        public string Status { get; private set; }

        /// <summary>
        /// Gets gives additional information about the current status of the
        /// service.
        /// </summary>
        [JsonProperty(PropertyName = "properties.statusDetails")]
        public string StatusDetails { get; private set; }

        /// <summary>
        /// Gets describes the health state of an application resource.
        /// Possible values include: 'Invalid', 'Ok', 'Warning', 'Error',
        /// 'Unknown'
        /// </summary>
        [JsonProperty(PropertyName = "properties.healthState")]
        public string HealthState { get; private set; }

        /// <summary>
        /// Gets when the service's health state is not 'Ok', this additional
        /// details from service fabric Health Manager for the user to know why
        /// the service is marked unhealthy.
        /// </summary>
        [JsonProperty(PropertyName = "properties.unhealthyEvaluation")]
        public string UnhealthyEvaluation { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (OsType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "OsType");
            }
            if (CodePackages == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "CodePackages");
            }
            if (CodePackages != null)
            {
                foreach (var element in CodePackages)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (AutoScalingPolicies != null)
            {
                foreach (var element1 in AutoScalingPolicies)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
        }
    }
}
