// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ServiceFabricMesh.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Describes the properties of a service replica.
    /// </summary>
    public partial class ServiceReplicaProperties
    {
        /// <summary>
        /// Initializes a new instance of the ServiceReplicaProperties class.
        /// </summary>
        public ServiceReplicaProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ServiceReplicaProperties class.
        /// </summary>
        /// <param name="osType">The operation system required by the code in
        /// service. Possible values include: 'Linux', 'Windows'</param>
        /// <param name="codePackages">Describes the set of code packages that
        /// forms the service. A code package describes the container and the
        /// properties for running it. All the code packages are started
        /// together on the same host and share the same context (network,
        /// process etc.).</param>
        /// <param name="networkRefs">The names of the private networks that
        /// this service needs to be part of.</param>
        /// <param name="diagnostics">Reference to sinks in
        /// DiagnosticsDescription.</param>
        public ServiceReplicaProperties(string osType, IList<ContainerCodePackageProperties> codePackages, IList<NetworkRef> networkRefs = default(IList<NetworkRef>), DiagnosticsRef diagnostics = default(DiagnosticsRef))
        {
            OsType = osType;
            CodePackages = codePackages;
            NetworkRefs = networkRefs;
            Diagnostics = diagnostics;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the operation system required by the code in service.
        /// Possible values include: 'Linux', 'Windows'
        /// </summary>
        [JsonProperty(PropertyName = "osType")]
        public string OsType { get; set; }

        /// <summary>
        /// Gets or sets describes the set of code packages that forms the
        /// service. A code package describes the container and the properties
        /// for running it. All the code packages are started together on the
        /// same host and share the same context (network, process etc.).
        /// </summary>
        [JsonProperty(PropertyName = "codePackages")]
        public IList<ContainerCodePackageProperties> CodePackages { get; set; }

        /// <summary>
        /// Gets or sets the names of the private networks that this service
        /// needs to be part of.
        /// </summary>
        [JsonProperty(PropertyName = "networkRefs")]
        public IList<NetworkRef> NetworkRefs { get; set; }

        /// <summary>
        /// Gets or sets reference to sinks in DiagnosticsDescription.
        /// </summary>
        [JsonProperty(PropertyName = "diagnostics")]
        public DiagnosticsRef Diagnostics { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (OsType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "OsType");
            }
            if (CodePackages == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "CodePackages");
            }
            if (CodePackages != null)
            {
                foreach (var element in CodePackages)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
