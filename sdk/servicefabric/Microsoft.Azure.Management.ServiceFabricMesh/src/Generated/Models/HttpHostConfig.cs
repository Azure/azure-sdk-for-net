// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ServiceFabricMesh.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Describes the hostname properties for http routing.
    /// </summary>
    public partial class HttpHostConfig
    {
        /// <summary>
        /// Initializes a new instance of the HttpHostConfig class.
        /// </summary>
        public HttpHostConfig()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the HttpHostConfig class.
        /// </summary>
        /// <param name="name">http hostname config name.</param>
        /// <param name="routes">Route information to use for routing. Routes
        /// are processed in the order they are specified. Specify routes that
        /// are more specific before routes that can handle general
        /// cases.</param>
        public HttpHostConfig(string name, IList<HttpRouteConfig> routes)
        {
            Name = name;
            Routes = routes;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets http hostname config name.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets route information to use for routing. Routes are
        /// processed in the order they are specified. Specify routes that are
        /// more specific before routes that can handle general cases.
        /// </summary>
        [JsonProperty(PropertyName = "routes")]
        public IList<HttpRouteConfig> Routes { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Routes == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Routes");
            }
            if (Routes != null)
            {
                foreach (var element in Routes)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
